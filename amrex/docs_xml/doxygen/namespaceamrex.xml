<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceamrex" kind="namespace" language="C++">
    <compoundname>amrex</compoundname>
    <innerclass refid="classamrex_1_1Amr" prot="public">amrex::Amr</innerclass>
    <innerclass refid="classamrex_1_1AmrLevel" prot="public">amrex::AmrLevel</innerclass>
    <innerclass refid="classamrex_1_1FillPatchIterator" prot="public">amrex::FillPatchIterator</innerclass>
    <innerclass refid="classamrex_1_1FillPatchIteratorHelper" prot="public">amrex::FillPatchIteratorHelper</innerclass>
    <innerclass refid="classamrex_1_1DeriveRec" prot="public">amrex::DeriveRec</innerclass>
    <innerclass refid="classamrex_1_1DeriveList" prot="public">amrex::DeriveList</innerclass>
    <innerclass refid="classamrex_1_1LevelBld" prot="public">amrex::LevelBld</innerclass>
    <innerclass refid="classamrex_1_1StateData" prot="public">amrex::StateData</innerclass>
    <innerclass refid="classamrex_1_1StateDataPhysBCFunct" prot="public">amrex::StateDataPhysBCFunct</innerclass>
    <innerclass refid="classamrex_1_1StateDescriptor" prot="public">amrex::StateDescriptor</innerclass>
    <innerclass refid="classamrex_1_1DescriptorList" prot="public">amrex::DescriptorList</innerclass>
    <innerclass refid="classamrex_1_1AmrCore" prot="public">amrex::AmrCore</innerclass>
    <innerclass refid="structamrex_1_1AmrInfo" prot="public">amrex::AmrInfo</innerclass>
    <innerclass refid="classamrex_1_1AmrMesh" prot="public">amrex::AmrMesh</innerclass>
    <innerclass refid="classamrex_1_1AmrParGDB" prot="public">amrex::AmrParGDB</innerclass>
    <innerclass refid="classamrex_1_1AmrParticleContainer" prot="public">amrex::AmrParticleContainer</innerclass>
    <innerclass refid="classamrex_1_1AmrTracerParticleContainer" prot="public">amrex::AmrTracerParticleContainer</innerclass>
    <innerclass refid="classamrex_1_1Cluster" prot="public">amrex::Cluster</innerclass>
    <innerclass refid="classamrex_1_1ClusterList" prot="public">amrex::ClusterList</innerclass>
    <innerclass refid="classamrex_1_1ErrorRec" prot="public">amrex::ErrorRec</innerclass>
    <innerclass refid="classamrex_1_1ErrorList" prot="public">amrex::ErrorList</innerclass>
    <innerclass refid="structamrex_1_1AMRErrorTagInfo" prot="public">amrex::AMRErrorTagInfo</innerclass>
    <innerclass refid="classamrex_1_1AMRErrorTag" prot="public">amrex::AMRErrorTag</innerclass>
    <innerclass refid="classamrex_1_1FillPatcher" prot="public">amrex::FillPatcher</innerclass>
    <innerclass refid="structamrex_1_1NullInterpHook" prot="public">amrex::NullInterpHook</innerclass>
    <innerclass refid="classamrex_1_1FluxRegister" prot="public">amrex::FluxRegister</innerclass>
    <innerclass refid="classamrex_1_1InterpolaterBoxCoarsener" prot="public">amrex::InterpolaterBoxCoarsener</innerclass>
    <innerclass refid="classamrex_1_1InterpBase" prot="public">amrex::InterpBase</innerclass>
    <innerclass refid="classamrex_1_1InterpFaceRegister" prot="public">amrex::InterpFaceRegister</innerclass>
    <innerclass refid="classamrex_1_1Interpolater" prot="public">amrex::Interpolater</innerclass>
    <innerclass refid="classamrex_1_1NodeBilinear" prot="public">amrex::NodeBilinear</innerclass>
    <innerclass refid="classamrex_1_1CellBilinear" prot="public">amrex::CellBilinear</innerclass>
    <innerclass refid="classamrex_1_1CellConservativeLinear" prot="public">amrex::CellConservativeLinear</innerclass>
    <innerclass refid="classamrex_1_1CellConservativeProtected" prot="public">amrex::CellConservativeProtected</innerclass>
    <innerclass refid="classamrex_1_1CellQuadratic" prot="public">amrex::CellQuadratic</innerclass>
    <innerclass refid="classamrex_1_1PCInterp" prot="public">amrex::PCInterp</innerclass>
    <innerclass refid="classamrex_1_1CellConservativeQuartic" prot="public">amrex::CellConservativeQuartic</innerclass>
    <innerclass refid="classamrex_1_1FaceDivFree" prot="public">amrex::FaceDivFree</innerclass>
    <innerclass refid="classamrex_1_1FaceLinear" prot="public">amrex::FaceLinear</innerclass>
    <innerclass refid="classamrex_1_1CellQuartic" prot="public">amrex::CellQuartic</innerclass>
    <innerclass refid="classamrex_1_1MFInterpolater" prot="public">amrex::MFInterpolater</innerclass>
    <innerclass refid="classamrex_1_1MFPCInterp" prot="public">amrex::MFPCInterp</innerclass>
    <innerclass refid="classamrex_1_1MFCellConsLinInterp" prot="public">amrex::MFCellConsLinInterp</innerclass>
    <innerclass refid="classamrex_1_1MFCellConsLinMinmaxLimitInterp" prot="public">amrex::MFCellConsLinMinmaxLimitInterp</innerclass>
    <innerclass refid="classamrex_1_1MFCellBilinear" prot="public">amrex::MFCellBilinear</innerclass>
    <innerclass refid="classamrex_1_1MFNodeBilinear" prot="public">amrex::MFNodeBilinear</innerclass>
    <innerclass refid="classamrex_1_1TagBox" prot="public">amrex::TagBox</innerclass>
    <innerclass refid="classamrex_1_1TagBoxArray" prot="public">amrex::TagBoxArray</innerclass>
    <innerclass refid="classamrex_1_1AMReX" prot="public">amrex::AMReX</innerclass>
    <innerclass refid="classamrex_1_1Any" prot="public">amrex::Any</innerclass>
    <innerclass refid="structamrex_1_1ArenaInfo" prot="public">amrex::ArenaInfo</innerclass>
    <innerclass refid="classamrex_1_1Arena" prot="public">amrex::Arena</innerclass>
    <innerclass refid="structamrex_1_1GpuArray" prot="public">amrex::GpuArray</innerclass>
    <innerclass refid="structamrex_1_1Array1D" prot="public">amrex::Array1D</innerclass>
    <innerclass refid="structamrex_1_1Array2D" prot="public">amrex::Array2D</innerclass>
    <innerclass refid="structamrex_1_1Array3D" prot="public">amrex::Array3D</innerclass>
    <innerclass refid="structamrex_1_1CellData" prot="public">amrex::CellData</innerclass>
    <innerclass refid="structamrex_1_1Array4" prot="public">amrex::Array4</innerclass>
    <innerclass refid="structamrex_1_1HasMultiComp" prot="public">amrex::HasMultiComp</innerclass>
    <innerclass refid="structamrex_1_1PolymorphicArray4" prot="public">amrex::PolymorphicArray4</innerclass>
    <innerclass refid="classamrex_1_1BackgroundThread" prot="public">amrex::BackgroundThread</innerclass>
    <innerclass refid="classamrex_1_1BArena" prot="public">amrex::BArena</innerclass>
    <innerclass refid="structamrex_1_1SrcComp" prot="public">amrex::SrcComp</innerclass>
    <innerclass refid="structamrex_1_1DestComp" prot="public">amrex::DestComp</innerclass>
    <innerclass refid="structamrex_1_1NumComps" prot="public">amrex::NumComps</innerclass>
    <innerclass refid="classamrex_1_1BaseFab" prot="public">amrex::BaseFab</innerclass>
    <innerclass refid="classamrex_1_1FabArray" prot="public">amrex::FabArray</innerclass>
    <innerclass refid="classamrex_1_1LayoutData" prot="public">amrex::LayoutData</innerclass>
    <innerclass refid="classamrex_1_1FabFactory" prot="public">amrex::FabFactory</innerclass>
    <innerclass refid="structamrex_1_1ParserExecutor" prot="public">amrex::ParserExecutor</innerclass>
    <innerclass refid="classamrex_1_1BCRec" prot="public">amrex::BCRec</innerclass>
    <innerclass refid="structamrex_1_1BLBackTrace" prot="public">amrex::BLBackTrace</innerclass>
    <innerclass refid="classamrex_1_1BLBTer" prot="public">amrex::BLBTer</innerclass>
    <innerclass refid="structamrex_1_1BlockMutex" prot="public">amrex::BlockMutex</innerclass>
    <innerclass refid="classamrex_1_1BLProfiler" prot="public">amrex::BLProfiler</innerclass>
    <innerclass refid="classamrex_1_1Box" prot="public">amrex::Box</innerclass>
    <innerclass refid="classamrex_1_1BoxCommHelper" prot="public">amrex::BoxCommHelper</innerclass>
    <innerclass refid="classamrex_1_1BoxConverter" prot="public">amrex::BoxConverter</innerclass>
    <innerclass refid="structamrex_1_1BARef" prot="public">amrex::BARef</innerclass>
    <innerclass refid="structamrex_1_1BATnull" prot="public">amrex::BATnull</innerclass>
    <innerclass refid="structamrex_1_1BATindexType" prot="public">amrex::BATindexType</innerclass>
    <innerclass refid="structamrex_1_1BATcoarsenRatio" prot="public">amrex::BATcoarsenRatio</innerclass>
    <innerclass refid="structamrex_1_1BATindexType__coarsenRatio" prot="public">amrex::BATindexType_coarsenRatio</innerclass>
    <innerclass refid="structamrex_1_1BATbndryReg" prot="public">amrex::BATbndryReg</innerclass>
    <innerclass refid="structamrex_1_1BATransformer" prot="public">amrex::BATransformer</innerclass>
    <innerclass refid="classamrex_1_1BoxArray" prot="public">amrex::BoxArray</innerclass>
    <innerclass refid="classamrex_1_1BoxDomain" prot="public">amrex::BoxDomain</innerclass>
    <innerclass refid="classamrex_1_1BoxIterator" prot="public">amrex::BoxIterator</innerclass>
    <innerclass refid="classamrex_1_1BoxList" prot="public">amrex::BoxList</innerclass>
    <innerclass refid="structamrex_1_1MemStat" prot="public">amrex::MemStat</innerclass>
    <innerclass refid="classamrex_1_1CArena" prot="public">amrex::CArena</innerclass>
    <innerclass refid="classamrex_1_1CoordSys" prot="public">amrex::CoordSys</innerclass>
    <innerclass refid="structamrex_1_1CompileTimeOptions" prot="public">amrex::CompileTimeOptions</innerclass>
    <innerclass refid="structamrex_1_1DataAllocator" prot="public">amrex::DataAllocator</innerclass>
    <innerclass refid="structamrex_1_1DataDeleter" prot="public">amrex::DataDeleter</innerclass>
    <innerclass refid="structamrex_1_1Dim3" prot="public">amrex::Dim3</innerclass>
    <innerclass refid="structamrex_1_1XDim3" prot="public">amrex::XDim3</innerclass>
    <innerclass refid="classamrex_1_1WeightedBox" prot="public">amrex::WeightedBox</innerclass>
    <innerclass refid="structamrex_1_1WeightedBoxList" prot="public">amrex::WeightedBoxList</innerclass>
    <innerclass refid="classamrex_1_1DistributionMapping" prot="public">amrex::DistributionMapping</innerclass>
    <innerclass refid="structamrex_1_1MFInfo" prot="public">amrex::MFInfo</innerclass>
    <innerclass refid="structamrex_1_1TheFaArenaDeleter" prot="public">amrex::TheFaArenaDeleter</innerclass>
    <innerclass refid="structamrex_1_1FBData" prot="public">amrex::FBData</innerclass>
    <innerclass refid="structamrex_1_1PCData" prot="public">amrex::PCData</innerclass>
    <innerclass refid="structamrex_1_1MultiArray4" prot="public">amrex::MultiArray4</innerclass>
    <innerclass refid="classamrex_1_1FabArrayBase" prot="public">amrex::FabArrayBase</innerclass>
    <innerclass refid="classamrex_1_1IntDescriptor" prot="public">amrex::IntDescriptor</innerclass>
    <innerclass refid="classamrex_1_1RealDescriptor" prot="public">amrex::RealDescriptor</innerclass>
    <innerclass refid="structamrex_1_1FabInfo" prot="public">amrex::FabInfo</innerclass>
    <innerclass refid="classamrex_1_1DefaultFabFactory" prot="public">amrex::DefaultFabFactory</innerclass>
    <innerclass refid="classamrex_1_1FillBoxId" prot="public">amrex::FillBoxId</innerclass>
    <innerclass refid="classamrex_1_1FabArrayId" prot="public">amrex::FabArrayId</innerclass>
    <innerclass refid="structamrex_1_1FabCopyDescriptor" prot="public">amrex::FabCopyDescriptor</innerclass>
    <innerclass refid="classamrex_1_1FabArrayCopyDescriptor" prot="public">amrex::FabArrayCopyDescriptor</innerclass>
    <innerclass refid="classamrex_1_1FABio__8bit" prot="public">amrex::FABio_8bit</innerclass>
    <innerclass refid="classamrex_1_1FABio__ascii" prot="public">amrex::FABio_ascii</innerclass>
    <innerclass refid="classamrex_1_1FABio" prot="public">amrex::FABio</innerclass>
    <innerclass refid="classamrex_1_1FABio__binary" prot="public">amrex::FABio_binary</innerclass>
    <innerclass refid="classamrex_1_1FArrayBox" prot="public">amrex::FArrayBox</innerclass>
    <innerclass refid="classamrex_1_1FEIntegrator" prot="public">amrex::FEIntegrator</innerclass>
    <innerclass refid="structamrex_1_1FilccCell" prot="public">amrex::FilccCell</innerclass>
    <innerclass refid="structamrex_1_1FilfcFace" prot="public">amrex::FilfcFace</innerclass>
    <innerclass refid="classamrex_1_1ForkJoin" prot="public">amrex::ForkJoin</innerclass>
    <innerclass refid="classamrex_1_1FPC" prot="public">amrex::FPC</innerclass>
    <innerclass refid="structamrex_1_1Plus" prot="public">amrex::Plus</innerclass>
    <innerclass refid="structamrex_1_1Minus" prot="public">amrex::Minus</innerclass>
    <innerclass refid="structamrex_1_1Minimum" prot="public">amrex::Minimum</innerclass>
    <innerclass refid="structamrex_1_1Maximum" prot="public">amrex::Maximum</innerclass>
    <innerclass refid="structamrex_1_1LogicalAnd" prot="public">amrex::LogicalAnd</innerclass>
    <innerclass refid="structamrex_1_1LogicalOr" prot="public">amrex::LogicalOr</innerclass>
    <innerclass refid="structamrex_1_1GeometryData" prot="public">amrex::GeometryData</innerclass>
    <innerclass refid="classamrex_1_1Geometry" prot="public">amrex::Geometry</innerclass>
    <innerclass refid="structamrex_1_1RunOnGpu" prot="public">amrex::RunOnGpu</innerclass>
    <innerclass refid="structamrex_1_1IsPolymorphicArenaAllocator" prot="public">amrex::IsPolymorphicArenaAllocator</innerclass>
    <innerclass refid="structamrex_1_1ArenaAllocatorTraits" prot="public">amrex::ArenaAllocatorTraits</innerclass>
    <innerclass refid="classamrex_1_1ArenaAllocator" prot="public">amrex::ArenaAllocator</innerclass>
    <innerclass refid="classamrex_1_1DeviceArenaAllocator" prot="public">amrex::DeviceArenaAllocator</innerclass>
    <innerclass refid="classamrex_1_1PinnedArenaAllocator" prot="public">amrex::PinnedArenaAllocator</innerclass>
    <innerclass refid="classamrex_1_1ManagedArenaAllocator" prot="public">amrex::ManagedArenaAllocator</innerclass>
    <innerclass refid="classamrex_1_1AsyncArenaAllocator" prot="public">amrex::AsyncArenaAllocator</innerclass>
    <innerclass refid="classamrex_1_1PolymorphicArenaAllocator" prot="public">amrex::PolymorphicArenaAllocator</innerclass>
    <innerclass refid="classamrex_1_1PolymorphicAllocator" prot="public">amrex::PolymorphicAllocator</innerclass>
    <innerclass refid="structamrex_1_1RunOnGpu_3_01ArenaAllocator_3_01T_01_4_01_4" prot="public">amrex::RunOnGpu&lt; ArenaAllocator&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1RunOnGpu_3_01DeviceArenaAllocator_3_01T_01_4_01_4" prot="public">amrex::RunOnGpu&lt; DeviceArenaAllocator&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1RunOnGpu_3_01ManagedArenaAllocator_3_01T_01_4_01_4" prot="public">amrex::RunOnGpu&lt; ManagedArenaAllocator&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1RunOnGpu_3_01AsyncArenaAllocator_3_01T_01_4_01_4" prot="public">amrex::RunOnGpu&lt; AsyncArenaAllocator&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1IsPolymorphicArenaAllocator_3_01PolymorphicArenaAllocator_3_01T_01_4_01_4" prot="public">amrex::IsPolymorphicArenaAllocator&lt; PolymorphicArenaAllocator&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1GpuComplex" prot="public">amrex::GpuComplex</innerclass>
    <innerclass refid="classamrex_1_1IFABio" prot="public">amrex::IFABio</innerclass>
    <innerclass refid="classamrex_1_1IArrayBox" prot="public">amrex::IArrayBox</innerclass>
    <innerclass refid="classamrex_1_1iMultiFab" prot="public">amrex::iMultiFab</innerclass>
    <innerclass refid="classamrex_1_1IndexType" prot="public">amrex::IndexType</innerclass>
    <innerclass refid="structamrex_1_1IntegratorOps" prot="public">amrex::IntegratorOps</innerclass>
    <innerclass refid="structamrex_1_1IntegratorOps_3_01T_00_01typename_01std_1_1enable__if_3_01std_1_1is__same_3_01amr6a366de993e1749d95c6327fd001f089" prot="public">amrex::IntegratorOps&lt; T, typename std::enable_if&lt; std::is_same&lt; amrex::Vector&lt; amrex::MultiFab &gt;, T &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structamrex_1_1IntegratorOps_3_01T_00_01typename_01std_1_1enable__if_3_01std_1_1is__same_3_01amr09a2cac7fed17a511fab4f6be5ebe511" prot="public">amrex::IntegratorOps&lt; T, typename std::enable_if&lt; std::is_same&lt; amrex::MultiFab, T &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="classamrex_1_1IntegratorBase" prot="public">amrex::IntegratorBase</innerclass>
    <innerclass refid="classamrex_1_1IntVect" prot="public">amrex::IntVect</innerclass>
    <innerclass refid="classamrex_1_1MemProfiler" prot="public">amrex::MemProfiler</innerclass>
    <innerclass refid="classamrex_1_1MultiFabCopyDescriptor" prot="public">amrex::MultiFabCopyDescriptor</innerclass>
    <innerclass refid="structamrex_1_1MFItInfo" prot="public">amrex::MFItInfo</innerclass>
    <innerclass refid="classamrex_1_1MFIter" prot="public">amrex::MFIter</innerclass>
    <innerclass refid="structamrex_1_1TileSize" prot="public">amrex::TileSize</innerclass>
    <innerclass refid="structamrex_1_1DynamicTiling" prot="public">amrex::DynamicTiling</innerclass>
    <innerclass refid="classamrex_1_1MultiFab" prot="public">amrex::MultiFab</innerclass>
    <innerclass refid="classamrex_1_1NFilesIter" prot="public">amrex::NFilesIter</innerclass>
    <innerclass refid="classamrex_1_1Orientation" prot="public">amrex::Orientation</innerclass>
    <innerclass refid="classamrex_1_1OrientationIter" prot="public">amrex::OrientationIter</innerclass>
    <innerclass refid="classamrex_1_1PArena" prot="public">amrex::PArena</innerclass>
    <innerclass refid="classamrex_1_1ParmParse" prot="public">amrex::ParmParse</innerclass>
    <innerclass refid="classamrex_1_1Periodicity" prot="public">amrex::Periodicity</innerclass>
    <innerclass refid="classamrex_1_1BndryFuncArray" prot="public">amrex::BndryFuncArray</innerclass>
    <innerclass refid="classamrex_1_1GpuBndryFuncFab" prot="public">amrex::GpuBndryFuncFab</innerclass>
    <innerclass refid="classamrex_1_1CpuBndryFuncFab" prot="public">amrex::CpuBndryFuncFab</innerclass>
    <innerclass refid="classamrex_1_1PhysBCFunctNoOp" prot="public">amrex::PhysBCFunctNoOp</innerclass>
    <innerclass refid="classamrex_1_1PhysBCFunct" prot="public">amrex::PhysBCFunct</innerclass>
    <innerclass refid="classamrex_1_1PlotFileDataImpl" prot="public">amrex::PlotFileDataImpl</innerclass>
    <innerclass refid="classamrex_1_1PlotFileData" prot="public">amrex::PlotFileData</innerclass>
    <innerclass refid="classamrex_1_1PODVector" prot="public">amrex::PODVector</innerclass>
    <innerclass refid="classamrex_1_1Print" prot="public">amrex::Print</innerclass>
    <innerclass refid="classamrex_1_1AllPrint" prot="public">amrex::AllPrint</innerclass>
    <innerclass refid="classamrex_1_1PrintToFile" prot="public">amrex::PrintToFile</innerclass>
    <innerclass refid="classamrex_1_1AllPrintToFile" prot="public">amrex::AllPrintToFile</innerclass>
    <innerclass refid="structamrex_1_1RandomEngine" prot="public">amrex::RandomEngine</innerclass>
    <innerclass refid="classamrex_1_1RealBox" prot="public">amrex::RealBox</innerclass>
    <innerclass refid="classamrex_1_1RealVect" prot="public">amrex::RealVect</innerclass>
    <innerclass refid="structamrex_1_1ReduceOpSum" prot="public">amrex::ReduceOpSum</innerclass>
    <innerclass refid="structamrex_1_1ReduceOpMin" prot="public">amrex::ReduceOpMin</innerclass>
    <innerclass refid="structamrex_1_1ReduceOpMax" prot="public">amrex::ReduceOpMax</innerclass>
    <innerclass refid="structamrex_1_1ReduceOpLogicalAnd" prot="public">amrex::ReduceOpLogicalAnd</innerclass>
    <innerclass refid="structamrex_1_1ReduceOpLogicalOr" prot="public">amrex::ReduceOpLogicalOr</innerclass>
    <innerclass refid="classamrex_1_1ReduceOps" prot="public">amrex::ReduceOps</innerclass>
    <innerclass refid="classamrex_1_1ReduceData" prot="public">amrex::ReduceData</innerclass>
    <innerclass refid="classamrex_1_1RKIntegrator" prot="public">amrex::RKIntegrator</innerclass>
    <innerclass refid="structamrex_1_1Table1D" prot="public">amrex::Table1D</innerclass>
    <innerclass refid="structamrex_1_1Table2D" prot="public">amrex::Table2D</innerclass>
    <innerclass refid="structamrex_1_1Table3D" prot="public">amrex::Table3D</innerclass>
    <innerclass refid="structamrex_1_1Table4D" prot="public">amrex::Table4D</innerclass>
    <innerclass refid="classamrex_1_1TableData" prot="public">amrex::TableData</innerclass>
    <innerclass refid="structamrex_1_1Array4PairTag" prot="public">amrex::Array4PairTag</innerclass>
    <innerclass refid="structamrex_1_1Array4CopyTag" prot="public">amrex::Array4CopyTag</innerclass>
    <innerclass refid="structamrex_1_1Array4MaskCopyTag" prot="public">amrex::Array4MaskCopyTag</innerclass>
    <innerclass refid="structamrex_1_1Array4Tag" prot="public">amrex::Array4Tag</innerclass>
    <innerclass refid="structamrex_1_1Array4BoxTag" prot="public">amrex::Array4BoxTag</innerclass>
    <innerclass refid="structamrex_1_1Array4BoxValTag" prot="public">amrex::Array4BoxValTag</innerclass>
    <innerclass refid="structamrex_1_1VectorTag" prot="public">amrex::VectorTag</innerclass>
    <innerclass refid="classamrex_1_1TimeIntegrator" prot="public">amrex::TimeIntegrator</innerclass>
    <innerclass refid="classamrex_1_1TinyProfiler" prot="public">amrex::TinyProfiler</innerclass>
    <innerclass refid="classamrex_1_1TinyProfileRegion" prot="public">amrex::TinyProfileRegion</innerclass>
    <innerclass refid="classamrex_1_1GpuTuple" prot="public">amrex::GpuTuple</innerclass>
    <innerclass refid="structamrex_1_1GpuTupleSize" prot="public">amrex::GpuTupleSize</innerclass>
    <innerclass refid="structamrex_1_1GpuTupleSize_3_01GpuTuple_3_01Ts_8_8_8_01_4_01_4" prot="public">amrex::GpuTupleSize&lt; GpuTuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1GpuTupleElement" prot="public">amrex::GpuTupleElement</innerclass>
    <innerclass refid="structamrex_1_1GpuTupleElement_3_01I_00_01GpuTuple_3_01Head_00_01Tail_8_8_8_01_4_01_4" prot="public">amrex::GpuTupleElement&lt; I, GpuTuple&lt; Head, Tail... &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1GpuTupleElement_3_010_00_01GpuTuple_3_01Head_00_01Tail_8_8_8_01_4_01_4" prot="public">amrex::GpuTupleElement&lt; 0, GpuTuple&lt; Head, Tail... &gt; &gt;</innerclass>
    <innerclass refid="structamrex_1_1TypeList" prot="public">amrex::TypeList</innerclass>
    <innerclass refid="structamrex_1_1IsBaseFab" prot="public">amrex::IsBaseFab</innerclass>
    <innerclass refid="structamrex_1_1IsBaseFab_3_01D_00_01typename_01std_1_1enable__if_3_01std_1_1is__base__of_3_01Basc4401839a878456c6d47850080d07e31" prot="public">amrex::IsBaseFab&lt; D, typename std::enable_if&lt; std::is_base_of&lt; BaseFab&lt; typename D::value_type &gt;, D &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structamrex_1_1IsFabArray" prot="public">amrex::IsFabArray</innerclass>
    <innerclass refid="structamrex_1_1IsFabArray_3_01D_00_01typename_01std_1_1enable__if_3_01std_1_1is__base__of_3_01Fa50eb808c2316c63b70b55cab20dbec23" prot="public">amrex::IsFabArray&lt; D, typename std::enable_if&lt; std::is_base_of&lt; FabArray&lt; typename D::FABType::value_type &gt;, D &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structamrex_1_1HasAtomicAdd" prot="public">amrex::HasAtomicAdd</innerclass>
    <innerclass refid="structamrex_1_1HasAtomicAdd_3_01int_01_4" prot="public">amrex::HasAtomicAdd&lt; int &gt;</innerclass>
    <innerclass refid="structamrex_1_1HasAtomicAdd_3_01long_01_4" prot="public">amrex::HasAtomicAdd&lt; long &gt;</innerclass>
    <innerclass refid="structamrex_1_1HasAtomicAdd_3_01unsigned_01int_01_4" prot="public">amrex::HasAtomicAdd&lt; unsigned int &gt;</innerclass>
    <innerclass refid="structamrex_1_1HasAtomicAdd_3_01unsigned_01long_01long_01_4" prot="public">amrex::HasAtomicAdd&lt; unsigned long long &gt;</innerclass>
    <innerclass refid="structamrex_1_1HasAtomicAdd_3_01float_01_4" prot="public">amrex::HasAtomicAdd&lt; float &gt;</innerclass>
    <innerclass refid="structamrex_1_1HasAtomicAdd_3_01double_01_4" prot="public">amrex::HasAtomicAdd&lt; double &gt;</innerclass>
    <innerclass refid="structamrex_1_1IsMultiFabIterator" prot="public">amrex::IsMultiFabIterator</innerclass>
    <innerclass refid="structamrex_1_1MaybeDeviceRunnable" prot="public">amrex::MaybeDeviceRunnable</innerclass>
    <innerclass refid="structamrex_1_1MaybeHostDeviceRunnable" prot="public">amrex::MaybeHostDeviceRunnable</innerclass>
    <innerclass refid="structamrex_1_1DefinitelyNotHostRunnable" prot="public">amrex::DefinitelyNotHostRunnable</innerclass>
    <innerclass refid="structamrex_1_1Same" prot="public">amrex::Same</innerclass>
    <innerclass refid="structamrex_1_1Same_3_01T_00_01U_01_4" prot="public">amrex::Same&lt; T, U &gt;</innerclass>
    <innerclass refid="structamrex_1_1IsCallable" prot="public">amrex::IsCallable</innerclass>
    <innerclass refid="structamrex_1_1IsCallableR" prot="public">amrex::IsCallableR</innerclass>
    <innerclass refid="structamrex_1_1Conjunction" prot="public">amrex::Conjunction</innerclass>
    <innerclass refid="structamrex_1_1Conjunction_3_01B1_01_4" prot="public">amrex::Conjunction&lt; B1 &gt;</innerclass>
    <innerclass refid="structamrex_1_1Conjunction_3_01B1_00_01Bn_8_8_8_01_4" prot="public">amrex::Conjunction&lt; B1, Bn... &gt;</innerclass>
    <innerclass refid="structamrex_1_1Disjunction" prot="public">amrex::Disjunction</innerclass>
    <innerclass refid="structamrex_1_1Disjunction_3_01B1_01_4" prot="public">amrex::Disjunction&lt; B1 &gt;</innerclass>
    <innerclass refid="structamrex_1_1Disjunction_3_01B1_00_01Bn_8_8_8_01_4" prot="public">amrex::Disjunction&lt; B1, Bn... &gt;</innerclass>
    <innerclass refid="structamrex_1_1IsStoreAtomic" prot="public">amrex::IsStoreAtomic</innerclass>
    <innerclass refid="classamrex_1_1expect" prot="public">amrex::expect</innerclass>
    <innerclass refid="classamrex_1_1StreamRetry" prot="public">amrex::StreamRetry</innerclass>
    <innerclass refid="structamrex_1_1ValLocPair" prot="public">amrex::ValLocPair</innerclass>
    <innerclass refid="classamrex_1_1Vector" prot="public">amrex::Vector</innerclass>
    <innerclass refid="classamrex_1_1VisMF" prot="public">amrex::VisMF</innerclass>
    <innerclass refid="classamrex_1_1VisMFBuffer" prot="public">amrex::VisMFBuffer</innerclass>
    <innerclass refid="structamrex_1_1IParserExecutor" prot="public">amrex::IParserExecutor</innerclass>
    <innerclass refid="classamrex_1_1IParser" prot="public">amrex::IParser</innerclass>
    <innerclass refid="structamrex_1_1IParserExeNull" prot="public">amrex::IParserExeNull</innerclass>
    <innerclass refid="structamrex_1_1IParserExeNumber" prot="public">amrex::IParserExeNumber</innerclass>
    <innerclass refid="structamrex_1_1IParserExeSymbol" prot="public">amrex::IParserExeSymbol</innerclass>
    <innerclass refid="structamrex_1_1IParserExeADD" prot="public">amrex::IParserExeADD</innerclass>
    <innerclass refid="structamrex_1_1IParserExeSUB" prot="public">amrex::IParserExeSUB</innerclass>
    <innerclass refid="structamrex_1_1IParserExeMUL" prot="public">amrex::IParserExeMUL</innerclass>
    <innerclass refid="structamrex_1_1IParserExeDIV__F" prot="public">amrex::IParserExeDIV_F</innerclass>
    <innerclass refid="structamrex_1_1IParserExeDIV__B" prot="public">amrex::IParserExeDIV_B</innerclass>
    <innerclass refid="structamrex_1_1IParserExeNEG" prot="public">amrex::IParserExeNEG</innerclass>
    <innerclass refid="structamrex_1_1IParserExeF1" prot="public">amrex::IParserExeF1</innerclass>
    <innerclass refid="structamrex_1_1IParserExeF2__F" prot="public">amrex::IParserExeF2_F</innerclass>
    <innerclass refid="structamrex_1_1IParserExeF2__B" prot="public">amrex::IParserExeF2_B</innerclass>
    <innerclass refid="structamrex_1_1IParserExeADD__VP" prot="public">amrex::IParserExeADD_VP</innerclass>
    <innerclass refid="structamrex_1_1IParserExeSUB__VP" prot="public">amrex::IParserExeSUB_VP</innerclass>
    <innerclass refid="structamrex_1_1IParserExeMUL__VP" prot="public">amrex::IParserExeMUL_VP</innerclass>
    <innerclass refid="structamrex_1_1IParserExeDIV__VP" prot="public">amrex::IParserExeDIV_VP</innerclass>
    <innerclass refid="structamrex_1_1IParserExeDIV__PV" prot="public">amrex::IParserExeDIV_PV</innerclass>
    <innerclass refid="structamrex_1_1IParserExeADD__PP" prot="public">amrex::IParserExeADD_PP</innerclass>
    <innerclass refid="structamrex_1_1IParserExeSUB__PP" prot="public">amrex::IParserExeSUB_PP</innerclass>
    <innerclass refid="structamrex_1_1IParserExeMUL__PP" prot="public">amrex::IParserExeMUL_PP</innerclass>
    <innerclass refid="structamrex_1_1IParserExeDIV__PP" prot="public">amrex::IParserExeDIV_PP</innerclass>
    <innerclass refid="structamrex_1_1IParserExeNEG__P" prot="public">amrex::IParserExeNEG_P</innerclass>
    <innerclass refid="structamrex_1_1IParserExeADD__VN" prot="public">amrex::IParserExeADD_VN</innerclass>
    <innerclass refid="structamrex_1_1IParserExeSUB__VN" prot="public">amrex::IParserExeSUB_VN</innerclass>
    <innerclass refid="structamrex_1_1IParserExeMUL__VN" prot="public">amrex::IParserExeMUL_VN</innerclass>
    <innerclass refid="structamrex_1_1IParserExeDIV__VN" prot="public">amrex::IParserExeDIV_VN</innerclass>
    <innerclass refid="structamrex_1_1IParserExeDIV__NV" prot="public">amrex::IParserExeDIV_NV</innerclass>
    <innerclass refid="structamrex_1_1IParserExeADD__PN" prot="public">amrex::IParserExeADD_PN</innerclass>
    <innerclass refid="structamrex_1_1IParserExeSUB__PN" prot="public">amrex::IParserExeSUB_PN</innerclass>
    <innerclass refid="structamrex_1_1IParserExeMUL__PN" prot="public">amrex::IParserExeMUL_PN</innerclass>
    <innerclass refid="structamrex_1_1IParserExeDIV__PN" prot="public">amrex::IParserExeDIV_PN</innerclass>
    <innerclass refid="structamrex_1_1IParserExeIF" prot="public">amrex::IParserExeIF</innerclass>
    <innerclass refid="structamrex_1_1IParserExeJUMP" prot="public">amrex::IParserExeJUMP</innerclass>
    <innerclass refid="structamrex_1_1IParserStack" prot="public">amrex::IParserStack</innerclass>
    <innerclass refid="unionamrex_1_1iparser__nvp" prot="public">amrex::iparser_nvp</innerclass>
    <innerclass refid="structamrex_1_1iparser__node" prot="public">amrex::iparser_node</innerclass>
    <innerclass refid="structamrex_1_1iparser__number" prot="public">amrex::iparser_number</innerclass>
    <innerclass refid="structamrex_1_1iparser__symbol" prot="public">amrex::iparser_symbol</innerclass>
    <innerclass refid="structamrex_1_1iparser__f1" prot="public">amrex::iparser_f1</innerclass>
    <innerclass refid="structamrex_1_1iparser__f2" prot="public">amrex::iparser_f2</innerclass>
    <innerclass refid="structamrex_1_1iparser__f3" prot="public">amrex::iparser_f3</innerclass>
    <innerclass refid="structamrex_1_1iparser__assign" prot="public">amrex::iparser_assign</innerclass>
    <innerclass refid="structamrex_1_1amrex__iparser" prot="public">amrex::amrex_iparser</innerclass>
    <innerclass refid="classamrex_1_1Parser" prot="public">amrex::Parser</innerclass>
    <innerclass refid="structamrex_1_1ParserExeNull" prot="public">amrex::ParserExeNull</innerclass>
    <innerclass refid="structamrex_1_1ParserExeNumber" prot="public">amrex::ParserExeNumber</innerclass>
    <innerclass refid="structamrex_1_1ParserExeSymbol" prot="public">amrex::ParserExeSymbol</innerclass>
    <innerclass refid="structamrex_1_1ParserExeADD" prot="public">amrex::ParserExeADD</innerclass>
    <innerclass refid="structamrex_1_1ParserExeSUB" prot="public">amrex::ParserExeSUB</innerclass>
    <innerclass refid="structamrex_1_1ParserExeMUL" prot="public">amrex::ParserExeMUL</innerclass>
    <innerclass refid="structamrex_1_1ParserExeDIV__F" prot="public">amrex::ParserExeDIV_F</innerclass>
    <innerclass refid="structamrex_1_1ParserExeDIV__B" prot="public">amrex::ParserExeDIV_B</innerclass>
    <innerclass refid="structamrex_1_1ParserExeNEG" prot="public">amrex::ParserExeNEG</innerclass>
    <innerclass refid="structamrex_1_1ParserExeF1" prot="public">amrex::ParserExeF1</innerclass>
    <innerclass refid="structamrex_1_1ParserExeF2__F" prot="public">amrex::ParserExeF2_F</innerclass>
    <innerclass refid="structamrex_1_1ParserExeF2__B" prot="public">amrex::ParserExeF2_B</innerclass>
    <innerclass refid="structamrex_1_1ParserExeADD__VP" prot="public">amrex::ParserExeADD_VP</innerclass>
    <innerclass refid="structamrex_1_1ParserExeSUB__VP" prot="public">amrex::ParserExeSUB_VP</innerclass>
    <innerclass refid="structamrex_1_1ParserExeMUL__VP" prot="public">amrex::ParserExeMUL_VP</innerclass>
    <innerclass refid="structamrex_1_1ParserExeDIV__VP" prot="public">amrex::ParserExeDIV_VP</innerclass>
    <innerclass refid="structamrex_1_1ParserExeADD__PP" prot="public">amrex::ParserExeADD_PP</innerclass>
    <innerclass refid="structamrex_1_1ParserExeSUB__PP" prot="public">amrex::ParserExeSUB_PP</innerclass>
    <innerclass refid="structamrex_1_1ParserExeMUL__PP" prot="public">amrex::ParserExeMUL_PP</innerclass>
    <innerclass refid="structamrex_1_1ParserExeDIV__PP" prot="public">amrex::ParserExeDIV_PP</innerclass>
    <innerclass refid="structamrex_1_1ParserExeNEG__P" prot="public">amrex::ParserExeNEG_P</innerclass>
    <innerclass refid="structamrex_1_1ParserExeADD__VN" prot="public">amrex::ParserExeADD_VN</innerclass>
    <innerclass refid="structamrex_1_1ParserExeSUB__VN" prot="public">amrex::ParserExeSUB_VN</innerclass>
    <innerclass refid="structamrex_1_1ParserExeMUL__VN" prot="public">amrex::ParserExeMUL_VN</innerclass>
    <innerclass refid="structamrex_1_1ParserExeDIV__VN" prot="public">amrex::ParserExeDIV_VN</innerclass>
    <innerclass refid="structamrex_1_1ParserExeADD__PN" prot="public">amrex::ParserExeADD_PN</innerclass>
    <innerclass refid="structamrex_1_1ParserExeSUB__PN" prot="public">amrex::ParserExeSUB_PN</innerclass>
    <innerclass refid="structamrex_1_1ParserExeMUL__PN" prot="public">amrex::ParserExeMUL_PN</innerclass>
    <innerclass refid="structamrex_1_1ParserExeDIV__PN" prot="public">amrex::ParserExeDIV_PN</innerclass>
    <innerclass refid="structamrex_1_1ParserExeIF" prot="public">amrex::ParserExeIF</innerclass>
    <innerclass refid="structamrex_1_1ParserExeJUMP" prot="public">amrex::ParserExeJUMP</innerclass>
    <innerclass refid="structamrex_1_1ParserStack" prot="public">amrex::ParserStack</innerclass>
    <innerclass refid="unionamrex_1_1parser__nvp" prot="public">amrex::parser_nvp</innerclass>
    <innerclass refid="structamrex_1_1parser__node" prot="public">amrex::parser_node</innerclass>
    <innerclass refid="structamrex_1_1parser__number" prot="public">amrex::parser_number</innerclass>
    <innerclass refid="structamrex_1_1parser__symbol" prot="public">amrex::parser_symbol</innerclass>
    <innerclass refid="structamrex_1_1parser__f1" prot="public">amrex::parser_f1</innerclass>
    <innerclass refid="structamrex_1_1parser__f2" prot="public">amrex::parser_f2</innerclass>
    <innerclass refid="structamrex_1_1parser__f3" prot="public">amrex::parser_f3</innerclass>
    <innerclass refid="structamrex_1_1parser__assign" prot="public">amrex::parser_assign</innerclass>
    <innerclass refid="structamrex_1_1amrex__parser" prot="public">amrex::amrex_parser</innerclass>
    <innerclass refid="classamrex_1_1BndryDataT" prot="public">amrex::BndryDataT</innerclass>
    <innerclass refid="classamrex_1_1BndryRegisterT" prot="public">amrex::BndryRegisterT</innerclass>
    <innerclass refid="classamrex_1_1BoundCond" prot="public">amrex::BoundCond</innerclass>
    <innerclass refid="classamrex_1_1FabSetT" prot="public">amrex::FabSetT</innerclass>
    <innerclass refid="classamrex_1_1FabSetIter" prot="public">amrex::FabSetIter</innerclass>
    <innerclass refid="classamrex_1_1InterpBndryDataT" prot="public">amrex::InterpBndryDataT</innerclass>
    <innerclass refid="classamrex_1_1Mask" prot="public">amrex::Mask</innerclass>
    <innerclass refid="classamrex_1_1MultiMask" prot="public">amrex::MultiMask</innerclass>
    <innerclass refid="classamrex_1_1MultiMaskIter" prot="public">amrex::MultiMaskIter</innerclass>
    <innerclass refid="classamrex_1_1YAFluxRegisterT" prot="public">amrex::YAFluxRegisterT</innerclass>
    <innerclass refid="classamrex_1_1distFcnElement2d" prot="public">amrex::distFcnElement2d</innerclass>
    <innerclass refid="classamrex_1_1LineDistFcnElement2d" prot="public">amrex::LineDistFcnElement2d</innerclass>
    <innerclass refid="classamrex_1_1SplineDistFcnElement2d" prot="public">amrex::SplineDistFcnElement2d</innerclass>
    <innerclass refid="structamrex_1_1GPUable" prot="public">amrex::GPUable</innerclass>
    <innerclass refid="classamrex_1_1STLtools" prot="public">amrex::STLtools</innerclass>
    <innerclass refid="classamrex_1_1EBCellFlag" prot="public">amrex::EBCellFlag</innerclass>
    <innerclass refid="structamrex_1_1IsStoreAtomic_3_01EBCellFlag_01_4" prot="public">amrex::IsStoreAtomic&lt; EBCellFlag &gt;</innerclass>
    <innerclass refid="classamrex_1_1EBCellFlagFab" prot="public">amrex::EBCellFlagFab</innerclass>
    <innerclass refid="classamrex_1_1EBDataCollection" prot="public">amrex::EBDataCollection</innerclass>
    <innerclass refid="classamrex_1_1EBFArrayBoxFactory" prot="public">amrex::EBFArrayBoxFactory</innerclass>
    <innerclass refid="classamrex_1_1EBFArrayBox" prot="public">amrex::EBFArrayBox</innerclass>
    <innerclass refid="classamrex_1_1EBFluxRegister" prot="public">amrex::EBFluxRegister</innerclass>
    <innerclass refid="classamrex_1_1EBCellConservativeLinear" prot="public">amrex::EBCellConservativeLinear</innerclass>
    <innerclass refid="classamrex_1_1EBMFCellConsLinInterp" prot="public">amrex::EBMFCellConsLinInterp</innerclass>
    <innerclass refid="classamrex_1_1EBToPVD" prot="public">amrex::EBToPVD</innerclass>
    <innerclass refid="classamrex_1_1CutFab" prot="public">amrex::CutFab</innerclass>
    <innerclass refid="classamrex_1_1MultiCutFab" prot="public">amrex::MultiCutFab</innerclass>
    <innerclass refid="classamrex_1_1AmrData" prot="public">amrex::AmrData</innerclass>
    <innerclass refid="classamrex_1_1DataServices" prot="public">amrex::DataServices</innerclass>
    <innerclass refid="classamrex_1_1OrderedBoxes" prot="public">amrex::OrderedBoxes</innerclass>
    <innerclass refid="classamrex_1_1XYPlotDataListLink" prot="public">amrex::XYPlotDataListLink</innerclass>
    <innerclass refid="classamrex_1_1XYPlotDataList" prot="public">amrex::XYPlotDataList</innerclass>
    <innerclass refid="classamrex_1_1Hypre" prot="public">amrex::Hypre</innerclass>
    <innerclass refid="classamrex_1_1HypreABecLap" prot="public">amrex::HypreABecLap</innerclass>
    <innerclass refid="classamrex_1_1HypreABecLap2" prot="public">amrex::HypreABecLap2</innerclass>
    <innerclass refid="classamrex_1_1HypreABecLap3" prot="public">amrex::HypreABecLap3</innerclass>
    <innerclass refid="classamrex_1_1HypreIJIface" prot="public">amrex::HypreIJIface</innerclass>
    <innerclass refid="classamrex_1_1HypreNodeLap" prot="public">amrex::HypreNodeLap</innerclass>
    <innerclass refid="structamrex_1_1amrex__KSP" prot="public">amrex::amrex_KSP</innerclass>
    <innerclass refid="structamrex_1_1amrex__Mat" prot="public">amrex::amrex_Mat</innerclass>
    <innerclass refid="structamrex_1_1amrex__Vec" prot="public">amrex::amrex_Vec</innerclass>
    <innerclass refid="classamrex_1_1PETScABecLap" prot="public">amrex::PETScABecLap</innerclass>
    <innerclass refid="classamrex_1_1AmrDataAdaptor" prot="public">amrex::AmrDataAdaptor</innerclass>
    <innerclass refid="classamrex_1_1AmrInSituBridge" prot="public">amrex::AmrInSituBridge</innerclass>
    <innerclass refid="classamrex_1_1AmrMeshDataAdaptor" prot="public">amrex::AmrMeshDataAdaptor</innerclass>
    <innerclass refid="classamrex_1_1AmrMeshInSituBridge" prot="public">amrex::AmrMeshInSituBridge</innerclass>
    <innerclass refid="classamrex_1_1InSituBridge" prot="public">amrex::InSituBridge</innerclass>
    <innerclass refid="structamrex_1_1SundialsUserData" prot="public">amrex::SundialsUserData</innerclass>
    <innerclass refid="classamrex_1_1SundialsIntegrator" prot="public">amrex::SundialsIntegrator</innerclass>
    <innerclass refid="classamrex_1_1MLABecLaplacianT" prot="public">amrex::MLABecLaplacianT</innerclass>
    <innerclass refid="classamrex_1_1MLALaplacianT" prot="public">amrex::MLALaplacianT</innerclass>
    <innerclass refid="classamrex_1_1MLCellABecLapT" prot="public">amrex::MLCellABecLapT</innerclass>
    <innerclass refid="classamrex_1_1MLCellLinOpT" prot="public">amrex::MLCellLinOpT</innerclass>
    <innerclass refid="structamrex_1_1MLMGABCTag" prot="public">amrex::MLMGABCTag</innerclass>
    <innerclass refid="structamrex_1_1MLMGPSTag" prot="public">amrex::MLMGPSTag</innerclass>
    <innerclass refid="classamrex_1_1MLCGSolverT" prot="public">amrex::MLCGSolverT</innerclass>
    <innerclass refid="classamrex_1_1MLEBABecLap" prot="public">amrex::MLEBABecLap</innerclass>
    <innerclass refid="classamrex_1_1MLEBNodeFDLaplacian" prot="public">amrex::MLEBNodeFDLaplacian</innerclass>
    <innerclass refid="classamrex_1_1MLEBTensorOp" prot="public">amrex::MLEBTensorOp</innerclass>
    <innerclass refid="structamrex_1_1LPInfo" prot="public">amrex::LPInfo</innerclass>
    <innerclass refid="structamrex_1_1LinOpEnumType" prot="public">amrex::LinOpEnumType</innerclass>
    <innerclass refid="classamrex_1_1MLMGT" prot="public">amrex::MLMGT</innerclass>
    <innerclass refid="classamrex_1_1MLPoissonT" prot="public">amrex::MLPoissonT</innerclass>
    <innerclass refid="classamrex_1_1MLLinOpT" prot="public">amrex::MLLinOpT</innerclass>
    <innerclass refid="classamrex_1_1MLMGBndryT" prot="public">amrex::MLMGBndryT</innerclass>
    <innerclass refid="classamrex_1_1MLNodeLaplacian" prot="public">amrex::MLNodeLaplacian</innerclass>
    <innerclass refid="classamrex_1_1MLNodeLinOp" prot="public">amrex::MLNodeLinOp</innerclass>
    <innerclass refid="classamrex_1_1MLNodeTensorLaplacian" prot="public">amrex::MLNodeTensorLaplacian</innerclass>
    <innerclass refid="classamrex_1_1MLTensorOp" prot="public">amrex::MLTensorOp</innerclass>
    <innerclass refid="classamrex_1_1OpenBCSolver" prot="public">amrex::OpenBCSolver</innerclass>
    <innerclass refid="classamrex_1_1ArrayOfStructs" prot="public">amrex::ArrayOfStructs</innerclass>
    <innerclass refid="structamrex_1_1BinIterator" prot="public">amrex::BinIterator</innerclass>
    <innerclass refid="structamrex_1_1DenseBinIteratorFactory" prot="public">amrex::DenseBinIteratorFactory</innerclass>
    <innerclass refid="classamrex_1_1DenseBins" prot="public">amrex::DenseBins</innerclass>
    <innerclass refid="structamrex_1_1Neighbors" prot="public">amrex::Neighbors</innerclass>
    <innerclass refid="structamrex_1_1NeighborData" prot="public">amrex::NeighborData</innerclass>
    <innerclass refid="classamrex_1_1NeighborList" prot="public">amrex::NeighborList</innerclass>
    <innerclass refid="structamrex_1_1NeighborCode" prot="public">amrex::NeighborCode</innerclass>
    <innerclass refid="classamrex_1_1NeighborParticleContainer" prot="public">amrex::NeighborParticleContainer</innerclass>
    <innerclass refid="classamrex_1_1ParGDBBase" prot="public">amrex::ParGDBBase</innerclass>
    <innerclass refid="classamrex_1_1ParGDB" prot="public">amrex::ParGDB</innerclass>
    <innerclass refid="classamrex_1_1ParticleContainer" prot="public">amrex::ParticleContainer</innerclass>
    <innerclass refid="classamrex_1_1ParIterBase" prot="public">amrex::ParIterBase</innerclass>
    <innerclass refid="classamrex_1_1ParIter" prot="public">amrex::ParIter</innerclass>
    <innerclass refid="classamrex_1_1ParConstIter" prot="public">amrex::ParConstIter</innerclass>
    <innerclass refid="structamrex_1_1ParticleIDWrapper" prot="public">amrex::ParticleIDWrapper</innerclass>
    <innerclass refid="structamrex_1_1ParticleCPUWrapper" prot="public">amrex::ParticleCPUWrapper</innerclass>
    <innerclass refid="structamrex_1_1ConstParticleIDWrapper" prot="public">amrex::ConstParticleIDWrapper</innerclass>
    <innerclass refid="structamrex_1_1ConstParticleCPUWrapper" prot="public">amrex::ConstParticleCPUWrapper</innerclass>
    <innerclass refid="structamrex_1_1ParticleBase" prot="public">amrex::ParticleBase</innerclass>
    <innerclass refid="structamrex_1_1ParticleBase_3_01T_00_010_00_01NInt_01_4" prot="public">amrex::ParticleBase&lt; T, 0, NInt &gt;</innerclass>
    <innerclass refid="structamrex_1_1ParticleBase_3_01T_00_01NReal_00_010_01_4" prot="public">amrex::ParticleBase&lt; T, NReal, 0 &gt;</innerclass>
    <innerclass refid="structamrex_1_1ParticleBase_3_01T_00_010_00_010_01_4" prot="public">amrex::ParticleBase&lt; T, 0, 0 &gt;</innerclass>
    <innerclass refid="structamrex_1_1Particle" prot="public">amrex::Particle</innerclass>
    <innerclass refid="structamrex_1_1DataLayoutPolicy" prot="public">amrex::DataLayoutPolicy</innerclass>
    <innerclass refid="structamrex_1_1DataLayoutPolicyRaw" prot="public">amrex::DataLayoutPolicyRaw</innerclass>
    <innerclass refid="structamrex_1_1ParticleArrayAccessor" prot="public">amrex::ParticleArrayAccessor</innerclass>
    <innerclass refid="classamrex_1_1ref__wrapper" prot="public">amrex::ref_wrapper</innerclass>
    <innerclass refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1AoS_01_4" prot="public">amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::AoS &gt;</innerclass>
    <innerclass refid="structamrex_1_1DataLayoutPolicyRaw_3_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1AoS_01_4" prot="public">amrex::DataLayoutPolicyRaw&lt; ParticleType&lt; Types... &gt;, DataLayout::AoS &gt;</innerclass>
    <innerclass refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4" prot="public">amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;</innerclass>
    <innerclass refid="structamrex_1_1DataLayoutPolicyRaw_3_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4" prot="public">amrex::DataLayoutPolicyRaw&lt; ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;</innerclass>
    <innerclass refid="structamrex_1_1ParticleArray" prot="public">amrex::ParticleArray</innerclass>
    <innerclass refid="structamrex_1_1GetPID" prot="public">amrex::GetPID</innerclass>
    <innerclass refid="structamrex_1_1GetBucket" prot="public">amrex::GetBucket</innerclass>
    <innerclass refid="classamrex_1_1ParticleBufferMap" prot="public">amrex::ParticleBufferMap</innerclass>
    <innerclass refid="structamrex_1_1NeighborUnpackPolicy" prot="public">amrex::NeighborUnpackPolicy</innerclass>
    <innerclass refid="structamrex_1_1RedistributeUnpackPolicy" prot="public">amrex::RedistributeUnpackPolicy</innerclass>
    <innerclass refid="structamrex_1_1ParticleCopyOp" prot="public">amrex::ParticleCopyOp</innerclass>
    <innerclass refid="structamrex_1_1ParticleCopyPlan" prot="public">amrex::ParticleCopyPlan</innerclass>
    <innerclass refid="structamrex_1_1GetSendBufferOffset" prot="public">amrex::GetSendBufferOffset</innerclass>
    <innerclass refid="structamrex_1_1ParticleCommData" prot="public">amrex::ParticleCommData</innerclass>
    <innerclass refid="structamrex_1_1ParticleLocData" prot="public">amrex::ParticleLocData</innerclass>
    <innerclass refid="structamrex_1_1ParticleInitType" prot="public">amrex::ParticleInitType</innerclass>
    <innerclass refid="classamrex_1_1ParticleContainerBase" prot="public">amrex::ParticleContainerBase</innerclass>
    <innerclass refid="structamrex_1_1AssignGrid" prot="public">amrex::AssignGrid</innerclass>
    <innerclass refid="classamrex_1_1ParticleLocator" prot="public">amrex::ParticleLocator</innerclass>
    <innerclass refid="structamrex_1_1AmrAssignGrid" prot="public">amrex::AmrAssignGrid</innerclass>
    <innerclass refid="classamrex_1_1AmrParticleLocator" prot="public">amrex::AmrParticleLocator</innerclass>
    <innerclass refid="structamrex_1_1ParticleTileData" prot="public">amrex::ParticleTileData</innerclass>
    <innerclass refid="structamrex_1_1ConstParticleTileData" prot="public">amrex::ConstParticleTileData</innerclass>
    <innerclass refid="structamrex_1_1ParticleTile" prot="public">amrex::ParticleTile</innerclass>
    <innerclass refid="structamrex_1_1BinMapper" prot="public">amrex::BinMapper</innerclass>
    <innerclass refid="structamrex_1_1GetParticleBin" prot="public">amrex::GetParticleBin</innerclass>
    <innerclass refid="structamrex_1_1SparseBinIteratorFactory" prot="public">amrex::SparseBinIteratorFactory</innerclass>
    <innerclass refid="classamrex_1_1SparseBins" prot="public">amrex::SparseBins</innerclass>
    <innerclass refid="structamrex_1_1StructOfArrays" prot="public">amrex::StructOfArrays</innerclass>
    <innerclass refid="classamrex_1_1TracerParticleContainer" prot="public">amrex::TracerParticleContainer</innerclass>
    <innernamespace refid="namespaceamrex_1_1algoim">amrex::algoim</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Amrvis">amrex::Amrvis</innernamespace>
    <innernamespace refid="namespaceamrex_1_1AsyncOut">amrex::AsyncOut</innernamespace>
    <innernamespace refid="namespaceamrex_1_1BGColor">amrex::BGColor</innernamespace>
    <innernamespace refid="namespaceamrex_1_1BinPolicy">amrex::BinPolicy</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Cuda">amrex::Cuda</innernamespace>
    <innernamespace refid="namespaceamrex_1_1detail">amrex::detail</innernamespace>
    <innernamespace refid="namespaceamrex_1_1disabled" inline="yes">amrex::disabled</innernamespace>
    <innernamespace refid="namespaceamrex_1_1EB2">amrex::EB2</innernamespace>
    <innernamespace refid="namespaceamrex_1_1experimental">amrex::experimental</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Extrapolater">amrex::Extrapolater</innernamespace>
    <innernamespace refid="namespaceamrex_1_1FGColor">amrex::FGColor</innernamespace>
    <innernamespace refid="namespaceamrex_1_1FileSystem">amrex::FileSystem</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Font">amrex::Font</innernamespace>
    <innernamespace refid="namespaceamrex_1_1fudetail">amrex::fudetail</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Gpu">amrex::Gpu</innernamespace>
    <innernamespace refid="namespaceamrex_1_1HostDevice">amrex::HostDevice</innernamespace>
    <innernamespace refid="namespaceamrex_1_1InSituUtils">amrex::InSituUtils</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Lazy">amrex::Lazy</innernamespace>
    <innernamespace refid="namespaceamrex_1_1machine">amrex::machine</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Math">amrex::Math</innernamespace>
    <innernamespace refid="namespaceamrex_1_1MFUtil">amrex::MFUtil</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Morton">amrex::Morton</innernamespace>
    <innernamespace refid="namespaceamrex_1_1MPMD">amrex::MPMD</innernamespace>
    <innernamespace refid="namespaceamrex_1_1NonLocalBC">amrex::NonLocalBC</innernamespace>
    <innernamespace refid="namespaceamrex_1_1openbc">amrex::openbc</innernamespace>
    <innernamespace refid="namespaceamrex_1_1OpenMP">amrex::OpenMP</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Order">amrex::Order</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelAllGather">amrex::ParallelAllGather</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelAllReduce">amrex::ParallelAllReduce</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelContext">amrex::ParallelContext</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelDescriptor">amrex::ParallelDescriptor</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelGather">amrex::ParallelGather</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelReduce">amrex::ParallelReduce</innernamespace>
    <innernamespace refid="namespaceamrex_1_1particle__detail">amrex::particle_detail</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParticleInterpolator">amrex::ParticleInterpolator</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Reduce">amrex::Reduce</innernamespace>
    <innernamespace refid="namespaceamrex_1_1RungeKutta">amrex::RungeKutta</innernamespace>
    <innernamespace refid="namespaceamrex_1_1Scan">amrex::Scan</innernamespace>
    <innernamespace refid="namespaceamrex_1_1sundials">amrex::sundials</innernamespace>
    <innernamespace refid="namespaceamrex_1_1SundialsUserFun">amrex::SundialsUserFun</innernamespace>
    <innernamespace refid="namespaceamrex_1_1system">amrex::system</innernamespace>
    <innernamespace refid="namespaceamrex_1_1tri__geom__ops">amrex::tri_geom_ops</innernamespace>
    <innernamespace refid="namespaceamrex_1_1TwoD">amrex::TwoD</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceamrex_1a2f30e076962c1c148d279b63851d80df" prot="public" static="no" strong="no">
        <type></type>
        <name>InterpEM_t</name>
        <enumvalue id="namespaceamrex_1a2f30e076962c1c148d279b63851d80dfaea241117e55edc2764d31a18a4740ff3" prot="public">
          <name>InterpE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a2f30e076962c1c148d279b63851d80dfa9d55599aaee42c677bcd175e50bebbca" prot="public">
          <name>InterpB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" line="244" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" bodystart="244" bodyend="244"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1abd2e3d292645433cefc947725585f87a" prot="public" static="no" strong="yes">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <name>FabType</name>
        <enumvalue id="namespaceamrex_1abd2e3d292645433cefc947725585f87aaa72ed46ebb1280e51746ce28ded53942" prot="public">
          <name>covered</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1abd2e3d292645433cefc947725585f87aaaf37d08ae228a87dc6b265fd1019c97d" prot="public">
          <name>regular</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1abd2e3d292645433cefc947725585f87aa928c4a180152a4857751871f38d5f9ef" prot="public">
          <name>singlevalued</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1abd2e3d292645433cefc947725585f87aaaf8a062dbd0dba47618be245dc266806" prot="public">
          <name>multivalued</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1abd2e3d292645433cefc947725585f87aa5e543256c480ac577d30f76f9120eb74" prot="public">
          <name>undefined</name>
          <initializer>= 100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabFactory.H" bodystart="17" bodyend="23"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a9f13be15ca764e94680df68d8b9505d6" prot="public" static="no" strong="no">
        <type></type>
        <name>FillType</name>
        <enumvalue id="namespaceamrex_1a9f13be15ca764e94680df68d8b9505d6a3de07fb14bde47411225509d67e0bda1" prot="public">
          <name>FillLocally</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9f13be15ca764e94680df68d8b9505d6a8d7828a9196bfb084013996640e84bd4" prot="public">
          <name>FillRemotely</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9f13be15ca764e94680df68d8b9505d6a86e193c43ac00a14b0943baf3433c6d0" prot="public">
          <name>Unfillable</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum and the <ref refid="structamrex_1_1FabCopyDescriptor" kindref="compound">FabCopyDescriptor</ref> class should really be nested in <ref refid="classamrex_1_1FabArrayCopyDescriptor" kindref="compound">FabArrayCopyDescriptor</ref> (not done for portability reasons). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FACopyDescriptor.H" line="16" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FACopyDescriptor.H" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" prot="public" static="no" strong="yes">
        <type></type>
        <name>RunOn</name>
        <enumvalue id="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a3432ca64f06615abf07ab44c10cada38" prot="public">
          <name>Gpu</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2a54c82ef76ecbbd4c2293e09bae01b54e" prot="public">
          <name>Cpu</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2ae0ac20adce6ffee48c7151b070aa5737" prot="public">
          <name>Device</name>
          <initializer>=Gpu</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2ac2ca16d048ec66e04bca283eab048ec2" prot="public">
          <name>Host</name>
          <initializer>=Cpu</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" line="65" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" prot="public" static="no" strong="no">
        <type></type>
        <name>MakeType</name>
        <enumvalue id="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6a1477998364b5f02d6ce68e3da29be1ba" prot="public">
          <name>make_alias</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6a0a2bb4bcb2051ae3a06f94b5c1768e90" prot="public">
          <name>make_deep_copy</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MakeType.H" line="7" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MakeType.H" bodystart="7" bodyend="7"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" prot="public" static="no" strong="yes">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <name>Direction</name>
        <enumvalue id="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" prot="public">
          <name>AMREX_D_DECL</name>
          <initializer>=(x = 0, y = 1, z = 2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="14" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="14" bodyend="14"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1afa67f210f2e6c338d52553562f72c564" prot="public" static="no" strong="yes">
        <type></type>
        <name>ButcherTableauTypes</name>
        <enumvalue id="namespaceamrex_1afa67f210f2e6c338d52553562f72c564a8f9bfe9d1345237cb3b2b205864da075" prot="public">
          <name>User</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1afa67f210f2e6c338d52553562f72c564a779b3131986acb907c287cdaf371d578" prot="public">
          <name>ForwardEuler</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1afa67f210f2e6c338d52553562f72c564a7e7dd435b4cc7ba2b020d5a97856dc80" prot="public">
          <name>Trapezoid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1afa67f210f2e6c338d52553562f72c564ab65603b0c54c1b7114d61811751ccf42" prot="public">
          <name>SSPRK3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1afa67f210f2e6c338d52553562f72c564af81fe250c66aad887e2086f79364f2a8" prot="public">
          <name>RK4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1afa67f210f2e6c338d52553562f72c564a86e30d8e0831512671e7ed103ad7c457" prot="public">
          <name>NumTypes</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RKIntegrator.H" line="11" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RKIntegrator.H" bodystart="11" bodyend="18"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1aad80b9cf2bc799f2905cc9a77e3a599e" prot="public" static="no" strong="yes">
        <type></type>
        <name>IntegratorTypes</name>
        <enumvalue id="namespaceamrex_1aad80b9cf2bc799f2905cc9a77e3a599ea779b3131986acb907c287cdaf371d578" prot="public">
          <name>ForwardEuler</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1aad80b9cf2bc799f2905cc9a77e3a599ea0e3b15fe691c25fd194f13af33980845" prot="public">
          <name>ExplicitRungeKutta</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1aad80b9cf2bc799f2905cc9a77e3a599eafd3bfec7c5048bfbd7655f7999c26f3d" prot="public">
          <name>Sundials</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TimeIntegrator.H" line="18" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TimeIntegrator.H" bodystart="18" bodyend="22"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28" prot="public" static="no" strong="no">
        <type></type>
        <name>iparser_exe_t</name>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a6dfbde3e58ba42669d2dab8e0afe5983" prot="public">
          <name>IPARSER_EXE_NULL</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28aedb5c10079e70548e697cd7161dd07ee" prot="public">
          <name>IPARSER_EXE_NUMBER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a1144f6fecf3e58cc78fedaadbe8a7fc7" prot="public">
          <name>IPARSER_EXE_SYMBOL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a3aa5ebc870f48d8671c6822bca78c17e" prot="public">
          <name>IPARSER_EXE_ADD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a998513e1cc0eb24ca2aeee521b270571" prot="public">
          <name>IPARSER_EXE_SUB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a7d295e84ce6e6a488e8450e0d7d7d797" prot="public">
          <name>IPARSER_EXE_MUL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28abc2d01f49b641950408081fac0af47ad" prot="public">
          <name>IPARSER_EXE_DIV_F</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a68ec347805cd44d13e623908e35f7139" prot="public">
          <name>IPARSER_EXE_DIV_B</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a46646e4ae1e9bd709c7c4273049955c2" prot="public">
          <name>IPARSER_EXE_NEG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28ab0ed4840180195b9a6ad04f38fbf587d" prot="public">
          <name>IPARSER_EXE_F1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a08c799f241d96968e3fd8cf85b9c9f3d" prot="public">
          <name>IPARSER_EXE_F2_F</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28aa67ea243c59289ba8e2bd1bca92e4085" prot="public">
          <name>IPARSER_EXE_F2_B</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a5d373545b16e753833a1de83ee589666" prot="public">
          <name>IPARSER_EXE_ADD_VP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a63ab070e7de2587e5c55446a0cb0a80b" prot="public">
          <name>IPARSER_EXE_SUB_VP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a49ffa39b47983c9858a72d5ef490c64a" prot="public">
          <name>IPARSER_EXE_MUL_VP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a69bf2bf34ce4f88f5f92adbda1856e83" prot="public">
          <name>IPARSER_EXE_DIV_VP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a732fc6f3f3c0a3fa42817371afc40322" prot="public">
          <name>IPARSER_EXE_DIV_PV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a5afc61c446b9479b5604a84d4a1345e1" prot="public">
          <name>IPARSER_EXE_ADD_PP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a416e7830bfce8fb8d753f71562fd6d1b" prot="public">
          <name>IPARSER_EXE_SUB_PP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a71b1cb6f3bd922a392f35f37149881ae" prot="public">
          <name>IPARSER_EXE_MUL_PP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a41262d5e1a88421783a3e74251282af9" prot="public">
          <name>IPARSER_EXE_DIV_PP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a0b4b0ce6f8c7980e569c279dd17aa4c9" prot="public">
          <name>IPARSER_EXE_NEG_P</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28af4a9f9c2a8c4946bc3ccf48cf2800fc0" prot="public">
          <name>IPARSER_EXE_ADD_VN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a9a0487c5cd8d1732c8c1b399f66d498c" prot="public">
          <name>IPARSER_EXE_SUB_VN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a6d740004ac2119309936e3c8df1793a3" prot="public">
          <name>IPARSER_EXE_MUL_VN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28af9b19ba65988eaa6817c8e5c7f4a01d7" prot="public">
          <name>IPARSER_EXE_DIV_NV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a61e2f764c31190dc19a79b2f518a0798" prot="public">
          <name>IPARSER_EXE_DIV_VN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28ab2fdbbd4215b2a68f9419600ea697348" prot="public">
          <name>IPARSER_EXE_ADD_PN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a898969646c61c19a5846779f791aceab" prot="public">
          <name>IPARSER_EXE_SUB_PN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a521a39a1475570d39fe599cee4f0d183" prot="public">
          <name>IPARSER_EXE_MUL_PN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28aae21ba0046dbd5e03413eff57c091563" prot="public">
          <name>IPARSER_EXE_DIV_PN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28a9eabbc6b1a61bef1db16279b771f6ebc" prot="public">
          <name>IPARSER_EXE_IF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a92ee563e823bf1f37c94d26531af0a28aa381a61b4507e60fc34dbd770937674b" prot="public">
          <name>IPARSER_EXE_JUMP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Exe.H" line="21" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Exe.H" bodystart="21" bodyend="55"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a600c31f56b7c1fc9fed39775fc745399" prot="public" static="no" strong="no">
        <type></type>
        <name>iparser_f1_t</name>
        <enumvalue id="namespaceamrex_1a600c31f56b7c1fc9fed39775fc745399a4cc0cd79656dee4d17762b6ad2096ef8" prot="public">
          <name>IPARSER_ABS</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" line="22" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a9f73a0b38577743c875e56fd6c89de7d" prot="public" static="no" strong="no">
        <type></type>
        <name>iparser_f2_t</name>
        <enumvalue id="namespaceamrex_1a9f73a0b38577743c875e56fd6c89de7da3af79d5dda37041d8b153939b9fe017a" prot="public">
          <name>IPARSER_FLRDIV</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9f73a0b38577743c875e56fd6c89de7da332edac7beb4486ee6e3cfbcb3de16fb" prot="public">
          <name>IPARSER_POW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9f73a0b38577743c875e56fd6c89de7da207502290f1b2902f90375083a7bfcec" prot="public">
          <name>IPARSER_GT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9f73a0b38577743c875e56fd6c89de7da081d856458025210c85cdb3d48424ca9" prot="public">
          <name>IPARSER_LT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9f73a0b38577743c875e56fd6c89de7daa42aab30a1b9f4b193633538f3fa80a8" prot="public">
          <name>IPARSER_GEQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9f73a0b38577743c875e56fd6c89de7daad092f4ce24e4996580645e355ad54ed" prot="public">
          <name>IPARSER_LEQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9f73a0b38577743c875e56fd6c89de7da844af70cd0ff0cd99ff98d9d5110110f" prot="public">
          <name>IPARSER_EQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9f73a0b38577743c875e56fd6c89de7daeb58ad22420b6bc9b3b80e0bcd7821ad" prot="public">
          <name>IPARSER_NEQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9f73a0b38577743c875e56fd6c89de7da48e6f0f0ca53a84ed3d5abed8f9a2aa1" prot="public">
          <name>IPARSER_AND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9f73a0b38577743c875e56fd6c89de7da77da1410d1a13e70c1b39a1529c0556a" prot="public">
          <name>IPARSER_OR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9f73a0b38577743c875e56fd6c89de7da8a3a5bb779a49faee7afaf2151ee1a52" prot="public">
          <name>IPARSER_MIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9f73a0b38577743c875e56fd6c89de7da7c28bfc3d232b0311ae37088bf8725e1" prot="public">
          <name>IPARSER_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" line="26" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" bodystart="26" bodyend="39"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1af30c8b25dcfaa74c444959a075767843" prot="public" static="no" strong="no">
        <type></type>
        <name>iparser_f3_t</name>
        <enumvalue id="namespaceamrex_1af30c8b25dcfaa74c444959a075767843a1da16104a9c24986c0582d48c30c09b4" prot="public">
          <name>IPARSER_IF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" line="41" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360e" prot="public" static="no" strong="no">
        <type></type>
        <name>iparser_node_t</name>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360ea6654b9de59617f5bbba7f6b0329d9016" prot="public">
          <name>IPARSER_NUMBER</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360eaf2f2c72e5ad17897a0f22ee953ca3c99" prot="public">
          <name>IPARSER_SYMBOL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360eabcf5ce820d0b4e595bce48b8fe6d8bb2" prot="public">
          <name>IPARSER_ADD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360ea46705bda13a80d4bf82bee07cfedddb3" prot="public">
          <name>IPARSER_SUB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360eaf036f5a1febcd6fc23be5646bc855b9c" prot="public">
          <name>IPARSER_MUL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360eadfd6fe3ec7fd37a80549a7db0ad8c462" prot="public">
          <name>IPARSER_DIV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360eab41d57371ff87c6a6512cc57008ecbd9" prot="public">
          <name>IPARSER_NEG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360ea6359aea3098e5c99a7a7de4fe9eac881" prot="public">
          <name>IPARSER_F1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360eaca3a7a9a9c6e575549de451895693cc3" prot="public">
          <name>IPARSER_F2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360ea80fa3bd42760cb2a3c1bdfdff06b6a12" prot="public">
          <name>IPARSER_F3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360ea303140b6925cbc72cbec071bf288a549" prot="public">
          <name>IPARSER_ASSIGN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360eab25230e97bd974f0fc68c68783fd6129" prot="public">
          <name>IPARSER_LIST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360ea6cb7d17cbd9374ed24fd9f3192260048" prot="public">
          <name>IPARSER_ADD_VP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360ea1806c59f6f441a48baff609bf73d5a49" prot="public">
          <name>IPARSER_ADD_PP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360ea8109e0823006b18b7f3bf78a15cc6d65" prot="public">
          <name>IPARSER_SUB_VP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360ea7118cbc1ab60e7d5cd5f00b0f4ee6549" prot="public">
          <name>IPARSER_SUB_PP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360eadbd209094dca5499f71493240c17412b" prot="public">
          <name>IPARSER_MUL_VP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360ea18a298689b31c32ea4e01f6514c2f91a" prot="public">
          <name>IPARSER_MUL_PP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360ea534ab96269f305c32a56b23f4e60d020" prot="public">
          <name>IPARSER_DIV_VP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360ea54f35dc4d1a7bd6e9cd01a262f98fa18" prot="public">
          <name>IPARSER_DIV_PV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360eac2958d0b9c09b0e11b991f2257191678" prot="public">
          <name>IPARSER_DIV_PP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360ea26ea362f9df74f846f50098e5e0be936" prot="public">
          <name>IPARSER_NEG_P</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" line="45" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" bodystart="45" bodyend="68"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49" prot="public" static="no" strong="no">
        <type></type>
        <name>parser_exe_t</name>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49ad164042843bc5d3219c38304422dda7f" prot="public">
          <name>PARSER_EXE_NULL</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49a2053b9047a2310dcbbaff624c5bd4301" prot="public">
          <name>PARSER_EXE_NUMBER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49a39f7549a4fd26261fcef5e6b3e8d939d" prot="public">
          <name>PARSER_EXE_SYMBOL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49a65accef83deb826771cbd9976c4598b4" prot="public">
          <name>PARSER_EXE_ADD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49a189e5dd912a73230a7d07ad077f8bfe3" prot="public">
          <name>PARSER_EXE_SUB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49ac2d587754eccf536e1195395dd760613" prot="public">
          <name>PARSER_EXE_MUL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49ad3a5a5721de497d1bc95f49759f05a08" prot="public">
          <name>PARSER_EXE_DIV_F</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49a467c9f3fa7bc494399821d9327b05845" prot="public">
          <name>PARSER_EXE_DIV_B</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49ae3e91968b49e9296b383960123c9a78c" prot="public">
          <name>PARSER_EXE_NEG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49ad2a0a201913529696e77ea9584318f7b" prot="public">
          <name>PARSER_EXE_F1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49a6206643ce6fe2a5b52b05bf0075231b9" prot="public">
          <name>PARSER_EXE_F2_F</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49a4f416e08f560a5ada8f89594c011e377" prot="public">
          <name>PARSER_EXE_F2_B</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49a7effc6143ed862d060081e1273d2c05b" prot="public">
          <name>PARSER_EXE_ADD_VP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49a014920eb1a3da47f76dc0006f292af4d" prot="public">
          <name>PARSER_EXE_SUB_VP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49aca265050303407847584f241e18cd70d" prot="public">
          <name>PARSER_EXE_MUL_VP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49ae8298a287437468a3ae7cdebb845082d" prot="public">
          <name>PARSER_EXE_DIV_VP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49aad4ecfa4d8942ee7bc7ce33e479f0aaa" prot="public">
          <name>PARSER_EXE_ADD_PP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49ae8d143cd5deeffcc76ba9094cd848678" prot="public">
          <name>PARSER_EXE_SUB_PP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49a8c3987c7b9bf7be1eb47dc65fdd98d23" prot="public">
          <name>PARSER_EXE_MUL_PP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49af6f81328f5f2e9f06525dd7151a713eb" prot="public">
          <name>PARSER_EXE_DIV_PP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49a8947ddf5cdc0b75778b2962bb3767fc5" prot="public">
          <name>PARSER_EXE_NEG_P</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49a1044c34c6cf2464a5a7d3915828db764" prot="public">
          <name>PARSER_EXE_ADD_VN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49a59525adc4ae7845b8340dd89993a63ce" prot="public">
          <name>PARSER_EXE_SUB_VN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49a9421625896cd614f365853bcfcec5253" prot="public">
          <name>PARSER_EXE_MUL_VN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49a49fbd97b6c92be61a039dcf485b7ef86" prot="public">
          <name>PARSER_EXE_DIV_VN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49a9bf6fa5b900a096eaace0643ea2fc87d" prot="public">
          <name>PARSER_EXE_ADD_PN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49a9264353b9cb7c9e35c524a18fee311c8" prot="public">
          <name>PARSER_EXE_SUB_PN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49aba0e4205769e25aed168c5b5b7af3426" prot="public">
          <name>PARSER_EXE_MUL_PN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49a7d3c18b2badf37a3f1e58f6a94ccd574" prot="public">
          <name>PARSER_EXE_DIV_PN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49ade505eeebd4b9a047f99dd00200376f1" prot="public">
          <name>PARSER_EXE_IF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0f600e600176e6bc4444aaea08ca1c49aa72fde98c22155ba9b55510fec6f7afe" prot="public">
          <name>PARSER_EXE_JUMP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Exe.H" line="21" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Exe.H" bodystart="21" bodyend="53"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589" prot="public" static="no" strong="no">
        <type></type>
        <name>parser_f1_t</name>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589a3fb34ef0b3bf8980039c8b7938964511" prot="public">
          <name>PARSER_SQRT</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589a5659297c786f4248f15bf8990826f06c" prot="public">
          <name>PARSER_EXP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589a6d472fc8669b810eccc4c8ccfaf4c1d6" prot="public">
          <name>PARSER_LOG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589af1f083ccd600c4f36a89b024f39f62d0" prot="public">
          <name>PARSER_LOG10</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589a723f6e0a6ed9422b505ce4ea722a9242" prot="public">
          <name>PARSER_SIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589a146c14c8d7badfe1adbfa704245f686e" prot="public">
          <name>PARSER_COS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589a45e9ea1f41504ce7c2d125cc59fa08ea" prot="public">
          <name>PARSER_TAN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589ab1139ce456ce4f10e58ddb98628a9e67" prot="public">
          <name>PARSER_ASIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589a4bb2d123de0d48093170da3df9163321" prot="public">
          <name>PARSER_ACOS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589adcff340768238477e235ec55d511e0ac" prot="public">
          <name>PARSER_ATAN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589af9f5e87ccf73aa564cab896e5737f3f2" prot="public">
          <name>PARSER_SINH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589a1c44c6c982e5f5394b02f66a59cbcbf0" prot="public">
          <name>PARSER_COSH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589a0e8b5d96d71e43edef0273b7e86277ee" prot="public">
          <name>PARSER_TANH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589ae01afc57c89c498c5363a6be1fd64eab" prot="public">
          <name>PARSER_ABS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589af4ebc6b2c539f7e888d719bab325461d" prot="public">
          <name>PARSER_FLOOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589abacc88377d1f207fe9d1aab1cdfbbaa5" prot="public">
          <name>PARSER_CEIL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589a694d2e1b1cd6961ea07b123547a0f88d" prot="public">
          <name>PARSER_POW_M3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589af3809c32926c5365d39bd5264042e3ae" prot="public">
          <name>PARSER_POW_M2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589a6959884c4754748c098c6cf1e1d7f15e" prot="public">
          <name>PARSER_POW_M1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589aba931b8a257cc61167d87f8f0c2a4894" prot="public">
          <name>PARSER_POW_P1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589a44be2664933f05ef4a513d624e6c2094" prot="public">
          <name>PARSER_POW_P2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589a0b1f0dc2037efb1f7674c9fdca44b561" prot="public">
          <name>PARSER_POW_P3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="23" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="23" bodyend="46"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a0075507273391e5967b9d869daed98bc" prot="public" static="no" strong="no">
        <type></type>
        <name>parser_f2_t</name>
        <enumvalue id="namespaceamrex_1a0075507273391e5967b9d869daed98bca7b172eaccc69212b5526d8a1675b2399" prot="public">
          <name>PARSER_POW</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0075507273391e5967b9d869daed98bcabbb10d89f09bab7d5aa1b256c361fe4b" prot="public">
          <name>PARSER_GT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0075507273391e5967b9d869daed98bca27a45d5e1783028fbc362d8e4f35d752" prot="public">
          <name>PARSER_LT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0075507273391e5967b9d869daed98bca627eafb93eb5cc55cc6f1bd716ee6461" prot="public">
          <name>PARSER_GEQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0075507273391e5967b9d869daed98bca4d0e5b2b972b4bf0ffa84bb373ec9c77" prot="public">
          <name>PARSER_LEQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0075507273391e5967b9d869daed98bcae7a9987ba06f3e22647b6455a894d954" prot="public">
          <name>PARSER_EQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0075507273391e5967b9d869daed98bca3a1729e1b576ae7d414ae6ba76c3b194" prot="public">
          <name>PARSER_NEQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0075507273391e5967b9d869daed98bca2d8f7fc88d138e332180438e1171ee57" prot="public">
          <name>PARSER_AND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0075507273391e5967b9d869daed98bca3b65381fef1e4a480813955566ac6224" prot="public">
          <name>PARSER_OR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0075507273391e5967b9d869daed98bcacb0b84f852fe36fbb6ffafd2455f9644" prot="public">
          <name>PARSER_HEAVISIDE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0075507273391e5967b9d869daed98bcaace05cc3a245149a82643a976e7e139a" prot="public">
          <name>PARSER_JN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0075507273391e5967b9d869daed98bcab15097a6b28d7658374164aa5eabf155" prot="public">
          <name>PARSER_MIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0075507273391e5967b9d869daed98bcabc0c26e39e66ba16b2fa97b76c9dae35" prot="public">
          <name>PARSER_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a0075507273391e5967b9d869daed98bcac75e51f4689c58f1e203db343bf3fdd8" prot="public">
          <name>PARSER_FMOD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="48" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="48" bodyend="63"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a2a6ee79bf3b5c5b67de8ef46a663051b" prot="public" static="no" strong="no">
        <type></type>
        <name>parser_f3_t</name>
        <enumvalue id="namespaceamrex_1a2a6ee79bf3b5c5b67de8ef46a663051ba8ecdd6c594b2624b8d56c95e2e48d836" prot="public">
          <name>PARSER_IF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="65" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883" prot="public" static="no" strong="no">
        <type></type>
        <name>parser_node_t</name>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883ae9fa1ed2645825d754693a50b5dbee64" prot="public">
          <name>PARSER_NUMBER</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883a33139f0d7c11fb241cad32250195de18" prot="public">
          <name>PARSER_SYMBOL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883aaddab969e826ae0bac16443c30c2705f" prot="public">
          <name>PARSER_ADD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883a5e96b8800b23a4312ab9ab355eedaac8" prot="public">
          <name>PARSER_SUB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883a34b1051c3e736038efa50c56e966fac7" prot="public">
          <name>PARSER_MUL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883aa5ff06ac4391a65f278df5a954d5a6d2" prot="public">
          <name>PARSER_DIV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883a6429047d5b0bf3a06a6b6375b39f4159" prot="public">
          <name>PARSER_NEG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883a67341a513537b8aa38737d076a142649" prot="public">
          <name>PARSER_F1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883af549bd0564bc7302b40b87b67b296aad" prot="public">
          <name>PARSER_F2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883addb390004a66cd17993db3c37d2ab248" prot="public">
          <name>PARSER_F3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883ac0862fc2f508fb56ae7cae7fc86a282c" prot="public">
          <name>PARSER_ASSIGN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883a705f34196073afbdc27635fcf758a5b7" prot="public">
          <name>PARSER_LIST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883a0b5cc0f9de072091ceee304bbc358040" prot="public">
          <name>PARSER_ADD_VP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883ac49c16fd05dd693a9cc948e30cf48cb1" prot="public">
          <name>PARSER_ADD_PP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883aa2b83120a5db07be0ad4fe6ad9c16b05" prot="public">
          <name>PARSER_SUB_VP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883a8d1d89048963fcb37253727fec77fcd6" prot="public">
          <name>PARSER_SUB_PP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883a933cecbebd1feeb97ae914db16cbf57f" prot="public">
          <name>PARSER_MUL_VP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883ab2d70451fe0f516e9dd8376c8d4b81e3" prot="public">
          <name>PARSER_MUL_PP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883a79b5ef7712fa2cb254d44b42ed767d2d" prot="public">
          <name>PARSER_DIV_VP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883a0dddd04ba4439c819abb459d82d8c6b6" prot="public">
          <name>PARSER_DIV_PP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883ae9cc9d5dd84411ef2efd22a0c1f775ea" prot="public">
          <name>PARSER_NEG_P</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="69" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="69" bodyend="91"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebc" prot="public" static="no" strong="yes">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <name>EBSupport</name>
        <enumvalue id="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebca334c4a4c42fdb79d7ebc3e73b517e6f8" prot="public">
          <name>none</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebcaf17aaabc20bfe045075927934fed52d2" prot="public">
          <name>basic</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para><ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebca210ab9e731c9c36c2c38db15c28a8d1c" prot="public">
          <name>volume</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><itemizedlist>
<listitem><para>volume fraction </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebcae9dc924f238fa6cc29465942875fe8f0" prot="public">
          <name>full</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><itemizedlist>
<listitem><para>area fraction, boundary centroids and face centroids </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBSupport.H" line="7" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBSupport.H" bodystart="7" bodyend="12"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4" prot="public" static="no" strong="yes">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <name>BottomSolver</name>
        <enumvalue id="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a7a1920d61156abc05a60135aefe8bc67" prot="public">
          <name>Default</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4aa24fa9dac0801f55f51de06cd8f9d132" prot="public">
          <name>smoother</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4ae123b37d2b5fd373237e049a1e68ca13" prot="public">
          <name>bicgstab</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a6e9cf3eef65da697796cf33f27eb0f57" prot="public">
          <name>cg</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a17ae71b06faf01831e130c5f94157064" prot="public">
          <name>bicgcg</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a8d94447f423b03d332649d28ef49bfdb" prot="public">
          <name>cgbicg</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a9d87b5177c778e77c47e29f2b536cd1b" prot="public">
          <name>hypre</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a1c626ad40ecbe4497cfe809fbc98f31f" prot="public">
          <name>petsc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="28" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="28" bodyend="30"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceamrex_1a83d03eb75adb29c552bae0a3d625895b" prot="public" static="no" strong="yes">
        <type></type>
        <name>DataLayout</name>
        <enumvalue id="namespaceamrex_1a83d03eb75adb29c552bae0a3d625895ba16b9d7db01fae7828de9941a0736d3d0" prot="public">
          <name>AoS</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceamrex_1a83d03eb75adb29c552bae0a3d625895ba7df366f0036440c84928f057941f8dad" prot="public">
          <name>SoA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A tag that defines the data layout policy used by particle tiles. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" line="19" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" bodystart="20" bodyend="23"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceamrex_1a046a83e139b61c9ec447bd89eed50967" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::DeriveFunc) (amrex::Real *data, AMREX_ARLIM_P(dlo), AMREX_ARLIM_P(dhi), const int *nvar, const amrex::Real *compdat, AMREX_ARLIM_P(compdat_lo), AMREX_ARLIM_P(compdat_hi), const int *ncomp, const int *lo, const int *hi, const int *domain_lo, const int *domain_hi, const amrex::Real *delta, const amrex::Real *xlo, const amrex::Real *time, const amrex::Real *dt, const int *bcrec, const int *level, const int *grid_no)</definition>
        <argsstring>)(amrex::Real *data, AMREX_ARLIM_P(dlo), AMREX_ARLIM_P(dhi), const int *nvar, const amrex::Real *compdat, AMREX_ARLIM_P(compdat_lo), AMREX_ARLIM_P(compdat_hi), const int *ncomp, const int *lo, const int *hi, const int *domain_lo, const int *domain_hi, const amrex::Real *delta, const amrex::Real *xlo, const amrex::Real *time, const amrex::Real *dt, const int *bcrec, const int *level, const int *grid_no)</argsstring>
        <name>DeriveFunc</name>
        <briefdescription>
<para>Type of extern &quot;C&quot; function called by <ref refid="classamrex_1_1DeriveRec" kindref="compound">DeriveRec</ref> to compute derived quantity. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that AMREX_ARLIM_P will be preprocessed into DIM const int&amp;&apos;s.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="AMReX__ArrayLim_8H_1af53c6334de4f960ca760f7ea802e1e98" kindref="member">AMREX_ARLIM_P(dlo)</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="AMReX__ArrayLim_8H_1af53c6334de4f960ca760f7ea802e1e98" kindref="member">AMREX_ARLIM_P(dhi)</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compdat</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="AMReX__ArrayLim_8H_1af53c6334de4f960ca760f7ea802e1e98" kindref="member">AMREX_ARLIM_P(compdat_lo)</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="AMReX__ArrayLim_8H_1af53c6334de4f960ca760f7ea802e1e98" kindref="member">AMREX_ARLIM_P(compdat_hi)</ref></parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bcrec</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grid_no</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="43" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1abf838b25d605cefbf6150bc883f4741d" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::DeriveFunc3D) (amrex::Real *data, const int *dlo, const int *dhi, const int *nvar, const amrex::Real *compdat, const int *clo, const int *chi, const int *ncomp, const int *lo, const int *hi, const int *domain_lo, const int *domain_hi, const amrex::Real *delta, const amrex::Real *xlo, const amrex::Real *time, const amrex::Real *dt, const int *bcrec, const int *level, const int *grid_no)</definition>
        <argsstring>)(amrex::Real *data, const int *dlo, const int *dhi, const int *nvar, const amrex::Real *compdat, const int *clo, const int *chi, const int *ncomp, const int *lo, const int *hi, const int *domain_lo, const int *domain_hi, const amrex::Real *delta, const amrex::Real *xlo, const amrex::Real *time, const amrex::Real *dt, const int *bcrec, const int *level, const int *grid_no)</argsstring>
        <name>DeriveFunc3D</name>
        <briefdescription>
<para>This is dimension agnostic. For example, dlo always has three elements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dhi</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compdat</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>chi</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bcrec</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grid_no</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="77" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a193c40127f1734f83e3bb23cab534a24" prot="public" static="no">
        <type>std::function&lt; void(const <ref refid="classamrex_1_1Box" kindref="compound">amrex::Box</ref> &amp;bx, <ref refid="classamrex_1_1FArrayBox" kindref="compound">amrex::FArrayBox</ref> &amp;derfab, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> dcomp, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> ncomp, const <ref refid="classamrex_1_1FArrayBox" kindref="compound">amrex::FArrayBox</ref> &amp;datafab, const <ref refid="classamrex_1_1Geometry" kindref="compound">amrex::Geometry</ref> &amp;geomdata, amrex::Real time, const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *bcrec, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> level)&gt;</type>
        <definition>typedef std::function&lt;void(const amrex::Box&amp; bx, amrex::FArrayBox&amp; derfab, int dcomp, int ncomp, const amrex::FArrayBox&amp; datafab, const amrex::Geometry&amp; geomdata, amrex::Real time, const int* bcrec, int level)&gt; amrex::DeriveFuncFab</definition>
        <argsstring></argsstring>
        <name>DeriveFuncFab</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="89" column="2" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1af0689a6124feceae5af1fb73e7b971f8" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const  &amp;bx, <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;data, const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> dcomp, const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> numcomp, <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const  &amp;geom, const Real time, const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;bcr, const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> bcomp, const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> scomp)&gt;</type>
        <definition>typedef std::function&lt;void(Box const&amp; bx, FArrayBox&amp; data, const int dcomp, const int numcomp, Geometry const&amp; geom, const Real time, const Vector&lt;BCRec&gt;&amp; bcr, const int bcomp, const int scomp)&gt; amrex::BndryFuncFabDefault</definition>
        <argsstring></argsstring>
        <name>BndryFuncFabDefault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" line="27" column="2" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateDescriptor.H" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1accd616989af467165f35b0b213ee2e1a" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::ErrorFuncDefault) (int *tag, AMREX_ARLIM_P(tlo), AMREX_ARLIM_P(thi), const int *tagval, const int *clearval, amrex::Real *data, AMREX_ARLIM_P(data_lo), AMREX_ARLIM_P(data_hi), const int *lo, const int *hi, const int *nvar, const int *domain_lo, const int *domain_hi, const amrex::Real *dx, const amrex::Real *xlo, const amrex::Real *prob_lo, const amrex::Real *time, const int *level)</definition>
        <argsstring>)(int *tag, AMREX_ARLIM_P(tlo), AMREX_ARLIM_P(thi), const int *tagval, const int *clearval, amrex::Real *data, AMREX_ARLIM_P(data_lo), AMREX_ARLIM_P(data_hi), const int *lo, const int *hi, const int *nvar, const int *domain_lo, const int *domain_hi, const amrex::Real *dx, const amrex::Real *xlo, const amrex::Real *prob_lo, const amrex::Real *time, const int *level)</argsstring>
        <name>ErrorFuncDefault</name>
        <briefdescription>
<para>Type of extern &quot;C&quot; function called by <ref refid="classamrex_1_1ErrorRec" kindref="compound">ErrorRec</ref> to do tagging of cells for refinement. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thi</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagval</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clearval</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prob_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="44" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a712777d91904823bb5241758651b9709" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::ErrorFunc2Default) (int *tag, AMREX_ARLIM_P(tlo), AMREX_ARLIM_P(thi), const int *tagval, const int *clearval, amrex::Real *data, AMREX_ARLIM_P(data_lo), AMREX_ARLIM_P(data_hi), const int *lo, const int *hi, const int *nvar, const int *domain_lo, const int *domain_hi, const amrex::Real *dx, const int *level, const amrex::Real *avg)</definition>
        <argsstring>)(int *tag, AMREX_ARLIM_P(tlo), AMREX_ARLIM_P(thi), const int *tagval, const int *clearval, amrex::Real *data, AMREX_ARLIM_P(data_lo), AMREX_ARLIM_P(data_hi), const int *lo, const int *hi, const int *nvar, const int *domain_lo, const int *domain_hi, const amrex::Real *dx, const int *level, const amrex::Real *avg)</argsstring>
        <name>ErrorFunc2Default</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="53" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a198cab9c3268f289bedd23e83dd7e95d" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::ErrorFunc3DDefault) (int *tag, const int *tlo, const int *thi, const int *tagval, const int *clearval, amrex::Real *data, const int *data_lo, const int *data_hi, const int *lo, const int *hi, const int *nvar, const int *domain_lo, const int *domain_hi, const amrex::Real *dx, const amrex::Real *xlo, const amrex::Real *prob_lo, const amrex::Real *time, const int *level)</definition>
        <argsstring>)(int *tag, const int *tlo, const int *thi, const int *tagval, const int *clearval, amrex::Real *data, const int *data_lo, const int *data_hi, const int *lo, const int *hi, const int *nvar, const int *domain_lo, const int *domain_hi, const amrex::Real *dx, const amrex::Real *xlo, const amrex::Real *prob_lo, const amrex::Real *time, const int *level)</argsstring>
        <name>ErrorFunc3DDefault</name>
        <briefdescription>
<para>Dimension agnostic version that always has three elements. Note that this is only implemented for the ErrorFunc class, not ErrorFunc2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thi</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tagval</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clearval</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain_hi</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xlo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prob_lo</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" line="84" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a436b95e95cc4994a7c179e3cebe42ea6" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::PTR_TO_VOID_FUNC) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>PTR_TO_VOID_FUNC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="33" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1aa944154cc363fe5103f6638e3726d2ca" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::ErrorHandler) (const char *msg)</definition>
        <argsstring>)(const char *msg)</argsstring>
        <name>ErrorHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="34" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1afe930d74045516fece8591f173e57007" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>std::array&lt; T, N &gt;</type>
        <definition>using amrex::Array = typedef std::array&lt;T,N&gt;</definition>
        <argsstring></argsstring>
        <name>Array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="23" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a9de48c04056551924746c42f9eda3c8f" prot="public" static="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, AMREX_SPACEDIM &gt;</type>
        <definition>using amrex::RealArray = typedef Array&lt;Real, AMREX_SPACEDIM&gt;</definition>
        <argsstring></argsstring>
        <name>RealArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="25" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a2b58b8c81ca5e47c17a861e86354eba1" prot="public" static="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt;</type>
        <definition>using amrex::IntArray = typedef Array&lt;int , AMREX_SPACEDIM&gt;</definition>
        <argsstring></argsstring>
        <name>IntArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="26" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1af2ed2dc1168064ab4409c918ad0dfce6" prot="public" static="no">
        <type><ref refid="structamrex_1_1BATransformer" kindref="compound">BATransformer</ref></type>
        <definition>using amrex::BndryBATransformer = typedef BATransformer</definition>
        <argsstring></argsstring>
        <name>BndryBATransformer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="515" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="515" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1ac3aaf3d47b0fc6e69f9405fcebcdc4fe" prot="public" static="no">
        <type>std::runtime_error</type>
        <definition>using amrex::RuntimeError = typedef std::runtime_error</definition>
        <argsstring></argsstring>
        <name>RuntimeError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Exception.H" line="9" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Exception.H" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a2081a3d338ad899832ab632c44a12eb5" prot="public" static="no">
        <type>std::unique_ptr&lt; char, <ref refid="structamrex_1_1TheFaArenaDeleter" kindref="compound">TheFaArenaDeleter</ref> &gt;</type>
        <definition>using amrex::TheFaArenaPointer = typedef std::unique_ptr&lt;char, TheFaArenaDeleter&gt;</definition>
        <argsstring></argsstring>
        <name>TheFaArenaPointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="148" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1abda821661019fb0a77eb3a9706dc7330" prot="public" static="no">
        <type><ref refid="classamrex_1_1DefaultFabFactory" kindref="compound">DefaultFabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt;</type>
        <definition>using amrex::FArrayBoxFactory = typedef DefaultFabFactory&lt;FArrayBox&gt;</definition>
        <argsstring></argsstring>
        <name>FArrayBoxFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="500" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="500" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a179fafc569924202b166896b608cd5c2" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ArenaAllocator" kindref="compound">amrex::ArenaAllocator</ref>&lt; T &gt;</type>
        <definition>using amrex::DefaultAllocator = typedef amrex::ArenaAllocator&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>DefaultAllocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAllocators.H" line="244" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAllocators.H" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a3e08759747455ff96c8f68e8673c2b19" prot="public" static="no">
        <type>cudaStream_t</type>
        <definition>using amrex::gpuStream_t = typedef cudaStream_t</definition>
        <argsstring></argsstring>
        <name>gpuStream_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" line="73" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuControl.H" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a2235406f46755fe4275db8b042b0da92" prot="public" static="no">
        <type>cudaDeviceProp</type>
        <definition>using amrex::gpuDeviceProp_t = typedef cudaDeviceProp</definition>
        <argsstring></argsstring>
        <name>gpuDeviceProp_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" line="26" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuDevice.H" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a98a85f350a96eb36272d756d5a9c9a05" prot="public" static="no">
        <type>cudaError_t</type>
        <definition>using amrex::gpuError_t = typedef cudaError_t</definition>
        <argsstring></argsstring>
        <name>gpuError_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuError.H" line="33" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuError.H" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a270e267cbd0e472dd8297d46a9c76854" prot="public" static="no">
        <type><ref refid="classamrex_1_1FabArrayId" kindref="compound">FabArrayId</ref></type>
        <definition>typedef FabArrayId amrex::MultiFabId</definition>
        <argsstring></argsstring>
        <name>MultiFabId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFCopyDescriptor.H" line="13" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFCopyDescriptor.H" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a7dc0241934cfa7c24ab6afcbe41937bf" prot="public" static="no">
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; float &gt; &gt;</type>
        <definition>typedef FabArray&lt;BaseFab&lt;float&gt; &gt; amrex::fMultiFab</definition>
        <argsstring></argsstring>
        <name>fMultiFab</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="22" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a395b6c263aecc344bf7648fe2d8d75cf" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::BndryFuncDefault) (Real *data, AMREX_ARLIM_P(lo), AMREX_ARLIM_P(hi), const int *dom_lo, const int *dom_hi, const Real *dx, const Real *grd_lo, const Real *time, const int *bc)</definition>
        <argsstring>)(Real *data, AMREX_ARLIM_P(lo), AMREX_ARLIM_P(hi), const int *dom_lo, const int *dom_hi, const Real *dx, const Real *grd_lo, const Real *time, const int *bc)</argsstring>
        <name>BndryFuncDefault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" line="18" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1ab0cdf132a72bb586fa96bbdc53a19149" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::BndryFunc3DDefault) (Real *data, const int *lo, const int *hi, const int *dom_lo, const int *dom_hi, const Real *dx, const Real *grd_lo, const Real *time, const int *bc)</definition>
        <argsstring>)(Real *data, const int *lo, const int *hi, const int *dom_lo, const int *dom_hi, const Real *dx, const Real *grd_lo, const Real *time, const int *bc)</argsstring>
        <name>BndryFunc3DDefault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" line="22" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a88dd51c88bb54ed73ede55336a7519c3" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* amrex::UserFillBox) (Box const  &amp;bx, Array4&lt; Real &gt; const  &amp;dest, const int dcomp, const int numcomp, GeometryData const  &amp;geom, const Real time, const BCRec *bcr, const int bcomp, const int orig_comp)</definition>
        <argsstring>)(Box const &amp;bx, Array4&lt; Real &gt; const &amp;dest, const int dcomp, const int numcomp, GeometryData const &amp;geom, const Real time, const BCRec *bcr, const int bcomp, const int orig_comp)</argsstring>
        <name>UserFillBox</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" line="28" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PhysBCFunct.H" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1abbea0a87a768d8f4e8112b9cd673b124" prot="public" static="no">
        <type>curandState_t</type>
        <definition>using amrex::randState_t = typedef curandState_t</definition>
        <argsstring></argsstring>
        <name>randState_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RandomEngine.H" line="46" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RandomEngine.H" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a00604a127d1bcc6545bea88e8aa906c8" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>std::tuple&lt; Ts... &gt;</type>
        <definition>using amrex::Tuple = typedef std::tuple&lt;Ts...&gt;</definition>
        <argsstring></argsstring>
        <name>Tuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="17" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a11fcc5e72789252d6182a7d15233725f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structamrex_1_1detail_1_1TypeListGet" kindref="compound">detail::TypeListGet</ref>&lt; I, T &gt;::type</type>
        <definition>using amrex::TypeAt = typedef typename detail::TypeListGet&lt;I,T&gt;::type</definition>
        <argsstring></argsstring>
        <name>TypeAt</name>
        <briefdescription>
<para>Type at position I of a <ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" line="32" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
          <param>
            <type>class T</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt; B, T &gt;::type</type>
        <definition>using amrex::EnableIf_t = typedef typename std::enable_if&lt;B,T&gt;::type</definition>
        <argsstring></argsstring>
        <name>EnableIf_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" line="41" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1af199566bf00a390cb47c2a0140b3fc67" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structamrex_1_1detail_1_1Detector" kindref="compound">detail::Detector</ref>&lt; <ref refid="structamrex_1_1detail_1_1Nonesuch" kindref="compound">detail::Nonesuch</ref>, void, Op, Args... &gt;::value_t</type>
        <definition>using amrex::IsDetected = typedef typename detail::Detector&lt;detail::Nonesuch, void, Op, Args...&gt;::value_t</definition>
        <argsstring></argsstring>
        <name>IsDetected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" line="158" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a4c98b791b1f6442671e5cfa546a3df4f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structamrex_1_1detail_1_1Detector" kindref="compound">detail::Detector</ref>&lt; <ref refid="structamrex_1_1detail_1_1Nonesuch" kindref="compound">detail::Nonesuch</ref>, void, Op, Args... &gt;::type</type>
        <definition>using amrex::Detected_t = typedef typename detail::Detector&lt;detail::Nonesuch, void, Op, Args...&gt;::type</definition>
        <argsstring></argsstring>
        <name>Detected_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" line="161" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1abe72f840d81a1ce49a3811fe8295b222" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Default</type>
          </param>
          <param>
            <type>template&lt; class... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structamrex_1_1detail_1_1Detector" kindref="compound">detail::Detector</ref>&lt; Default, void, Op, Args... &gt;::type</type>
        <definition>using amrex::DetectedOr = typedef typename detail::Detector&lt;Default, void, Op, Args...&gt;::type</definition>
        <argsstring></argsstring>
        <name>DetectedOr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" line="164" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1afcea7cdc6e03361f56c401b56d66a870" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class Expected</type>
          </param>
          <param>
            <type>template&lt; typename... &gt; class</type>
            <declname>Op</declname>
            <defname>Op</defname>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::is_same&lt; Expected, <ref refid="namespaceamrex_1a4c98b791b1f6442671e5cfa546a3df4f" kindref="member">Detected_t</ref>&lt; Op, Args... &gt; &gt;</type>
        <definition>using amrex::IsDetectedExact = typedef std::is_same&lt;Expected, Detected_t&lt;Op, Args...&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>IsDetectedExact</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" line="167" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a3d7af06ef9ce2e0a696e5c73f3e460aa" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class B</type>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool, !bool(B::value)&gt;</type>
        <definition>using amrex::Negation = typedef std::integral_constant&lt;bool, !bool(B::value)&gt;</definition>
        <argsstring></argsstring>
        <name>Negation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" line="224" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1ae337b46a7ca54b353861635503079536" prot="public" static="no">
        <type>std::conditional&lt; std::chrono::high_resolution_clock::is_steady, std::chrono::high_resolution_clock, std::chrono::steady_clock &gt;::type</type>
        <definition>using amrex::MaxResSteadyClock = typedef std::conditional&lt;std::chrono::high_resolution_clock::is_steady, std::chrono::high_resolution_clock, std::chrono::steady_clock&gt;::type</definition>
        <argsstring></argsstring>
        <name>MaxResSteadyClock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="248" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a9f6fb58eb396dd06df45ba7787548b32" prot="public" static="no">
        <type><ref refid="classamrex_1_1BndryDataT" kindref="compound">BndryDataT</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>using amrex::BndryData = typedef BndryDataT&lt;MultiFab&gt;</definition>
        <argsstring></argsstring>
        <name>BndryData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="310" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a24fbf2d04e7dac268f7f5cb3af96064e" prot="public" static="no">
        <type><ref refid="classamrex_1_1BndryDataT" kindref="compound">BndryDataT</ref>&lt; <ref refid="namespaceamrex_1a7dc0241934cfa7c24ab6afcbe41937bf" kindref="member">fMultiFab</ref> &gt;</type>
        <definition>using amrex::fBndryData = typedef BndryDataT&lt;fMultiFab&gt;</definition>
        <argsstring></argsstring>
        <name>fBndryData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="311" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a51a3951b54ca3db6bf891ebc2f867168" prot="public" static="no">
        <type><ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>using amrex::BndryRegister = typedef BndryRegisterT&lt;MultiFab&gt;</definition>
        <argsstring></argsstring>
        <name>BndryRegister</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="353" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1abe0f5b82795df17e723853b7c1b8ee7d" prot="public" static="no">
        <type><ref refid="classamrex_1_1BndryRegisterT" kindref="compound">BndryRegisterT</ref>&lt; <ref refid="namespaceamrex_1a7dc0241934cfa7c24ab6afcbe41937bf" kindref="member">fMultiFab</ref> &gt;</type>
        <definition>using amrex::fBndryRegister = typedef BndryRegisterT&lt;fMultiFab&gt;</definition>
        <argsstring></argsstring>
        <name>fBndryRegister</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" line="354" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryRegister.H" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a15203068a5d8d4de2f3ff93e5e0f21d2" prot="public" static="no">
        <type><ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>using amrex::FabSet = typedef FabSetT&lt;MultiFab&gt;</definition>
        <argsstring></argsstring>
        <name>FabSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="409" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a25f205ddb2e9488505c2db83a92a5434" prot="public" static="no">
        <type><ref refid="classamrex_1_1FabSetT" kindref="compound">FabSetT</ref>&lt; <ref refid="namespaceamrex_1a7dc0241934cfa7c24ab6afcbe41937bf" kindref="member">fMultiFab</ref> &gt;</type>
        <definition>using amrex::fFabSet = typedef FabSetT&lt;fMultiFab&gt;</definition>
        <argsstring></argsstring>
        <name>fFabSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" line="410" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_FabSet.H" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a3d926e5fad46a5fd2da4b495b16f449d" prot="public" static="no">
        <type><ref refid="classamrex_1_1InterpBndryDataT" kindref="compound">InterpBndryDataT</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>using amrex::InterpBndryData = typedef InterpBndryDataT&lt;MultiFab&gt;</definition>
        <argsstring></argsstring>
        <name>InterpBndryData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData.H" line="277" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData.H" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a56136e9147b36f3e7fcdf12c22760b58" prot="public" static="no">
        <type><ref refid="classamrex_1_1InterpBndryDataT" kindref="compound">InterpBndryDataT</ref>&lt; <ref refid="namespaceamrex_1a7dc0241934cfa7c24ab6afcbe41937bf" kindref="member">fMultiFab</ref> &gt;</type>
        <definition>using amrex::fInterpBndryData = typedef InterpBndryDataT&lt;fMultiFab&gt;</definition>
        <argsstring></argsstring>
        <name>fInterpBndryData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData.H" line="278" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData.H" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a9418cfdd8457daebb1c971d4e38ceb17" prot="public" static="no">
        <type><ref refid="classamrex_1_1YAFluxRegisterT" kindref="compound">YAFluxRegisterT</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>using amrex::YAFluxRegister = typedef YAFluxRegisterT&lt;MultiFab&gt;</definition>
        <argsstring></argsstring>
        <name>YAFluxRegister</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="474" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1aa9c032480d2659c266fb23d70800f6a5" prot="public" static="no">
        <type><ref refid="classamrex_1_1MLABecLaplacianT" kindref="compound">MLABecLaplacianT</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>using amrex::MLABecLaplacian = typedef MLABecLaplacianT&lt;MultiFab&gt;</definition>
        <argsstring></argsstring>
        <name>MLABecLaplacian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" line="1314" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H" bodystart="1314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1afd71b3eea629ca099ace90909350cc56" prot="public" static="no">
        <type><ref refid="classamrex_1_1MLALaplacianT" kindref="compound">MLALaplacianT</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>using amrex::MLALaplacian = typedef MLALaplacianT&lt;MultiFab&gt;</definition>
        <argsstring></argsstring>
        <name>MLALaplacian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALaplacian.H" line="748" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALaplacian.H" bodystart="748" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a2116fd8f117dd8ebb01e6a3b99c7947e" prot="public" static="no">
        <type><ref refid="classamrex_1_1MLCellABecLapT" kindref="compound">MLCellABecLapT</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>using amrex::MLCellABecLap = typedef MLCellABecLapT&lt;MultiFab&gt;</definition>
        <argsstring></argsstring>
        <name>MLCellABecLap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" line="749" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H" bodystart="749" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a6d2f435b4a824073e4ba2c714ff4770b" prot="public" static="no">
        <type><ref refid="classamrex_1_1MLCellLinOpT" kindref="compound">MLCellLinOpT</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>using amrex::MLCellLinOp = typedef MLCellLinOpT&lt;MultiFab&gt;</definition>
        <argsstring></argsstring>
        <name>MLCellLinOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" line="2104" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H" bodystart="2104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1adc786fadc751afd641a3d05650467dfc" prot="public" static="no">
        <type><ref refid="classamrex_1_1MLCGSolverT" kindref="compound">MLCGSolverT</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>using amrex::MLCGSolver = typedef MLCGSolverT&lt;MultiFab&gt;</definition>
        <argsstring></argsstring>
        <name>MLCGSolver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" line="413" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H" bodystart="413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a6cfa07a78393bb456aa7d33ced04fb46" prot="public" static="no">
        <type><ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>using amrex::MLLinOp = typedef MLLinOpT&lt;MultiFab&gt;</definition>
        <argsstring></argsstring>
        <name>MLLinOp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="1523" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a77b48f471801c4f6a597804a89c3b543" prot="public" static="no">
        <type><ref refid="classamrex_1_1MLMGT" kindref="compound">MLMGT</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>using amrex::MLMG = typedef MLMGT&lt;MultiFab&gt;</definition>
        <argsstring></argsstring>
        <name>MLMG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="1897" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="1897" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a9214b7c07d9c296122f7418f73f798e9" prot="public" static="no">
        <type><ref refid="classamrex_1_1MLMGBndryT" kindref="compound">MLMGBndryT</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>using amrex::MLMGBndry = typedef MLMGBndryT&lt;MultiFab&gt;</definition>
        <argsstring></argsstring>
        <name>MLMGBndry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMGBndry.H" line="132" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMGBndry.H" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a339ac1b3381df4095a659ec2b7980cb3" prot="public" static="no">
        <type><ref refid="classamrex_1_1MLPoissonT" kindref="compound">MLPoissonT</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>using amrex::MLPoisson = typedef MLPoissonT&lt;MultiFab&gt;</definition>
        <argsstring></argsstring>
        <name>MLPoisson</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="1012" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="1012" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1a2172ed493dfadbd34d5cdb72995f96af" prot="public" static="no">
        <type><ref refid="classamrex_1_1ParIter" kindref="compound">ParIter</ref>&lt; AMREX_SPACEDIM &gt;</type>
        <definition>using amrex::TracerParIter = typedef ParIter&lt;AMREX_SPACEDIM&gt;</definition>
        <argsstring></argsstring>
        <name>TracerParIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_TracerParticles.H" line="40" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_TracerParticles.H" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceamrex_1afdf427459e2b9a7718975c38a36d8be2" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr Real</type>
        <definition>constexpr Real amrex::INVALID_TIME</definition>
        <argsstring></argsstring>
        <name>INVALID_TIME</name>
        <initializer>= -1.0e200_rt</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" line="21" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a77d7d152de71abe1856e19ee2122a24a" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::MFNEWDATA</definition>
        <argsstring></argsstring>
        <name>MFNEWDATA</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" line="24" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a22e5d2b124fbc2a101b2538d589e2899" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::MFOLDDATA</definition>
        <argsstring></argsstring>
        <name>MFOLDDATA</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" line="25" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_StateData.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1acf5df53eeb808ad11275f15efa7d4ab3" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* amrex::err_name[]</definition>
        <argsstring>[]</argsstring>
        <name>err_name</name>
        <initializer>= { &quot;Special&quot;, &quot;Standard&quot;, &quot;UseAverage&quot; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" line="215" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ac9a0604c88f7d92212acaf069617affa" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1PCInterp" kindref="compound">PCInterp</ref></type>
        <definition>AMREX_EXPORT PCInterp amrex::pc_interp</definition>
        <argsstring></argsstring>
        <name>pc_interp</name>
        <briefdescription>
<para>CONSTRUCT A GLOBAL OBJECT OF EACH VERSION. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="32" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="32" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" declline="917" declcolumn="47"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a4fd8c266e07ac4dce013e0210727d3ab" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1NodeBilinear" kindref="compound">NodeBilinear</ref></type>
        <definition>AMREX_EXPORT NodeBilinear amrex::node_bilinear_interp</definition>
        <argsstring></argsstring>
        <name>node_bilinear_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="33" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="33" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" declline="918" declcolumn="47"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a2079e72d4d0c28adef63dabe23fc630e" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1FaceLinear" kindref="compound">FaceLinear</ref></type>
        <definition>AMREX_EXPORT FaceLinear amrex::face_linear_interp</definition>
        <argsstring></argsstring>
        <name>face_linear_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="34" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="34" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" declline="920" declcolumn="47"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ac63805de43a5687215fb203dc3495abc" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1FaceDivFree" kindref="compound">FaceDivFree</ref></type>
        <definition>AMREX_EXPORT FaceDivFree amrex::face_divfree_interp</definition>
        <argsstring></argsstring>
        <name>face_divfree_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="35" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="35" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" declline="919" declcolumn="47"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1aeb0ce1e79e29c10f31e875b21b47405f" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CellConservativeLinear" kindref="compound">CellConservativeLinear</ref></type>
        <definition>AMREX_EXPORT CellConservativeLinear amrex::lincc_interp</definition>
        <argsstring></argsstring>
        <name>lincc_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="36" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="36" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" declline="921" declcolumn="47"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1acacb02d35ac8dda56452548bc6af1299" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CellConservativeLinear" kindref="compound">CellConservativeLinear</ref></type>
        <definition>AMREX_EXPORT CellConservativeLinear amrex::cell_cons_interp</definition>
        <argsstring>(0)</argsstring>
        <name>cell_cons_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="37" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" bodystart="922" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" declline="922" declcolumn="47"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a021dc84969e65c184034f112eec3b887" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CellConservativeProtected" kindref="compound">CellConservativeProtected</ref></type>
        <definition>AMREX_EXPORT CellConservativeProtected amrex::protected_interp</definition>
        <argsstring></argsstring>
        <name>protected_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="38" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="38" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" declline="924" declcolumn="47"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a1c282d3f8e2bfed573c63087cee86525" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CellConservativeQuartic" kindref="compound">CellConservativeQuartic</ref></type>
        <definition>AMREX_EXPORT CellConservativeQuartic amrex::quartic_interp</definition>
        <argsstring></argsstring>
        <name>quartic_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="39" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="39" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" declline="925" declcolumn="47"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1aa4a112132159dbe65a15461c50f001e5" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CellBilinear" kindref="compound">CellBilinear</ref></type>
        <definition>AMREX_EXPORT CellBilinear amrex::cell_bilinear_interp</definition>
        <argsstring></argsstring>
        <name>cell_bilinear_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="40" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="40" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" declline="923" declcolumn="47"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a598d5de93b75c979f72ab8a78f4a0048" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CellQuadratic" kindref="compound">CellQuadratic</ref></type>
        <definition>AMREX_EXPORT CellQuadratic amrex::quadratic_interp</definition>
        <argsstring></argsstring>
        <name>quadratic_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="41" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="41" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" declline="926" declcolumn="47"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1abac483ba9c2744a548a0fbd09c679165" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1CellQuartic" kindref="compound">CellQuartic</ref></type>
        <definition>AMREX_EXPORT CellQuartic amrex::cell_quartic_interp</definition>
        <argsstring></argsstring>
        <name>cell_quartic_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" line="42" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.cpp" bodystart="42" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interpolater.H" declline="927" declcolumn="47"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a087f815fd67c6ce36f943ad7dea6abc9" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MFPCInterp" kindref="compound">MFPCInterp</ref></type>
        <definition>AMREX_EXPORT MFPCInterp amrex::mf_pc_interp</definition>
        <argsstring></argsstring>
        <name>mf_pc_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterpolater.cpp" line="10" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterpolater.cpp" bodystart="10" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterpolater.H" declline="137" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a6e7419b7a3f25db35c9f9593b8636468" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MFCellConsLinInterp" kindref="compound">MFCellConsLinInterp</ref></type>
        <definition>AMREX_EXPORT MFCellConsLinInterp amrex::mf_cell_cons_interp</definition>
        <argsstring>(false)</argsstring>
        <name>mf_cell_cons_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterpolater.cpp" line="11" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterpolater.H" bodystart="138" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterpolater.H" declline="138" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ae32a7a1de294616e18b781af0bc3fa5e" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MFCellConsLinInterp" kindref="compound">MFCellConsLinInterp</ref></type>
        <definition>AMREX_EXPORT MFCellConsLinInterp amrex::mf_lincc_interp</definition>
        <argsstring>(true)</argsstring>
        <name>mf_lincc_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterpolater.cpp" line="12" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterpolater.H" bodystart="139" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterpolater.H" declline="139" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a9d874682386d3f6c35f8d1a09d76ba42" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MFCellConsLinMinmaxLimitInterp" kindref="compound">MFCellConsLinMinmaxLimitInterp</ref></type>
        <definition>AMREX_EXPORT MFCellConsLinMinmaxLimitInterp amrex::mf_linear_slope_minmax_interp</definition>
        <argsstring></argsstring>
        <name>mf_linear_slope_minmax_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterpolater.cpp" line="13" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterpolater.cpp" bodystart="13" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterpolater.H" declline="140" declcolumn="52"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a3860e634d51288cfb742504b741a5dfd" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MFCellBilinear" kindref="compound">MFCellBilinear</ref></type>
        <definition>AMREX_EXPORT MFCellBilinear amrex::mf_cell_bilinear_interp</definition>
        <argsstring></argsstring>
        <name>mf_cell_bilinear_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterpolater.cpp" line="14" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterpolater.cpp" bodystart="14" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterpolater.H" declline="141" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1af8a5d8a69cdb073207459d3f2cd85279" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MFNodeBilinear" kindref="compound">MFNodeBilinear</ref></type>
        <definition>AMREX_EXPORT MFNodeBilinear amrex::mf_node_bilinear_interp</definition>
        <argsstring></argsstring>
        <name>mf_node_bilinear_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterpolater.cpp" line="17" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterpolater.cpp" bodystart="17" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterpolater.H" declline="142" declcolumn="41"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a3b30dfb18fc4a2ff698adce0b7216359" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr char</type>
        <definition>constexpr char amrex::ResetDisplay[]</definition>
        <argsstring>[]</argsstring>
        <name>ResetDisplay</name>
        <initializer>= &quot;\033[0m&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ANSIEscCode.H" line="8" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ANSIEscCode.H" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a9a502210430a0780c1ee189758385a60" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; Long &gt;</type>
        <definition>std::atomic&lt; Long &gt; amrex::atomic_total_bytes_allocated_in_fabs</definition>
        <argsstring></argsstring>
        <name>atomic_total_bytes_allocated_in_fabs</name>
        <initializer>{0L}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="13" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="13" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" declline="42" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a05893af4b8f7c472a5f0d5afe9fddcde" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; Long &gt;</type>
        <definition>std::atomic&lt; Long &gt; amrex::atomic_total_bytes_allocated_in_fabs_hwm</definition>
        <argsstring></argsstring>
        <name>atomic_total_bytes_allocated_in_fabs_hwm</name>
        <initializer>{0L}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="14" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="14" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" declline="43" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1aaff9d22bb4535133682d1608e85655e0" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; Long &gt;</type>
        <definition>std::atomic&lt; Long &gt; amrex::atomic_total_cells_allocated_in_fabs</definition>
        <argsstring></argsstring>
        <name>atomic_total_cells_allocated_in_fabs</name>
        <initializer>{0L}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="15" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="15" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" declline="44" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1adc54dbf8448fdb9207beb1761e07b80d" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; Long &gt;</type>
        <definition>std::atomic&lt; Long &gt; amrex::atomic_total_cells_allocated_in_fabs_hwm</definition>
        <argsstring></argsstring>
        <name>atomic_total_cells_allocated_in_fabs_hwm</name>
        <initializer>{0L}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="16" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="16" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" declline="45" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ad888998563a26e9b66682405b749228d" prot="public" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::private_total_bytes_allocated_in_fabs</definition>
        <argsstring></argsstring>
        <name>private_total_bytes_allocated_in_fabs</name>
        <initializer>= 0L</initializer>
        <briefdescription>
<para>total bytes at any given time </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="17" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="17" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" declline="46" declcolumn="13"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a62aee7a0bdbb6a783868e48a7c5c5750" prot="public" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::private_total_bytes_allocated_in_fabs_hwm</definition>
        <argsstring></argsstring>
        <name>private_total_bytes_allocated_in_fabs_hwm</name>
        <initializer>= 0L</initializer>
        <briefdescription>
<para>high-water-mark over a given interval </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="18" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="18" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" declline="47" declcolumn="13"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a404655e80fc045d69ad6aab7c2e67aed" prot="public" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::private_total_cells_allocated_in_fabs</definition>
        <argsstring></argsstring>
        <name>private_total_cells_allocated_in_fabs</name>
        <initializer>= 0L</initializer>
        <briefdescription>
<para>total cells at any given time </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="19" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="19" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" declline="48" declcolumn="13"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a0d15e184f35001014b0941ed211b16ad" prot="public" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::private_total_cells_allocated_in_fabs_hwm</definition>
        <argsstring></argsstring>
        <name>private_total_cells_allocated_in_fabs_hwm</name>
        <initializer>= 0L</initializer>
        <briefdescription>
<para>high-water-mark over a given interval </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="20" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="20" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" declline="49" declcolumn="13"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" prot="public" static="no" mutable="no">
        <type>const</type>
        <definition>const amrex::int[]</definition>
        <argsstring>[]</argsstring>
        <name>int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BLProfiler.cpp" line="1664" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BLProfiler.cpp" bodystart="1664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a4f43e2df85d0db8585e437a05c9c6a81" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::initialized</definition>
        <argsstring></argsstring>
        <name>initialized</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="32" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1adf03962600e13b4ecd73531bd77d0cf5" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="36" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a3b82c3e2c727baf0805e10a006744bc0" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::sfc_threshold</definition>
        <argsstring></argsstring>
        <name>sfc_threshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="37" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a0dc972d04970bb21c8988fb02790526c" prot="public" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::max_efficiency</definition>
        <argsstring></argsstring>
        <name>max_efficiency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="38" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a6c6d85a2ab815c914d82842d370a03d3" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::node_size</definition>
        <argsstring></argsstring>
        <name>node_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="39" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1abd60428797a6f8b12bc87f94351665c2" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>const int amrex::BitsMax</definition>
        <argsstring></argsstring>
        <name>BitsMax</name>
        <initializer>= 8*sizeof(Long)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="399" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a4f06187236b4b28934f47fc5bffad56d" prot="public" static="no" mutable="no">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>const int amrex::REVERSE_ORDER</definition>
        <argsstring></argsstring>
        <name>REVERSE_ORDER</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="400" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1abac42537a3d9d5a2f6c6fac15f99f66c" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char amrex::sys_name[]</definition>
        <argsstring>[]</argsstring>
        <name>sys_name</name>
        <initializer>= &quot;IEEE&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" line="34" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ad449c6a61a817b311238986b4ef19e38" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1a98a85f350a96eb36272d756d5a9c9a05" kindref="member">gpuError_t</ref></type>
        <definition>constexpr gpuError_t amrex::gpuSuccess</definition>
        <argsstring></argsstring>
        <name>gpuSuccess</name>
        <initializer>= cudaSuccess</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuError.H" line="34" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuError.H" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a213d84de93dd842b45e3deef04de2d08" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::finalize_verbose</definition>
        <argsstring></argsstring>
        <name>finalize_verbose</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParmParse.cpp" line="34" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParmParse.cpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ae58ed08a7ada5774ab9f0a1cc892113c" prot="public" static="yes" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::s_pout_filename</definition>
        <argsstring></argsstring>
        <name>s_pout_filename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="43" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a2728e462d28f66dc62edc4974850d0e2" prot="public" static="yes" mutable="no">
        <type>std::string</type>
        <definition>std::string amrex::s_pout_basename</definition>
        <argsstring></argsstring>
        <name>s_pout_basename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="44" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1acfcde804095e39e72c044334abee8044" prot="public" static="yes" mutable="no">
        <type>std::ofstream</type>
        <definition>std::ofstream amrex::s_pout</definition>
        <argsstring></argsstring>
        <name>s_pout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="45" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ad8d02f5dc33b592a116f7d00f0e9f603" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::s_pout_init</definition>
        <argsstring></argsstring>
        <name>s_pout_init</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="47" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a1541ad04792c78b4f6b342ce289c6afe" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::s_pout_open</definition>
        <argsstring></argsstring>
        <name>s_pout_open</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="48" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ae5aa4a92b1c9940d028c38628ec7a866" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1abbea0a87a768d8f4e8112b9cd673b124" kindref="member">amrex::randState_t</ref> *</type>
        <definition>randState_t * amrex::gpu_rand_state</definition>
        <argsstring></argsstring>
        <name>gpu_rand_state</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" line="23" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="23" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RandomEngine.H" declline="49" declcolumn="24"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1aa264b7308102fabb2a7356eea1800644" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool amrex::IsBaseFab_v</definition>
        <argsstring></argsstring>
        <name>IsBaseFab_v</name>
        <initializer>= <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt;A&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" line="27" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a36e5941ad0614ee76ddb49b9bcc2c515" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>class A</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool amrex::IsFabArray_v</definition>
        <argsstring></argsstring>
        <name>IsFabArray_v</name>
        <initializer>= <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt;A&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" line="38" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeTraits.H" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ae9f4a54b51971f15803c95c7f677c1b8" prot="public" static="yes" mutable="no">
        <type>const Long</type>
        <definition>const Long amrex::gcc_map_node_extra_bytes</definition>
        <argsstring></argsstring>
        <name>gcc_map_node_extra_bytes</name>
        <initializer>= 32L</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="234" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a800f0e7b7cc45c727ac9b9bc6dc25405" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* amrex::TheMultiFabHdrFileSuffix</definition>
        <argsstring></argsstring>
        <name>TheMultiFabHdrFileSuffix</name>
        <initializer>= &quot;_H&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="14" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a9bff146d2660624779e432d43cd9bf39" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* amrex::FabFileSuffix</definition>
        <argsstring></argsstring>
        <name>FabFileSuffix</name>
        <initializer>= &quot;_D_&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="15" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a0277cf50400e3022708ae4bac2958edc" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* amrex::TheFabOnDiskPrefix</definition>
        <argsstring></argsstring>
        <name>TheFabOnDiskPrefix</name>
        <initializer>= &quot;FabOnDisk:&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="16" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ae412136d889e7eeca62b7f23375e8718" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
        <definition>struct iparser_node* amrex::iparser_root</definition>
        <argsstring></argsstring>
        <name>iparser_root</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="22" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a9fe4a92c659abb78e4d7fec74ac8952c" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
        <definition>struct parser_node* amrex::parser_root</definition>
        <argsstring></argsstring>
        <name>parser_root</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="22" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1ab94176a43e7b3dfd0b44158c671268b9" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1EBCellConservativeLinear" kindref="compound">EBCellConservativeLinear</ref></type>
        <definition>AMREX_EXPORT EBCellConservativeLinear amrex::eb_lincc_interp</definition>
        <argsstring></argsstring>
        <name>eb_lincc_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBInterpolater.cpp" line="9" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBInterpolater.cpp" bodystart="9" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBInterpolater.H" declline="33" declcolumn="47"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a501671803e0b73977564b0165859a10d" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1EBCellConservativeLinear" kindref="compound">EBCellConservativeLinear</ref></type>
        <definition>AMREX_EXPORT EBCellConservativeLinear amrex::eb_cell_cons_interp</definition>
        <argsstring>(0)</argsstring>
        <name>eb_cell_cons_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBInterpolater.cpp" line="10" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBInterpolater.H" bodystart="34" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBInterpolater.H" declline="34" declcolumn="47"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1aff791fa855110d40cd7eb2bffb62e15e" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1EBMFCellConsLinInterp" kindref="compound">EBMFCellConsLinInterp</ref></type>
        <definition>AMREX_EXPORT EBMFCellConsLinInterp amrex::eb_mf_cell_cons_interp</definition>
        <argsstring>(false)</argsstring>
        <name>eb_mf_cell_cons_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMFInterpolater.cpp" line="7" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMFInterpolater.H" bodystart="23" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMFInterpolater.H" declline="23" declcolumn="43"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1a2ca444883f79b387fa2373ba33b7f969" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1EBMFCellConsLinInterp" kindref="compound">EBMFCellConsLinInterp</ref></type>
        <definition>AMREX_EXPORT EBMFCellConsLinInterp amrex::eb_mf_lincc_interp</definition>
        <argsstring>(true)</argsstring>
        <name>eb_mf_lincc_interp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMFInterpolater.cpp" line="8" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMFInterpolater.H" bodystart="24" bodyend="-1" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMFInterpolater.H" declline="24" declcolumn="43"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1a5d9cc4679a3fca647c2d0d91bc0b2cef" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::NeedToTouchUpPhysCorners</definition>
        <argsstring>(const Geometry &amp;geom)</argsstring>
        <name>NeedToTouchUpPhysCorners</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" line="737" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="737" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a948d5324e5cf514157eb7e16637e55b5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::HasPhysBndry</definition>
        <argsstring>(const Box &amp;b, const Box &amp;dmn, const Geometry &amp;geom)</argsstring>
        <name>HasPhysBndry</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>dmn</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" line="1165" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1165" bodyend="1181"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adf9b8a2c079e01271e32cb7cba3057de" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::FixUpPhysCorners</definition>
        <argsstring>(FArrayBox &amp;fab, AmrLevel &amp;TheLevel, int state_indx, Real time, int scomp, int dcomp, int ncomp)</argsstring>
        <name>FixUpPhysCorners</name>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> &amp;</type>
          <declname>TheLevel</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" line="1185" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_AmrLevel.cpp" bodystart="1185" bodyend="1265"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae764daf3d8010df29bc0fb4b6833f0c8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST AMREX_FORCE_INLINE void amrex::amrex_first_order_extrap_cpu</definition>
        <argsstring>(amrex::Box const &amp;bx, int nComp, amrex::Array4&lt; const int &gt; const &amp;mask, amrex::Array4&lt; amrex::Real &gt; const &amp;data) noexcept</argsstring>
        <name>amrex_first_order_extrap_cpu</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">amrex::Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nComp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; amrex::Real &gt; const &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_extrapolater_1D_K.H" line="10" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_extrapolater_1D_K.H" bodystart="10" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9570ea1b5e3ab8070aee754ccbcf28a2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_first_order_extrap_gpu</definition>
        <argsstring>(int i, int j, int k, int n, amrex::Box const &amp;bx, amrex::Array4&lt; const int &gt; const &amp;mask, amrex::Array4&lt; amrex::Real &gt; const &amp;data) noexcept</argsstring>
        <name>amrex_first_order_extrap_gpu</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">amrex::Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; amrex::Real &gt; const &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_extrapolater_1D_K.H" line="36" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_extrapolater_1D_K.H" bodystart="36" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae4eb9d3fef37595defb201fde203bae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, AmrMesh const &amp;amr_mesh)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1AmrMesh" kindref="compound">AmrMesh</ref> const &amp;</type>
          <declname>amr_mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" line="1024" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="1024" bodyend="1049" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" declline="281" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9610a39b43057d1e9e78c4d5156965ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleToMesh</definition>
        <argsstring>(PC const &amp;pc, const Vector&lt; MultiFab * &gt; &amp;mf, int lev_min, int lev_max, F &amp;&amp;f, bool zero_out_input=true, bool vol_weight=true)</argsstring>
        <name>ParticleToMesh</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zero_out_input</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>vol_weight</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrParticles.H" line="156" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrParticles.H" bodystart="156" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad22b2b776284a051ecd35e8dfa6e54d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>static int amrex::FindCut</definition>
        <argsstring>(const int *hist, int lo, int hi, CutStatus &amp;status)</argsstring>
        <name>FindCut</name>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>hist</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>hi</declname>
        </param>
        <param>
          <type>CutStatus &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.cpp" line="164" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Cluster.cpp" bodystart="164" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab1b1f90152c1c5636d634b475056389e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const ErrorList &amp;elst)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ErrorList" kindref="compound">ErrorList</ref> &amp;</type>
          <declname>elst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" line="217" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.cpp" bodystart="218" bodyend="231" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_ErrorList.H" declline="378" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a331b0725efb68a4f9224f12e6d6df4dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::InterpCrseFineBndryEMfield</definition>
        <argsstring>(InterpEM_t interp_type, const Array&lt; MultiFab, AMREX_SPACEDIM &gt; &amp;crse, Array&lt; MultiFab, AMREX_SPACEDIM &gt; &amp;fine, const Geometry &amp;cgeom, const Geometry &amp;fgeom, int ref_ratio)</argsstring>
        <name>InterpCrseFineBndryEMfield</name>
        <param>
          <type><ref refid="namespaceamrex_1a2f30e076962c1c148d279b63851d80df" kindref="member">InterpEM_t</ref></type>
          <declname>interp_type</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" line="11" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" bodystart="11" bodyend="21" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" declline="246" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad4b250931d7e5f375e7da2ebc1ea0ac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::InterpCrseFineBndryEMfield</definition>
        <argsstring>(InterpEM_t interp_type, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;crse, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;fine, const Geometry &amp;cgeom, const Geometry &amp;fgeom, int ref_ratio)</argsstring>
        <name>InterpCrseFineBndryEMfield</name>
        <param>
          <type><ref refid="namespaceamrex_1a2f30e076962c1c148d279b63851d80df" kindref="member">InterpEM_t</ref></type>
          <declname>interp_type</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" line="23" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" bodystart="23" bodyend="137" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" declline="252" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a93b8e270e0c8360ed35815598a5b7f46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FillPatchInterp</definition>
        <argsstring>(MultiFab &amp;mf_fine_patch, int fcomp, MultiFab const &amp;mf_crse_patch, int ccomp, int ncomp, IntVect const &amp;ng, const Geometry &amp;cgeom, const Geometry &amp;fgeom, Box const &amp;dest_domain, const IntVect &amp;ratio, MFInterpolater *mapper, const Vector&lt; BCRec &gt; &amp;bcs, int bcscomp)</argsstring>
        <name>FillPatchInterp</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf_fine_patch</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
          <declname>mf_crse_patch</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>dest_domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MFInterpolater" kindref="compound">MFInterpolater</ref> *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" line="140" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.cpp" bodystart="140" bodyend="150" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" declline="186" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a36b10976708081700c810d70417da8c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Interp</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ProperlyNested</definition>
        <argsstring>(const IntVect &amp;ratio, const IntVect &amp;blocking_factor, int ngrow, const IndexType &amp;boxType, Interp *mapper)</argsstring>
        <name>ProperlyNested</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>blocking_factor</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> &amp;</type>
          <declname>boxType</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="33" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="33" bodyend="57" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" declline="45" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3cf973090fa613c635340a08df7ecd38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::FillPatchSingleLevel</definition>
        <argsstring>(MF &amp;mf, IntVect const &amp;nghost, Real time, const Vector&lt; MF * &gt; &amp;smf, const Vector&lt; Real &gt; &amp;stime, int scomp, int dcomp, int ncomp, const Geometry &amp;geom, BC &amp;physbcf, int bcfcomp)</argsstring>
        <name>FillPatchSingleLevel</name>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF * &gt; &amp;</type>
          <declname>smf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>stime</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>physbcf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcfcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="73" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="73" bodyend="184" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" declline="50" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a05934ee478017afcd9908667de64a79c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::FillPatchSingleLevel</definition>
        <argsstring>(MF &amp;mf, Real time, const Vector&lt; MF * &gt; &amp;smf, const Vector&lt; Real &gt; &amp;stime, int scomp, int dcomp, int ncomp, const Geometry &amp;geom, BC &amp;physbcf, int bcfcomp)</argsstring>
        <name>FillPatchSingleLevel</name>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF * &gt; &amp;</type>
          <declname>smf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>stime</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>physbcf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcfcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="61" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="61" bodyend="69" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" declline="58" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5b5440802e0895fcba37e6b295116585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
          <param>
            <type>typename PreInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
          <param>
            <type>typename PostInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::FillPatchTwoLevels</definition>
        <argsstring>(MF &amp;mf, IntVect const &amp;nghost, Real time, const Vector&lt; MF * &gt; &amp;cmf, const Vector&lt; Real &gt; &amp;ct, const Vector&lt; MF * &gt; &amp;fmf, const Vector&lt; Real &gt; &amp;ft, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, BC &amp;cbc, int cbccomp, BC &amp;fbc, int fbccomp, const IntVect &amp;ratio, Interp *mapper, const Vector&lt; BCRec &gt; &amp;bcs, int bcscomp, const PreInterpHook &amp;pre_interp={}, const PostInterpHook &amp;post_interp={})</argsstring>
        <name>FillPatchTwoLevels</name>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF * &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ct</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF * &gt; &amp;</type>
          <declname>fmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ft</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const PreInterpHook &amp;</type>
          <declname>pre_interp</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const PostInterpHook &amp;</type>
          <declname>post_interp</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="746" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="746" bodyend="768" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" declline="68" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3f8f5f13146586dfaa0fb8d082132f12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
          <param>
            <type>typename PreInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
          <param>
            <type>typename PostInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::FillPatchTwoLevels</definition>
        <argsstring>(MF &amp;mf, Real time, const Vector&lt; MF * &gt; &amp;cmf, const Vector&lt; Real &gt; &amp;ct, const Vector&lt; MF * &gt; &amp;fmf, const Vector&lt; Real &gt; &amp;ft, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, BC &amp;cbc, int cbccomp, BC &amp;fbc, int fbccomp, const IntVect &amp;ratio, Interp *mapper, const Vector&lt; BCRec &gt; &amp;bcs, int bcscomp, const PreInterpHook &amp;pre_interp={}, const PostInterpHook &amp;post_interp={})</argsstring>
        <name>FillPatchTwoLevels</name>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF * &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ct</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF * &gt; &amp;</type>
          <declname>fmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ft</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const PreInterpHook &amp;</type>
          <declname>pre_interp</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const PostInterpHook &amp;</type>
          <declname>post_interp</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="772" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="772" bodyend="795" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" declline="85" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3b2f67cfdffeeea1442daa3174a8ad7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
          <param>
            <type>typename PreInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
          <param>
            <type>typename PostInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::FillPatchTwoLevels</definition>
        <argsstring>(Array&lt; MF *, AMREX_SPACEDIM &gt; const &amp;mf, IntVect const &amp;nghost, Real time, const Vector&lt; Array&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;cmf, const Vector&lt; Real &gt; &amp;ct, const Vector&lt; Array&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;fmf, const Vector&lt; Real &gt; &amp;ft, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;cbc, const Array&lt; int, AMREX_SPACEDIM &gt; &amp;cbccomp, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;fbc, const Array&lt; int, AMREX_SPACEDIM &gt; &amp;fbccomp, const IntVect &amp;ratio, Interp *mapper, const Array&lt; Vector&lt; BCRec &gt;, AMREX_SPACEDIM &gt; &amp;bcs, const Array&lt; int, AMREX_SPACEDIM &gt; &amp;bcscomp, const PreInterpHook &amp;pre_interp={}, const PostInterpHook &amp;post_interp={})</argsstring>
        <name>FillPatchTwoLevels</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ct</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>fmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ft</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt;, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const PreInterpHook &amp;</type>
          <declname>pre_interp</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const PostInterpHook &amp;</type>
          <declname>post_interp</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="799" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="799" bodyend="822" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" declline="102" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae7fdce34557bf398e68e173045b5498a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
          <param>
            <type>typename PreInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
          <param>
            <type>typename PostInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::FillPatchTwoLevels</definition>
        <argsstring>(Array&lt; MF *, AMREX_SPACEDIM &gt; const &amp;mf, IntVect const &amp;nghost, Real time, const Vector&lt; Array&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;cmf, const Vector&lt; Real &gt; &amp;ct, const Vector&lt; Array&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;fmf, const Vector&lt; Real &gt; &amp;ft, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;cbc, int cbccomp, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;fbc, int fbccomp, const IntVect &amp;ratio, Interp *mapper, const Array&lt; Vector&lt; BCRec &gt;, AMREX_SPACEDIM &gt; &amp;bcs, int bcscomp, const PreInterpHook &amp;pre_interp={}, const PostInterpHook &amp;post_interp={})</argsstring>
        <name>FillPatchTwoLevels</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ct</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>fmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ft</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt;, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const PreInterpHook &amp;</type>
          <declname>pre_interp</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const PostInterpHook &amp;</type>
          <declname>post_interp</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="826" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="826" bodyend="853" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" declline="119" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a760ab1490c5580a3d640bd43b73a2ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
          <param>
            <type>typename PreInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
          <param>
            <type>typename PostInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::FillPatchTwoLevels</definition>
        <argsstring>(Array&lt; MF *, AMREX_SPACEDIM &gt; const &amp;mf, Real time, const Vector&lt; Array&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;cmf, const Vector&lt; Real &gt; &amp;ct, const Vector&lt; Array&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;fmf, const Vector&lt; Real &gt; &amp;ft, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;cbc, int cbccomp, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;fbc, int fbccomp, const IntVect &amp;ratio, Interp *mapper, const Array&lt; Vector&lt; BCRec &gt;, AMREX_SPACEDIM &gt; &amp;bcs, int bcscomp, const PreInterpHook &amp;pre_interp={}, const PostInterpHook &amp;post_interp={})</argsstring>
        <name>FillPatchTwoLevels</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ct</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>fmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>ft</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt;, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const PreInterpHook &amp;</type>
          <declname>pre_interp</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const PostInterpHook &amp;</type>
          <declname>post_interp</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="857" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="857" bodyend="884" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" declline="136" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6fa430e1648835f9dea38b7568d79506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
          <param>
            <type>typename PreInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
          <param>
            <type>typename PostInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::InterpFromCoarseLevel</definition>
        <argsstring>(MF &amp;mf, Real time, const MF &amp;cmf, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, BC &amp;cbc, int cbccomp, BC &amp;fbc, int fbccomp, const IntVect &amp;ratio, Interp *mapper, const Vector&lt; BCRec &gt; &amp;bcs, int bcscomp, const PreInterpHook &amp;pre_interp={}, const PostInterpHook &amp;post_interp={})</argsstring>
        <name>InterpFromCoarseLevel</name>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const PreInterpHook &amp;</type>
          <declname>pre_interp</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const PostInterpHook &amp;</type>
          <declname>post_interp</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="934" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="934" bodyend="948" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" declline="187" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa081e015e8252796d1f7675189020446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
          <param>
            <type>typename PreInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
          <param>
            <type>typename PostInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::InterpFromCoarseLevel</definition>
        <argsstring>(MF &amp;mf, IntVect const &amp;nghost, Real time, const MF &amp;cmf, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, BC &amp;cbc, int cbccomp, BC &amp;fbc, int fbccomp, const IntVect &amp;ratio, Interp *mapper, const Vector&lt; BCRec &gt; &amp;bcs, int bcscomp, const PreInterpHook &amp;pre_interp={}, const PostInterpHook &amp;post_interp={})</argsstring>
        <name>InterpFromCoarseLevel</name>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type>BC &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const PreInterpHook &amp;</type>
          <declname>pre_interp</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const PostInterpHook &amp;</type>
          <declname>post_interp</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="970" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="970" bodyend="1044" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" declline="202" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abed62fa77c3def575a20c8c9efa33805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
          <param>
            <type>typename PreInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
          <param>
            <type>typename PostInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::InterpFromCoarseLevel</definition>
        <argsstring>(Array&lt; MF *, AMREX_SPACEDIM &gt; const &amp;mf, Real time, const Array&lt; MF *, AMREX_SPACEDIM &gt; &amp;cmf, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;cbc, int cbccomp, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;fbc, int fbccomp, const IntVect &amp;ratio, Interp *mapper, const Array&lt; Vector&lt; BCRec &gt;, AMREX_SPACEDIM &gt; &amp;bcs, int bcscomp, const PreInterpHook &amp;pre_interp={}, const PostInterpHook &amp;post_interp={})</argsstring>
        <name>InterpFromCoarseLevel</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt;, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const PreInterpHook &amp;</type>
          <declname>pre_interp</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const PostInterpHook &amp;</type>
          <declname>post_interp</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="952" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="952" bodyend="966" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" declline="217" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a665aff71f29d05e954c3cb414b5e9349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename BC</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
          <param>
            <type>typename PreInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
          <param>
            <type>typename PostInterpHook</type>
            <defval>NullInterpHook&lt;typename MF::FABType::value_type&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::InterpFromCoarseLevel</definition>
        <argsstring>(Array&lt; MF *, AMREX_SPACEDIM &gt; const &amp;mf, IntVect const &amp;nghost, Real time, const Array&lt; MF *, AMREX_SPACEDIM &gt; &amp;cmf, int scomp, int dcomp, int ncomp, const Geometry &amp;cgeom, const Geometry &amp;fgeom, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;cbc, int cbccomp, Array&lt; BC, AMREX_SPACEDIM &gt; &amp;fbc, int fbccomp, const IntVect &amp;ratio, Interp *mapper, const Array&lt; Vector&lt; BCRec &gt;, AMREX_SPACEDIM &gt; &amp;bcs, int bcscomp, const PreInterpHook &amp;pre_interp={}, const PostInterpHook &amp;post_interp={})</argsstring>
        <name>InterpFromCoarseLevel</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>cbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cbccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; BC, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fbc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fbccomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt;, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type>const PreInterpHook &amp;</type>
          <declname>pre_interp</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const PostInterpHook &amp;</type>
          <declname>post_interp</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="1048" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="1048" bodyend="1192" declfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil.H" declline="232" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa7b080c701e9889b9761ea6e211918a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &amp;&amp;!std::is_same&lt; Interp, <ref refid="classamrex_1_1MFInterpolater" kindref="compound">MFInterpolater</ref> &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value &amp;&amp; !std::is_same&lt;Interp,MFInterpolater&gt;::value&gt; amrex::FillPatchInterp</definition>
        <argsstring>(MF &amp;mf_fine_patch, int fcomp, MF const &amp;mf_crse_patch, int ccomp, int ncomp, IntVect const &amp;ng, const Geometry &amp;cgeom, const Geometry &amp;fgeom, Box const &amp;dest_domain, const IntVect &amp;ratio, Interp *mapper, const Vector&lt; BCRec &gt; &amp;bcs, int bcscomp)</argsstring>
        <name>FillPatchInterp</name>
        <param>
          <type>MF &amp;</type>
          <declname>mf_fine_patch</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>MF const &amp;</type>
          <declname>mf_crse_patch</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>dest_domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Interp *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="193" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="193" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4389e0cf21b4c230ab10e9eeed5a4f8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::FillPatchInterp</definition>
        <argsstring>(MF &amp;mf_fine_patch, int fcomp, MF const &amp;mf_crse_patch, int ccomp, int ncomp, IntVect const &amp;ng, const Geometry &amp;cgeom, const Geometry &amp;fgeom, Box const &amp;dest_domain, const IntVect &amp;ratio, InterpBase *mapper, const Vector&lt; BCRec &gt; &amp;bcs, int bcscomp)</argsstring>
        <name>FillPatchInterp</name>
        <param>
          <type>MF &amp;</type>
          <declname>mf_fine_patch</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>MF const &amp;</type>
          <declname>mf_crse_patch</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>dest_domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1InterpBase" kindref="compound">InterpBase</ref> *</type>
          <declname>mapper</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="224" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="224" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3608b9d69aa747d5f4e061e2e58c22fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename iMF</type>
          </param>
          <param>
            <type>typename Interp</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &amp;&amp;!std::is_same&lt; Interp, <ref refid="classamrex_1_1MFInterpolater" kindref="compound">MFInterpolater</ref> &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value &amp;&amp; !std::is_same&lt;Interp,MFInterpolater&gt;::value&gt; amrex::InterpFace</definition>
        <argsstring>(Interp *interp, MF const &amp;mf_crse_patch, const int crse_comp, MF &amp;mf_refined_patch, const int fine_comp, int ncomp, const IntVect &amp;ratio, const iMF &amp;solve_mask, const Geometry &amp;crse_geom, const Geometry &amp;fine_geom, int bcscomp, RunOn gpu_or_cpu, const Vector&lt; BCRec &gt; &amp;bcs)</argsstring>
        <name>InterpFace</name>
        <param>
          <type>Interp *</type>
          <declname>interp</declname>
        </param>
        <param>
          <type>MF const &amp;</type>
          <declname>mf_crse_patch</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_comp</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>mf_refined_patch</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const iMF &amp;</type>
          <declname>solve_mask</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>crse_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fine_geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bcscomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
          <declname>gpu_or_cpu</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="244" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="244" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1d7f6d6df53f481b7faaed3dd85bd498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename iMF</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::InterpFace</definition>
        <argsstring>(InterpBase *interp, MF const &amp;mf_crse_patch, const int crse_comp, MF &amp;mf_refined_patch, const int fine_comp, int ncomp, const IntVect &amp;ratio, const iMF &amp;solve_mask, const Geometry &amp;crse_geom, const Geometry &amp;fine_geom, int bccomp, RunOn gpu_or_cpu, const Vector&lt; BCRec &gt; &amp;bcs)</argsstring>
        <name>InterpFace</name>
        <param>
          <type><ref refid="classamrex_1_1InterpBase" kindref="compound">InterpBase</ref> *</type>
          <declname>interp</declname>
        </param>
        <param>
          <type>MF const &amp;</type>
          <declname>mf_crse_patch</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_comp</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>mf_refined_patch</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const iMF &amp;</type>
          <declname>solve_mask</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>crse_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fine_geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
          <declname>gpu_or_cpu</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" line="270" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FillPatchUtil_I.H" bodystart="270" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a18058abd47bcc0f005182c829f1f4e0a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::fluxreg_fineadd</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;reg, const int rcomp, Array4&lt; Real const &gt; const &amp;flx, const int fcomp, const int ncomp, const int, Dim3 const &amp;ratio, const Real mult) noexcept</argsstring>
        <name>fluxreg_fineadd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>flx</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>dir</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>mult</declname>
        </param>
        <briefdescription>
<para>Add fine grid flux to flux register. Flux array is a fine grid edge based object, Register is a coarse grid edge based object. It is assumed that the coarsened flux region contains the register region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxReg_1D_C.H" line="26" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxReg_1D_C.H" bodystart="26" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a75205bf4e5cf11c750d36643d869651e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::fluxreg_fineareaadd</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;reg, const int rcomp, Array4&lt; Real const &gt; const &amp;area, Array4&lt; Real const &gt; const &amp;flx, const int fcomp, const int ncomp, const int, Dim3 const &amp;ratio, const Real mult) noexcept</argsstring>
        <name>fluxreg_fineareaadd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>flx</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>dir</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>mult</declname>
        </param>
        <briefdescription>
<para>Add fine grid flux times area to flux register. Flux array is a fine grid edge based object, Register is a coarse grid edge based object. It is assumed that the coarsened flux region contains the register region. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>area</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>area</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fcomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dir</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mult</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxReg_1D_C.H" line="56" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxReg_1D_C.H" bodystart="56" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7c97748d6aef1a9d510523f3c374b63f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::fluxreg_reflux</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;s, const int scomp, Array4&lt; Real const &gt; const &amp;f, Array4&lt; Real const &gt; const &amp;v, const int ncomp, const Real mult, const Orientation face) noexcept</argsstring>
        <name>fluxreg_reflux</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>mult</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxReg_1D_C.H" line="70" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_FluxReg_1D_C.H" bodystart="70" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaebd1edefcd2e126a0ce93d3f4296731" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::pcinterp_interp</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;fine, const int fcomp, const int ncomp, Array4&lt; Real const &gt; const &amp;crse, const int ccomp, IntVect const &amp;ratio) noexcept</argsstring>
        <name>pcinterp_interp</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="14" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="14" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab65c065625bd439361885b059b19fd38" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::nodebilin_slopes</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; T &gt; const &amp;slope, Array4&lt; T const &gt; const &amp;u, const int icomp, const int ncomp, IntVect const &amp;ratio) noexcept</argsstring>
        <name>nodebilin_slopes</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>slope</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="33" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="33" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3a130e78c478fddbb794329c104cbc05" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::nodebilin_interp</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; T &gt; const &amp;fine, const int fcomp, const int ncomp, Array4&lt; T const &gt; const &amp;slope, Array4&lt; T const &gt; const &amp;crse, const int ccomp, IntVect const &amp;ratio) noexcept</argsstring>
        <name>nodebilin_interp</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>slope</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="52" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="52" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a749ef3bbd2184e2931cb0a63f54aa73a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::facediv_face_interp</definition>
        <argsstring>(int, int, int, int, int, int, Array4&lt; T const &gt; const &amp;, Array4&lt; T &gt; const &amp;, Array4&lt; const int &gt; const &amp;, IntVect const &amp;) noexcept</argsstring>
        <name>facediv_face_interp</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>ci</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cj</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>ck</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>nc</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>nf</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>idir</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <defname>mask</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <defname>ratio</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="75" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="75" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7b18d53f86cdda4a55b0acd41d7cfbab" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::facediv_int</definition>
        <argsstring>(int, int, int, int, GpuArray&lt; Array4&lt; T &gt;, AMREX_SPACEDIM &gt; const &amp;, IntVect const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>facediv_int</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>ci</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>cj</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>ck</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>nf</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt;, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <defname>ratio</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>cellSize</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="87" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="87" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa143e23e7784eca50c904ce19588d503" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::face_linear_interp_x</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; T &gt; const &amp;fine, Array4&lt; T const &gt; const &amp;crse, IntVect const &amp;ratio) noexcept</argsstring>
        <name>face_linear_interp_x</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="97" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="97" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9a60cca0b477d74c119fef1a32bd440d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::ccquartic_interp</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; Real const &gt; const &amp;crse, Array4&lt; Real &gt; const &amp;fine) noexcept</argsstring>
        <name>ccquartic_interp</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" line="110" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_1D_C.H" bodystart="110" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a04162d26a94b7b09087daf1af31a1f2b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::ccprotect_2d</definition>
        <argsstring>(int ic, int jc, int, int nvar, Box const &amp;fine_bx, IntVect const &amp;ratio, GeometryData cs_geomdata, GeometryData fn_geomdata, Array4&lt; T &gt; const &amp;fine, Array4&lt; T const &gt; const &amp;fine_state) noexcept</argsstring>
        <name>ccprotect_2d</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ic</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>jc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>fine_bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GeometryData" kindref="compound">GeometryData</ref></type>
          <declname>cs_geomdata</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GeometryData" kindref="compound">GeometryData</ref></type>
          <declname>fn_geomdata</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>fine_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_2D_C.H" line="169" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_2D_C.H" bodystart="169" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa8cc4813178f7440118ff976226f70b0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::ccprotect_3d</definition>
        <argsstring>(int ic, int jc, int kc, int nvar, Box const &amp;fine_bx, IntVect const &amp;ratio, Array4&lt; T &gt; const &amp;fine, Array4&lt; T const &gt; const &amp;fine_state) noexcept</argsstring>
        <name>ccprotect_3d</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ic</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>jc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>kc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>fine_bx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>fine_state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_3D_C.H" line="337" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_3D_C.H" bodystart="337" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a70c35aaee2b8d2425a5914faddc5687d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::face_linear_face_interp_x</definition>
        <argsstring>(int fi, int fj, int fk, int n, Array4&lt; T &gt; const &amp;fine, Array4&lt; T const &gt; const &amp;crse, Array4&lt; int const &gt; const &amp;mask, IntVect const &amp;ratio) noexcept</argsstring>
        <name>face_linear_face_interp_x</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fj</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fk</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_C.H" line="23" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_C.H" bodystart="23" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7debf73384ce650359e3a9bfbf6275ea" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::face_linear_face_interp_y</definition>
        <argsstring>(int fi, int fj, int fk, int n, Array4&lt; T &gt; const &amp;fine, Array4&lt; T const &gt; const &amp;crse, Array4&lt; int const &gt; const &amp;mask, IntVect const &amp;ratio) noexcept</argsstring>
        <name>face_linear_face_interp_y</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fj</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fk</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_C.H" line="49" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_C.H" bodystart="49" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad9bdb046290321944dba88455d030115" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::face_linear_face_interp_z</definition>
        <argsstring>(int fi, int fj, int fk, int n, Array4&lt; T &gt; const &amp;fine, Array4&lt; T const &gt; const &amp;crse, Array4&lt; int const &gt; const &amp;mask, IntVect const &amp;ratio) noexcept</argsstring>
        <name>face_linear_face_interp_z</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fj</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fk</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_C.H" line="71" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_C.H" bodystart="71" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a755905a1c0b815f386bbfc7790c22be8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::face_linear_interp_x</definition>
        <argsstring>(int i, int j, int k, int n, amrex::Array4&lt; amrex::Real &gt; const &amp;fine, IntVect const &amp;ratio) noexcept</argsstring>
        <name>face_linear_interp_x</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; amrex::Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_C.H" line="93" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_C.H" bodystart="93" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a411d4f9902774ff53a5fd293afb5b7ff" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::face_linear_interp_y</definition>
        <argsstring>(int i, int j, int k, int n, amrex::Array4&lt; amrex::Real &gt; const &amp;fine, IntVect const &amp;ratio) noexcept</argsstring>
        <name>face_linear_interp_y</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; amrex::Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_C.H" line="108" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_C.H" bodystart="108" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a21e6200c0159afeae5b70af9169087cf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::face_linear_interp_z</definition>
        <argsstring>(int i, int j, int k, int n, amrex::Array4&lt; amrex::Real &gt; const &amp;fine, IntVect const &amp;ratio) noexcept</argsstring>
        <name>face_linear_interp_z</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; amrex::Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_C.H" line="124" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_C.H" bodystart="124" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac0a3854363996b297c8f051d38aab201" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::cell_quartic_interp_x</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;fine, Array4&lt; Real const &gt; const &amp;crse) noexcept</argsstring>
        <name>cell_quartic_interp_x</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_C.H" line="139" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_C.H" bodystart="139" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8cdd1423eb230e48864ace443b38c99a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::cell_quartic_interp_y</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;fine, Array4&lt; Real const &gt; const &amp;crse) noexcept</argsstring>
        <name>cell_quartic_interp_y</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_C.H" line="155" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_C.H" bodystart="155" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a29442fc3cef0522a7978afc05eeed14f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::cell_quartic_interp_z</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;fine, Array4&lt; Real const &gt; const &amp;crse) noexcept</argsstring>
        <name>cell_quartic_interp_z</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_C.H" line="171" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_Interp_C.H" bodystart="171" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aed91a03099231a70cb9d3fbf02d95081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::interp_face_reg</definition>
        <argsstring>(int i, int j, IntVect const &amp;rr, Array4&lt; Real &gt; const &amp;fine, int scomp, Array4&lt; Real const &gt; const &amp;crse, Array4&lt; Real &gt; const &amp;slope, int ncomp, Box const &amp;domface, int idim)</argsstring>
        <name>interp_face_reg</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>rr</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>slope</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domface</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_InterpFaceReg_2D_C.H" line="7" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_InterpFaceReg_2D_C.H" bodystart="7" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a78a68acf45501af596b096939b49995c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::interp_face_reg</definition>
        <argsstring>(int i, int j, int k, IntVect const &amp;rr, Array4&lt; Real &gt; const &amp;fine, int scomp, Array4&lt; Real const &gt; const &amp;crse, Array4&lt; Real &gt; const &amp;slope, int ncomp, Box const &amp;domface, int idim)</argsstring>
        <name>interp_face_reg</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>rr</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>slope</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domface</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_InterpFaceReg_3D_C.H" line="7" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_InterpFaceReg_3D_C.H" bodystart="7" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4a2b25b2da10b957a967b191fec06bce" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mf_cell_cons_lin_interp_limit_minmax_llslope</definition>
        <argsstring>(int i, int, int, Array4&lt; Real &gt; const &amp;slope, Array4&lt; Real const &gt; const &amp;u, int scomp, int ncomp, Box const &amp;domain, IntVect const &amp;ratio, BCRec const *bc) noexcept</argsstring>
        <name>mf_cell_cons_lin_interp_limit_minmax_llslope</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>slope</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> const *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_1D_C.H" line="7" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_1D_C.H" bodystart="7" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a589b224d06c74e31215a36825605ba04" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mf_cell_cons_lin_interp_llslope</definition>
        <argsstring>(int i, int, int, Array4&lt; Real &gt; const &amp;slope, Array4&lt; Real const &gt; const &amp;u, int scomp, int ncomp, Box const &amp;domain, BCRec const *bc) noexcept</argsstring>
        <name>mf_cell_cons_lin_interp_llslope</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>slope</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> const *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_1D_C.H" line="39" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_1D_C.H" bodystart="39" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a63fbce0bd229edc7e1ccc8a8a50f77ca" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mf_cell_cons_lin_interp_mcslope</definition>
        <argsstring>(int i, int, int, int ns, Array4&lt; Real &gt; const &amp;slope, Array4&lt; Real const &gt; const &amp;u, int scomp, int, Box const &amp;domain, IntVect const &amp;ratio, BCRec const *bc) noexcept</argsstring>
        <name>mf_cell_cons_lin_interp_mcslope</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ns</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>slope</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>ncomp</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> const *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_1D_C.H" line="66" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_1D_C.H" bodystart="66" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8bff538f5a269b4cfc8f1b0a075aab37" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mf_cell_cons_lin_interp</definition>
        <argsstring>(int i, int, int, int ns, Array4&lt; Real &gt; const &amp;fine, int fcomp, Array4&lt; Real const &gt; const &amp;slope, Array4&lt; Real const &gt; const &amp;crse, int ccomp, int, IntVect const &amp;ratio) noexcept</argsstring>
        <name>mf_cell_cons_lin_interp</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ns</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>slope</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>ncomp</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_1D_C.H" line="102" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_1D_C.H" bodystart="102" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0f826ec20d32ceb9b15b58645afc7cce" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mf_cell_cons_lin_interp_mcslope_sph</definition>
        <argsstring>(int i, int ns, Array4&lt; Real &gt; const &amp;slope, Array4&lt; Real const &gt; const &amp;u, int scomp, int, Box const &amp;domain, IntVect const &amp;ratio, BCRec const *bc, Real drf, Real rlo) noexcept</argsstring>
        <name>mf_cell_cons_lin_interp_mcslope_sph</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ns</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>slope</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> const *</type>
          <declname>bc</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>drf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_1D_C.H" line="114" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_1D_C.H" bodystart="114" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac74a4e0d0baad149ab5c36c66fb774a0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mf_cell_cons_lin_interp_sph</definition>
        <argsstring>(int i, int ns, Array4&lt; Real &gt; const &amp;fine, int fcomp, Array4&lt; Real const &gt; const &amp;slope, Array4&lt; Real const &gt; const &amp;crse, int ccomp, int, IntVect const &amp;ratio, Real drf, Real rlo) noexcept</argsstring>
        <name>mf_cell_cons_lin_interp_sph</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ns</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>slope</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>drf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_1D_C.H" line="165" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_1D_C.H" bodystart="165" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a14bcace4a1a6e1bc3e74a32d929165d1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mf_cell_bilin_interp</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; T &gt; const &amp;fine, int fcomp, Array4&lt; T const &gt; const &amp;crse, int ccomp, IntVect const &amp;ratio) noexcept</argsstring>
        <name>mf_cell_bilin_interp</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_1D_C.H" line="186" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_1D_C.H" bodystart="186" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab0fde5a29bb528390db2710d71ea4825" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mf_nodebilin_interp</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; Real &gt; const &amp;fine, int fcomp, Array4&lt; Real const &gt; const &amp;crse, int ccomp, IntVect const &amp;ratio) noexcept</argsstring>
        <name>mf_nodebilin_interp</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_1D_C.H" line="206" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_1D_C.H" bodystart="206" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a134da8efe3158b98d26a191f52797d00" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mf_cell_cons_lin_interp_mcslope_rz</definition>
        <argsstring>(int i, int j, int ns, Array4&lt; Real &gt; const &amp;slope, Array4&lt; Real const &gt; const &amp;u, int scomp, int ncomp, Box const &amp;domain, IntVect const &amp;ratio, BCRec const *bc, Real drf, Real rlo) noexcept</argsstring>
        <name>mf_cell_cons_lin_interp_mcslope_rz</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ns</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>slope</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> const *</type>
          <declname>bc</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>drf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_2D_C.H" line="173" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_2D_C.H" bodystart="173" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaa6a0345d98d3b7b583194f1143472c3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mf_cell_cons_lin_interp_rz</definition>
        <argsstring>(int i, int j, int ns, Array4&lt; Real &gt; const &amp;fine, int fcomp, Array4&lt; Real const &gt; const &amp;slope, Array4&lt; Real const &gt; const &amp;crse, int ccomp, int ncomp, IntVect const &amp;ratio, Real drf, Real rlo) noexcept</argsstring>
        <name>mf_cell_cons_lin_interp_rz</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ns</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>slope</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>drf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_2D_C.H" line="235" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_2D_C.H" bodystart="235" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a158bd7e805f756e3d110875e9feaef7e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mf_cell_quadratic_calcslope</definition>
        <argsstring>(int i, int j, int, int n, Array4&lt; Real const &gt; const &amp;crse, int ccomp, Array4&lt; Real &gt; const &amp;slope, Box const &amp;domain, BCRec const *bc) noexcept</argsstring>
        <name>mf_cell_quadratic_calcslope</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>slope</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> const *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_2D_C.H" line="321" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_2D_C.H" bodystart="321" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aea28917fb16ac88e03f99aaa79d98fdc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mf_cell_quadratic_interp</definition>
        <argsstring>(int i, int j, int, int n, Array4&lt; Real &gt; const &amp;fine, int fcomp, Array4&lt; Real const &gt; const &amp;crse, int ccomp, Array4&lt; Real const &gt; const &amp;slope, IntVect const &amp;ratio) noexcept</argsstring>
        <name>mf_cell_quadratic_interp</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>slope</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_2D_C.H" line="342" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_2D_C.H" bodystart="342" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa72cf162c86ee14d69c7fb709df419ca" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mf_cell_quadratic_interp_rz</definition>
        <argsstring>(int i, int j, int, int n, Array4&lt; Real &gt; const &amp;fine, int fcomp, Array4&lt; Real const &gt; const &amp;crse, int ccomp, Array4&lt; Real const &gt; const &amp;slope, IntVect const &amp;ratio, GeometryData const &amp;cs_geomdata, GeometryData const &amp;fn_geomdata) noexcept</argsstring>
        <name>mf_cell_quadratic_interp_rz</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>slope</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GeometryData" kindref="compound">GeometryData</ref> const &amp;</type>
          <declname>cs_geomdata</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GeometryData" kindref="compound">GeometryData</ref> const &amp;</type>
          <declname>fn_geomdata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_2D_C.H" line="366" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_MFInterp_2D_C.H" bodystart="366" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad4158723bb78d3d5f19e396a20c0ce2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::Version</definition>
        <argsstring>()</argsstring>
        <name>Version</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> &quot;git describe&quot; version </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Version.cpp" line="9" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Version.cpp" bodystart="9" bodyend="16" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="64" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a187cdb4f4273fdf9bcad01ac8e3fcc4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> *</type>
        <definition>amrex::AMReX * amrex::Initialize</definition>
        <argsstring>(MPI_Comm mpi_comm, std::ostream &amp;a_osout=std::cout, std::ostream &amp;a_oserr=std::cerr, ErrorHandler a_errhandler=nullptr)</argsstring>
        <name>Initialize</name>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>mpi_comm</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>a_osout</declname>
          <defval>std::cout</defval>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>a_oserr</declname>
          <defval>std::cerr</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1aa944154cc363fe5103f6638e3726d2ca" kindref="member">ErrorHandler</ref></type>
          <declname>a_errhandler</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="67" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="300" bodyend="307" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="67" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aad973f86fbf0a5ecec671bb067f11499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> *</type>
        <definition>amrex::AMReX * amrex::Initialize</definition>
        <argsstring>(int &amp;argc, char **&amp;argv, bool build_parm_parse=true, MPI_Comm mpi_comm=MPI_COMM_WORLD, const std::function&lt; void()&gt; &amp;func_parm_parse={}, std::ostream &amp;a_osout=std::cout, std::ostream &amp;a_oserr=std::cerr, ErrorHandler a_errorhandler=nullptr)</argsstring>
        <name>Initialize</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **&amp;</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>build_parm_parse</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>mpi_comm</declname>
          <defval><ref refid="AMReX__ccse-mpi_8H_1ac57c1fc8484fb9b5c8359a559851107b" kindref="member">MPI_COMM_WORLD</ref></defval>
        </param>
        <param>
          <type>const std::function&lt; void()&gt; &amp;</type>
          <declname>func_parm_parse</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>a_osout</declname>
          <defval>std::cout</defval>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>a_oserr</declname>
          <defval>std::cerr</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1aa944154cc363fe5103f6638e3726d2ca" kindref="member">ErrorHandler</ref></type>
          <declname>a_errorhandler</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="73" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="310" bodyend="606" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="73" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afdedd4a55eb147e0e27194b9e06f68e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Initialized</definition>
        <argsstring>()</argsstring>
        <name>Initialized</name>
        <briefdescription>
<para>Returns true if there are any currently-active and initialized <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> instances (i.e. one for which <ref refid="namespaceamrex_1a187cdb4f4273fdf9bcad01ac8e3fcc4d" kindref="member">amrex::Initialize</ref> has been called, and <ref refid="namespaceamrex_1a8117ae9942e01445ea7fe62d2f190c64" kindref="member">amrex::Finalize</ref> has not). Otherwise false. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="85" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="609" bodyend="612" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="85" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8117ae9942e01445ea7fe62d2f190c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Finalize</definition>
        <argsstring>(AMReX *pamrex)</argsstring>
        <name>Finalize</name>
        <param>
          <type><ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> *</type>
          <declname>pamrex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="87" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="621" bodyend="746" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="87" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a58b341e8a1b6a668812e8801b917a9de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="88" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="615" bodyend="618" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="88" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aec8ceac1148bd8331f3a51572068f8a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ExecOnFinalize</definition>
        <argsstring>(PTR_TO_VOID_FUNC)</argsstring>
        <name>ExecOnFinalize</name>
        <param>
          <type><ref refid="namespaceamrex_1a436b95e95cc4994a7c179e3cebe42ea6" kindref="member">PTR_TO_VOID_FUNC</ref></type>
          <defname>fp</defname>
        </param>
        <briefdescription>
<para>We maintain a stack of functions that need to be called in <ref refid="namespaceamrex_1a8117ae9942e01445ea7fe62d2f190c64" kindref="member">Finalize()</ref>. The functions are called in LIFO order. The idea here is to allow classes to clean up any &quot;global&quot; state that they maintain when we&apos;re exiting from <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="95" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="288" bodyend="291" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="95" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6911748ceb0d88bf5b6bf7f3f0402e97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ExecOnInitialize</definition>
        <argsstring>(PTR_TO_VOID_FUNC)</argsstring>
        <name>ExecOnInitialize</name>
        <param>
          <type><ref refid="namespaceamrex_1a436b95e95cc4994a7c179e3cebe42ea6" kindref="member">PTR_TO_VOID_FUNC</ref></type>
          <defname>fp</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="96" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="294" bodyend="297" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="96" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a95b1159ba3a5494abd49dc9b3d34eacf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::ignore_unused</definition>
        <argsstring>(const Ts &amp;...)</argsstring>
        <name>ignore_unused</name>
        <param>
          <type>const Ts &amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
<para>This shuts up the compiler about unused variables. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="101" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaa5d048f7bf7386b6976b10001a5f8b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Error</definition>
        <argsstring>(const std::string &amp;msg)</argsstring>
        <name>Error</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para><ref refid="classamrex_1_1Print" kindref="compound">Print</ref> out message to cerr and exit via <ref refid="namespaceamrex_1ad26f2328bf66aa9678347a6055a25431" kindref="member">amrex::Abort()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="104" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="185" bodyend="188" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="104" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4393d2710f894c8b161fa2ec1f57012c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Error_host</definition>
        <argsstring>(const char *msg)</argsstring>
        <name>Error_host</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="106" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="203" bodyend="217" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="106" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab766123acdbb32e2e23b3b1bface323f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::Error</definition>
        <argsstring>(const char *msg=0)</argsstring>
        <name>Error</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="109" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" bodystart="109" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad1cc69bc2c0172148e82713abb30d2dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Warning</definition>
        <argsstring>(const std::string &amp;msg)</argsstring>
        <name>Warning</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para><ref refid="classamrex_1_1Print" kindref="compound">Print</ref> out warning message to cerr. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="123" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="197" bodyend="200" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="123" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac1e74d5d4c035c4f129a0cbb28077cf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Warning_host</definition>
        <argsstring>(const char *msg)</argsstring>
        <name>Warning_host</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="125" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="220" bodyend="225" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="125" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a03acb27c6c261b36754a5886f87170ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::Warning</definition>
        <argsstring>(const char *msg)</argsstring>
        <name>Warning</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="128" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" bodystart="128" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad26f2328bf66aa9678347a6055a25431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Abort</definition>
        <argsstring>(const std::string &amp;msg)</argsstring>
        <name>Abort</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para><ref refid="classamrex_1_1Print" kindref="compound">Print</ref> out message to cerr and exit via abort(). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="141" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="191" bodyend="194" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="141" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8398035908737ba94950398e8e449d4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Abort_host</definition>
        <argsstring>(const char *msg)</argsstring>
        <name>Abort_host</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="143" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="228" bodyend="242" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="143" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe2d7ef9935f8e318a80d60b5edb593a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::Abort</definition>
        <argsstring>(const char *msg=0)</argsstring>
        <name>Abort</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="146" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" bodystart="146" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7316f24daca402f64791688d4c49148e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Assert_host</definition>
        <argsstring>(const char *EX, const char *file, int line, const char *msg)</argsstring>
        <name>Assert_host</name>
        <param>
          <type>const char *</type>
          <declname>EX</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
<para>Prints assertion failed messages to cerr and exits via abort(). Intended for use by the <ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT()</ref> macro in &lt;<ref refid="AMReX__BLassert_8H" kindref="compound">AMReX_BLassert.H</ref>&gt;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="165" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="245" bodyend="279" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="165" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a346451f63cf84dc86251d9b8263655c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::Assert</definition>
        <argsstring>(const char *EX, const char *file, int line, const char *msg=nullptr)</argsstring>
        <name>Assert</name>
        <param>
          <type>const char *</type>
          <declname>EX</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="168" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" bodystart="168" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0c0dc9355722e150b88c6fc71422288e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::write_to_stderr_without_buffering</definition>
        <argsstring>(const char *str)</argsstring>
        <name>write_to_stderr_without_buffering</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>This is used by <ref refid="namespaceamrex_1aaa5d048f7bf7386b6976b10001a5f8b4" kindref="member">amrex::Error()</ref>, <ref refid="namespaceamrex_1ad26f2328bf66aa9678347a6055a25431" kindref="member">amrex::Abort()</ref>, and <ref refid="namespaceamrex_1a346451f63cf84dc86251d9b8263655c8" kindref="member">amrex::Assert()</ref> to ensure that when writing the message to stderr, that no additional heap-based memory is allocated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="192" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="149" bodyend="167" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="192" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae82a731c021b58a742101a3d5f803438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SetErrorHandler</definition>
        <argsstring>(ErrorHandler errhandler)</argsstring>
        <name>SetErrorHandler</name>
        <param>
          <type><ref refid="namespaceamrex_1aa944154cc363fe5103f6638e3726d2ca" kindref="member">ErrorHandler</ref></type>
          <declname>errhandler</declname>
          <defname>f</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="194" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="138" bodyend="140" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="194" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1add2f0f36ce80f2f3934e3a8ec2a966df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::OutStream</definition>
        <argsstring>()</argsstring>
        <name>OutStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="196" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="749" bodyend="752" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="196" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1e213ab52cdac41e691ab49370b30a34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::ErrorStream</definition>
        <argsstring>()</argsstring>
        <name>ErrorStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="197" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="755" bodyend="758" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="197" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acafd26c0f64d958aed9ee56043c4f10e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Verbose</definition>
        <argsstring>() noexcept</argsstring>
        <name>Verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="199" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="134" bodyend="134" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="199" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a125dcbb8afa7e676566242972a5b7757" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SetVerbose</definition>
        <argsstring>(int v) noexcept</argsstring>
        <name>SetVerbose</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="200" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="136" bodyend="136" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="200" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0b2451baea738a8717530466c13f37fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::get_command</definition>
        <argsstring>()</argsstring>
        <name>get_command</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="203" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="761" bodyend="764" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="203" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0f3d8f755663a93f3953f7cda5590cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::command_argument_count</definition>
        <argsstring>()</argsstring>
        <name>command_argument_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="206" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="767" bodyend="770" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="206" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a566544464dedd2d70fe9969fc79658cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::get_command_argument</definition>
        <argsstring>(int number)</argsstring>
        <name>get_command_argument</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>number</declname>
        </param>
        <briefdescription>
<para>Get command line arguments. The executable name is the zero-th argument. Return empty string if there are not that many arguments. std::string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="213" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.cpp" bodystart="773" bodyend="780" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" declline="213" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9d0fa7afb6bbeb5e81b5570445599fbf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GccPlacater</definition>
        <argsstring>()</argsstring>
        <name>GccPlacater</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" line="216" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX.H" bodystart="216" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a475e2bc71e3ca92b6b016fcb70af95bd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE const T&amp; amrex::min</definition>
        <argsstring>(const T &amp;a, const T &amp;b) noexcept</argsstring>
        <name>min</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="21" column="42" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a97e82311191ed8084579b1bddf314096" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE const T&amp; amrex::min</definition>
        <argsstring>(const T &amp;a, const T &amp;b, const Ts &amp;... c) noexcept</argsstring>
        <name>min</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const Ts &amp;...</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="28" column="42" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a38d942498aebd0b51855a9b85ed184f5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE const T&amp; amrex::max</definition>
        <argsstring>(const T &amp;a, const T &amp;b) noexcept</argsstring>
        <name>max</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="35" column="42" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a502847ea5923caf948bd07e02bad3a88" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE const T&amp; amrex::max</definition>
        <argsstring>(const T &amp;a, const T &amp;b, const Ts &amp;... c) noexcept</argsstring>
        <name>max</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const Ts &amp;...</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="42" column="42" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae4bfe8e79990e6c03cf02379c2b883a8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE T amrex::elemwiseMin</definition>
        <argsstring>(T const &amp;a, T const &amp;b) noexcept</argsstring>
        <name>elemwiseMin</name>
        <param>
          <type>T const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="49" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a596c8bdb575a0bb55727422ca467ca83" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE T amrex::elemwiseMin</definition>
        <argsstring>(const T &amp;a, const T &amp;b, const Ts &amp;... c) noexcept</argsstring>
        <name>elemwiseMin</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const Ts &amp;...</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="55" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a93a16e30ea4ae11d5478b61bc66508be" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE T amrex::elemwiseMax</definition>
        <argsstring>(T const &amp;a, T const &amp;b) noexcept</argsstring>
        <name>elemwiseMax</name>
        <param>
          <type>T const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="62" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="62" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0ca24d0cad7a50b4e33d7e1cf2d62cf4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE T amrex::elemwiseMax</definition>
        <argsstring>(const T &amp;a, const T &amp;b, const Ts &amp;... c) noexcept</argsstring>
        <name>elemwiseMax</name>
        <param>
          <type>const T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const Ts &amp;...</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="68" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5311a5775a3f24d73376bdc6268b7a3d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::Swap</definition>
        <argsstring>(T &amp;t1, T &amp;t2) noexcept</argsstring>
        <name>Swap</name>
        <param>
          <type>T &amp;</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>t2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="75" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="75" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac7da8611787662eeb7b9e4a098ceac22" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE const T&amp; amrex::Clamp</definition>
        <argsstring>(const T &amp;v, const T &amp;lo, const T &amp;hi)</argsstring>
        <name>Clamp</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="84" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9314c1849b946e44ddd246d9c0562e72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> std::enable_if&lt; std::is_floating_point&lt; T &gt;::value, bool &gt;::type</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE std::enable_if&lt;std::is_floating_point&lt;T&gt;::value,bool&gt;::type amrex::almostEqual</definition>
        <argsstring>(T x, T y, int ulp=2)</argsstring>
        <name>almostEqual</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ulp</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="93" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="93" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6d6b1086f3f7b77f820cac8d8005ac38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_floating_point&lt; T &gt;::value, int &gt;::type</type>
            <declname>FOO</declname>
            <defname>FOO</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::bisect</definition>
        <argsstring>(T lo, T hi, F f, T tol=1e-12, int max_iter=100)</argsstring>
        <name>bisect</name>
        <param>
          <type>T</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>T</type>
          <declname>hi</declname>
        </param>
        <param>
          <type>F</type>
          <declname>f</declname>
        </param>
        <param>
          <type>T</type>
          <declname>tol</declname>
          <defval>1e-12</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>max_iter</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="105" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="105" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae028ac7f5c3bea125e9525c505ceefd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_integral&lt; I &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> I</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE I amrex::bisect</definition>
        <argsstring>(T const *d, I lo, I hi, T const &amp;v)</argsstring>
        <name>bisect</name>
        <param>
          <type>T const *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>I</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>I</type>
          <declname>hi</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="146" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="146" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab28eefec426cf22afcff6bd888243731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ItType</type>
          </param>
          <param>
            <type>typename ValType</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> ItType</type>
        <definition>AMREX_GPU_HOST_DEVICE ItType amrex::upper_bound</definition>
        <argsstring>(ItType first, ItType last, const ValType &amp;val)</argsstring>
        <name>upper_bound</name>
        <param>
          <type>ItType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ItType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const ValType &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="162" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="162" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe5f053f9083b72c3ba55354f2f30e71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ItType</type>
          </param>
          <param>
            <type>typename ValType</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> ItType</type>
        <definition>AMREX_GPU_HOST_DEVICE ItType amrex::lower_bound</definition>
        <argsstring>(ItType first, ItType last, const ValType &amp;val)</argsstring>
        <name>lower_bound</name>
        <param>
          <type>ItType</type>
          <declname>first</declname>
        </param>
        <param>
          <type>ItType</type>
          <declname>last</declname>
        </param>
        <param>
          <type>const ValType &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="187" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="187" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a48b44d4cce9eeb8129350d8a67e5a0e9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::clz</definition>
        <argsstring>(std::uint8_t x) noexcept</argsstring>
        <name>clz</name>
        <param>
          <type>std::uint8_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="263" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="263" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7a73225ef0f2ce085713ceba42e899c8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::clz</definition>
        <argsstring>(std::uint16_t x) noexcept</argsstring>
        <name>clz</name>
        <param>
          <type>std::uint16_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="278" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="278" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7be2d5e3b31f77a73d83359b153a29dc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::clz</definition>
        <argsstring>(std::uint32_t x) noexcept</argsstring>
        <name>clz</name>
        <param>
          <type>std::uint32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="292" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="292" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a224a34182c40c56a3911972dce56c5ed" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::clz</definition>
        <argsstring>(std::uint64_t x) noexcept</argsstring>
        <name>clz</name>
        <param>
          <type>std::uint64_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" line="306" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Algorithm.H" bodystart="306" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae3d1414946b992f39ca41f135f12a0d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena * amrex::The_Arena</definition>
        <argsstring>()</argsstring>
        <name>The_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" line="527" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="527" bodyend="534" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" declline="29" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad371ec91e94c5131b6002127a1008157" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena * amrex::The_Async_Arena</definition>
        <argsstring>()</argsstring>
        <name>The_Async_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" line="537" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="537" bodyend="544" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" declline="30" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a97a60825e6e7886b3502c2f4ed1eb417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena * amrex::The_Device_Arena</definition>
        <argsstring>()</argsstring>
        <name>The_Device_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" line="547" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="547" bodyend="554" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" declline="31" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a76cc74eb7c42bf4d111ac5cae5db8420" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena * amrex::The_Managed_Arena</definition>
        <argsstring>()</argsstring>
        <name>The_Managed_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" line="557" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="557" bodyend="564" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" declline="32" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aba0258410952c3ccfe405a462ef2d887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena * amrex::The_Pinned_Arena</definition>
        <argsstring>()</argsstring>
        <name>The_Pinned_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" line="567" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="567" bodyend="574" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" declline="33" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adcb4e473f4a6058ae8abd15c75bde706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena * amrex::The_Cpu_Arena</definition>
        <argsstring>()</argsstring>
        <name>The_Cpu_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" line="577" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.cpp" bodystart="577" bodyend="584" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" declline="34" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad7bef6630afa8a2109d2a242cc2d7591" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::aligned_size</definition>
        <argsstring>(std::size_t align_requirement, std::size_t size) noexcept</argsstring>
        <name>aligned_size</name>
        <param>
          <type>std::size_t</type>
          <declname>align_requirement</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Given a minimum required size of size bytes, this returns the next largest arena size that will align to align_requirement bytes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="17" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a73309828f34cc814833092699bdbc241" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::is_aligned</definition>
        <argsstring>(const void *p, std::size_t alignment) noexcept</argsstring>
        <name>is_aligned</name>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" line="22" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Arena.H" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3d178420751d1cce6bd2661d614fbb33" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename T::FABType</defval>
          </param>
        </templateparamlist>
        <type>std::array&lt; T *, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;T*,AMREX_SPACEDIM&gt; amrex::GetArrOfPtrs</definition>
        <argsstring>(std::array&lt; T, AMREX_SPACEDIM &gt; &amp;a) noexcept</argsstring>
        <name>GetArrOfPtrs</name>
        <param>
          <type>std::array&lt; T, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="854" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="854" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aee80b212d35c9fafe26f01f76ce6b672" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::array&lt; T *, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;T*,AMREX_SPACEDIM&gt; amrex::GetArrOfPtrs</definition>
        <argsstring>(const std::array&lt; std::unique_ptr&lt; T &gt;, AMREX_SPACEDIM &gt; &amp;a) noexcept</argsstring>
        <name>GetArrOfPtrs</name>
        <param>
          <type>const std::array&lt; std::unique_ptr&lt; T &gt;, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="860" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="860" bodyend="863"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1c2496ecb409639e8639cf01881d0acb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::array&lt; T const  *, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;T const*,AMREX_SPACEDIM&gt; amrex::GetArrOfConstPtrs</definition>
        <argsstring>(const std::array&lt; T, AMREX_SPACEDIM &gt; &amp;a) noexcept</argsstring>
        <name>GetArrOfConstPtrs</name>
        <param>
          <type>const std::array&lt; T, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="866" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="866" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af440a21a377ce21aced4b2360d34f09d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::array&lt; T const  *, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;T const*,AMREX_SPACEDIM&gt; amrex::GetArrOfConstPtrs</definition>
        <argsstring>(const std::array&lt; T *, AMREX_SPACEDIM &gt; &amp;a) noexcept</argsstring>
        <name>GetArrOfConstPtrs</name>
        <param>
          <type>const std::array&lt; T *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="872" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="872" bodyend="875"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5d3d4c8b853be1962df781e5b6ee395c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::array&lt; T const  *, AMREX_SPACEDIM &gt;</type>
        <definition>std::array&lt;T const*,AMREX_SPACEDIM&gt; amrex::GetArrOfConstPtrs</definition>
        <argsstring>(const std::array&lt; std::unique_ptr&lt; T &gt;, AMREX_SPACEDIM &gt; &amp;a) noexcept</argsstring>
        <name>GetArrOfConstPtrs</name>
        <param>
          <type>const std::array&lt; std::unique_ptr&lt; T &gt;, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="878" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="878" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8338a320488a4b26607928529d25c1a5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1XDim3" kindref="compound">XDim3</ref></type>
        <definition>XDim3 amrex::makeXDim3</definition>
        <argsstring>(const Array&lt; Real, AMREX_SPACEDIM &gt; &amp;a) noexcept</argsstring>
        <name>makeXDim3</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="887" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="887" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a365c0a4614ba19b7572ae042a0720c12" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tto</type>
          </param>
          <param>
            <type>class Tfrom</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Tto &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE Array4&lt;Tto&gt; amrex::ToArray4</definition>
        <argsstring>(Array4&lt; Tfrom &gt; const &amp;a_in) noexcept</argsstring>
        <name>ToArray4</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Tfrom &gt; const &amp;</type>
          <declname>a_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="263" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="263" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a71600c8a528e0f1863154e4cf0183cbc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::lbound</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a) noexcept</argsstring>
        <name>lbound</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="270" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6ce6b4176121c2c23327903a8139af0c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::ubound</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a) noexcept</argsstring>
        <name>ubound</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="277" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="277" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab8f44b56e5ac2f53bcfe742891c1c79c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::length</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a) noexcept</argsstring>
        <name>length</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="284" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="284" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a611b9da2c9b839d176ff0c527f918ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Array4&lt; T &gt; &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="290" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="290" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab49a5b78f3e95aa357d0471eee56336d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1PolymorphicArray4" kindref="compound">PolymorphicArray4</ref>&lt; T &gt;</type>
        <definition>PolymorphicArray4&lt;T&gt; amrex::makePolymorphic</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a)</argsstring>
        <name>makePolymorphic</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="338" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="338" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a652bd22fb8cfcdfeaa4ac62e81a41fe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab_Initialize</definition>
        <argsstring>()</argsstring>
        <name>BaseFab_Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="28" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="28" bodyend="54" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" declline="64" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a67b24cef9df62e8cced041445b239e86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseFab_Finalize</definition>
        <argsstring>()</argsstring>
        <name>BaseFab_Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="57" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="57" bodyend="60" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" declline="65" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a587a3cb57cff4b7fa72c7c1d4d98900b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::TotalBytesAllocatedInFabs</definition>
        <argsstring>() noexcept</argsstring>
        <name>TotalBytesAllocatedInFabs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="64" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="64" bodyend="78" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" declline="57" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a95a2c5251b0bc8cc9f28f6384738404a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::TotalBytesAllocatedInFabsHWM</definition>
        <argsstring>() noexcept</argsstring>
        <name>TotalBytesAllocatedInFabsHWM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="81" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="81" bodyend="95" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" declline="58" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa9ed510cedd140658efd18542d9479c7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::TotalCellsAllocatedInFabs</definition>
        <argsstring>() noexcept</argsstring>
        <name>TotalCellsAllocatedInFabs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="98" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="98" bodyend="112" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" declline="59" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa85143ea71ce835e3a64ce8551b726b4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::TotalCellsAllocatedInFabsHWM</definition>
        <argsstring>() noexcept</argsstring>
        <name>TotalCellsAllocatedInFabsHWM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="115" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="115" bodyend="129" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" declline="60" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a765c5cc6e670eb707740d51c99e7b35e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ResetTotalBytesAllocatedInFabsHWM</definition>
        <argsstring>() noexcept</argsstring>
        <name>ResetTotalBytesAllocatedInFabsHWM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="132" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="132" bodyend="141" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" declline="61" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae096acad3cf4e038809c53d73c0c57c8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::update_fab_stats</definition>
        <argsstring>(Long n, Long s, size_t szt) noexcept</argsstring>
        <name>update_fab_stats</name>
        <param>
          <type>Long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>szt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" line="144" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.cpp" bodystart="144" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a610006830e72a750eb65c44c5a540695" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::update_fab_stats</definition>
        <argsstring>(Long n, Long s, std::size_t szt) noexcept</argsstring>
        <name>update_fab_stats</name>
        <param>
          <type>Long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>szt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="62" column="6" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" declline="62" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a23fa77892c9168a73ef0d653ddd550a0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Array4&lt;T&gt; amrex::makeArray4</definition>
        <argsstring>(T *p, Box const &amp;bx, int ncomp) noexcept</argsstring>
        <name>makeArray4</name>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="88" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a73fec27a7206dd9a1eb9cb593936f784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_arithmetic&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;std::is_arithmetic&lt;T&gt;::value&gt;::type amrex::placementNew</definition>
        <argsstring>(T *const, Long)</argsstring>
        <name>placementNew</name>
        <param>
          <type>T * const</type>
        </param>
        <param>
          <type>Long</type>
        </param>
        <briefdescription>
<para>A Fortran Array-like Object <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> emulates the Fortran array concept. Useful operations can be performed upon BaseFabs in C++, and they provide a convenient interface to Fortran when it is necessary to retreat into that language. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> is a template class. Through use of the template, a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> may be based upon any class. So far at least, most applications have been based upon simple types like integers, real*4s, or real*8s. Most applications do not use BaseFabs directly, but utilize specialized classes derived from <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>.</para>
<para>Classes derived from <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> include <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref>, <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref>, <ref refid="classamrex_1_1TagBox" kindref="compound">TagBox</ref>, <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref>, <ref refid="classamrex_1_1EBFArrayBox" kindref="compound">EBFArrayBox</ref>, <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> and <ref refid="classamrex_1_1CutFab" kindref="compound">CutFab</ref>.</para>
<para><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> objects depend on the dimensionality of space (indirectly through the DOMAIN <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> member). It is typical to define the macro SPACEDIM to be 1, 2, or 3 to indicate the dimension of space. See the discussion of class <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> for more information. A <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> contains a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> DOMAIN, which indicates the integer indexing space over which the array is defined. A <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> also has NVAR components. By components, we mean that for each point in the rectangular indexing space, there are NVAR values associated with that point. A Fortran array corresponding to a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> would have (SPACEDIM+1) dimensions.</para>
<para>By design, the array layout in a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> mirrors that of a Fortran array. The first index (x direction for example) varies most rapidly, the next index (y direction), if any, varies next fastest. The component index varies last, after all the spatial indices.</para>
<para>It is sometimes convenient to be able to treat a sub-array within an existing <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> as a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> in its own right. This is often referred to as aliasing the <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>. Note that when aliasing is used, the BaseFabs domain will not, in general, be the same as the parent BaseFabs domain, nor will the number of components. <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref> is a dimension dependent class, so SPACEDIM must be defined as either 1, 2, or 3 when compiling.</para>
<para>This is NOT a polymorphic class.</para>
<para>It does NOT provide a copy constructor or assignment operator.</para>
<para>T MUST have a default constructor and an assignment operator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="143" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="143" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a01561352ac771218ab7ba04e356a044d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_trivially_default_constructible&lt; T &gt;::value &amp;&amp;!std::is_arithmetic&lt; T &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;std::is_trivially_default_constructible&lt;T&gt;::value &amp;&amp; !std::is_arithmetic&lt;T&gt;::value&gt; amrex::placementNew</definition>
        <argsstring>(T *const ptr, Long n)</argsstring>
        <name>placementNew</name>
        <param>
          <type>T *const</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="149" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="149" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aad9c01992bb029868be5de579b7317ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!std::is_trivially_default_constructible&lt; T &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;!std::is_trivially_default_constructible&lt;T&gt;::value&gt; amrex::placementNew</definition>
        <argsstring>(T *const ptr, Long n)</argsstring>
        <name>placementNew</name>
        <param>
          <type>T *const</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="158" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="158" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aee305735e81ee2d836ea3043c2e5baa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_trivially_destructible&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;std::is_trivially_destructible&lt;T&gt;::value&gt;::type amrex::placementDelete</definition>
        <argsstring>(T *const, Long)</argsstring>
        <name>placementDelete</name>
        <param>
          <type>T * const</type>
        </param>
        <param>
          <type>Long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="168" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="168" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af6da468471baec434494c96d522891b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;!std::is_trivially_destructible&lt; T &gt;::value &gt;::type</type>
        <definition>std::enable_if&lt;!std::is_trivially_destructible&lt;T&gt;::value&gt;::type amrex::placementDelete</definition>
        <argsstring>(T *const ptr, Long n)</argsstring>
        <name>placementDelete</name>
        <param>
          <type>T *const</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" line="173" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFab.H" bodystart="173" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa7261f50da60e78a42e700384710cd47" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Tto</type>
          </param>
          <param>
            <type>class Tfrom</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::cast</definition>
        <argsstring>(BaseFab&lt; Tto &gt; &amp;tofab, BaseFab&lt; Tfrom &gt; const &amp;fromfab, Box const &amp;bx, SrcComp scomp, DestComp dcomp, NumComps ncomp) noexcept</argsstring>
        <name>cast</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; Tto &gt; &amp;</type>
          <declname>tofab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; Tfrom &gt; const &amp;</type>
          <declname>fromfab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1SrcComp" kindref="compound">SrcComp</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DestComp" kindref="compound">DestComp</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1NumComps" kindref="compound">NumComps</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFabUtility.H" line="13" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFabUtility.H" bodystart="13" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4b8ad062bb5e1980e5f9094e47d71420" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename STRUCT</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename std::enable_if&lt;(sizeof(STRUCT)&lt;=36 *8) &amp;&amp;<ref refid="AMReX__TypeTraits_8H_1adc50ea9983407ec975c6c594c92bae5d" kindref="member">AMREX_IS_TRIVIALLY_COPYABLE</ref>(STRUCT) &amp;&amp;std::is_trivially_destructible&lt; STRUCT &gt;::value, int &gt;::type</type>
            <declname>FOO</declname>
            <defname>FOO</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::fill</definition>
        <argsstring>(BaseFab&lt; STRUCT &gt; &amp;aos_fab, F &amp;&amp;f)</argsstring>
        <name>fill</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; STRUCT &gt; &amp;</type>
          <declname>aos_fab</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFabUtility.H" line="29" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BaseFabUtility.H" bodystart="29" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac58ae562e33ec29796418c84ad3d07dc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::setBC</definition>
        <argsstring>(const Box &amp;bx, const Box &amp;domain, int src_comp, int dest_comp, int ncomp, const Vector&lt; BCRec &gt; &amp;bc_dom, Vector&lt; BCRec &gt; &amp;bcr) noexcept</argsstring>
        <name>setBC</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bc_dom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bcr</declname>
        </param>
        <briefdescription>
<para>Function for setting array of BCs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.cpp" line="8" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.cpp" bodystart="8" bodyend="32" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" declline="171" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a539c997273a93fdaabfc2a131c4425cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const BCRec &amp;b)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.cpp" line="34" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.cpp" bodystart="35" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad6ef0d3ad9d3a423c18134d029e0d7f0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::setBC</definition>
        <argsstring>(const Box &amp;bx, const Box &amp;domain, const BCRec &amp;bc_dom, BCRec &amp;bcr) noexcept</argsstring>
        <name>setBC</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &amp;</type>
          <declname>bc_dom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &amp;</type>
          <declname>bcr</declname>
        </param>
        <briefdescription>
<para>Function for setting a BC. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" line="154" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCRec.H" bodystart="154" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0b7407c69f5df5cb424eccddb336331b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FillDomainBoundary</definition>
        <argsstring>(MultiFab &amp;phi, const Geometry &amp;geom, const Vector&lt; BCRec &gt; &amp;bc)</argsstring>
        <name>FillDomainBoundary</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCUtil.cpp" line="36" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCUtil.cpp" bodystart="36" bodyend="56" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BCUtil.H" declline="17" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5a8c3c95822fc26d529026c5ef8b9308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Box &amp;bx)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Write an ASCII representation to the ostream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.cpp" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.cpp" bodystart="18" bodyend="31" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" declline="1544" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aac7b44499bc56506bcf5ed89ec42bc09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;os, Box &amp;bx)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Read from istream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.cpp" line="39" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.cpp" bodystart="39" bodyend="84" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" declline="1547" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad433171e426d58e2414c5394bfe0303c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AllGatherBoxes</definition>
        <argsstring>(Vector&lt; Box &gt; &amp;bxs, int n_extra_reserve)</argsstring>
        <name>AllGatherBoxes</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_extra_reserve</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.cpp" line="107" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.cpp" bodystart="107" bodyend="182" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" declline="1124" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aedb1ce8af83d1d6323271203b7168bcc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::grow</definition>
        <argsstring>(const Box &amp;b, int i) noexcept</argsstring>
        <name>grow</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Grow <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in all directions by given amount. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: n_cell negative shrinks the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by that number of cells. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1133" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1133" bodyend="1138"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af618b4b7011b62f674ed6deaf5646e09" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::grow</definition>
        <argsstring>(const Box &amp;b, const IntVect &amp;v) noexcept</argsstring>
        <name>grow</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Grow <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in each direction by specified amount. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1143" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1143" bodyend="1148"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af58cfa843dfe4c3d701828c792b48f9b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::grow</definition>
        <argsstring>(const Box &amp;b, int idir, int n_cell) noexcept</argsstring>
        <name>grow</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
<para>Grow <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in direction idir be n_cell cells. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1153" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1153" bodyend="1158"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1df6dc043a1e7c9598d2dbc331c3a822" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::grow</definition>
        <argsstring>(const Box &amp;b, Direction d, int n_cell) noexcept</argsstring>
        <name>grow</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" kindref="member">Direction</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1162" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1162" bodyend="1165"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a83482f38d773ec79abbd74b9fa084436" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::growLo</definition>
        <argsstring>(const Box &amp;b, int idir, int n_cell) noexcept</argsstring>
        <name>growLo</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1169" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1169" bodyend="1174"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1d65bfa10f55728eabebc8e179e2ee98" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::growLo</definition>
        <argsstring>(const Box &amp;b, Direction d, int n_cell) noexcept</argsstring>
        <name>growLo</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" kindref="member">Direction</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1178" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1178" bodyend="1181"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac2123a6b0d0f3ddc938fbbb4c8b89f73" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::growHi</definition>
        <argsstring>(const Box &amp;b, int idir, int n_cell) noexcept</argsstring>
        <name>growHi</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1185" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1185" bodyend="1190"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6cf9fe30602ba4db22eef149d771d25a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::growHi</definition>
        <argsstring>(const Box &amp;b, Direction d, int n_cell) noexcept</argsstring>
        <name>growHi</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" kindref="member">Direction</ref></type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1194" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1194" bodyend="1197"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9fb6c36ab72dfe92709f0ea89baa4824" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::coarsen</definition>
        <argsstring>(const Box &amp;b, int ref_ratio) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio. NOTE: if type(dir) = NODE centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio + ((hiratio)==0 ? 0 : 1). That is, refinement of coarsened <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> must contain the original <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1210" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1210" bodyend="1215"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af8eff72ab7121f959ef6f562bee95ff6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::coarsen</definition>
        <argsstring>(const Box &amp;b, const IntVect &amp;ref_ratio) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio. NOTE: if type(dir) = NODE centered: lo &lt;- lo/ratio and hi &lt;- hi/ratio + ((hiratio)==0 ? 0 : 1). That is, refinement of coarsened <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> must contain the original <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1228" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1228" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abb7cbdfb8c8ec3d94bec38fcf10b92db" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::refine</definition>
        <argsstring>(const Box &amp;b, int ref_ratio) noexcept</argsstring>
        <name>refine</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Refine <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo*ratio and hi &lt;- (hi+1)*ratio - 1. NOTE: if type(dir) = NODE centered: lo &lt;- lo*ratio and hi &lt;- hi*ratio. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1244" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1244" bodyend="1249"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeda82776b77d98746dcda422ab7586a3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::refine</definition>
        <argsstring>(const Box &amp;b, const IntVect &amp;ref_ratio) noexcept</argsstring>
        <name>refine</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <briefdescription>
<para>Refine <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> by given (positive) refinement ratio. NOTE: if type(dir) = CELL centered: lo &lt;- lo*ratio and hi &lt;- (hi+1)*ratio - 1. NOTE: if type(dir) = NODE centered: lo &lt;- lo*ratio and hi &lt;- hi*ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1260" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1260" bodyend="1265"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ace26a2763f9834a0e4e2369463dd7452" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::shift</definition>
        <argsstring>(const Box &amp;b, int dir, int nzones) noexcept</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nzones</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with indices shifted by nzones in dir direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1270" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1270" bodyend="1275"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac305cd6b4b0f79bcbef6ad1be4d7a06e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::shift</definition>
        <argsstring>(const Box &amp;b, const IntVect &amp;nzones) noexcept</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nzones</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1279" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1279" bodyend="1284"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a83ce813a4f22bd122dfa0d93671ecb4e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::surroundingNodes</definition>
        <argsstring>(const Box &amp;b, int dir) noexcept</argsstring>
        <name>surroundingNodes</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with NODE based coordinates in direction dir that encloses <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. NOTE: equivalent to b.convert(dir,NODE) NOTE: error if b.type(dir) == NODE. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1293" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1293" bodyend="1298"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad59ba0f6a56711a1491f9f73648b2876" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::surroundingNodes</definition>
        <argsstring>(const Box &amp;b, Direction d) noexcept</argsstring>
        <name>surroundingNodes</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" kindref="member">Direction</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1302" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1302" bodyend="1305"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad1a4ed5319693f09fb892ae0557d7691" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::surroundingNodes</definition>
        <argsstring>(const Box &amp;b) noexcept</argsstring>
        <name>surroundingNodes</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with NODE based coordinates in all directions that encloses <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1313" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1313" bodyend="1318"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a314545dbd77212eb64c3a248c754eda6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::convert</definition>
        <argsstring>(const Box &amp;b, const IntVect &amp;typ) noexcept</argsstring>
        <name>convert</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with different type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1323" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1323" bodyend="1328"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac713cf6298ee79d5fd03c241ebf5bc7d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::convert</definition>
        <argsstring>(const Box &amp;b, const IndexType &amp;typ) noexcept</argsstring>
        <name>convert</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1332" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1332" bodyend="1337"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab6ab1a9e025eea672b3117f9f32d1a68" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::enclosedCells</definition>
        <argsstring>(const Box &amp;b, int dir) noexcept</argsstring>
        <name>enclosedCells</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with CELL based coordinates in direction dir that is enclosed by b. NOTE: equivalent to b.convert(dir,CELL) NOTE: error if b.type(dir) == CELL. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1347" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1347" bodyend="1352"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abab0cc8dec794fd7506ddcfb6ac27b85" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::enclosedCells</definition>
        <argsstring>(const Box &amp;b, Direction d) noexcept</argsstring>
        <name>enclosedCells</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69" kindref="member">Direction</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1356" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1356" bodyend="1359"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5ea45540360fef1546b77116880c4ab9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::enclosedCells</definition>
        <argsstring>(const Box &amp;b) noexcept</argsstring>
        <name>enclosedCells</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with CELL based coordinates in all directions that is enclosed by b. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1367" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1367" bodyend="1372"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a48fd69edf0706c07faf10f17de423873" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::bdryLo</definition>
        <argsstring>(const Box &amp;b, int dir, int len=1) noexcept</argsstring>
        <name>bdryLo</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>len</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Returns the edge-centered <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> (in direction dir) defining the low side of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1380" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1380" bodyend="1393"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af60a35bfa44b2339838f41313bdd0611" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::bdryHi</definition>
        <argsstring>(const Box &amp;b, int dir, int len=1) noexcept</argsstring>
        <name>bdryHi</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>len</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Returns the edge-centered <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> (in direction dir) defining the high side of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1401" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1401" bodyend="1415"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7d6bd006ccae244c28b73110e139ed1b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::bdryNode</definition>
        <argsstring>(const Box &amp;b, Orientation face, int len=1) noexcept</argsstring>
        <name>bdryNode</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>len</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Similar to bdryLo and bdryHi except that it operates on the given face of box b. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1423" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1423" bodyend="1447"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aae360b0fe88c8af72c293906e6e7d3c3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::adjCellLo</definition>
        <argsstring>(const Box &amp;b, int dir, int len=1) noexcept</argsstring>
        <name>adjCellLo</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>len</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Returns the cell centered <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> of length len adjacent to b on the low end along the coordinate direction dir. The return <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is identical to b in the other directions. The return <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> and b have an empty intersection. NOTE: len &gt;= 1 NOTE: <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> retval = b.adjCellLo(b,dir,len) is equivalent to the following set of operations: <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> retval(b); retval.convert(dir,Box::CELL); retval.setrange(dir,retval.smallEnd(dir)-len,len);. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1463" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1463" bodyend="1477"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6b84705b46b7a57e78bb865c63eacab9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::adjCellHi</definition>
        <argsstring>(const Box &amp;b, int dir, int len=1) noexcept</argsstring>
        <name>adjCellHi</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>len</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Similar to adjCellLo but builds an adjacent <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> on the high end. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1482" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1482" bodyend="1497"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a68db5764cbf67a29f9cd2cc91d291a82" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::adjCell</definition>
        <argsstring>(const Box &amp;b, Orientation face, int len=1) noexcept</argsstring>
        <name>adjCell</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>len</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Similar to adjCellLo and adjCellHi; operates on given face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1502" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1502" bodyend="1527"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a67df6bf4139c0d12419a8f5ca21d2730" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::minBox</definition>
        <argsstring>(const Box &amp;b1, const Box &amp;b2) noexcept</argsstring>
        <name>minBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> to that of the minimum <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> containing both the original <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> and the argument. Both Boxes must have identical type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1536" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1536" bodyend="1541"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a38527c39e1b07777c6b7390f77db95e3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::lbound</definition>
        <argsstring>(Box const &amp;box) noexcept</argsstring>
        <name>lbound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1551" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1551" bodyend="1560"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aee1c8ddea8a977a982dbe39c4a9884a9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::ubound</definition>
        <argsstring>(Box const &amp;box) noexcept</argsstring>
        <name>ubound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1564" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1564" bodyend="1573"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::begin</definition>
        <argsstring>(Box const &amp;box) noexcept</argsstring>
        <name>begin</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1577" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1577" bodyend="1586"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::end</definition>
        <argsstring>(Box const &amp;box) noexcept</argsstring>
        <name>end</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1590" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1590" bodyend="1599"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a346de71b0a8301172fc1cc6df227037a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::length</definition>
        <argsstring>(Box const &amp;box) noexcept</argsstring>
        <name>length</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1603" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1603" bodyend="1615"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a10613950f73e309724a256c28d4849e1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::max_lbound</definition>
        <argsstring>(Box const &amp;b1, Box const &amp;b2) noexcept</argsstring>
        <name>max_lbound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1620" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1620" bodyend="1634"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a222afb2258b39f24134caf1142f66181" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::max_lbound</definition>
        <argsstring>(Box const &amp;b1, Dim3 const &amp;lo) noexcept</argsstring>
        <name>max_lbound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>lo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1638" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1638" bodyend="1652"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1ffc05df0359580bd1fc89982cbaf264" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::min_ubound</definition>
        <argsstring>(Box const &amp;b1, Box const &amp;b2) noexcept</argsstring>
        <name>min_ubound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1657" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1657" bodyend="1671"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4e889233ea8d3d82a2d6416667395c06" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::min_ubound</definition>
        <argsstring>(Box const &amp;b1, Dim3 const &amp;hi) noexcept</argsstring>
        <name>min_ubound</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1675" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1675" bodyend="1689"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2f9af438df67d831ca3a3db7a71f811f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::minBox</definition>
        <argsstring>(Box const &amp;b1, Box const &amp;b2, IndexType typ) noexcept</argsstring>
        <name>minBox</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>typ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1693" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1693" bodyend="1714"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7b537fc474280d5ef7e52aecc43fe788" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_FORCE_INLINE Box amrex::getIndexBounds</definition>
        <argsstring>(Box const &amp;b1) noexcept</argsstring>
        <name>getIndexBounds</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1721" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1721" bodyend="1724"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a358893f9ba4e2d3c7cd837cfd6d4cb76" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_FORCE_INLINE Box amrex::getIndexBounds</definition>
        <argsstring>(Box const &amp;b1, Box const &amp;b2) noexcept</argsstring>
        <name>getIndexBounds</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1727" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1727" bodyend="1733"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a462904ee55045e5ef05d55ec7d4b2254" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class ...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_FORCE_INLINE Box amrex::getIndexBounds</definition>
        <argsstring>(T const &amp;b1, T const &amp;b2, Ts const &amp;... b3) noexcept</argsstring>
        <name>getIndexBounds</name>
        <param>
          <type>T const &amp;</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>b2</declname>
        </param>
        <param>
          <type>Ts const &amp;...</type>
          <declname>b3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1737" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1737" bodyend="1740"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acaf1644c0e71ab419cdf9495cd29a030" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::getCell</definition>
        <argsstring>(Box const *boxes, int nboxes, Long icell) noexcept</argsstring>
        <name>getCell</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const *</type>
          <declname>boxes</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nboxes</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>icell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1745" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1745" bodyend="1759"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0fd13ebbd8053059b57a7e2010704b07" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::makeSlab</definition>
        <argsstring>(Box const &amp;b, int direction, int slab_index) noexcept</argsstring>
        <name>makeSlab</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>direction</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>slab_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1763" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1763" bodyend="1768"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6979a9a48d8e468954ffe6aa2b9c807a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Box amrex::makeSingleCellBox</definition>
        <argsstring>(int i, int j, int k, IndexType typ=IndexType::TheCellType())</argsstring>
        <name>makeSingleCellBox</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>typ</declname>
          <defval><ref refid="classamrex_1_1IndexType_1ac1c886c163b3eabab06602c8649a5bd2" kindref="member">IndexType::TheCellType</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="1772" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="1772" bodyend="1780"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ada7c77f7ac84c643ea21113e4ff5f2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const BoxArray &amp;ba)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
<para>Write a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to an ostream in ASCII format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1588" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1589" bodyend="1610" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" declline="837" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af4b25f1a81ffa836ed7356d6da7e814e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::boxComplement</definition>
        <argsstring>(const Box &amp;b1in, const Box &amp;b2)</argsstring>
        <name>boxComplement</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b1in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
<para>Make a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from the the complement of b2 in b1in. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1613" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1613" bodyend="1617" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" declline="21" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8c00ae57393c9f6665f88b80e3cdfb2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::complementIn</definition>
        <argsstring>(const Box &amp;b, const BoxArray &amp;ba)</argsstring>
        <name>complementIn</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
<para>Make a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from the complement of <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> ba in <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1620" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1620" bodyend="1624" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" declline="24" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a31f38031bc51519297d88d3234115277" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::intersect</definition>
        <argsstring>(const BoxArray &amp;ba, const Box &amp;b, int ng=0)</argsstring>
        <name>intersect</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ng</declname>
        </param>
        <briefdescription>
<para>Make a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from the intersection of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>(+ghostcells). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1627" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1627" bodyend="1650" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" declline="27" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2fa5535ba8d983023e1a6bd61c9a4880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::intersect</definition>
        <argsstring>(const BoxArray &amp;ba, const Box &amp;b, const IntVect &amp;ng)</argsstring>
        <name>intersect</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1653" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1653" bodyend="1676" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" declline="29" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a172c409fe49ab498d9910cc19b732346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::intersect</definition>
        <argsstring>(const BoxArray &amp;lhs, const BoxArray &amp;rhs)</argsstring>
        <name>intersect</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Make a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from the intersection of two BoxArrays. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1679" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1679" bodyend="1689" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" declline="32" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4f75454b7ddd1be750318c754c3b1ae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::intersect</definition>
        <argsstring>(const BoxArray &amp;ba, const BoxList &amp;bl)</argsstring>
        <name>intersect</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Make a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> from the intersection of <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1692" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1692" bodyend="1701" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" declline="35" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af37f380f72af598af4865070235664c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::convert</definition>
        <argsstring>(const BoxArray &amp;ba, IndexType typ)</argsstring>
        <name>convert</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>typ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1704" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1704" bodyend="1709" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" declline="37" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a911442fbfdd591235baf90cac01d9856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::convert</definition>
        <argsstring>(const BoxArray &amp;ba, const IntVect &amp;typ)</argsstring>
        <name>convert</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1712" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1712" bodyend="1717" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" declline="38" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a22ce5ec6a27aa7bce43ca708cec77023" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::coarsen</definition>
        <argsstring>(const BoxArray &amp;ba, int ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1720" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1720" bodyend="1725" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" declline="40" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a255709aafea190412cf8a963f450ebc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::coarsen</definition>
        <argsstring>(const BoxArray &amp;ba, const IntVect &amp;ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1728" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1728" bodyend="1733" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" declline="41" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae4c03c73102c83c74769b7773fb82483" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::refine</definition>
        <argsstring>(const BoxArray &amp;ba, int ratio)</argsstring>
        <name>refine</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1736" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1736" bodyend="1741" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" declline="43" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a85187c36418a08cc244643e6fc869f4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::refine</definition>
        <argsstring>(const BoxArray &amp;ba, const IntVect &amp;ratio)</argsstring>
        <name>refine</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1744" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1744" bodyend="1749" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" declline="44" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a719e505b04b336141e1a9a6ab52ecbcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::GetBndryCells</definition>
        <argsstring>(const BoxArray &amp;ba, int ngrow)</argsstring>
        <name>GetBndryCells</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Find the ghost cells of a given <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1752" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1752" bodyend="1806" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" declline="47" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae634c8846124c00149fa2a0ad45f4ec4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readBoxArray</definition>
        <argsstring>(BoxArray &amp;ba, std::istream &amp;s, bool b=false)</argsstring>
        <name>readBoxArray</name>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bReadSpecial</declname>
        </param>
        <briefdescription>
<para>Read a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from a stream. If b is true, read in a special way. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1810" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1810" bodyend="1837" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" declline="50" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a89eb9459b4109c4f9a9b3225abae29f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::match</definition>
        <argsstring>(const BoxArray &amp;x, const BoxArray &amp;y)</argsstring>
        <name>match</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Note that two BoxArrays that match are not necessarily equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1839" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1839" bodyend="1850" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" declline="53" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae7f2c81407f110284eec40dface36cbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const BoxArray::RefID &amp;id)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1BoxArray_1_1RefID" kindref="compound">BoxArray::RefID</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" line="1852" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1853" bodyend="1857" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" declline="839" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3fb0e9220f2aa85a365f7ec254f2e3d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::intersect</definition>
        <argsstring>(BoxDomain &amp;dest, const BoxDomain &amp;fin, const Box &amp;b)</argsstring>
        <name>intersect</name>
        <param>
          <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>fin</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Compute the intersection of <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> fin with <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b and place the result into <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> dest. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" line="19" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="19" bodyend="25" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" declline="39" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af32b91948787281bd9c0c691f3f355dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::refine</definition>
        <argsstring>(BoxDomain &amp;dest, const BoxDomain &amp;fin, int ratio)</argsstring>
        <name>refine</name>
        <param>
          <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>fin</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Refine all Boxes in the domain by the refinement ratio and return the result in dest. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" line="36" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="36" bodyend="42" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" declline="31" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a15969b1b7e5e1431ce9aea3b513ec98a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::accrete</definition>
        <argsstring>(BoxDomain &amp;dest, const BoxDomain &amp;fin, int sz=1)</argsstring>
        <name>accrete</name>
        <param>
          <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>fin</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Grow each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> fin by size sz and place the result into <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> dest. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" line="45" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="45" bodyend="51" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" declline="47" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa7fdcd82c18fdf6c33f4194da8e7da46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::coarsen</definition>
        <argsstring>(BoxDomain &amp;dest, const BoxDomain &amp;fin, int ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>fin</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen all Boxes in the domain by the refinement ratio. The result is placed into a new <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" line="54" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="54" bodyend="60" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" declline="25" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a417fa2fe3545ffe81b848760bbe1bcd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref></type>
        <definition>BoxDomain amrex::complementIn</definition>
        <argsstring>(const Box &amp;b, const BoxDomain &amp;bl)</argsstring>
        <name>complementIn</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Returns the complement of <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> bl in <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" line="73" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="73" bodyend="79" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" declline="19" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a227c6302f26efd6a5c8fef40c77906f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const BoxDomain &amp;bd)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> &amp;</type>
          <declname>bd</declname>
        </param>
        <briefdescription>
<para>Output a <ref refid="classamrex_1_1BoxDomain" kindref="compound">BoxDomain</ref> to an ostream is ASCII format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" line="229" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.cpp" bodystart="230" bodyend="237" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxDomain.H" declline="53" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a07499fc06f1137386e318ccccca0b5bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::complementIn</definition>
        <argsstring>(const Box &amp;b, const BoxList &amp;bl)</argsstring>
        <name>complementIn</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> defining the complement of <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> bl in <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> b. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="20" column="13" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" declline="20" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7cb1edb123daa9e2146ae0db8e2ed910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::boxDiff</definition>
        <argsstring>(const Box &amp;b1in, const Box &amp;b2)</argsstring>
        <name>boxDiff</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b1in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
<para>Returns <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> defining the compliment of b2 in b1in. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="23" column="13" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" declline="23" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a23d225d20bb2631874de8edff71dbc88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::boxDiff</definition>
        <argsstring>(BoxList &amp;bl_diff, const Box &amp;b1in, const Box &amp;b2)</argsstring>
        <name>boxDiff</name>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl_diff</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b1in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="25" column="10" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" declline="25" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe1aa5a62080b50fbc4c3646ddbc6c8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::refine</definition>
        <argsstring>(const BoxList &amp;bl, int ratio)</argsstring>
        <name>refine</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> in which each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is refined by the given ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="28" column="13" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" declline="28" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2def914169be100afac8106fd618b6f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::coarsen</definition>
        <argsstring>(const BoxList &amp;bl, int ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> in which each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is coarsened by the given ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="31" column="13" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" declline="31" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe22e052a797bf296858f9330273112d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::intersect</definition>
        <argsstring>(const BoxList &amp;bl, const Box &amp;b)</argsstring>
        <name>intersect</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> defining the intersection of bl with b. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="34" column="13" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" declline="34" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac662c42f6780a1a61523d3bb4fa5fba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::accrete</definition>
        <argsstring>(const BoxList &amp;bl, int sz)</argsstring>
        <name>accrete</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> in which each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is grown by the given size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="37" column="13" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" declline="37" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af71361ab9190f8aeb8f70488669095c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::removeOverlap</definition>
        <argsstring>(const BoxList &amp;bl)</argsstring>
        <name>removeOverlap</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Return <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> which covers the same area but has no overlapping boxes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="40" column="13" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" declline="40" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1707379eb41f317b0b08a3827c641713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const BoxList &amp;blist)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>blist</declname>
        </param>
        <briefdescription>
<para>Output a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> to an ostream in ASCII format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" line="44" column="5" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxList.H" declline="44" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa820e267be1d0dc2b3800553d57ae2ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const CoordSys &amp;c)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1CoordSys" kindref="compound">CoordSys</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" line="415" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="416" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4058fe437a44e4e9367221fbd9fa9e3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, CoordSys &amp;c)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1CoordSys" kindref="compound">CoordSys</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" line="436" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CoordSys.cpp" bodystart="436" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5be48241dfac16941f5f4c66fdd7d584" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_setvol</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;vol, GpuArray&lt; Real, 1 &gt; const &amp;offset, GpuArray&lt; Real, 1 &gt; const &amp;dx, const int coord) noexcept</argsstring>
        <name>amrex_setvol</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 1 &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 1 &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_1D_C.H" line="15" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_1D_C.H" bodystart="15" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5e3145837cdc69bc378ae3e7751aeafe" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_setarea</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;area, GpuArray&lt; Real, 1 &gt; const &amp;offset, GpuArray&lt; Real, 1 &gt; const &amp;dx, const int, const int coord) noexcept</argsstring>
        <name>amrex_setarea</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 1 &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 1 &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_1D_C.H" line="57" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_1D_C.H" bodystart="57" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad42f89d350fa1e06dfc8594fe3021a64" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_setdloga</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;dloga, GpuArray&lt; Real, 1 &gt; const &amp;offset, GpuArray&lt; Real, 1 &gt; const &amp;dx, const int, const int coord) noexcept</argsstring>
        <name>amrex_setdloga</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>dloga</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 1 &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 1 &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_1D_C.H" line="96" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_1D_C.H" bodystart="96" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa84527498d84c7d3eeb6ac347f35fc57" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_setvol</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;vol, GpuArray&lt; Real, 2 &gt; const &amp;offset, GpuArray&lt; Real, 2 &gt; const &amp;dx, const int coord) noexcept</argsstring>
        <name>amrex_setvol</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_2D_C.H" line="15" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_2D_C.H" bodystart="15" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad4ccd910ec18130e61c197ad32ec6eb8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_setarea</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;area, GpuArray&lt; Real, 2 &gt; const &amp;offset, GpuArray&lt; Real, 2 &gt; const &amp;dx, const int dir, const int coord) noexcept</argsstring>
        <name>amrex_setarea</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_2D_C.H" line="66" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_2D_C.H" bodystart="66" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac826dc262f0bdba922d73f261d6b03b9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_setdloga</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;dloga, GpuArray&lt; Real, 2 &gt; const &amp;offset, GpuArray&lt; Real, 2 &gt; const &amp;dx, const int dir, const int coord) noexcept</argsstring>
        <name>amrex_setdloga</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>dloga</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_2D_C.H" line="146" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_COORDSYS_2D_C.H" bodystart="146" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7c4d4d9ce4fe6fe6b1fcbbf297893347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>CTOs</declname>
            <defname>CTOs</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_integral&lt; T &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(TypeList&lt; CTOs... &gt;, std::array&lt; int, sizeof...(CTOs)&gt; const &amp;runtime_options, T N, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; CTOs... &gt;</type>
        </param>
        <param>
          <type>std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, sizeof...(CTOs)&gt; const &amp;</type>
          <declname>runtime_options</declname>
        </param>
        <param>
          <type>T</type>
          <declname>N</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CTOParallelForImpl.H" line="97" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CTOParallelForImpl.H" bodystart="97" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af8ef78b0668a4a000d853b5cc52170ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>CTOs</declname>
            <defname>CTOs</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(TypeList&lt; CTOs... &gt;, std::array&lt; int, sizeof...(CTOs)&gt; const &amp;runtime_options, Box const &amp;box, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; CTOs... &gt;</type>
        </param>
        <param>
          <type>std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, sizeof...(CTOs)&gt; const &amp;</type>
          <declname>runtime_options</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CTOParallelForImpl.H" line="112" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CTOParallelForImpl.H" bodystart="112" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a47aa380373cacdcd0e3c68fea31b620c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>CTOs</declname>
            <defname>CTOs</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_integral&lt; T &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(TypeList&lt; CTOs... &gt;, std::array&lt; int, sizeof...(CTOs)&gt; const &amp;runtime_options, Box const &amp;box, T ncomp, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; CTOs... &gt;</type>
        </param>
        <param>
          <type>std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, sizeof...(CTOs)&gt; const &amp;</type>
          <declname>runtime_options</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CTOParallelForImpl.H" line="128" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CTOParallelForImpl.H" bodystart="128" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4f3b1b6572ac7163e6d5a15149da4e57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>CTOs</declname>
            <defname>CTOs</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_integral&lt; T &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(TypeList&lt; CTOs... &gt; ctos, std::array&lt; int, sizeof...(CTOs)&gt; const &amp;option, T N, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; CTOs... &gt;</type>
          <declname>ctos</declname>
        </param>
        <param>
          <type>std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, sizeof...(CTOs)&gt; const &amp;</type>
          <declname>option</declname>
        </param>
        <param>
          <type>T</type>
          <declname>N</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor with compile time optimization of kernels with run time options. </para>
        </briefdescription>
        <detaileddescription>
<para>It uses fold expression to generate kernel launches for all combinations of the run time options. The kernel function can use constexpr if to discard unused code blocks for better run time performance. In the example below, the code will be expanded into 4*2=8 normal ParallelFors for all combinations of the run time parameters. <verbatim>    int A_runtime_option = ...;
    int B_runtime_option = ...;
    enum A_options : int { A0, A1, A2, A3};
    enum B_options : int { B0, B1 };
    ParallelFor(TypeList&lt;CompileTimeOptions&lt;A0,A1,A2,A3&gt;,
                         CompileTimeOptions&lt;B0,B1&gt;&gt;{},
                {A_runtime_option, B_runtime_option},
                N, [=] AMREX_GPU_DEVICE (int i, auto A_control, auto B_control)
    {
        ...
        if constexpr (A_control.value == A0) {
            ...
        } else if constexpr (A_control.value == A1) {
            ...
        } else if constexpr (A_control.value == A2) {
            ...
        else {
            ...
        }
        if constexpr (A_control.value != A3 &amp;&amp; B_control.value == B1) {
            ...
        }
        ...
    });
</verbatim> Note that due to a limitation of CUDA&apos;s extended device lambda, the constexpr if block cannot be the one that captures a variable first. If nvcc complains about it, you will have to manually capture it outside constexpr if. The data type for the parameters is int.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctos</parametername>
</parameternamelist>
<parameterdescription>
<para>list of all possible values of the parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>the run time parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>an interger specifying the 1D for loop&apos;s range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object taking an integer and working on that iteration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CTOParallelForImpl.H" line="188" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CTOParallelForImpl.H" bodystart="188" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7bcd0763fa57d502f90cd74ff93ba547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>CTOs</declname>
            <defname>CTOs</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(TypeList&lt; CTOs... &gt; ctos, std::array&lt; int, sizeof...(CTOs)&gt; const &amp;option, Box const &amp;box, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; CTOs... &gt;</type>
          <declname>ctos</declname>
        </param>
        <param>
          <type>std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, sizeof...(CTOs)&gt; const &amp;</type>
          <declname>option</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor with compile time optimization of kernels with run time options. </para>
        </briefdescription>
        <detaileddescription>
<para>It uses fold expression to generate kernel launches for all combinations of the run time options. The kernel function can use constexpr if to discard unused code blocks for better run time performance. In the example below, the code will be expanded into 4*2=8 normal ParallelFors for all combinations of the run time parameters. <verbatim>    int A_runtime_option = ...;
    int B_runtime_option = ...;
    enum A_options : int { A0, A1, A2, A3};
    enum B_options : int { B0, B1 };
    ParallelFor(TypeList&lt;CompileTimeOptions&lt;A0,A1,A2,A3&gt;,
                         CompileTimeOptions&lt;B0,B1&gt;&gt;{},
                {A_runtime_option, B_runtime_option},
                box, [=] AMREX_GPU_DEVICE (int i, int j, int k,
                                           auto A_control, auto B_control)
    {
        ...
        if constexpr (A_control.value == A0) {
            ...
        } else if constexpr (A_control.value == A1) {
            ...
        } else if constexpr (A_control.value == A2) {
            ...
        else {
            ...
        }
        if constexpr (A_control.value != A3 &amp;&amp; B_control.value == B1) {
            ...
        }
        ...
    });
</verbatim> Note that due to a limitation of CUDA&apos;s extended device lambda, the constexpr if block cannot be the one that captures a variable first. If nvcc complains about it, you will have to manually capture it outside constexpr if. The data type for the parameters is int.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctos</parametername>
</parameternamelist>
<parameterdescription>
<para>list of all possible values of the parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>the run time parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>box</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> specifying the 3D for loop&apos;s range. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object taking three integers and working on the given cell. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CTOParallelForImpl.H" line="241" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CTOParallelForImpl.H" bodystart="241" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abee51ceb0f447b6f86830e994c760ed6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>CTOs</declname>
            <defname>CTOs</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_integral&lt; T &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(TypeList&lt; CTOs... &gt; ctos, std::array&lt; int, sizeof...(CTOs)&gt; const &amp;option, Box const &amp;box, T ncomp, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; CTOs... &gt;</type>
          <declname>ctos</declname>
        </param>
        <param>
          <type>std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, sizeof...(CTOs)&gt; const &amp;</type>
          <declname>option</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor with compile time optimization of kernels with run time options. </para>
        </briefdescription>
        <detaileddescription>
<para>It uses fold expression to generate kernel launches for all combinations of the run time options. The kernel function can use constexpr if to discard unused code blocks for better run time performance. In the example below, the code will be expanded into 4*2=8 normal ParallelFors for all combinations of the run time parameters. <verbatim>    int A_runtime_option = ...;
    int B_runtime_option = ...;
    enum A_options : int { A0, A1, A2, A3};
    enum B_options : int { B0, B1 };
    ParallelFor(TypeList&lt;CompileTimeOptions&lt;A0,A1,A2,A3&gt;,
                         CompileTimeOptions&lt;B0,B1&gt;&gt;{},
                {A_runtime_option, B_runtime_option},
                box, ncomp, [=] AMREX_GPU_DEVICE (int i, int j, int k, int n,
                                                  auto A_control, auto B_control)
    {
        ...
        if constexpr (A_control.value == A0) {
            ...
        } else if constexpr (A_control.value == A1) {
            ...
        } else if constexpr (A_control.value == A2) {
            ...
        else {
            ...
        }
        if constexpr (A_control.value != A3 &amp;&amp; B_control.value == B1) {
            ...
        }
        ...
    });
</verbatim> Note that due to a limitation of CUDA&apos;s extended device lambda, the constexpr if block cannot be the one that captures a variable first. If nvcc complains about it, you will have to manually capture it outside constexpr if. The data type for the parameters is int.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctos</parametername>
</parameternamelist>
<parameterdescription>
<para>list of all possible values of the parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para>the run time parameters. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>box</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> specifying the iteration in 3D space. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>an integer specifying the range for iteration over components. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object taking three integers and working on the given cell. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CTOParallelForImpl.H" line="296" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CTOParallelForImpl.H" bodystart="296" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae6ff944334fa82f4315eb44b3dd08dae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::demangle</definition>
        <argsstring>(const char *name)</argsstring>
        <name>demangle</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Demangle C++ name. </para>
        </briefdescription>
        <detaileddescription>
<para>Demange C++ name if possible. For example <verbatim>    amrex::Box box;
    std::cout &lt;&lt; amrex::demangle(typeid(box).name());
</verbatim> Demangling turns &quot;N5amrex3BoxE&quot; into &quot;amrex::Box&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Demangle.H" line="25" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Demangle.H" bodystart="25" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a542e598352208488d6049caf539dd073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_same&lt; T, Dim3 &gt;::value||std::is_same&lt; T, XDim3 &gt;::value &gt;::type *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const T &amp;d)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Dim3.H" line="18" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Dim3.H" bodystart="18" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7c149cd13c0bd6bcd97464f0406a600b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::knapsack</definition>
        <argsstring>(const std::vector&lt; Long &gt; &amp;wgts, int nprocs, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;result, Real &amp;efficiency, bool do_full_knapsack, int nmax)</argsstring>
        <name>knapsack</name>
        <param>
          <type>const std::vector&lt; Long &gt; &amp;</type>
          <declname>wgts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>efficiency</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>do_full_knapsack</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nmax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="575" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="575" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac6467048b1487ee7b78edf0bbcbfd2bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::Distribute</definition>
        <argsstring>(const std::vector&lt; SFCToken &gt; &amp;tokens, const std::vector&lt; Long &gt; &amp;wgts, int nprocs, Real volpercpu, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;v)</argsstring>
        <name>Distribute</name>
        <param>
          <type>const std::vector&lt; SFCToken &gt; &amp;</type>
          <declname>tokens</declname>
        </param>
        <param>
          <type>const std::vector&lt; Long &gt; &amp;</type>
          <declname>wgts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>volpercpu</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="1177" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1177" bodyend="1257"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6e9865ac3868b0b19a46f021f2db2421" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const DistributionMapping &amp;pmap)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>pmap</declname>
        </param>
        <briefdescription>
<para>Our output operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="1960" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1961" bodyend="1977" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" declline="380" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2a1640fc2ba97306ea4b3546daa1e6b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const DistributionMapping::RefID &amp;id)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1DistributionMapping_1_1RefID" kindref="compound">DistributionMapping::RefID</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="1979" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="1980" bodyend="1984" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" declline="382" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aca8ca3ed7e01a5c954d6c70cae7b94a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::MakeSimilarDM</definition>
        <argsstring>(const BoxArray &amp;ba, const MultiFab &amp;mf, const IntVect &amp;ng)</argsstring>
        <name>MakeSimilarDM</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
<para>Function that creates a <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &quot;similar&quot; to that of a <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>&quot;Similar&quot; means that, if a box in &quot;ba&quot; intersects with any of the boxes in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> associated with &quot;mf&quot;, taking &quot;ngrow&quot; ghost cells into account, then that box will be assigned to the proc owning the one it has the maximum amount of overlap with.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ba</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> we want to generate a <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mf</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> we want said <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> to be similar to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ng</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of grow cells to use when computing intersection / overlap </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The computed <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="2020" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="2020" bodyend="2025" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" declline="397" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adc0569d3487d998596b2a11392bddaca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::MakeSimilarDM</definition>
        <argsstring>(const BoxArray &amp;ba, const BoxArray &amp;src_ba, const DistributionMapping &amp;src_dm, const IntVect &amp;ng)</argsstring>
        <name>MakeSimilarDM</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>src_ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>src_dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
<para>Function that creates a <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &quot;similar&quot; to that of a <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>&quot;Similar&quot; means that, if a box in &quot;ba&quot; intersects with any of the boxes in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> associated with &quot;mf&quot;, taking &quot;ngrow&quot; ghost cells into account, then that box will be assigned to the proc owning the one it has the maximum amount of overlap with.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ba</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> we want to generate a <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_ba</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> associatied with the src <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_dm</parametername>
</parameternamelist>
<parameterdescription>
<para>The input <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> we want the output to be similar to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ng</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of grow cells to use when computing intersection / overlap </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The computed <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" line="2027" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.cpp" bodystart="2027" bodyend="2059" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_DistributionMapping.H" declline="413" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a68d95d50ed271feafbd28018aa0e8d96" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt;!IsBaseFab&lt; T &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>Long</type>
        <definition>Long amrex::nBytesOwned</definition>
        <argsstring>(T const &amp;) noexcept</argsstring>
        <name>nBytesOwned</name>
        <param>
          <type>T const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="54" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a064d90077e1d86d6ba81b5b546bb7438" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Long</type>
        <definition>Long amrex::nBytesOwned</definition>
        <argsstring>(BaseFab&lt; T &gt; const &amp;fab) noexcept</argsstring>
        <name>nBytesOwned</name>
        <param>
          <type><ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; const &amp;</type>
          <declname>fab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="57" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a449d5cd7d3d778be0440141f9272d6bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DFAB</type>
          </param>
          <param>
            <type>class SFAB</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::conjunction_v&lt; IsBaseFab&lt; DFAB &gt;, IsBaseFab&lt; SFAB &gt;, std::is_convertible&lt; typename SFAB::value_type, typename DFAB::value_type &gt;&gt;, int &gt;</type>
            <declname>BAR</declname>
            <defname>BAR</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Copy</definition>
        <argsstring>(FabArray&lt; DFAB &gt; &amp;dst, FabArray&lt; SFAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Copy</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; DFAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; SFAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="220" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a094833951f442db9516e0741bd50f6aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class DFAB</type>
          </param>
          <param>
            <type>class SFAB</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::conjunction_v&lt; IsBaseFab&lt; DFAB &gt;, IsBaseFab&lt; SFAB &gt;, std::is_convertible&lt; typename SFAB::value_type, typename DFAB::value_type &gt;&gt;, int &gt;</type>
            <declname>BAR</declname>
            <defname>BAR</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Copy</definition>
        <argsstring>(FabArray&lt; DFAB &gt; &amp;dst, FabArray&lt; SFAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Copy</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; DFAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; SFAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="231" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="231" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab72e53672887ede3d7ddc5f65002700e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Add</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Add</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="272" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="272" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae53cc004fbab26533ec33294445a4d5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Add</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Add</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" line="280" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArray.H" bodystart="280" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8bf3fd2af3f97b6e13b0b7be0a4dcaa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const FabArrayBase::BDKey &amp;id)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">FabArrayBase::BDKey</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="739" column="1" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" declline="739" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad2ec28e533d93f8d4103d67a4402f00b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
        <definition>Arena* amrex::The_FA_Arena</definition>
        <argsstring>()</argsstring>
        <name>The_FA_Arena</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="741" column="7" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" declline="741" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aee63624c66220385d3ab86b7f68ae1c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB::value_type</type>
        <definition>FAB::value_type amrex::ReduceSum</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="16" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="16" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5e32d93cb04b6557dcf30553793aeb92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB::value_type</type>
        <definition>FAB::value_type amrex::ReduceSum</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="128" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="128" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4252562789c375cc55a545cd278cf212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceSum</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="149" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a580c267bdc2ecf41ead1889d77b287c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceSum</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="203" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="203" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a41a3ccdb479b7b99b07b29315b85d602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceSum</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="226" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="226" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a643762b10ddb6c66e880320c6df34809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceSum</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="282" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="282" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a94a27ca9a492d6d0f17996924e1b1745" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB::value_type</type>
        <definition>FAB::value_type amrex::ReduceMin</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="305" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="305" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0b14cf8ae0f4d40d865377df85ff8301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB::value_type</type>
        <definition>FAB::value_type amrex::ReduceMin</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="354" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="354" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab427586186a5143d74279bb26107044a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceMin</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="375" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="375" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7385647d73fd0e4b29617d87309f3c78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceMin</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="429" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="429" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adbeb820864e599e86ce8f5f30773beac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceMin</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="452" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="452" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a98b8b6dfe17e7e9225a567793e47f606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceMin</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="508" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="508" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a157fdc4ac63d7f4d21a5df4b4151eb28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB::value_type</type>
        <definition>FAB::value_type amrex::ReduceMax</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="531" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="531" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aced90eccf9c8aa5de4fa7fddacbab125" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB::value_type</type>
        <definition>FAB::value_type amrex::ReduceMax</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="581" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="581" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac8df373fd6d52b64c70d0e2c218f7b56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceMax</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="602" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="602" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0f27335e5238a53e12af0ad6dc8e04a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceMax</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="656" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="656" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a07315aba6826805030c5f6fd847fc370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceMax</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="679" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="679" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a210e45f0c136c51a835032cc34cfb0a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::ReduceMax</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="735" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="735" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3866c459fc8c798d5a19fa747a3500b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalAnd</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="758" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="758" bodyend="761"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1add25d5d5612fe7f7e697f9eff76568ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalAnd</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="807" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="807" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aff9cc4b21a84dbb1def69e24fa575064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalAnd</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="828" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="828" bodyend="832"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab19f7ad2a54b1e324d431adfe05978aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalAnd</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="882" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="882" bodyend="890"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a86ff43c965c29ca6c76704135c773345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalOr</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="905" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="905" bodyend="908"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afbf67596dd1ba6faf566beabcbab7776" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalOr</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="954" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="954" bodyend="961"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeddb35f2f67fa5f607d190b5d5306c9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalOr</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, int nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="975" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="975" bodyend="979"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a93ead4b7e5a5b99b0a88040076d7fd21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalOr</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1029" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1029" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a376ff66b5e6a76d195cace00df41d05e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::printCell</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;mf, const IntVect &amp;cell, int comp=-1, const IntVect &amp;ng=IntVect::TheZeroVector())</argsstring>
        <name>printCell</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ng</declname>
          <defval><ref refid="classamrex_1_1IntVect_1ac4331f56298c56a0ff01a011c3702c3a" kindref="member">IntVect::TheZeroVector</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1051" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1051" bodyend="1075"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a54b8b46deca518b441b849bbd1ceda02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Subtract</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Subtract</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1080" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1080" bodyend="1083"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afeebec2f58b85bfde5b88b30810cd82d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Subtract</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Subtract</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1088" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1088" bodyend="1122"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aec148f53c2d7fcc3b00c9e91999d4058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Multiply</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Multiply</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1128" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1128" bodyend="1131"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a71808e748d2cf6ea301231f278269b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Multiply</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Multiply</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1136" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1136" bodyend="1170"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa9f3bb9afb6e1fdfc272654ee6923492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Divide</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, int nghost)</argsstring>
        <name>Divide</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1176" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1176" bodyend="1179"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a98b5b165f2a8926b40da786a678ed7af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Divide</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int srccomp, int dstcomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Divide</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>srccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dstcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1184" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1184" bodyend="1218"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3f0f44b09d21b49d00d3d1b12e9e2489" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Abs</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;fa, int icomp, int numcomp, int nghost)</argsstring>
        <name>Abs</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1223" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1223" bodyend="1226"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a76eee97924f5b2d883d161eb976b2cad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::Abs</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;fa, int icomp, int numcomp, const IntVect &amp;nghost)</argsstring>
        <name>Abs</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1231" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1231" bodyend="1263"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab02b05e2eb3282f8df33e5cbc655b2a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::prefetchToHost</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, const bool synchronous=true)</argsstring>
        <name>prefetchToHost</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>synchronous</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1267" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1267" bodyend="1278"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4db8bcd1f50c790aba6b81860143cc96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::prefetchToDevice</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, const bool synchronous=true)</argsstring>
        <name>prefetchToDevice</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>synchronous</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1282" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1282" bodyend="1293"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5821b989454c54f92dd1f2312e95b5b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class IFAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value                                                               &amp;&amp; IsBaseFab&lt;IFAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::OverrideSync</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;fa, FabArray&lt; IFAB &gt; const &amp;msk, const Periodicity &amp;period)</argsstring>
        <name>OverrideSync</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; IFAB &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1299" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1299" bodyend="1305"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af6d31b25633d781cd8fe931951889e6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class IFAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value                                                               &amp;&amp; IsBaseFab&lt;IFAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::OverrideSync_nowait</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;fa, FabArray&lt; IFAB &gt; const &amp;msk, const Periodicity &amp;period)</argsstring>
        <name>OverrideSync_nowait</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; IFAB &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1311" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1311" bodyend="1354"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad81d4975698feb7461d8ad18c21c7951" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::OverrideSync_finish</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;fa)</argsstring>
        <name>OverrideSync_finish</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1358" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1358" bodyend="1368"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a998c5815369d23cd73eea1b09f43a966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class foo</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::dtoh_memcpy</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int scomp, int dcomp, int ncomp)</argsstring>
        <name>dtoh_memcpy</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1372" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1372" bodyend="1386"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8531953b8fba66482d81cad6c5dc3e73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class foo</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::dtoh_memcpy</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src)</argsstring>
        <name>dtoh_memcpy</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1390" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1390" bodyend="1393"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae243b10c65516ed7dfeaf9aed7e75aa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class foo</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::htod_memcpy</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src, int scomp, int dcomp, int ncomp)</argsstring>
        <name>htod_memcpy</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1397" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1397" bodyend="1411"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa9df7c449e875ece24add0d826c4f133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class foo</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::htod_memcpy</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;dst, FabArray&lt; FAB &gt; const &amp;src)</argsstring>
        <name>htod_memcpy</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1415" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1415" bodyend="1418"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af1fe8dd7d2e436cf2e4e696b9b5ae006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class foo</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::indexFromValue</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;mf, int comp, IntVect const &amp;nghost, typename FAB::value_type value)</argsstring>
        <name>indexFromValue</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>typename FAB::value_type</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1422" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1422" bodyend="1513"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad99f216d6d06fb8bc99e3597173b7ef7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsBaseFab&lt; FAB &gt;::value, int &gt;</type>
            <declname>FOO</declname>
            <defname>FOO</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>FAB::value_type</type>
        <definition>FAB::value_type amrex::Dot</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;x, int xcomp, FabArray&lt; FAB &gt; const &amp;y, int ycomp, int ncomp, IntVect const &amp;nghost, bool local=false)</argsstring>
        <name>Dot</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xcomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ycomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Compute dot products of two FabArrays. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>first <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xcomp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component of x </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>second <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ycomp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component of y </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>number of components </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, MPI communciation is skipped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1528" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1528" bodyend="1577"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac185c39750011cc24fb8c1a0b872a34d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const IntDescriptor &amp;id)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write out an <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> to an ostream in ASCII. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="51" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="52" bodyend="65" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.H" declline="69" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0ed9b6ea967b3a6cebc43973e1440e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, IntDescriptor &amp;id)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read in an <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> from an istream. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="68" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="68" bodyend="88" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.H" declline="73" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a69c1f9f47c8c546e09801fc8cf9a1cb7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>static const int* amrex::selectOrdering</definition>
        <argsstring>(int prec, int ordering)</argsstring>
        <name>selectOrdering</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>prec</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ordering</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="179" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="179" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaca313b52afc9cee08eb9198f24286d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ONES_COMP_NEG</definition>
        <argsstring>(Long &amp;n, int nb, Long incr)</argsstring>
        <name>ONES_COMP_NEG</name>
        <param>
          <type>Long &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nb</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>incr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="255" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="255" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a58afbef5c92433b70e81edcb63d2b15f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::_pd_get_bit</definition>
        <argsstring>(char const *base, int offs, int nby, const int *ord)</argsstring>
        <name>_pd_get_bit</name>
        <param>
          <type>char const *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>offs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nby</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>ord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="274" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="274" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7189a895a6c3a44b843bd452bf5b7556" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>static Long amrex::_pd_extract_field</definition>
        <argsstring>(char const *in, int offs, int nbi, int nby, const int *ord)</argsstring>
        <name>_pd_extract_field</name>
        <param>
          <type>char const *</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>offs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nbi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nby</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>ord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="304" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="304" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a71354fdd0cf23bda7f72e4cc6ef39399" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NB</declname>
            <defname>NB</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void amrex::_pd_btrvout</definition>
        <argsstring>(char *out, Long nitems)</argsstring>
        <name>_pd_btrvout</name>
        <param>
          <type>char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="381" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="381" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab6d5efa978936e2c7fc647d49be1210c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::_pd_insert_field</definition>
        <argsstring>(Long in_long, int nb, char *out, int offs, int l_order, int l_bytes)</argsstring>
        <name>_pd_insert_field</name>
        <param>
          <type>Long</type>
          <declname>in_long</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nb</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>offs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>l_order</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>l_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="411" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="411" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac3daae71af784ea861908589aa58b9e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::_pd_set_bit</definition>
        <argsstring>(char *base, int offs)</argsstring>
        <name>_pd_set_bit</name>
        <param>
          <type>char *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>offs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="480" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="480" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a96267bb2ea2c5fdf894b2c9c0622c30b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::_pd_reorder</definition>
        <argsstring>(char *arr, Long nitems, int nbytes, const int *ord)</argsstring>
        <name>_pd_reorder</name>
        <param>
          <type>char *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>ord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="500" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="500" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2f266c27494ab2cfcbeaa04283a409af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::permute_real_word_order</definition>
        <argsstring>(void *out, const void *in, Long nitems, const int *outord, const int *inord, int REALSIZE)</argsstring>
        <name>permute_real_word_order</name>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>outord</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>inord</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>REALSIZE</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="525" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="525" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeac895c53859e6eec3df7c9df01bd000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PD_fconvert</definition>
        <argsstring>(void *out, const void *in, Long nitems, int boffs, const Long *outfor, const int *outord, const Long *infor, const int *inord, int l_order, int l_bytes, int onescmp)</argsstring>
        <name>PD_fconvert</name>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>boffs</declname>
        </param>
        <param>
          <type>const Long *</type>
          <declname>outfor</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>outord</declname>
        </param>
        <param>
          <type>const Long *</type>
          <declname>infor</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>inord</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>l_order</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>l_bytes</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>onescmp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="616" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="616" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a46b2531f5151b258164051481bd82055" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::PD_fixdenormals</definition>
        <argsstring>(void *out, Long nitems, const Long *outfor, const int *outord)</argsstring>
        <name>PD_fixdenormals</name>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>const Long *</type>
          <declname>outfor</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>outord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="790" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="790" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a571e81ef7e9fdb96f23e2691c59e1b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const RealDescriptor &amp;rd)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">amrex::RealDescriptor</ref> &amp;</type>
          <declname>id</declname>
          <defname>rd</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write out an <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> to an ostream in ASCII. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="877" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="878" bodyend="891" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.H" declline="263" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a543f68ea96151adca9c24601b7f472e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, RealDescriptor &amp;rd)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1RealDescriptor" kindref="compound">amrex::RealDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read in a <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> from an istream. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="894" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="894" bodyend="913" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.H" declline="267" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5af6379a52e8e24792df9021c80789fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::PD_convert</definition>
        <argsstring>(void *out, const void *in, Long nitems, int boffs, const RealDescriptor &amp;ord, const RealDescriptor &amp;ird, const IntDescriptor &amp;iid, int onescmp=0)</argsstring>
        <name>PD_convert</name>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>boffs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>ord</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>ird</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>iid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>onescmp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" line="917" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="917" bodyend="957"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6013bb90a6872541127823fe4e6d8d93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const FArrayBox &amp;f)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" line="993" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="994" bodyend="1010"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9ff574ad6dd00e11abbe7b34c9233e0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, FArrayBox &amp;f)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" line="1013" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="1013" bodyend="1030"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a30ee6a24a0b0fd18d710278879681aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::fab_filcc</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;qn, int ncomp, Box const &amp;domain, Real const *, Real const *, BCRec const *bcn)</argsstring>
        <name>fab_filcc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>qn</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>Real const *</type>
          <defname>dx</defname>
        </param>
        <param>
          <type>Real const *</type>
          <defname>xlo</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> const *</type>
          <declname>bcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FilCC_C.cpp" line="5" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FilCC_C.cpp" bodystart="5" bodyend="778" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FilCC_C.H" declline="14" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3440f6cdd23e00f1fa05a2cf05e8a482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::fab_filfc</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;qn, int ncomp, Box const &amp;domain, Real const *, Real const *, BCRec const *bcn)</argsstring>
        <name>fab_filfc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>qn</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>Real const *</type>
          <defname>dx</defname>
        </param>
        <param>
          <type>Real const *</type>
          <defname>xlo</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> const *</type>
          <declname>bcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FilFC_C.cpp" line="5" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FilFC_C.cpp" bodystart="5" bodyend="104" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FilFC_C.H" declline="14" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7584537c492af5e1cad3da079a51c324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::fab_filnd</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;qn, int ncomp, Box const &amp;domain, Real const *, Real const *, BCRec const *bcn)</argsstring>
        <name>fab_filnd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>qn</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>Real const *</type>
          <defname>dx</defname>
        </param>
        <param>
          <type>Real const *</type>
          <defname>xlo</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> const *</type>
          <declname>bcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FilND_C.cpp" line="5" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FilND_C.cpp" bodystart="5" bodyend="98" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FilND_C.H" declline="9" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad287398c706f3a1775e0954b73e5c779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Geometry &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Nice ASCII output. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="18" bodyend="23" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" declline="504" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5086c850dfa16df677225c8c1139e466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;, Geometry &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>Nice ASCII input. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" line="26" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="26" bodyend="47" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" declline="506" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adbc2cc619f36c517e2d0c6cbc5a40068" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::coarsen</definition>
        <argsstring>(Geometry const &amp;fine, IntVect const &amp;rr)</argsstring>
        <name>coarsen</name>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="510" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="510" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abf0376e5e15137aa9ec711295e7bf6bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::coarsen</definition>
        <argsstring>(Geometry const &amp;fine, int rr)</argsstring>
        <name>coarsen</name>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="518" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="518" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad0f0f651612f7b14e3c2768e69aaeb92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::refine</definition>
        <argsstring>(Geometry const &amp;crse, IntVect const &amp;rr)</argsstring>
        <name>refine</name>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="522" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="522" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a54d77694c8efe15e13ae6e08ba5e9fae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::refine</definition>
        <argsstring>(Geometry const &amp;crse, int rr)</argsstring>
        <name>refine</name>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="530" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="530" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acb7e4e52bb38ce342af7e2edf41293be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::DefaultGeometry</definition>
        <argsstring>()</argsstring>
        <name>DefaultGeometry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="534" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="534" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9a4cb25adc75b070b5ab1cb6c24b4023" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::norm</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_z) noexcept</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Return the norm (magnitude squared) of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="340" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="340" bodyend="345" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" declline="15" declcolumn="3"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af924e08c1b1c132575c3627b47c65695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const GpuComplex&lt; U &gt; &amp;c)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; U &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="150" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="150" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adf062698516fbd51a09bead1a35275d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator+</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <briefdescription>
<para>Identity operation on a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="162" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aac774500cedfe2adbd3e53c3e068a7b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator-</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <briefdescription>
<para>Negate a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="169" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="169" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8a12491f39d80782dcde3ec5419d6e39" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator-</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x, const GpuComplex&lt; T &gt; &amp;a_y) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Subtract two complex numbers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="176" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="176" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af1ff72d9c7ec7e99cb20252616b6678f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator-</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x, const T &amp;a_y) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Subtract a real number from a complex one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="188" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="188" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac199ab4f0ed174c238c06aef9e87466d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator-</definition>
        <argsstring>(const T &amp;a_x, const GpuComplex&lt; T &gt; &amp;a_y) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const T &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Subtract a complex number from a real one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="200" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="200" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9e456bdbe9114f2b3d9c74990577bd91" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator+</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x, const GpuComplex&lt; T &gt; &amp;a_y) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Add two complex numbers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="212" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="212" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a99c5fbfd6053c7ac2f9e43b3e5eb25d7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator+</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x, const T &amp;a_y) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Add a real number to a complex one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="224" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="224" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8a090122fe61e28eb8365641bed8fc93" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator+</definition>
        <argsstring>(const T &amp;a_x, const GpuComplex&lt; T &gt; &amp;a_y) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const T &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Add a complex number to a real one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="236" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="236" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af07743d59bb6e85014d959611f47b81f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator*</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x, const GpuComplex&lt; T &gt; &amp;a_y) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Multiply two complex numbers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="248" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="248" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9f590ca3c3a2ca1986d6eb59690fc7d2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator*</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x, const T &amp;a_y) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Multiply a complex number by a real one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="260" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="260" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4237359b0f955fdfe663f996ae1742ab" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator*</definition>
        <argsstring>(const T &amp;a_x, const GpuComplex&lt; T &gt; &amp;a_y) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const T &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Multiply a real number by a complex one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="272" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="272" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0d50b358feee8de5a27ba594b7e2930a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator/</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x, const GpuComplex&lt; T &gt; &amp;a_y) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Divide a complex number by another one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="284" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="284" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a106de2ebd5839c06d9ddc1286fc87958" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator/</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_x, const T &amp;a_y) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Divide a complex number by a real. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="296" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="296" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a991630c159fc9def80cb6f19864cd029" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::operator/</definition>
        <argsstring>(const T &amp;a_x, const GpuComplex&lt; T &gt; &amp;a_y) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const T &amp;</type>
          <declname>a_x</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Divide a real number by a complex one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="308" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="308" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a464e44680268cba2d8a7b1ae3232a183" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::polar</definition>
        <argsstring>(const T &amp;a_r, const T &amp;a_theta) noexcept</argsstring>
        <name>polar</name>
        <param>
          <type>const T &amp;</type>
          <declname>a_r</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_theta</declname>
        </param>
        <briefdescription>
<para>Return a complex number given its polar representation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="320" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="320" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad7188a3015dcffc0938b6cb74def1c7f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::exp</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_z) noexcept</argsstring>
        <name>exp</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Complex expotential function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="330" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4f298e1c3407710de306d440bc79e84e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::abs</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_z) noexcept</argsstring>
        <name>abs</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Return the absolute value of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="352" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="352" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe1175c09892da177b5f5ecaf36936ab" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::sqrt</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_z) noexcept</argsstring>
        <name>sqrt</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Return the square root of a complex number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="370" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="370" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9f3abe7a79b333248fb3183d9a9df7de" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::arg</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_z) noexcept</argsstring>
        <name>arg</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Return the angle of a complex number&apos;s polar representation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="395" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="395" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a377e86dc25bb181be031ad2f80cb2984" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::log</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_z) noexcept</argsstring>
        <name>log</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <briefdescription>
<para>Complex natural logarithm function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="405" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="405" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aac289a1a554a6d1018603b5cd7fc8f9e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::pow</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_z, const T &amp;a_y) noexcept</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>a_y</declname>
        </param>
        <briefdescription>
<para>Raise a complex number to a (real) power. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="415" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="415" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6c1cfe66fa0b6e38dae765b3700dd75f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE GpuComplex&lt;T&gt; amrex::pow</definition>
        <argsstring>(const GpuComplex&lt; T &gt; &amp;a_z, int a_n) noexcept</argsstring>
        <name>pow</name>
        <param>
          <type>const <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &amp;</type>
          <declname>a_z</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_n</declname>
        </param>
        <briefdescription>
<para>Raise a complex number to an integer power. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" line="448" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuComplex.H" bodystart="448" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9350dac44e563ea3d35902cf36cf4b00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a98a85f350a96eb36272d756d5a9c9a05" kindref="member">gpuError_t</ref></type>
        <definition>gpuError_t amrex::gpuGetLastError</definition>
        <argsstring>()</argsstring>
        <name>gpuGetLastError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuError.H" line="37" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuError.H" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a884f63b4c32929437cf596c59b26c311" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* amrex::gpuGetErrorString</definition>
        <argsstring>(gpuError_t error)</argsstring>
        <name>gpuGetErrorString</name>
        <param>
          <type><ref refid="namespaceamrex_1a98a85f350a96eb36272d756d5a9c9a05" kindref="member">gpuError_t</ref></type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuError.H" line="42" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuError.H" bodystart="42" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af6334d58395d4bec0257d18060918ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class L</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Lambdas</declname>
            <defname>Lambdas</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a3d3f711243a9a5a973dd44a2174e1529" kindref="member">AMREX_GPU_GLOBAL</ref> void</type>
        <definition>AMREX_GPU_GLOBAL void amrex::launch_global</definition>
        <argsstring>(L f0, Lambdas... fs)</argsstring>
        <name>launch_global</name>
        <param>
          <type>L</type>
          <declname>f0</declname>
        </param>
        <param>
          <type>Lambdas...</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" line="49" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad89172e7973936686d13f4926bfac5aa" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class L</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> void</type>
        <definition>AMREX_GPU_DEVICE void amrex::call_device</definition>
        <argsstring>(L &amp;&amp;f0) noexcept</argsstring>
        <name>call_device</name>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" line="52" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a450c15a9b3787ce7c979cded90f11574" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class L</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Lambdas</declname>
            <defname>Lambdas</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> void</type>
        <definition>AMREX_GPU_DEVICE void amrex::call_device</definition>
        <argsstring>(L &amp;&amp;f0, Lambdas &amp;&amp;... fs) noexcept</argsstring>
        <name>call_device</name>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type>Lambdas &amp;&amp;...</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" line="55" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a006c22eb1e141a0784faa415c00a49c4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::launch_host</definition>
        <argsstring>(L &amp;&amp;f0) noexcept</argsstring>
        <name>launch_host</name>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" line="64" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a12c011a8bc6459b1c2a8f691b2554972" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class L</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Lambdas</declname>
            <defname>Lambdas</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::launch_host</definition>
        <argsstring>(L &amp;&amp;f0, Lambdas &amp;&amp;... fs) noexcept</argsstring>
        <name>launch_host</name>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type>Lambdas &amp;&amp;...</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" line="67" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunch.H" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a685ae8eab582f895ce964b6a99030ef2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::launch</definition>
        <argsstring>(T const &amp;n, L &amp;&amp;f) noexcept</argsstring>
        <name>launch</name>
        <param>
          <type>T const &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="58" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a30469a18e5c88bd166595ac713cabe22" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::launch</definition>
        <argsstring>(T const &amp;n, L &amp;&amp;f) noexcept</argsstring>
        <name>launch</name>
        <param>
          <type>T const &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="64" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="64" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a254b157995b540641c02a74d2ad65ebe" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(T n, L &amp;&amp;f) noexcept</argsstring>
        <name>For</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="71" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="71" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a22c6c19b7533ed5219ce1853d5aa625d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(T n, L &amp;&amp;f) noexcept</argsstring>
        <name>For</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="79" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a58f6305adbac638674782f274ce8bb80" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, T n, L &amp;&amp;f) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="86" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7cea287f0304e88558d9ca04a4c36ed8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, T n, L &amp;&amp;f) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="92" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="92" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aff9b2ebd167a621c7784769618bda4c6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(T n, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="99" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="99" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a072608d6bf753001563975d5a8fe4fbd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(T n, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="108" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3402f6ed86316371198e6c2ff17ac5ac" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, T n, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="115" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afc6cc810bf41a81eface49f9cc852316" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, T n, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="121" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="121" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6daa7b128f7df0ad214eb964c3467cdf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="128" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="128" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a19fe7a6bcb88a6ea3ff727e16d94fd8a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="140" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="140" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a897ec22faf83646115076a4520a5abbf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="147" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6478276ecb61cb034d7c195c9d4e1a63" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="153" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="153" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac96f4d9630c4ea1445766061b3fed3f4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="160" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="160" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1452e9f2866a6113d43c73d3fc7af230" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="173" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="173" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4508b95a3ecc4f15b0b66d7520981f4b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="180" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="180" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac6a80e6f7b8428eb129dd24fb7f66290" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="186" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="186" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a27afa434166c6cd6925b63f2729f1e76" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="193" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="193" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac9ce0bee2dc7e8b9fc8ea15b51177a8f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="207" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="207" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a71600bb098640c24e93a816035b4a254" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="214" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a827e9ac14b5d79d545f030b90f937ac3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="220" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="220" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a53fa136d7eac223e2fad334c8b15e138" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="227" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="227" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a78cad9c755cd6495ea035b4417392c23" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="242" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="242" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9744823a175d8d361c9ad0f48d6d2ca7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="249" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6980821cbe90aa1f7b405bb83966db7b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="255" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="255" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a88a534ac7f6788df74e2a3b69f36d5ee" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="262" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="262" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a10b5a7af6fab63231e7c3dc238956bbe" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="269" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="269" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac4fca0bbf870bf63e6410d5bfb8f6cec" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="277" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="277" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaac93972fe89b2b3b4b23364d02eda86" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="283" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="283" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa3d67648733b6d47b6f579e9f157ee11" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="290" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="290" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a96f126cd3c215817b4bd3203e157199c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="298" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="298" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a12ef8f8c8150215890fcf56e024ffe54" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="307" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="307" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab564cd1760c75ac17dbfbfd57bc38d31" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="313" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="313" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3410871e25fe94c964b94bdc5a5af600" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="322" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="322" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4fb2ca3415feccd93941b2e2ebd26326" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="332" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="332" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeeba5c10b16807384e4d6fbc84843f28" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="343" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="343" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab9f637427a2409453010e9902f1fc816" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="353" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="353" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7421bdf4eb985c8246d56cb401862eec" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="365" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="365" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a826090556f70d82cb77496dd16de4ac5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="378" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="378" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a24ce492df29f97eea1da6d4d6a0e5bdc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="392" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="392" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2a177036ca5d5a267ee77716befdf7d7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::For</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>For</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="406" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="406" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a10d0f241ad4d9d28d20fa84630e7c476" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="418" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="418" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa7d26cf4c05cd7bf1245a82d3743b395" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="425" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="425" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3176ade9b263bdb8eff5d6899c1b44bf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="433" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="433" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6143015250ec59f183ebca220743c576" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="439" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="439" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a723dc684ea9fb13ba007143c904d0b45" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="446" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="446" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9fa4cdf34b0fcdb912de06e39b1ce62b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="454" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="454" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae29d0bf15408a1011f1efe2268bc02c1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="463" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="463" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1c107ddaea8a24baa2999b2e2f9f7df6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="469" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="469" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6f268bb50cb57088d5321ed0c04c61b1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="478" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="478" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1ef07000fc68388723798a0afcd78047" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="488" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="488" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad72c9207638dee72b9c2ccedc35868d6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="499" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="499" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac378429e9c290008b09445c38d22af3f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="510" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="510" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac9332ec3412332457a7273412131b24a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="523" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="523" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a48a77c09a9b5db284191a50a574d432f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="536" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="536" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a410d6b1d4212f6b2cd1166ab26a693c6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="550" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="550" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4b6e0e8780ba526c479f17b5b9e78753" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="564" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="564" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8fbd6b37b492537aed607bfd14595409" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(T n, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="576" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="576" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a404044a9b269d7f9672d46b81c41584b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(T n, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="582" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="582" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ada9330c731a48fc44471ebc3c6487231" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="589" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="589" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aada8d8f2c52d2815537444aeb4405493" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="595" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="595" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0cccddb84fe8782da9ad7a41659db4a0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="602" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="602" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a179086f2dcc5a5f1d31fc60d66f5d200" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="608" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="608" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8a34ce92315500abfec2cd2f5a6e5874" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="615" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="615" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6584ba99a8dcba4cb0a330f8c0680d0f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="621" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="621" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a291ee384b7b8dfe9bbfd673ea01e1116" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="628" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="628" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae0c62379acb0da4414201237b4d9fb2a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="635" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="635" bodyend="640"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a868eed399e45cf6ec37ef16d6a3fe52c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="645" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="645" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae2794cae659f77894b2a4b8620e543a8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="654" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="654" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5203186b0e34bf6cea673cd5a84b5a65" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="665" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="665" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5eca614985a9ccf444a529ffb99e6d61" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="678" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="678" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7272329c4c5b06cda2ee47e4ee3f46e2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(T n, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="689" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="689" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a52a015c2685e72eedbec426e5c759e38" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(T n, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="695" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="695" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a674b3cdfb298f33ab148c79b1a8f864e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="702" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="702" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a93fecb060a171855ae9031e0b528b0d2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="708" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="708" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa8e17ba59ac39be36ae9b30b2a79a9a5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="715" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="715" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa41e11558de4d7d8f4657c3437309611" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="721" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="721" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab2dc88579a70cfe068381de5523e4e6a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="728" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="728" bodyend="731"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a81ec0aed26d6d369d52d62c03eebca7a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="734" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="734" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab85f87612e22364c1d3e310670c9fef0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="741" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="741" bodyend="745"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac050835285608d263ad6d5cad633d8d8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="748" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="748" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac4cd096351a9069431300195029519db" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="758" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="758" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a780a1e303e0ddc9ba594715230692e39" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="767" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="767" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6857dbe043af9dfc73a2bc572b14e918" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="778" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="778" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6e05717f3fe831b31c93bc1ce05021e8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="791" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="791" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaa43ade38dff5d2e3eea8085d5c2e99e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, T n, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="802" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="802" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0fce6fe39c46eb7d8cfce96b5cd18675" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, T n, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="808" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="808" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae691b4150bbebc8fa1a0ad685c42a15b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="815" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="815" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6191078787901b17f104da9772bf0e4c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="821" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="821" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac8ee3123268c4e941ac44214a7e5f9f8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="828" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="828" bodyend="831"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a685e34e81a5299196f56c212424eb28d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="834" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="834" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afff3ae3db80c80c67b8a89f72c7fad01" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="841" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="841" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8e4440fb5b7cb604924b4349edb15f44" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="847" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="847" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a49077d5108dc85db1db7938f039a778b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="854" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="854" bodyend="859"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a92326094b031b8aeec378f0afc2acf8c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="862" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="862" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a35d0951b57ea7c93629e68e42c3a6807" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="873" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="873" bodyend="878"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7988f7b57a94160eb8c67bae01179773" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="883" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="883" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa928415b2afda06373493941877c8daa" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="895" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="895" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae79e24d18afb51f5da8a200ba461d794" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="909" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="909" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aad398246e65a7d7102beb5169e03a04d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, T n, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="921" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="921" bodyend="924"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3100c920743097917f3a6a9ab4b90436" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, T n, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="927" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="927" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5b26a31faefa1749b9fb899d1818244b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="934" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="934" bodyend="937"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a56366e4d62798bd0f1a76dc6d75e2bcd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="940" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="940" bodyend="944"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3b9faf23e1d7db427410543fb90dfe54" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="947" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="947" bodyend="950"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6f88bb7062337fd274a93efc2a663fc1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="953" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="953" bodyend="957"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5484386a731a820195e419b9ff0d0fc2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="960" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="960" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aedefd63d712034bf3bc2b46605009a0c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="966" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="966" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aec488f9795341de5cb922ba7ad08066c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="973" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="973" bodyend="978"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a06ad0a96600681aab0df46f28960e689" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="981" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="981" bodyend="987"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a440c08a8f25cc712e02cefb709238206" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="992" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="992" bodyend="997"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0f0c7cfccc8daa96bb8dd2f68c3602c9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="1002" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="1002" bodyend="1008"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad6c49d13c537803899b8c4cc0cce7516" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="1014" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="1014" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af3a19ee4aac32296739615fb00297376" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::HostDeviceFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <defname>info</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="1028" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="1028" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2de21a574a15104cfa7e94e52dd6ab67" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelForRNG</definition>
        <argsstring>(T n, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelForRNG</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="1040" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="1040" bodyend="1045"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6b36710af5d429b6ee50b3d6ff67c240" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelForRNG</definition>
        <argsstring>(Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelForRNG</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="1048" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="1048" bodyend="1057"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae0528e001d631f2240d2d111fed2607d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParallelForRNG</definition>
        <argsstring>(Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelForRNG</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="1060" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="1060" bodyend="1071"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa785b3b07c24c864604e8de72a0bb919" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::single_task</definition>
        <argsstring>(L &amp;&amp;f) noexcept</argsstring>
        <name>single_task</name>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" line="1074" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsC.H" bodystart="1074" bodyend="1077"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3bddb069b268576e6fa712be45c218ae" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::single_task</definition>
        <argsstring>(gpuStream_t stream, L &amp;&amp;f) noexcept</argsstring>
        <name>single_task</name>
        <param>
          <type><ref refid="namespaceamrex_1a3e08759747455ff96c8f68e8673c2b19" kindref="member">gpuStream_t</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="720" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="720" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab4125c964ff49592c4ae1fb790d06aab" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::launch</definition>
        <argsstring>(int nblocks, std::size_t shared_mem_bytes, gpuStream_t stream, L &amp;&amp;f) noexcept</argsstring>
        <name>launch</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nblocks</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>shared_mem_bytes</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a3e08759747455ff96c8f68e8673c2b19" kindref="member">gpuStream_t</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="728" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="728" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a88f0ca28352c28006022a3fd9fde564b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::launch</definition>
        <argsstring>(int nblocks, gpuStream_t stream, L &amp;&amp;f) noexcept</argsstring>
        <name>launch</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nblocks</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a3e08759747455ff96c8f68e8673c2b19" kindref="member">gpuStream_t</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="737" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="737" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1943b9e3d049575658e8d169748d9b17" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::launch</definition>
        <argsstring>(int nblocks, int nthreads_per_block, std::size_t shared_mem_bytes, gpuStream_t stream, L &amp;&amp;f) noexcept</argsstring>
        <name>launch</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nblocks</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nthreads_per_block</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>shared_mem_bytes</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a3e08759747455ff96c8f68e8673c2b19" kindref="member">gpuStream_t</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="745" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="745" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a93bf7d62b3ca318333e7e1d4a6d5d5c1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::launch</definition>
        <argsstring>(int nblocks, int nthreads_per_block, gpuStream_t stream, L &amp;&amp;f) noexcept</argsstring>
        <name>launch</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nblocks</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nthreads_per_block</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a3e08759747455ff96c8f68e8673c2b19" kindref="member">gpuStream_t</ref></type>
          <declname>stream</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="755" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="755" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad6310a1cb6985fb66d1063214eb2154a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeDeviceRunnable&lt;L&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, T n, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="826" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="826" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adc666b2d07c4e93a556e5d8a20ba2a3e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeDeviceRunnable&lt;L&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="842" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="842" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4a19a63b944fd1b70949aa859beed18c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeDeviceRunnable&lt;L&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="870" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="870" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a465161b6646618dfe09f35c3f24af0db" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeDeviceRunnable&lt;L&gt;::value&gt; amrex::ParallelForRNG</definition>
        <argsstring>(T n, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelForRNG</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="897" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="897" bodyend="914"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a37d48cb27c9e40565e6cf1b9e6803d71" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeDeviceRunnable&lt;L&gt;::value&gt; amrex::ParallelForRNG</definition>
        <argsstring>(Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelForRNG</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="918" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="918" bodyend="946"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a10a0a44076df5d4ee6e9cec9297876b8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeDeviceRunnable&lt;L&gt;::value&gt; amrex::ParallelForRNG</definition>
        <argsstring>(Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelForRNG</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="950" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="950" bodyend="980"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a64b436dc83a9c6a957431b225282a0ad" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L1 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L2 &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L2&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="984" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="984" bodyend="1025"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1a5c0a08bbadb06dfef888b64faa259a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L1 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L2 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L3 &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L2&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L3&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1029" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1029" bodyend="1085"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a28a49413ec1a0b6a17c5c27e708aa447" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L1 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L2 &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L2&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1091" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1091" bodyend="1137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0adf6c2c460b1937988f9fc19432c8db" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L1 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L2 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L3 &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L2&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L3&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1144" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1144" bodyend="1207"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9fd3d4ba7e1ae49a7fb2709cdb5ae180" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeDeviceRunnable&lt;L&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, T n, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1225" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1225" bodyend="1228"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a22a969435bd17eae3a9bbea9568a4682" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeDeviceRunnable&lt;L&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1232" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1232" bodyend="1235"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abc92f4da47f85cb0ef50fe2f956703a1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeDeviceRunnable&lt;L&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1239" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1239" bodyend="1242"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a016a778ec6968a95683733be8c893be3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L1 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L2 &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L2&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1246" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1246" bodyend="1251"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a97c81791e4904e18f8fff9ce48c07180" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L1 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L2 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L3 &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L2&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L3&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1255" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1255" bodyend="1261"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae4c377121da61c17bdaafa33935c3cbc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L1 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L2 &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L2&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1267" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1267" bodyend="1273"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af7b08639ec098664cd764cef5f1fe2e2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L1 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L2 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeDeviceRunnable" kindref="compound">MaybeDeviceRunnable</ref>&lt; L3 &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L2&gt;::value &amp;&amp; MaybeDeviceRunnable&lt;L3&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1280" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1280" bodyend="1288"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab3863817bfa1ca3b9a76d4fc953d7e4c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeHostDeviceRunnable&lt;L&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, T n, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1624" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1624" bodyend="1636"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7bb48258aeeb1befece1cb908f3c5265" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeHostDeviceRunnable&lt;L&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, T n, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1640" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1640" bodyend="1652"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af9136e401cc189dee737565c20612e59" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeHostDeviceRunnable&lt;L&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(T n, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1656" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1656" bodyend="1659"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a724425a241882a0f87afc3365acaa7e0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeHostDeviceRunnable&lt;L&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(T n, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1663" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1663" bodyend="1666"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae335e0393a0ab3b72d5c030aeb7fe463" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeHostDeviceRunnable&lt;L&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1670" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1670" bodyend="1681"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a06d734c4409fe9e1ba1c8dbaaeadbecc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeHostDeviceRunnable&lt;L&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1685" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1685" bodyend="1696"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8d997b9240e7bfffe880ebae18626799" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeHostDeviceRunnable&lt;L&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1700" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1700" bodyend="1711"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad8a84260f65ffde7f9a5e3633751dda9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename L</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeHostDeviceRunnable&lt;L&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box, T ncomp, L &amp;&amp;f) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>T</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>L &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1715" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1715" bodyend="1726"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac4927489611da112fb9566b475ce7e2b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L1 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L2 &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeHostDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeHostDeviceRunnable&lt;L2&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1730" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1730" bodyend="1743"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a51eec23f783632abfdf0779edebe6709" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L1 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L2 &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeHostDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeHostDeviceRunnable&lt;L2&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box1, Box const &amp;box2, L1 &amp;&amp;f1, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1747" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1747" bodyend="1760"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a59fe40a7598ea631f1128f3a239fa515" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L1 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L2 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L3 &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeHostDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeHostDeviceRunnable&lt;L2&gt;::value &amp;&amp; MaybeHostDeviceRunnable&lt;L3&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box1, Box const &amp;box2, Box const &amp;box3, L1 &amp;&amp;f1, L2 &amp;&amp;f2, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1764" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1764" bodyend="1780"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a592727ba0dc1149c659488f962afcad7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L1 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L2 &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeHostDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeHostDeviceRunnable&lt;L2&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1786" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1786" bodyend="1800"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2695a338ee4b8c26286655a357a94463" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L1 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L2 &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeHostDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeHostDeviceRunnable&lt;L2&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1806" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1806" bodyend="1820"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa0e2291d95cafe7bfafbc9d93f4289b0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L1 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L2 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L3 &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeHostDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeHostDeviceRunnable&lt;L2&gt;::value &amp;&amp; MaybeHostDeviceRunnable&lt;L3&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1827" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1827" bodyend="1846"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a59ee5e609bbf45ace075e9a207ec2a32" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
          <param>
            <type>typename T3</type>
          </param>
          <param>
            <type>typename L1</type>
          </param>
          <param>
            <type>typename L2</type>
          </param>
          <param>
            <type>typename L3</type>
          </param>
          <param>
            <type>typename M1</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T1&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M2</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T2&gt;::value&gt;</defval>
          </param>
          <param>
            <type>typename M3</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;T3&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L1 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L2 &gt;::value &amp;&amp;<ref refid="structamrex_1_1MaybeHostDeviceRunnable" kindref="compound">MaybeHostDeviceRunnable</ref>&lt; L3 &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;MaybeHostDeviceRunnable&lt;L1&gt;::value &amp;&amp; MaybeHostDeviceRunnable&lt;L2&gt;::value &amp;&amp; MaybeHostDeviceRunnable&lt;L3&gt;::value&gt; amrex::HostDeviceParallelFor</definition>
        <argsstring>(Gpu::KernelInfo const &amp;info, Box const &amp;box1, T1 ncomp1, L1 &amp;&amp;f1, Box const &amp;box2, T2 ncomp2, L2 &amp;&amp;f2, Box const &amp;box3, T3 ncomp3, L3 &amp;&amp;f3) noexcept</argsstring>
        <name>HostDeviceParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1KernelInfo" kindref="compound">Gpu::KernelInfo</ref> const &amp;</type>
          <declname>info</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>T1</type>
          <declname>ncomp1</declname>
        </param>
        <param>
          <type>L1 &amp;&amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>T2</type>
          <declname>ncomp2</declname>
        </param>
        <param>
          <type>L2 &amp;&amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box3</declname>
        </param>
        <param>
          <type>T3</type>
          <declname>ncomp3</declname>
        </param>
        <param>
          <type>L3 &amp;&amp;</type>
          <declname>f3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" line="1853" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchFunctsG.H" bodystart="1853" bodyend="1872"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8fd1cb48ab79898f1f480c55c433113a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class L</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a3d3f711243a9a5a973dd44a2174e1529" kindref="member">AMREX_GPU_GLOBAL</ref> void</type>
        <definition>AMREX_GPU_GLOBAL void amrex::launch_global</definition>
        <argsstring>(L f0)</argsstring>
        <name>launch_global</name>
        <param>
          <type>L</type>
          <declname>f0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchGlobal.H" line="12" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchGlobal.H" bodystart="12" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4a765bc79483affb715df32cc1d6d121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>amrex_launch_bounds_max_threads</declname>
            <defname>amrex_launch_bounds_max_threads</defname>
          </param>
          <param>
            <type>class L</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>amrex::__launch_bounds__</definition>
        <argsstring>(amrex_launch_bounds_max_threads) AMREX_GPU_GLOBAL void launch_global(L f0)</argsstring>
        <name>__launch_bounds__</name>
        <param>
          <type>amrex_launch_bounds_max_threads</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchGlobal.H" line="15" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuLaunchGlobal.H" bodystart="15" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a923303ed68b75a5a2e65f20876e25a7a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_integral&lt; T &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::isEmpty</definition>
        <argsstring>(T n) noexcept</argsstring>
        <name>isEmpty</name>
        <param>
          <type>T</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuRange.H" line="14" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuRange.H" bodystart="14" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abb63128824cf099d9c02ef49c3288713" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_FORCE_INLINE bool amrex::isEmpty</definition>
        <argsstring>(Box const &amp;b) noexcept</argsstring>
        <name>isEmpty</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuRange.H" line="16" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuRange.H" bodystart="16" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9757af2bf86a9ecbb80561b51d6b5323" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const dim3 &amp;d)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const dim3 &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.cpp" line="12" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.cpp" bodystart="13" bodyend="17" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuUtility.H" declline="222" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a63e28af3672b72154d156eac5f51ce06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; iMultiFab &gt; amrex::OwnerMask</definition>
        <argsstring>(FabArrayBase const &amp;mf, const Periodicity &amp;period, const IntVect &amp;ngrow)</argsstring>
        <name>OwnerMask</name>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" line="598" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.cpp" bodystart="598" bodyend="668" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_iMultiFab.H" declline="536" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a73fb53c873d555a7a3cc7b33e88a5f33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const IndexType &amp;itype)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Write an <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> to an ostream in ASCII. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.cpp" line="9" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.cpp" bodystart="10" bodyend="22" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" declline="142" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab982b91919e6fa7eed439d20fc794c41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, IndexType &amp;itype)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
<para>Read an <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> from an istream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.cpp" line="30" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.cpp" bodystart="30" bodyend="48" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IndexType.H" declline="144" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac25dfba1079e742467f752e4ee21450f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int16_t</type>
        <definition>std::int16_t amrex::swapBytes</definition>
        <argsstring>(std::int16_t val)</argsstring>
        <name>swapBytes</name>
        <param>
          <type>std::int16_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" line="5" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" bodystart="5" bodyend="8" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.H" declline="14" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a591f0270c546f1ece0504803e064d8d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t amrex::swapBytes</definition>
        <argsstring>(std::int32_t val)</argsstring>
        <name>swapBytes</name>
        <param>
          <type>std::int32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" line="10" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" bodystart="10" bodyend="14" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.H" declline="15" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aafe4e1214f81026ac1c1704afef4ad79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int64_t</type>
        <definition>std::int64_t amrex::swapBytes</definition>
        <argsstring>(std::int64_t val)</argsstring>
        <name>swapBytes</name>
        <param>
          <type>std::int64_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" line="16" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" bodystart="16" bodyend="21" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.H" declline="16" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad65cae2ff531a4079a272c48094ce223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint16_t</type>
        <definition>std::uint16_t amrex::swapBytes</definition>
        <argsstring>(std::uint16_t val)</argsstring>
        <name>swapBytes</name>
        <param>
          <type>std::uint16_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" line="23" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" bodystart="23" bodyend="26" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.H" declline="18" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe5aa643ac55845309ffb09b6cd6bc6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t amrex::swapBytes</definition>
        <argsstring>(std::uint32_t val)</argsstring>
        <name>swapBytes</name>
        <param>
          <type>std::uint32_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" line="28" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" bodystart="28" bodyend="32" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.H" declline="19" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa67c20a40ddd4aeebbbb36e32af4b546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint64_t</type>
        <definition>std::uint64_t amrex::swapBytes</definition>
        <argsstring>(std::uint64_t val)</argsstring>
        <name>swapBytes</name>
        <param>
          <type>std::uint64_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" line="34" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.cpp" bodystart="34" bodyend="39" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.H" declline="20" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0718da697f64bda3be2152538b70d4c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename To</type>
          </param>
          <param>
            <type>typename From</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::writeIntData</definition>
        <argsstring>(const From *data, std::size_t size, std::ostream &amp;os, const amrex::IntDescriptor &amp;id)</argsstring>
        <name>writeIntData</name>
        <param>
          <type>const From *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">amrex::IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.H" line="23" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.H" bodystart="23" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af8ec915a2cffc7c342e1f15e52cbd697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename To</type>
          </param>
          <param>
            <type>typename From</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::readIntData</definition>
        <argsstring>(To *data, std::size_t size, std::istream &amp;is, const amrex::IntDescriptor &amp;id)</argsstring>
        <name>readIntData</name>
        <param>
          <type>To *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">amrex::IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.H" line="36" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntConv.H" bodystart="36" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a56a98cb29892cdc924be9c0c6b83cda2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const IntVect &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.cpp" line="15" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.cpp" bodystart="16" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae3b2b2af01369829d3b37006cd625fe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, IntVect &amp;iv)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.cpp" line="30" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.cpp" bodystart="30" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aff7e1eb998059fdb9cbc90a22c2d01d5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::coarsen</definition>
        <argsstring>(int i, int ratio) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="26" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="26" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1da87e164dc6afd9cd39bc5b1bc6920c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::operator+</definition>
        <argsstring>(int s, const IntVect &amp;p) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns p + s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="627" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="627" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aab9309e1642f8394f6a3c95dbc98755d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE AMREX_GPU_HOST_DEVICE IntVect amrex::operator-</definition>
        <argsstring>(int s, const IntVect &amp;p) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns -p + s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="635" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="635" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a38ef4bb6aa5d316bafa475400152a048" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::operator*</definition>
        <argsstring>(int s, const IntVect &amp;p) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns p * s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="642" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="642" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adda43c394af96b55fd44923cbd4a3774" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::min</definition>
        <argsstring>(const IntVect &amp;p1, const IntVect &amp;p2) noexcept</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Returns the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> that is the component-wise minimum of two argument IntVects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="654" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="654" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa8f4106a3b37e5bcbb8f8a45dfb69598" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::elemwiseMin</definition>
        <argsstring>(const IntVect &amp;p1, const IntVect &amp;p2) noexcept</argsstring>
        <name>elemwiseMin</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="664" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="664" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a13b3121d972f873fb930fafd6a3318f6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::max</definition>
        <argsstring>(const IntVect &amp;p1, const IntVect &amp;p2) noexcept</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Returns the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> that is the component-wise maximum of two argument IntVects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="678" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="678" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afb0a9dea764f55669bba38551e3e5bb8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::elemwiseMax</definition>
        <argsstring>(const IntVect &amp;p1, const IntVect &amp;p2) noexcept</argsstring>
        <name>elemwiseMax</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="688" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="688" bodyend="693"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a86199655298470c716a068f36731ae9d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::BASISV</definition>
        <argsstring>(int dir) noexcept</argsstring>
        <name>BASISV</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns a basis vector in the given coordinate direction; eg. <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> BASISV(1) == (0,1,0). Note that the coordinate directions are zero based. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="703" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="703" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1a42959e8a21d09d8bcf385c75ad4ec6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::scale</definition>
        <argsstring>(const IntVect &amp;p, int s) noexcept</argsstring>
        <name>scale</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> obtained by multiplying each of the components of this <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="718" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="718" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae06284bc2bd3bee6426c654371490514" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::reflect</definition>
        <argsstring>(const IntVect &amp;a, int ref_ix, int idir) noexcept</argsstring>
        <name>reflect</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ref_ix</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idir</declname>
        </param>
        <briefdescription>
<para>Returns an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> that is the reflection of input in the plane which passes through ref_ix and normal to the coordinate direction idir. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="731" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="731" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9a81bac0694ac99fbe8dae5d321ac9ca" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::diagShift</definition>
        <argsstring>(const IntVect &amp;p, int s) noexcept</argsstring>
        <name>diagShift</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> obtained by adding s to each of the components of this <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="746" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="746" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4599a590d5a29a6f59ccdb2447d01c56" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::coarsen</definition>
        <argsstring>(const IntVect &amp;p, int s) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> that is the component-wise integer projection of p by s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="758" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="758" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab40c08462a3a929ed2c8025f49302aeb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::coarsen</definition>
        <argsstring>(const IntVect &amp;p1, const IntVect &amp;p2) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Returns an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> which is the component-wise integer projection of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> p1 by <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> p2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="773" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="773" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adfc791fe29b7108a57b8af1f44a0c7f5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::refine</definition>
        <argsstring>(Dim3 const &amp;coarse, IntVect const &amp;ratio) noexcept</argsstring>
        <name>refine</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>coarse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="781" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="781" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a41d0c56a7f130f1ccbbd99e593c06cd5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::coarsen</definition>
        <argsstring>(Dim3 const &amp;fine, IntVect const &amp;ratio) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="793" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="793" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afee333c49bcfdf12a3ccc051cd2f7406" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::Loop</definition>
        <argsstring>(Dim3 lo, Dim3 hi, F &amp;&amp;f) noexcept</argsstring>
        <name>Loop</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>hi</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="11" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="11" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3f6b859472e6d504884b800a36bb9adf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::Loop</definition>
        <argsstring>(Dim3 lo, Dim3 hi, int ncomp, F &amp;&amp;f) noexcept</argsstring>
        <name>Loop</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="22" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="22" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0ae2c3cb59e9cd9a180504ebc4d75546" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::LoopConcurrent</definition>
        <argsstring>(Dim3 lo, Dim3 hi, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopConcurrent</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>hi</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="34" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="34" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7386d84016866de8cf910014ed477363" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::LoopConcurrent</definition>
        <argsstring>(Dim3 lo, Dim3 hi, int ncomp, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopConcurrent</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="46" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="46" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab47a3b98bcd26d509fba9e831d218d33" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::Loop</definition>
        <argsstring>(Box const &amp;bx, F &amp;&amp;f) noexcept</argsstring>
        <name>Loop</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="59" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="59" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0958f5bfc610a207d30ce2a5a8446f98" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::Loop</definition>
        <argsstring>(Box const &amp;bx, int ncomp, F &amp;&amp;f) noexcept</argsstring>
        <name>Loop</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="72" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="72" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a86a9269548418748728a046fdd5d2f92" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::LoopConcurrent</definition>
        <argsstring>(Box const &amp;bx, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopConcurrent</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="86" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="86" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9b4cf9e6c81ef6af475cb7f7d1ed76b6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::LoopConcurrent</definition>
        <argsstring>(Box const &amp;bx, int ncomp, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopConcurrent</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="100" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="100" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9d2e38bd2809143536efe0db90492957" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::LoopOnCpu</definition>
        <argsstring>(Dim3 lo, Dim3 hi, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopOnCpu</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>hi</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="119" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="119" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adf326f0f9706c94bc4e0376238c8beee" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::LoopOnCpu</definition>
        <argsstring>(Dim3 lo, Dim3 hi, int ncomp, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopOnCpu</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="129" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="129" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abdd5d7a3b382bc1d21220946d7084839" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::LoopConcurrentOnCpu</definition>
        <argsstring>(Dim3 lo, Dim3 hi, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopConcurrentOnCpu</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>hi</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="140" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="140" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adcbb2603675205d10dc69e70404ee4f6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::LoopConcurrentOnCpu</definition>
        <argsstring>(Dim3 lo, Dim3 hi, int ncomp, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopConcurrentOnCpu</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>lo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>hi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="151" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="151" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a04802278f1954f916305464fff130fc3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::LoopOnCpu</definition>
        <argsstring>(Box const &amp;bx, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopOnCpu</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="163" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="163" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1551964168679946c4e1825f12f8648c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::LoopOnCpu</definition>
        <argsstring>(Box const &amp;bx, int ncomp, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopOnCpu</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="175" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="175" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a83f44aadfc943e0bc4597817d756df99" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::LoopConcurrentOnCpu</definition>
        <argsstring>(Box const &amp;bx, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopConcurrentOnCpu</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="188" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="188" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a52c29366dbc78b45ef499814cba35206" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::LoopConcurrentOnCpu</definition>
        <argsstring>(Box const &amp;bx, int ncomp, F &amp;&amp;f) noexcept</argsstring>
        <name>LoopConcurrentOnCpu</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" line="201" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Loop.H" bodystart="201" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1disabled_1ab5317e33b0a4c8a91cefb704d2a60f6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> double</type>
        <definition>AMREX_GPU_HOST_DEVICE double amrex::disabled::abs</definition>
        <argsstring>(double)</argsstring>
        <name>abs</name>
        <param>
          <type>double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="23" column="34" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" declline="23" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1disabled_1aceb0a2fafed413cd99b5e79f954aa723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> float</type>
        <definition>AMREX_GPU_HOST_DEVICE float amrex::disabled::abs</definition>
        <argsstring>(float)</argsstring>
        <name>abs</name>
        <param>
          <type>float</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="24" column="33" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" declline="24" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1disabled_1a06556adef1343823eb8f3add01f1dc96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> long double</type>
        <definition>AMREX_GPU_HOST_DEVICE long double amrex::disabled::abs</definition>
        <argsstring>(long double)</argsstring>
        <name>abs</name>
        <param>
          <type>long double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="25" column="39" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" declline="25" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1disabled_1a0d57b1b25d1b53052c080fe847e40acd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::disabled::abs</definition>
        <argsstring>(int)</argsstring>
        <name>abs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="26" column="31" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" declline="26" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1disabled_1ae4f20d81eb8a87b5fdcfd50bfd6ef6ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> long</type>
        <definition>AMREX_GPU_HOST_DEVICE long amrex::disabled::abs</definition>
        <argsstring>(long)</argsstring>
        <name>abs</name>
        <param>
          <type>long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="27" column="32" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" declline="27" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1disabled_1a8b565c4d58a622a606eb0db1276b6669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> long long</type>
        <definition>AMREX_GPU_HOST_DEVICE long long amrex::disabled::abs</definition>
        <argsstring>(long long)</argsstring>
        <name>abs</name>
        <param>
          <type>long long</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="28" column="37" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" declline="28" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a92b62b2e393693e759cc2c4fec860c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const MemProfiler::Bytes &amp;bytes)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MemProfiler_1_1Bytes" kindref="compound">MemProfiler::Bytes</ref> &amp;</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MemProfiler.cpp" line="330" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MemProfiler.cpp" bodystart="331" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac3c395681af12cfb805dd6eb440b68cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const MemProfiler::Builds &amp;builds)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MemProfiler_1_1Builds" kindref="compound">MemProfiler::Builds</ref> &amp;</type>
          <declname>builds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MemProfiler.cpp" line="360" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MemProfiler.cpp" bodystart="361" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4b0d01afec5218e25096773af48821bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::InterpAddBox</definition>
        <argsstring>(MultiFabCopyDescriptor &amp;fabCopyDesc, BoxList *returnUnfilledBoxes, Vector&lt; FillBoxId &gt; &amp;returnedFillBoxIds, const Box &amp;subbox, MultiFabId faid1, MultiFabId faid2, Real t1, Real t2, Real t, int src_comp, int dest_comp, int num_comp, bool extrap)</argsstring>
        <name>InterpAddBox</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFabCopyDescriptor" kindref="compound">MultiFabCopyDescriptor</ref> &amp;</type>
          <declname>fabCopyDesc</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> *</type>
          <declname>returnUnfilledBoxes</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FillBoxId" kindref="compound">FillBoxId</ref> &gt; &amp;</type>
          <declname>returnedFillBoxIds</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>subbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a270e267cbd0e472dd8297d46a9c76854" kindref="member">MultiFabId</ref></type>
          <declname>faid1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a270e267cbd0e472dd8297d46a9c76854" kindref="member">MultiFabId</ref></type>
          <declname>faid2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFCopyDescriptor.cpp" line="13" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFCopyDescriptor.cpp" bodystart="13" bodyend="74" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFCopyDescriptor.H" declline="15" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aabdb646a3159210a31ec8dc806eaf7bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::InterpFillFab</definition>
        <argsstring>(MultiFabCopyDescriptor &amp;fabCopyDesc, const Vector&lt; FillBoxId &gt; &amp;fillBoxIds, MultiFabId faid1, MultiFabId faid2, FArrayBox &amp;dest, Real t1, Real t2, Real t, int src_comp, int dest_comp, int num_comp, bool extrap)</argsstring>
        <name>InterpFillFab</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFabCopyDescriptor" kindref="compound">MultiFabCopyDescriptor</ref> &amp;</type>
          <declname>fabCopyDesc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FillBoxId" kindref="compound">FillBoxId</ref> &gt; &amp;</type>
          <declname>fillBoxIds</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a270e267cbd0e472dd8297d46a9c76854" kindref="member">MultiFabId</ref></type>
          <declname>faid1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a270e267cbd0e472dd8297d46a9c76854" kindref="member">MultiFabId</ref></type>
          <declname>faid2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dest_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>extrap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFCopyDescriptor.cpp" line="77" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFCopyDescriptor.cpp" bodystart="77" bodyend="126" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFCopyDescriptor.H" declline="29" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab482b500359e03b77389d42f968c46fe" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::TilingIfNotGPU</definition>
        <argsstring>() noexcept</argsstring>
        <name>TilingIfNotGPU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="12" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="12" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6a1aa0c151c5fe560ebb86c99194bfc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::isMFIterSafe</definition>
        <argsstring>(const FabArrayBase &amp;x, const FabArrayBase &amp;y)</argsstring>
        <name>isMFIterSafe</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is it safe to have these two MultiFabs in the same MFiter? True means safe; false means maybe. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" line="211" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFIter.H" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad60aac176908ba51373d63ca49bef063" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GccPlacaterMF</definition>
        <argsstring>()</argsstring>
        <name>GccPlacaterMF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" line="683" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFab.H" bodystart="683" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad64dcd62b16d9022d914f067d30d7918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_node_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;cc, int dcomp, const MultiFab &amp;nd, int scomp, int ncomp, int ngrow=0)</argsstring>
        <name>average_node_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>nd</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Average nodal-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="58" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="58" bodyend="91" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="18" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a78f180e5d6b1326d28084aa66f23d184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_edge_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;cc, int dcomp, const Vector&lt; const MultiFab * &gt; &amp;edge, int ngrow)</argsstring>
        <name>average_edge_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>edge</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Average edge-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. This fills in ngrow ghost cells in the cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. Both cell centered and edge centered MultiFabs need to have ngrow ghost values </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="93" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="93" bodyend="135" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="25" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a95f27241ad83b39ffc015be064f382e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_face_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;cc, int dcomp, const Vector&lt; const MultiFab * &gt; &amp;fc, int ngrow=0)</argsstring>
        <name>average_face_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Average face-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="137" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="137" bodyend="143" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="30" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abdb4a7a5967743f8bce82ac78128963d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_face_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;cc, const Vector&lt; const MultiFab * &gt; &amp;fc, const Geometry &amp;geom)</argsstring>
        <name>average_face_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="145" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="145" bodyend="152" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="40" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5c1981b67416871bbb9ea30a9de5bbcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_face_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;cc, const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fc, const Geometry &amp;geom)</argsstring>
        <name>average_face_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="154" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="154" bodyend="212" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="43" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab843405531b26d824c1133128452afcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_cellcenter_to_face</definition>
        <argsstring>(const Vector&lt; MultiFab * &gt; &amp;fc, const MultiFab &amp;cc, const Geometry &amp;geom, int ncomp=1, bool use_harmonic_averaging=false)</argsstring>
        <name>average_cellcenter_to_face</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_harmonic_averaging</declname>
        </param>
        <briefdescription>
<para>Average cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto face-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="214" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="214" bodyend="219" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="48" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a81eb35454a0283290bc8e7e5da0a80f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_cellcenter_to_face</definition>
        <argsstring>(const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;fc, const MultiFab &amp;cc, const Geometry &amp;geom, int ncomp, bool use_harmonic_averaging)</argsstring>
        <name>average_cellcenter_to_face</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_harmonic_averaging</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="222" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="222" bodyend="306" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="53" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a21e594569f8a9ba321155a5ecd7ce4ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, const Geometry &amp;fgeom, const Geometry &amp;cgeom, int scomp, int ncomp, int rr)</argsstring>
        <name>average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="313" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="313" bodyend="318" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="126" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a62368c6c303e36dc51ded56d7881920e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, const Geometry &amp;fgeom, const Geometry &amp;cgeom, int scomp, int ncomp, const IntVect &amp;ratio)</argsstring>
        <name>average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fine_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>crse_geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Average fine cell-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> using volume-weighting. This routine DOES NOT assume that the crse <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is a coarsened version of the fine <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="320" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="320" bodyend="390" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="123" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab67331acff75bf2840f409750b1ada66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::sum_fine_to_coarse</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, int scomp, int ncomp, const IntVect &amp;ratio, const Geometry &amp;cgeom, const Geometry &amp;)</argsstring>
        <name>sum_fine_to_coarse</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_Fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a coarsened version of the data contained in the S_fine <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> to S_crse, including ghost cells. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="392" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="392" bodyend="443" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="142" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a84e55e433b2972354d98a0684f7f1394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down_edges</definition>
        <argsstring>(const Vector&lt; const MultiFab * &gt; &amp;fine, const Vector&lt; MultiFab * &gt; &amp;crse, const IntVect &amp;ratio, int ngcrse=0)</argsstring>
        <name>average_down_edges</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
<para>Average fine edge-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse edge-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Average fine edge-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse edge-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. This routine assumes that the crse <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is a coarsened version of the fine <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="447" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="447" bodyend="454" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="98" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3d6739058267b9ba2aed9936247f49fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down_edges</definition>
        <argsstring>(const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fine, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;crse, const IntVect &amp;ratio, int ngcrse)</argsstring>
        <name>average_down_edges</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="456" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="456" bodyend="464" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="102" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab744a797b85135257add34a49c96c734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::average_down_edges</definition>
        <argsstring>(const MultiFab &amp;fine, MultiFab &amp;crse, const IntVect &amp;ratio, int ngcrse)</argsstring>
        <name>average_down_edges</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This version does average down for one direction. It uses the <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> of MultiFabs to determine the direction. It is expected that one direction is cell-centered and the rest are nodal. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="466" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="466" bodyend="522" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="109" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af9853b376b9431740468fdf9e549553d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::print_state</definition>
        <argsstring>(const MultiFab &amp;mf, const IntVect &amp;cell, const int n=-1, const IntVect &amp;ng=IntVect::TheZeroVector())</argsstring>
        <name>print_state</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
<para>Output state data for a single zone. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="524" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="524" bodyend="527" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="148" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a78ee47545ca66e809f4f680e7513cbd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeFabs</definition>
        <argsstring>(const MultiFab &amp;mf, const std::string &amp;name)</argsstring>
        <name>writeFabs</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Write each fab individually. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="529" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="529" bodyend="532" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="152" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa9f903b417da5fb1d02ea65d0bbf8934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeFabs</definition>
        <argsstring>(const MultiFab &amp;mf, int comp, int ncomp, const std::string &amp;name)</argsstring>
        <name>writeFabs</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="534" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="534" bodyend="540" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="153" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6ca286511a003d2770dba9c37ab53c94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref></type>
        <definition>MultiFab amrex::ToMultiFab</definition>
        <argsstring>(const iMultiFab &amp;imf)</argsstring>
        <name>ToMultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>imf</declname>
        </param>
        <briefdescription>
<para>Convert <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> to <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="542" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="542" bodyend="545" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="200" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae062fb7f904c1f39327797d8c3fea414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; Long &gt; &gt;</type>
        <definition>FabArray&lt; BaseFab&lt; Long &gt; &gt; amrex::ToLongMultiFab</definition>
        <argsstring>(const iMultiFab &amp;imf)</argsstring>
        <name>ToLongMultiFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>imf</declname>
        </param>
        <briefdescription>
<para>Convert <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> to Long. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="547" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="547" bodyend="550" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="202" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3a431197f206b148529308a7796d5039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; MultiFab &gt; amrex::get_slice_data</definition>
        <argsstring>(int dir, Real coord, const MultiFab &amp;cc, const Geometry &amp;geom, int start_comp, int ncomp, bool interpolate)</argsstring>
        <name>get_slice_data</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>coord</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fstart</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>interpolate</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract a slice from the given cell-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> at coordinate &quot;coord&quot; along direction &quot;dir&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="552" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="552" bodyend="595" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="157" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af97d55742a96cb9e934e06c45ec22f03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref></type>
        <definition>iMultiFab amrex::makeFineMask</definition>
        <argsstring>(const BoxArray &amp;cba, const DistributionMapping &amp;cdm, const BoxArray &amp;fba, const IntVect &amp;ratio, int crse_value, int fine_value)</argsstring>
        <name>makeFineMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>cba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>cdm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_value</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="597" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="597" bodyend="603" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="168" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a549567bbb4fc6d2e53d5a0c03fe62a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::makeFineMask_doit</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;mask, const BoxArray &amp;fba, const IntVect &amp;ratio, Periodicity const &amp;period, typename FAB::value_type crse_value, typename FAB::value_type fine_value)</argsstring>
        <name>makeFineMask_doit</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> const &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>typename FAB::value_type</type>
          <declname>crse_value</declname>
        </param>
        <param>
          <type>typename FAB::value_type</type>
          <declname>fine_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="606" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="606" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abe90237191ad363f7f9dd34c2ac0ebcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref></type>
        <definition>iMultiFab amrex::makeFineMask</definition>
        <argsstring>(const BoxArray &amp;cba, const DistributionMapping &amp;cdm, const IntVect &amp;cnghost, const BoxArray &amp;fba, const IntVect &amp;ratio, Periodicity const &amp;period, int crse_value, int fine_value)</argsstring>
        <name>makeFineMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>cba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>cdm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>cnghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> const &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_value</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="659" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="659" bodyend="666" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="174" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac54193c21e9f609ad488d3cb074dfeef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref></type>
        <definition>MultiFab amrex::makeFineMask</definition>
        <argsstring>(const BoxArray &amp;cba, const DistributionMapping &amp;cdm, const BoxArray &amp;fba, const IntVect &amp;ratio, Real crse_value, Real fine_value)</argsstring>
        <name>makeFineMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>cba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>cdm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>crse_value</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fine_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="668" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="668" bodyend="675" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="187" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab36700aa1e60f78cbb544a7593de37af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::computeDivergence</definition>
        <argsstring>(MultiFab &amp;divu, const Array&lt; MultiFab const  *, AMREX_SPACEDIM &gt; &amp;umac, const Geometry &amp;geom)</argsstring>
        <name>computeDivergence</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>umac</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>Computes divergence of face-data stored in the umac <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="677" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="677" bodyend="727" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="192" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af1f7462a23b5cde85daacbd1d3a357f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::computeGradient</definition>
        <argsstring>(MultiFab &amp;grad, const Array&lt; MultiFab const  *, AMREX_SPACEDIM &gt; &amp;umac, const Geometry &amp;geom)</argsstring>
        <name>computeGradient</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>grad</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>umac</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>Computes gradient of face-data stored in the umac <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="729" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="729" bodyend="776" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="196" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a48b0e0bc9bd17bdcba18aa237718737f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref></type>
        <definition>MultiFab amrex::periodicShift</definition>
        <argsstring>(MultiFab const  &amp;mf, IntVect const  &amp;offset, Periodicity const  &amp;period)</argsstring>
        <name>periodicShift</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> const &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Periodic shift <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="778" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="778" bodyend="799" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="205" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a882a700cf7fab66ee3ce8de37de3ef73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1_1Gpu_1a337aceb06d1f93486e6593ff058c0a93" kindref="member">Gpu::HostVector</ref>&lt; Real &gt;</type>
        <definition>Gpu::HostVector&lt; Real &gt; amrex::sumToLine</definition>
        <argsstring>(MultiFab const  &amp;mf, int icomp, int ncomp, Box const  &amp;domain, int direction, bool local=false)</argsstring>
        <name>sumToLine</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>direction</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Sum <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> data to line. </para>
        </briefdescription>
        <detaileddescription>
<para>Return a HostVector that contains the sum of the given <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> data in the plane with the given normal direction. The size of the vector is domain.length(direction) x ncomp. The vector is actually a 2D array, where the element for component icomp at spatial index k is at [icomp*ncomp+k].</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> data for summing </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icomp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>number of components </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>domain</parametername>
</parameternamelist>
<parameterdescription>
<para>the domain </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>the direction of the line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>If false, reduce across MPI processes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="802" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="802" bodyend="941" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="245" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5daadefeacaedc115d9a284241da21cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::volumeWeightedSum</definition>
        <argsstring>(Vector&lt; MultiFab const  * &gt; const  &amp;mf, int icomp, Vector&lt; Geometry &gt; const  &amp;geom, Vector&lt; IntVect &gt; const  &amp;ratio, bool local=false)</argsstring>
        <name>volumeWeightedSum</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const * &gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; const &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Volume weighted sum for a vector of MultiFabs. </para>
        </briefdescription>
        <detaileddescription>
<para>Return a volume weighted sum of MultiFabs of AMR data. The sum is perform on a single component of the data. If the MultiFabs are built with EB Factories, the cut cell volume fraction will be included in the weight. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="943" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="943" bodyend="1095" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="255" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adde5cec8cf83a5e5970cf61cd12e6bb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FourthOrderInterpFromFineToCoarse</definition>
        <argsstring>(MultiFab &amp;cmf, int scomp, int ncomp, MultiFab const  &amp;fmf, IntVect const  &amp;ratio)</argsstring>
        <name>FourthOrderInterpFromFineToCoarse</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const &amp;</type>
          <declname>fmf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Fourth-order interpolation from fine to coarse level. </para>
        </briefdescription>
        <detaileddescription>
<para>This is for high-order &quot;average-down&quot; of finite-difference data. If ghost cell data are used, it&apos;s the caller&apos;s responsibility to fill the ghost cells before calling this function.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmf</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scomp</parametername>
</parameternamelist>
<parameterdescription>
<para>starting component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>number of component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmf</parametername>
</parameternamelist>
<parameterdescription>
<para>fine data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>refinement ratio. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" line="1097" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.cpp" bodystart="1097" bodyend="1182" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="273" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad4e5fca4f820c83a5c237daf08f9b4a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CMF</type>
          </param>
          <param>
            <type>typename FMF</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsFabArray_v&lt; CMF &gt; &amp;&amp;IsFabArray_v&lt; FMF &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::average_face_to_cellcenter</definition>
        <argsstring>(CMF &amp;cc, int dcomp, const Array&lt; const FMF *, AMREX_SPACEDIM &gt; &amp;fc, int ngrow=0)</argsstring>
        <name>average_face_to_cellcenter</name>
        <param>
          <type>CMF &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const FMF *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="647" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="647" bodyend="708" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="36" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a444e92d4213a53739768571a4bb72ce3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::average_down_faces</definition>
        <argsstring>(const Vector&lt; const MF * &gt; &amp;fine, const Vector&lt; MF * &gt; &amp;crse, const IntVect &amp;ratio, int ngcrse=0)</argsstring>
        <name>average_down_faces</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const MF * &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF * &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Average fine face-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse face-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="711" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="711" bodyend="721" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="61" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac0212832fb955bf32b6ce4cb2779c930" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::average_down_faces</definition>
        <argsstring>(const Vector&lt; const MF * &gt; &amp;fine, const Vector&lt; MF * &gt; &amp;crse, int ratio, int ngcrse=0)</argsstring>
        <name>average_down_faces</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const MF * &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF * &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="724" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="724" bodyend="728" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="66" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1fef73f693345a09f5a9d945f6fa4aa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::average_down_faces</definition>
        <argsstring>(const Array&lt; const MF *, AMREX_SPACEDIM &gt; &amp;fine, const Array&lt; MF *, AMREX_SPACEDIM &gt; &amp;crse, const IntVect &amp;ratio, int ngcrse=0)</argsstring>
        <name>average_down_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const MF *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="739" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="739" bodyend="746" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="71" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a330b95248c1940f21fb9d1260610b07e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::average_down_faces</definition>
        <argsstring>(const Array&lt; const MF *, AMREX_SPACEDIM &gt; &amp;fine, const Array&lt; MF *, AMREX_SPACEDIM &gt; &amp;crse, int ratio, int ngcrse=0)</argsstring>
        <name>average_down_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const MF *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="731" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="731" bodyend="736" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="76" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1bc63dedd63a3c820e4527fd4d6cac6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::average_down_faces</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;fine, FabArray&lt; FAB &gt; &amp;crse, const IntVect &amp;ratio, int ngcrse=0)</argsstring>
        <name>average_down_faces</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This version does average down for one direction. It uses the <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> of MultiFabs to determine the direction. It is expected that one direction is nodal and the rest are cell-centered. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="749" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="749" bodyend="806" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="84" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af5cd832fa513266e3840b39486d9b1e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::average_down_faces</definition>
        <argsstring>(const Array&lt; const MF *, AMREX_SPACEDIM &gt; &amp;fine, const Array&lt; MF *, AMREX_SPACEDIM &gt; &amp;crse, const IntVect &amp;ratio, const Geometry &amp;crse_geom)</argsstring>
        <name>average_down_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const MF *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>crse_geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="809" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="809" bodyend="816" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="89" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8d23f273421b89ddf32a809cba7bdaef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::average_down_faces</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;fine, FabArray&lt; FAB &gt; &amp;crse, const IntVect &amp;ratio, const Geometry &amp;crse_geom)</argsstring>
        <name>average_down_faces</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>crse_geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="819" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="819" bodyend="826" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="94" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aff7bc26e4e82b323802d4b6d546101fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::average_down_nodal</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;S_fine, FabArray&lt; FAB &gt; &amp;S_crse, const IntVect &amp;ratio, int ngcrse=0, bool mfiter_is_definitely_safe=false)</argsstring>
        <name>average_down_nodal</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>S_fine</declname>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>S_crse</declname>
          <defname>crse</defname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>mfiter_is_definitely_safe</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Average fine node-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse node-centered <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Average fine node-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse node-based <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. This routine assumes that the crse <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is a coarsened version of the fine <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="338" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="338" bodyend="372" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="114" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5eed60d257307d60b712f3d5ffd7cf49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::average_down</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;S_fine, FabArray&lt; FAB &gt; &amp;S_crse, int scomp, int ncomp, const IntVect &amp;ratio)</argsstring>
        <name>average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Average <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> onto crse <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> without volume weighting. This routine DOES NOT assume that the crse <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is a coarsened version of the fine <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. Work for both cell-centered and nodal MultiFabs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="386" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="386" bodyend="509" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="134" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae0873a3009541cadcf5a417efc0603ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::average_down</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;S_fine, FabArray&lt; FAB &gt; &amp;S_crse, int scomp, int ncomp, int ratio)</argsstring>
        <name>average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="380" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="380" bodyend="383" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="137" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a60886a6799fb7ae612bf30d74a493a26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref></type>
        <definition>iMultiFab amrex::makeFineMask</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;cmf, const BoxArray &amp;fba, const IntVect &amp;ratio, int crse_value=0, int fine_value=1)</argsstring>
        <name>makeFineMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_value</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_value</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return an <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> that has the same <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> as the coarse <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> cmf. Cells covered by the coarsened fine grids are set to fine_value, whereas other cells are set to crse_value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="282" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="282" bodyend="287" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="166" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a78142d53611f8627f6d68afd0779ef54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref></type>
        <definition>iMultiFab amrex::makeFineMask</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;cmf, const BoxArray &amp;fba, const IntVect &amp;ratio, Periodicity const &amp;period, int crse_value, int fine_value)</argsstring>
        <name>makeFineMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> const &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_value</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="291" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="291" bodyend="296" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="172" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a478148eaeebd74ddc7956806c55fa2cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref></type>
        <definition>iMultiFab amrex::makeFineMask</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;cmf, const FabArray&lt; FAB &gt; &amp;fmf, const IntVect &amp;cnghost, const IntVect &amp;ratio, Periodicity const &amp;period, int crse_value, int fine_value)</argsstring>
        <name>makeFineMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>cnghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> const &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_value</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="300" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="300" bodyend="313" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="178" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af559f21584872566541db61cbacf7470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref></type>
        <definition>iMultiFab amrex::makeFineMask</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;cmf, const FabArray&lt; FAB &gt; &amp;fmf, const IntVect &amp;cnghost, const IntVect &amp;ratio, Periodicity const &amp;period, int crse_value, int fine_value, LayoutData&lt; int &gt; &amp;has_cf)</argsstring>
        <name>makeFineMask</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>cmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fmf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>cnghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> const &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_value</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_value</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1LayoutData" kindref="compound">LayoutData</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>has_cf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="317" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="317" bodyend="333" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" declline="182" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a24aa5b51c299dd1337df192681f47e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::cast</definition>
        <argsstring>(U const &amp;mf_in)</argsstring>
        <name>cast</name>
        <param>
          <type>U const &amp;</type>
          <declname>mf_in</declname>
        </param>
        <briefdescription>
<para>example: auto mf = amrex::cast&lt;MultiFab&gt;(imf); </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="210" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="210" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac69a4b4233f10007191d780450271dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>Real</type>
        <definition>Real amrex::NormHelper</definition>
        <argsstring>(const MultiFab &amp;x, int xcomp, const MultiFab &amp;y, int ycomp, F &amp;&amp;f, int numcomp, IntVect nghost, bool local)</argsstring>
        <name>NormHelper</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ycomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
        </param>
        <briefdescription>
<para>Returns part of a norm based on two MultiFabs The MultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. The function f is applied elementwise as f(x(i,j,k,n),y(i,j,k,n)) inside the summation (subject to a valid mask entry pf(mask(i,j,k,n) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="524" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="524" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acb97a3146147b46c55e4aacdbba0dc77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MMF</type>
          </param>
          <param>
            <type>typename Pred</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>Real</type>
        <definition>Real amrex::NormHelper</definition>
        <argsstring>(const MMF &amp;mask, const MultiFab &amp;x, int xcomp, const MultiFab &amp;y, int ycomp, Pred &amp;&amp;pf, F &amp;&amp;f, int numcomp, IntVect nghost, bool local)</argsstring>
        <name>NormHelper</name>
        <param>
          <type>const MMF &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xcomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ycomp</declname>
        </param>
        <param>
          <type>Pred &amp;&amp;</type>
          <declname>pf</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>numcomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
        </param>
        <briefdescription>
<para>Returns part of a norm based on three MultiFabs The MultiFabs MUST have the same underlying <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. The Predicate pf is used to test the mask The function f is applied elementwise as f(x(i,j,k,n),y(i,j,k,n)) inside the summation (subject to a valid mask entry pf(mask(i,j,k,n) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" line="584" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="584" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9904cb709f0cc1096942b2799924eec4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avg_nd_to_cc</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; Real &gt; const &amp;cc, Array4&lt; Real const &gt; const &amp;nd, int cccomp, int ndcomp) noexcept</argsstring>
        <name>amrex_avg_nd_to_cc</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>nd</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ndcomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="14" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="14" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac4c137e801c2f8827b3dfecce9101a9b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avg_eg_to_cc</definition>
        <argsstring>(int i, int, int, Array4&lt; Real &gt; const &amp;cc, Array4&lt; Real const &gt; const &amp;Ex, int cccomp) noexcept</argsstring>
        <name>amrex_avg_eg_to_cc</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>Ex</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cccomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="23" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="23" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a26f3d534390662f8ae6bd77b550e54dc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CT</type>
          </param>
          <param>
            <type>typename FT</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avg_fc_to_cc</definition>
        <argsstring>(int i, int, int, Array4&lt; CT &gt; const &amp;cc, Array4&lt; FT const &gt; const &amp;fx, int cccomp, GeometryData const &amp;gd) noexcept</argsstring>
        <name>amrex_avg_fc_to_cc</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; CT &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; FT const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cccomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GeometryData" kindref="compound">GeometryData</ref> const &amp;</type>
          <declname>gd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="33" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="33" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5f54d03612f4bca257af260e16dc37f0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avg_cc_to_fc</definition>
        <argsstring>(int i, int, int, int n, Box const &amp;xbx, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;cc, GeometryData const &amp;gd, bool use_harmonic_averaging) noexcept</argsstring>
        <name>amrex_avg_cc_to_fc</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>xbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GeometryData" kindref="compound">GeometryData</ref> const &amp;</type>
          <declname>gd</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_harmonic_averaging</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="75" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="75" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4c74be21c5dff00c88782858a813cb9f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avgdown_faces</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; T &gt; const &amp;crse, Array4&lt; T const &gt; const &amp;fine, int ccomp, int fcomp, int ncomp, IntVect const &amp;ratio, int) noexcept</argsstring>
        <name>amrex_avgdown_faces</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>idir</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="130" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="130" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a89fbc6eaecafa9e4d17df78b4ab0da17" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avgdown_faces</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; T &gt; const &amp;crse, Array4&lt; T const &gt; const &amp;fine, int ccomp, int fcomp, IntVect const &amp;ratio, int) noexcept</argsstring>
        <name>amrex_avgdown_faces</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>idir</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="149" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="149" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa16a357bfbf75a90cc06faf36cffe268" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avgdown_edges</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;crse, Array4&lt; Real const &gt; const &amp;fine, int ccomp, int fcomp, int ncomp, IntVect const &amp;ratio, int) noexcept</argsstring>
        <name>amrex_avgdown_edges</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>idir</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="157" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="157" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4af58d1ed1db1299d88bab26b250b504" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avgdown_edges</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; Real &gt; const &amp;crse, Array4&lt; Real const &gt; const &amp;fine, int ccomp, int fcomp, IntVect const &amp;ratio, int) noexcept</argsstring>
        <name>amrex_avgdown_edges</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>idir</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="180" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="180" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac657b202a77b0a3e8d6313ea5e9316af" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avgdown</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; T &gt; const &amp;crse, Array4&lt; T const &gt; const &amp;fine, int ccomp, int fcomp, int ncomp, IntVect const &amp;ratio) noexcept</argsstring>
        <name>amrex_avgdown</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="195" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="195" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a108fe9fcd30851ff1986f4d4588f5adc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avgdown</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; T &gt; const &amp;crse, Array4&lt; T const &gt; const &amp;fine, int ccomp, int fcomp, IntVect const &amp;ratio) noexcept</argsstring>
        <name>amrex_avgdown</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="220" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="220" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a73105d96fa345efe695b754359eacc4b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avgdown_with_vol</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; T &gt; const &amp;crse, Array4&lt; T const &gt; const &amp;fine, Array4&lt; T const &gt; const &amp;fv, int ccomp, int fcomp, IntVect const &amp;ratio) noexcept</argsstring>
        <name>amrex_avgdown_with_vol</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>fv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="236" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="236" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af571eb63b15d9531a1a6d8eb9c703785" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avgdown_nodes</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; T &gt; const &amp;crse, Array4&lt; T const &gt; const &amp;fine, int ccomp, int fcomp, int ncomp, IntVect const &amp;ratio) noexcept</argsstring>
        <name>amrex_avgdown_nodes</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="253" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="253" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a22c4f54ca2715e093218b8c504cd9a73" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avgdown_nodes</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; T &gt; const &amp;crse, Array4&lt; T const &gt; const &amp;fine, int ccomp, int fcomp, IntVect const &amp;ratio) noexcept</argsstring>
        <name>amrex_avgdown_nodes</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="273" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="273" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aab340fe16ae43377f8c6951777d3c6e8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_divergence</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;divu, Array4&lt; Real const &gt; const &amp;u, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>amrex_compute_divergence</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="282" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="282" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afa6d2d0c832d99397a5807b2a955d64a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_gradient</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;grad, Array4&lt; Real const &gt; const &amp;u, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>amrex_compute_gradient</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>grad</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" line="300" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_1D_C.H" bodystart="300" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a366f59cfa601b5f9ba1c83fa456f01c5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avg_eg_to_cc</definition>
        <argsstring>(int i, int j, int, Array4&lt; Real &gt; const &amp;cc, Array4&lt; Real const &gt; const &amp;Ex, Array4&lt; Real const &gt; const &amp;Ey, int cccomp) noexcept</argsstring>
        <name>amrex_avg_eg_to_cc</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>Ex</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>Ey</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cccomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="23" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="23" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a695cf6320aa3bb1e2aaa1394860db691" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CT</type>
          </param>
          <param>
            <type>typename FT</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avg_fc_to_cc</definition>
        <argsstring>(int i, int j, int, Array4&lt; CT &gt; const &amp;cc, Array4&lt; FT const &gt; const &amp;fx, Array4&lt; FT const &gt; const &amp;fy, int cccomp) noexcept</argsstring>
        <name>amrex_avg_fc_to_cc</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; CT &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; FT const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; FT const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cccomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="35" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="35" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3d140f2a232c48d57a9ddae57a51d3ac" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avg_cc_to_fc</definition>
        <argsstring>(int i, int j, int, int n, Box const &amp;xbx, Box const &amp;ybx, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;cc, bool use_harmonic_averaging) noexcept</argsstring>
        <name>amrex_avg_cc_to_fc</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>xbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ybx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_harmonic_averaging</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="46" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="46" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac094c7f6f35727205b4986aae651c761" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avgdown_with_vol</definition>
        <argsstring>(int i, int j, int, int n, Array4&lt; Real &gt; const &amp;crse, Array4&lt; Real const &gt; const &amp;fine, Array4&lt; Real const &gt; const &amp;fv, int ccomp, int fcomp, IntVect const &amp;ratio) noexcept</argsstring>
        <name>amrex_avgdown_with_vol</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="328" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="328" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7bc9df03a7f950928f84f200ea52dd33" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_divergence</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;divu, Array4&lt; Real const &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;v, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>amrex_compute_divergence</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="348" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="348" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab0e6c8420ed7a23a8f6e31d1d2d728c9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_gradient</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;grad, Array4&lt; Real const &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;v, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>amrex_compute_gradient</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>grad</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="371" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="371" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4979a24456c6009e315e62d0f0d1ee66" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_convective_difference</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; amrex::Real &gt; const &amp;diff, Array4&lt; Real const &gt; const &amp;u_face, Array4&lt; Real const &gt; const &amp;v_face, Array4&lt; Real const &gt; const &amp;s_on_x_face, Array4&lt; Real const &gt; const &amp;s_on_y_face, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>amrex_compute_convective_difference</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; amrex::Real &gt; const &amp;</type>
          <declname>diff</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>s_on_x_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>s_on_y_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="392" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="392" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5d1d11eba0d4b53de1431c6ad3d060be" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_divergence_rz</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;divu, Array4&lt; Real const &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;v, Array4&lt; Real const &gt; const &amp;ax, Array4&lt; Real const &gt; const &amp;ay, Array4&lt; Real const &gt; const &amp;vol) noexcept</argsstring>
        <name>amrex_compute_divergence_rz</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ay</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="419" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="419" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a09f44c9c74cb08a19432aa259ebace65" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_gradient_rz</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;grad, Array4&lt; Real const &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;v, Array4&lt; Real const &gt; const &amp;ax, Array4&lt; Real const &gt; const &amp;ay, Array4&lt; Real const &gt; const &amp;vol) noexcept</argsstring>
        <name>amrex_compute_gradient_rz</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>grad</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ay</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" line="443" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_2D_C.H" bodystart="443" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa41060ba2affd9f9e0af483dc0f6adf1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avg_eg_to_cc</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;cc, Array4&lt; Real const &gt; const &amp;Ex, Array4&lt; Real const &gt; const &amp;Ey, Array4&lt; Real const &gt; const &amp;Ez, int cccomp) noexcept</argsstring>
        <name>amrex_avg_eg_to_cc</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>Ex</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>Ey</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>Ez</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cccomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" line="25" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" bodystart="25" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2d5aae08a6994ab934119ad634da8db0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CT</type>
          </param>
          <param>
            <type>typename FT</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avg_fc_to_cc</definition>
        <argsstring>(int i, int j, int k, Array4&lt; CT &gt; const &amp;cc, Array4&lt; FT const &gt; const &amp;fx, Array4&lt; FT const &gt; const &amp;fy, Array4&lt; FT const &gt; const &amp;fz, int cccomp) noexcept</argsstring>
        <name>amrex_avg_fc_to_cc</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; CT &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; FT const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; FT const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; FT const &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cccomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" line="39" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" bodystart="39" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae9ae8b3dc626566b2ae1a8659ae44fb4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_avg_cc_to_fc</definition>
        <argsstring>(int i, int j, int k, int n, Box const &amp;xbx, Box const &amp;ybx, Box const &amp;zbx, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;cc, bool use_harmonic_averaging) noexcept</argsstring>
        <name>amrex_avg_cc_to_fc</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>xbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ybx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>zbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_harmonic_averaging</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" line="52" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" bodystart="52" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6f8556f4e163951fd7c4aa1debf4435e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_divergence</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;divu, Array4&lt; Real const &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;v, Array4&lt; Real const &gt; const &amp;w, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>amrex_compute_divergence</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" line="453" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" bodystart="453" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1884e8cc3ccdbb7eb0608221b4833133" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_gradient</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;grad, Array4&lt; Real const &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;v, Array4&lt; Real const &gt; const &amp;w, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>amrex_compute_gradient</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>grad</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" line="481" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" bodystart="481" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6b6af662717df11ef0cc1122f068e809" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_compute_convective_difference</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;diff, Array4&lt; Real const &gt; const &amp;u_face, Array4&lt; Real const &gt; const &amp;v_face, Array4&lt; Real const &gt; const &amp;w_face, Array4&lt; Real const &gt; const &amp;s_on_x_face, Array4&lt; Real const &gt; const &amp;s_on_y_face, Array4&lt; Real const &gt; const &amp;s_on_z_face, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>amrex_compute_convective_difference</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>diff</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>w_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>s_on_x_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>s_on_y_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>s_on_z_face</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" line="507" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_3D_C.H" bodystart="507" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a02764a19b02ad5aa59766eaba8cde224" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::amrex_fill_slice_interp</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; slice, Array4&lt; Real const &gt; const &amp;full, int scomp, int fcomp, int ncomp, int dir, Real coord, GeometryData const &amp;gd) noexcept</argsstring>
        <name>amrex_fill_slice_interp</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt;</type>
          <declname>slice</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>full</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>coord</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GeometryData" kindref="compound">GeometryData</ref> const &amp;</type>
          <declname>gd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_nd_C.H" line="15" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MultiFabUtil_nd_C.H" bodystart="15" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac38f92b345723f71defea15e208ee644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Orientation &amp;o)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Write to an ostream in ASCII format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.cpp" line="9" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.cpp" bodystart="10" bodyend="17" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" declline="134" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9a0606a9b1a287b48d02aaa194e58c90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Orientation &amp;o)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.cpp" line="25" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.cpp" bodystart="25" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a99b5e66ea694e5ca5a50ee2c335e8678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const ParmParse::PP_entry &amp;pp)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ParmParse_1_1PP__entry" kindref="compound">ParmParse::PP_entry</ref> &amp;</type>
          <declname>pp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParmParse.cpp" line="116" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParmParse.cpp" bodystart="117" bodyend="133" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParmParse.H" declline="1134" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0d4c71dff64b8653b9f679f934b66290" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::unused_table_entries_q</definition>
        <argsstring>(const ParmParse::Table &amp;table, const std::string &amp;prefix=std::string())</argsstring>
        <name>unused_table_entries_q</name>
        <param>
          <type>const <ref refid="classamrex_1_1ParmParse_1aee38792d71e1760bfc55a29a64ef36f5" kindref="member">ParmParse::Table</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParmParse.cpp" line="1130" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParmParse.cpp" bodystart="1130" bodyend="1163"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8975f518b8ac91d8cc884e26a18d7849" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::finalize_table</definition>
        <argsstring>(const std::string &amp;pfx, const ParmParse::Table &amp;table)</argsstring>
        <name>finalize_table</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pfx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ParmParse_1aee38792d71e1760bfc55a29a64ef36f5" kindref="member">ParmParse::Table</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParmParse.cpp" line="1167" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParmParse.cpp" bodystart="1167" bodyend="1191"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4120ab2c1782a28ee17b3f77463c9a2e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::get_entries_under_prefix</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;found_entries, const ParmParse::Table &amp;table, const std::string &amp;prefix, const bool only_unused=false, const bool add_values=false)</argsstring>
        <name>get_entries_under_prefix</name>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>found_entries</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ParmParse_1aee38792d71e1760bfc55a29a64ef36f5" kindref="member">ParmParse::Table</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>only_unused</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>add_values</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParmParse.cpp" line="1230" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParmParse.cpp" bodystart="1230" bodyend="1256"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7537acc612797ae28b7a2f0afd2c9da1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ops</declname>
            <defname>Ops</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename FAB</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename foo</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ReduceData" kindref="compound">ReduceData</ref>&lt; Ts... &gt;::Type</type>
        <definition>ReduceData&lt;Ts...&gt;::Type amrex::ParReduce</definition>
        <argsstring>(TypeList&lt; Ops... &gt; operation_list, TypeList&lt; Ts... &gt; type_list, FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ParReduce</name>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; Ops... &gt;</type>
          <declname>operation_list</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; Ts... &gt;</type>
          <declname>type_list</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Parallel reduce for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This performs reduction over a <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>&apos;s valid and specified ghost regions. For example, the code below computes the minimum of the first <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> and the maximum of the second <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. <verbatim>    auto const&amp; ma1 = mf1.const_arrays();
    auot const&amp; ma2 = mf2.const_arrays();
    GpuTuple&lt;Real,Real&gt; mm = ParReduce(TypeList&lt;ReduceOpMin,ReduceOpMax&gt;{},
                                       TypeList&lt;Real,Real&gt;{},
                                       mf1, mf1.nGrowVect(),
    [=] AMREX_GPU_DEVICE (int box_no, int i, int j, int k) noexcept
        -&gt; GpuTuple&lt;Real,Real&gt;
    {
        return { ma1[box_no](i,j,k), ma2[box_no](i,j,k) };
    });
</verbatim></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Ops...</parametername>
</parameternamelist>
<parameterdescription>
<para>reduce operators (e.g., <ref refid="structamrex_1_1ReduceOpSum" kindref="compound">ReduceOpSum</ref>, <ref refid="structamrex_1_1ReduceOpMin" kindref="compound">ReduceOpMin</ref>, <ref refid="structamrex_1_1ReduceOpMax" kindref="compound">ReduceOpMax</ref>, <ref refid="structamrex_1_1ReduceOpLogicalAnd" kindref="compound">ReduceOpLogicalAnd</ref>, and <ref refid="structamrex_1_1ReduceOpLogicalOr" kindref="compound">ReduceOpLogicalOr</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ts...</parametername>
</parameternamelist>
<parameterdescription>
<para>data types (e.g., Real, int, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FAB</parametername>
</parameternamelist>
<parameterdescription>
<para>MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type like a lambda funcion</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>operation_list</parametername>
</parameternamelist>
<parameterdescription>
<para>list of reduce operators </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_list</parametername>
</parameternamelist>
<parameterdescription>
<para>list of data types </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fa</parametername>
</parameternamelist>
<parameterdescription>
<para>a MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells included in the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object returning GpuTuple&lt;Ts...&gt;. It takes four ints, where the first int is the local box index and the others are spatial indices for x, y, and z-directions.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reduction result (GpuTuple&lt;Ts...&gt;) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParReduce.H" line="47" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParReduce.H" bodystart="47" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abfa262ba247496c6cd85e2e9ae110fbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Op</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename FAB</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename foo</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::ParReduce</definition>
        <argsstring>(TypeList&lt; Op &gt; operation_list, TypeList&lt; T &gt; type_list, FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ParReduce</name>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; Op &gt;</type>
          <declname>operation_list</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; T &gt;</type>
          <declname>type_list</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Parallel reduce for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This performs reduction over a <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>&apos;s valid and specified ghost regions. For example, the code below computes the sum of the processed data in a <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. <verbatim>    auto const&amp; ma = mf.const_arrays();
    Real ektot = ParReduce(TypeList&lt;ReduceOpSum&gt;{}, TypeList&lt;Real&gt;{},
                           mf, IntVect(0),
    [=] AMREX_GPU_DEVICE (int box_no, int i, int j, int k) noexcept
        -&gt; GpuTuple&lt;Real&gt;
    {
        auto rho = ma[box_no](i,j,k,0);
        auto mx = ma[box_no](i,j,k,1);
        auto my = ma[box_no](i,j,k,2);
        auto mz = ma[box_no](i,j,k,3);
        auto ek = (mx*mx+my*my+mz*mz)/(2.*rho);
        return { ek };
    });
</verbatim></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Op</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespaceamrex_1_1Reduce" kindref="compound">Reduce</ref> operator (e.g., <ref refid="structamrex_1_1ReduceOpSum" kindref="compound">ReduceOpSum</ref>, <ref refid="structamrex_1_1ReduceOpMin" kindref="compound">ReduceOpMin</ref>, <ref refid="structamrex_1_1ReduceOpMax" kindref="compound">ReduceOpMax</ref>, <ref refid="structamrex_1_1ReduceOpLogicalAnd" kindref="compound">ReduceOpLogicalAnd</ref>, and <ref refid="structamrex_1_1ReduceOpLogicalOr" kindref="compound">ReduceOpLogicalOr</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>data type (e.g., Real, int, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FAB</parametername>
</parameternamelist>
<parameterdescription>
<para>MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type like a lambda funcion</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>operation_list</parametername>
</parameternamelist>
<parameterdescription>
<para>a reduce operator stored in <ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_list</parametername>
</parameternamelist>
<parameterdescription>
<para>a data type stored in <ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fa</parametername>
</parameternamelist>
<parameterdescription>
<para>a MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells included in the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object returning GpuTuple&lt;T&gt;. It takes four ints, where the first int is the local box index and the others are spatial indices for x, y, and z-directions.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reduction result (T) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParReduce.H" line="97" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParReduce.H" bodystart="97" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0fc422d03a2097b0684162d0684cfda1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ops</declname>
            <defname>Ops</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename FAB</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename foo</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ReduceData" kindref="compound">ReduceData</ref>&lt; Ts... &gt;::Type</type>
        <definition>ReduceData&lt;Ts...&gt;::Type amrex::ParReduce</definition>
        <argsstring>(TypeList&lt; Ops... &gt; operation_list, TypeList&lt; Ts... &gt; type_list, FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, int ncomp, F &amp;&amp;f)</argsstring>
        <name>ParReduce</name>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; Ops... &gt;</type>
          <declname>operation_list</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; Ts... &gt;</type>
          <declname>type_list</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Parallel reduce for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This performs reduction over a <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>&apos;s valid and specified ghost regions and components. For example, the code below computes the minimum of the first <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> and the maximum of the second <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. <verbatim>    auto const&amp; ma1 = mf1.const_arrays();
    auot const&amp; ma2 = mf2.const_arrays();
    GpuTuple&lt;Real,Real&gt; mm = ParReduce(TypeList&lt;ReduceOpMin,ReduceOpMax&gt;{},
                                       TypeList&lt;Real,Real&gt;{},
                                       mf1, mf1.nGrowVect(), mf1.nComp(),
    [=] AMREX_GPU_DEVICE (int box_no, int i, int j, int k, int n) noexcept
        -&gt; GpuTuple&lt;Real,Real&gt;
    {
        return { ma1[box_no](i,j,k,n), ma2[box_no](i,j,k,n) };
    });
</verbatim></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Ops...</parametername>
</parameternamelist>
<parameterdescription>
<para>reduce operators (e.g., <ref refid="structamrex_1_1ReduceOpSum" kindref="compound">ReduceOpSum</ref>, <ref refid="structamrex_1_1ReduceOpMin" kindref="compound">ReduceOpMin</ref>, <ref refid="structamrex_1_1ReduceOpMax" kindref="compound">ReduceOpMax</ref>, <ref refid="structamrex_1_1ReduceOpLogicalAnd" kindref="compound">ReduceOpLogicalAnd</ref>, and <ref refid="structamrex_1_1ReduceOpLogicalOr" kindref="compound">ReduceOpLogicalOr</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ts...</parametername>
</parameternamelist>
<parameterdescription>
<para>data types (e.g., Real, int, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FAB</parametername>
</parameternamelist>
<parameterdescription>
<para>MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type like a lambda funcion</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>operation_list</parametername>
</parameternamelist>
<parameterdescription>
<para>list of reduce operators </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_list</parametername>
</parameternamelist>
<parameterdescription>
<para>list of data types </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fa</parametername>
</parameternamelist>
<parameterdescription>
<para>a MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells included in the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of components in the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object returning GpuTuple&lt;Ts...&gt;. It takes five ints, where the first int is the local box index, the next three are spatial indices for x, y, and z-directions, and the last is for component.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reduction result (GpuTuple&lt;Ts...&gt;) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParReduce.H" line="148" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParReduce.H" bodystart="148" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3ce1e3d392107eb3cdaaf9b1dcaee3f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Op</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename FAB</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename foo</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::ParReduce</definition>
        <argsstring>(TypeList&lt; Op &gt; operation_list, TypeList&lt; T &gt; type_list, FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, int ncomp, F &amp;&amp;f)</argsstring>
        <name>ParReduce</name>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; Op &gt;</type>
          <declname>operation_list</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; T &gt;</type>
          <declname>type_list</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Parallel reduce for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This performs reduction over a <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>&apos;s valid and specified ghost regions. For example, the code below computes the sum of the data in a <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. <verbatim>    auto const&amp; ma = mf.const_arrays();
    Real ektot = ParReduce(TypeList&lt;ReduceOpSum&gt;{}, TypeList&lt;Real&gt;{},
                           mf, mf.nGrowVect(), mf.nComp(),
    [=] AMREX_GPU_DEVICE (int box_no, int i, int j, int k, int n) noexcept
        -&gt; GpuTuple&lt;Real&gt;
    {
        return { ma[box_no](i,j,k,n) };
    });
</verbatim></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Op</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespaceamrex_1_1Reduce" kindref="compound">Reduce</ref> operator (e.g., <ref refid="structamrex_1_1ReduceOpSum" kindref="compound">ReduceOpSum</ref>, <ref refid="structamrex_1_1ReduceOpMin" kindref="compound">ReduceOpMin</ref>, <ref refid="structamrex_1_1ReduceOpMax" kindref="compound">ReduceOpMax</ref>, <ref refid="structamrex_1_1ReduceOpLogicalAnd" kindref="compound">ReduceOpLogicalAnd</ref>, and <ref refid="structamrex_1_1ReduceOpLogicalOr" kindref="compound">ReduceOpLogicalOr</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>data type (e.g., Real, int, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FAB</parametername>
</parameternamelist>
<parameterdescription>
<para>MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type like a lambda funcion</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>operation_list</parametername>
</parameternamelist>
<parameterdescription>
<para>a reduce operator stored in <ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_list</parametername>
</parameternamelist>
<parameterdescription>
<para>a data type stored in <ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fa</parametername>
</parameternamelist>
<parameterdescription>
<para>a MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells included in the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of components in the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object returning GpuTuple&lt;T&gt;. It takes four ints, where the first int is the local box index and the others are spatial indices for x, y, and z-directions.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reduction result (T) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParReduce.H" line="194" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParReduce.H" bodystart="194" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2d572bd9b1fce3628851a797b8a0fb13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ops</declname>
            <defname>Ops</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename FAB</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename foo</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ReduceData" kindref="compound">ReduceData</ref>&lt; Ts... &gt;::Type</type>
        <definition>ReduceData&lt;Ts...&gt;::Type amrex::ParReduce</definition>
        <argsstring>(TypeList&lt; Ops... &gt; operation_list, TypeList&lt; Ts... &gt; type_list, FabArray&lt; FAB &gt; const &amp;fa, F &amp;&amp;f)</argsstring>
        <name>ParReduce</name>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; Ops... &gt;</type>
          <declname>operation_list</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; Ts... &gt;</type>
          <declname>type_list</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Parallel reduce for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This performs reduction over a <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>&apos;s valid region. For example, the code below computes the minimum of the first <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> and the maximum of the second <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. <verbatim>    auto const&amp; ma1 = mf1.const_arrays();
    auot const&amp; ma2 = mf2.const_arrays();
    GpuTuple&lt;Real,Real&gt; mm = ParReduce(TypeList&lt;ReduceOpMin,ReduceOpMax&gt;{},
                                       TypeList&lt;Real,Real&gt;{}, mf1,
    [=] AMREX_GPU_DEVICE (int box_no, int i, int j, int k) noexcept
        -&gt; GpuTuple&lt;Real,Real&gt;
    {
        return { ma1[box_no](i,j,k), ma2[box_no](i,j,k) };
    });
</verbatim></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Ops...</parametername>
</parameternamelist>
<parameterdescription>
<para>reduce operators (e.g., <ref refid="structamrex_1_1ReduceOpSum" kindref="compound">ReduceOpSum</ref>, <ref refid="structamrex_1_1ReduceOpMin" kindref="compound">ReduceOpMin</ref>, <ref refid="structamrex_1_1ReduceOpMax" kindref="compound">ReduceOpMax</ref>, <ref refid="structamrex_1_1ReduceOpLogicalAnd" kindref="compound">ReduceOpLogicalAnd</ref>, and <ref refid="structamrex_1_1ReduceOpLogicalOr" kindref="compound">ReduceOpLogicalOr</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ts...</parametername>
</parameternamelist>
<parameterdescription>
<para>data types (e.g., Real, int, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FAB</parametername>
</parameternamelist>
<parameterdescription>
<para>MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type like a lambda funcion</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>operation_list</parametername>
</parameternamelist>
<parameterdescription>
<para>list of reduce operators </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_list</parametername>
</parameternamelist>
<parameterdescription>
<para>list of data types </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fa</parametername>
</parameternamelist>
<parameterdescription>
<para>a MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object returning GpuTuple&lt;Ts...&gt;. It takes four ints, where the first int is the local box index and the others are spatial indices for x, y, and z-directions.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reduction result (GpuTuple&lt;Ts...&gt;) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParReduce.H" line="241" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParReduce.H" bodystart="241" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad8ec82d3270be95cb3ee77860a6a46db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Op</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename FAB</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename foo</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::ParReduce</definition>
        <argsstring>(TypeList&lt; Op &gt; operation_list, TypeList&lt; T &gt; type_list, FabArray&lt; FAB &gt; const &amp;fa, F &amp;&amp;f)</argsstring>
        <name>ParReduce</name>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; Op &gt;</type>
          <declname>operation_list</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; T &gt;</type>
          <declname>type_list</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Parallel reduce for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This performs reduction over a <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>&apos;s valid region. For example, the code below computes the sum of the processed data in a <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. <verbatim>    auto const&amp; ma = mf.const_arrays();
    Real ektot = ParReduce(TypeList&lt;ReduceOpSum&gt;{}, TypeList&lt;Real&gt;{}, mf,
    [=] AMREX_GPU_DEVICE (int box_no, int i, int j, int k) noexcept
        -&gt; GpuTuple&lt;Real&gt;
    {
        auto rho = ma[box_no](i,j,k,0);
        auto mx = ma[box_no](i,j,k,1);
        auto my = ma[box_no](i,j,k,2);
        auto mz = ma[box_no](i,j,k,3);
        auto ek = (mx*mx+my*my+mz*mz)/(2.*rho);
        return { ek };
    });
</verbatim></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Op</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespaceamrex_1_1Reduce" kindref="compound">Reduce</ref> operator (e.g., <ref refid="structamrex_1_1ReduceOpSum" kindref="compound">ReduceOpSum</ref>, <ref refid="structamrex_1_1ReduceOpMin" kindref="compound">ReduceOpMin</ref>, <ref refid="structamrex_1_1ReduceOpMax" kindref="compound">ReduceOpMax</ref>, <ref refid="structamrex_1_1ReduceOpLogicalAnd" kindref="compound">ReduceOpLogicalAnd</ref>, and <ref refid="structamrex_1_1ReduceOpLogicalOr" kindref="compound">ReduceOpLogicalOr</ref>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>data type (e.g., Real, int, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FAB</parametername>
</parameternamelist>
<parameterdescription>
<para>MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable type like a lambda funcion</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>operation_list</parametername>
</parameternamelist>
<parameterdescription>
<para>a reduce operator stored in <ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_list</parametername>
</parameternamelist>
<parameterdescription>
<para>a data type stored in <ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fa</parametername>
</parameternamelist>
<parameterdescription>
<para>a MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object returning GpuTuple&lt;T&gt;. It takes four ints, where the first int is the local box index and the others are spatial indices for x, y, and z-directions.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reduction result (T) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParReduce.H" line="285" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_ParReduce.H" bodystart="285" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0035099661e1f92bc5de9ca2b58c0384" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::setFileName</definition>
        <argsstring>()</argsstring>
        <name>setFileName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="93" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4355fba810ff159e931e6b35e3d0dd59" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::openFile</definition>
        <argsstring>()</argsstring>
        <name>openFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="99" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::pout</definition>
        <argsstring>()</argsstring>
        <name>pout</name>
        <briefdescription>
<para>the stream that all output except error msgs should use </para>
        </briefdescription>
        <detaileddescription>
<para>Use this in place of std::cout for program output.</para>
<para>In serial this is the standard output, in parallel it is a different file on each proc (see <ref refid="namespaceamrex_1a76884405b2dc4cd3167652aa79be5606" kindref="member">setPoutBaseName()</ref>).</para>
<para>Can be used to replace std::cout. In serial this just returns std::cout. In parallel, this creates a separate file for each proc called &lt;basename&gt;.n where n is the procID and &lt;basename&gt; defaults to &quot;pout&quot; but can be set by calling <ref refid="namespaceamrex_1a76884405b2dc4cd3167652aa79be5606" kindref="member">setPoutBaseName()</ref>. Output is then directed to these files. This keeps the output from different processors from getting all jumbled up. If you want fewer files, you can use <ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> parameter amrex.pout_int=nproc and it will only output every nproc processors pout.n files (where nnproc == 0). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="112" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="112" bodyend="147" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.H" declline="23" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a76884405b2dc4cd3167652aa79be5606" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::setPoutBaseName</definition>
        <argsstring>(const std::string &amp;a_Name)</argsstring>
        <name>setPoutBaseName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>a_Name</declname>
        </param>
        <briefdescription>
<para>Set the base name for the parallel output files used by <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Changes the base part of the filename for <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref> files.</para>
<para>If the file has already been used and this is a different name, close the current file and open a new one.</para>
<para>When in parallel, changes the base name of the <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref> files. If <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref> has already been called, it closes the current output file and opens a new one (unless the name is the same, in which case it does nothing). In serial, ignores the argument and does nothing. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="158" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="158" bodyend="170" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.H" declline="33" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0b6b28892d1b7c4a6845bcf08ba7a461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; amrex::poutFileName</definition>
        <argsstring>()</argsstring>
        <name>poutFileName</name>
        <briefdescription>
<para>return the current filename as used by <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Accesses the filename for the local <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref> file.</para>
<para>in serial, just return the string &quot;cout&quot;; abort if MPI is not initialized.</para>
<para>Returns the name used for the local <ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout()</ref> file. In parallel this is &quot;\&lt;pout_basename\&gt;.\&lt;procID\&gt;&quot;, where &lt;pout_basename&gt; defaults to &quot;pout&quot; and can be modified by calling <ref refid="namespaceamrex_1a76884405b2dc4cd3167652aa79be5606" kindref="member">setPoutBaseName()</ref>, and &lt;procID&gt; is the local proc number. In serial, this always returns the string &quot;cout&quot;. It is an error (exit code 111) to call this in parallel before MPI_Initialize(). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" line="180" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.cpp" bodystart="180" bodyend="216" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_parstream.H" declline="44" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3b8c7b9108d9ccbc108689fb9b8b2a7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Partition</definition>
        <argsstring>(T *data, int beg, int end, F &amp;&amp;f)</argsstring>
        <name>Partition</name>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>beg</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A GPU-capable partition function for contiguous data. </para>
        </briefdescription>
        <detaileddescription>
<para>After calling this, all the items for which the predicate is true will be before the items for which the predicate is false in the input array.</para>
<para>This version is not stable, if you want that behavior use <ref refid="namespaceamrex_1a57310fe9971a6396f436f596efa45226" kindref="member">amrex::StablePartition</ref> instead.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the data to be partitioned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the predicate function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the data to be partitioned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beg</parametername>
</parameternamelist>
<parameterdescription>
<para>index at which to start </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>index at which to stop (exclusive) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function that returns 1 or 0 for each input</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Returns the index of the first element for which f is 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" line="80" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" bodystart="80" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1214d3602cac3f99cebc60c951dbb938" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Partition</definition>
        <argsstring>(T *data, int n, F &amp;&amp;f)</argsstring>
        <name>Partition</name>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A GPU-capable partition function for contiguous data. </para>
        </briefdescription>
        <detaileddescription>
<para>After calling this, all the items for which the predicate is true will be before the items for which the predicate is false in the input array.</para>
<para>This version is not stable, if you want that behavior use <ref refid="namespaceamrex_1a57310fe9971a6396f436f596efa45226" kindref="member">amrex::StablePartition</ref> instead.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the data to be partitioned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the predicate function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the data to be partitioned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function that returns 1 or 0 for each input</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Returns the index of the first element for which f is 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" line="109" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae3a47d7e7e8f7a66ddf15cdd606dbb8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Partition</definition>
        <argsstring>(Gpu::DeviceVector&lt; T &gt; &amp;v, F &amp;&amp;f)</argsstring>
        <name>Partition</name>
        <param>
          <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A GPU-capable partition function for contiguous data. </para>
        </briefdescription>
        <detaileddescription>
<para>After calling this, all the items for which the predicate is true will be before the items for which the predicate is false in the input array.</para>
<para>This version is not stable, if you want that behavior use <ref refid="namespaceamrex_1a57310fe9971a6396f436f596efa45226" kindref="member">amrex::StablePartition</ref> instead.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the data to be partitioned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the predicate function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref> with the data to be partitioned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function that returns 1 or 0 for each input</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Returns the index of the first element for which f is 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" line="133" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" bodystart="133" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a57310fe9971a6396f436f596efa45226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::StablePartition</definition>
        <argsstring>(T *data, int beg, int end, F &amp;&amp;f)</argsstring>
        <name>StablePartition</name>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>beg</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>end</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A GPU-capable partition function for contiguous data. </para>
        </briefdescription>
        <detaileddescription>
<para>After calling this, all the items for which the predicate is true will be before the items for which the predicate is false in the input array.</para>
<para>This version is stable, meaning that, within each side of the resulting array, order is maintained - if element i was before element j in the input, then it will also be before j in the output. If you don&apos;t care about this property, use <ref refid="namespaceamrex_1a3b8c7b9108d9ccbc108689fb9b8b2a7e" kindref="member">amrex::Partition</ref> instead.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the data to be partitioned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the predicate function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the data to be partitioned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>beg</parametername>
</parameternamelist>
<parameterdescription>
<para>index at which to start </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>index at which to stop (exclusive) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function that returns 1 or 0 for each input</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Returns the index of the first element for which f is 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" line="165" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" bodystart="165" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab4fdc897c184681028ce35c12fead8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::StablePartition</definition>
        <argsstring>(T *data, int n, F &amp;&amp;f)</argsstring>
        <name>StablePartition</name>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A GPU-capable partition function for contiguous data. </para>
        </briefdescription>
        <detaileddescription>
<para>After calling this, all the items for which the predicate is true will be before the items for which the predicate is false in the input array.</para>
<para>This version is stable, meaning that, within each side of the resulting array, order is maintained - if element i was before element j in the input, then it will also be before j in the output. If you don&apos;t care about this property, use <ref refid="namespaceamrex_1a3b8c7b9108d9ccbc108689fb9b8b2a7e" kindref="member">amrex::Partition</ref> instead.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the data to be partitioned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the predicate function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the data to be partitioned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements in the array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function that returns 1 or 0 for each input</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Returns the index of the first element for which f is 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" line="195" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" bodystart="195" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a52a83682c1d3c6b56f1fba2bbaaed439" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::StablePartition</definition>
        <argsstring>(Gpu::DeviceVector&lt; T &gt; &amp;v, F &amp;&amp;f)</argsstring>
        <name>StablePartition</name>
        <param>
          <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A GPU-capable partition function for contiguous data. </para>
        </briefdescription>
        <detaileddescription>
<para>After calling this, all the items for which the predicate is true will be before the items for which the predicate is false in the input array.</para>
<para>This version is stable, meaning that, within each side of the resulting array, order is maintained - if element i was before element j in the input, then it will also be before j in the output. If you don&apos;t care about this property, use <ref refid="namespaceamrex_1a3b8c7b9108d9ccbc108689fb9b8b2a7e" kindref="member">amrex::Partition</ref> instead.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the data to be partitioned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the predicate function.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref> with the data to be partitioned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function that returns 1 or 0 for each input</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Returns the index of the first element for which f is 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" line="221" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Partition.H" bodystart="221" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6e1c541c50331b9a3c005b80b4503f85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::LevelPath</definition>
        <argsstring>(int level, const std::string &amp;levelPrefix=&quot;Level_&quot;)</argsstring>
        <name>LevelPath</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <briefdescription>
<para>return the name of the level directory, e.g., Level_5 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="17" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="17" bodyend="20" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.H" declline="19" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab4ba0c733501dc74a5d254dac0bfc47d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::MultiFabHeaderPath</definition>
        <argsstring>(int level, const std::string &amp;levelPrefix=&quot;Level_&quot;, const std::string &amp;mfPrefix=&quot;Cell&quot;)</argsstring>
        <name>MultiFabHeaderPath</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <briefdescription>
<para>return the path of the multifab to write to the header, e.g., Level_5/Cell </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="22" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="22" bodyend="27" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.H" declline="22" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a438b71d250fb65fd385716c745be94ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::LevelFullPath</definition>
        <argsstring>(int level, const std::string &amp;plotfilename, const std::string &amp;levelPrefix=&quot;Level_&quot;)</argsstring>
        <name>LevelFullPath</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <briefdescription>
<para>return the full path of the level directory, e.g., plt00005/Level_5 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="29" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="29" bodyend="39" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.H" declline="27" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a81e8d2ba5c7abaf7b2ca9bd2f43d5fb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::MultiFabFileFullPrefix</definition>
        <argsstring>(int level, const std::string &amp;plotfilename, const std::string &amp;levelPrefix=&quot;Level_&quot;, const std::string &amp;mfPrefix=&quot;Cell&quot;)</argsstring>
        <name>MultiFabFileFullPrefix</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <briefdescription>
<para>return the full path multifab prefix, e.g., plt00005/Level_5/Cell </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="41" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="41" bodyend="52" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.H" declline="32" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa099c9a81b678f94bc075120f85f0df2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PreBuildDirectorHierarchy</definition>
        <argsstring>(const std::string &amp;dirName, const std::string &amp;subDirPrefix, int nSubDirs, bool callBarrier)</argsstring>
        <name>PreBuildDirectorHierarchy</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dirName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>subDirPrefix</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nSubDirs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>callBarrier</declname>
        </param>
        <briefdescription>
<para>prebuild a hierarchy of directories dirName is built first. if dirName exists, it is renamed. then build dirName/subDirPrefix_0 .. dirName/subDirPrefix_nSubDirs-1 if callBarrier is true, call <ref refid="namespaceamrex_1_1ParallelDescriptor_1ac0861548eabcd3f4b4c72a8826f83f8e" kindref="member">ParallelDescriptor::Barrier()</ref> after all directories are built <ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor()</ref> creates the directories </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;dirName</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&amp;subDirPrefix</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nSubDirs</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callBarrier</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="56" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="56" bodyend="69" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.H" declline="51" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeaa559cd77a4c889c84b144f59a6e35c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteGenericPlotfileHeader</definition>
        <argsstring>(std::ostream &amp;HeaderFile, int nlevels, const Vector&lt; BoxArray &gt; &amp;bArray, const Vector&lt; std::string &gt; &amp;varnames, const Vector&lt; Geometry &gt; &amp;geom, Real time, const Vector&lt; int &gt; &amp;level_steps, const Vector&lt; IntVect &gt; &amp;ref_ratio, const std::string &amp;versionName, const std::string &amp;levelPrefix, const std::string &amp;mfPrefix)</argsstring>
        <name>WriteGenericPlotfileHeader</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>HeaderFile</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nlevels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>bArray</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>level_steps</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionName</declname>
          <defval>&quot;HyperCLaw-V1.1&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
          <defval>&quot;Level_&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
          <defval>&quot;Cell&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>write a generic plot file header to the file plotfilename/Header the plotfilename directory must already exist </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="73" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="73" bodyend="155" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.H" declline="60" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab16f5968ad28ec7664abd985a11e9c20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteMultiLevelPlotfile</definition>
        <argsstring>(const std::string &amp;plotfilename, int nlevels, const Vector&lt; const MultiFab * &gt; &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Vector&lt; Geometry &gt; &amp;geom, Real time, const Vector&lt; int &gt; &amp;level_steps, const Vector&lt; IntVect &gt; &amp;ref_ratio, const std::string &amp;versionName, const std::string &amp;levelPrefix, const std::string &amp;mfPrefix, const Vector&lt; std::string &gt; &amp;extra_dirs)</argsstring>
        <name>WriteMultiLevelPlotfile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nlevels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>level_steps</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>extra_dirs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="159" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="159" bodyend="239" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.H" declline="83" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a87ec6f46642e5c4b2b89b545500be320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteMLMF</definition>
        <argsstring>(const std::string &amp;plotfilename, const Vector&lt; const MultiFab * &gt; &amp;mf, const Vector&lt; Geometry &gt; &amp;geom)</argsstring>
        <name>WriteMLMF</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>write a plotfile to disk given: -plotfile name -vector of MultiFabs -vector of Geometrys variable names are written as &quot;Var0&quot;, &quot;Var1&quot;, etc. refinement ratio is computed from the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> vector &quot;time&quot; and &quot;level_steps&quot; are set to zero </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&amp;plotfilename</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&amp;geom</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="248" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="248" bodyend="280" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.H" declline="109" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ace783f22796d80958dc5a14440a432fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteMultiLevelPlotfileHeaders</definition>
        <argsstring>(const std::string &amp;plotfilename, int nlevels, const Vector&lt; const MultiFab * &gt; &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Vector&lt; Geometry &gt; &amp;geom, Real time, const Vector&lt; int &gt; &amp;level_steps, const Vector&lt; IntVect &gt; &amp;ref_ratio, const std::string &amp;versionName, const std::string &amp;levelPrefix, const std::string &amp;mfPrefix, const Vector&lt; std::string &gt; &amp;extra_dirs)</argsstring>
        <name>WriteMultiLevelPlotfileHeaders</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nlevels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>level_steps</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>extra_dirs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="284" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="284" bodyend="336" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.H" declline="113" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa5343920d9b5ee1307ca697274eca84a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteSingleLevelPlotfile</definition>
        <argsstring>(const std::string &amp;plotfilename, const MultiFab &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Geometry &amp;geom, Real time, int level_step, const std::string &amp;versionName, const std::string &amp;levelPrefix, const std::string &amp;mfPrefix, const Vector&lt; std::string &gt; &amp;extra_dirs)</argsstring>
        <name>WriteSingleLevelPlotfile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level_step</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>extra_dirs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" line="339" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.cpp" bodystart="339" bodyend="354" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_PlotFileUtil.H" declline="72" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6acf31bfdb80131caf08849fe42df37a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, Array&lt; T, AMREX_SPACEDIM &gt; const &amp;a)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; T, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Print.H" line="18" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Print.H" bodystart="18" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abc89efc14a5c343a7ec2f619713676b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const std::pair&lt; T, S &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::pair&lt; T, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Print.H" line="27" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Print.H" bodystart="27" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1b2c12e9a133d26ba2bd4b978a95df44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::InitRandom</definition>
        <argsstring>(ULong cpu_seed, int nprocs=ParallelDescriptor::NProcs(), ULong gpu_seed=detail::DefaultGpuSeed())</argsstring>
        <name>InitRandom</name>
        <param>
          <type>ULong</type>
          <declname>cpu_seed</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nprocs</declname>
          <defval><ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>()</defval>
        </param>
        <param>
          <type>ULong</type>
          <declname>gpu_seed</declname>
          <defval><ref refid="namespaceamrex_1_1detail_1afd0b9d029d68b514e004d7c4fccfbe42" kindref="member">detail::DefaultGpuSeed</ref>()</defval>
        </param>
        <briefdescription>
<para>Set the seed of the random number generator. </para>
        </briefdescription>
        <detaileddescription>
<para>There is also an entry point for Fortran callable as:</para>
<para>INTEGER seed call blutilinitrand(seed)</para>
<para>or</para>
<para>INTEGER seed call blinitrand(seed) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" line="65" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="65" bodyend="84" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" declline="165" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6a4ed5dc1eeb3e5b409eb8975c9e829b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::RandomNormal</definition>
        <argsstring>(Real mean, Real stddev)</argsstring>
        <name>RandomNormal</name>
        <param>
          <type>Real</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>stddev</declname>
        </param>
        <briefdescription>
<para>Generate a psuedo-random double from a normal distribution. </para>
        </briefdescription>
        <detaileddescription>
<para>Generates one pseudorandom real number (double) from a normal distribution with mean &apos;mean&apos; and standard deviation &apos;stddev&apos;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" line="86" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="86" bodyend="91" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" declline="54" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a384bf7a8791d85fe1ae4153eee61d71e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::Random</definition>
        <argsstring>()</argsstring>
        <name>Random</name>
        <briefdescription>
<para>Generate a psuedo-random double from uniform distribution. </para>
        </briefdescription>
        <detaileddescription>
<para>Generates one pseudorandom real number (double) from a uniform distribution between 0.0 and 1.0 (0.0 included, 1.0 excluded) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" line="93" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="93" bodyend="98" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" declline="21" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aadec079fd8e2cdca36f7f49355e33864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>unsigned int amrex::RandomPoisson</definition>
        <argsstring>(Real lambda)</argsstring>
        <name>RandomPoisson</name>
        <param>
          <type>Real</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
<para>Generate a psuedo-random integer from a Poisson distribution. </para>
        </briefdescription>
        <detaileddescription>
<para>Generates one pseudorandom positive integer number (double) extracted from a Poisson distribution, given the Real parameter lambda. The CPU version of this function relies on the standard Template Library The GPU version of this function relies on the cuRAND library </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" line="100" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="100" bodyend="105" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" declline="89" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a20796a80df81ee204983811cc8a1b705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>unsigned int amrex::Random_int</definition>
        <argsstring>(unsigned int n)</argsstring>
        <name>Random_int</name>
        <param>
          <type>unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Generates one pseudorandom unsigned integer which is uniformly distributed on [0,n-1]-interval for each call. </para>
        </briefdescription>
        <detaileddescription>
<para>The CPU version of this function uses C++11&apos;s mt19937. The GPU version uses CURAND&apos;s XORWOW generator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" line="107" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="107" bodyend="112" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" declline="114" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a83b723afb07da54500bc1dc47a43f636" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ULong</type>
        <definition>ULong amrex::Random_long</definition>
        <argsstring>(ULong n)</argsstring>
        <name>Random_long</name>
        <param>
          <type>ULong</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Generates one pseudorandom unsigned long which is uniformly distributed on [0,n-1]-interval for each call. </para>
        </briefdescription>
        <detaileddescription>
<para>The CPU version of this function uses C++11&apos;s mt19937. There is no GPU version. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" line="114" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="114" bodyend="119" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" declline="145" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad1b283df95b292f478597bc503170459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SaveRandomState</definition>
        <argsstring>(std::ostream &amp;os)</argsstring>
        <name>SaveRandomState</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Save and restore random state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" line="122" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="122" bodyend="127" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" declline="174" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae45a9a3a96e46d7b15173894b25134fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RestoreRandomState</definition>
        <argsstring>(std::istream &amp;is, int nthreads_old, int nstep_old)</argsstring>
        <name>RestoreRandomState</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nthreads_old</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nstep_old</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" line="130" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="130" bodyend="149" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" declline="176" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa2c1209819cd8dd79499c2b9f088120e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::UniqueRandomSubset</definition>
        <argsstring>(Vector&lt; int &gt; &amp;uSet, int setSize, int poolSize, bool printSet=false)</argsstring>
        <name>UniqueRandomSubset</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>uSet</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>setSize</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>poolSize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>printSet</declname>
        </param>
        <briefdescription>
<para>Create a unique subset of random numbers from a pool of integers in the range [0, poolSize - 1] the set will be in the order they are found setSize must be &lt;= poolSize uSet will be resized to setSize if you want all processors to have the same set, call this on one processor and broadcast the array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" line="152" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="152" bodyend="173" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" declline="187" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a609b6464779180bb47c23d308d6c1a95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ResetRandomSeed</definition>
        <argsstring>(ULong cpu_seed, ULong gpu_seed)</argsstring>
        <name>ResetRandomSeed</name>
        <param>
          <type>ULong</type>
          <declname>cpu_seed</declname>
        </param>
        <param>
          <type>ULong</type>
          <declname>gpu_seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" line="175" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="175" bodyend="178" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" declline="168" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abce0125a244f443854b1c4a2709c5990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeallocateRandomSeedDevArray</definition>
        <argsstring>()</argsstring>
        <name>DeallocateRandomSeedDevArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" line="181" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="181" bodyend="198" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" declline="196" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaf97cdbc0db387b57d9641d57cce591e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::NItemsPerBin</definition>
        <argsstring>(int totalItems, Vector&lt; int &gt; &amp;binCounts)</argsstring>
        <name>NItemsPerBin</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>totalItems</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>binCounts</declname>
        </param>
        <briefdescription>
<para>Fill binCounts with the number of items for each bin. The remainder items are randomly assigned. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" line="201" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.cpp" bodystart="201" bodyend="224" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" declline="194" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a65fcc9ad910569bc247b330997d5ed52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::Random</definition>
        <argsstring>(RandomEngine const &amp;random_engine)</argsstring>
        <name>Random</name>
        <param>
          <type><ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref> const &amp;</type>
          <declname>random_engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="24" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" bodystart="24" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a10f7574cba3e496a27f09204cce8aa6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::RandomNormal</definition>
        <argsstring>(Real mean, Real stddev, RandomEngine const &amp;random_engine)</argsstring>
        <name>RandomNormal</name>
        <param>
          <type>Real</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>stddev</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref> const &amp;</type>
          <declname>random_engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="57" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" bodystart="57" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a62b2d5b64c692d02452cbed5ee65e61e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE unsigned int amrex::RandomPoisson</definition>
        <argsstring>(Real lambda, RandomEngine const &amp;random_engine)</argsstring>
        <name>RandomPoisson</name>
        <param>
          <type>Real</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref> const &amp;</type>
          <declname>random_engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="92" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" bodystart="92" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3768023f2b8cf90a47c693514b97d579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE unsigned int amrex::Random_int</definition>
        <argsstring>(unsigned int n, RandomEngine const &amp;random_engine)</argsstring>
        <name>Random_int</name>
        <param>
          <type>unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1RandomEngine" kindref="compound">RandomEngine</ref> const &amp;</type>
          <declname>random_engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" line="117" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Random.H" bodystart="117" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7e167f3e07e0a0a021294e79676891db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1abbea0a87a768d8f4e8112b9cd673b124" kindref="member">randState_t</ref> *</type>
        <definition>AMREX_FORCE_INLINE randState_t* amrex::getRandState</definition>
        <argsstring>()</argsstring>
        <name>getRandState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RandomEngine.H" line="52" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RandomEngine.H" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1e3af8577a1ee3509e9bd184d2ab575a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const RealBox &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Nice ASCII output. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.cpp" line="31" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.cpp" bodystart="32" bodyend="39" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" declline="143" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3fa033d5f7e81438c45cc3b5f6af3443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;, RealBox &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Nice ASCII input. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.cpp" line="47" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.cpp" bodystart="47" bodyend="80" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" declline="146" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9ad547d6295814fdf857cbec46887092" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::AlmostEqual</definition>
        <argsstring>(const RealBox &amp;box1, const RealBox &amp;box2, Real eps=0.0) noexcept</argsstring>
        <name>AlmostEqual</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>box1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>box2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps</declname>
        </param>
        <briefdescription>
<para>Check for equality of real boxes within a certain tolerance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.cpp" line="82" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.cpp" bodystart="82" bodyend="95" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" declline="149" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab7f948f87bc8aa58451aa8b78e9c883a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;ostr, const RealVect &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>ostr</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classamrex_1_1Print" kindref="compound">Print</ref> to the given output stream in ASCII. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.cpp" line="10" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="11" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a89d1ab126c05c2eac37ba679a7415a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, RealVect &amp;iv)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.cpp" line="18" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.cpp" bodystart="18" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a26f254d668dd872d470d231a1058eaac" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::scale</definition>
        <argsstring>(const RealVect &amp;p, Real s) noexcept</argsstring>
        <name>scale</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> obtained by multiplying each of the components of the given <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> by a scalar. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="774" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="774" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab2f47c183037880adec6de44fcbb0344" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::min</definition>
        <argsstring>(const RealVect &amp;p1, const RealVect &amp;p2) noexcept</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is the component-wise minimum of two argument RealVects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="837" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="837" bodyend="842"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a57e5b11414b29e5aeaf30c5e301e8f34" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::max</definition>
        <argsstring>(const RealVect &amp;p1, const RealVect &amp;p2) noexcept</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is the component-wise maximum of two argument RealVects. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="847" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="847" bodyend="852"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a133d9cc5152d06db5db552037d7ee486" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::BASISREALV</definition>
        <argsstring>(int dir) noexcept</argsstring>
        <name>BASISREALV</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a basis vector in the given coordinate direction.<linebreak/>
 In 2-D:<linebreak/>
 BASISREALV(0) == (1.,0.); BASISREALV(1) == (0.,1.).<linebreak/>
 In 3-D:<linebreak/>
 BASISREALV(0) == (1.,0.,0.); BASISREALV(1) == (0.,1.,0.); BASISREALV(2) == (0.,0.,1.).<linebreak/>
 Note that the coordinate directions are based at zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="997" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="997" bodyend="1003"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af8def61d771b914af3de1bf3095d30d8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::operator/</definition>
        <argsstring>(Real s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> <emphasis>p</emphasis> with each component divided by a scalar <emphasis>s</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="1007" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="1007" bodyend="1011"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa734733ef1b28c8cecd99859f3e56606" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::operator+</definition>
        <argsstring>(Real s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> <emphasis>p</emphasis> with a scalar <emphasis>s</emphasis> added to each component. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="1015" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="1015" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9544c7d6ed4e33b91cb32e5b3c32a344" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::operator-</definition>
        <argsstring>(Real s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <emphasis>s - p</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="1023" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="1023" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a195022a2bf1f86de6f3f454ad1d586b7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::operator*</definition>
        <argsstring>(Real s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> that is a <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> <emphasis>p</emphasis> with each component multiplied by a scalar <emphasis>s</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="1031" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="1031" bodyend="1035"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a01d310d8cbb95e1ea1af03ef92c82895" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::operator/</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns component-wise quotient <emphasis>p / s</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="1039" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="1039" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a78af1eb5d5bfbed5aea780ed03314482" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::operator+</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns component-wise sum of RealVects <emphasis>s</emphasis> and <emphasis>p</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="1047" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="1047" bodyend="1051"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae04516f228abbaedeb3e57c4acd79a47" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::operator-</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns <emphasis>s - p</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="1055" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="1055" bodyend="1059"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aad23797e3ede2065dcdc613ef5999603" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealVect amrex::operator*</definition>
        <argsstring>(const RealVect &amp;s, const RealVect &amp;p) noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns component-wise product of <emphasis>s</emphasis> and <emphasis>p</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="1063" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="1063" bodyend="1067"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab5e6b7ac030844b4a01b7740b8105cd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TagType</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_same&lt; std::decay_t&lt; decltype(std::declval&lt; TagType &gt;).box())&gt;, <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;std::is_same&lt;std::decay_t&lt;decltype(std::declval&lt;TagType&gt;).box())&gt;, Box&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Vector&lt; TagType &gt; const &amp;tags, int ncomp, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; TagType &gt; const &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TagParallelFor.H" line="228" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TagParallelFor.H" bodystart="228" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a883db47b0aa92cd8615924fa400832c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TagType</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_same&lt; std::decay_t&lt; decltype(std::declval&lt; TagType &gt;).box())&gt;, <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;std::is_same&lt;std::decay_t&lt;decltype(std::declval&lt;TagType&gt;).box())&gt;, Box&gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Vector&lt; TagType &gt; const &amp;tags, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; TagType &gt; const &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TagParallelFor.H" line="247" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TagParallelFor.H" bodystart="247" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a29592ae1f9b62cac61f673ae2b456109" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TagType</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_integral&lt; std::decay_t&lt; decltype(std::declval&lt; TagType &gt;).size())&gt; &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;std::is_integral&lt;std::decay_t&lt;decltype(std::declval&lt;TagType&gt;).size())&gt; &gt;::value&gt; amrex::ParallelFor</definition>
        <argsstring>(Vector&lt; TagType &gt; const &amp;tags, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; TagType &gt; const &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TagParallelFor.H" line="264" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TagParallelFor.H" bodystart="264" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a55b45d61c6e18c31d787042cf9169385" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="structamrex_1_1GpuTupleElement" kindref="compound">GpuTupleElement</ref>&lt; I, <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &gt;::type &amp;</type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE GpuTupleElement&lt;I, GpuTuple&lt;Ts...&gt; &gt;::type&amp; amrex::get</definition>
        <argsstring>(GpuTuple&lt; Ts... &gt; &amp;tup) noexcept</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="178" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af2e078bf57389f3da2ad75a53aca0771" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="structamrex_1_1GpuTupleElement" kindref="compound">GpuTupleElement</ref>&lt; I, <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &gt;::type const  &amp;</type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE GpuTupleElement&lt;I, GpuTuple&lt;Ts...&gt; &gt;::type const&amp; amrex::get</definition>
        <argsstring>(GpuTuple&lt; Ts... &gt; const &amp;tup) noexcept</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; const &amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="187" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="187" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7630375a13ce1d49fd232e6436d658e2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="structamrex_1_1GpuTupleElement" kindref="compound">GpuTupleElement</ref>&lt; I, <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &gt;::type &amp;&amp;</type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE GpuTupleElement&lt;I, GpuTuple&lt;Ts...&gt; &gt;::type&amp;&amp; amrex::get</definition>
        <argsstring>(GpuTuple&lt; Ts... &gt; &amp;&amp;tup) noexcept</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts... &gt; &amp;&amp;</type>
          <declname>tup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="196" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a546f82ad84c1f122bb9bf89dcaa2b7a3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; <ref refid="namespaceamrex_1_1detail_1a4dabd168440a362478e0d2887dfdfe23" kindref="member">detail::tuple_decay_t</ref>&lt; Ts &gt;... &gt;</type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE GpuTuple&lt;detail::tuple_decay_t&lt;Ts&gt;...&gt; amrex::makeTuple</definition>
        <argsstring>(Ts &amp;&amp;... args)</argsstring>
        <name>makeTuple</name>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="251" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="251" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afdc7b3879a8b9ccc7982c0781deb74ea" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TP</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> auto</type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE auto amrex::TupleCat</definition>
        <argsstring>(TP &amp;&amp;a) -&gt; typename detail::tuple_cat_result&lt; detail::tuple_decay_t&lt; TP &gt; &gt;::type</argsstring>
        <name>TupleCat</name>
        <param>
          <type>TP &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="285" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="285" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af2cf176de6238efb234749dec71b4a0f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TP1</type>
          </param>
          <param>
            <type>typename TP2</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> auto</type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE auto amrex::TupleCat</definition>
        <argsstring>(TP1 &amp;&amp;a, TP2 &amp;&amp;b) -&gt; typename detail::tuple_cat_result&lt; detail::tuple_decay_t&lt; TP1 &gt;, detail::tuple_decay_t&lt; TP2 &gt; &gt;::type</argsstring>
        <name>TupleCat</name>
        <param>
          <type>TP1 &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>TP2 &amp;&amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="294" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="294" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a241b30447206d0b8029fac3bd5c9d1c6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TP1</type>
          </param>
          <param>
            <type>typename TP2</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>TPs</declname>
            <defname>TPs</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> auto</type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE auto amrex::TupleCat</definition>
        <argsstring>(TP1 &amp;&amp;a, TP2 &amp;&amp;b, TPs &amp;&amp;... args) -&gt; typename detail::tuple_cat_result&lt; detail::tuple_decay_t&lt; TP1 &gt;, detail::tuple_decay_t&lt; TP2 &gt;, detail::tuple_decay_t&lt; TPs &gt;... &gt;::type</argsstring>
        <name>TupleCat</name>
        <param>
          <type>TP1 &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>TP2 &amp;&amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>TPs &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="308" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="308" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a72ba0f3bd5880d4218b4bfe93373edf6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename TP</type>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> auto</type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE auto amrex::Apply</definition>
        <argsstring>(F &amp;&amp;f, TP &amp;&amp;t) -&gt; typename detail::apply_result&lt; F, detail::tuple_decay_t&lt; TP &gt; &gt;::type</argsstring>
        <name>Apply</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>TP &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="355" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="355" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a38e3e5431e2c612ce6e6b4aac3ededf2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Args &amp;... &gt;</type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE GpuTuple&lt;Args&amp;...&gt; amrex::Tie</definition>
        <argsstring>(Args &amp;... args) noexcept</argsstring>
        <name>Tie</name>
        <param>
          <type>Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="366" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad8cc1e47b11f22cfe944555f6e833cc8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref>&lt; Ts &amp;&amp;... &gt;</type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE GpuTuple&lt;Ts&amp;&amp;...&gt; amrex::ForwardAsTuple</definition>
        <argsstring>(Ts &amp;&amp;... args) noexcept</argsstring>
        <name>ForwardAsTuple</name>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" line="376" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Tuple.H" bodystart="376" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aca65f803ae9e0c199552d38482b6dbdc" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>constexpr void amrex::ForEach</definition>
        <argsstring>(TypeList&lt; Ts... &gt;, F &amp;&amp;f)</argsstring>
        <name>ForEach</name>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; Ts... &gt;</type>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>For each type t in <ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>, call f(t) </para>
        </briefdescription>
        <detaileddescription>
<para>For example, instead of <verbatim>    int order = ...;
    if (order == 1) {
        interp&lt;1&gt;(...);
    } else if (order == 2) {
        interp&lt;2&gt;(...);
    } else if (order == 4) {
        interp&lt;4&gt;(...);
    }
</verbatim> we could have <verbatim>    int order = ...;
    ForEach(TypeList&lt;std::integral_constant&lt;int,1&gt;,
                     std::integral_constant&lt;int,2&gt;,
                     std::integral_constant&lt;int,4&gt;&gt;{},
            [&amp;] (auto order_const) {
                if (order_const() == order) {
                    interp&lt;order_const()&gt;(...);
                }
            });
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" line="78" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" bodystart="78" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad482086094efe1bf5748ee81c759d86e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool amrex::ForEachUntil</definition>
        <argsstring>(TypeList&lt; Ts... &gt;, F &amp;&amp;f)</argsstring>
        <name>ForEachUntil</name>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; Ts... &gt;</type>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>For each type t in <ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>, call f(t) until true is returned. </para>
        </briefdescription>
        <detaileddescription>
<para>This behaves like return (f(t0) || f(t1) || f(t2) || ...). Note that shor-circuting occurs for the || operators.</para>
<para>An example, <verbatim>    void AnyF (Any&amp; dst, Any const&amp; src) {
        // dst and src are either MultiFab or fMultiFab
        auto tt = CartesianProduct(TypeList&lt;MultiFab,fMultiFab&gt;{},
                                   TypeList&lt;MultiFab,fMultiFab&gt;{});
        bool r = ForEachUtil(tt, [&amp;] (auto t) -&gt; bool
        {
            using MF0 = TypeAt&lt;0,decltype(t)&gt;;
            using MF1 = TypeAt&lt;1,decltype(t)&gt;;
            if (dst.is&lt;MF0&gt;() &amp;&amp; src.is&lt;MF1&gt;()) {
                MF0      &amp; dmf = dst.get&lt;MF0&gt;();
                MF1 const&amp; smf = src.get&lt;MF1&gt;();
                f(dmf, smf);
                return true;
            } else {
                return false;
            }
        });
        if (!r) amrex::Abort(&quot;Unsupported types&quot;);
    }
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" line="115" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" bodystart="115" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a71e196fc8e75b8176182de8d994ff62a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>As</declname>
            <defname>As</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Bs</declname>
            <defname>Bs</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto amrex::operator+</definition>
        <argsstring>(TypeList&lt; As... &gt;, TypeList&lt; Bs... &gt;)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; As... &gt;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; Bs... &gt;</type>
        </param>
        <briefdescription>
<para>Concatenate two TypeLists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" line="123" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aad1bedfbf5b00ed85060a201b5e19ffb" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ls</declname>
            <defname>Ls</defname>
          </param>
          <param>
            <type>typename A</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto amrex::single_product</definition>
        <argsstring>(TypeList&lt; Ls... &gt;, A)</argsstring>
        <name>single_product</name>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; Ls... &gt;</type>
        </param>
        <param>
          <type>A</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" line="128" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" bodystart="128" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a79754df2fe2ff8642af6d3a015518866" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename LLs</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>As</declname>
            <defname>As</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto amrex::operator*</definition>
        <argsstring>(LLs, TypeList&lt; As... &gt;)</argsstring>
        <name>operator*</name>
        <param>
          <type>LLs</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref>&lt; As... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" line="133" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9d736b217af3b87bef2bffd4dd55edff" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ls</declname>
            <defname>Ls</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto amrex::CartesianProduct</definition>
        <argsstring>(Ls...)</argsstring>
        <name>CartesianProduct</name>
        <param>
          <type>Ls...</type>
        </param>
        <briefdescription>
<para>Cartesian Product of TypeLists. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, <verbatim>    CartesianProduct(TypeList&lt;std::integral_constant&lt;int,0&gt;,
                              std::integral_constant&lt;int,1&gt;&gt;{},
                     TypeList&lt;std::integral_constant&lt;int,2&gt;,
                              std::integral_constant&lt;int,3&gt;&gt;{});
</verbatim> returns <ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref> of <ref refid="structamrex_1_1TypeList" kindref="compound">TypeList</ref> of integral_constants {{0,2},{1,2},{0,3},{1,3}}. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" line="150" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_TypeList.H" bodystart="150" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a107cab62d5043f039671cf5b68068ddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::is_integer</definition>
        <argsstring>(const char *str)</argsstring>
        <name>is_integer</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Useful C++ Utility Functions. </para>
        </briefdescription>
        <detaileddescription>
<para>Return true if argument is a non-zero length string of digits. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="38" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="36" bodyend="48" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="38" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5d64ce961cc190a21d99afb216b879d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::is_it</definition>
        <argsstring>(std::string const &amp;s, T &amp;v)</argsstring>
        <name>is_it</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Return true and store value in v if string s is type T. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="41" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" bodystart="259" bodyend="269" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="41" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6ba24cf7211301279ca446ff282a0f8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; std::string &gt; &amp;</type>
        <definition>const std::vector&lt; std::string &gt; &amp; amrex::Tokenize</definition>
        <argsstring>(const std::string &amp;instr, const std::string &amp;separators)</argsstring>
        <name>Tokenize</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>instr</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>separators</declname>
        </param>
        <briefdescription>
<para>Splits &quot;instr&quot; into separate pieces based on &quot;separators&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="44" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="60" bodyend="109" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="44" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a67bf98d88c814ab458018afd16e64aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::toLower</definition>
        <argsstring>(std::string s)</argsstring>
        <name>toLower</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Converts all characters of the string into lower or uppercase based on std::locale. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="48" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="112" bodyend="117" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="48" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afb53573f5330e4753ad1b562e5dd95ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::toUpper</definition>
        <argsstring>(std::string s)</argsstring>
        <name>toUpper</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="49" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="120" bodyend="125" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="49" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1a8cddb9effe92e67b1ad49de145e901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::trim</definition>
        <argsstring>(std::string s, std::string const &amp;space=&quot; \t&quot;)</argsstring>
        <name>trim</name>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>space</declname>
          <defval>&quot; \t&quot;</defval>
        </param>
        <briefdescription>
<para>Trim leading and trailing white space. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="52" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="128" bodyend="135" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="52" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6e3a82e54e91d8c7543596b2c2476250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::Concatenate</definition>
        <argsstring>(const std::string &amp;root, int num, int mindigits=5)</argsstring>
        <name>Concatenate</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mindigits</declname>
          <defval>5</defval>
        </param>
        <briefdescription>
<para>Returns rootNNNN where NNNN == num. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="55" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="138" bodyend="146" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="55" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a913fd7ccf7cab45bc7d8e2a09ddd2824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::UtilCreateDirectory</definition>
        <argsstring>(const std::string &amp;path, mode_t mode, bool verbose=false)</argsstring>
        <name>UtilCreateDirectory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>mode_t</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Creates the specified directories. path may be either a full pathname or a relative pathname. It will create all the directories in the pathname, if they don&apos;t already exist, so that on successful return the pathname refers to an existing directory. Returns true or false depending upon whether or not it was successful. Also returns true if path is NULL or &quot;/&quot;. mode is the mode passed to mkdir() for any directories that must be created (for example: 0755). verbose will print out the directory creation steps. </para>
        </briefdescription>
        <detaileddescription>
<para>For example, if it is passed the string &quot;/a/b/c/d/e/f/g&quot;, it will return successfully when all the directories in the pathname exist; i.e. when the full pathname is a valid directory.</para>
<para>In a Windows environment, the path separator is a &apos;\&apos;, so that if using the example given above you must pass the string &quot;\\a\\b\\c\\d\\e\\f\\g&quot; (Note that you must escape the backslash in a character string),</para>
<para>Only the last mkdir return value is checked for success as errno may not be set to EEXIST if a directory exists but mkdir has other reasons to fail such as part of the path being a read-only filesystem (EROFS). If this function fails, it will print out an error stack. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="82" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="150" bodyend="154" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="82" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a894a812531d6362ce4ac5065c3224699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CreateDirectoryFailed</definition>
        <argsstring>(const std::string &amp;dir)</argsstring>
        <name>CreateDirectoryFailed</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Output a message and abort when couldn&apos;t create the directory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="86" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="157" bodyend="162" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="86" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac40a8be1926370de761ddd49c765d971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FileOpenFailed</definition>
        <argsstring>(const std::string &amp;dir)</argsstring>
        <name>FileOpenFailed</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Output a message and abort when couldn&apos;t open the file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="88" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="165" bodyend="170" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="88" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a51791a9a04ee140c71cee50d3615ed35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FileExists</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>FileExists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Check if a file already exists. Return true if the filename is an existing file, directory, or link. For links, this operates on the link and not what the link points to. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="95" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="173" bodyend="176" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="95" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aebee05e08302fb03e29f4270e933239c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::UniqueString</definition>
        <argsstring>()</argsstring>
        <name>UniqueString</name>
        <briefdescription>
<para>Create a (probably) unique string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="97" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="179" bodyend="185" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="97" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a832f4ad883cbc470d76cde70a099e912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::UtilCreateCleanDirectory</definition>
        <argsstring>(const std::string &amp;path, bool callbarrier=true)</argsstring>
        <name>UtilCreateCleanDirectory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>callbarrier</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Create a new directory, renaming the old one if it exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="99" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="188" bodyend="207" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="99" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aebce007d4152715af0cf44f3ab94d1fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::UtilCreateDirectoryDestructive</definition>
        <argsstring>(const std::string &amp;path, bool callbarrier=true)</argsstring>
        <name>UtilCreateDirectoryDestructive</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>callbarrier</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new directory, removing old one if it exists. This will only work on unix systems, as it has a system call. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="107" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="211" bodyend="233" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="107" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae2d0c6a2a5153df0d38d7cde07a89c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::UtilRenameDirectoryToOld</definition>
        <argsstring>(const std::string &amp;path, bool callbarrier=true)</argsstring>
        <name>UtilRenameDirectoryToOld</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>callbarrier</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Rename a current directory if it exists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="111" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="236" bodyend="252" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="111" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe890be0bd82650235456eabcf50e309" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::OutOfMemory</definition>
        <argsstring>()</argsstring>
        <name>OutOfMemory</name>
        <briefdescription>
<para>Aborts after printing message indicating out-of-memory; i.e. operator new has failed. This is the &quot;supported&quot; set_new_handler() function for <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> applications. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="118" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="255" bodyend="258" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="118" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeb571560dc9f12004d96e105ab1137e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double amrex::InvNormDist</definition>
        <argsstring>(double p)</argsstring>
        <name>InvNormDist</name>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>This function returns an approximation of the inverse cumulative standard normal distribution function. I.e., given P, it returns an approximation to the X satisfying P = Pr{Z &lt;= X} where Z is a random variable from the standard normal distribution. </para>
        </briefdescription>
        <detaileddescription>
<para>The algorithm uses a minimax approximation by rational functions and the result has a relative error whose absolute value is less than 1.15e-9.</para>
<para><simplesect kind="author"><para>Peter J. Acklam Time-stamp: 2002-06-09 18:45:44 +0200 E-mail: <ulink url="mailto:jacklam@math.uio.no">jacklam@math.uio.no</ulink> WWW URL: <ulink url="http://www.math.uio.no/~jacklam">http://www.math.uio.no/~jacklam</ulink></para>
</simplesect>
&quot;p&quot; MUST be in the open interval (0,1).</para>
<para>Entry points for Fortran:</para>
<para>REAL_T val call blinvnormdist(val)</para>
<para>Internally, the Fortran entry point calls a static Mersenne Twister object (the same one called by blutilrand()) to get a random number in the open interval (0,1), and then sets &quot;val&quot; to the result of calling <ref refid="namespaceamrex_1aeb571560dc9f12004d96e105ab1137e9" kindref="member">amrex::InvNormDist()</ref> with that random number. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="146" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="295" bodyend="374" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="146" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0dace3a79fc48a8b02686c10363b70a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double amrex::InvNormDistBest</definition>
        <argsstring>(double p)</argsstring>
        <name>InvNormDistBest</name>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>This function returns an approximation of the inverse cumulative standard normal distribution function. I.e., given P, it returns an approximation to the X satisfying P = Pr{Z &lt;= X} where Z is a random variable from the standard normal distribution. </para>
        </briefdescription>
        <detaileddescription>
<para>Original FORTRAN77 version by Michael Wichura.</para>
<para>Michael Wichura, The Percentage Points of the Normal Distribution, Algorithm AS 241, Applied Statistics, Volume 37, Number 3, pages 477-484, 1988.</para>
<para>Our version is based on the C++ version by John Burkardt.</para>
<para>The algorithm uses a minimax approximation by rational functions and the result is good to roughly machine precision. This routine is roughly 30% more costly than <ref refid="namespaceamrex_1aeb571560dc9f12004d96e105ab1137e9" kindref="member">InvNormDist()</ref> above.</para>
<para>&quot;p&quot; MUST be in the open interval (0,1).</para>
<para>Entry points for Fortran:</para>
<para>REAL_T val call blinvnormdistbest(val)</para>
<para>Internally, the Fortran entry point calls a static Mersenne Twister object (the same one called by blutilrand()) to get a random number in the open interval (0,1), and then sets &quot;val&quot; to the result of calling <ref refid="namespaceamrex_1aeb571560dc9f12004d96e105ab1137e9" kindref="member">amrex::InvNormDist()</ref> with that random number. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="179" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="415" bodyend="527" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="179" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a15ea4e09dbb2ff1919ec42ea7702d5aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::CRRBetweenLevels</definition>
        <argsstring>(int fromlevel, int tolevel, const Vector&lt; int &gt; &amp;refratios)</argsstring>
        <name>CRRBetweenLevels</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fromlevel</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>tolevel</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>refratios</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="182" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="261" bodyend="272" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="182" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aff6b4420435f9951710a37eda411db8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;, const expect &amp;exp)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <defname>is</defname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1expect" kindref="compound">expect</ref> &amp;</type>
          <declname>exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="186" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="534" bodyend="556" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="186" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac55f6d6246ea70d74588e5f06fd92e99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt;</type>
        <definition>amrex::Vector&lt; char &gt; amrex::SerializeStringArray</definition>
        <argsstring>(const Vector&lt; std::string &gt; &amp;stringArray)</argsstring>
        <name>SerializeStringArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>stringArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="224" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="859" bodyend="870" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="224" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a23045f55caabc0bec388518c4c4adecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;</type>
        <definition>amrex::Vector&lt; std::string &gt; amrex::UnSerializeStringArray</definition>
        <argsstring>(const Vector&lt; char &gt; &amp;charArray)</argsstring>
        <name>UnSerializeStringArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt; &amp;</type>
          <declname>charArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="225" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="872" bodyend="885" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="225" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a09ef310468cc24552cfc73abfc282b72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SyncStrings</definition>
        <argsstring>(const Vector&lt; std::string &gt; &amp;localStrings, Vector&lt; std::string &gt; &amp;syncedStrings, bool &amp;alreadySynced)</argsstring>
        <name>SyncStrings</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>localStrings</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>syncedStrings</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>alreadySynced</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="226" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="697" bodyend="857" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="226" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7eba5dd365d87751a963b6bd078673c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Long</type>
        <definition>Long amrex::bytesOf</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>bytesOf</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="235" column="22" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="235" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a87b15ece376f09dacd5bb7e8f266a6bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Key</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>class Compare</type>
          </param>
        </templateparamlist>
        <type>Long</type>
        <definition>Long amrex::bytesOf</definition>
        <argsstring>(const std::map&lt; Key, T, Compare &gt; &amp;m)</argsstring>
        <name>bytesOf</name>
        <param>
          <type>const std::map&lt; Key, T, Compare &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="236" column="26" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="236" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af0fd43716fb89a13154ed4c037ebe6e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BroadcastBool</definition>
        <argsstring>(bool &amp;bBool, int myLocalId, int rootId, const MPI_Comm &amp;localComm)</argsstring>
        <name>BroadcastBool</name>
        <param>
          <type>bool &amp;</type>
          <declname>bBool</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>myLocalId</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rootId</declname>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>localComm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="238" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="887" bodyend="899" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="238" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa60205e03d594df934b5b3afd723c764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BroadcastString</definition>
        <argsstring>(std::string &amp;bStr, int myLocalId, int rootId, const MPI_Comm &amp;localComm)</argsstring>
        <name>BroadcastString</name>
        <param>
          <type>std::string &amp;</type>
          <declname>bStr</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>myLocalId</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rootId</declname>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>localComm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="240" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="902" bodyend="916" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="240" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1bfd620fc96f18d04313d70ccca85bfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BroadcastStringArray</definition>
        <argsstring>(Vector&lt; std::string &gt; &amp;bSA, int myLocalId, int rootId, const MPI_Comm &amp;localComm)</argsstring>
        <name>BroadcastStringArray</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>bSA</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>myLocalId</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rootId</declname>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>localComm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="241" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="918" bodyend="930" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="241" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8cf9dce7670dcc62897405af53fafcff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::BroadcastArray</definition>
        <argsstring>(Vector&lt; T &gt; &amp;aT, int myLocalId, int rootId, const MPI_Comm &amp;localComm)</argsstring>
        <name>BroadcastArray</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>aT</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>myLocalId</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rootId</declname>
        </param>
        <param>
          <type>const <ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref> &amp;</type>
          <declname>localComm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="243" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" bodystart="271" bodyend="285" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="243" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae0cfc6441bbe3f6e424e8a3fdd99bfe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Sleep</definition>
        <argsstring>(double sleepsec)</argsstring>
        <name>Sleep</name>
        <param>
          <type>double</type>
          <declname>sleepsec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="245" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="932" bodyend="934" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="245" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6f975f843338c8eada684f0e8e2c0cb7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double amrex::second</definition>
        <argsstring>() noexcept</argsstring>
        <name>second</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="251" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.cpp" bodystart="941" bodyend="945" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="251" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adce3325c7a4208e21f4cecc984bfb8b9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::hash_combine</definition>
        <argsstring>(uint64_t &amp;seed, const T &amp;val) noexcept</argsstring>
        <name>hash_combine</name>
        <param>
          <type>uint64_t &amp;</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="253" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" bodystart="401" bodyend="404" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="253" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a72ebcf044c2dabd659e4ed5831cadc5e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>uint64_t</type>
        <definition>uint64_t amrex::hash_vector</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;vec, uint64_t seed=0xDEADBEEFDEADBEEF) noexcept</argsstring>
        <name>hash_vector</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
          <defval>0xDEADBEEFDEADBEEF</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" line="254" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" bodystart="408" bodyend="414" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Utility.H" declline="254" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4ad8b7a21907586ee3a86bda5163cd2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename T::FABType</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T * &gt;</type>
        <definition>Vector&lt;T*&gt; amrex::GetVecOfPtrs</definition>
        <argsstring>(Vector&lt; T &gt; &amp;a)</argsstring>
        <name>GetVecOfPtrs</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="62" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="62" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a22a501f5be1e47c511f000546bcae72a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T * &gt;</type>
        <definition>Vector&lt;T*&gt; amrex::GetVecOfPtrs</definition>
        <argsstring>(const Vector&lt; std::unique_ptr&lt; T &gt; &gt; &amp;a)</argsstring>
        <name>GetVecOfPtrs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; T &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="71" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="71" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2eb81423f83e826a61bafde352b67e98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename T::FABType</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const T * &gt;</type>
        <definition>Vector&lt;const T*&gt; amrex::GetVecOfConstPtrs</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;a)</argsstring>
        <name>GetVecOfConstPtrs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="82" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="82" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a36a4c65f6872127d9a779ef9f971777d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const T * &gt;</type>
        <definition>Vector&lt;const T*&gt; amrex::GetVecOfConstPtrs</definition>
        <argsstring>(const Vector&lt; std::unique_ptr&lt; T &gt; &gt; &amp;a)</argsstring>
        <name>GetVecOfConstPtrs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; T &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="91" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="91" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad81d1dc85ec8a07638d52c68933abfd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename T::FABType</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const T * &gt;</type>
        <definition>Vector&lt;const T*&gt; amrex::GetVecOfConstPtrs</definition>
        <argsstring>(const Vector&lt; T * &gt; &amp;a)</argsstring>
        <name>GetVecOfConstPtrs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T * &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="100" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a77fdd4258ec656fb99a6124a73501803" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T * &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;T*&gt; &gt; amrex::GetVecOfVecOfPtrs</definition>
        <argsstring>(const Vector&lt; Vector&lt; std::unique_ptr&lt; T &gt; &gt; &gt; &amp;a)</argsstring>
        <name>GetVecOfVecOfPtrs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; T &gt; &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="108" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="108" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab2d0c11a4714995352cd0eeaddd46a83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::array&lt; T *, AMREX_SPACEDIM &gt; &gt;</type>
        <definition>Vector&lt;std::array&lt;T*,AMREX_SPACEDIM&gt; &gt; amrex::GetVecOfArrOfPtrs</definition>
        <argsstring>(const Vector&lt; std::array&lt; std::unique_ptr&lt; T &gt;, AMREX_SPACEDIM &gt; &gt; &amp;a)</argsstring>
        <name>GetVecOfArrOfPtrs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::array&lt; std::unique_ptr&lt; T &gt;, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="121" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="121" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae6f3120a07be5d453851d7de53703384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::array&lt; T const  *, AMREX_SPACEDIM &gt; &gt;</type>
        <definition>Vector&lt;std::array&lt;T const*,AMREX_SPACEDIM&gt; &gt; amrex::GetVecOfArrOfPtrsConst</definition>
        <argsstring>(const Vector&lt; std::array&lt; std::unique_ptr&lt; T &gt;, AMREX_SPACEDIM &gt; &gt; &amp;a)</argsstring>
        <name>GetVecOfArrOfPtrsConst</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::array&lt; std::unique_ptr&lt; T &gt;, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="131" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="131" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab7fafb7796437478ea1c29c88bd43b9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::array&lt; T const  *, AMREX_SPACEDIM &gt; &gt;</type>
        <definition>Vector&lt;std::array&lt;T const*,AMREX_SPACEDIM&gt; &gt; amrex::GetVecOfArrOfConstPtrs</definition>
        <argsstring>(const Vector&lt; std::array&lt; std::unique_ptr&lt; T &gt;, AMREX_SPACEDIM &gt; &gt; &amp;a)</argsstring>
        <name>GetVecOfArrOfConstPtrs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::array&lt; std::unique_ptr&lt; T &gt;, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="141" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="141" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa423925924f08a1c7ca9edb379cb98c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; IsFabArray&lt; T &gt;::value||IsBaseFab&lt; T &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::array&lt; T const  *, AMREX_SPACEDIM &gt; &gt;</type>
        <definition>Vector&lt;std::array&lt;T const*,AMREX_SPACEDIM&gt; &gt; amrex::GetVecOfArrOfConstPtrs</definition>
        <argsstring>(const Vector&lt; std::array&lt; T, AMREX_SPACEDIM &gt; &gt; &amp;a)</argsstring>
        <name>GetVecOfArrOfConstPtrs</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::array&lt; T, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="153" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="153" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aec75969bb3da627de560ce6fae63b167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; IsFabArray&lt; T &gt;::value||IsBaseFab&lt; T &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::array&lt; T *, AMREX_SPACEDIM &gt; &gt;</type>
        <definition>Vector&lt;std::array&lt;T*, AMREX_SPACEDIM&gt; &gt; amrex::GetVecOfArrOfPtrs</definition>
        <argsstring>(Vector&lt; std::array&lt; T, AMREX_SPACEDIM &gt; &gt; &amp;a)</argsstring>
        <name>GetVecOfArrOfPtrs</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::array&lt; T, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="165" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="165" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aabc637934b6fa1a7b0664ad3b61f0f69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FillNull</definition>
        <argsstring>(Vector&lt; T * &gt; &amp;a)</argsstring>
        <name>FillNull</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T * &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="177" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abc4288a3fe5ceaea66583df8f170785f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FillNull</definition>
        <argsstring>(Vector&lt; std::unique_ptr&lt; T &gt; &gt; &amp;a)</argsstring>
        <name>FillNull</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; T &gt; &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="183" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adc731523d4241d981e7279b29c5d7a6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::RemoveDuplicates</definition>
        <argsstring>(Vector&lt; T &gt; &amp;vec)</argsstring>
        <name>RemoveDuplicates</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="191" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="191" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7c59b1fe9bc7b0498852cb74d7df5a76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class H</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::RemoveDuplicates</definition>
        <argsstring>(Vector&lt; T &gt; &amp;vec)</argsstring>
        <name>RemoveDuplicates</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" line="281" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Vector.H" bodystart="281" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aefc8755fb6847a4dc04d7de6a11bb9ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeIntData</definition>
        <argsstring>(const int *data, std::size_t size, std::ostream &amp;os, const IntDescriptor &amp;id=FPC::NativeIntDescriptor())</argsstring>
        <name>writeIntData</name>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
          <defval><ref refid="classamrex_1_1FPC_1a9cad45e259106beaa8e4dc56f613bd06" kindref="member">FPC::NativeIntDescriptor</ref>()</defval>
        </param>
        <briefdescription>
<para>Functions for writing integer data to disk in a portable, self-describing manner. </para>
        </briefdescription>
        <detaileddescription>
<para>Write int data to the ostream. The arguments are a pointer to data to write, the size of the data buffer, the ostream, and an optional <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> that describes the data format to use for writing. If no <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> is provided, the data will be written using the native format for your machine. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="22" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="6" bodyend="28" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" declline="22" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a69bf266cc5fefb0b385d84f685dd0df6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readIntData</definition>
        <argsstring>(int *data, std::size_t size, std::istream &amp;is, const IntDescriptor &amp;id)</argsstring>
        <name>readIntData</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read int data from the istream. The arguments are a pointer to data buffer to read into, the size of that buffer, the istream, and an <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> that describes the format of the data on disk. The buffer is assumed to be large enough to store &apos;size&apos; integers, and it is the user&apos;s reponsiblity to allocate this data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="30" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="30" bodyend="52" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" declline="30" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a601aaf049a30edfae3541b7f8ae1e0fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeLongData</definition>
        <argsstring>(const Long *data, std::size_t size, std::ostream &amp;os, const IntDescriptor &amp;id=FPC::NativeLongDescriptor())</argsstring>
        <name>writeLongData</name>
        <param>
          <type>const Long *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
          <defval><ref refid="classamrex_1_1FPC_1a6f67a43bd516bcc9547cb3b76424b2b8" kindref="member">FPC::NativeLongDescriptor</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write long data to the ostream. The arguments are a pointer to data to write, the size of the data buffer, the ostream, and an optional <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> that describes the data format to use for writing. If no <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> is provided, the data will be written using the native format for your machine. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="37" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="54" bodyend="76" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" declline="37" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa5a1f4f1c5cbe7672f12c62b9db96746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readLongData</definition>
        <argsstring>(Long *data, std::size_t size, std::istream &amp;is, const IntDescriptor &amp;id)</argsstring>
        <name>readLongData</name>
        <param>
          <type>Long *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read int data from the istream. The arguments are a pointer to data buffer to read into, the size of that buffer, the istream, and an <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref> that describes the format of the data on disk. The buffer is assumed to be large enough to store &apos;size&apos; longs, and it is the user&apos;s reponsiblity to allocate this data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="45" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="78" bodyend="100" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" declline="45" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af9790d1f61a6d21ce4e9f92c58ac0600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeRealData</definition>
        <argsstring>(const Real *data, std::size_t size, std::ostream &amp;os, const RealDescriptor &amp;rd=FPC::NativeRealDescriptor())</argsstring>
        <name>writeRealData</name>
        <param>
          <type>const Real *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
          <defval><ref refid="classamrex_1_1FPC_1ab470772000cfb5f507edc5f294383bbc" kindref="member">FPC::NativeRealDescriptor</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write Real data to the ostream. The arguments are a pointer to data to write, the size of the data buffer, the ostream, and an optional <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> that describes the data format to use for writing. If no <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> is provided, the data will be written using the native format for your machine. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="52" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="102" bodyend="106" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" declline="52" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa6f624229959bee80f1444371bb5babc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readRealData</definition>
        <argsstring>(Real *data, std::size_t size, std::istream &amp;is, const RealDescriptor &amp;rd)</argsstring>
        <name>readRealData</name>
        <param>
          <type>Real *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read Real data from the istream. The arguments are a pointer to data buffer to read into, the size of that buffer, the istream, and a <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> that describes the format of the data on disk. The buffer is assumed to be large enough to store &apos;size&apos; Reals, and it is the user&apos;s reponsiblity to allocate this data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="60" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="108" bodyend="112" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" declline="60" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4f9c3dd444d301063e6190234413bda4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeFloatData</definition>
        <argsstring>(const float *data, std::size_t size, std::ostream &amp;os, const RealDescriptor &amp;rd=FPC::Native32RealDescriptor())</argsstring>
        <name>writeFloatData</name>
        <param>
          <type>const float *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
          <defval><ref refid="classamrex_1_1FPC_1a56bb549e278ccc2611fd389c3d2b6bdb" kindref="member">FPC::Native32RealDescriptor</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write float data to the ostream. The arguments are a pointer to data to write, the size of the data buffer, the ostream, and an optional <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> that describes the data format to use for writing. If no <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> is provided, the data will be written using the native format for your machine. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="68" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="114" bodyend="118" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" declline="68" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4c085d3b27d107f62bdb36f5ecc0f326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readFloatData</definition>
        <argsstring>(float *data, std::size_t size, std::istream &amp;is, const RealDescriptor &amp;rd)</argsstring>
        <name>readFloatData</name>
        <param>
          <type>float *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read float data from the istream. The arguments are a pointer to data buffer to read into, the size of that buffer, the istream, and a <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> that describes the format of the data on disk. The buffer is assumed to be large enough to store &apos;size&apos; Reals, and it is the user&apos;s reponsiblity to allocate this data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="76" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="120" bodyend="124" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" declline="76" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9cb2d187853bfabaaf7d74de8c950c25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeDoubleData</definition>
        <argsstring>(const double *data, std::size_t size, std::ostream &amp;os, const RealDescriptor &amp;rd=FPC::Native64RealDescriptor())</argsstring>
        <name>writeDoubleData</name>
        <param>
          <type>const double *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
          <defval><ref refid="classamrex_1_1FPC_1a3e122a19b07bc732bf83c360354ef2a4" kindref="member">FPC::Native64RealDescriptor</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write double data to the ostream. The arguments are a pointer to data to write, the size of the data buffer, the ostream, and an optional <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> that describes the data format to use for writing. If no <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> is provided, the data will be written using the native format for your machine. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="84" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="126" bodyend="130" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" declline="84" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac590394599f7ea721cf8999331d0436e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readDoubleData</definition>
        <argsstring>(double *data, std::size_t size, std::istream &amp;is, const RealDescriptor &amp;rd)</argsstring>
        <name>readDoubleData</name>
        <param>
          <type>double *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read double data from the istream. The arguments are a pointer to data buffer to read into, the size of that buffer, the istream, and a <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> that describes the format of the data on disk. The buffer is assumed to be large enough to store &apos;size&apos; Reals, and it is the user&apos;s reponsiblity to allocate this data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="92" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp" bodystart="132" bodyend="136" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" declline="92" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac0401938be1aa864fb878ee171a6fb14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeData</definition>
        <argsstring>(int const *data, std::size_t size, std::ostream &amp;os)</argsstring>
        <name>writeData</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="95" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a01a43d1a99e96ce0f348dc5659029a6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeData</definition>
        <argsstring>(Long const *data, std::size_t size, std::ostream &amp;os)</argsstring>
        <name>writeData</name>
        <param>
          <type>Long const *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="100" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2e3bdcedf2e665446f241d3d34cb5b31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeData</definition>
        <argsstring>(float const *data, std::size_t size, std::ostream &amp;os)</argsstring>
        <name>writeData</name>
        <param>
          <type>float const *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="105" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1950e496a6aafaad04f6b147af3bd6e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writeData</definition>
        <argsstring>(double const *data, std::size_t size, std::ostream &amp;os)</argsstring>
        <name>writeData</name>
        <param>
          <type>double const *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="110" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5836a4ae751b9857848ec279e0a7dc4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readData</definition>
        <argsstring>(int *data, std::size_t size, std::istream &amp;is)</argsstring>
        <name>readData</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="115" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9b9259c0e2e12b54971dac6fe224ba97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readData</definition>
        <argsstring>(Long *data, std::size_t size, std::istream &amp;is)</argsstring>
        <name>readData</name>
        <param>
          <type>Long *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="120" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afd3603d5627ea48a5c25919fa90482f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readData</definition>
        <argsstring>(float *data, std::size_t size, std::istream &amp;is)</argsstring>
        <name>readData</name>
        <param>
          <type>float *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="125" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9bed38ec3405646ecda2cfbd8b179733" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::readData</definition>
        <argsstring>(double *data, std::size_t size, std::istream &amp;is)</argsstring>
        <name>readData</name>
        <param>
          <type>double *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" line="130" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.H" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af58b88f2bf12a834f4885dcf327fbeba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const VisMF::FabOnDisk &amp;fod)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1VisMF_1_1FabOnDisk" kindref="compound">VisMF::FabOnDisk</ref> &amp;</type>
          <declname>fod</declname>
        </param>
        <briefdescription>
<para>Write a FabOnDisk to an ostream in ASCII. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="107" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="108" bodyend="117" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.H" declline="356" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abbd06906c35c69c96f95404ef3837e15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, VisMF::FabOnDisk &amp;fod)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1VisMF_1_1FabOnDisk" kindref="compound">VisMF::FabOnDisk</ref> &amp;</type>
          <declname>fod</declname>
        </param>
        <briefdescription>
<para>Read a FabOnDisk from an istream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="120" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="120" bodyend="135" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.H" declline="358" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aadb6da61ab59ea2923bdf326e791654a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Vector&lt; VisMF::FabOnDisk &gt; &amp;fa)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structamrex_1_1VisMF_1_1FabOnDisk" kindref="compound">VisMF::FabOnDisk</ref> &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <briefdescription>
<para>Write an Vector&lt;FabOnDisk&gt; to an ostream in ASCII. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="137" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="138" bodyend="154" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.H" declline="360" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a35e6a4a987e55646e4f33c6827554dea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Vector&lt; VisMF::FabOnDisk &gt; &amp;fa)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structamrex_1_1VisMF_1_1FabOnDisk" kindref="compound">VisMF::FabOnDisk</ref> &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <briefdescription>
<para>Read an Vector&lt;FabOnDisk&gt; from an istream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="157" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="157" bodyend="176" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.H" declline="362" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a85a195c43f85ba86fc9f4e450117678a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>static std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Vector&lt; Vector&lt; Real &gt; &gt; &amp;ar)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &gt; &amp;</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="179" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="180" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6b07822fe1224c3ededd1f68fce74b8b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>static std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Vector&lt; Vector&lt; Real &gt; &gt; &amp;ar)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &gt; &amp;</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="205" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="205" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1637e435aecce22da819f6df77982d2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const VisMF::Header &amp;hd)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">VisMF::Header</ref> &amp;</type>
          <declname>hd</declname>
        </param>
        <briefdescription>
<para>Write a <ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">VisMF::Header</ref> to an ostream in ASCII. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="251" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="252" bodyend="317" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.H" declline="364" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abd04f69e01ce3c15f6788670823386e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream &amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, VisMF::Header &amp;hd)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">VisMF::Header</ref> &amp;</type>
          <declname>hd</declname>
        </param>
        <briefdescription>
<para>Read a <ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">VisMF::Header</ref> from an istream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" line="320" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.cpp" bodystart="320" bodyend="399" declfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.H" declline="366" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa5838751a7a525b60158ebdae7e8919f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_same&lt; FAB, <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;std::is_same&lt;FAB,IArrayBox&gt;::value&gt; amrex::Write</definition>
        <argsstring>(const FabArray&lt; FAB &gt; &amp;fa, const std::string &amp;name)</argsstring>
        <name>Write</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Write iMultiFab/FabArray&lt;IArrayBox&gt; </para>
        </briefdescription>
        <detaileddescription>
<para>This writes an iMultiFab/FabArray&lt;IArrayBox&gt; to files on disk, including a clear text file NAME_H and binary files NAME_D_00000 etc.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fa</parametername>
</parameternamelist>
<parameterdescription>
<para>is the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>is the base name for the files. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.H" line="380" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.H" bodystart="380" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad7c4906fd7d4c6640ae4954b1ed33a12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FAB</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; std::is_same&lt; FAB, <ref refid="classamrex_1_1IArrayBox" kindref="compound">IArrayBox</ref> &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;std::is_same&lt;FAB,IArrayBox&gt;::value&gt; amrex::Read</definition>
        <argsstring>(FabArray&lt; FAB &gt; &amp;fa, const std::string &amp;name)</argsstring>
        <name>Read</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Read iMultiFab/FabArray&lt;IArrayBox&gt; </para>
        </briefdescription>
        <detaileddescription>
<para>This reads an iMultiFab/FabArray&lt;IArrayBox&gt; from disk. If it has been fully defined, the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> on the disk must match the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> in the given iMultiFab/FabArray&lt;IArrayBox&gt; object. If it is only constructed with the default constructor, the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> on the disk will be used and a new <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> will be made. When this funciton is used to restart a calculation from checkpoint files, one should use a fully defined iMultiFab/FabArray&lt;IArrayBox&gt; except for the first one in a series of iMultiFab/MultiFab objects that share the same BoxArray/DistributionMapping. This will ensure that they share the same BoxArray/DistributionMapping after restart.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fa</parametername>
</parameternamelist>
<parameterdescription>
<para>is the <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>is the base name for the files. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.H" line="557" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_VisMF.H" bodystart="557" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a74c4f5d44e04b4bcdcd36bed95e7bf83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>static int amrex::iparser_local_symbol_index</definition>
        <argsstring>(struct iparser_symbol *sym, Vector&lt; char * &gt; &amp;local_variables)</argsstring>
        <name>iparser_local_symbol_index</name>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__symbol" kindref="compound">iparser_symbol</ref> *</type>
          <declname>sym</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt; &amp;</type>
          <declname>local_variables</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Exe.cpp" line="5" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Exe.cpp" bodystart="5" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9e29ab190e699a3c430702947738d8e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iparser_compile_exe_size</definition>
        <argsstring>(struct iparser_node *node, char *&amp;p, std::size_t &amp;exe_size, int &amp;max_stack_size, int &amp;stack_size, Vector&lt; char * &gt; &amp;local_variables)</argsstring>
        <name>iparser_compile_exe_size</name>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>char *&amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::size_t &amp;</type>
          <declname>exe_size</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>max_stack_size</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>stack_size</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt; &amp;</type>
          <declname>local_variables</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Exe.cpp" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Exe.cpp" bodystart="17" bodyend="741" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Exe.H" declline="505" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad039e80ae018406acf669ef6a636c84f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::iparser_exe_eval</definition>
        <argsstring>(char *p, int const *x)</argsstring>
        <name>iparser_exe_eval</name>
        <param>
          <type>char *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Exe.H" line="240" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Exe.H" bodystart="240" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af1d7e398d54b82b8d785096e8030b983" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::iparser_exe_size</definition>
        <argsstring>(struct amrex_iparser *parser, int &amp;max_stack_size, int &amp;stack_size)</argsstring>
        <name>iparser_exe_size</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__iparser" kindref="compound">amrex_iparser</ref> *</type>
          <declname>parser</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>max_stack_size</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>stack_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Exe.H" line="509" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Exe.H" bodystart="509" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1da2fea26697c988c6d678cc8945d283" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iparser_compile</definition>
        <argsstring>(struct amrex_iparser *parser, char *p)</argsstring>
        <name>iparser_compile</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__iparser" kindref="compound">amrex_iparser</ref> *</type>
          <declname>parser</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Exe.H" line="522" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Exe.H" bodystart="522" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac7a5d02f651cdb8b30aa2a0de332d670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iparser_defexpr</definition>
        <argsstring>(struct iparser_node *body)</argsstring>
        <name>iparser_defexpr</name>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="26" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="26" bodyend="29" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="133" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac283fe1c5d28044a723b5c8a46272f75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1iparser__symbol" kindref="compound">iparser_symbol</ref> *</type>
        <definition>struct iparser_symbol * amrex::iparser_makesymbol</definition>
        <argsstring>(char *name)</argsstring>
        <name>iparser_makesymbol</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="32" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="32" bodyend="39" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="134" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a68fd17a00f11528cc052eee4ffc80de8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
        <definition>struct iparser_node * amrex::iparser_newnode</definition>
        <argsstring>(enum iparser_node_t type, struct iparser_node *l, struct iparser_node *r)</argsstring>
        <name>iparser_newnode</name>
        <param>
          <type>enum <ref refid="namespaceamrex_1ae5dab25e68f818f498a07a4507d7360e" kindref="member">iparser_node_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>l</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="42" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="42" bodyend="49" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="135" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4ae13277786041d56a4c1e4bbf2e8702" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
        <definition>struct iparser_node * amrex::iparser_newnumber</definition>
        <argsstring>(int d)</argsstring>
        <name>iparser_newnumber</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="52" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="52" bodyend="58" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="137" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae9552f2b805ddfac6a62dba634f5bcb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
        <definition>struct iparser_node * amrex::iparser_newsymbol</definition>
        <argsstring>(struct iparser_symbol *symbol)</argsstring>
        <name>iparser_newsymbol</name>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__symbol" kindref="compound">iparser_symbol</ref> *</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="61" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="61" bodyend="64" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="138" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1dc360a0d65213a9d6cce4e3c5145a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
        <definition>struct iparser_node * amrex::iparser_newf1</definition>
        <argsstring>(enum iparser_f1_t ftype, struct iparser_node *l)</argsstring>
        <name>iparser_newf1</name>
        <param>
          <type>enum <ref refid="namespaceamrex_1a600c31f56b7c1fc9fed39775fc745399" kindref="member">iparser_f1_t</ref></type>
          <declname>ftype</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="67" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="67" bodyend="74" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="139" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a152cc978ed680133a953922463541f68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
        <definition>struct iparser_node * amrex::iparser_newf2</definition>
        <argsstring>(enum iparser_f2_t ftype, struct iparser_node *l, struct iparser_node *r)</argsstring>
        <name>iparser_newf2</name>
        <param>
          <type>enum <ref refid="namespaceamrex_1a9f73a0b38577743c875e56fd6c89de7d" kindref="member">iparser_f2_t</ref></type>
          <declname>ftype</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>l</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="77" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="77" bodyend="85" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="140" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0b4c71ba95b7e107e4dedc3077c0c5ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
        <definition>struct iparser_node * amrex::iparser_newf3</definition>
        <argsstring>(enum iparser_f3_t ftype, struct iparser_node *n1, struct iparser_node *n2, struct iparser_node *n3)</argsstring>
        <name>iparser_newf3</name>
        <param>
          <type>enum <ref refid="namespaceamrex_1af30c8b25dcfaa74c444959a075767843" kindref="member">iparser_f3_t</ref></type>
          <declname>ftype</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>n2</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>n3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="88" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="88" bodyend="98" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="142" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa08464d7633bb6fcba918c743263f295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
        <definition>struct iparser_node * amrex::iparser_newassign</definition>
        <argsstring>(struct iparser_symbol *sym, struct iparser_node *v)</argsstring>
        <name>iparser_newassign</name>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__symbol" kindref="compound">iparser_symbol</ref> *</type>
          <declname>sym</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="101" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="101" bodyend="108" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="144" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8710f394abe007b53737084c8bbd3021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
        <definition>struct iparser_node * amrex::iparser_newlist</definition>
        <argsstring>(struct iparser_node *nl, struct iparser_node *nr)</argsstring>
        <name>iparser_newlist</name>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>nl</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>nr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="111" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="111" bodyend="122" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="145" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a414ba7de5a008178d4fa0953a6e69073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1amrex__iparser" kindref="compound">amrex_iparser</ref> *</type>
        <definition>struct amrex_iparser * amrex::amrex_iparser_new</definition>
        <argsstring>()</argsstring>
        <name>amrex_iparser_new</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="127" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="127" bodyend="144" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="160" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a79e084d7248e50fe5cd9f6037db2b2e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::amrex_iparser_delete</definition>
        <argsstring>(struct amrex_iparser *iparser)</argsstring>
        <name>amrex_iparser_delete</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__iparser" kindref="compound">amrex_iparser</ref> *</type>
          <declname>iparser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="147" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="147" bodyend="151" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="161" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aafbda5cdacdfa15125b507b013b19c4b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>static std::size_t amrex::iparser_aligned_size</definition>
        <argsstring>(std::size_t N)</argsstring>
        <name>iparser_aligned_size</name>
        <param>
          <type>std::size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="155" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="155" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9abdf6259c081b4f3b80eea3e8e2d45c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* amrex::iparser_allocate</definition>
        <argsstring>(struct amrex_iparser *my_iparser, std::size_t N)</argsstring>
        <name>iparser_allocate</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__iparser" kindref="compound">amrex_iparser</ref> *</type>
          <declname>my_iparser</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="165" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="165" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad22cca51d4bfda06050d7f02e555131b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1amrex__iparser" kindref="compound">amrex_iparser</ref> *</type>
        <definition>struct amrex_iparser * amrex::iparser_dup</definition>
        <argsstring>(struct amrex_iparser *source)</argsstring>
        <name>iparser_dup</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__iparser" kindref="compound">amrex_iparser</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="173" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="173" bodyend="183" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="163" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a88284344fbc21e1fad73e0f2e4280394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::iparser_ast_size</definition>
        <argsstring>(struct iparser_node *node)</argsstring>
        <name>iparser_ast_size</name>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="186" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="186" bodyend="252" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="174" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6d20135c80c410cae70ceca17c5fd7bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
        <definition>struct iparser_node * amrex::iparser_ast_dup</definition>
        <argsstring>(struct amrex_iparser *my_iparser, struct iparser_node *node, int move)</argsstring>
        <name>iparser_ast_dup</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__iparser" kindref="compound">amrex_iparser</ref> *</type>
          <declname>my_iparser</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>move</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="255" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="255" bodyend="354" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="164" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a86b9b9521f3dd1de76b9815dcdc7b9d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iparser_ast_optimize</definition>
        <argsstring>(struct iparser_node *node)</argsstring>
        <name>iparser_ast_optimize</name>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="377" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="377" bodyend="974" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="173" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a89edeb0208499eb17f8a7842afc94262" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::iparser_ast_print_f1</definition>
        <argsstring>(struct iparser_f1 *f1, std::string const &amp;space, AllPrint &amp;printer)</argsstring>
        <name>iparser_ast_print_f1</name>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__f1" kindref="compound">iparser_f1</ref> *</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>space</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1AllPrint" kindref="compound">AllPrint</ref> &amp;</type>
          <declname>printer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="978" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="978" bodyend="987"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3fbb4b53a6ebe72b571623661c8b11e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::iparser_ast_print_f2</definition>
        <argsstring>(struct iparser_f2 *f2, std::string const &amp;space, AllPrint &amp;printer)</argsstring>
        <name>iparser_ast_print_f2</name>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__f2" kindref="compound">iparser_f2</ref> *</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>space</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1AllPrint" kindref="compound">AllPrint</ref> &amp;</type>
          <declname>printer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="991" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="991" bodyend="1036"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8b36d58ea6031ba8b4629507349f4c0d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::iparser_ast_print_f3</definition>
        <argsstring>(struct iparser_f3 *f3, std::string const &amp;space, AllPrint &amp;printer)</argsstring>
        <name>iparser_ast_print_f3</name>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__f3" kindref="compound">iparser_f3</ref> *</type>
          <declname>f3</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>space</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1AllPrint" kindref="compound">AllPrint</ref> &amp;</type>
          <declname>printer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="1040" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="1040" bodyend="1053"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2e832571b607617664a8a588c69a0dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iparser_ast_print</definition>
        <argsstring>(struct iparser_node *node, std::string const &amp;space, AllPrint &amp;printer)</argsstring>
        <name>iparser_ast_print</name>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>space</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1AllPrint" kindref="compound">AllPrint</ref> &amp;</type>
          <declname>printer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="1056" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="1056" bodyend="1151" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="175" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5632af39a73771c9c4131e718495680f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::iparser_ast_depth</definition>
        <argsstring>(struct iparser_node *node)</argsstring>
        <name>iparser_ast_depth</name>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="1154" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="1154" bodyend="1208" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="180" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acaf77a8dc997257b02f28ac1bebe36e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iparser_ast_regvar</definition>
        <argsstring>(struct iparser_node *node, char const *name, int i)</argsstring>
        <name>iparser_ast_regvar</name>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="1211" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="1211" bodyend="1273" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="176" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3e859475342dc12d24219ccd9ff56ed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iparser_ast_setconst</definition>
        <argsstring>(struct iparser_node *node, char const *name, int c)</argsstring>
        <name>iparser_ast_setconst</name>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="1275" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="1275" bodyend="1328" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="177" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8b3a32551ba0090abf9e5bf7578dbd3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iparser_ast_get_symbols</definition>
        <argsstring>(struct iparser_node *node, std::set&lt; std::string &gt; &amp;symbols, std::set&lt; std::string &gt; &amp;local_symbols)</argsstring>
        <name>iparser_ast_get_symbols</name>
        <param>
          <type>struct <ref refid="structamrex_1_1iparser__node" kindref="compound">iparser_node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::set&lt; std::string &gt; &amp;</type>
          <declname>symbols</declname>
        </param>
        <param>
          <type>std::set&lt; std::string &gt; &amp;</type>
          <declname>local_symbols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="1330" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="1330" bodyend="1382" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="178" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa6886a6d87a263d5db6152fe44c96c82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iparser_regvar</definition>
        <argsstring>(struct amrex_iparser *iparser, char const *name, int i)</argsstring>
        <name>iparser_regvar</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__iparser" kindref="compound">amrex_iparser</ref> *</type>
          <declname>iparser</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="1385" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="1385" bodyend="1388" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="166" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8352463db302787dc5251fbaac3ad1bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iparser_setconst</definition>
        <argsstring>(struct amrex_iparser *iparser, char const *name, int c)</argsstring>
        <name>iparser_setconst</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__iparser" kindref="compound">amrex_iparser</ref> *</type>
          <declname>iparser</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="1391" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="1391" bodyend="1395" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="167" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a28e7f8ece961d58ec22229b2396fbc65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::iparser_print</definition>
        <argsstring>(struct amrex_iparser *iparser)</argsstring>
        <name>iparser_print</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__iparser" kindref="compound">amrex_iparser</ref> *</type>
          <declname>iparser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="1398" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="1398" bodyend="1402" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="168" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2f629d5b7394b73cda3c7cee2e05c42b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; std::string &gt;</type>
        <definition>std::set&lt; std::string &gt; amrex::iparser_get_symbols</definition>
        <argsstring>(struct amrex_iparser *iparser)</argsstring>
        <name>iparser_get_symbols</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__iparser" kindref="compound">amrex_iparser</ref> *</type>
          <declname>iparser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="1405" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="1405" bodyend="1414" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="169" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acb6b901b917abe69e9bcc985016b7de6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::iparser_depth</definition>
        <argsstring>(struct amrex_iparser *iparser)</argsstring>
        <name>iparser_depth</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__iparser" kindref="compound">amrex_iparser</ref> *</type>
          <declname>iparser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" line="1417" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.cpp" bodystart="1417" bodyend="1420" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" declline="170" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1e8649e5102d2b4265e20dc7078a1f36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::iparser_call_f1</definition>
        <argsstring>(enum iparser_f1_t, int a)</argsstring>
        <name>iparser_call_f1</name>
        <param>
          <type>enum</type>
          <declname>iparser_f1_t</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>There is only one type for now</para>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" line="185" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" bodystart="185" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac4b0e461dbbc023e7118a2669dcf325f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::iparser_call_f2</definition>
        <argsstring>(enum iparser_f2_t type, int a, int b)</argsstring>
        <name>iparser_call_f2</name>
        <param>
          <type>enum <ref refid="namespaceamrex_1a9f73a0b38577743c875e56fd6c89de7d" kindref="member">iparser_f2_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" line="192" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" bodystart="192" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0a04e2b8b8135ae4d70dde056ef9f50e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::iparser_call_f3</definition>
        <argsstring>(enum iparser_f3_t, int a, int b, int c)</argsstring>
        <name>iparser_call_f3</name>
        <param>
          <type>enum</type>
          <declname>iparser_f3_t</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" line="247" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_IParser_Y.H" bodystart="247" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a574c4a0db361d43e446dfa175af1da77" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>static int amrex::parser_local_symbol_index</definition>
        <argsstring>(struct parser_symbol *sym, Vector&lt; char * &gt; &amp;local_variables)</argsstring>
        <name>parser_local_symbol_index</name>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__symbol" kindref="compound">parser_symbol</ref> *</type>
          <declname>sym</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt; &amp;</type>
          <declname>local_variables</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Exe.cpp" line="5" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Exe.cpp" bodystart="5" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8f9f11532fcac876d2ebe7ec52423587" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::parser_compile_exe_size</definition>
        <argsstring>(struct parser_node *node, char *&amp;p, std::size_t &amp;exe_size, int &amp;max_stack_size, int &amp;stack_size, Vector&lt; char * &gt; &amp;local_variables)</argsstring>
        <name>parser_compile_exe_size</name>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>char *&amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::size_t &amp;</type>
          <declname>exe_size</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>max_stack_size</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>stack_size</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char * &gt; &amp;</type>
          <declname>local_variables</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Exe.cpp" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Exe.cpp" bodystart="17" bodyend="743" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Exe.H" declline="478" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a90b4dc8da2d01980f9e8f8a83f8ebbcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> double</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE double amrex::parser_exe_eval</definition>
        <argsstring>(char *p, double const *x)</argsstring>
        <name>parser_exe_eval</name>
        <param>
          <type>char *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>double const *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Exe.H" line="227" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Exe.H" bodystart="227" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad0968c4da0c27c9762dbd61dcc89e270" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::parser_exe_size</definition>
        <argsstring>(struct amrex_parser *parser, int &amp;max_stack_size, int &amp;stack_size)</argsstring>
        <name>parser_exe_size</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__parser" kindref="compound">amrex_parser</ref> *</type>
          <declname>parser</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>max_stack_size</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>stack_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Exe.H" line="482" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Exe.H" bodystart="482" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acf885867dc254ba5616d1b910c2f0f96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::parser_compile</definition>
        <argsstring>(struct amrex_parser *parser, char *p)</argsstring>
        <name>parser_compile</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__parser" kindref="compound">amrex_parser</ref> *</type>
          <declname>parser</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Exe.H" line="495" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Exe.H" bodystart="495" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad611b2a5542fba47b36125c772d02700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::parser_defexpr</definition>
        <argsstring>(struct parser_node *body)</argsstring>
        <name>parser_defexpr</name>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>body</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="26" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="26" bodyend="29" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="156" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae51f56e5de666bd486e02809fb95826a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1parser__symbol" kindref="compound">parser_symbol</ref> *</type>
        <definition>struct parser_symbol * amrex::parser_makesymbol</definition>
        <argsstring>(char *name)</argsstring>
        <name>parser_makesymbol</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="32" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="32" bodyend="39" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="157" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a54e375fb078fbde3c46609319674551f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
        <definition>struct parser_node * amrex::parser_newnode</definition>
        <argsstring>(enum parser_node_t type, struct parser_node *l, struct parser_node *r)</argsstring>
        <name>parser_newnode</name>
        <param>
          <type>enum <ref refid="namespaceamrex_1ad9039fea6c6d400df4ca8e5fef35b883" kindref="member">parser_node_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>l</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="42" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="42" bodyend="49" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="158" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af52966118e944ed96c7d6ed24c08d837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
        <definition>struct parser_node * amrex::parser_newnumber</definition>
        <argsstring>(double d)</argsstring>
        <name>parser_newnumber</name>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="52" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="52" bodyend="58" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="160" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad839d03442a4323dfb7b2b9578b6b9fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
        <definition>struct parser_node * amrex::parser_newsymbol</definition>
        <argsstring>(struct parser_symbol *symbol)</argsstring>
        <name>parser_newsymbol</name>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__symbol" kindref="compound">parser_symbol</ref> *</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="61" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="61" bodyend="64" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="161" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af7520cc9fa8b9a8de8e845d02b75db77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
        <definition>struct parser_node * amrex::parser_newf1</definition>
        <argsstring>(enum parser_f1_t ftype, struct parser_node *l)</argsstring>
        <name>parser_newf1</name>
        <param>
          <type>enum <ref refid="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589" kindref="member">parser_f1_t</ref></type>
          <declname>ftype</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="67" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="67" bodyend="74" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="162" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1a35a66f1f45aa77d0be9afe8def5501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
        <definition>struct parser_node * amrex::parser_newf2</definition>
        <argsstring>(enum parser_f2_t ftype, struct parser_node *l, struct parser_node *r)</argsstring>
        <name>parser_newf2</name>
        <param>
          <type>enum <ref refid="namespaceamrex_1a0075507273391e5967b9d869daed98bc" kindref="member">parser_f2_t</ref></type>
          <declname>ftype</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>l</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="77" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="77" bodyend="85" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="163" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6762c0fee754bd1ce564f76ef81253b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
        <definition>struct parser_node * amrex::parser_newf3</definition>
        <argsstring>(enum parser_f3_t ftype, struct parser_node *n1, struct parser_node *n2, struct parser_node *n3)</argsstring>
        <name>parser_newf3</name>
        <param>
          <type>enum <ref refid="namespaceamrex_1a2a6ee79bf3b5c5b67de8ef46a663051b" kindref="member">parser_f3_t</ref></type>
          <declname>ftype</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>n2</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>n3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="88" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="88" bodyend="98" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="165" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a63cdcee7f7165d07558abfd490a3cf8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
        <definition>struct parser_node * amrex::parser_newassign</definition>
        <argsstring>(struct parser_symbol *sym, struct parser_node *v)</argsstring>
        <name>parser_newassign</name>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__symbol" kindref="compound">parser_symbol</ref> *</type>
          <declname>sym</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="101" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="101" bodyend="108" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="167" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af77166ee4bf8e84e0628c8d6ef96f055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
        <definition>struct parser_node * amrex::parser_newlist</definition>
        <argsstring>(struct parser_node *nl, struct parser_node *nr)</argsstring>
        <name>parser_newlist</name>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>nl</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>nr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="111" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="111" bodyend="122" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="168" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae66dc6e64e2bbaeb5e33f845f1021f4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1amrex__parser" kindref="compound">amrex_parser</ref> *</type>
        <definition>struct amrex_parser * amrex::amrex_parser_new</definition>
        <argsstring>()</argsstring>
        <name>amrex_parser_new</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="127" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="127" bodyend="144" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="183" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2f20d75c59ef143705ccaeaef9897c17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::amrex_parser_delete</definition>
        <argsstring>(struct amrex_parser *parser)</argsstring>
        <name>amrex_parser_delete</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__parser" kindref="compound">amrex_parser</ref> *</type>
          <declname>parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="147" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="147" bodyend="151" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="184" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa04d33642e47699eedfa904aa011b199" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>static std::size_t amrex::parser_aligned_size</definition>
        <argsstring>(std::size_t N)</argsstring>
        <name>parser_aligned_size</name>
        <param>
          <type>std::size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="155" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="155" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9ec644ecf6ca85c38caddcdca5543c99" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* amrex::parser_allocate</definition>
        <argsstring>(struct amrex_parser *my_parser, std::size_t N)</argsstring>
        <name>parser_allocate</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__parser" kindref="compound">amrex_parser</ref> *</type>
          <declname>my_parser</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="165" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="165" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af09002432ee048d8be86ce24cac1b230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1amrex__parser" kindref="compound">amrex_parser</ref> *</type>
        <definition>struct amrex_parser * amrex::parser_dup</definition>
        <argsstring>(struct amrex_parser *source)</argsstring>
        <name>parser_dup</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__parser" kindref="compound">amrex_parser</ref> *</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="173" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="173" bodyend="183" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="186" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a70b4e8ec482471a9d5c1a2b17c2420b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::parser_ast_size</definition>
        <argsstring>(struct parser_node *node)</argsstring>
        <name>parser_ast_size</name>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="186" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="186" bodyend="251" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="197" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad3b98b9aec198e9456f562949577675c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
        <definition>struct parser_node * amrex::parser_ast_dup</definition>
        <argsstring>(struct amrex_parser *my_parser, struct parser_node *node, int move)</argsstring>
        <name>parser_ast_dup</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__parser" kindref="compound">amrex_parser</ref> *</type>
          <declname>my_parser</declname>
        </param>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>move</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="254" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="254" bodyend="352" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="187" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5f9cf029d313196bd5c43c1d272ea9fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::parser_ast_optimize</definition>
        <argsstring>(struct parser_node *node)</argsstring>
        <name>parser_ast_optimize</name>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="375" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="375" bodyend="1179" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="196" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a06594171e7a4be2ffa644282ffb4318c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::parser_ast_print_f1</definition>
        <argsstring>(struct parser_f1 *f1, std::string const &amp;space, AllPrint &amp;printer)</argsstring>
        <name>parser_ast_print_f1</name>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__f1" kindref="compound">parser_f1</ref> *</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>space</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1AllPrint" kindref="compound">AllPrint</ref> &amp;</type>
          <declname>printer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="1183" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="1183" bodyend="1213"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5e499cb244d7c4453e040dbed04999f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::parser_ast_print_f2</definition>
        <argsstring>(struct parser_f2 *f2, std::string const &amp;space, AllPrint &amp;printer)</argsstring>
        <name>parser_ast_print_f2</name>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__f2" kindref="compound">parser_f2</ref> *</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>space</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1AllPrint" kindref="compound">AllPrint</ref> &amp;</type>
          <declname>printer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="1217" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="1217" bodyend="1268"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ada212d97189e97f78572fc6c64c888d2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::parser_ast_print_f3</definition>
        <argsstring>(struct parser_f3 *f3, std::string const &amp;space, AllPrint &amp;printer)</argsstring>
        <name>parser_ast_print_f3</name>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__f3" kindref="compound">parser_f3</ref> *</type>
          <declname>f3</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>space</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1AllPrint" kindref="compound">AllPrint</ref> &amp;</type>
          <declname>printer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="1272" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="1272" bodyend="1285"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a66ddc6ab338df01029fd9257eaac0d03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::parser_ast_print</definition>
        <argsstring>(struct parser_node *node, std::string const &amp;space, AllPrint &amp;printer)</argsstring>
        <name>parser_ast_print</name>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>space</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1AllPrint" kindref="compound">AllPrint</ref> &amp;</type>
          <declname>printer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="1288" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="1288" bodyend="1379" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="198" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6815d583f941a297bbef6d77214829c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::parser_ast_depth</definition>
        <argsstring>(struct parser_node *node)</argsstring>
        <name>parser_ast_depth</name>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="1382" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="1382" bodyend="1435" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="203" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aee105e6b691d9fa51fef6e50c7ebb155" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::parser_ast_regvar</definition>
        <argsstring>(struct parser_node *node, char const *name, int i)</argsstring>
        <name>parser_ast_regvar</name>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="1438" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="1438" bodyend="1499" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="199" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a406674d4bafc2a2a465b8127fa8f9f5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::parser_ast_setconst</definition>
        <argsstring>(struct parser_node *node, char const *name, double c)</argsstring>
        <name>parser_ast_setconst</name>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="1501" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="1501" bodyend="1553" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="200" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae1d40846503356e1e1201c614163ea54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::parser_ast_get_symbols</definition>
        <argsstring>(struct parser_node *node, std::set&lt; std::string &gt; &amp;symbols, std::set&lt; std::string &gt; &amp;local_symbols)</argsstring>
        <name>parser_ast_get_symbols</name>
        <param>
          <type>struct <ref refid="structamrex_1_1parser__node" kindref="compound">parser_node</ref> *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::set&lt; std::string &gt; &amp;</type>
          <declname>symbols</declname>
        </param>
        <param>
          <type>std::set&lt; std::string &gt; &amp;</type>
          <declname>local_symbols</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="1555" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="1555" bodyend="1606" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="201" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2287c28084a10ac6a9cfb4b2a50892fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::parser_regvar</definition>
        <argsstring>(struct amrex_parser *parser, char const *name, int i)</argsstring>
        <name>parser_regvar</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__parser" kindref="compound">amrex_parser</ref> *</type>
          <declname>parser</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="1609" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="1609" bodyend="1612" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="189" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4051597b502fed03ea3b07d5f6cbb042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::parser_setconst</definition>
        <argsstring>(struct amrex_parser *parser, char const *name, double c)</argsstring>
        <name>parser_setconst</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__parser" kindref="compound">amrex_parser</ref> *</type>
          <declname>parser</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="1615" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="1615" bodyend="1619" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="190" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a53d306308d380a6d874ad24396fa7673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::parser_print</definition>
        <argsstring>(struct amrex_parser *parser)</argsstring>
        <name>parser_print</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__parser" kindref="compound">amrex_parser</ref> *</type>
          <declname>parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="1622" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="1622" bodyend="1627" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="191" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa4683ef8db99a703c386785fc95e1d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; std::string &gt;</type>
        <definition>std::set&lt; std::string &gt; amrex::parser_get_symbols</definition>
        <argsstring>(struct amrex_parser *parser)</argsstring>
        <name>parser_get_symbols</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__parser" kindref="compound">amrex_parser</ref> *</type>
          <declname>parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="1630" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="1630" bodyend="1639" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="192" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a511dc2f5222b878782000339b1858f3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::parser_depth</definition>
        <argsstring>(struct amrex_parser *parser)</argsstring>
        <name>parser_depth</name>
        <param>
          <type>struct <ref refid="structamrex_1_1amrex__parser" kindref="compound">amrex_parser</ref> *</type>
          <declname>parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" line="1642" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.cpp" bodystart="1642" bodyend="1645" declfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" declline="193" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8f3d6e0107012526c3465c75a12f5459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a5fddc549617b82ce5fc2b33aa9b6aa6f" kindref="member">AMREX_NO_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_NO_INLINE T amrex::parser_math_exp</definition>
        <argsstring>(T a)</argsstring>
        <name>parser_math_exp</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="209" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="209" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aba3dcfe04cce2c0ea7fdbe3b2ed9e87a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a5fddc549617b82ce5fc2b33aa9b6aa6f" kindref="member">AMREX_NO_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_NO_INLINE T amrex::parser_math_log</definition>
        <argsstring>(T a)</argsstring>
        <name>parser_math_log</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="213" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="213" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaa7d9660ad9a94bcb47fd4de04acd3a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a5fddc549617b82ce5fc2b33aa9b6aa6f" kindref="member">AMREX_NO_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_NO_INLINE T amrex::parser_math_log10</definition>
        <argsstring>(T a)</argsstring>
        <name>parser_math_log10</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="217" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="217" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a658f0f07d0553e3d21650fb5a198048e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a5fddc549617b82ce5fc2b33aa9b6aa6f" kindref="member">AMREX_NO_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_NO_INLINE T amrex::parser_math_sin</definition>
        <argsstring>(T a)</argsstring>
        <name>parser_math_sin</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="221" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="221" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad9c5d0a6539470f7560f822714b7c75b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a5fddc549617b82ce5fc2b33aa9b6aa6f" kindref="member">AMREX_NO_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_NO_INLINE T amrex::parser_math_cos</definition>
        <argsstring>(T a)</argsstring>
        <name>parser_math_cos</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="225" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a62570906aab0550c65f8a971dff0e58a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a5fddc549617b82ce5fc2b33aa9b6aa6f" kindref="member">AMREX_NO_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_NO_INLINE T amrex::parser_math_tan</definition>
        <argsstring>(T a)</argsstring>
        <name>parser_math_tan</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="229" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="229" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a914656d851c249d6787f813ea09a6626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a5fddc549617b82ce5fc2b33aa9b6aa6f" kindref="member">AMREX_NO_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_NO_INLINE T amrex::parser_math_asin</definition>
        <argsstring>(T a)</argsstring>
        <name>parser_math_asin</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="233" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="233" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aefee20e5a68eb0e134e5b8a25a45b4b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a5fddc549617b82ce5fc2b33aa9b6aa6f" kindref="member">AMREX_NO_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_NO_INLINE T amrex::parser_math_acos</definition>
        <argsstring>(T a)</argsstring>
        <name>parser_math_acos</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="237" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="237" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2bd581231b46b3a5a62d99e00e743622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a5fddc549617b82ce5fc2b33aa9b6aa6f" kindref="member">AMREX_NO_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_NO_INLINE T amrex::parser_math_atan</definition>
        <argsstring>(T a)</argsstring>
        <name>parser_math_atan</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="241" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="241" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a249f102bab7043232da73dcc4d33612e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a5fddc549617b82ce5fc2b33aa9b6aa6f" kindref="member">AMREX_NO_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_NO_INLINE T amrex::parser_math_sinh</definition>
        <argsstring>(T a)</argsstring>
        <name>parser_math_sinh</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="245" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="245" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a22b01fd56b83bc1cad5dc2fb17b023b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a5fddc549617b82ce5fc2b33aa9b6aa6f" kindref="member">AMREX_NO_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_NO_INLINE T amrex::parser_math_cosh</definition>
        <argsstring>(T a)</argsstring>
        <name>parser_math_cosh</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="249" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="249" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa087ffc694106cd11e7196bdb42b72a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a5fddc549617b82ce5fc2b33aa9b6aa6f" kindref="member">AMREX_NO_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_NO_INLINE T amrex::parser_math_tanh</definition>
        <argsstring>(T a)</argsstring>
        <name>parser_math_tanh</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="253" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="253" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa73033601c86e80eaaefc3201cb140af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a5fddc549617b82ce5fc2b33aa9b6aa6f" kindref="member">AMREX_NO_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_NO_INLINE T amrex::parser_math_pow</definition>
        <argsstring>(T a, T b)</argsstring>
        <name>parser_math_pow</name>
        <param>
          <type>T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="257" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="257" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a43535087747b0d92f5e11040d600be5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a5fddc549617b82ce5fc2b33aa9b6aa6f" kindref="member">AMREX_NO_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_NO_INLINE T amrex::parser_math_jn</definition>
        <argsstring>(int a, T b)</argsstring>
        <name>parser_math_jn</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="261" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="261" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a28d9f515eaa0f8b6c464afd9e8e26839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> double</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE double amrex::parser_call_f1</definition>
        <argsstring>(enum parser_f1_t type, double a)</argsstring>
        <name>parser_call_f1</name>
        <param>
          <type>enum <ref refid="namespaceamrex_1a3a7f6659e1b5842a0322fcdd8ad89589" kindref="member">parser_f1_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="275" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="275" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9ad43c67a92cbfee740c7219dede60de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> double</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE double amrex::parser_call_f2</definition>
        <argsstring>(enum parser_f2_t type, double a, double b)</argsstring>
        <name>parser_call_f2</name>
        <param>
          <type>enum <ref refid="namespaceamrex_1a0075507273391e5967b9d869daed98bc" kindref="member">parser_f2_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="307" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="307" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac8fc246b5e107c0247b09a8c97395063" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> double</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE double amrex::parser_call_f3</definition>
        <argsstring>(enum parser_f3_t, double a, double b, double c)</argsstring>
        <name>parser_call_f3</name>
        <param>
          <type>enum</type>
          <declname>parser_f3_t</declname>
        </param>
        <param>
          <type>double</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" line="345" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/Parser/AMReX_Parser_Y.H" bodystart="345" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abb1adff31f71c9985f21b703a4374f20" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::interpbndrydata_o1</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; T &gt; const &amp;bdry, int nb, Array4&lt; T const &gt; const &amp;crse, int nc, Dim3 const &amp;r) noexcept</argsstring>
        <name>interpbndrydata_o1</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>bdry</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData_1D_K.H" line="11" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData_1D_K.H" bodystart="11" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6f631281dbd59f353bfd719a959643eb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::interpbndrydata_x_o3</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; T &gt; const &amp;bdry, int nb, Array4&lt; T const &gt; const &amp;crse, int nc, Dim3 const &amp;r, Array4&lt; int const &gt; const &amp;, int) noexcept</argsstring>
        <name>interpbndrydata_x_o3</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>bdry</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>mask</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>not_covered</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData_1D_K.H" line="22" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData_1D_K.H" bodystart="22" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9cf536b0e42bf4ad8c13a65041416197" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::interpbndrydata_y_o3</definition>
        <argsstring>(int i, int j, int, int n, Array4&lt; T &gt; const &amp;bdry, int nb, Array4&lt; T const &gt; const &amp;crse, int nc, Dim3 const &amp;r, Array4&lt; int const &gt; const &amp;mask, int not_covered) noexcept</argsstring>
        <name>interpbndrydata_y_o3</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>bdry</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>not_covered</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData_2D_K.H" line="73" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData_2D_K.H" bodystart="73" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aed897cd66d451d76ab4b30a7b493ffd5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::interpbndrydata_z_o3</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; T &gt; const &amp;bdry, int nb, Array4&lt; T const &gt; const &amp;crse, int nc, Dim3 const &amp;r, Array4&lt; int const &gt; const &amp;mask, int not_covered) noexcept</argsstring>
        <name>interpbndrydata_z_o3</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>bdry</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>not_covered</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData_3D_K.H" line="90" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_InterpBndryData_3D_K.H" bodystart="90" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a326873b485cf73b0daa906dda88ee008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const LinOpBCType &amp;t)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const LinOpBCType &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_LO_BCTYPES.cpp" line="7" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_LO_BCTYPES.cpp" bodystart="7" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4c78cfa1297540820e62c5c9f8c7affd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::poly_interp_coeff</definition>
        <argsstring>(T xInt, T const *AMREX_RESTRICT x, int N, T *AMREX_RESTRICT c) noexcept</argsstring>
        <name>poly_interp_coeff</name>
        <param>
          <type>T</type>
          <declname>xInt</declname>
        </param>
        <param>
          <type>T const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>N</declname>
        </param>
        <param>
          <type>T *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_LOUtil_K.H" line="24" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_LOUtil_K.H" bodystart="24" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acea5b001e26a7d33f54a8f717aa2f6d4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::poly_interp_coeff</definition>
        <argsstring>(T xInt, T const *AMREX_RESTRICT x, T *AMREX_RESTRICT c) noexcept</argsstring>
        <name>poly_interp_coeff</name>
        <param>
          <type>T</type>
          <declname>xInt</declname>
        </param>
        <param>
          <type>T const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>x</declname>
        </param>
        <param>
          <type>T *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_LOUtil_K.H" line="40" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_LOUtil_K.H" bodystart="40" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a255f1f8c5e709392a949283da47211f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Mask &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.cpp" line="29" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="30" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeddafb7300c5464e3bf385c510ddb5e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; amrex::operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, Mask &amp;m)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Mask" kindref="compound">Mask</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.cpp" line="54" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_Mask.cpp" bodystart="54" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad3b5be86618428780e4c8d65b50e92ef" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::yafluxreg_crseadd</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; T &gt; const &amp;d, Array4&lt; int const &gt; const &amp;flag, Array4&lt; T const &gt; const &amp;fx, T dtdx, int nc) noexcept</argsstring>
        <name>yafluxreg_crseadd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dtdx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister_1D_K.H" line="11" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister_1D_K.H" bodystart="11" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8e5424db64aba9748df778a60884c7b9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::yafluxreg_fineadd</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; T &gt; const &amp;d, Array4&lt; T const &gt; const &amp;f, T dtdx, int nc, int dirside, Dim3 const &amp;rr) noexcept</argsstring>
        <name>yafluxreg_fineadd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dtdx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dirside</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister_1D_K.H" line="36" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister_1D_K.H" bodystart="36" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a022123f91218b914a5c94f972669cb57" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::yafluxreg_crseadd</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; T &gt; const &amp;d, Array4&lt; int const &gt; const &amp;flag, Array4&lt; T const &gt; const &amp;fx, Array4&lt; T const &gt; const &amp;fy, T dtdx, T dtdy, int nc) noexcept</argsstring>
        <name>yafluxreg_crseadd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dtdx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dtdy</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister_2D_K.H" line="11" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister_2D_K.H" bodystart="11" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0b1d07ca28efdd9ea5b1ef56ad6e2778" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::yafluxreg_crseadd</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; T &gt; const &amp;d, Array4&lt; int const &gt; const &amp;flag, Array4&lt; T const &gt; const &amp;fx, Array4&lt; T const &gt; const &amp;fy, Array4&lt; T const &gt; const &amp;fz, T dtdx, T dtdy, T dtdz, int nc) noexcept</argsstring>
        <name>yafluxreg_crseadd</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dtdx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dtdy</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dtdz</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister_3D_K.H" line="11" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_YAFluxRegister_3D_K.H" bodystart="11" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a32d409e89c5f589f2e729130898b6d8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::decomp_chol_np6</definition>
        <argsstring>(Array2D&lt; Real, 0, 5, 0, 5 &gt; &amp;aa)</argsstring>
        <name>decomp_chol_np6</name>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 5, 0, 5 &gt; &amp;</type>
          <declname>aa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_2D_K.H" line="10" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_2D_K.H" bodystart="10" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acf9c618e150988aaad39352da8a136b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::cholsol_np6</definition>
        <argsstring>(Array2D&lt; Real, 0, 11, 0, 5 &gt; &amp;Amatrix, Array1D&lt; Real, 0, 5 &gt; &amp;b)</argsstring>
        <name>cholsol_np6</name>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 11, 0, 5 &gt; &amp;</type>
          <declname>Amatrix</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; Real, 0, 5 &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_2D_K.H" line="63" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_2D_K.H" bodystart="63" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a26c0f53345a1e21e212dcd85a501a019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::cholsol_for_eb</definition>
        <argsstring>(Array2D&lt; Real, 0, 17, 0, 5 &gt; &amp;Amatrix, Array1D&lt; Real, 0, 5 &gt; &amp;b)</argsstring>
        <name>cholsol_for_eb</name>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 17, 0, 5 &gt; &amp;</type>
          <declname>Amatrix</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; Real, 0, 5 &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_2D_K.H" line="146" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_2D_K.H" bodystart="146" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af17d01dca64353fec04867549fdfb24d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::grad_x_of_phi_on_centroids</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;phieb, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;bcent, Real &amp;yloc_on_xface, bool is_eb_dirichlet, bool is_eb_inhomog)</argsstring>
        <name>grad_x_of_phi_on_centroids</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>yloc_on_xface</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_inhomog</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_2D_K.H" line="229" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_2D_K.H" bodystart="229" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0dc1c41fb0c471ba140aa8046670d247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::grad_y_of_phi_on_centroids</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;phieb, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;bcent, Real &amp;xloc_on_yface, bool is_eb_dirichlet, bool is_eb_inhomog)</argsstring>
        <name>grad_y_of_phi_on_centroids</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>xloc_on_yface</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_inhomog</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_2D_K.H" line="309" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_2D_K.H" bodystart="309" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a28ed48dd78cb4c109095bf87d44b7f1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::grad_eb_of_phi_on_centroids</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;phieb, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;bcent, Real &amp;nrmx, Real &amp;nrmy, bool is_eb_inhomog)</argsstring>
        <name>grad_eb_of_phi_on_centroids</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>nrmx</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>nrmy</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_inhomog</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_2D_K.H" line="384" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_2D_K.H" bodystart="384" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a78f4c0cd2b7b0dc31e655a7856ebd56c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::grad_x_of_phi_on_centroids_extdir</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;phieb, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;bcent, Array4&lt; Real const &gt; const &amp;vfrac, Real &amp;yloc_on_xface, bool is_eb_dirichlet, bool is_eb_inhomog, const bool on_x_face, const int domlo_x, const int domhi_x, const bool on_y_face, const int domlo_y, const int domhi_y)</argsstring>
        <name>grad_x_of_phi_on_centroids_extdir</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>yloc_on_xface</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_inhomog</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>on_x_face</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domlo_x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domhi_x</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>on_y_face</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domlo_y</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domhi_y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_2D_K.H" line="461" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_2D_K.H" bodystart="461" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aadaa422c5855785fcc975c32809700fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::grad_y_of_phi_on_centroids_extdir</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;phieb, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;bcent, Array4&lt; Real const &gt; const &amp;vfrac, Real &amp;xloc_on_yface, bool is_eb_dirichlet, bool is_eb_inhomog, const bool on_x_face, const int domlo_x, const int domhi_x, const bool on_y_face, const int domlo_y, const int domhi_y)</argsstring>
        <name>grad_y_of_phi_on_centroids_extdir</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>xloc_on_yface</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_inhomog</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>on_x_face</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domlo_x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domhi_x</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>on_y_face</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domlo_y</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domhi_y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_2D_K.H" line="587" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_2D_K.H" bodystart="587" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a95554f1cdc48c66065e7e3cb9a54ee93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::grad_eb_of_phi_on_centroids_extdir</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;phieb, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;bcent, Array4&lt; Real const &gt; const &amp;vfrac, Real &amp;nrmx, Real &amp;nrmy, bool is_eb_inhomog, const bool on_x_face, const int domlo_x, const int domhi_x, const bool on_y_face, const int domlo_y, const int domhi_y)</argsstring>
        <name>grad_eb_of_phi_on_centroids_extdir</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>nrmx</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>nrmy</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_inhomog</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>on_x_face</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domlo_x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domhi_x</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>on_y_face</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domlo_y</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domhi_y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_2D_K.H" line="710" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_2D_K.H" bodystart="710" bodyend="823"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af8df67014fdc9e1eaa206102b115bfd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::decomp_chol_np10</definition>
        <argsstring>(Array2D&lt; Real, 0, 9, 0, 9 &gt; &amp;aa)</argsstring>
        <name>decomp_chol_np10</name>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 9, 0, 9 &gt; &amp;</type>
          <declname>aa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" line="10" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" bodystart="10" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab067b4a2be7601fdfd12c7f27a3995d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::cholsol_np10</definition>
        <argsstring>(Array2D&lt; Real, 0, 35, 0, 9 &gt; &amp;Amatrix, Array1D&lt; Real, 0, 9 &gt; &amp;b)</argsstring>
        <name>cholsol_np10</name>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 35, 0, 9 &gt; &amp;</type>
          <declname>Amatrix</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; Real, 0, 9 &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" line="63" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" bodystart="63" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a683dbe22d1e3bc113f4f9e8b8118b90e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::cholsol_for_eb</definition>
        <argsstring>(Array2D&lt; Real, 0, 53, 0, 9 &gt; &amp;Amatrix, Array1D&lt; Real, 0, 9 &gt; &amp;b)</argsstring>
        <name>cholsol_for_eb</name>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 53, 0, 9 &gt; &amp;</type>
          <declname>Amatrix</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; Real, 0, 9 &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" line="190" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" bodystart="190" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a72b732741e32444ef31a46338ee223b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::grad_x_of_phi_on_centroids</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;phieb, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;bcent, Real &amp;yloc_on_xface, Real &amp;zloc_on_xface, bool is_eb_dirichlet, bool is_eb_inhomog)</argsstring>
        <name>grad_x_of_phi_on_centroids</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>yloc_on_xface</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>zloc_on_xface</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_inhomog</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" line="316" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" bodystart="316" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a36b359eb7b2ab6e40d0acd6835b4f85f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::grad_y_of_phi_on_centroids</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;phieb, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;bcent, Real &amp;xloc_on_yface, Real &amp;zloc_on_yface, bool is_eb_dirichlet, bool is_eb_inhomog)</argsstring>
        <name>grad_y_of_phi_on_centroids</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>xloc_on_yface</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>zloc_on_yface</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_inhomog</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" line="397" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" bodystart="397" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8087b948fc12d73a46d3e968e4e5484f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::grad_z_of_phi_on_centroids</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;phieb, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;bcent, Real &amp;xloc_on_zface, Real &amp;yloc_on_zface, bool is_eb_dirichlet, bool is_eb_inhomog)</argsstring>
        <name>grad_z_of_phi_on_centroids</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>xloc_on_zface</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>yloc_on_zface</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_inhomog</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" line="478" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" bodystart="478" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a781271d74f1db31d825f604314a7a50a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::grad_eb_of_phi_on_centroids</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;phieb, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;bcent, Real &amp;nrmx, Real &amp;nrmy, Real &amp;nrmz, bool is_eb_inhomog)</argsstring>
        <name>grad_eb_of_phi_on_centroids</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>nrmx</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>nrmy</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>nrmz</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_inhomog</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" line="563" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" bodystart="563" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afd0931fc1fdad21d0be30352126d2290" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::grad_x_of_phi_on_centroids_extdir</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;phieb, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;bcent, Array4&lt; Real const &gt; const &amp;vfrac, Real &amp;yloc_on_xface, Real &amp;zloc_on_xface, bool is_eb_dirichlet, bool is_eb_inhomog, const bool on_x_face, const int domlo_x, const int domhi_x, const bool on_y_face, const int domlo_y, const int domhi_y, const bool on_z_face, const int domlo_z, const int domhi_z)</argsstring>
        <name>grad_x_of_phi_on_centroids_extdir</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>yloc_on_xface</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>zloc_on_xface</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_inhomog</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>on_x_face</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domlo_x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domhi_x</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>on_y_face</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domlo_y</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domhi_y</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>on_z_face</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domlo_z</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domhi_z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" line="646" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" bodystart="646" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a350fa718b62eb77a109dcba746acc28b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::grad_y_of_phi_on_centroids_extdir</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;phieb, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;bcent, Array4&lt; Real const &gt; const &amp;vfrac, Real &amp;xloc_on_yface, Real &amp;zloc_on_yface, bool is_eb_dirichlet, bool is_eb_inhomog, const bool on_x_face, const int domlo_x, const int domhi_x, const bool on_y_face, const int domlo_y, const int domhi_y, const bool on_z_face, const int domlo_z, const int domhi_z)</argsstring>
        <name>grad_y_of_phi_on_centroids_extdir</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>xloc_on_yface</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>zloc_on_yface</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_inhomog</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>on_x_face</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domlo_x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domhi_x</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>on_y_face</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domlo_y</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domhi_y</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>on_z_face</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domlo_z</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domhi_z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" line="789" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" bodystart="789" bodyend="927"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9cafa33321d9f9c2bbe3a6fb55d80b73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::grad_z_of_phi_on_centroids_extdir</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;phieb, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;bcent, Array4&lt; Real const &gt; const &amp;vfrac, Real &amp;xloc_on_zface, Real &amp;yloc_on_zface, bool is_eb_dirichlet, bool is_eb_inhomog, const bool on_x_face, const int domlo_x, const int domhi_x, const bool on_y_face, const int domlo_y, const int domhi_y, const bool on_z_face, const int domlo_z, const int domhi_z)</argsstring>
        <name>grad_z_of_phi_on_centroids_extdir</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>xloc_on_zface</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>yloc_on_zface</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_inhomog</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>on_x_face</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domlo_x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domhi_x</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>on_y_face</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domlo_y</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domhi_y</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>on_z_face</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domlo_z</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domhi_z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" line="930" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" bodystart="930" bodyend="1070"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8d0b75d1bb6a1c256c97f0415bba6cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::grad_eb_of_phi_on_centroids_extdir</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;phieb, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;bcent, Array4&lt; Real const &gt; const &amp;vfrac, Real &amp;nrmx, Real &amp;nrmy, Real &amp;nrmz, bool is_eb_inhomog, const bool on_x_face, const int domlo_x, const int domhi_x, const bool on_y_face, const int domlo_y, const int domhi_y, const bool on_z_face, const int domlo_z, const int domhi_z)</argsstring>
        <name>grad_eb_of_phi_on_centroids_extdir</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>nrmx</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>nrmy</declname>
        </param>
        <param>
          <type>Real &amp;</type>
          <declname>nrmz</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_inhomog</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>on_x_face</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domlo_x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domhi_x</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>on_y_face</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domlo_y</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domhi_y</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>on_z_face</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domlo_z</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>domhi_z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" line="1073" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_LeastSquares_3D_K.H" bodystart="1073" bodyend="1208"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae21d913402ed0c78cccf9819ea8a69c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FillSignedDistance</definition>
        <argsstring>(MultiFab &amp;mf, bool fluid_has_positive_sign=true)</argsstring>
        <name>FillSignedDistance</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fluid_has_positive_sign</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Fill <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> with signed distance. </para>
        </briefdescription>
        <detaileddescription>
<para>This function fills the nodal <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> with signed distance. Note that the distance is valid only if it&apos;s within a few cells to the EB. The <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> must have been built with an <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>is a nodal <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> built with <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fluid_has_positive_sign</parametername>
</parameternamelist>
<parameterdescription>
<para>determines the sign of the fluid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_utils.cpp" line="278" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_utils.cpp" bodystart="278" bodyend="286" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_utils.H" declline="107" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae734f341bd7b27e7d150b1187c28c9ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FillSignedDistance</definition>
        <argsstring>(MultiFab &amp;mf, EB2::Level const  &amp;ls_lev, EBFArrayBoxFactory const  &amp;eb_fac, int refratio, bool fluid_has_positive_sign=true)</argsstring>
        <name>FillSignedDistance</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1Level" kindref="compound">EB2::Level</ref> const &amp;</type>
          <declname>ls_lev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> const &amp;</type>
          <declname>eb_fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>refratio</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fluid_has_positive_sign</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Fill <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> with signed distance. </para>
        </briefdescription>
        <detaileddescription>
<para>This function fills the nodal <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> with signed distance. Note that the distance is valid only if it&apos;s within a few cells to the EB.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>is a nodal <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ls_lev</parametername>
</parameternamelist>
<parameterdescription>
<para>is an <ref refid="classamrex_1_1EB2_1_1Level" kindref="compound">EB2::Level</ref> obejct with an implicit function. This is at the same level as mf. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eb_fac</parametername>
</parameternamelist>
<parameterdescription>
<para>is an <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> object containing EB informaiton. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>refratio</parametername>
</parameternamelist>
<parameterdescription>
<para>is the refinement ratio of mf to eb_fac. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fluid_has_positive_sign</parametername>
</parameternamelist>
<parameterdescription>
<para>determines the sign of the fluid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_utils.cpp" line="466" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_utils.cpp" bodystart="466" bodyend="676" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_utils.H" declline="93" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a432c3b4f5a385efd93de62c6402e2b0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FillImpFunc</definition>
        <argsstring>(MultiFab &amp;mf, G const &amp;gshop, Geometry const &amp;geom)</argsstring>
        <name>FillImpFunc</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>G const &amp;</type>
          <declname>gshop</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>Fill <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> with implicit function. </para>
        </briefdescription>
        <detaileddescription>
<para>This function fills the nodal <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> with the implicit function in GeometryShop. Note that an implicit function is not necessarily a signed distance function.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>G</parametername>
</parameternamelist>
<parameterdescription>
<para>is the GeometryShop type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>is a nodal <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gshop</parametername>
</parameternamelist>
<parameterdescription>
<para>is a GeometryShop object. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>geom</parametername>
</parameternamelist>
<parameterdescription>
<para>is a <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_utils.H" line="59" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB_utils.H" bodystart="59" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aca824ed9a83373a83533e948d2175dee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TagCutCells</definition>
        <argsstring>(TagBoxArray &amp;tags, const MultiFab &amp;state)</argsstring>
        <name>TagCutCells</name>
        <param>
          <type><ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBAmrUtil.cpp" line="13" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBAmrUtil.cpp" bodystart="13" bodyend="43" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBAmrUtil.H" declline="10" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae146edcedfbd7eb8509f8c334b764d84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TagVolfrac</definition>
        <argsstring>(TagBoxArray &amp;tags, const MultiFab &amp;volfrac, Real tol)</argsstring>
        <name>TagVolfrac</name>
        <param>
          <type><ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>volfrac</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>tol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBAmrUtil.cpp" line="47" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBAmrUtil.cpp" bodystart="47" bodyend="68" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBAmrUtil.H" declline="12" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac45d936bf5764d4fc75c7d483c93afaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const EBCellFlag &amp;flag)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBCellFlag.cpp" line="254" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBCellFlag.cpp" bodystart="255" bodyend="285" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBCellFlag.H" declline="352" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad3c5c0681fda33ffa62120cefe254379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &gt;</type>
        <definition>std::unique_ptr&lt; EBFArrayBoxFactory &gt; amrex::makeEBFabFactory</definition>
        <argsstring>(const Geometry &amp;a_geom, const BoxArray &amp;a_ba, const DistributionMapping &amp;a_dm, const Vector&lt; int &gt; &amp;a_ngrow, EBSupport a_support)</argsstring>
        <name>makeEBFabFactory</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>a_ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>a_dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>a_ngrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebc" kindref="member">EBSupport</ref></type>
          <declname>a_support</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" line="113" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="113" bodyend="121" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" declline="95" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a734109fb8bb0358b898b2cafc191c8df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &gt;</type>
        <definition>std::unique_ptr&lt; EBFArrayBoxFactory &gt; amrex::makeEBFabFactory</definition>
        <argsstring>(const EB2::Level *eb_level, const BoxArray &amp;a_ba, const DistributionMapping &amp;a_dm, const Vector&lt; int &gt; &amp;a_ngrow, EBSupport a_support)</argsstring>
        <name>makeEBFabFactory</name>
        <param>
          <type>const <ref refid="classamrex_1_1EB2_1_1Level" kindref="compound">EB2::Level</ref> *</type>
          <declname>eb_level</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>a_ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>a_dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>a_ngrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebc" kindref="member">EBSupport</ref></type>
          <declname>a_support</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" line="124" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="124" bodyend="131" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" declline="101" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeb1b764088e7533c8b78b4fea2170c51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &gt;</type>
        <definition>std::unique_ptr&lt; EBFArrayBoxFactory &gt; amrex::makeEBFabFactory</definition>
        <argsstring>(const EB2::IndexSpace *index_space, const Geometry &amp;a_geom, const BoxArray &amp;a_ba, const DistributionMapping &amp;a_dm, const Vector&lt; int &gt; &amp;a_ngrow, EBSupport a_support)</argsstring>
        <name>makeEBFabFactory</name>
        <param>
          <type>const <ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">EB2::IndexSpace</ref> *</type>
          <declname>index_space</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>a_ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>a_dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>a_ngrow</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a7de82761ed632e5ee0b9f912c856aebc" kindref="member">EBSupport</ref></type>
          <declname>a_support</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" line="134" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.cpp" bodystart="134" bodyend="142" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFabFactory.H" declline="107" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa4a3bfe1c0cd2c7c8632d1f0ee21b2ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1EBCellFlagFab" kindref="compound">EBCellFlagFab</ref> &amp;</type>
        <definition>const EBCellFlagFab &amp; amrex::getEBCellFlagFab</definition>
        <argsstring>(const FArrayBox &amp;fab)</argsstring>
        <name>getEBCellFlagFab</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFArrayBox.cpp" line="179" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFArrayBox.cpp" bodystart="179" bodyend="184" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFArrayBox.H" declline="74" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa15c295b806f5850e12b44898ed71150" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_flux_reg_crseadd_va</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;d, Array4&lt; int const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;vfrac, Array4&lt; Real const &gt; const &amp;ax, Array4&lt; Real const &gt; const &amp;ay, Real dtdx, Real dtdy)</argsstring>
        <name>eb_flux_reg_crseadd_va</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ay</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" line="8" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" bodystart="8" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a15dc2901e84865ab7ca819e913967f1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_flux_reg_fineadd_va_xlo</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;d, Array4&lt; Real const &gt; const &amp;f, Array4&lt; Real const &gt; const &amp;vfrac, Array4&lt; Real const &gt; const &amp;a, Real fac, Dim3 const &amp;ratio)</argsstring>
        <name>eb_flux_reg_fineadd_va_xlo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" line="63" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" bodystart="63" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abd990a563d63d022c9b09433c621015f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_flux_reg_fineadd_va_xhi</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;d, Array4&lt; Real const &gt; const &amp;f, Array4&lt; Real const &gt; const &amp;vfrac, Array4&lt; Real const &gt; const &amp;a, Real fac, Dim3 const &amp;ratio)</argsstring>
        <name>eb_flux_reg_fineadd_va_xhi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" line="81" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" bodystart="81" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a72c1982bd1003fddcf274e2fd059fc87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_flux_reg_fineadd_va_ylo</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;d, Array4&lt; Real const &gt; const &amp;f, Array4&lt; Real const &gt; const &amp;vfrac, Array4&lt; Real const &gt; const &amp;a, Real fac, Dim3 const &amp;ratio)</argsstring>
        <name>eb_flux_reg_fineadd_va_ylo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" line="99" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" bodystart="99" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a555d147b281a1bfa308507ecc5b628be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_flux_reg_fineadd_va_yhi</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;d, Array4&lt; Real const &gt; const &amp;f, Array4&lt; Real const &gt; const &amp;vfrac, Array4&lt; Real const &gt; const &amp;a, Real fac, Dim3 const &amp;ratio)</argsstring>
        <name>eb_flux_reg_fineadd_va_yhi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" line="117" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" bodystart="117" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5c2977ac92fe83060eb9443dde71cdd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_flux_reg_fineadd_dm</definition>
        <argsstring>(int i, int j, int k, int n, Box const &amp;dmbx, Array4&lt; Real &gt; const &amp;d, Array4&lt; Real const &gt; const &amp;dm, Array4&lt; Real const &gt; const &amp;vfrac, Dim3 const &amp;ratio, Real threshold)</argsstring>
        <name>eb_flux_reg_fineadd_dm</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>dmbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" line="135" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" bodystart="135" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac9df63fc752ddecfc0659aa645670462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_rereflux_from_crse</definition>
        <argsstring>(int i, int j, int k, int n, Box const &amp;bx, Array4&lt; Real &gt; const &amp;d, Array4&lt; Real const &gt; const &amp;s, Array4&lt; int const &gt; const &amp;amrflg, Array4&lt; EBCellFlag const &gt; const &amp;ebflg, Array4&lt; Real const &gt; const &amp;vfrac)</argsstring>
        <name>eb_rereflux_from_crse</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>amrflg</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>ebflg</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" line="154" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" bodystart="154" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0c65969b354bed7478ab5716942fdbad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_rereflux_to_fine</definition>
        <argsstring>(int i, int j, int, int n, Array4&lt; Real &gt; const &amp;d, Array4&lt; Real const &gt; const &amp;s, Array4&lt; int const &gt; const &amp;msk, Dim3 ratio)</argsstring>
        <name>eb_rereflux_to_fine</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" line="197" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_2D_C.H" bodystart="197" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad88229550040a794c1b560b1db6ecdc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_flux_reg_crseadd_va</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;d, Array4&lt; int const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;vfrac, Array4&lt; Real const &gt; const &amp;ax, Array4&lt; Real const &gt; const &amp;ay, Array4&lt; Real const &gt; const &amp;az, Real dtdx, Real dtdy, Real dtdz)</argsstring>
        <name>eb_flux_reg_crseadd_va</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ay</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>az</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dtdz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_3D_C.H" line="8" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_3D_C.H" bodystart="8" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3566e756881f6092d91efc03b9529d1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_flux_reg_fineadd_va_zlo</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;d, Array4&lt; Real const &gt; const &amp;f, Array4&lt; Real const &gt; const &amp;vfrac, Array4&lt; Real const &gt; const &amp;a, Real fac, Dim3 const &amp;ratio)</argsstring>
        <name>eb_flux_reg_fineadd_va_zlo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_3D_C.H" line="153" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_3D_C.H" bodystart="153" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad52e53deaf4b675c315293a57f6958c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_flux_reg_fineadd_va_zhi</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;d, Array4&lt; Real const &gt; const &amp;f, Array4&lt; Real const &gt; const &amp;vfrac, Array4&lt; Real const &gt; const &amp;a, Real fac, Dim3 const &amp;ratio)</argsstring>
        <name>eb_flux_reg_fineadd_va_zhi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_3D_C.H" line="172" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBFluxRegister_3D_C.H" bodystart="172" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3baedaa2c05dc91fb1b9b36dc61e128d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_set_covered</definition>
        <argsstring>(MultiFab &amp;mf, Real val)</argsstring>
        <name>EB_set_covered</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="21" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="21" bodyend="24" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="12" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac619d99ccf677b91c436697814e9a3c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_set_covered</definition>
        <argsstring>(MultiFab &amp;mf, int icomp, int ncomp, int ngrow, Real val)</argsstring>
        <name>EB_set_covered</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="27" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="27" bodyend="60" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="13" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5d1f42bca3823efe8ae8998c9a1ae08e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_set_covered</definition>
        <argsstring>(MultiFab &amp;mf, int icomp, int ncomp, const Vector&lt; Real &gt; &amp;vals)</argsstring>
        <name>EB_set_covered</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="63" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="63" bodyend="66" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="14" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae0a59d2ee3fb91d65cc6effb267f0a6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_set_covered</definition>
        <argsstring>(MultiFab &amp;mf, int icomp, int ncomp, int ngrow, const Vector&lt; Real &gt; &amp;a_vals)</argsstring>
        <name>EB_set_covered</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>a_vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="69" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="69" bodyend="106" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="15" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a233a16599969d91372d51e1befabcbfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_set_covered_faces</definition>
        <argsstring>(const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;umac, Real val)</argsstring>
        <name>EB_set_covered_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>umac</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="109" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="109" bodyend="217" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="17" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a77d795b6dab3e839da24a64b46179295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_set_covered_faces</definition>
        <argsstring>(const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;umac, const int scomp, const int ncomp, const Vector&lt; Real &gt; &amp;a_vals)</argsstring>
        <name>EB_set_covered_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>umac</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>a_vals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="220" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="220" bodyend="333" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="18" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a83baea24aee17c98e8771fa6eea0822f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, const MultiFab &amp;vol_fine, const MultiFab &amp;vfrac_fine, int scomp, int ncomp, const IntVect &amp;ratio)</argsstring>
        <name>EB_average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>vol_fine</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>vfrac_fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="336" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="336" bodyend="390" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="20" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeb1fc4ae4ef7edec76f3784f1ca78aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, int scomp, int ncomp, int ratio)</argsstring>
        <name>EB_average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="394" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="394" bodyend="397" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="23" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a88b5f551ff31c821df1efef0a1983c7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down</definition>
        <argsstring>(const MultiFab &amp;S_fine, MultiFab &amp;S_crse, int scomp, int ncomp, const IntVect &amp;ratio)</argsstring>
        <name>EB_average_down</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="400" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="400" bodyend="497" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="25" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3df9dbf65687fa616a98a6be2789eedd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down_faces</definition>
        <argsstring>(const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fine, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;crse, int ratio, int ngcrse)</argsstring>
        <name>EB_average_down_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="500" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="500" bodyend="505" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="28" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2e516c0390423c9e5017de317c562c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down_faces</definition>
        <argsstring>(const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fine, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;crse, const IntVect &amp;ratio, int ngcrse)</argsstring>
        <name>EB_average_down_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="507" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="507" bodyend="588" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="31" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa60b978d9a863b96aa439f2009fb05f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down_faces</definition>
        <argsstring>(const Array&lt; const MultiFab *, AMREX_SPACEDIM &gt; &amp;fine, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;crse, const IntVect &amp;ratio, const Geometry &amp;crse_geom)</argsstring>
        <name>EB_average_down_faces</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>crse_geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="590" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="590" bodyend="617" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="36" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae62657fb0ffcd40a902dc22f0c64906f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down_boundaries</definition>
        <argsstring>(const MultiFab &amp;fine, MultiFab &amp;crse, int ratio, int ngcrse)</argsstring>
        <name>EB_average_down_boundaries</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="619" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="619" bodyend="623" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="40" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a58c0a1915ef06b92abe238304db2cc14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_down_boundaries</definition>
        <argsstring>(const MultiFab &amp;fine, MultiFab &amp;crse, const IntVect &amp;ratio, int ngcrse)</argsstring>
        <name>EB_average_down_boundaries</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngcrse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="625" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="625" bodyend="678" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="42" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aac572002c16db8070f5ffaf6afaf1b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_computeDivergence</definition>
        <argsstring>(MultiFab &amp;divu, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;umac, const Geometry &amp;geom, bool already_on_centroids)</argsstring>
        <name>EB_computeDivergence</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>umac</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>already_on_centroids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="681" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="681" bodyend="759" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="45" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5c82ba2090dd0accf9b02cf8aca324b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_computeDivergence</definition>
        <argsstring>(MultiFab &amp;divu, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;umac, const Geometry &amp;geom, bool already_on_centroids, const MultiFab &amp;vel_eb)</argsstring>
        <name>EB_computeDivergence</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>umac</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>already_on_centroids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>vel_eb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="761" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="761" bodyend="803" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="48" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2ca083595ee0a76ca027da372fadf716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_average_face_to_cellcenter</definition>
        <argsstring>(MultiFab &amp;ccmf, int dcomp, const Array&lt; MultiFab const *, AMREX_SPACEDIM &gt; &amp;fmf)</argsstring>
        <name>EB_average_face_to_cellcenter</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>ccmf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fmf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="806" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="806" bodyend="858" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="53" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aacd5723b8bb544b8feedee372294e10c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_interp_CC_to_Centroid</definition>
        <argsstring>(MultiFab &amp;cent, const MultiFab &amp;cc, int scomp, int dcomp, int ncomp, const Geometry &amp;geom)</argsstring>
        <name>EB_interp_CC_to_Centroid</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cent</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="861" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="861" bodyend="908" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="57" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abcbe7f0f5cd9b990c3b3946e3b0419c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_interp_CC_to_FaceCentroid</definition>
        <argsstring>(const MultiFab &amp;cc, AMREX_D_DECL(MultiFab &amp;fc_x, MultiFab &amp;fc_y, MultiFab &amp;fc_z), int scomp, int dcomp, int ncomp, const Geometry &amp;a_geom, const Vector&lt; BCRec &gt; &amp;a_bcs)</argsstring>
        <name>EB_interp_CC_to_FaceCentroid</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>AMREX_D_DECL(<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;fc_x, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;fc_y, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;fc_z)</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>a_bcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="911" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="911" bodyend="1021"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a25f1af042b358543413af13507e891e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_interp_CellCentroid_to_FaceCentroid</definition>
        <argsstring>(const MultiFab &amp;phi_centroid, const Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &amp;phi_faces, int scomp, int dcomp, int nc, const Geometry &amp;geom, const amrex::Vector&lt; amrex::BCRec &gt; &amp;a_bcs)</argsstring>
        <name>EB_interp_CellCentroid_to_FaceCentroid</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>phi_centroid</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>phi_faces</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">amrex::BCRec</ref> &gt; &amp;</type>
          <declname>a_bcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="1024" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="1024" bodyend="1032" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="69" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afa4184f019cdc6b48fa68be6496681b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_interp_CellCentroid_to_FaceCentroid</definition>
        <argsstring>(const MultiFab &amp;phi_centroid, const Vector&lt; MultiFab * &gt; &amp;phi_faces, int scomp, int dcomp, int nc, const Geometry &amp;geom, const amrex::Vector&lt; amrex::BCRec &gt; &amp;a_bcs)</argsstring>
        <name>EB_interp_CellCentroid_to_FaceCentroid</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>phi_centroid</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>phi_faces</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">amrex::BCRec</ref> &gt; &amp;</type>
          <declname>a_bcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="1035" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="1035" bodyend="1043" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="76" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a84f2fd1d8faaa80410294ddfc4c4158f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_interp_CellCentroid_to_FaceCentroid</definition>
        <argsstring>(const MultiFab &amp;phi_centroid, AMREX_D_DECL(MultiFab &amp;phi_xface, MultiFab &amp;phi_yface, MultiFab &amp;phi_zface), int scomp, int dcomp, int ncomp, const Geometry &amp;a_geom, const Vector&lt; BCRec &gt; &amp;a_bcs)</argsstring>
        <name>EB_interp_CellCentroid_to_FaceCentroid</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>phi_centroid</declname>
        </param>
        <param>
          <type>AMREX_D_DECL(<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;phi_xface, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;phi_yface, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;phi_zface)</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> &gt; &amp;</type>
          <declname>a_bcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" line="1046" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.cpp" bodystart="1046" bodyend="1163" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="83" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3aea21f769cc7ae99c74c237e4ed85ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB_interp_CC_to_FaceCentroid</definition>
        <argsstring>(const MultiFab &amp;cc, AMREX_D_DECL(MultiFab &amp;fcx, MultiFab &amp;fcy, MultiFab &amp;fcz), int scomp, int dcomp, int nc, const Geometry &amp;geom, const amrex::Vector&lt; amrex::BCRec &gt; &amp;a_bcs)</argsstring>
        <name>EB_interp_CC_to_FaceCentroid</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>AMREX_D_DECL(<ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;fcx, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;fcy, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;fcz)</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="classamrex_1_1BCRec" kindref="compound">amrex::BCRec</ref> &gt; &amp;</type>
          <declname>a_bcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" line="60" column="10" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil.H" declline="60" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a81a28cf9f5aa320028c3b2d0c339c310" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_set_covered_nodes</definition>
        <argsstring>(int i, int j, int k, int n, int icomp, Array4&lt; Real &gt; const &amp;d, Array4&lt; EBCellFlag const &gt; const &amp;f, Real v)</argsstring>
        <name>eb_set_covered_nodes</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="9" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="9" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acb2c690637db28c101b2fafe2ea346e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_set_covered_nodes</definition>
        <argsstring>(int i, int j, int k, int n, int icomp, Array4&lt; Real &gt; const &amp;d, Array4&lt; EBCellFlag const &gt; const &amp;f, Real const *AMREX_RESTRICT v)</argsstring>
        <name>eb_set_covered_nodes</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Real const *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="20" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="20" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6623c7b82f9de6404f5b9fe0d27a0fd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_avgdown_with_vol</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;fine, int fcomp, Array4&lt; Real &gt; const &amp;crse, int ccomp, Array4&lt; Real const &gt; const &amp;fv, Array4&lt; Real const &gt; const &amp;vfrc, Dim3 const &amp;ratio, int ncomp)</argsstring>
        <name>eb_avgdown_with_vol</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="31" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="31" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a658f71f1a20f1c31976ad401e53e28cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_avgdown</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;fine, int fcomp, Array4&lt; Real &gt; const &amp;crse, int ccomp, Array4&lt; Real const &gt; const &amp;vfrc, Dim3 const &amp;ratio, int ncomp)</argsstring>
        <name>eb_avgdown</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="56" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="56" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a380b65228c4871b5d99c5ea571dcc589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_avgdown_face_x</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;fine, int fcomp, Array4&lt; Real &gt; const &amp;crse, int ccomp, Array4&lt; Real const &gt; const &amp;area, Dim3 const &amp;ratio, int ncomp)</argsstring>
        <name>eb_avgdown_face_x</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="81" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="81" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a161acc43339f8040a3b3d85822ccba68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_avgdown_face_y</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;fine, int fcomp, Array4&lt; Real &gt; const &amp;crse, int ccomp, Array4&lt; Real const &gt; const &amp;area, Dim3 const &amp;ratio, int ncomp)</argsstring>
        <name>eb_avgdown_face_y</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="106" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="106" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a538016b8eefb9144d408402eec36d390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_avgdown_boundaries</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;fine, int fcomp, Array4&lt; Real &gt; const &amp;crse, int ccomp, Array4&lt; Real const &gt; const &amp;ba, Dim3 const &amp;ratio, int ncomp)</argsstring>
        <name>eb_avgdown_boundaries</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="131" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="131" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3375fdd1a2093dffe1bd183a9819a8d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_compute_divergence</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;divu, Array4&lt; Real const &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;v, Array4&lt; int const &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, GpuArray&lt; Real, 2 &gt; const &amp;dxinv, bool already_on_centroids)</argsstring>
        <name>eb_compute_divergence</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>already_on_centroids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="156" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="156" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a503e7a0c62d731776b177f78bd6cc61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_avg_fc_to_cc</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;cc, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;ax, Array4&lt; Real const &gt; const &amp;ay, Array4&lt; EBCellFlag const &gt; const &amp;flag)</argsstring>
        <name>eb_avg_fc_to_cc</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ay</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="216" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="216" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adc1ea19abb66c0912bd6b989b80c5f98" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_cc2cent</definition>
        <argsstring>(Box const &amp;box, const Array4&lt; Real &gt; &amp;phicent, Array4&lt; Real const &gt; const &amp;phicc, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;cent, int ncomp) noexcept</argsstring>
        <name>eb_interp_cc2cent</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; &amp;</type>
          <declname>phicent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phicc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>cent</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="244" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="244" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af64d03e8a7ef3fe431ad37a22d8da69e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_cc2facecent_x</definition>
        <argsstring>(Box const &amp;ubx, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real &gt; const &amp;edg_x, int ncomp, const Box &amp;domain, const BCRec *bc) noexcept</argsstring>
        <name>eb_interp_cc2facecent_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ubx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>edg_x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="283" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="283" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa19f43092081da4b158d6417ba6ef650" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_cc2facecent_y</definition>
        <argsstring>(Box const &amp;vbx, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real &gt; const &amp;edg_y, int ncomp, const Box &amp;domain, const BCRec *bc) noexcept</argsstring>
        <name>eb_interp_cc2facecent_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>edg_y</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="334" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="334" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afbe495de221a8edcb3e8566f047353be" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_centroid2facecent_x</definition>
        <argsstring>(Box const &amp;ubx, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;cvol, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real &gt; const &amp;edg_x, int ncomp, const Box &amp;domain, const BCRec *bc) noexcept</argsstring>
        <name>eb_interp_centroid2facecent_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ubx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>cvol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>edg_x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="385" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="385" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a20f22656c1c33ddd41b9bf6ff16ce05a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_centroid2facecent_y</definition>
        <argsstring>(Box const &amp;vbx, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;cvol, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real &gt; const &amp;edg_y, int ncomp, const Box &amp;domain, const BCRec *bc) noexcept</argsstring>
        <name>eb_interp_centroid2facecent_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>cvol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>edg_y</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="464" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="464" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aadf288d4a98ac6d06932233e76bc1573" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_cc2face_x</definition>
        <argsstring>(Box const &amp;ubx, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real &gt; const &amp;edg_x, int ncomp, const Box &amp;domain, const BCRec *bc) noexcept</argsstring>
        <name>eb_interp_cc2face_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ubx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>edg_x</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="545" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="545" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac23db9d46e2b4c90a98ed2c43d84f05f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_cc2face_y</definition>
        <argsstring>(Box const &amp;vbx, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real &gt; const &amp;edg_y, int ncomp, const Box &amp;domain, const BCRec *bc) noexcept</argsstring>
        <name>eb_interp_cc2face_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>edg_y</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="572" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="572" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2cb587d0d7b4a0a7e85eaea44a331f81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_add_divergence_from_flow</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;divu, Array4&lt; Real const &gt; const &amp;vel_eb, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;bnorm, Array4&lt; Real const &gt; const &amp;barea, GpuArray&lt; Real, 2 &gt; const &amp;dxinv)</argsstring>
        <name>eb_add_divergence_from_flow</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel_eb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bnorm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>barea</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" line="599" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_2D_C.H" bodystart="599" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aefcca7679b76de3867191843450d69f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::EB_interp_in_quad</definition>
        <argsstring>(Real xint, Real yint, Real v0, Real v1, Real v2, Real v3, Real x0, Real y0, Real x1, Real y1, Real x2, Real y2, Real x3, Real y3)</argsstring>
        <name>EB_interp_in_quad</name>
        <param>
          <type>Real</type>
          <declname>xint</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>yint</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>v3</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>x3</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>y3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" line="10" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" bodystart="10" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a300e308bc865c0b06a1955edbf787019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_avgdown_face_z</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;fine, int fcomp, Array4&lt; Real &gt; const &amp;crse, int ccomp, Array4&lt; Real const &gt; const &amp;area, Dim3 const &amp;ratio, int ncomp)</argsstring>
        <name>eb_avgdown_face_z</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fcomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ccomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" line="177" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" bodystart="177" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa59d455887dcc9ddd95b58158df99a8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_compute_divergence</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;divu, Array4&lt; Real const &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;v, Array4&lt; Real const &gt; const &amp;w, Array4&lt; int const &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;fcz, GpuArray&lt; Real, 3 &gt; const &amp;dxinv, bool already_on_centroids)</argsstring>
        <name>eb_compute_divergence</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 3 &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>already_on_centroids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" line="227" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" bodystart="227" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7ca548557a81e714b0e5aa66407d548a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_avg_fc_to_cc</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;cc, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;ax, Array4&lt; Real const &gt; const &amp;ay, Array4&lt; Real const &gt; const &amp;az, Array4&lt; EBCellFlag const &gt; const &amp;flag)</argsstring>
        <name>eb_avg_fc_to_cc</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ay</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>az</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" line="335" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" bodystart="335" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8289b410d7cd4e0064c73db4d361e733" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_cc2facecent_z</definition>
        <argsstring>(Box const &amp;wbx, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcz, Array4&lt; Real &gt; const &amp;edg_z, int ncomp, const Box &amp;domain, const BCRec *bc) noexcept</argsstring>
        <name>eb_interp_cc2facecent_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>wbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>edg_z</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" line="548" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" bodystart="548" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abae204af4eca5590b6fbdbdf3ea38c26" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_centroid2facecent_z</definition>
        <argsstring>(Box const &amp;wbx, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;cvol, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;fcz, Array4&lt; Real &gt; const &amp;phi_z, int ncomp, const Box &amp;domain, const BCRec *bc) noexcept</argsstring>
        <name>eb_interp_centroid2facecent_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>wbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>cvol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi_z</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" line="1035" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" bodystart="1035" bodyend="1242"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af8f47a8a092ea7a3e0b853f65bc0e605" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_interp_cc2face_z</definition>
        <argsstring>(Box const &amp;wbx, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real &gt; const &amp;edg_z, int ncomp, const Box &amp;domain, const BCRec *bc) noexcept</argsstring>
        <name>eb_interp_cc2face_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>wbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>edg_z</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BCRec" kindref="compound">BCRec</ref> *</type>
          <declname>bc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" line="1299" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" bodystart="1299" bodyend="1323"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa35f46cf4c79ff77d1a3849e7ad5bb98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::eb_add_divergence_from_flow</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;divu, Array4&lt; Real const &gt; const &amp;vel_eb, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;bnorm, Array4&lt; Real const &gt; const &amp;barea, GpuArray&lt; Real, 3 &gt; const &amp;dxinv)</argsstring>
        <name>eb_add_divergence_from_flow</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>divu</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel_eb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bnorm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>barea</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 3 &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" line="1326" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EBMultiFabUtil_3D_C.H" bodystart="1326" bodyend="1339"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a39109bb21761f9999a91aba81f033cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteEBSurface</definition>
        <argsstring>(const BoxArray &amp;ba, const DistributionMapping &amp;dmap, const Geometry &amp;geom, const EBFArrayBoxFactory *ebf)</argsstring>
        <name>WriteEBSurface</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> *</type>
          <declname>ebf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_WriteEBSurface.cpp" line="13" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_WriteEBSurface.cpp" bodystart="13" bodyend="68" declfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_WriteEBSurface.H" declline="12" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a04db8e195b61fe3907ff67f9a5754e85" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string amrex::thePlotFileType</definition>
        <argsstring>()</argsstring>
        <name>thePlotFileType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/amrdata/AMReX_WritePlotFile.cpp" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/amrdata/AMReX_WritePlotFile.cpp" bodystart="17" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a54bf01785bd8caa43c795b46e26ff773" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writePlotFile</definition>
        <argsstring>(const std::string &amp;dir, std::ostream &amp;os, int level, const MultiFab &amp;mf, const Geometry &amp;geom, const IntVect &amp;refRatio, Real bgVal, const Vector&lt; std::string &gt; &amp;names)</argsstring>
        <name>writePlotFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>refRatio</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bgVal</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/amrdata/AMReX_WritePlotFile.cpp" line="28" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/amrdata/AMReX_WritePlotFile.cpp" bodystart="28" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5d56ac97c4674967e38c97cb056a1f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writePlotFile</definition>
        <argsstring>(const char *name, const MultiFab &amp;mf, const Geometry &amp;geom, const IntVect &amp;refRatio, Real bgVal, const Vector&lt; std::string &gt; &amp;names)</argsstring>
        <name>writePlotFile</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>refRatio</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bgVal</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/amrdata/AMReX_WritePlotFile.cpp" line="222" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/amrdata/AMReX_WritePlotFile.cpp" bodystart="222" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4d535029ceefe90900c18cb40def5eeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WritePlotFile</definition>
        <argsstring>(const Vector&lt; MultiFab * &gt; &amp;mfa, const Vector&lt; Box &gt; &amp;probDomain, AmrData &amp;amrdToMimic, const std::string &amp;oFile, bool verbose, const Vector&lt; std::string &gt; &amp;varNames)</argsstring>
        <name>WritePlotFile</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>mfa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &amp;</type>
          <declname>probDomain</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1AmrData" kindref="compound">AmrData</ref> &amp;</type>
          <declname>amrdToMimic</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>oFile</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/amrdata/AMReX_WritePlotFile.cpp" line="292" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/amrdata/AMReX_WritePlotFile.cpp" bodystart="292" bodyend="424" declfile="/home/runner/work/amrex/amrex/Src/Extern/amrdata/AMReX_WritePlotFile.H" declline="24" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a12b63992133890c4ff148bbb9b95d52a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WritePlotFile</definition>
        <argsstring>(const Vector&lt; MultiFab * &gt; &amp;mfa, AmrData &amp;amrdToMimic, const std::string &amp;oFile, bool verbose, const Vector&lt; std::string &gt; &amp;varNames)</argsstring>
        <name>WritePlotFile</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>mfa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1AmrData" kindref="compound">AmrData</ref> &amp;</type>
          <declname>amrdToMimic</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>oFile</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varNames</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/amrdata/AMReX_WritePlotFile.cpp" line="426" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/amrdata/AMReX_WritePlotFile.cpp" bodystart="426" bodyend="433" declfile="/home/runner/work/amrex/amrex/Src/Extern/amrdata/AMReX_WritePlotFile.H" declline="32" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af33613c6a739f7a1c323a4430d889735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::writePlotFile</definition>
        <argsstring>(const char *name, const amrex::MultiFab &amp;mf, const amrex::Geometry &amp;geom, const amrex::IntVect &amp;refRatio, amrex::Real bgVal, const amrex::Vector&lt; std::string &gt; &amp;names)</argsstring>
        <name>writePlotFile</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">amrex::MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">amrex::Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">amrex::IntVect</ref> &amp;</type>
          <declname>refRatio</declname>
        </param>
        <param>
          <type>amrex::Real</type>
          <declname>bgVal</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/amrdata/AMReX_WritePlotFile.H" line="16" column="1" declfile="/home/runner/work/amrex/amrex/Src/Extern/amrdata/AMReX_WritePlotFile.H" declline="16" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ade93dfd6bf280f23f7f7baa47404e80b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Nestsets</definition>
        <argsstring>(const int level, const int n_levels, const FArrayBox &amp;fab, const Vector&lt; const BoxArray * &gt; box_arrays, const Vector&lt; IntVect &gt; &amp;ref_ratio, const Vector&lt; int &gt; &amp;domain_offsets, conduit::Node &amp;nestset)</argsstring>
        <name>Nestsets</name>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_levels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> * &gt;</type>
          <declname>box_arrays</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>domain_offsets</declname>
        </param>
        <param>
          <type>conduit::Node &amp;</type>
          <declname>nestset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="20" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="20" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a807d001969408582d355a731cedac987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabToBlueprintTopology</definition>
        <argsstring>(const Geometry &amp;geom, const FArrayBox &amp;fab, Node &amp;res)</argsstring>
        <name>FabToBlueprintTopology</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type>Node &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="130" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="130" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af70ff73cf1857e1a859a1fbac9ef10b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AddFabGhostIndicatorField</definition>
        <argsstring>(const FArrayBox &amp;fab, int ngrow, Node &amp;res)</argsstring>
        <name>AddFabGhostIndicatorField</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>Node &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="230" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="230" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afd44b852de9a30f6417dfc233d76ef3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabToBlueprintFields</definition>
        <argsstring>(const FArrayBox &amp;fab, const Vector&lt; std::string &gt; &amp;varnames, Node &amp;res)</argsstring>
        <name>FabToBlueprintFields</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>Node &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="285" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="285" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aede6d4189f1d218b26880a44405df55e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SingleLevelToBlueprint</definition>
        <argsstring>(const MultiFab &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Geometry &amp;geom, Real time_value, int level_step, Node &amp;res)</argsstring>
        <name>SingleLevelToBlueprint</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time_value</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level_step</declname>
        </param>
        <param>
          <type>Node &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="313" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="313" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a58624bde46f31353c6263dd50ec48bfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiLevelToBlueprint</definition>
        <argsstring>(int n_levels, const Vector&lt; const MultiFab * &gt; &amp;mfs, const Vector&lt; std::string &gt; &amp;varnames, const Vector&lt; Geometry &gt; &amp;geoms, Real time_value, const Vector&lt; int &gt; &amp;level_steps, const Vector&lt; IntVect &gt; &amp;ref_ratio, Node &amp;res)</argsstring>
        <name>MultiLevelToBlueprint</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_levels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>mfs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geoms</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time_value</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>level_steps</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>Node &amp;</type>
          <declname>res</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="341" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="341" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aec07a7132a048a1ab29b5a4b262eda8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteBlueprintFiles</definition>
        <argsstring>(const conduit::Node &amp;bp_mesh, const std::string &amp;fname_base, int step, const std::string &amp;protocol)</argsstring>
        <name>WriteBlueprintFiles</name>
        <param>
          <type>const conduit::Node &amp;</type>
          <declname>bp_mesh</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>fname_base</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>step</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>protocol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" line="459" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.cpp" bodystart="459" bodyend="563" declfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.H" declline="119" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aecc3c40b87ae2ae19e6aac69ff910cf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SingleLevelToBlueprint</definition>
        <argsstring>(const MultiFab &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Geometry &amp;geom, Real time_value, int level_step, conduit::Node &amp;bp_mesh)</argsstring>
        <name>SingleLevelToBlueprint</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time_value</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level_step</declname>
        </param>
        <param>
          <type>conduit::Node &amp;</type>
          <declname>bp_mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.H" line="66" column="10" declfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.H" declline="66" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a025e5b59bd3848fc86899a836d0800f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MultiLevelToBlueprint</definition>
        <argsstring>(int n_levels, const Vector&lt; const MultiFab * &gt; &amp;mfs, const Vector&lt; std::string &gt; &amp;varnames, const Vector&lt; Geometry &gt; &amp;geoms, Real time_value, const Vector&lt; int &gt; &amp;level_steps, const Vector&lt; IntVect &gt; &amp;ref_ratio, conduit::Node &amp;bp_mesh)</argsstring>
        <name>MultiLevelToBlueprint</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_levels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>mfs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geoms</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time_value</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>level_steps</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>conduit::Node &amp;</type>
          <declname>bp_mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.H" line="78" column="10" declfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint.H" declline="78" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a23760aeb6d76e847203cb23024d8ab2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NStructReal</declname>
            <defname>NStructReal</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NStructInt</declname>
            <defname>NStructInt</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NArrayReal</declname>
            <defname>NArrayReal</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NArrayInt</declname>
            <defname>NArrayInt</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleTileToBlueprint</definition>
        <argsstring>(const ParticleTile&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt; &amp;ptile, const Vector&lt; std::string &gt; &amp;real_comp_names, const Vector&lt; std::string &gt; &amp;int_comp_names, conduit::Node &amp;res, const std::string &amp;topology_name)</argsstring>
        <name>ParticleTileToBlueprint</name>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleTile" kindref="compound">ParticleTile</ref>&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt; &amp;</type>
          <declname>ptile</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>real_comp_names</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>int_comp_names</declname>
        </param>
        <param>
          <type>conduit::Node &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>topology_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint_ParticlesI.H" line="25" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint_ParticlesI.H" bodystart="25" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acbd817ae9ca1a59105be27f3bcc2d1fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NStructReal</declname>
            <defname>NStructReal</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NStructInt</declname>
            <defname>NStructInt</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NArrayReal</declname>
            <defname>NArrayReal</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NArrayInt</declname>
            <defname>NArrayInt</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleContainerToBlueprint</definition>
        <argsstring>(const ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt; &amp;pc, const Vector&lt; std::string &gt; &amp;real_comp_names, const Vector&lt; std::string &gt; &amp;int_comp_names, conduit::Node &amp;res, const std::string &amp;topology_name)</argsstring>
        <name>ParticleContainerToBlueprint</name>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref>&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt; &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>real_comp_names</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>int_comp_names</declname>
        </param>
        <param>
          <type>conduit::Node &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>topology_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint_ParticlesI.H" line="198" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/Conduit/AMReX_Conduit_Blueprint_ParticlesI.H" bodystart="198" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8db0da70de1a3125e8b33af200a3db88" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>static int amrex::CreateWriteHDF5AttrDouble</definition>
        <argsstring>(hid_t loc, const char *name, hsize_t n, const double *data)</argsstring>
        <name>CreateWriteHDF5AttrDouble</name>
        <param>
          <type>hid_t</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>hsize_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" line="31" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" bodystart="31" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a19368a040b960bd1ba5b2f39435e1c07" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>static int amrex::CreateWriteHDF5AttrInt</definition>
        <argsstring>(hid_t loc, const char *name, hsize_t n, const int *data)</argsstring>
        <name>CreateWriteHDF5AttrInt</name>
        <param>
          <type>hid_t</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>hsize_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" line="55" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" bodystart="55" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaf22588c7b0bb6c22716656d04ed0122" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>static int amrex::CreateWriteHDF5AttrString</definition>
        <argsstring>(hid_t loc, const char *name, const char *str)</argsstring>
        <name>CreateWriteHDF5AttrString</name>
        <param>
          <type>hid_t</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" line="79" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" bodystart="79" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a22680fb86aae7f3dcf03767b76cbc359" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::SetHDF5fapl</definition>
        <argsstring>(hid_t fapl)</argsstring>
        <name>SetHDF5fapl</name>
        <param>
          <type>hid_t</type>
          <declname>fapl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" line="113" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" bodystart="113" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae5531ab9e11a41c67335566828817058" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::WriteGenericPlotfileHeaderHDF5</definition>
        <argsstring>(hid_t fid, int nlevels, const Vector&lt; const MultiFab * &gt; &amp;mf, const Vector&lt; BoxArray &gt; &amp;bArray, const Vector&lt; std::string &gt; &amp;varnames, const Vector&lt; Geometry &gt; &amp;geom, Real time, const Vector&lt; int &gt; &amp;level_steps, const Vector&lt; IntVect &gt; &amp;ref_ratio, const std::string &amp;versionName, const std::string &amp;levelPrefix, const std::string &amp;mfPrefix, const Vector&lt; std::string &gt; &amp;extra_dirs)</argsstring>
        <name>WriteGenericPlotfileHeaderHDF5</name>
        <param>
          <type>hid_t</type>
          <declname>fid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nlevels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>bArray</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>level_steps</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>extra_dirs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" line="147" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" bodystart="147" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a35cb6e91489172228a5e86d0e274e911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteMultiLevelPlotfileHDF5SingleDset</definition>
        <argsstring>(const std::string &amp;plotfilename, int nlevels, const Vector&lt; const MultiFab * &gt; &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Vector&lt; Geometry &gt; &amp;geom, Real time, const Vector&lt; int &gt; &amp;level_steps, const Vector&lt; IntVect &gt; &amp;ref_ratio, const std::string &amp;compression, const std::string &amp;versionName, const std::string &amp;levelPrefix, const std::string &amp;mfPrefix, const Vector&lt; std::string &gt; &amp;extra_dirs)</argsstring>
        <name>WriteMultiLevelPlotfileHDF5SingleDset</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nlevels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>level_steps</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>compression</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>extra_dirs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" line="332" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" bodystart="332" bodyend="770" declfile="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.H" declline="55" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a12a28b501fcf51d721c9bfdb141a0fd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteMultiLevelPlotfileHDF5MultiDset</definition>
        <argsstring>(const std::string &amp;plotfilename, int nlevels, const Vector&lt; const MultiFab * &gt; &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Vector&lt; Geometry &gt; &amp;geom, Real time, const Vector&lt; int &gt; &amp;level_steps, const Vector&lt; IntVect &gt; &amp;ref_ratio, const std::string &amp;compression, const std::string &amp;versionName, const std::string &amp;levelPrefix, const std::string &amp;mfPrefix, const Vector&lt; std::string &gt; &amp;extra_dirs)</argsstring>
        <name>WriteMultiLevelPlotfileHDF5MultiDset</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nlevels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>level_steps</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>compression</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>extra_dirs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" line="772" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" bodystart="772" bodyend="1212" declfile="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.H" declline="81" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab4091ae0cef4a267c78724116432a941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteSingleLevelPlotfileHDF5</definition>
        <argsstring>(const std::string &amp;plotfilename, const MultiFab &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Geometry &amp;geom, Real time, int level_step, const std::string &amp;compression, const std::string &amp;versionName, const std::string &amp;levelPrefix, const std::string &amp;mfPrefix, const Vector&lt; std::string &gt; &amp;extra_dirs)</argsstring>
        <name>WriteSingleLevelPlotfileHDF5</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level_step</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>compression</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>extra_dirs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" line="1215" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" bodystart="1215" bodyend="1231" declfile="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.H" declline="17" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa3fc410d182f902647727772313eb291" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteSingleLevelPlotfileHDF5SingleDset</definition>
        <argsstring>(const std::string &amp;plotfilename, const MultiFab &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Geometry &amp;geom, Real time, int level_step, const std::string &amp;compression, const std::string &amp;versionName, const std::string &amp;levelPrefix, const std::string &amp;mfPrefix, const Vector&lt; std::string &gt; &amp;extra_dirs)</argsstring>
        <name>WriteSingleLevelPlotfileHDF5SingleDset</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level_step</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>compression</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>extra_dirs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" line="1234" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" bodystart="1234" bodyend="1250" declfile="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.H" declline="43" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abd149d5130892485ad747e8152093df9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteSingleLevelPlotfileHDF5MultiDset</definition>
        <argsstring>(const std::string &amp;plotfilename, const MultiFab &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Geometry &amp;geom, Real time, int level_step, const std::string &amp;compression, const std::string &amp;versionName, const std::string &amp;levelPrefix, const std::string &amp;mfPrefix, const Vector&lt; std::string &gt; &amp;extra_dirs)</argsstring>
        <name>WriteSingleLevelPlotfileHDF5MultiDset</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level_step</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>compression</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>extra_dirs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" line="1253" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" bodystart="1253" bodyend="1269" declfile="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.H" declline="69" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0aca4b49cf7b2929efe25b9bd590a49e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteMultiLevelPlotfileHDF5</definition>
        <argsstring>(const std::string &amp;plotfilename, int nlevels, const Vector&lt; const MultiFab * &gt; &amp;mf, const Vector&lt; std::string &gt; &amp;varnames, const Vector&lt; Geometry &gt; &amp;geom, Real time, const Vector&lt; int &gt; &amp;level_steps, const Vector&lt; IntVect &gt; &amp;ref_ratio, const std::string &amp;compression, const std::string &amp;versionName, const std::string &amp;levelPrefix, const std::string &amp;mfPrefix, const Vector&lt; std::string &gt; &amp;extra_dirs)</argsstring>
        <name>WriteMultiLevelPlotfileHDF5</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>plotfilename</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nlevels</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>varnames</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>level_steps</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>compression</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>versionName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>levelPrefix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>mfPrefix</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>extra_dirs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" line="1272" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.cpp" bodystart="1272" bodyend="1289" declfile="/home/runner/work/amrex/amrex/Src/Extern/HDF5/AMReX_PlotFileUtilHDF5.H" declline="29" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae6eab02ca0a088733102a27a1b57321a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::habec_mat</definition>
        <argsstring>(GpuArray&lt; Real, 2 *AMREX_SPACEDIM+1 &gt; &amp;sten, int i, int j, int k, Dim3 const &amp;boxlo, Dim3 const &amp;boxhi, Real sa, Array4&lt; Real const &gt; const &amp;a, Real sb, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dx, GpuArray&lt; Array4&lt; Real const &gt;, AMREX_SPACEDIM &gt; const &amp;b, GpuArray&lt; int, AMREX_SPACEDIM *2 &gt; const &amp;bctype, GpuArray&lt; Real, AMREX_SPACEDIM *2 &gt; const &amp;bcl, int bho, GpuArray&lt; Array4&lt; int const &gt;, AMREX_SPACEDIM *2 &gt; const &amp;msk, Array4&lt; Real &gt; const &amp;diaginv)</argsstring>
        <name>habec_mat</name>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 *AMREX_SPACEDIM+1 &gt; &amp;</type>
          <declname>sten</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>boxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>boxhi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>sa</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>sb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt;, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM *2 &gt; const &amp;</type>
          <declname>bctype</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM *2 &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bho</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt;, AMREX_SPACEDIM *2 &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>diaginv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_2D_K.H" line="15" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_2D_K.H" bodystart="15" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a26d70e1b51526ead26433b0583ffe6fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Int</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::habec_ijmat</definition>
        <argsstring>(GpuArray&lt; Real, 2 *AMREX_SPACEDIM+1 &gt; &amp;sten, Array4&lt; Int &gt; const &amp;ncols, Array4&lt; Real &gt; const &amp;diaginv, int i, int j, int k, Array4&lt; Int const &gt; const &amp;cell_id, Real sa, Array4&lt; Real const &gt; const &amp;a, Real sb, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dx, GpuArray&lt; Array4&lt; Real const &gt;, AMREX_SPACEDIM &gt; const &amp;b, GpuArray&lt; int, AMREX_SPACEDIM *2 &gt; const &amp;bctype, GpuArray&lt; Real, AMREX_SPACEDIM *2 &gt; const &amp;bcl, int bho, Array4&lt; int const &gt; const &amp;osm)</argsstring>
        <name>habec_ijmat</name>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 *AMREX_SPACEDIM+1 &gt; &amp;</type>
          <declname>sten</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Int &gt; const &amp;</type>
          <declname>ncols</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>diaginv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Int const &gt; const &amp;</type>
          <declname>cell_id</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>sa</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>sb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt;, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM *2 &gt; const &amp;</type>
          <declname>bctype</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM *2 &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>bho</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_2D_K.H" line="91" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_2D_K.H" bodystart="91" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abebd70eafbd522c54911f746d423884f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Int</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::habec_cols</definition>
        <argsstring>(GpuArray&lt; Int, 2 *AMREX_SPACEDIM+1 &gt; &amp;sten, int i, int j, int, Array4&lt; Int const &gt; const &amp;cell_id)</argsstring>
        <name>habec_cols</name>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Int, 2 *AMREX_SPACEDIM+1 &gt; &amp;</type>
          <declname>sten</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Int const &gt; const &amp;</type>
          <declname>cell_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_2D_K.H" line="171" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Habec_2D_K.H" bodystart="171" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af5a050719637ed453c73af4d4ca48c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1Hypre" kindref="compound">Hypre</ref> &gt;</type>
        <definition>std::unique_ptr&lt; Hypre &gt; amrex::makeHypre</definition>
        <argsstring>(const BoxArray &amp;grids, const DistributionMapping &amp;dmap, const Geometry &amp;geom, MPI_Comm comm_, Hypre::Interface interface, const iMultiFab *overset_mask)</argsstring>
        <name>makeHypre</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm_</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Hypre_1af08fbb42b4509a32e7f20a6101dfd13f" kindref="member">Hypre::Interface</ref></type>
          <declname>interface</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> *</type>
          <declname>overset_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Hypre.cpp" line="15" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Hypre.cpp" bodystart="15" bodyend="28" declfile="/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_Hypre.H" declline="96" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abbd0e7692c28626659b75637c2c63528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1PETScABecLap" kindref="compound">PETScABecLap</ref> &gt;</type>
        <definition>std::unique_ptr&lt; PETScABecLap &gt; amrex::makePetsc</definition>
        <argsstring>(const BoxArray &amp;grids, const DistributionMapping &amp;dmap, const Geometry &amp;geom, MPI_Comm comm_)</argsstring>
        <name>makePetsc</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref></type>
          <declname>comm_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/PETSc/AMReX_PETSc.cpp" line="39" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/PETSc/AMReX_PETSc.cpp" bodystart="39" bodyend="43" declfile="/home/runner/work/amrex/amrex/Src/Extern/PETSc/AMReX_PETSc.H" declline="77" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a41265e28034440c2aaa8fb38d3cd38c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::SanitizeName</definition>
        <argsstring>(const std::string &amp;sname)</argsstring>
        <name>SanitizeName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="43" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="45" bodyend="66" declfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" declline="43" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1ebc8341ffa9cc6f20e707bfb36ce253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::SimpleRemoveOverlap</definition>
        <argsstring>(BoxArray &amp;ba)</argsstring>
        <name>SimpleRemoveOverlap</name>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="44" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="70" bodyend="85" declfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a61e745ad34b00278dec10a2723c3d788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::avgDown_doit</definition>
        <argsstring>(const FArrayBox &amp;fine_fab, FArrayBox &amp;crse_fab, const Box &amp;ovlp, int scomp, int dcomp, int ncomp, Vector&lt; int &gt; &amp;ratio)</argsstring>
        <name>avgDown_doit</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fine_fab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>crse_fab</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>ovlp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="45" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="89" bodyend="112" declfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acdfc31382ab1f46867b783921a6f465e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>amrex::Box amrex::FixCoarseBoxSize</definition>
        <argsstring>(const Box &amp;fineBox, int rr)</argsstring>
        <name>FixCoarseBoxSize</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>fineBox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="48" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="116" bodyend="128" declfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" declline="48" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a42624827c89b4341f0f95486188ba5c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::avgDown</definition>
        <argsstring>(MultiFab &amp;S_crse, MultiFab &amp;S_fine, int scomp, int dcomp, int ncomp, Vector&lt; int &gt; &amp;ratio)</argsstring>
        <name>avgDown</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>S_fine</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>scomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dcomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="49" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="132" bodyend="154" declfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" declline="49" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aee4cc89e337e42259b850eafbad65cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::PrintTimeRangeList</definition>
        <argsstring>(const std::list&lt; RegionsProfStats::TimeRange &gt; &amp;trList)</argsstring>
        <name>PrintTimeRangeList</name>
        <param>
          <type>const std::list&lt; <ref refid="structBLProfStats_1_1TimeRange" kindref="compound">RegionsProfStats::TimeRange</ref> &gt; &amp;</type>
          <declname>trList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="51" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="158" bodyend="169" declfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1a6b7be29b3621c9df4db1d93736597b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RedistFiles</definition>
        <argsstring>()</argsstring>
        <name>RedistFiles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="52" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="173" bodyend="251" declfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" declline="52" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ace32984e953e92b236d8e765dd2baaf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::NHops</definition>
        <argsstring>(const Box &amp;tbox, const IntVect &amp;ivfrom, const IntVect &amp;ivto)</argsstring>
        <name>NHops</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>tbox</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ivfrom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ivto</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="53" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="254" bodyend="264" declfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" declline="53" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa2acbc851871868eb313f35d3512e986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Write2DFab</definition>
        <argsstring>(const string &amp;filenameprefix, const int xdim, const int ydim, const double *data)</argsstring>
        <name>Write2DFab</name>
        <param>
          <type>const string &amp;</type>
          <declname>filenameprefix</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xdim</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ydim</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="54" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="268" bodyend="277" declfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" declline="54" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0e9acfad7e7501e9ff98d50a73b1382a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Write2DText</definition>
        <argsstring>(const string &amp;filenameprefix, const int xdim, const int ydim, const double *data)</argsstring>
        <name>Write2DText</name>
        <param>
          <type>const string &amp;</type>
          <declname>filenameprefix</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xdim</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ydim</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="56" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="281" bodyend="298" declfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" declline="56" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1c02ea7752fae69fe9fb9e7f9c3e6f4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Write3DFab</definition>
        <argsstring>(const string &amp;filenameprefix, const int xdim, const int ydim, const int zdim, const double *data)</argsstring>
        <name>Write3DFab</name>
        <param>
          <type>const string &amp;</type>
          <declname>filenameprefix</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xdim</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ydim</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>zdim</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="58" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="302" bodyend="311" declfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" declline="58" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6d17597e95ab560d6e8db9bd3bc5c3d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WriteFab</definition>
        <argsstring>(const string &amp;filenameprefix, const int xdim, const int ydim, const double *data)</argsstring>
        <name>WriteFab</name>
        <param>
          <type>const string &amp;</type>
          <declname>filenameprefix</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xdim</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ydim</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="60" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="315" bodyend="339" declfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" declline="60" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a393accb69353384e42f45a34cb386180" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::FileSize</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>FileSize</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="62" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="341" bodyend="345" declfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" declline="62" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaae16c4ac3245574456ee8dc48c261be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MakeFuncPctTimesMF</definition>
        <argsstring>(const Vector&lt; Vector&lt; BLProfStats::FuncStat &gt; &gt; &amp;funcStats, const Vector&lt; std::string &gt; &amp;blpFNames, const std::map&lt; std::string, BLProfiler::ProfStats &gt; &amp;mProfStats, Real runTime, int dataNProcs)</argsstring>
        <name>MakeFuncPctTimesMF</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structBLProfStats_1_1FuncStat" kindref="compound">BLProfStats::FuncStat</ref> &gt; &gt; &amp;</type>
          <declname>funcStats</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>blpFNames</declname>
        </param>
        <param>
          <type>const std::map&lt; std::string, BLProfiler::ProfStats &gt; &amp;</type>
          <declname>mProfStats</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>runTime</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dataNProcs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="63" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="349" bodyend="397" declfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" declline="63" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abf61acca5a480f47841ff87d3fc31536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CollectMProfStats</definition>
        <argsstring>(std::map&lt; std::string, BLProfiler::ProfStats &gt; &amp;mProfStats, const Vector&lt; Vector&lt; BLProfStats::FuncStat &gt; &gt; &amp;funcStats, const Vector&lt; std::string &gt; &amp;fNames, Real runTime, int whichProc)</argsstring>
        <name>CollectMProfStats</name>
        <param>
          <type>std::map&lt; std::string, BLProfiler::ProfStats &gt; &amp;</type>
          <declname>mProfStats</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structBLProfStats_1_1FuncStat" kindref="compound">BLProfStats::FuncStat</ref> &gt; &gt; &amp;</type>
          <declname>funcStats</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>fNames</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>runTime</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>whichProc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="67" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="401" bodyend="439" declfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" declline="67" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a171596246077e8bb3d38d0e3a513c481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::GraphTopPct</definition>
        <argsstring>(const std::map&lt; std::string, BLProfiler::ProfStats &gt; &amp;mProfStats, const Vector&lt; Vector&lt; BLProfStats::FuncStat &gt; &gt; &amp;funcStats, const Vector&lt; std::string &gt; &amp;fNames, Real runTime, int dataNProcs, Real gPercent)</argsstring>
        <name>GraphTopPct</name>
        <param>
          <type>const std::map&lt; std::string, BLProfiler::ProfStats &gt; &amp;</type>
          <declname>mProfStats</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structBLProfStats_1_1FuncStat" kindref="compound">BLProfStats::FuncStat</ref> &gt; &gt; &amp;</type>
          <declname>funcStats</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>fNames</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>runTime</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dataNProcs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>gPercent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" line="71" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.cpp" bodystart="443" bodyend="472" declfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLProfUtilities.H" declline="71" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa60440de48a953eec9553933d683ef9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WritePlotfile</definition>
        <argsstring>(const std::string &amp;pfversion, const Vector&lt; MultiFab &gt; &amp;data, const Real time, const Vector&lt; Real &gt; &amp;probLo, const Vector&lt; Real &gt; &amp;probHi, const Vector&lt; int &gt; &amp;refRatio, const Vector&lt; Box &gt; &amp;probDomain, const Vector&lt; Vector&lt; Real &gt; &gt; &amp;dxLevel, const int coordSys, const std::string &amp;oFile, const Vector&lt; std::string &gt; &amp;names, const bool verbose, const bool isCartGrid, const Real *vfeps, const int *levelSteps)</argsstring>
        <name>WritePlotfile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pfversion</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>probLo</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>probHi</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>refRatio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &amp;</type>
          <declname>probDomain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &gt; &amp;</type>
          <declname>dxLevel</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coordSys</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>oFile</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>verbose</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isCartGrid</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>vfeps</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>levelSteps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="17" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="17" bodyend="164" declfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.H" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aec030b01162fc088d8de7dc493235430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string amrex::VisMFBaseName</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>VisMFBaseName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="169" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="169" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a05e93313b0f001e810b02a69f71c5b61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Write2DBoxFrom3D</definition>
        <argsstring>(const Box &amp;box, std::ostream &amp;os, int whichPlane)</argsstring>
        <name>Write2DBoxFrom3D</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>whichPlane</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="180" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="180" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa9dca52e8981b35caa7b00d00c8c6a8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1VisMF_1_1FabOnDisk" kindref="compound">VisMF::FabOnDisk</ref></type>
        <definition>VisMF::FabOnDisk amrex::VisMFWrite</definition>
        <argsstring>(const FArrayBox &amp;fabIn, const std::string &amp;filename, std::ostream &amp;os, long &amp;bytes, int whichPlane)</argsstring>
        <name>VisMFWrite</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fabIn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>long &amp;</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>whichPlane</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="215" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="215" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a85a195c43f85ba86fc9f4e450117678a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>static std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Vector&lt; Vector&lt; Real &gt; &gt; &amp;ar)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &gt; &amp;</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="259" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="259" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0009871904f8601dbda21f3654b7bb33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::VisMFWriteHeader</definition>
        <argsstring>(const std::string &amp;mf_name, VisMF::Header &amp;hdr, int whichPlane)</argsstring>
        <name>VisMFWriteHeader</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>mf_name</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1VisMF_1_1Header" kindref="compound">VisMF::Header</ref> &amp;</type>
          <declname>hdr</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>whichPlane</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="279" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="279" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a35ef1d42135f8c075072684f42b02b9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::WritePlotfile2DFrom3D</definition>
        <argsstring>(const std::string &amp;pfversion, const Vector&lt; MultiFab &gt; &amp;data, const Real time, const Vector&lt; Real &gt; &amp;probLo, const Vector&lt; Real &gt; &amp;probHi, const Vector&lt; int &gt; &amp;refRatio, const Vector&lt; Box &gt; &amp;probDomain, const Vector&lt; Vector&lt; Real &gt; &gt; &amp;dxLevel, const int coordSys, const std::string &amp;oFile, const Vector&lt; std::string &gt; &amp;names, const bool verbose, const bool isCartGrid, const Real *vfeps, const int *levelSteps)</argsstring>
        <name>WritePlotfile2DFrom3D</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pfversion</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>probLo</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>probHi</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>refRatio</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &amp;</type>
          <declname>probDomain</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &gt; &amp;</type>
          <declname>dxLevel</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coordSys</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>oFile</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>verbose</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>isCartGrid</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>vfeps</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>levelSteps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" line="325" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.cpp" bodystart="325" bodyend="536" declfile="/home/runner/work/amrex/amrex/Src/Extern/ProfParser/AMReX_BLWritePlotFile.H" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8d39fa37907313633609b0b404501b7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::senseiNewMacro</definition>
        <argsstring>(AmrDataAdaptor)</argsstring>
        <name>senseiNewMacro</name>
        <param>
          <type><ref refid="classamrex_1_1AmrDataAdaptor" kindref="compound">AmrDataAdaptor</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SENSEI/AMReX_AmrDataAdaptor.cpp" line="165" column="1" declfile="/home/runner/work/amrex/amrex/Src/Extern/SENSEI/AMReX_AmrDataAdaptor.cpp" declline="165" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac81456cdd4c1cd623e05a2494f607d00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::senseiNewMacro</definition>
        <argsstring>(AmrMeshDataAdaptor)</argsstring>
        <name>senseiNewMacro</name>
        <param>
          <type><ref refid="classamrex_1_1AmrMeshDataAdaptor" kindref="compound">AmrMeshDataAdaptor</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SENSEI/AMReX_AmrMeshDataAdaptor.cpp" line="91" column="1" declfile="/home/runner/work/amrex/amrex/Src/Extern/SENSEI/AMReX_AmrMeshDataAdaptor.cpp" declline="91" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aff6483cc92504552a999444884df9c7f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_adotx</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; T &gt; const &amp;y, Array4&lt; T const &gt; const &amp;x, Array4&lt; T const &gt; const &amp;a, Array4&lt; T const &gt; const &amp;bX, GpuArray&lt; T, AMREX_SPACEDIM &gt; const &amp;dxinv, T alpha, T beta) noexcept</argsstring>
        <name>mlabeclap_adotx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; T, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>T</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>T</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="9" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="9" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a48d2ee5ef05ca8b461877a41e532d66e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_adotx_os</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; T &gt; const &amp;y, Array4&lt; T const &gt; const &amp;x, Array4&lt; T const &gt; const &amp;a, Array4&lt; T const &gt; const &amp;bX, Array4&lt; int const &gt; const &amp;osm, GpuArray&lt; T, AMREX_SPACEDIM &gt; const &amp;dxinv, T alpha, T beta) noexcept</argsstring>
        <name>mlabeclap_adotx_os</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; T, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>T</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>T</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="24" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="24" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac6b2b3de7572a29c427ebdaf13afc8e9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_normalize</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; T &gt; const &amp;x, Array4&lt; T const &gt; const &amp;a, Array4&lt; T const &gt; const &amp;bX, GpuArray&lt; T, AMREX_SPACEDIM &gt; const &amp;dxinv, T alpha, T beta) noexcept</argsstring>
        <name>mlabeclap_normalize</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; T, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>T</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>T</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="44" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="44" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4a0821339541d218cee0577a42279d6d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_flux_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; T &gt; const &amp;fx, Array4&lt; T const &gt; const &amp;sol, Array4&lt; T const &gt; const &amp;bx, T fac, int ncomp) noexcept</argsstring>
        <name>mlabeclap_flux_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="56" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="56" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae570ee85491660ea9f36bcc0791e999f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_flux_xface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; T &gt; const &amp;fx, Array4&lt; T const &gt; const &amp;sol, Array4&lt; T const &gt; const &amp;bx, T fac, int xlen, int ncomp) noexcept</argsstring>
        <name>mlabeclap_flux_xface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xlen</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="72" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="72" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8ec73e9321cbfd5d28374107ef24d4a5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::abec_gsrb</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; T &gt; const &amp;phi, Array4&lt; T const &gt; const &amp;rhs, T alpha, Array4&lt; T const &gt; const &amp;a, T dhx, Array4&lt; T const &gt; const &amp;bX, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m1, Array4&lt; T const &gt; const &amp;f0, Array4&lt; T const &gt; const &amp;f1, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>abec_gsrb</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="87" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="87" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a69bee84824fdeec94ff8ae48596594f6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::abec_gsrb_os</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; T &gt; const &amp;phi, Array4&lt; T const &gt; const &amp;rhs, T alpha, Array4&lt; T const &gt; const &amp;a, T dhx, Array4&lt; T const &gt; const &amp;bX, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m1, Array4&lt; T const &gt; const &amp;f0, Array4&lt; T const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;osm, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>abec_gsrb_os</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="121" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="121" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a87228025264a2ecce51b2645576a432b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::abec_gsrb_with_line_solve</definition>
        <argsstring>(Box const &amp;, Array4&lt; T &gt; const &amp;, Array4&lt; T const &gt; const &amp;, T, Array4&lt; T const &gt; const &amp;, T, Array4&lt; T const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Array4&lt; T const &gt; const &amp;, Array4&lt; T const &gt; const &amp;, Box const &amp;, int, int) noexcept</argsstring>
        <name>abec_gsrb_with_line_solve</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="160" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="160" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a040b31bdb9951876d8277049591cfe51" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::overset_rescale_bcoef_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; T &gt; const &amp;bX, Array4&lt; int const &gt; const &amp;osm, int ncomp, T osfac) noexcept</argsstring>
        <name>overset_rescale_bcoef_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>T</type>
          <declname>osfac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" line="176" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_1D_K.H" bodystart="176" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a59a261f7b528ad613dd7de3d14f7aca6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_adotx</definition>
        <argsstring>(int i, int j, int, int n, Array4&lt; T &gt; const &amp;y, Array4&lt; T const &gt; const &amp;x, Array4&lt; T const &gt; const &amp;a, Array4&lt; T const &gt; const &amp;bX, Array4&lt; T const &gt; const &amp;bY, GpuArray&lt; T, AMREX_SPACEDIM &gt; const &amp;dxinv, T alpha, T beta) noexcept</argsstring>
        <name>mlabeclap_adotx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; T, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>T</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>T</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="9" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="9" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab51910c6124009c280b7d033be029d9a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_adotx_os</definition>
        <argsstring>(int i, int j, int, int n, Array4&lt; T &gt; const &amp;y, Array4&lt; T const &gt; const &amp;x, Array4&lt; T const &gt; const &amp;a, Array4&lt; T const &gt; const &amp;bX, Array4&lt; T const &gt; const &amp;bY, Array4&lt; int const &gt; const &amp;osm, GpuArray&lt; T, AMREX_SPACEDIM &gt; const &amp;dxinv, T alpha, T beta) noexcept</argsstring>
        <name>mlabeclap_adotx_os</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; T, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>T</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>T</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="28" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="28" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6679712ad1417670bc200da8883e4fed" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_normalize</definition>
        <argsstring>(int i, int j, int, int n, Array4&lt; T &gt; const &amp;x, Array4&lt; T const &gt; const &amp;a, Array4&lt; T const &gt; const &amp;bX, Array4&lt; T const &gt; const &amp;bY, GpuArray&lt; T, AMREX_SPACEDIM &gt; const &amp;dxinv, T alpha, T beta) noexcept</argsstring>
        <name>mlabeclap_normalize</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; T, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>T</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>T</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="52" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="52" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a62feb0604dd9466e30858a49303d0d77" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_flux_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; T &gt; const &amp;fy, Array4&lt; T const &gt; const &amp;sol, Array4&lt; T const &gt; const &amp;by, T fac, int ncomp) noexcept</argsstring>
        <name>mlabeclap_flux_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>by</declname>
        </param>
        <param>
          <type>T</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="104" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="104" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac6918b5f6341c2be9032719f0f065ed4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_flux_yface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; T &gt; const &amp;fy, Array4&lt; T const &gt; const &amp;sol, Array4&lt; T const &gt; const &amp;by, T fac, int ylen, int ncomp) noexcept</argsstring>
        <name>mlabeclap_flux_yface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>by</declname>
        </param>
        <param>
          <type>T</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ylen</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="122" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="122" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae675a0a53c78b668bb47177e044badc5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::abec_gsrb</definition>
        <argsstring>(int i, int j, int, int n, Array4&lt; T &gt; const &amp;phi, Array4&lt; T const &gt; const &amp;rhs, T alpha, Array4&lt; T const &gt; const &amp;a, T dhx, T dhy, Array4&lt; T const &gt; const &amp;bX, Array4&lt; T const &gt; const &amp;bY, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m2, Array4&lt; int const &gt; const &amp;m1, Array4&lt; int const &gt; const &amp;m3, Array4&lt; T const &gt; const &amp;f0, Array4&lt; T const &gt; const &amp;f2, Array4&lt; T const &gt; const &amp;f1, Array4&lt; T const &gt; const &amp;f3, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>abec_gsrb</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="144" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="144" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a49f9066a9cfe5af5ae7b757267fb685c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::abec_gsrb_os</definition>
        <argsstring>(int i, int j, int, int n, Array4&lt; T &gt; const &amp;phi, Array4&lt; T const &gt; const &amp;rhs, T alpha, Array4&lt; T const &gt; const &amp;a, T dhx, T dhy, Array4&lt; T const &gt; const &amp;bX, Array4&lt; T const &gt; const &amp;bY, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m2, Array4&lt; int const &gt; const &amp;m1, Array4&lt; int const &gt; const &amp;m3, Array4&lt; T const &gt; const &amp;f0, Array4&lt; T const &gt; const &amp;f2, Array4&lt; T const &gt; const &amp;f1, Array4&lt; T const &gt; const &amp;f3, Array4&lt; int const &gt; const &amp;osm, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>abec_gsrb_os</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="186" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="186" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab087527f179fe3f044522d9a0f0d4bba" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::abec_gsrb_with_line_solve</definition>
        <argsstring>(Box const &amp;box, Array4&lt; T &gt; const &amp;phi, Array4&lt; T const &gt; const &amp;rhs, T alpha, Array4&lt; T const &gt; const &amp;a, T dhx, T dhy, Array4&lt; T const &gt; const &amp;bX, Array4&lt; T const &gt; const &amp;bY, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m2, Array4&lt; int const &gt; const &amp;m1, Array4&lt; int const &gt; const &amp;m3, Array4&lt; T const &gt; const &amp;f0, Array4&lt; T const &gt; const &amp;f2, Array4&lt; T const &gt; const &amp;f1, Array4&lt; T const &gt; const &amp;f3, Box const &amp;vbox, int redblack, int nc) noexcept</argsstring>
        <name>abec_gsrb_with_line_solve</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="233" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="233" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a756bd05a03228632b5dfc9323d9440fa" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::overset_rescale_bcoef_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; T &gt; const &amp;bY, Array4&lt; int const &gt; const &amp;osm, int ncomp, T osfac) noexcept</argsstring>
        <name>overset_rescale_bcoef_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>T</type>
          <declname>osfac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" line="362" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_2D_K.H" bodystart="362" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3ad3209fe0274b23d9085603eed318f3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_adotx</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; T &gt; const &amp;y, Array4&lt; T const &gt; const &amp;x, Array4&lt; T const &gt; const &amp;a, Array4&lt; T const &gt; const &amp;bX, Array4&lt; T const &gt; const &amp;bY, Array4&lt; T const &gt; const &amp;bZ, GpuArray&lt; T, AMREX_SPACEDIM &gt; const &amp;dxinv, T alpha, T beta) noexcept</argsstring>
        <name>mlabeclap_adotx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; T, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>T</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>T</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="9" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="9" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6b7d999a8e5ec81f38432f0b1ca8880a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_adotx_os</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; T &gt; const &amp;y, Array4&lt; T const &gt; const &amp;x, Array4&lt; T const &gt; const &amp;a, Array4&lt; T const &gt; const &amp;bX, Array4&lt; T const &gt; const &amp;bY, Array4&lt; T const &gt; const &amp;bZ, Array4&lt; int const &gt; const &amp;osm, GpuArray&lt; T, AMREX_SPACEDIM &gt; const &amp;dxinv, T alpha, T beta) noexcept</argsstring>
        <name>mlabeclap_adotx_os</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; T, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>T</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>T</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="32" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="32" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a604ccc631a043a2fe19bb998e73771e9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_normalize</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; T &gt; const &amp;x, Array4&lt; T const &gt; const &amp;a, Array4&lt; T const &gt; const &amp;bX, Array4&lt; T const &gt; const &amp;bY, Array4&lt; T const &gt; const &amp;bZ, GpuArray&lt; T, AMREX_SPACEDIM &gt; const &amp;dxinv, T alpha, T beta) noexcept</argsstring>
        <name>mlabeclap_normalize</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; T, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>T</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>T</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="60" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="60" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a59793550ea92faf392dc82625edc1f42" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_flux_z</definition>
        <argsstring>(Box const &amp;box, Array4&lt; T &gt; const &amp;fz, Array4&lt; T const &gt; const &amp;sol, Array4&lt; T const &gt; const &amp;bz, T fac, int ncomp) noexcept</argsstring>
        <name>mlabeclap_flux_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bz</declname>
        </param>
        <param>
          <type>T</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="163" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="163" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ada7495e288a74399fbf81b08f1499629" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlabeclap_flux_zface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; T &gt; const &amp;fz, Array4&lt; T const &gt; const &amp;sol, Array4&lt; T const &gt; const &amp;bz, T fac, int zlen, int ncomp) noexcept</argsstring>
        <name>mlabeclap_flux_zface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bz</declname>
        </param>
        <param>
          <type>T</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>zlen</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="183" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="183" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abe6757d03f25c7b211b9302f19fe4509" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::abec_gsrb</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; T &gt; const &amp;phi, Array4&lt; T const &gt; const &amp;rhs, T alpha, Array4&lt; T const &gt; const &amp;a, T dhx, T dhy, T dhz, Array4&lt; T const &gt; const &amp;bX, Array4&lt; T const &gt; const &amp;bY, Array4&lt; T const &gt; const &amp;bZ, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m2, Array4&lt; int const &gt; const &amp;m4, Array4&lt; int const &gt; const &amp;m1, Array4&lt; int const &gt; const &amp;m3, Array4&lt; int const &gt; const &amp;m5, Array4&lt; T const &gt; const &amp;f0, Array4&lt; T const &gt; const &amp;f2, Array4&lt; T const &gt; const &amp;f4, Array4&lt; T const &gt; const &amp;f1, Array4&lt; T const &gt; const &amp;f3, Array4&lt; T const &gt; const &amp;f5, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>abec_gsrb</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="210" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="210" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a12de598979f095f4505cd0d3b762d2ee" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::abec_gsrb_os</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; T &gt; const &amp;phi, Array4&lt; T const &gt; const &amp;rhs, T alpha, Array4&lt; T const &gt; const &amp;a, T dhx, T dhy, T dhz, Array4&lt; T const &gt; const &amp;bX, Array4&lt; T const &gt; const &amp;bY, Array4&lt; T const &gt; const &amp;bZ, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m2, Array4&lt; int const &gt; const &amp;m4, Array4&lt; int const &gt; const &amp;m1, Array4&lt; int const &gt; const &amp;m3, Array4&lt; int const &gt; const &amp;m5, Array4&lt; T const &gt; const &amp;f0, Array4&lt; T const &gt; const &amp;f2, Array4&lt; T const &gt; const &amp;f4, Array4&lt; T const &gt; const &amp;f1, Array4&lt; T const &gt; const &amp;f3, Array4&lt; T const &gt; const &amp;f5, Array4&lt; int const &gt; const &amp;osm, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>abec_gsrb_os</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="268" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="268" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a11ff46aab2851af1b7d8dc12bb1a7b9f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::tridiagonal_solve</definition>
        <argsstring>(Array1D&lt; T, 0, 31 &gt; &amp;a_ls, Array1D&lt; T, 0, 31 &gt; &amp;b_ls, Array1D&lt; T, 0, 31 &gt; &amp;c_ls, Array1D&lt; T, 0, 31 &gt; &amp;r_ls, Array1D&lt; T, 0, 31 &gt; &amp;u_ls, Array1D&lt; T, 0, 31 &gt; &amp;gam, int ilen) noexcept</argsstring>
        <name>tridiagonal_solve</name>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; T, 0, 31 &gt; &amp;</type>
          <declname>a_ls</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; T, 0, 31 &gt; &amp;</type>
          <declname>b_ls</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; T, 0, 31 &gt; &amp;</type>
          <declname>c_ls</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; T, 0, 31 &gt; &amp;</type>
          <declname>r_ls</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; T, 0, 31 &gt; &amp;</type>
          <declname>u_ls</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; T, 0, 31 &gt; &amp;</type>
          <declname>gam</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ilen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="332" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="332" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aba0888eaff393ce0a7ed9270c20e7c55" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::abec_gsrb_with_line_solve</definition>
        <argsstring>(Box const &amp;box, Array4&lt; T &gt; const &amp;phi, Array4&lt; T const &gt; const &amp;rhs, T alpha, Array4&lt; T const &gt; const &amp;a, T dhx, T dhy, T dhz, Array4&lt; T const &gt; const &amp;bX, Array4&lt; T const &gt; const &amp;bY, Array4&lt; T const &gt; const &amp;bZ, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m2, Array4&lt; int const &gt; const &amp;m4, Array4&lt; int const &gt; const &amp;m1, Array4&lt; int const &gt; const &amp;m3, Array4&lt; int const &gt; const &amp;m5, Array4&lt; T const &gt; const &amp;f0, Array4&lt; T const &gt; const &amp;f2, Array4&lt; T const &gt; const &amp;f4, Array4&lt; T const &gt; const &amp;f1, Array4&lt; T const &gt; const &amp;f3, Array4&lt; T const &gt; const &amp;f5, Box const &amp;vbox, int redblack, int nc) noexcept</argsstring>
        <name>abec_gsrb_with_line_solve</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="352" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="352" bodyend="627"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae6346740764334df2fdcaca7e48a9313" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::overset_rescale_bcoef_z</definition>
        <argsstring>(Box const &amp;box, Array4&lt; T &gt; const &amp;bZ, Array4&lt; int const &gt; const &amp;osm, int ncomp, T osfac) noexcept</argsstring>
        <name>overset_rescale_bcoef_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>T</type>
          <declname>osfac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" line="667" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLap_3D_K.H" bodystart="667" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5e15c48d007c4719b69721908ec1d0c7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_adotx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; RT &gt; const &amp;y, Array4&lt; RT const &gt; const &amp;x, Array4&lt; RT const &gt; const &amp;a, GpuArray&lt; RT, AMREX_SPACEDIM &gt; const &amp;dxinv, RT alpha, RT beta, int ncomp) noexcept</argsstring>
        <name>mlalap_adotx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; RT, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="9" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="9" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a41eccb4f00e6cb720abc8eddc7b3544d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_adotx_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; RT &gt; const &amp;y, Array4&lt; RT const &gt; const &amp;x, Array4&lt; RT const &gt; const &amp;a, GpuArray&lt; RT, AMREX_SPACEDIM &gt; const &amp;dxinv, RT alpha, RT beta, RT dx, RT probxlo, int ncomp) noexcept</argsstring>
        <name>mlalap_adotx_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; RT, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>probxlo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="31" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="31" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a17aa260620939b7f819a7717d06b11d0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; RT &gt; const &amp;x, Array4&lt; RT const &gt; const &amp;a, GpuArray&lt; RT, AMREX_SPACEDIM &gt; const &amp;dxinv, RT alpha, RT beta, int ncomp) noexcept</argsstring>
        <name>mlalap_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; RT, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="58" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="58" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af99e582811a3661128ecb30e987e20a7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_normalize_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; RT &gt; const &amp;x, Array4&lt; RT const &gt; const &amp;a, GpuArray&lt; RT, AMREX_SPACEDIM &gt; const &amp;dxinv, RT alpha, RT beta, RT dx, RT probxlo, int ncomp) noexcept</argsstring>
        <name>mlalap_normalize_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; RT, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>probxlo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="78" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="78" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0aa72f999cfd128e619b68e08fec6c91" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_flux_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; RT &gt; const &amp;fx, Array4&lt; RT const &gt; const &amp;sol, RT fac, int ncomp) noexcept</argsstring>
        <name>mlalap_flux_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="101" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="101" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a76a38ec600a884f18395f0404b185cde" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_flux_x_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; RT &gt; const &amp;fx, Array4&lt; RT const &gt; const &amp;sol, RT fac, RT dx, RT probxlo, int ncomp) noexcept</argsstring>
        <name>mlalap_flux_x_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>probxlo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="117" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="117" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aab34d72643a1269ba2ff59cb3676a339" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_flux_xface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; RT &gt; const &amp;fx, Array4&lt; RT const &gt; const &amp;sol, RT fac, int xlen, int ncomp) noexcept</argsstring>
        <name>mlalap_flux_xface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xlen</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="135" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="135" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a743f2cd3f2266e6378454da5d0a8a7ce" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_flux_xface_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; RT &gt; const &amp;fx, Array4&lt; RT const &gt; const &amp;sol, RT fac, int xlen, RT dx, RT probxlo, int ncomp) noexcept</argsstring>
        <name>mlalap_flux_xface_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>probxlo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="150" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="150" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3e29b3bab9dd4fffd402cfe3fd75215b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; RT &gt; const &amp;phi, Array4&lt; RT const &gt; const &amp;rhs, RT alpha, RT dhx, Array4&lt; RT const &gt; const &amp;a, Array4&lt; RT const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; RT const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Box const &amp;vbox, int redblack, int ncomp) noexcept</argsstring>
        <name>mlalap_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="168" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="168" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac1747db0a45477372a6f9a22a4380487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_gsrb_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; RT &gt; const &amp;phi, Array4&lt; RT const &gt; const &amp;rhs, RT alpha, RT dhx, Array4&lt; RT const &gt; const &amp;a, Array4&lt; RT const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; RT const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Box const &amp;vbox, int redblack, RT dx, RT probxlo, int ncomp)</argsstring>
        <name>mlalap_gsrb_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>probxlo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" line="204" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_1D_K.H" bodystart="204" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa2f42a20717a569b67b31fe900d71a75" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_flux_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; RT &gt; const &amp;fy, Array4&lt; RT const &gt; const &amp;sol, RT fac, int ncomp) noexcept</argsstring>
        <name>mlalap_flux_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" line="106" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" bodystart="106" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a226ce6b7d69b586ba60875b745b567e6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_flux_yface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; RT &gt; const &amp;fy, Array4&lt; RT const &gt; const &amp;sol, RT fac, int ylen, int ncomp) noexcept</argsstring>
        <name>mlalap_flux_yface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ylen</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" line="126" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" bodystart="126" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aed5eca34a47e9d1cbefa1b23e19dbca4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_flux_z</definition>
        <argsstring>(Box const &amp;box, Array4&lt; RT &gt; const &amp;fz, Array4&lt; RT const &gt; const &amp;sol, RT fac, int ncomp) noexcept</argsstring>
        <name>mlalap_flux_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" line="150" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" bodystart="150" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8da3a5c4da352946a30a94b7cbf35d9f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_flux_zface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; RT &gt; const &amp;fz, Array4&lt; RT const &gt; const &amp;sol, RT fac, int zlen, int ncomp) noexcept</argsstring>
        <name>mlalap_flux_zface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>zlen</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" line="170" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" bodystart="170" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa4218302a2408df87af69fc4435920cf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlalap_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; RT &gt; const &amp;phi, Array4&lt; RT const &gt; const &amp;rhs, RT alpha, RT dhx, RT dhy, RT dhz, Array4&lt; RT const &gt; const &amp;a, Array4&lt; RT const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; RT const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Array4&lt; RT const &gt; const &amp;f2, Array4&lt; int const &gt; const &amp;m2, Array4&lt; RT const &gt; const &amp;f3, Array4&lt; int const &gt; const &amp;m3, Array4&lt; RT const &gt; const &amp;f4, Array4&lt; int const &gt; const &amp;m4, Array4&lt; RT const &gt; const &amp;f5, Array4&lt; int const &gt; const &amp;m5, Box const &amp;vbox, int redblack, int ncomp) noexcept</argsstring>
        <name>mlalap_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>RT</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; RT const &gt; const &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m5</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" line="197" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_3D_K.H" bodystart="197" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a078658f433f21a921eaee99b9bb2423f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::coarsen_overset_mask</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; int &gt; const &amp;cmsk, Array4&lt; int const &gt; const &amp;fmsk) noexcept</argsstring>
        <name>coarsen_overset_mask</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>cmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>fmsk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap_1D_K.H" line="8" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap_1D_K.H" bodystart="8" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a40570b9308cc5134a2db6a08a170515a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::coarsen_overset_mask</definition>
        <argsstring>(int i, int, int, Array4&lt; int &gt; const &amp;cmsk, Array4&lt; int const &gt; const &amp;fmsk) noexcept</argsstring>
        <name>coarsen_overset_mask</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>cmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>fmsk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap_1D_K.H" line="27" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap_1D_K.H" bodystart="27" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a43d8afe61435d9bd570425c4ff63056a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_adotx_centroid</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;ba, Array4&lt; Real const &gt; const &amp;bcent, Array4&lt; Real const &gt; const &amp;beb, Array4&lt; Real const &gt; const &amp;phieb, const int &amp;domlo_x, const int &amp;domlo_y, const int &amp;domhi_x, const int &amp;domhi_y, const bool &amp;on_x_face, const bool &amp;on_y_face, bool is_eb_dirichlet, bool is_eb_inhomog, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta, int ncomp) noexcept</argsstring>
        <name>mlebabeclap_adotx_centroid</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>beb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>domlo_x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>domlo_y</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>domhi_x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>domhi_y</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>on_x_face</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>on_y_face</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_inhomog</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="11" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="11" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4b562b00cd47b22ceabc8f4f68251cde" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_adotx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; const int &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;ba, Array4&lt; Real const &gt; const &amp;bc, Array4&lt; Real const &gt; const &amp;beb, bool is_dirichlet, Array4&lt; Real const &gt; const &amp;phieb, bool is_inhomog, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta, int ncomp, bool beta_on_centroid, bool phi_on_centroid) noexcept</argsstring>
        <name>mlebabeclap_adotx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>beb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_dirichlet</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_inhomog</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>beta_on_centroid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="166" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="166" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adaf35cd6ed336b8c439985415ea0b20f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_ebflux</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;feb, Array4&lt; Real const &gt; const &amp;x, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;bc, Array4&lt; Real const &gt; const &amp;beb, Array4&lt; Real const &gt; const &amp;phieb, bool is_inhomog, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlebabeclap_ebflux</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>feb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>beb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_inhomog</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="300" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="300" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa87f7cec5c72e10c9bf450a39648b6ab" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real alpha, Array4&lt; Real const &gt; const &amp;a, Real dhx, Real dhy, Real dh, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dx, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m2, Array4&lt; int const &gt; const &amp;m1, Array4&lt; int const &gt; const &amp;m3, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; const int &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;ba, Array4&lt; Real const &gt; const &amp;bc, Array4&lt; Real const &gt; const &amp;beb, bool is_dirichlet, bool beta_on_centroid, bool phi_on_centroid, Box const &amp;vbox, int redblack, int ncomp) noexcept</argsstring>
        <name>mlebabeclap_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dh</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>beb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>beta_on_centroid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="367" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="367" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa4047a599fca09d24c83a32f79561ba2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_flux_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; int const &gt; const &amp;ccm, Real dhx, int face_only, int ncomp, Box const &amp;xbox, bool beta_on_centroid, bool phi_on_centroid) noexcept</argsstring>
        <name>mlebabeclap_flux_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>xbox</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>beta_on_centroid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="584" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="584" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af822987d7c096263dbeda2c40fbc231f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_flux_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; int const &gt; const &amp;ccm, Real dhy, int face_only, int ncomp, Box const &amp;ybox, bool beta_on_centroid, bool phi_on_centroid) noexcept</argsstring>
        <name>mlebabeclap_flux_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ybox</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>beta_on_centroid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="616" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="616" bodyend="645"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5535836b58895eb3be42a2e5ce2d85d4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_flux_x_0</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;bX, Real dhx, int face_only, int ncomp, Box const &amp;xbox) noexcept</argsstring>
        <name>mlebabeclap_flux_x_0</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>xbox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="648" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="648" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8ce01751c9766348d8cf2be99815a5da" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_flux_y_0</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;bY, Real dhy, int face_only, int ncomp, Box const &amp;ybox) noexcept</argsstring>
        <name>mlebabeclap_flux_y_0</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ybox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="667" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="667" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6d4b0999f5e5f95628d6dde683d92b75" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_grad_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;gx, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; int const &gt; const &amp;ccm, Real dxi, int ncomp, bool phi_on_centroid) noexcept</argsstring>
        <name>mlebabeclap_grad_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>gx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="686" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="686" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aea627326ba400186a5122d27ec7d9e2c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_grad_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;gy, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; int const &gt; const &amp;ccm, Real dyi, int ncomp, bool phi_on_centroid) noexcept</argsstring>
        <name>mlebabeclap_grad_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>gy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="709" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="709" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a067e6c0418ffaead9da2094841a88f3a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_grad_x_0</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;gx, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;apx, Real dxi, int ncomp) noexcept</argsstring>
        <name>mlebabeclap_grad_x_0</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>gx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="732" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="732" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2213da36fad54c31b7ae0ad45af6e507" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_grad_y_0</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;gy, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;apy, Real dyi, int ncomp) noexcept</argsstring>
        <name>mlebabeclap_grad_y_0</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>gy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="746" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="746" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adb92024145a44a0d2f56b0e024d274f3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Real alpha, Array4&lt; Real const &gt; const &amp;a, Real dhx, Real dhy, Real dh, const amrex::GpuArray&lt; Real, AMREX_SPACEDIM &gt; &amp;dx, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; const int &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;ba, Array4&lt; Real const &gt; const &amp;bc, Array4&lt; Real const &gt; const &amp;beb, bool is_dirichlet, bool beta_on_centroid, int ncomp) noexcept</argsstring>
        <name>mlebabeclap_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dh</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>beb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>beta_on_centroid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" line="760" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_2D_K.H" bodystart="760" bodyend="856"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6afaf2de82292fd543d209306a1cfd75" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_adotx_centroid</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; Real const &gt; const &amp;bZ, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;fcz, Array4&lt; Real const &gt; const &amp;ccent, Array4&lt; Real const &gt; const &amp;ba, Array4&lt; Real const &gt; const &amp;bcent, Array4&lt; Real const &gt; const &amp;beb, Array4&lt; Real const &gt; const &amp;phieb, const int &amp;domlo_x, const int &amp;domlo_y, const int &amp;domlo_z, const int &amp;domhi_x, const int &amp;domhi_y, const int &amp;domhi_z, const bool &amp;on_x_face, const bool &amp;on_y_face, const bool &amp;on_z_face, bool is_eb_dirichlet, bool is_eb_inhomog, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta, int ncomp) noexcept</argsstring>
        <name>mlebabeclap_adotx_centroid</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ccent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcent</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>beb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>domlo_x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>domlo_y</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>domlo_z</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>domhi_x</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>domhi_y</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>domhi_z</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>on_x_face</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>on_y_face</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>on_z_face</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_eb_inhomog</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" line="11" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" bodystart="11" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aff3db9e0a6ad08f9e98ff966faeb1244" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_adotx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; Real const &gt; const &amp;bZ, Array4&lt; const int &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;fcz, Array4&lt; Real const &gt; const &amp;ba, Array4&lt; Real const &gt; const &amp;bc, Array4&lt; Real const &gt; const &amp;beb, bool is_dirichlet, Array4&lt; Real const &gt; const &amp;phieb, bool is_inhomog, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real alpha, Real beta, int ncomp, bool beta_on_centroid, bool phi_on_centroid) noexcept</argsstring>
        <name>mlebabeclap_adotx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>beb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_dirichlet</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_inhomog</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>beta_on_centroid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" line="216" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" bodystart="216" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4031141e7aabd2031592fa381a024c4b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_ebflux</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real &gt; const &amp;feb, Array4&lt; Real const &gt; const &amp;x, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;bc, Array4&lt; Real const &gt; const &amp;beb, Array4&lt; Real const &gt; const &amp;phieb, bool is_inhomog, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlebabeclap_ebflux</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>feb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>beb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_inhomog</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" line="467" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" bodystart="467" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a73330382fb4300bec24c2b2249f212d1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real alpha, Array4&lt; Real const &gt; const &amp;a, Real dhx, Real dhy, Real dhz, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; Real const &gt; const &amp;bZ, Array4&lt; int const &gt; const &amp;m0, Array4&lt; int const &gt; const &amp;m2, Array4&lt; int const &gt; const &amp;m4, Array4&lt; int const &gt; const &amp;m1, Array4&lt; int const &gt; const &amp;m3, Array4&lt; int const &gt; const &amp;m5, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; Real const &gt; const &amp;f4, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; Real const &gt; const &amp;f5, Array4&lt; const int &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;fcz, Array4&lt; Real const &gt; const &amp;ba, Array4&lt; Real const &gt; const &amp;bc, Array4&lt; Real const &gt; const &amp;beb, bool is_dirichlet, bool beta_on_centroid, bool phi_on_centroid, Box const &amp;vbox, int redblack, int ncomp) noexcept</argsstring>
        <name>mlebabeclap_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>beb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>beta_on_centroid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" line="546" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" bodystart="546" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae619936d28f3a608099b8f6eb1f8536a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_flux_z</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcz, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;bZ, Array4&lt; int const &gt; const &amp;ccm, Real dhz, int face_only, int ncomp, Box const &amp;zbox, bool beta_on_centroid, bool phi_on_centroid) noexcept</argsstring>
        <name>mlebabeclap_flux_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>zbox</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>beta_on_centroid</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" line="982" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" bodystart="982" bodyend="1024"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a83cc47a5490605c957d9ba463e0df6dd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_flux_z_0</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;bZ, Real dhz, int face_only, int ncomp, Box const &amp;zbox) noexcept</argsstring>
        <name>mlebabeclap_flux_z_0</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>zbox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" line="1065" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" bodystart="1065" bodyend="1081"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6c71d5d77d11bf52377d6870f104d345" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_grad_z</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;gz, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcz, Array4&lt; int const &gt; const &amp;ccm, Real dzi, int ncomp, bool phi_on_centroid) noexcept</argsstring>
        <name>mlebabeclap_grad_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>gz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>phi_on_centroid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" line="1144" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" bodystart="1144" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a906c729b79191fe3198b461187b58068" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_grad_z_0</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;gz, Array4&lt; Real const &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;apz, Real dzi, int ncomp) noexcept</argsstring>
        <name>mlebabeclap_grad_z_0</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>gz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" line="1202" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" bodystart="1202" bodyend="1213"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a19b14155b9c1a4a1a3f73cc08d1d0c66" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Real alpha, Array4&lt; Real const &gt; const &amp;a, Real dhx, Real dhy, Real dhz, Array4&lt; Real const &gt; const &amp;bX, Array4&lt; Real const &gt; const &amp;bY, Array4&lt; Real const &gt; const &amp;bZ, Array4&lt; const int &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vfrc, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;fcz, Array4&lt; Real const &gt; const &amp;ba, Array4&lt; Real const &gt; const &amp;bc, Array4&lt; Real const &gt; const &amp;beb, bool is_dirichlet, bool beta_on_centroid, int ncomp) noexcept</argsstring>
        <name>mlebabeclap_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bX</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bY</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bZ</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vfrc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>beb</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>beta_on_centroid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" line="1216" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_3D_K.H" bodystart="1216" bodyend="1360"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae651916b2a04b9033825d343fe244b3f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_apply_bc_x</definition>
        <argsstring>(int side, Box const &amp;box, int blen, Array4&lt; Real &gt; const &amp;phi, Array4&lt; int const &gt; const &amp;mask, Array4&lt; Real const &gt; const &amp;area, BoundCond bct, Real bcl, Array4&lt; Real const &gt; const &amp;bcval, int maxorder, Real dxinv, int inhomog, int icomp) noexcept</argsstring>
        <name>mlebabeclap_apply_bc_x</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_K.H" line="28" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_K.H" bodystart="28" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a268bac202eeb66c4da6dd4d271d5656e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_apply_bc_y</definition>
        <argsstring>(int side, Box const &amp;box, int blen, Array4&lt; Real &gt; const &amp;phi, Array4&lt; int const &gt; const &amp;mask, Array4&lt; Real const &gt; const &amp;area, BoundCond bct, Real bcl, Array4&lt; Real const &gt; const &amp;bcval, int maxorder, Real dyinv, int inhomog, int icomp) noexcept</argsstring>
        <name>mlebabeclap_apply_bc_y</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_K.H" line="114" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_K.H" bodystart="114" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a04cedf52619400ba12317eb179625198" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebabeclap_apply_bc_z</definition>
        <argsstring>(int side, Box const &amp;box, int blen, Array4&lt; Real &gt; const &amp;phi, Array4&lt; int const &gt; const &amp;mask, Array4&lt; Real const &gt; const &amp;area, BoundCond bct, Real bcl, Array4&lt; Real const &gt; const &amp;bcval, int maxorder, Real dzinv, int inhomog, int icomp) noexcept</argsstring>
        <name>mlebabeclap_apply_bc_z</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_K.H" line="200" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_K.H" bodystart="200" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a88d5300bb8879d99271d4794b47fe312" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_adotx</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Real) noexcept</argsstring>
        <name>mlebndfdlap_adotx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type>Real</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_1D_K.H" line="7" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_1D_K.H" bodystart="7" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0f3da1cddd91e062b28bb866f721f1e3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_gsrb</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Real, int) noexcept</argsstring>
        <name>mlebndfdlap_gsrb</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type>Real</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_1D_K.H" line="14" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_1D_K.H" bodystart="14" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad73858e6b1f3507fe107fdef1fbd7492" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_scale_rhs</definition>
        <argsstring>(int i, int j, int, Array4&lt; Real &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecx, Array4&lt; Real const &gt; const &amp;ecy) noexcept</argsstring>
        <name>mlebndfdlap_scale_rhs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" line="7" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" bodystart="7" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4264b6bd0ca1d7d410a3c4efa768a294" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_adotx_eb_doit</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecx, Array4&lt; Real const &gt; const &amp;ecy, F &amp;&amp;xeb, Real bx, Real by) noexcept</argsstring>
        <name>mlebndfdlap_adotx_eb_doit</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecy</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>xeb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>by</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" line="23" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" bodystart="23" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad826217c6259539e7a7c065b87802d2b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_adotx_eb</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecx, Array4&lt; Real const &gt; const &amp;ecy, Real xeb, Real bx, Real by) noexcept</argsstring>
        <name>mlebndfdlap_adotx_eb</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>xeb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>by</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" line="76" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" bodystart="76" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a55fedf7a60582050d0ef56035e6782c5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_adotx_eb</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecx, Array4&lt; Real const &gt; const &amp;ecy, Array4&lt; Real const &gt; const &amp;xeb, Real bx, Real by) noexcept</argsstring>
        <name>mlebndfdlap_adotx_eb</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>xeb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>by</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" line="87" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" bodystart="87" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a91e9157204259b13b72b493e055e1153" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_adotx</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;dmsk, Real bx, Real by) noexcept</argsstring>
        <name>mlebndfdlap_adotx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>by</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" line="99" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" bodystart="99" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad94a4ba40208e14d758f518409c40e98" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_gsrb_eb</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecx, Array4&lt; Real const &gt; const &amp;ecy, Real bx, Real by, int redblack) noexcept</argsstring>
        <name>mlebndfdlap_gsrb_eb</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>by</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" line="113" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" bodystart="113" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aafcb488daced3785ab547cc4dc92d42a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_gsrb</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;dmsk, Real bx, Real by, int redblack) noexcept</argsstring>
        <name>mlebndfdlap_gsrb</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>by</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" line="178" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" bodystart="178" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6213cb140d9a967c33af573ef36611af" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_adotx_rz_eb_doit</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecx, Array4&lt; Real const &gt; const &amp;ecy, F &amp;&amp;xeb, Real sigr, Real dr, Real dz, Real rlo) noexcept</argsstring>
        <name>mlebndfdlap_adotx_rz_eb_doit</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecy</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>xeb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>sigr</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dz</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" line="200" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" bodystart="200" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa9a6a16395f502fd45f6851b345b1a95" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_adotx_rz_eb</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecx, Array4&lt; Real const &gt; const &amp;ecy, Real xeb, Real sigr, Real dr, Real dz, Real rlo) noexcept</argsstring>
        <name>mlebndfdlap_adotx_rz_eb</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>xeb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>sigr</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dz</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" line="266" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" bodystart="266" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a40890d9e6772027550b853a134c8fdf4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_adotx_rz_eb</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecx, Array4&lt; Real const &gt; const &amp;ecy, Array4&lt; Real const &gt; const &amp;xeb, Real sigr, Real dr, Real dz, Real rlo) noexcept</argsstring>
        <name>mlebndfdlap_adotx_rz_eb</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>xeb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>sigr</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dz</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" line="277" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" bodystart="277" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a94fefa6d0db735fa22211742add322af" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_adotx_rz</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;dmsk, Real sigr, Real dr, Real dz, Real rlo) noexcept</argsstring>
        <name>mlebndfdlap_adotx_rz</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>sigr</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dz</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>rlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" line="289" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" bodystart="289" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a78f55afe5ee3a5e0f9d71b29abf3ddf7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_gsrb_rz_eb</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecx, Array4&lt; Real const &gt; const &amp;ecy, Real sigr, Real dr, Real dz, Real rlo, int redblack) noexcept</argsstring>
        <name>mlebndfdlap_gsrb_rz_eb</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>sigr</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dz</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>rlo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" line="310" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" bodystart="310" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a07bb69f3b07ae263b87b6005fa7407ae" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_gsrb_rz</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;dmsk, Real sigr, Real dr, Real dz, Real rlo, int redblack) noexcept</argsstring>
        <name>mlebndfdlap_gsrb_rz</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>sigr</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dr</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dz</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>rlo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" line="391" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_2D_K.H" bodystart="391" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afac29ac384d86c8826755d6771bcb33b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_scale_rhs</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecx, Array4&lt; Real const &gt; const &amp;ecy, Array4&lt; Real const &gt; const &amp;ecz) noexcept</argsstring>
        <name>mlebndfdlap_scale_rhs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_3D_K.H" line="7" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_3D_K.H" bodystart="7" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae3282ca4357077dfa8ca4358b213aca6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_adotx_eb_doit</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecx, Array4&lt; Real const &gt; const &amp;ecy, Array4&lt; Real const &gt; const &amp;ecz, F &amp;&amp;xeb, Real bx, Real by, Real bz) noexcept</argsstring>
        <name>mlebndfdlap_adotx_eb_doit</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecz</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>xeb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>by</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_3D_K.H" line="25" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_3D_K.H" bodystart="25" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab4e7a1ea30e7350fd94711450cd88299" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_adotx_eb</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecx, Array4&lt; Real const &gt; const &amp;ecy, Array4&lt; Real const &gt; const &amp;ecz, Real xeb, Real bx, Real by, Real bz) noexcept</argsstring>
        <name>mlebndfdlap_adotx_eb</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecz</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>xeb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>by</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_3D_K.H" line="98" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_3D_K.H" bodystart="98" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad22660bde94f8894ee74d8c48de47828" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_adotx_eb</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecx, Array4&lt; Real const &gt; const &amp;ecy, Array4&lt; Real const &gt; const &amp;ecz, Array4&lt; Real const &gt; const &amp;xeb, Real bx, Real by, Real bz) noexcept</argsstring>
        <name>mlebndfdlap_adotx_eb</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>xeb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>by</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_3D_K.H" line="110" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_3D_K.H" bodystart="110" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af56fb224090e9c697a5d3cf50006fcb5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_adotx</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;dmsk, Real bx, Real by, Real bz) noexcept</argsstring>
        <name>mlebndfdlap_adotx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>by</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_3D_K.H" line="123" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_3D_K.H" bodystart="123" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa2bb1961a449c1eaad785b488ac26c28" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_gsrb_eb</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecx, Array4&lt; Real const &gt; const &amp;ecy, Array4&lt; Real const &gt; const &amp;ecz, Real bx, Real by, Real bz, int redblack) noexcept</argsstring>
        <name>mlebndfdlap_gsrb_eb</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecz</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>by</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bz</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_3D_K.H" line="138" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_3D_K.H" bodystart="138" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac15ff367e9fac919b2de0d05dda579cc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_gsrb</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;dmsk, Real bx, Real by, Real bz, int redblack) noexcept</argsstring>
        <name>mlebndfdlap_gsrb</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>by</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bz</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_3D_K.H" line="227" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_3D_K.H" bodystart="227" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8223f9586a129d73d65d41a9e4d897ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_grad_x_doit</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;px, Array4&lt; Real const &gt; const &amp;p, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecx, F &amp;&amp;phieb, Real dxi)</argsstring>
        <name>mlebndfdlap_grad_x_doit</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>px</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecx</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_K.H" line="20" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_K.H" bodystart="20" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5745254de8b0dd8183a3f6cbfad7b561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_grad_y_doit</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;py, Array4&lt; Real const &gt; const &amp;p, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecy, F &amp;&amp;phieb, Real dyi)</argsstring>
        <name>mlebndfdlap_grad_y_doit</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>py</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecy</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_K.H" line="37" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_K.H" bodystart="37" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a35dae2a69371a09a272b492d47a4e856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_grad_x</definition>
        <argsstring>(Box const &amp;b, Array4&lt; Real &gt; const &amp;px, Array4&lt; Real const &gt; const &amp;p, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecx, Real phieb, Real dxi)</argsstring>
        <name>mlebndfdlap_grad_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>px</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_K.H" line="72" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_K.H" bodystart="72" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afc417441015529dc346f15b2ad39b7f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_grad_x</definition>
        <argsstring>(Box const &amp;b, Array4&lt; Real &gt; const &amp;px, Array4&lt; Real const &gt; const &amp;p, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecx, Array4&lt; Real const &gt; const &amp;phieb, Real dxi)</argsstring>
        <name>mlebndfdlap_grad_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>px</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_K.H" line="85" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_K.H" bodystart="85" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab922a37e846d9fd878731e467f40083d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_grad_y</definition>
        <argsstring>(Box const &amp;b, Array4&lt; Real &gt; const &amp;py, Array4&lt; Real const &gt; const &amp;p, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecy, Real phieb, Real dyi)</argsstring>
        <name>mlebndfdlap_grad_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>py</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_K.H" line="98" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_K.H" bodystart="98" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad150d1f53941f3828da649c6b723ed99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_grad_y</definition>
        <argsstring>(Box const &amp;b, Array4&lt; Real &gt; const &amp;py, Array4&lt; Real const &gt; const &amp;p, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; Real const &gt; const &amp;ecy, Array4&lt; Real const &gt; const &amp;phieb, Real dyi)</argsstring>
        <name>mlebndfdlap_grad_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>py</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ecy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phieb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_K.H" line="111" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_K.H" bodystart="111" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abdd6a96dbb0ce09e48385e053fdb58db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebndfdlap_grad_x</definition>
        <argsstring>(Box const &amp;b, Array4&lt; Real &gt; const &amp;px, Array4&lt; Real const &gt; const &amp;p, Real dxi)</argsstring>
        <name>mlebndfdlap_grad_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>px</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_K.H" line="154" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_K.H" bodystart="154" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a884c54a40ac42d7d2002630aaf5a846b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_cross_terms_fx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etax, Array4&lt; Real const &gt; const &amp;kapx, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; EBCellFlag const &gt; const &amp;flag, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlebtensor_cross_terms_fx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="10" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="10" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a64a93c7f21695eb012a3295f93e588df" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_cross_terms_fy</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etay, Array4&lt; Real const &gt; const &amp;kapy, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; EBCellFlag const &gt; const &amp;flag, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlebtensor_cross_terms_fy</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etay</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="56" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="56" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6cb8891fa93d0f0e80c2d2d0535319be" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_cross_terms_fx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etax, Array4&lt; Real const &gt; const &amp;kapx, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; EBCellFlag const &gt; const &amp;flag, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Array4&lt; Real const &gt; const &amp;bvxlo, Array4&lt; Real const &gt; const &amp;bvxhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mlebtensor_cross_terms_fx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="102" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="102" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a559d3b4550ce7cb54284840f5e63ee46" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_cross_terms_fy</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etay, Array4&lt; Real const &gt; const &amp;kapy, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; EBCellFlag const &gt; const &amp;flag, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Array4&lt; Real const &gt; const &amp;bvylo, Array4&lt; Real const &gt; const &amp;bvyhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mlebtensor_cross_terms_fy</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etay</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvyhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="156" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="156" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a69818aed8b0226aebc2f9fae15e278be" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_cross_terms</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;velb, Array4&lt; Real const &gt; const &amp;etab, Array4&lt; Real const &gt; const &amp;kapb, Array4&lt; int const &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vol, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;bc, bool is_dirichlet, bool is_inhomog, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real bscalar) noexcept</argsstring>
        <name>mlebtensor_cross_terms</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>velb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etab</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_inhomog</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bscalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="210" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="210" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acef8c44712bfa040cb9408c2d61b5319" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_flux_0</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;ap, Real bscalar) noexcept</argsstring>
        <name>mlebtensor_flux_0</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>ap</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bscalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="360" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="360" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa196b29d490603bb92e78f1e56593846" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_flux_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;fcx, Real const bscalar, Array4&lt; int const &gt; const &amp;ccm, int face_only, Box const &amp;xbox) noexcept</argsstring>
        <name>mlebtensor_flux_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type>Real const</type>
          <declname>bscalar</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>xbox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="384" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="384" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a52689abb9ae7e544a779a4e9092deac7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_flux_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Ay, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;fcy, Real const bscalar, Array4&lt; int const &gt; const &amp;ccm, int face_only, Box const &amp;ybox) noexcept</argsstring>
        <name>mlebtensor_flux_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Ay</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type>Real const</type>
          <declname>bscalar</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ybox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="417" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="417" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4d4f6faceab174910e53c05a8e3680ab" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_vel_grads_fx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; EBCellFlag const &gt; const &amp;flag, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlebtensor_vel_grads_fx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="450" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="450" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6ba83feb55e1c07a12e5548e81b677fa" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_vel_grads_fy</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; EBCellFlag const &gt; const &amp;flag, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlebtensor_vel_grads_fy</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="496" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="496" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1add8eafae03b6517ccc0f3a827b5192dc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_vel_grads_fx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; EBCellFlag const &gt; const &amp;flag, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Array4&lt; Real const &gt; const &amp;bvxlo, Array4&lt; Real const &gt; const &amp;bvxhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mlebtensor_vel_grads_fx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="541" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="541" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad0ed81412024cb369f33d28f62a0cd2b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_vel_grads_fy</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; EBCellFlag const &gt; const &amp;flag, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Array4&lt; Real const &gt; const &amp;bvylo, Array4&lt; Real const &gt; const &amp;bvyhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mlebtensor_vel_grads_fy</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvyhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="594" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="594" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ada2d853ea486e93070c3ab2b5a3fc80a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_vel_grads_fx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; int const &gt; const &amp;ccm, Array4&lt; Real const &gt; const &amp;fcx, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlebtensor_vel_grads_fx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="646" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="646" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac3decc02301d9f7a072efec63312145e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_vel_grads_fy</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; int const &gt; const &amp;ccm, Array4&lt; Real const &gt; const &amp;fcy, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlebtensor_vel_grads_fy</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="702" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="702" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a389b087837766656206528387955a282" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_vel_grads_fx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; int const &gt; const &amp;ccm, Array4&lt; Real const &gt; const &amp;fcx, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Array4&lt; Real const &gt; const &amp;bvxlo, Array4&lt; Real const &gt; const &amp;bvxhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mlebtensor_vel_grads_fx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="758" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="758" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af256fa82a901575cb1155b23f1791b88" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_vel_grads_fy</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; int const &gt; const &amp;ccm, Array4&lt; Real const &gt; const &amp;fcy, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Array4&lt; Real const &gt; const &amp;bvylo, Array4&lt; Real const &gt; const &amp;bvyhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mlebtensor_vel_grads_fy</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvyhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" line="821" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_2D_K.H" bodystart="821" bodyend="881"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac5f3913ebdf85c5e3a7a339e02947178" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlebtensor_dz_on_xface</definition>
        <argsstring>(int i, int j, int, int n, Array4&lt; Real const &gt; const &amp;vel, Real dzi, Real whi, Real wlo, int khip, int khim, int klop, int klom) noexcept</argsstring>
        <name>mlebtensor_dz_on_xface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>whi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>wlo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>khip</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>khim</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>klop</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>klom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" line="10" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" bodystart="10" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4a42aec175a92fa99199546b199534d7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlebtensor_dz_on_yface</definition>
        <argsstring>(int i, int j, int, int n, Array4&lt; Real const &gt; const &amp;vel, Real dzi, Real whi, Real wlo, int khip, int khim, int klop, int klom) noexcept</argsstring>
        <name>mlebtensor_dz_on_yface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>whi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>wlo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>khip</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>khim</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>klop</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>klom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" line="20" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" bodystart="20" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a14faffa55d3334f3b9e62080ee935481" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlebtensor_dx_on_zface</definition>
        <argsstring>(int, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dxi, Real whi, Real wlo, int ihip, int ihim, int ilop, int ilom) noexcept</argsstring>
        <name>mlebtensor_dx_on_zface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>whi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>wlo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ihip</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ihim</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ilop</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ilom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" line="30" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" bodystart="30" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac4bad17eb6cb87791003d01ea510dd85" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlebtensor_dy_on_zface</definition>
        <argsstring>(int i, int, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dyi, Real whi, Real wlo, int jhip, int jhim, int jlop, int jlom) noexcept</argsstring>
        <name>mlebtensor_dy_on_zface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>whi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>wlo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>jhip</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>jhim</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>jlop</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>jlom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" line="40" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" bodystart="40" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9ef256dca543656f40f971edaa9b90e9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_cross_terms_fz</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etaz, Array4&lt; Real const &gt; const &amp;kapz, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; EBCellFlag const &gt; const &amp;flag, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlebtensor_cross_terms_fz</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etaz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" line="170" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" bodystart="170" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae43885fa51096a74f07dac8ee6c8318e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlebtensor_dz_on_xface</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dzi, Array4&lt; Real const &gt; const &amp;bvxlo, Array4&lt; Real const &gt; const &amp;bvxhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi, Real whi, Real wlo, int khip, int khim, int klop, int klom) noexcept</argsstring>
        <name>mlebtensor_dz_on_xface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>whi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>wlo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>khip</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>khim</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>klop</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>klom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" line="231" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" bodystart="231" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac03b8d4ffc3c21b2f9e54fd038880511" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlebtensor_dz_on_yface</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dzi, Array4&lt; Real const &gt; const &amp;bvylo, Array4&lt; Real const &gt; const &amp;bvyhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi, Real whi, Real wlo, int khip, int khim, int klop, int klom) noexcept</argsstring>
        <name>mlebtensor_dz_on_yface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvyhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>whi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>wlo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>khip</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>khim</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>klop</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>klom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" line="286" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" bodystart="286" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abc716987848c0cf50a7d1146c313ef79" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlebtensor_dx_on_zface</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dxi, Array4&lt; Real const &gt; const &amp;bvzlo, Array4&lt; Real const &gt; const &amp;bvzhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi, Real whi, Real wlo, int ihip, int ihim, int ilop, int ilom) noexcept</argsstring>
        <name>mlebtensor_dx_on_zface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>whi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>wlo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ihip</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ihim</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ilop</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ilom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" line="341" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" bodystart="341" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a98e178c71f42b673a18b34ccfbbf66d8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlebtensor_dy_on_zface</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dyi, Array4&lt; Real const &gt; const &amp;bvzlo, Array4&lt; Real const &gt; const &amp;bvzhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi, Real whi, Real wlo, int jhip, int jhim, int jlop, int jlom) noexcept</argsstring>
        <name>mlebtensor_dy_on_zface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>whi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>wlo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>jhip</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>jhim</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>jlop</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>jlom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" line="397" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" bodystart="397" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a149127365be7b7dbbbcade48f2a0ddb3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_cross_terms_fz</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etaz, Array4&lt; Real const &gt; const &amp;kapz, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; EBCellFlag const &gt; const &amp;flag, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Array4&lt; Real const &gt; const &amp;bvzlo, Array4&lt; Real const &gt; const &amp;bvzhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mlebtensor_cross_terms_fz</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etaz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" line="593" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" bodystart="593" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acd1a3de4fead75817defc7383f0d7cfc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_cross_terms</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;velb, Array4&lt; Real const &gt; const &amp;etab, Array4&lt; Real const &gt; const &amp;kapb, Array4&lt; int const &gt; const &amp;ccm, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; Real const &gt; const &amp;vol, Array4&lt; Real const &gt; const &amp;apx, Array4&lt; Real const &gt; const &amp;apy, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcx, Array4&lt; Real const &gt; const &amp;fcy, Array4&lt; Real const &gt; const &amp;fcz, Array4&lt; Real const &gt; const &amp;bc, bool is_dirichlet, bool is_inhomog, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real bscalar) noexcept</argsstring>
        <name>mlebtensor_cross_terms</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>velb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etab</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapb</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bc</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_dirichlet</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_inhomog</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bscalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" line="664" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" bodystart="664" bodyend="966"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a41fa60232e37cb8f8a8d11012a2d6e7a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_flux_z</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Az, Array4&lt; Real const &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; Real const &gt; const &amp;fcz, Real const bscalar, Array4&lt; int const &gt; const &amp;ccm, int face_only, Box const &amp;zbox) noexcept</argsstring>
        <name>mlebtensor_flux_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Az</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type>Real const</type>
          <declname>bscalar</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>zbox</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" line="1086" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" bodystart="1086" bodyend="1130"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae8af4235939e06c7d5e41075ec8218b5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_vel_grads_fz</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; EBCellFlag const &gt; const &amp;flag, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlebtensor_vel_grads_fz</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" line="1283" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" bodystart="1283" bodyend="1355"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac8a6594a4737c6b5529056beaa8e5204" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_vel_grads_fz</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; EBCellFlag const &gt; const &amp;flag, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Array4&lt; Real const &gt; const &amp;bvzlo, Array4&lt; Real const &gt; const &amp;bvzhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mlebtensor_vel_grads_fz</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" line="1532" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" bodystart="1532" bodyend="1616"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a23de0afb3cd2e70304fb3b360cbfa34d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_vel_grads_fz</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; int const &gt; const &amp;ccm, Array4&lt; Real const &gt; const &amp;fcz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlebtensor_vel_grads_fz</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" line="1809" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" bodystart="1809" bodyend="1901"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa07616c23af650f91c8c5b3b2d3b2463" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlebtensor_vel_grads_fz</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;apz, Array4&lt; EBCellFlag const &gt; const &amp;flag, Array4&lt; int const &gt; const &amp;ccm, Array4&lt; Real const &gt; const &amp;fcz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Array4&lt; Real const &gt; const &amp;bvzlo, Array4&lt; Real const &gt; const &amp;bvzhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mlebtensor_vel_grads_fz</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>apz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="classamrex_1_1EBCellFlag" kindref="compound">EBCellFlag</ref> const &gt; const &amp;</type>
          <declname>flag</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fcz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" line="2118" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_3D_K.H" bodystart="2118" bodyend="2222"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a17dc6a5f2f58fef3ff23153f88f565ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlebtensor_weight</definition>
        <argsstring>(int d)</argsstring>
        <name>mlebtensor_weight</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_K.H" line="10" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_K.H" bodystart="10" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8504bac8d4350e21fbcd88c9c048e45f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlebtensor_dy_on_xface</definition>
        <argsstring>(int i, int, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dyi, Real whi, Real wlo, int jhip, int jhim, int jlop, int jlom) noexcept</argsstring>
        <name>mlebtensor_dy_on_xface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>whi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>wlo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>jhip</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>jhim</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>jlop</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>jlom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_K.H" line="15" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_K.H" bodystart="15" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a802f1aac35a7d1a1f9445612feaba9ec" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlebtensor_dx_on_yface</definition>
        <argsstring>(int, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dxi, Real whi, Real wlo, int ihip, int ihim, int ilop, int ilom) noexcept</argsstring>
        <name>mlebtensor_dx_on_yface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>whi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>wlo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ihip</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ihim</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ilop</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ilom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_K.H" line="25" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_K.H" bodystart="25" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5b3231c3f790199a70d08b60f2b8eca1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlebtensor_dy_on_xface</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dyi, Array4&lt; Real const &gt; const &amp;bvxlo, Array4&lt; Real const &gt; const &amp;bvxhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi, Real whi, Real wlo, int jhip, int jhim, int jlop, int jlom) noexcept</argsstring>
        <name>mlebtensor_dy_on_xface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>whi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>wlo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>jhip</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>jhim</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>jlop</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>jlom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_K.H" line="35" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_K.H" bodystart="35" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a14d3d5c743a1aca6f8ea57fb9033a81f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlebtensor_dx_on_yface</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dxi, Array4&lt; Real const &gt; const &amp;bvylo, Array4&lt; Real const &gt; const &amp;bvyhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi, Real whi, Real wlo, int ihip, int ihim, int ilop, int ilom) noexcept</argsstring>
        <name>mlebtensor_dx_on_yface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvyhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>whi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>wlo</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ihip</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ihim</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ilop</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ilom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_K.H" line="90" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensor_K.H" bodystart="90" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abec9084f376cbeaea2663d273222ed9c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_bc_x</definition>
        <argsstring>(int side, Box const &amp;box, int blen, Array4&lt; T &gt; const &amp;phi, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, T bcl, Array4&lt; T const &gt; const &amp;bcval, int maxorder, T dxinv, int inhomog, int icomp) noexcept</argsstring>
        <name>mllinop_apply_bc_x</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="14" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="14" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0e0337f33a946131e2708bc1eaef2a03" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_bc_x</definition>
        <argsstring>(int side, int i, int j, int k, int blen, Array4&lt; T &gt; const &amp;phi, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, T bcl, Array4&lt; T const &gt; const &amp;bcval, int maxorder, T dxinv, int inhomog, int icomp) noexcept</argsstring>
        <name>mllinop_apply_bc_x</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="76" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="76" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af95c31e8a68e385d1f891ceca215f977" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_bc_y</definition>
        <argsstring>(int side, Box const &amp;box, int blen, Array4&lt; T &gt; const &amp;phi, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, T bcl, Array4&lt; T const &gt; const &amp;bcval, int maxorder, T dyinv, int inhomog, int icomp) noexcept</argsstring>
        <name>mllinop_apply_bc_y</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dyinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="119" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="119" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0b17a52f13e620e54f3227cce0577655" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_bc_y</definition>
        <argsstring>(int side, int i, int j, int k, int blen, Array4&lt; T &gt; const &amp;phi, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, T bcl, Array4&lt; T const &gt; const &amp;bcval, int maxorder, T dyinv, int inhomog, int icomp) noexcept</argsstring>
        <name>mllinop_apply_bc_y</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dyinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="181" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="181" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acfe91e9b71325dabc5d6e6b88c0a046f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_bc_z</definition>
        <argsstring>(int side, Box const &amp;box, int blen, Array4&lt; T &gt; const &amp;phi, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, T bcl, Array4&lt; T const &gt; const &amp;bcval, int maxorder, T dzinv, int inhomog, int icomp) noexcept</argsstring>
        <name>mllinop_apply_bc_z</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dzinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="224" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="224" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a87cc028df852696103ab16fc0a0a516d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_bc_z</definition>
        <argsstring>(int side, int i, int j, int k, int blen, Array4&lt; T &gt; const &amp;phi, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, T bcl, Array4&lt; T const &gt; const &amp;bcval, int maxorder, T dzinv, int inhomog, int icomp) noexcept</argsstring>
        <name>mllinop_apply_bc_z</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dzinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="286" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="286" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac5c98ac2a9a5c52ba27d7dd0088381b6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_comp_interp_coef0_x</definition>
        <argsstring>(int side, Box const &amp;box, int blen, Array4&lt; T &gt; const &amp;f, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, T bcl, int maxorder, T dxinv, int icomp) noexcept</argsstring>
        <name>mllinop_comp_interp_coef0_x</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="329" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="329" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae2fd6a46487752517394479bff97c0b2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_comp_interp_coef0_x</definition>
        <argsstring>(int side, int i, int j, int k, int blen, Array4&lt; T &gt; const &amp;f, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, T bcl, int maxorder, T dxinv, int icomp) noexcept</argsstring>
        <name>mllinop_comp_interp_coef0_x</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="377" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="377" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad850ccfcbb3b5632971d732e7add58e9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_comp_interp_coef0_y</definition>
        <argsstring>(int side, Box const &amp;box, int blen, Array4&lt; T &gt; const &amp;f, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, T bcl, int maxorder, T dyinv, int icomp) noexcept</argsstring>
        <name>mllinop_comp_interp_coef0_y</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dyinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="410" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="410" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6cf13ac01004d736e7db3ce27aa12b93" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_comp_interp_coef0_y</definition>
        <argsstring>(int side, int i, int j, int k, int blen, Array4&lt; T &gt; const &amp;f, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, T bcl, int maxorder, T dyinv, int icomp) noexcept</argsstring>
        <name>mllinop_comp_interp_coef0_y</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dyinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="458" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="458" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adfeec0fd8ed092da0cbbf66e296961d3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_comp_interp_coef0_z</definition>
        <argsstring>(int side, Box const &amp;box, int blen, Array4&lt; T &gt; const &amp;f, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, T bcl, int maxorder, T dzinv, int icomp) noexcept</argsstring>
        <name>mllinop_comp_interp_coef0_z</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dzinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="491" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="491" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad86824e564d92ddf113a79c68f2d7e80" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_comp_interp_coef0_z</definition>
        <argsstring>(int side, int i, int j, int k, int blen, Array4&lt; T &gt; const &amp;f, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, T bcl, int maxorder, T dzinv, int icomp) noexcept</argsstring>
        <name>mllinop_comp_interp_coef0_z</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>side</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dzinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="539" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="539" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6d1f7d532c41bb5245a35cf89f3ad225" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_innu_xlo</definition>
        <argsstring>(int i, int j, int k, Array4&lt; T &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;mask, Array4&lt; T const &gt; const &amp;bcoef, BoundCond bct, T, Array4&lt; T const &gt; const &amp;bcval, T fac, bool has_bcoef, int icomp) noexcept</argsstring>
        <name>mllinop_apply_innu_xlo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcoef</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type>T</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_bcoef</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="932" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="932" bodyend="944"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2e18accc07716c93da70e574a7e1c055" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_innu_xhi</definition>
        <argsstring>(int i, int j, int k, Array4&lt; T &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;mask, Array4&lt; T const &gt; const &amp;bcoef, BoundCond bct, T, Array4&lt; T const &gt; const &amp;bcval, T fac, bool has_bcoef, int icomp) noexcept</argsstring>
        <name>mllinop_apply_innu_xhi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcoef</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type>T</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_bcoef</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="948" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="948" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a37a9a0674a5b0c02ca26e3ab907c43c7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_innu_ylo</definition>
        <argsstring>(int i, int j, int k, Array4&lt; T &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;mask, Array4&lt; T const &gt; const &amp;bcoef, BoundCond bct, T, Array4&lt; T const &gt; const &amp;bcval, T fac, bool has_bcoef, int icomp) noexcept</argsstring>
        <name>mllinop_apply_innu_ylo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcoef</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type>T</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_bcoef</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="964" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="964" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a729219a8cc2ed27ad5de9a6c8d3bd72d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_innu_ylo_m</definition>
        <argsstring>(int i, int j, int k, Array4&lt; T &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, T, Array4&lt; T const &gt; const &amp;bcval, T fac, T xlo, T dx, int icomp) noexcept</argsstring>
        <name>mllinop_apply_innu_ylo_m</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type>T</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>T</type>
          <declname>xlo</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="980" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="980" bodyend="991"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a93808493dc5cfe902f5de806e4dba046" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_innu_yhi</definition>
        <argsstring>(int i, int j, int k, Array4&lt; T &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;mask, Array4&lt; T const &gt; const &amp;bcoef, BoundCond bct, T, Array4&lt; T const &gt; const &amp;bcval, T fac, bool has_bcoef, int icomp) noexcept</argsstring>
        <name>mllinop_apply_innu_yhi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcoef</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type>T</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_bcoef</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="995" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="995" bodyend="1007"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab9b7dd40e516a6db9eaca4a6c05b1dba" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_innu_yhi_m</definition>
        <argsstring>(int i, int j, int k, Array4&lt; T &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;mask, BoundCond bct, T, Array4&lt; T const &gt; const &amp;bcval, T fac, T xlo, T dx, int icomp) noexcept</argsstring>
        <name>mllinop_apply_innu_yhi_m</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type>T</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>T</type>
          <declname>xlo</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="1011" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="1011" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a24adb795729e97519ef54218310ce75e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_innu_zlo</definition>
        <argsstring>(int i, int j, int k, Array4&lt; T &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;mask, Array4&lt; T const &gt; const &amp;bcoef, BoundCond bct, T, Array4&lt; T const &gt; const &amp;bcval, T fac, bool has_bcoef, int icomp) noexcept</argsstring>
        <name>mllinop_apply_innu_zlo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcoef</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type>T</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_bcoef</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="1026" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="1026" bodyend="1038"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a41e90635b7223dba2b68e165ed924031" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mllinop_apply_innu_zhi</definition>
        <argsstring>(int i, int j, int k, Array4&lt; T &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;mask, Array4&lt; T const &gt; const &amp;bcoef, BoundCond bct, T, Array4&lt; T const &gt; const &amp;bcval, T fac, bool has_bcoef, int icomp) noexcept</argsstring>
        <name>mllinop_apply_innu_zhi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcoef</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref></type>
          <declname>bct</declname>
        </param>
        <param>
          <type>T</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>bcval</declname>
        </param>
        <param>
          <type>T</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_bcoef</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" line="1042" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp_K.H" bodystart="1042" bodyend="1054"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a249a580ecbb9cf9c62a5c8398e2e650a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlmg_lin_cc_interp_r2</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; T &gt; const &amp;ff, Array4&lt; T const &gt; const &amp;cc, int nc) noexcept</argsstring>
        <name>mlmg_lin_cc_interp_r2</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>ff</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_1D_K.H" line="9" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_1D_K.H" bodystart="9" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a42c1936a2addff0a513ce0fee0e97e79" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlmg_lin_cc_interp_r4</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; T &gt; const &amp;ff, Array4&lt; T const &gt; const &amp;cc, int nc) noexcept</argsstring>
        <name>mlmg_lin_cc_interp_r4</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>ff</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_1D_K.H" line="27" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_1D_K.H" bodystart="27" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aad9cfa8c0b510db0ea1d728564a6a34c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlmg_lin_nd_interp_r2</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; T &gt; const &amp;fine, Array4&lt; T const &gt; const &amp;crse) noexcept</argsstring>
        <name>mlmg_lin_nd_interp_r2</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_1D_K.H" line="44" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_1D_K.H" bodystart="44" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac6796e6b7599e56ab974042839b25efc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlmg_lin_nd_interp_r4</definition>
        <argsstring>(int i, int, int, int n, Array4&lt; T &gt; const &amp;fine, Array4&lt; T const &gt; const &amp;crse) noexcept</argsstring>
        <name>mlmg_lin_nd_interp_r4</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_1D_K.H" line="60" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_1D_K.H" bodystart="60" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a99eb26c72f67ead31e003e2a5131d08b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_set_nodal_mask</definition>
        <argsstring>(int, int, int, Array4&lt; int &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_set_nodal_mask</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <defname>nmsk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>cmsk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="8" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="8" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a03235199d4d7140b2b814f6ec2a91605" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_set_dirichlet_mask</definition>
        <argsstring>(Box const &amp;, Array4&lt; int &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Box const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_set_dirichlet_mask</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>bx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <defname>dmsk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>omsk</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>dom</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bclo</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bchi</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="13" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="13" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9c58e1a97a7d3c0eb90d98fd9b022b05" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_set_dot_mask</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Box const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_set_dot_mask</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>bx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>dmsk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>omsk</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>dom</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bclo</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bchi</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="20" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="20" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aea6fbee6638a575caec8ac30d8a177d8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_zero_fine</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; int const &gt; const &amp;, int) noexcept</argsstring>
        <name>mlndlap_zero_fine</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>phi</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>fine_flag</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="27" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="27" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6b9c125d08bef873a0aaf1f9bbddf260" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_avgdown_coeff_x</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_avgdown_coeff_x</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="32" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="32" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a35ac711ad4344e39ed8f1ed3f9130624" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_semi_avgdown_coeff</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, int) noexcept</argsstring>
        <name>mlndlap_semi_avgdown_coeff</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>idir</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="37" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a28652d78e48d1f39d99d4bca42861d95" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::mlndlap_bc_doit</definition>
        <argsstring>(Box const &amp;, Array4&lt; T &gt; const &amp;, Box const &amp;, GpuArray&lt; bool, AMREX_SPACEDIM &gt; const &amp;, GpuArray&lt; bool, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_bc_doit</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>vbx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <defname>a</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>domain</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; bool, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bflo</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; bool, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bfhi</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="42" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af366c6fa856da068a397a0b94662c04a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlndlap_adotx_c</definition>
        <argsstring>(int, int, int, Array4&lt; Real const &gt; const &amp;, Real, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_adotx_c</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>x</defname>
        </param>
        <param>
          <type>Real</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="48" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1add55c3cdd6250ad56d002c6bdb3afc2a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlndlap_adotx_ha</definition>
        <argsstring>(int, int, int, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_adotx_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="54" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a010d8fce8129d1003ad1f45512b89b15" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlndlap_adotx_aa</definition>
        <argsstring>(int, int, int, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_adotx_aa</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>x</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="60" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa6a6413110e1c46b97a35a361c635fda" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_normalize_ha</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_normalize_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="66" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8e499c859dbdc58e713e00e36af320c4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_normalize_aa</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_normalize_aa</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>x</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="71" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aba5b8ce83982ac8a5e22822bbb231579" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_ha</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Real, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_jacobi_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
        </param>
        <param>
          <type>Real</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="76" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8703bdcc7d1793aa3f768f80933aab69" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_ha</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_jacobi_ha</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="82" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4bc3ade4476a6d87953841881fb38e42" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_aa</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Real, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_jacobi_aa</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sol</defname>
        </param>
        <param>
          <type>Real</type>
          <defname>Ax</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="88" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a026fbdd53e71a7e0879190256fa79299" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_aa</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_jacobi_aa</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>bx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sol</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>Ax</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="94" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af14fd92f572eb0b065ca8248405a0acb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_c</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Real, Array4&lt; Real const &gt; const &amp;, Real, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_jacobi_c</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sol</defname>
        </param>
        <param>
          <type>Real</type>
          <defname>Ax</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type>Real</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="100" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4653e7309f1f40c8c842140df07c3093" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_c</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Real, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_jacobi_c</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>bx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sol</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>Ax</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type>Real</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="106" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8eadb47f0e2398ae6102902e47fd06b2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_ha</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_ha</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="112" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a62e4e72325926b06678c3375aa26c247" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_aa</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_aa</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>bx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sol</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="118" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abfce7ba114478554b5a519f58e2a9e96" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_c</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Real, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_c</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>bx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sol</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type>Real</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="124" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aea15e426759719fb40bea1467bec8c1b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_with_line_solve_aa</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_with_line_solve_aa</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>bx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sol</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="130" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aeb305780def1f6842fdde70599dff49a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_restriction</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_restriction</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="137" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="137" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a55b6f1f2494748fb2c65b42173c1620e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>rr</declname>
            <defname>rr</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_restriction</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Box const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_restriction</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>fdom</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bclo</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bchi</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="143" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="143" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a739c61caa42304fdafed256192d5b3ae" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_semi_restriction</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, int) noexcept</argsstring>
        <name>mlndlap_semi_restriction</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>idir</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="151" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="151" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa9e57c385a5dcb7427c825b47c5ca849" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_interpadd_c</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_interpadd_c</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="156" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5d4e1011f22a3fc6d4974ed55c8accac" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_interpadd_aa</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_interpadd_aa</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="162" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a70d0526f5c183c5731c0f08ba27670cc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_semi_interpadd_aa</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, int) noexcept</argsstring>
        <name>mlndlap_semi_interpadd_aa</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>idir</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="168" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8ec43746ae5cae796866588ec0f41c33" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_interpadd_ha</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_interpadd_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="174" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a02a91b419a391c582861d06aab7bbb90" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_divu</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;, Box const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_divu</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>vel</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>nodal_domain</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bclo</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bchi</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="180" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="180" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3dd38d9abf74e242138effab13f2e9a0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlndlap_rhcc</definition>
        <argsstring>(int, int, int, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_rhcc</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhcc</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="189" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac19201bf459a388c3e8988fe9b54e6cb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_mknewu</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_mknewu</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>u</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>p</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="194" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6a543890dcab6db405cd901d7e89133d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_mknewu_c</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Real, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_mknewu_c</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>u</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>p</defname>
        </param>
        <param>
          <type>Real</type>
          <defname>sig</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="199" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6f61c36adba2f891648c342ef4b558e8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>rr</declname>
            <defname>rr</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_rhcc_fine_contrib</definition>
        <argsstring>(int, int, int, Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_rhcc_fine_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>ccbx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>cc</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="205" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a93891c5a7ee70e942834086d0aa5ad9e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_divu_cf_contrib</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;, Box const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, bool) noexcept</argsstring>
        <name>mlndlap_divu_cf_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="211" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="211" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad31ca7c577662afe5ea03ed3d21d8a57" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_crse_resid</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Box const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, bool) noexcept</argsstring>
        <name>mlndlap_crse_resid</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>resid</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>nddom</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bclo</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>bchi</defname>
        </param>
        <param>
          <type>bool</type>
          <defname>neumann_doubling</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="222" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="222" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5254b57a98ac5629ec4d14f55f37feba" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_res_cf_contrib</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;, Box const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, bool) noexcept</argsstring>
        <name>mlndlap_res_cf_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="230" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="230" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a883d525d9d67d5243805dfa6b69fbfbc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_res_cf_contrib_cs</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Real, Array4&lt; int const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;, Box const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;, bool) noexcept</argsstring>
        <name>mlndlap_res_cf_contrib_cs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type>Real</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="242" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="242" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a77743280efb0c02d3c4301b87b272f7c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_set_stencil</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_set_stencil</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>bx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sten</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sigma</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <defname>dxinv</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="254" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="254" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4b20346156e62bf392b0e5870b142762" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_set_stencil_s0</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_set_stencil_s0</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sten</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="260" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="260" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aee965ec1adf090525e207867611b1635" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_stencil_rap</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_stencil_rap</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>csten</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>fsten</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="264" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="264" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a447276ff5f1cf67d54fe79977f26da40" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlndlap_adotx_sten</definition>
        <argsstring>(int, int, int, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_adotx_sten</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>x</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sten</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="269" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="269" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adce0f812bb61661ea0dd6d708ac0c402" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_sten</definition>
        <argsstring>(Box const &amp;, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_sten</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <defname>bx</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>sol</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>rhs</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sten</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="274" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="274" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a339f91a23a5b046654c2029e996cbd94" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_interpadd_rap</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_interpadd_rap</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sten</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="281" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="281" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab727d4d055b37cfc647dd73d9a2be0eb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_restriction_rap</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndlap_restriction_rap</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>sten</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" line="287" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_1D_K.H" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a344bb80d4a06ecf958781bdef59b351d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_avgdown_coeff_y</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;crse, Array4&lt; Real const &gt; const &amp;fine) noexcept</argsstring>
        <name>mlndlap_avgdown_coeff_y</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="155" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="155" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8b0a3b042ac35788ad8dddead4253d19" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlndlap_adotx_ha</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; int const &gt; const &amp;msk, bool is_rz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_adotx_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="293" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="293" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a43272fd95bc7e0d7912daa2c0a642862" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlndlap_adotx_aa</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;sig, Array4&lt; int const &gt; const &amp;msk, bool is_rz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_adotx_aa</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="328" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="328" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad2144182834ce73b21ddad5461a14814" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlndlap_adotx_c</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;x, Real sigma, Array4&lt; int const &gt; const &amp;msk, bool is_rz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_adotx_c</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="361" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="361" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ace8c1ed0795537f5b681f070521f4948" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_normalize_ha</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_normalize_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="393" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="393" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5b4d73e12156421dbcabc4ab39745317" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_ha</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;sol, Real Ax, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_jacobi_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="420" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="420" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab3f38f45fa3a4b40286b8058ef746f7f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_ha</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_jacobi_ha</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="438" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="438" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a51bde271654e8a3ad2d6262ec0f995f1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_ha</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool is_rz) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_ha</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="525" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="525" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9b55c5bb1da902671fbf6e07595048d0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_aa</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sig, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool is_rz) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_aa</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="572" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="572" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac53265610f08a7fdcc2406255598f31a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_c</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;rhs, Real sig, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool is_rz) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_c</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="616" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="616" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a018951602c1fef6c43136b743a0a3a2a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::tridiagonal_solve</definition>
        <argsstring>(Array1D&lt; Real, 0, 31 &gt; &amp;a_ls, Array1D&lt; Real, 0, 31 &gt; &amp;b_ls, Array1D&lt; Real, 0, 31 &gt; &amp;c_ls, Array1D&lt; Real, 0, 31 &gt; &amp;r_ls, Array1D&lt; Real, 0, 31 &gt; &amp;u_ls, Array1D&lt; Real, 0, 31 &gt; &amp;gam, int ilen) noexcept</argsstring>
        <name>tridiagonal_solve</name>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; Real, 0, 31 &gt; &amp;</type>
          <declname>a_ls</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; Real, 0, 31 &gt; &amp;</type>
          <declname>b_ls</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; Real, 0, 31 &gt; &amp;</type>
          <declname>c_ls</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; Real, 0, 31 &gt; &amp;</type>
          <declname>r_ls</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; Real, 0, 31 &gt; &amp;</type>
          <declname>u_ls</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref>&lt; Real, 0, 31 &gt; &amp;</type>
          <declname>gam</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ilen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="660" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="660" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4cfb55f2e5160db8ca28cefbfcf973ce" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_with_line_solve_aa</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sig, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool is_rz) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_with_line_solve_aa</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="679" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="679" bodyend="793"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2cac2c8ce802cddafa55136e8ffcb31e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_interpadd_ha</definition>
        <argsstring>(int i, int j, int, Array4&lt; Real &gt; const &amp;fine, Array4&lt; Real const &gt; const &amp;crse, Array4&lt; Real const &gt; const &amp;sigx, Array4&lt; Real const &gt; const &amp;sigy, Array4&lt; int const &gt; const &amp;msk) noexcept</argsstring>
        <name>mlndlap_interpadd_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sigx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sigy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="1026" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="1026" bodyend="1050"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac5ffed68b31da08687142195b804a767" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_divu</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Box const &amp;nodal_domain, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bclo, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bchi, bool is_rz) noexcept</argsstring>
        <name>mlndlap_divu</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>nodal_domain</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bclo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bchi</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="1057" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="1057" bodyend="1102"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8a08ba07924919817676a76596d29044" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_mknewu</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;p, Array4&lt; Real const &gt; const &amp;sig, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool is_rz) noexcept</argsstring>
        <name>mlndlap_mknewu</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="1118" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="1118" bodyend="1130"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aef2d99a25b5735f53808a3cf1baad97a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_mknewu_c</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;u, Array4&lt; Real const &gt; const &amp;p, Real sig, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool is_rz) noexcept</argsstring>
        <name>mlndlap_mknewu_c</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="1133" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="1133" bodyend="1145"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1d45248dc1950cb01bc44fc0ca45ab78" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>rr</declname>
            <defname>rr</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_divu_fine_contrib</definition>
        <argsstring>(int i, int j, int, Box const &amp;fvbx, Box const &amp;velbx, Array4&lt; Real &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;frhs, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool is_rz) noexcept</argsstring>
        <name>mlndlap_divu_fine_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>fvbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>velbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>frhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="1174" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="1174" bodyend="1207"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a25f8c9d5397b3257e338744fa62de620" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_divu_cf_contrib</definition>
        <argsstring>(int i, int j, int, Array4&lt; Real &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;fc, Array4&lt; Real const &gt; const &amp;rhcc, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; int const &gt; const &amp;ndmsk, Array4&lt; int const &gt; const &amp;ccmsk, bool is_rz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Box const &amp;ccdom_p, Box const &amp;veldom, Box const &amp;nddom, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bclo, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bchi) noexcept</argsstring>
        <name>mlndlap_divu_cf_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhcc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ndmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccmsk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ccdom_p</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>veldom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>nddom</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bclo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bchi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="1268" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="1268" bodyend="1318"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aec133744a63e94005ef481cb3a34c759" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>rr</declname>
            <defname>rr</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_Ax_fine_contrib</definition>
        <argsstring>(int i, int j, int, Box const &amp;ndbx, Box const &amp;ccbx, Array4&lt; Real &gt; const &amp;f, Array4&lt; Real const &gt; const &amp;res, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;sig, Array4&lt; int const &gt; const &amp;msk, bool is_rz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_Ax_fine_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ndbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ccbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="1460" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="1460" bodyend="1470"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1be11befaad780d29152b9e45595fde0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>rr</declname>
            <defname>rr</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_Ax_fine_contrib_cs</definition>
        <argsstring>(int i, int j, int, Box const &amp;ndbx, Box const &amp;ccbx, Array4&lt; Real &gt; const &amp;f, Array4&lt; Real const &gt; const &amp;res, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;phi, Real const sig, Array4&lt; int const &gt; const &amp;msk, bool is_rz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_Ax_fine_contrib_cs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ndbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ccbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>Real const</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="1474" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="1474" bodyend="1484"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad5093e1e3c96b9ae000d6c60ba2fa68e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_res_cf_contrib</definition>
        <argsstring>(int i, int j, int, Array4&lt; Real &gt; const &amp;res, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sig, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; int const &gt; const &amp;ndmsk, Array4&lt; int const &gt; const &amp;ccmsk, Array4&lt; Real const &gt; const &amp;fc, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Box const &amp;ccdom_p, Box const &amp;nddom, bool is_rz, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bclo, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bchi, bool neumann_doubling) noexcept</argsstring>
        <name>mlndlap_res_cf_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ndmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ccdom_p</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>nddom</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bclo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bchi</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>neumann_doubling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="1487" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="1487" bodyend="1517"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adb0bdef9d1c47aa32063d0deb6e42f78" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_res_cf_contrib_cs</definition>
        <argsstring>(int i, int j, int, Array4&lt; Real &gt; const &amp;res, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real const sig, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; int const &gt; const &amp;ndmsk, Array4&lt; int const &gt; const &amp;ccmsk, Array4&lt; Real const &gt; const &amp;fc, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Box const &amp;ccdom_p, Box const &amp;nddom, bool is_rz, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bclo, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bchi, bool neumann_doubling) noexcept</argsstring>
        <name>mlndlap_res_cf_contrib_cs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real const</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ndmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ccdom_p</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>nddom</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_rz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bclo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bchi</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>neumann_doubling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" line="1520" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_2D_K.H" bodystart="1520" bodyend="1550"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1dee48540dad573effdb346154f1da0c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_avgdown_coeff_z</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;crse, Array4&lt; Real const &gt; const &amp;fine) noexcept</argsstring>
        <name>mlndlap_avgdown_coeff_z</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="222" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="222" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4f492bb83254cf07e228b963154da5e4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mlndlap_adotx_ha</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; Real const &gt; const &amp;sz, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_adotx_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="757" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="757" bodyend="854"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1adbe7ac7535678d7a0584bdf336c21f58" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_normalize_ha</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; Real const &gt; const &amp;sz, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_normalize_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="955" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="955" bodyend="971"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a179e9e92efeda70728fddf2ead4e9360" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_ha</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;sol, Real Ax, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; Real const &gt; const &amp;sz, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_jacobi_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="990" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="990" bodyend="1010"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3d23c9516998db5f7f62b85deff1a6a5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_ha</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; Real const &gt; const &amp;sz, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_jacobi_ha</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="1013" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="1013" bodyend="1036"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad8a68ba99a1a6cdb04ad4bf1dd1a3597" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_gauss_seidel_ha</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sx, Array4&lt; Real const &gt; const &amp;sy, Array4&lt; Real const &gt; const &amp;sz, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_gauss_seidel_ha</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="1115" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="1115" bodyend="1219"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a531776fc9c73568abdcae71dc12b41fc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_interpadd_ha</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;fine, Array4&lt; Real const &gt; const &amp;crse, Array4&lt; Real const &gt; const &amp;sigx, Array4&lt; Real const &gt; const &amp;sigy, Array4&lt; Real const &gt; const &amp;sigz, Array4&lt; int const &gt; const &amp;msk) noexcept</argsstring>
        <name>mlndlap_interpadd_ha</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sigx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sigy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sigz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="2021" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="2021" bodyend="2071"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5a9a7db8b16a9ef88bb03f59166a579d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>rr</declname>
            <defname>rr</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_divu_fine_contrib</definition>
        <argsstring>(int i, int j, int k, Box const &amp;fvbx, Box const &amp;velbx, Array4&lt; Real &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;frhs, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_divu_fine_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>fvbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>velbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>frhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="2221" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="2221" bodyend="2260"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a670b05a007119dce11eb3f0b46193b0e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_divu_cf_contrib</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;fc, Array4&lt; Real const &gt; const &amp;rhcc, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; int const &gt; const &amp;ndmsk, Array4&lt; int const &gt; const &amp;ccmsk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Box const &amp;ccdom_p, Box const &amp;veldom, Box const &amp;nddom, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bclo, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bchi) noexcept</argsstring>
        <name>mlndlap_divu_cf_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhcc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ndmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ccdom_p</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>veldom</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>nddom</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bclo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bchi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="2334" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="2334" bodyend="2410"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa426c74701cc4a171c54210ede1212cd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>rr</declname>
            <defname>rr</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_Ax_fine_contrib</definition>
        <argsstring>(int i, int j, int k, Box const &amp;ndbx, Box const &amp;ccbx, Array4&lt; Real &gt; const &amp;f, Array4&lt; Real const &gt; const &amp;res, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;sig, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_Ax_fine_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ndbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ccbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="2653" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="2653" bodyend="2662"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7ebf2548096900974be75be23948782a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>rr</declname>
            <defname>rr</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_Ax_fine_contrib_cs</definition>
        <argsstring>(int i, int j, int k, Box const &amp;ndbx, Box const &amp;ccbx, Array4&lt; Real &gt; const &amp;f, Array4&lt; Real const &gt; const &amp;res, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;phi, Real const sig, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mlndlap_Ax_fine_contrib_cs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ndbx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ccbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>Real const</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="2666" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="2666" bodyend="2675"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2988e920c93565dcea89d08e018e1262" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_res_cf_contrib</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;res, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sig, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; int const &gt; const &amp;ndmsk, Array4&lt; int const &gt; const &amp;ccmsk, Array4&lt; Real const &gt; const &amp;fc, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Box const &amp;ccdom_p, Box const &amp;nddom, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bclo, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bchi, bool neumann_doubling) noexcept</argsstring>
        <name>mlndlap_res_cf_contrib</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ndmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ccdom_p</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>nddom</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bclo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bchi</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>neumann_doubling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="2678" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="2678" bodyend="2708"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a00bf121938de056ff99b07c9a5ac892d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_res_cf_contrib_cs</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;res, Array4&lt; Real const &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real const sig, Array4&lt; int const &gt; const &amp;dmsk, Array4&lt; int const &gt; const &amp;ndmsk, Array4&lt; int const &gt; const &amp;ccmsk, Array4&lt; Real const &gt; const &amp;fc, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Box const &amp;ccdom_p, Box const &amp;nddom, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bclo, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;bchi, bool neumann_doubling) noexcept</argsstring>
        <name>mlndlap_res_cf_contrib_cs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real const</type>
          <declname>sig</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>dmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ndmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>ccmsk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>ccdom_p</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>nddom</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bclo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bchi</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>neumann_doubling</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" line="2711" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_3D_K.H" bodystart="2711" bodyend="2741"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5d2482b4f9d89faf8934861fec9bc1b6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::mlndlap_impose_neumann_bc</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;rhs, Box const &amp;nddom, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;lobc, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;hibc) noexcept</argsstring>
        <name>mlndlap_impose_neumann_bc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>nddom</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>lobc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>hibc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" line="99" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" bodystart="99" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a880fe3ab900c3cb4d906ff3bdb91e643" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::mlndlap_unimpose_neumann_bc</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;rhs, Box const &amp;nddom, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;lobc, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;hibc) noexcept</argsstring>
        <name>mlndlap_unimpose_neumann_bc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>nddom</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>lobc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>hibc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" line="107" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" bodystart="107" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a27e3488dd823ad0ba4999a21f3cba781" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::mlndlap_fillbc_cc</definition>
        <argsstring>(Box const &amp;vbx, Array4&lt; T &gt; const &amp;sigma, Box const &amp;domain, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; bclo, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; bchi) noexcept</argsstring>
        <name>mlndlap_fillbc_cc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>bclo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>bchi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" line="127" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" bodystart="127" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acc59a603d50b00d769fdc49ed60d6cd1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::mlndlap_applybc</definition>
        <argsstring>(Box const &amp;vbx, Array4&lt; T &gt; const &amp;phi, Box const &amp;domain, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; bclo, GpuArray&lt; LinOpBCType, AMREX_SPACEDIM &gt; bchi) noexcept</argsstring>
        <name>mlndlap_applybc</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>bclo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; LinOpBCType, AMREX_SPACEDIM &gt;</type>
          <declname>bchi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" line="141" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" bodystart="141" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac8273b39fe595ef4e5c09b38cb01e71e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_normalize_sten</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;sten, Array4&lt; int const &gt; const &amp;msk, Real s0_norm0) noexcept</argsstring>
        <name>mlndlap_normalize_sten</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sten</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>s0_norm0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" line="161" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" bodystart="161" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4699f3f565599c96a567615e64ea5d20" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_sten</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;sol, Real Ax, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sten, Array4&lt; int const &gt; const &amp;msk) noexcept</argsstring>
        <name>mlndlap_jacobi_sten</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sten</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" line="171" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" bodystart="171" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad804c9fcd8b74d9d8d9477fe5637e0f1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndlap_jacobi_sten</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; Real const &gt; const &amp;sten, Array4&lt; int const &gt; const &amp;msk) noexcept</argsstring>
        <name>mlndlap_jacobi_sten</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sten</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" line="184" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" bodystart="184" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6dac73b981a4a840ea27018fdb17d6a2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_FORCE_INLINE bool amrex::mlndlap_any_fine_sync_cells</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; int const &gt; const &amp;msk, int fine_flag) noexcept</argsstring>
        <name>mlndlap_any_fine_sync_cells</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" line="201" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLap_K.H" bodystart="201" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac7e03fbccf0d29fad0597554a3abf2a2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndtslap_interpadd</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;) noexcept</argsstring>
        <name>mlndtslap_interpadd</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_1D_K.H" line="8" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_1D_K.H" bodystart="8" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aaf2d6988f0f9e6bcbbf860bdbe33cd87" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndtslap_semi_interpadd</definition>
        <argsstring>(int, int, int, Array4&lt; Real &gt; const &amp;, Array4&lt; Real const &gt; const &amp;, Array4&lt; int const &gt; const &amp;, int) noexcept</argsstring>
        <name>mlndtslap_semi_interpadd</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>i</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>j</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>k</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <defname>fine</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <defname>crse</defname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <defname>msk</defname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defname>semi_dir</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_1D_K.H" line="13" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_1D_K.H" bodystart="13" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a53370b735fdd3cf1ef91f247b59fa59a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndtslap_adotx</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, 3 &gt; const &amp;s) noexcept</argsstring>
        <name>mlndtslap_adotx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 3 &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_2D_K.H" line="87" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_2D_K.H" bodystart="87" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7f03c49565fe408f76ae7aa2ca26dc99" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndtslap_gauss_seidel</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, 3 &gt; const &amp;s) noexcept</argsstring>
        <name>mlndtslap_gauss_seidel</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 3 &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_2D_K.H" line="101" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_2D_K.H" bodystart="101" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa1536ebc938e56df4e34d2a480de5887" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndtslap_adotx</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, 6 &gt; const &amp;s) noexcept</argsstring>
        <name>mlndtslap_adotx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 6 &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_3D_K.H" line="170" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_3D_K.H" bodystart="170" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a278a64e576981a2a11e821afe9ebf758" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlndtslap_gauss_seidel</definition>
        <argsstring>(int i, int j, int k, Array4&lt; Real &gt; const &amp;sol, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;msk, GpuArray&lt; Real, 6 &gt; const &amp;s) noexcept</argsstring>
        <name>mlndtslap_gauss_seidel</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>msk</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 6 &gt; const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_3D_K.H" line="187" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_3D_K.H" bodystart="187" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4ba0b0f34245585ce4164f57e03e6d14" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_adotx</definition>
        <argsstring>(int i, Array4&lt; T &gt; const &amp;y, Array4&lt; T const &gt; const &amp;x, T dhx) noexcept</argsstring>
        <name>mlpoisson_adotx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="9" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="9" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af24a436e081d58ede9cec374b62bb6b3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_adotx_os</definition>
        <argsstring>(int i, Array4&lt; T &gt; const &amp;y, Array4&lt; T const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;osm, T dhx) noexcept</argsstring>
        <name>mlpoisson_adotx_os</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="18" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="18" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a26b52402d10757144862537c196db625" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_adotx_m</definition>
        <argsstring>(int i, Array4&lt; T &gt; const &amp;y, Array4&lt; T const &gt; const &amp;x, T dhx, T dx, T probxlo) noexcept</argsstring>
        <name>mlpoisson_adotx_m</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="32" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="32" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a3171a013d5989b5e9851658aca2b7a15" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_flux_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; T &gt; const &amp;fx, Array4&lt; T const &gt; const &amp;sol, T dxinv) noexcept</argsstring>
        <name>mlpoisson_flux_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="43" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="43" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5fd04f32dc701a0cb5b7cbacddc15f9a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_flux_x_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; T &gt; const &amp;fx, Array4&lt; T const &gt; const &amp;sol, T dxinv, T dx, T probxlo) noexcept</argsstring>
        <name>mlpoisson_flux_x_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="57" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="57" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a83fdd6ab42d2fa99c37932ab15afd504" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_flux_xface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; T &gt; const &amp;fx, Array4&lt; T const &gt; const &amp;sol, T dxinv, int xlen) noexcept</argsstring>
        <name>mlpoisson_flux_xface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="73" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="73" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a569ce08aa34785c55e309b897931f64c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_flux_xface_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; T &gt; const &amp;fx, Array4&lt; T const &gt; const &amp;sol, T dxinv, int xlen, T dx, T probxlo) noexcept</argsstring>
        <name>mlpoisson_flux_xface_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="86" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="86" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a670237d9b46bcf40be36d5bff4a63a42" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_gsrb</definition>
        <argsstring>(int i, int, int, Array4&lt; T &gt; const &amp;phi, Array4&lt; T const &gt; const &amp;rhs, T dhx, Array4&lt; T const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; T const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>mlpoisson_gsrb</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="102" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="102" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abb5a0b21c1cc3caa854e66476df82c36" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_gsrb_os</definition>
        <argsstring>(int i, int, int, Array4&lt; T &gt; const &amp;phi, Array4&lt; T const &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;osm, T dhx, Array4&lt; T const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; T const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>mlpoisson_gsrb_os</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="130" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="130" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a27345dc98593d14eb2b32570007ef86f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_gsrb_m</definition>
        <argsstring>(int i, int, int, Array4&lt; T &gt; const &amp;phi, Array4&lt; T const &gt; const &amp;rhs, T dhx, Array4&lt; T const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; T const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Box const &amp;vbox, int redblack, T dx, T probxlo) noexcept</argsstring>
        <name>mlpoisson_gsrb_m</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="162" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="162" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9eaf0679e7d5af988ed7ff805e89f2d2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_normalize</definition>
        <argsstring>(int i, int, int, Array4&lt; T &gt; const &amp;x, T dhx, T dx, T probxlo) noexcept</argsstring>
        <name>mlpoisson_normalize</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" line="193" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_1D_K.H" bodystart="193" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2ee7d90d5262f08f2c0356f20dd11212" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_adotx</definition>
        <argsstring>(int i, int j, int k, Array4&lt; T &gt; const &amp;y, Array4&lt; T const &gt; const &amp;x, T dhx, T dhy, T dhz) noexcept</argsstring>
        <name>mlpoisson_adotx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="9" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="9" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a76127d2a544317b8685dc766003d82f2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_adotx_os</definition>
        <argsstring>(int i, int j, int k, Array4&lt; T &gt; const &amp;y, Array4&lt; T const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;osm, T dhx, T dhy, T dhz) noexcept</argsstring>
        <name>mlpoisson_adotx_os</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="20" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="20" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a558a15ef6f7f983cf3cbb667c085f4a3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_flux_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; T &gt; const &amp;fy, Array4&lt; T const &gt; const &amp;sol, T dyinv) noexcept</argsstring>
        <name>mlpoisson_flux_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dyinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="72" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="72" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1ace9918d421ae341c148190b63d0b81" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_flux_yface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; T &gt; const &amp;fy, Array4&lt; T const &gt; const &amp;sol, T dyinv, int ylen) noexcept</argsstring>
        <name>mlpoisson_flux_yface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dyinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ylen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="90" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="90" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af382239a16f86597c9c6e68ec73879b2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_flux_z</definition>
        <argsstring>(Box const &amp;box, Array4&lt; T &gt; const &amp;fz, Array4&lt; T const &gt; const &amp;sol, T dzinv) noexcept</argsstring>
        <name>mlpoisson_flux_z</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dzinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="112" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="112" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acfd998d0d3429948b0a7e68291d6a264" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_flux_zface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; T &gt; const &amp;fz, Array4&lt; T const &gt; const &amp;sol, T dzinv, int zlen) noexcept</argsstring>
        <name>mlpoisson_flux_zface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dzinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>zlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="130" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="130" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af35078e515133d4f3b9734d13ad54d22" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_gsrb</definition>
        <argsstring>(int i, int j, int k, Array4&lt; T &gt; const &amp;phi, Array4&lt; T const &gt; const &amp;rhs, T dhx, T dhy, T dhz, Array4&lt; T const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; T const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Array4&lt; T const &gt; const &amp;f2, Array4&lt; int const &gt; const &amp;m2, Array4&lt; T const &gt; const &amp;f3, Array4&lt; int const &gt; const &amp;m3, Array4&lt; T const &gt; const &amp;f4, Array4&lt; int const &gt; const &amp;m4, Array4&lt; T const &gt; const &amp;f5, Array4&lt; int const &gt; const &amp;m5, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>mlpoisson_gsrb</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m5</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="155" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="155" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a45a91e8cc49f5cd2430328b7ee08ef57" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mlpoisson_gsrb_os</definition>
        <argsstring>(int i, int j, int k, Array4&lt; T &gt; const &amp;phi, Array4&lt; T const &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;osm, T dhx, T dhy, T dhz, Array4&lt; T const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; T const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Array4&lt; T const &gt; const &amp;f2, Array4&lt; int const &gt; const &amp;m2, Array4&lt; T const &gt; const &amp;f3, Array4&lt; int const &gt; const &amp;m3, Array4&lt; T const &gt; const &amp;f4, Array4&lt; int const &gt; const &amp;m4, Array4&lt; T const &gt; const &amp;f5, Array4&lt; int const &gt; const &amp;m5, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>mlpoisson_gsrb_os</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>T</type>
          <declname>dhz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m4</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T const &gt; const &amp;</type>
          <declname>f5</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m5</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" line="200" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_3D_K.H" bodystart="200" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abf7a8ee97af68566dd8f4172055054a9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_fill_corners</definition>
        <argsstring>(int icorner, Box const &amp;vbox, Array4&lt; Real &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;mxlo, Array4&lt; int const &gt; const &amp;mylo, Array4&lt; int const &gt; const &amp;mxhi, Array4&lt; int const &gt; const &amp;myhi, Array4&lt; Real const &gt; const &amp;bcvalxlo, Array4&lt; Real const &gt; const &amp;bcvalylo, Array4&lt; Real const &gt; const &amp;bcvalxhi, Array4&lt; Real const &gt; const &amp;bcvalyhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Array2D&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bcl, int inhomog, int maxorder, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mltensor_fill_corners</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icorner</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>myhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalyhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" line="10" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" bodystart="10" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7030037af193bb2bf648e008000c57dd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_cross_terms_fx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etax, Array4&lt; Real const &gt; const &amp;kapx, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mltensor_cross_terms_fx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" line="187" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" bodystart="187" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aff33f49d1494120e79df850eaa87201e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_cross_terms_fy</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etay, Array4&lt; Real const &gt; const &amp;kapy, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mltensor_cross_terms_fy</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etay</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" line="215" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" bodystart="215" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1fdf14ed031a6b8519c1fc9a818dc643" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_cross_terms_fx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etax, Array4&lt; Real const &gt; const &amp;kapx, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Array4&lt; Real const &gt; const &amp;bvxlo, Array4&lt; Real const &gt; const &amp;bvxhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mltensor_cross_terms_fx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" line="243" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" bodystart="243" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af7898c737927ee5e4701de85ddd893cf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_cross_terms_fy</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etay, Array4&lt; Real const &gt; const &amp;kapy, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Array4&lt; Real const &gt; const &amp;bvylo, Array4&lt; Real const &gt; const &amp;bvyhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mltensor_cross_terms_fy</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etay</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvyhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" line="278" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" bodystart="278" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a95509f933f27bf95cd70b6064aaa4153" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_cross_terms</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real bscalar) noexcept</argsstring>
        <name>mltensor_cross_terms</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bscalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" line="311" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" bodystart="311" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5663d44c9283a75d4fc0a7077a0b7bf6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_cross_terms_os</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; int const &gt; const &amp;osm, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real bscalar) noexcept</argsstring>
        <name>mltensor_cross_terms_os</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bscalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" line="334" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" bodystart="334" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8420e5daa7ea328100bbd5355c290f45" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_vel_grads_fx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;vel, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mltensor_vel_grads_fx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" line="363" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" bodystart="363" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a40f5cb7b691ccd93b418b81b92200130" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_vel_grads_fy</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;vel, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mltensor_vel_grads_fy</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" line="389" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" bodystart="389" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a506e37aa50bae292445a1b892b61bf2c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_vel_grads_fx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;vel, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Array4&lt; Real const &gt; const &amp;bvxlo, Array4&lt; Real const &gt; const &amp;bvxhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mltensor_vel_grads_fx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" line="415" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" bodystart="415" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4c229b51daf8e677d4121e5d831964f4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_vel_grads_fy</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;vel, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Array4&lt; Real const &gt; const &amp;bvylo, Array4&lt; Real const &gt; const &amp;bvyhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mltensor_vel_grads_fy</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvyhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" line="446" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_2D_K.H" bodystart="446" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a634a9de3292e7927e3bc311e34fd7ba4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_fill_edges_xlo_ylo</definition>
        <argsstring>(int const i, int const j, int const k, Dim3 const &amp;blen, Array4&lt; Real &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;mxlo, Array4&lt; int const &gt; const &amp;mylo, Array4&lt; Real const &gt; const &amp;bcvalxlo, Array4&lt; Real const &gt; const &amp;bcvalylo, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Array2D&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bcl, int inhomog, int maxorder, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool xlo_domain, bool ylo_domain) noexcept</argsstring>
        <name>mltensor_fill_edges_xlo_ylo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>xlo_domain</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ylo_domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="10" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="10" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2f1446614bc3e77169613923023d3b18" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_fill_edges_xhi_ylo</definition>
        <argsstring>(int const i, int const j, int const k, Dim3 const &amp;blen, Array4&lt; Real &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;mxhi, Array4&lt; int const &gt; const &amp;mylo, Array4&lt; Real const &gt; const &amp;bcvalxhi, Array4&lt; Real const &gt; const &amp;bcvalylo, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Array2D&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bcl, int inhomog, int maxorder, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool xhi_domain, bool ylo_domain) noexcept</argsstring>
        <name>mltensor_fill_edges_xhi_ylo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>xhi_domain</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ylo_domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="63" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="63" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a56fbb16fb40d95653e4c6435871be25c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_fill_edges_xlo_yhi</definition>
        <argsstring>(int const i, int const j, int const k, Dim3 const &amp;blen, Array4&lt; Real &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;mxlo, Array4&lt; int const &gt; const &amp;myhi, Array4&lt; Real const &gt; const &amp;bcvalxlo, Array4&lt; Real const &gt; const &amp;bcvalyhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Array2D&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bcl, int inhomog, int maxorder, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool xlo_domain, bool yhi_domain) noexcept</argsstring>
        <name>mltensor_fill_edges_xlo_yhi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>myhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalyhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>xlo_domain</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>yhi_domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="116" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="116" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a517c60a317a8ff8fd09d50e15593336b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_fill_edges_xhi_yhi</definition>
        <argsstring>(int const i, int const j, int const k, Dim3 const &amp;blen, Array4&lt; Real &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;mxhi, Array4&lt; int const &gt; const &amp;myhi, Array4&lt; Real const &gt; const &amp;bcvalxhi, Array4&lt; Real const &gt; const &amp;bcvalyhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Array2D&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bcl, int inhomog, int maxorder, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool xhi_domain, bool yhi_domain) noexcept</argsstring>
        <name>mltensor_fill_edges_xhi_yhi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>myhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalyhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>xhi_domain</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>yhi_domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="169" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="169" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6f7635eb3583560ab8b191af6a5e8ceb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_fill_edges_xlo_zlo</definition>
        <argsstring>(int const i, int const j, int const k, Dim3 const &amp;blen, Array4&lt; Real &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;mxlo, Array4&lt; int const &gt; const &amp;mzlo, Array4&lt; Real const &gt; const &amp;bcvalxlo, Array4&lt; Real const &gt; const &amp;bcvalzlo, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Array2D&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bcl, int inhomog, int maxorder, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool xlo_domain, bool zlo_domain) noexcept</argsstring>
        <name>mltensor_fill_edges_xlo_zlo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>xlo_domain</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zlo_domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="222" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="222" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6c655c65e332e7a06fc72ef2abaeb807" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_fill_edges_xhi_zlo</definition>
        <argsstring>(int const i, int const j, int const k, Dim3 const &amp;blen, Array4&lt; Real &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;mxhi, Array4&lt; int const &gt; const &amp;mzlo, Array4&lt; Real const &gt; const &amp;bcvalxhi, Array4&lt; Real const &gt; const &amp;bcvalzlo, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Array2D&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bcl, int inhomog, int maxorder, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool xhi_domain, bool zlo_domain) noexcept</argsstring>
        <name>mltensor_fill_edges_xhi_zlo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>xhi_domain</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zlo_domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="275" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="275" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9afc4b9b89d5ac7eaf308e4d073f12c1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_fill_edges_xlo_zhi</definition>
        <argsstring>(int const i, int const j, int const k, Dim3 const &amp;blen, Array4&lt; Real &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;mxlo, Array4&lt; int const &gt; const &amp;mzhi, Array4&lt; Real const &gt; const &amp;bcvalxlo, Array4&lt; Real const &gt; const &amp;bcvalzhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Array2D&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bcl, int inhomog, int maxorder, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool xlo_domain, bool zhi_domain) noexcept</argsstring>
        <name>mltensor_fill_edges_xlo_zhi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>xlo_domain</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zhi_domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="328" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="328" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acebe6d3b425a107fb8430c3bae65a7ff" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_fill_edges_xhi_zhi</definition>
        <argsstring>(int const i, int const j, int const k, Dim3 const &amp;blen, Array4&lt; Real &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;mxhi, Array4&lt; int const &gt; const &amp;mzhi, Array4&lt; Real const &gt; const &amp;bcvalxhi, Array4&lt; Real const &gt; const &amp;bcvalzhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Array2D&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bcl, int inhomog, int maxorder, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool xhi_domain, bool zhi_domain) noexcept</argsstring>
        <name>mltensor_fill_edges_xhi_zhi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>xhi_domain</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zhi_domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="381" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="381" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a90c6a5b3b45c3e04b0db782173ca5ef1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_fill_edges_ylo_zlo</definition>
        <argsstring>(int const i, int const j, int const k, Dim3 const &amp;blen, Array4&lt; Real &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;mylo, Array4&lt; int const &gt; const &amp;mzlo, Array4&lt; Real const &gt; const &amp;bcvalylo, Array4&lt; Real const &gt; const &amp;bcvalzlo, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Array2D&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bcl, int inhomog, int maxorder, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool ylo_domain, bool zlo_domain) noexcept</argsstring>
        <name>mltensor_fill_edges_ylo_zlo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ylo_domain</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zlo_domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="434" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="434" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6f2919df8162a77fd0772e44c9fbbe84" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_fill_edges_yhi_zlo</definition>
        <argsstring>(int const i, int const j, int const k, Dim3 const &amp;blen, Array4&lt; Real &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;myhi, Array4&lt; int const &gt; const &amp;mzlo, Array4&lt; Real const &gt; const &amp;bcvalyhi, Array4&lt; Real const &gt; const &amp;bcvalzlo, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Array2D&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bcl, int inhomog, int maxorder, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool yhi_domain, bool zlo_domain) noexcept</argsstring>
        <name>mltensor_fill_edges_yhi_zlo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>myhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalyhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>yhi_domain</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zlo_domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="487" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="487" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6248b4c40bc29a82e0ebe59c187a2f46" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_fill_edges_ylo_zhi</definition>
        <argsstring>(int const i, int const j, int const k, Dim3 const &amp;blen, Array4&lt; Real &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;mylo, Array4&lt; int const &gt; const &amp;mzhi, Array4&lt; Real const &gt; const &amp;bcvalylo, Array4&lt; Real const &gt; const &amp;bcvalzhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Array2D&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bcl, int inhomog, int maxorder, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool ylo_domain, bool zhi_domain) noexcept</argsstring>
        <name>mltensor_fill_edges_ylo_zhi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ylo_domain</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zhi_domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="540" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="540" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af95dc4f253202580282566c5e79fc50d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_fill_edges_yhi_zhi</definition>
        <argsstring>(int const i, int const j, int const k, Dim3 const &amp;blen, Array4&lt; Real &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;myhi, Array4&lt; int const &gt; const &amp;mzhi, Array4&lt; Real const &gt; const &amp;bcvalyhi, Array4&lt; Real const &gt; const &amp;bcvalzhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Array2D&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bcl, int inhomog, int maxorder, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, bool yhi_domain, bool zhi_domain) noexcept</argsstring>
        <name>mltensor_fill_edges_yhi_zhi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>blen</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>myhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalyhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>yhi_domain</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zhi_domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="593" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="593" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2720cbbf5d1841f831af3bb076a45675" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::mltensor_fill_edges</definition>
        <argsstring>(Box const &amp;vbox, Array4&lt; Real &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;mxlo, Array4&lt; int const &gt; const &amp;mylo, Array4&lt; int const &gt; const &amp;mzlo, Array4&lt; int const &gt; const &amp;mxhi, Array4&lt; int const &gt; const &amp;myhi, Array4&lt; int const &gt; const &amp;mzhi, Array4&lt; Real const &gt; const &amp;bcvalxlo, Array4&lt; Real const &gt; const &amp;bcvalylo, Array4&lt; Real const &gt; const &amp;bcvalzlo, Array4&lt; Real const &gt; const &amp;bcvalxhi, Array4&lt; Real const &gt; const &amp;bcvalyhi, Array4&lt; Real const &gt; const &amp;bcvalzhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Array2D&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bcl, int inhomog, int maxorder, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mltensor_fill_edges</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>myhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalyhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="1346" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="1346" bodyend="1413"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4183dd6cfc1c77c6545fee103e4854db" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_fill_edges</definition>
        <argsstring>(int const bid, int const tid, int const bdim, Box const &amp;vbox, Array4&lt; Real &gt; const &amp;vel, Array4&lt; int const &gt; const &amp;mxlo, Array4&lt; int const &gt; const &amp;mylo, Array4&lt; int const &gt; const &amp;mzlo, Array4&lt; int const &gt; const &amp;mxhi, Array4&lt; int const &gt; const &amp;myhi, Array4&lt; int const &gt; const &amp;mzhi, Array4&lt; Real const &gt; const &amp;bcvalxlo, Array4&lt; Real const &gt; const &amp;bcvalylo, Array4&lt; Real const &gt; const &amp;bcvalzlo, Array4&lt; Real const &gt; const &amp;bcvalxhi, Array4&lt; Real const &gt; const &amp;bcvalyhi, Array4&lt; Real const &gt; const &amp;bcvalzhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Array2D&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bcl, int inhomog, int maxorder, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mltensor_fill_edges</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>bid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>tid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>bdim</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>myhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>mzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalyhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bcvalzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; Real, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bcl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>inhomog</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>maxorder</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="1417" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="1417" bodyend="1512"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8f3cf7c4ed78b565a830afb9f4781736" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mltensor_dz_on_xface</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dzi) noexcept</argsstring>
        <name>mltensor_dz_on_xface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="1516" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="1516" bodyend="1519"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa344491aa8595281823c18ab0d27d760" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mltensor_dz_on_yface</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dzi) noexcept</argsstring>
        <name>mltensor_dz_on_yface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="1522" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="1522" bodyend="1525"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4a28e4ea0f72cf32aff7158a4ec459ab" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mltensor_dx_on_zface</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dxi) noexcept</argsstring>
        <name>mltensor_dx_on_zface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="1528" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="1528" bodyend="1531"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9348bb6be668d8676abbae239e898379" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mltensor_dy_on_zface</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dyi) noexcept</argsstring>
        <name>mltensor_dy_on_zface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="1534" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="1534" bodyend="1537"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a00f22a6e30b96fc1eb9c1bb71c1b3c18" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_cross_terms_fz</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etaz, Array4&lt; Real const &gt; const &amp;kapz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mltensor_cross_terms_fz</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etaz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="1606" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="1606" bodyend="1636"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5bb5d94ad59c4598d892de4b31a5b641" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mltensor_dz_on_xface</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dzi, Array4&lt; Real const &gt; const &amp;bvxlo, Array4&lt; Real const &gt; const &amp;bvxhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mltensor_dz_on_xface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="1639" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="1639" bodyend="1687"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a489781d6bf07f39bcfb01554df8b70a4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mltensor_dz_on_yface</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dzi, Array4&lt; Real const &gt; const &amp;bvylo, Array4&lt; Real const &gt; const &amp;bvyhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mltensor_dz_on_yface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dzi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvyhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="1690" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="1690" bodyend="1738"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a83a54f1bb3bf386d9d108c441a3abd5a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mltensor_dx_on_zface</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dxi, Array4&lt; Real const &gt; const &amp;bvzlo, Array4&lt; Real const &gt; const &amp;bvzhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mltensor_dx_on_zface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="1741" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="1741" bodyend="1789"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4aa6643ceba8b1d5ba010cdf18bc7b86" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mltensor_dy_on_zface</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dyi, Array4&lt; Real const &gt; const &amp;bvzlo, Array4&lt; Real const &gt; const &amp;bvzhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mltensor_dy_on_zface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="1792" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="1792" bodyend="1840"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a411e8cac6bce709a0aa74b479fb31dec" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_cross_terms_fz</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;vel, Array4&lt; Real const &gt; const &amp;etaz, Array4&lt; Real const &gt; const &amp;kapz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Array4&lt; Real const &gt; const &amp;bvzlo, Array4&lt; Real const &gt; const &amp;bvzhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mltensor_cross_terms_fz</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>etaz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>kapz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="1919" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="1919" bodyend="1954"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab2cab819df733b89d0356224d626a877" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_cross_terms</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;fz, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real bscalar) noexcept</argsstring>
        <name>mltensor_cross_terms</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bscalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="1957" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="1957" bodyend="1986"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7336687a5c4493deb071aa4e4718a20c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_cross_terms_os</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;Ax, Array4&lt; Real const &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;fz, Array4&lt; int const &gt; const &amp;osm, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Real bscalar) noexcept</argsstring>
        <name>mltensor_cross_terms_os</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>Ax</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>bscalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="1989" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="1989" bodyend="2025"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae3d5f677bf29212444263b285b440852" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_vel_grads_fz</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;vel, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv) noexcept</argsstring>
        <name>mltensor_vel_grads_fz</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="2114" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="2114" bodyend="2154"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0e392612aae050357e634dfc868ffda6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mltensor_vel_grads_fz</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fz, Array4&lt; Real const &gt; const &amp;vel, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxinv, Array4&lt; Real const &gt; const &amp;bvzlo, Array4&lt; Real const &gt; const &amp;bvzhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mltensor_vel_grads_fz</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fz</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvzlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvzhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" line="2245" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_3D_K.H" bodystart="2245" bodyend="2286"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aed8a6ba3b38c4fc1abf2bc02d1ffb825" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mltensor_dy_on_xface</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dyi) noexcept</argsstring>
        <name>mltensor_dy_on_xface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_K.H" line="11" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_K.H" bodystart="11" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a19ff7b7195571fcdacb29c1c6d4c0665" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mltensor_dx_on_yface</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dxi) noexcept</argsstring>
        <name>mltensor_dx_on_yface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_K.H" line="17" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_K.H" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0b625a06eff5f521a23e7a462c1218a8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mltensor_dy_on_xface</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dyi, Array4&lt; Real const &gt; const &amp;bvxlo, Array4&lt; Real const &gt; const &amp;bvxhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mltensor_dy_on_xface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvxlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvxhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_K.H" line="23" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_K.H" bodystart="23" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1a721b95ca12909fdd1f2b0b733ff504" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Real amrex::mltensor_dx_on_yface</definition>
        <argsstring>(int i, int j, int k, int n, Array4&lt; Real const &gt; const &amp;vel, Real dxi, Array4&lt; Real const &gt; const &amp;bvylo, Array4&lt; Real const &gt; const &amp;bvyhi, Array2D&lt; BoundCond, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;bct, Dim3 const &amp;dlo, Dim3 const &amp;dhi) noexcept</argsstring>
        <name>mltensor_dx_on_yface</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>vel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvylo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>bvyhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref>, 0, 2 *AMREX_SPACEDIM, 0, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>bct</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>dhi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_K.H" line="74" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensor_K.H" bodystart="74" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa47fc757d0d25899f61d37329d2d5769" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename B</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_same&lt; std::remove_cv_t&lt; A &gt;, std::remove_cv_t&lt; B &gt; &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::isSame</definition>
        <argsstring>(A const *pa, B const *pb)</argsstring>
        <name>isSame</name>
        <param>
          <type>A const *</type>
          <declname>pa</declname>
        </param>
        <param>
          <type>B const *</type>
          <declname>pb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborList.H" line="232" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_NeighborList.H" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab612cdff7b506fd2884de82a842e95b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NReal</declname>
            <defname>NReal</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NInt</declname>
            <defname>NInt</defname>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Particle&lt; NReal, NInt &gt; &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; NReal, NInt &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="423" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="424" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a637e0edc81c99a33f11e048fa4f7fc09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NReal</declname>
            <defname>NReal</defname>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Particle&lt; NReal, 0 &gt; &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; NReal, 0 &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="445" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="446" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab4ab9b3e6200e633cbf452f97880f267" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NInt</declname>
            <defname>NInt</defname>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Particle&lt; 0, NInt &gt; &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; 0, NInt &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="464" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="465" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6ee44abe4e92e171a76c83cc8edfdec8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NReal</declname>
            <defname>NReal</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>int</type>
            <declname>NInt</declname>
            <defname>NInt</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Particle&lt; 0, 0 &gt; &amp;p)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; 0, 0 &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="483" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="484" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a00779f2a650345e29919bda485417d90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_deposit_cic</definition>
        <argsstring>(P const &amp;p, int nc, amrex::Array4&lt; amrex::Real &gt; const &amp;rho, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;plo, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;dxi)</argsstring>
        <name>amrex_deposit_cic</name>
        <param>
          <type>P const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; amrex::Real &gt; const &amp;</type>
          <declname>rho</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle_mod_K.H" line="14" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle_mod_K.H" bodystart="14" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab2c2bcf642851e4903e3c9449f857e14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_deposit_particle_dx_cic</definition>
        <argsstring>(P const &amp;p, int nc, amrex::Array4&lt; amrex::Real &gt; const &amp;rho, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;plo, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;dxi, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;pdxi)</argsstring>
        <name>amrex_deposit_particle_dx_cic</name>
        <param>
          <type>P const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; amrex::Real &gt; const &amp;</type>
          <declname>rho</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>pdxi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle_mod_K.H" line="109" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle_mod_K.H" bodystart="109" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa90dde62ffe45aa35b5dd015043019a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::amrex_interpolate_cic</definition>
        <argsstring>(P const &amp;p, int nc, amrex::Array4&lt; amrex::Real const &gt; const &amp;acc, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;plo, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;dxi)</argsstring>
        <name>amrex_interpolate_cic</name>
        <param>
          <type>P const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; amrex::Real const &gt; const &amp;</type>
          <declname>acc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle_mod_K.H" line="238" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle_mod_K.H" bodystart="238" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af4c8c19cb812cdbcc34bc408577bb25c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class Buffer</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value &amp;&amp;std::is_base_of&lt; PolymorphicArenaAllocator&lt; typename Buffer::value_type &gt;, Buffer &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::packBuffer</definition>
        <argsstring>(const PC &amp;pc, const ParticleCopyOp &amp;op, const ParticleCopyPlan &amp;plan, Buffer &amp;snd_buffer)</argsstring>
        <name>packBuffer</name>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleCopyOp" kindref="compound">ParticleCopyOp</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleCopyPlan" kindref="compound">ParticleCopyPlan</ref> &amp;</type>
          <declname>plan</declname>
        </param>
        <param>
          <type>Buffer &amp;</type>
          <declname>snd_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.H" line="291" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.H" bodystart="291" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a088b41cb8cc59ea2e3235669ca30b9b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class Buffer</type>
          </param>
          <param>
            <type>class UnpackPolicy</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::unpackBuffer</definition>
        <argsstring>(PC &amp;pc, const ParticleCopyPlan &amp;plan, const Buffer &amp;snd_buffer, const UnpackPolicy &amp;&amp;policy)</argsstring>
        <name>unpackBuffer</name>
        <param>
          <type>PC &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleCopyPlan" kindref="compound">ParticleCopyPlan</ref> &amp;</type>
          <declname>plan</declname>
        </param>
        <param>
          <type>const Buffer &amp;</type>
          <declname>snd_buffer</declname>
        </param>
        <param>
          <type>const UnpackPolicy &amp;&amp;</type>
          <declname>policy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.H" line="388" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.H" bodystart="388" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1798b9b2e1585609dcc68430ad8502e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class SndBuffer</type>
          </param>
          <param>
            <type>class RcvBuffer</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::communicateParticlesStart</definition>
        <argsstring>(const PC &amp;pc, ParticleCopyPlan &amp;plan, const SndBuffer &amp;snd_buffer, RcvBuffer &amp;rcv_buffer)</argsstring>
        <name>communicateParticlesStart</name>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1ParticleCopyPlan" kindref="compound">ParticleCopyPlan</ref> &amp;</type>
          <declname>plan</declname>
        </param>
        <param>
          <type>const SndBuffer &amp;</type>
          <declname>snd_buffer</declname>
        </param>
        <param>
          <type>RcvBuffer &amp;</type>
          <declname>rcv_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.H" line="453" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.H" bodystart="453" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a814322d519ae32014737504164a0516b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::communicateParticlesFinish</definition>
        <argsstring>(const ParticleCopyPlan &amp;plan)</argsstring>
        <name>communicateParticlesFinish</name>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleCopyPlan" kindref="compound">ParticleCopyPlan</ref> &amp;</type>
          <declname>plan</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.H" line="545" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.cpp" bodystart="370" bodyend="381" declfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.H" declline="545" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1dd1ea6c385ce3a863e1818566937e24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class Buffer</type>
          </param>
          <param>
            <type>class UnpackPolicy</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::unpackRemotes</definition>
        <argsstring>(PC &amp;pc, const ParticleCopyPlan &amp;plan, Buffer &amp;rcv_buffer, UnpackPolicy &amp;&amp;policy)</argsstring>
        <name>unpackRemotes</name>
        <param>
          <type>PC &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleCopyPlan" kindref="compound">ParticleCopyPlan</ref> &amp;</type>
          <declname>plan</declname>
        </param>
        <param>
          <type>Buffer &amp;</type>
          <declname>rcv_buffer</declname>
        </param>
        <param>
          <type>UnpackPolicy &amp;&amp;</type>
          <declname>policy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.H" line="549" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleCommunication.H" bodystart="549" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0f14d3e99332b7415aea27a0a5aeea8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class MF</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleToMesh</definition>
        <argsstring>(PC const &amp;pc, MF &amp;mf, int lev, F &amp;&amp;f, bool zero_out_input=true)</argsstring>
        <name>ParticleToMesh</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>zero_out_input</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMesh.H" line="14" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMesh.H" bodystart="14" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4263e1c84766d552c3e4dda3dadc9158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class MF</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::MeshToParticle</definition>
        <argsstring>(PC &amp;pc, MF const &amp;mf, int lev, F &amp;&amp;f)</argsstring>
        <name>MeshToParticle</name>
        <param>
          <type>PC &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMesh.H" line="99" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMesh.H" bodystart="99" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab0df509765624d623f31c61fecd40158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::CountSnds</definition>
        <argsstring>(const std::map&lt; int, Vector&lt; char &gt; &gt; &amp;not_ours, Vector&lt; Long &gt; &amp;Snds)</argsstring>
        <name>CountSnds</name>
        <param>
          <type>const std::map&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt; &gt; &amp;</type>
          <declname>not_ours</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Long &gt; &amp;</type>
          <declname>Snds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMPIUtil.cpp" line="11" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMPIUtil.cpp" bodystart="11" bodyend="23" declfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMPIUtil.H" declline="12" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a35dfdc6dc9e92b4e5ca271e72779f944" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::doHandShake</definition>
        <argsstring>(const std::map&lt; int, Vector&lt; char &gt; &gt; &amp;not_ours, Vector&lt; Long &gt; &amp;Snds, Vector&lt; Long &gt; &amp;Rcvs)</argsstring>
        <name>doHandShake</name>
        <param>
          <type>const std::map&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt; &gt; &amp;</type>
          <declname>not_ours</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Long &gt; &amp;</type>
          <declname>Snds</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Long &gt; &amp;</type>
          <declname>Rcvs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMPIUtil.cpp" line="25" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMPIUtil.cpp" bodystart="25" bodyend="48" declfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMPIUtil.H" declline="14" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a55d2a814fe7ad70c3e7af12cad0e7c87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::doHandShakeLocal</definition>
        <argsstring>(const std::map&lt; int, Vector&lt; char &gt; &gt; &amp;not_ours, const Vector&lt; int &gt; &amp;neighbor_procs, Vector&lt; Long &gt; &amp;Snds, Vector&lt; Long &gt; &amp;Rcvs)</argsstring>
        <name>doHandShakeLocal</name>
        <param>
          <type>const std::map&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt; &gt; &amp;</type>
          <declname>not_ours</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>neighbor_procs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Long &gt; &amp;</type>
          <declname>Snds</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Long &gt; &amp;</type>
          <declname>Rcvs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMPIUtil.cpp" line="50" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMPIUtil.cpp" bodystart="50" bodyend="94" declfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMPIUtil.H" declline="17" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4a0d7f39455f1fad5de147aa8cbf45a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::ReduceSum</definition>
        <argsstring>(PC const &amp;pc, F &amp;&amp;f) -&gt; decltype(particle_detail::call_f(f, typename PC::ParticleTileType::ConstParticleTileDataType(), int()))</argsstring>
        <name>ReduceSum</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates over all particles on all levels. </para>
        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;Sum&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para>
<para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable that operates on a single particle. Example forms: <verbatim>   using PType = typename PC::ParticleType;
   auto sm = amrex::ReduceSum(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PType&amp; p) -&gt; ParticleReal
             {
                 return p.rdata(0);
             });

   using SPType  = typename PC::SuperParticleType;
   auto sm = amrex::ReduceSum(pc,
             [=] AMREX_GPU_HOST_DEVICE (const SPType&amp; p) -&gt; int
             {
                 return p.idata(0);
             });

   using PTDType = typename PC::ParticleTileType::ConstParticleTileDataType;
   auto sm = amrex::ReduceSum(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PTDType&amp; ptd, const int i) -&gt; ParticleReal
             {
                 return ptd.m_aos[i].rdata(0);
             });
</verbatim> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="60" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afe943e0bac4c931ba74fcfb7e0fceb64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::ReduceSum</definition>
        <argsstring>(PC const &amp;pc, int lev, F &amp;&amp;f) -&gt; decltype(particle_detail::call_f(f, typename PC::ParticleTileType::ConstParticleTileDataType(), int()))</argsstring>
        <name>ReduceSum</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates only on the specified level. </para>
        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;Sum&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para>
<para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>the level to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable that operates on a single particle. Example forms: <verbatim>   using PType = typename PC::ParticleType;
   auto sm = amrex::ReduceSum(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PType&amp; p) -&gt; ParticleReal
             {
                 return p.rdata(0);
             });

   using SPType  = typename PC::SuperParticleType;
   auto sm = amrex::ReduceSum(pc,
             [=] AMREX_GPU_HOST_DEVICE (const SPType&amp; p) -&gt; int
             {
                 return p.idata(0);
             });

   using PTDType = typename PC::ParticleTileType::ConstParticleTileDataType;
   auto sm = amrex::ReduceSum(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PTDType&amp; ptd, const int i) -&gt; ParticleReal
             {
                 return ptd.m_aos[i].rdata(0);
             });
</verbatim> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="108" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="108" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6a4e13460f583730884202aa24ba165f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::ReduceSum</definition>
        <argsstring>(PC const &amp;pc, int lev_min, int lev_max, F &amp;&amp;f) -&gt; decltype(particle_detail::call_f(f, typename PC::ParticleTileType::ConstParticleTileDataType(), int()))</argsstring>
        <name>ReduceSum</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates from the specified lev_min to lev_max. </para>
        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;Sum&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para>
<para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum level to include </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum level to include </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable that operates on a single particle. Example forms: <verbatim>   using PType = typename PC::ParticleType;
   auto sm = amrex::ReduceSum(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PType&amp; p) -&gt; ParticleReal
             {
                 return p.rdata(0);
             });

   using SPType  = typename PC::SuperParticleType;
   auto sm = amrex::ReduceSum(pc,
             [=] AMREX_GPU_HOST_DEVICE (const SPType&amp; p) -&gt; int
             {
                 return p.idata(0);
             });

   using PTDType = typename PC::ParticleTileType::ConstParticleTileDataType;
   auto sm = amrex::ReduceSum(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PTDType&amp; ptd, const int i) -&gt; ParticleReal
             {
                 return ptd.m_aos[i].rdata(0);
             });
</verbatim> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="157" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="157" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afcc19ed59f5327a67f329b7745af5802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::ReduceMax</definition>
        <argsstring>(PC const &amp;pc, F &amp;&amp;f) -&gt; decltype(particle_detail::call_f(f, typename PC::ParticleTileType::ConstParticleTileDataType(), int()))</argsstring>
        <name>ReduceMax</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates over all particles on all levels. </para>
        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;Max&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para>
<para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable that operates on a single particle. Example forms: <verbatim>   using PType = typename PC::ParticleType;
   auto mx = amrex::ReduceMax(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PType&amp; p) -&gt; ParticleReal
             {
                 return p.rdata(0);
             });

   using SPType  = typename PC::SuperParticleType;
   auto mx = amrex::ReduceMax(pc,
             [=] AMREX_GPU_HOST_DEVICE (const SPType&amp; p) -&gt; int
             {
                 return p.idata(0);
             });

   using PTDType = typename PC::ParticleTileType::ConstParticleTileDataType;
   auto mx = amrex::ReduceMax(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PTDType&amp; ptd, const int i) -&gt; ParticleReal
             {
                 return ptd.m_aos[i].rdata(0);
             });
</verbatim> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="260" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="260" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a372810a65569e56565a9bb33254184bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::ReduceMax</definition>
        <argsstring>(PC const &amp;pc, int lev, F &amp;&amp;f) -&gt; decltype(particle_detail::call_f(f, typename PC::ParticleTileType::ConstParticleTileDataType(), int()))</argsstring>
        <name>ReduceMax</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates only on the specified level. </para>
        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;Mas&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para>
<para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>the level to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable that operates on a single particle. Example forms: <verbatim>   using PType = typename PC::ParticleType;
   auto mx = amrex::ReduceMax(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PType&amp; p) -&gt; ParticleReal
             {
                 return p.rdata(0);
             });

   using SPType  = typename PC::SuperParticleType;
   auto mx = amrex::ReduceMax(pc,
             [=] AMREX_GPU_HOST_DEVICE (const SPType&amp; p) -&gt; int
             {
                 return p.idata(0);
             });

   using PTDType = typename PC::ParticleTileType::ConstParticleTileDataType;
   auto mx = amrex::ReduceMax(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PTDType&amp; ptd, const int i) -&gt; ParticleReal
             {
                 return ptd.m_aos[i].rdata(0);
             });
</verbatim> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="308" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="308" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2a143a183f01010f7f57ca6025fc0b81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::ReduceMax</definition>
        <argsstring>(PC const &amp;pc, int lev_min, int lev_max, F &amp;&amp;f) -&gt; decltype(particle_detail::call_f(f, typename PC::ParticleTileType::ConstParticleTileDataType(), int()))</argsstring>
        <name>ReduceMax</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates from the specified lev_min to lev_max. </para>
        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;Max&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para>
<para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum level to include </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum level to include </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable that operates on a single particle. Example forms: <verbatim>   using PType = typename PC::ParticleType;
   auto mx = amrex::ReduceMax(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PType&amp; p) -&gt; ParticleReal
             {
                 return p.rdata(0);
             });

   using SPType  = typename PC::SuperParticleType;
   auto mx = amrex::ReduceMax(pc,
             [=] AMREX_GPU_HOST_DEVICE (const SPType&amp; p) -&gt; int
             {
                 return p.idata(0);
             });

   using PTDType = typename PC::ParticleTileType::ConstParticleTileDataType;
   auto mx = amrex::ReduceMax(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PTDType&amp; ptd, const int i) -&gt; ParticleReal
             {
                 return ptd.m_aos[i].rdata(0);
             });
</verbatim> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="357" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="357" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a23f8188bafacc115d2cfd1dfcda0db65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::ReduceMin</definition>
        <argsstring>(PC const &amp;pc, F &amp;&amp;f) -&gt; decltype(particle_detail::call_f(f, typename PC::ParticleTileType::ConstParticleTileDataType(), int()))</argsstring>
        <name>ReduceMin</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates over all particles on all levels. </para>
        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;Min&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para>
<para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable that operates on a single particle. Example forms: <verbatim>   using PType = typename PC::ParticleType;
   auto mn = amrex::ReduceMin(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PType&amp; p) -&gt; ParticleReal
             {
                 return p.rdata(0);
             });

   using SPType  = typename PC::SuperParticleType;
   auto mn = amrex::ReduceMin(pc,
             [=] AMREX_GPU_HOST_DEVICE (const SPType&amp; p) -&gt; int
             {
                 return p.idata(0);
             });

   using PTDType = typename PC::ParticleTileType::ConstParticleTileDataType;
   auto mn = amrex::ReduceMin(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PTDType&amp; ptd, const int i) -&gt; ParticleReal
             {
                 return ptd.m_aos[i].rdata(0);
             });
</verbatim> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="461" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="461" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af6e2c75c0f4c085c615019cbd2f7fe94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::ReduceMin</definition>
        <argsstring>(PC const &amp;pc, int lev, F &amp;&amp;f) -&gt; decltype(particle_detail::call_f(f, typename PC::ParticleTileType::ConstParticleTileDataType(), int()))</argsstring>
        <name>ReduceMin</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates only on the specified level. </para>
        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;Min&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para>
<para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>the level to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable that operates on a single particle. Example forms: <verbatim>   using PType = typename PC::ParticleType;
   auto mn = amrex::ReduceMin(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PType&amp; p) -&gt; ParticleReal
             {
                 return p.rdata(0);
             });

   using SPType  = typename PC::SuperParticleType;
   auto mn = amrex::ReduceMin(pc,
             [=] AMREX_GPU_HOST_DEVICE (const SPType&amp; p) -&gt; int
             {
                 return p.idata(0);
             });

   using PTDType = typename PC::ParticleTileType::ConstParticleTileDataType;
   auto mn = amrex::ReduceMin(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PTDType&amp; ptd, const int i) -&gt; ParticleReal
             {
                 return ptd.m_aos[i].rdata(0);
             });
</verbatim> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="509" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="509" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8d2f558353675dae0aa185f137d8e0ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::ReduceMin</definition>
        <argsstring>(PC const &amp;pc, int lev_min, int lev_max, F &amp;&amp;f) -&gt; decltype(particle_detail::call_f(f, typename PC::ParticleTileType::ConstParticleTileDataType(), int()))</argsstring>
        <name>ReduceMin</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates from the specified lev_min to lev_max. </para>
        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;Min&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para>
<para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum level to include </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum level to include </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable that operates on a single particle. Example forms: <verbatim>   using PType = typename PC::ParticleType;
   auto mn = amrex::ReduceMin(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PType&amp; p) -&gt; ParticleReal
             {
                 return p.rdata(0);
             });

   using SPType  = typename PC::SuperParticleType;
   auto mn = amrex::ReduceMin(pc,
             [=] AMREX_GPU_HOST_DEVICE (const SPType&amp; p) -&gt; int
             {
                 return p.idata(0);
             });

   using PTDType = typename PC::ParticleTileType::ConstParticleTileDataType;
   auto mn = amrex::ReduceMin(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PTDType&amp; ptd, const int i) -&gt; ParticleReal
             {
                 return ptd.m_aos[i].rdata(0);
             });
</verbatim> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="558" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="558" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa175f510a09bbc1252a4e1b8f3ac5250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalAnd</definition>
        <argsstring>(PC const &amp;pc, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates over all particles on all levels. </para>
        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;LogicalAnd&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para>
<para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable that operates on a single particle. Example forms: <verbatim>   using PType = typename PC::ParticleType;
   auto rv = amrex::ReduceLogicalAnd(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PType&amp; p) -&gt; bool
             {
                 return p.id() &gt; 0;
             });

   using SPType  = typename PC::SuperParticleType;
   auto rv = amrex::ReduceLogicalAnd(pc,
             [=] AMREX_GPU_HOST_DEVICE (const SPType&amp; p) -&gt; bool
             {
                 return p.id() &gt; 0;
             });

   using PTDType = typename PC::ParticleTileType::ConstParticleTileDataType;
   auto rv = amrex::ReduceLogicalAnd(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PTDType&amp; ptd, const int i) -&gt; bool
             {
                 return ptd.m_aos[i].id() &gt; 0;
             });
</verbatim> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="662" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="662" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2e4d86e52a629511e02bff646ca60b59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalAnd</definition>
        <argsstring>(PC const &amp;pc, int lev, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates only on the specified level. </para>
        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;LogicalAnd&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para>
<para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>the level to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable that operates on a single particle. Example forms: <verbatim>   using PType = typename PC::ParticleType;
   auto rv = amrex::ReduceLogicalAnd(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PType&amp; p) -&gt; bool
             {
                 return p.id() &gt; 0;
             });

   using SPType  = typename PC::SuperParticleType;
   auto rv = amrex::ReduceLogicalAnd(pc,
             [=] AMREX_GPU_HOST_DEVICE (const SPType&amp; p) -&gt; bool
             {
                 return p.id() &gt; 0;
             });

   using PTDType = typename PC::ParticleTileType::ConstParticleTileDataType;
   auto rv = amrex::ReduceLogicalAnd(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PTDType&amp; ptd, const int i) -&gt; bool
             {
                 return ptd.m_aos[i].id() &gt; 0;
             });
</verbatim> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="709" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="709" bodyend="712"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a14d08a69d1ad19e5499277055d469400" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalAnd</definition>
        <argsstring>(PC const &amp;pc, int lev_min, int lev_max, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates from the specified lev_min to lev_max. </para>
        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;LogicalAnd&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para>
<para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum level to include </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum level to include </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable that operates on a single particle. Example forms: <verbatim>   using PType = typename PC::ParticleType;
   auto rv = amrex::ReduceLogicalAnd(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PType&amp; p) -&gt; bool
             {
                 return p.id() &gt; 0;
             });

   using SPType  = typename PC::SuperParticleType;
   auto rv = amrex::ReduceLogicalAnd(pc,
             [=] AMREX_GPU_HOST_DEVICE (const SPType&amp; p) -&gt; bool
             {
                 return p.id() &gt; 0;
             });

   using PTDType = typename PC::ParticleTileType::ConstParticleTileDataType;
   auto rv = amrex::ReduceLogicalAnd(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PTDType&amp; ptd, const int i) -&gt; bool
             {
                 return ptd.m_aos[i].id() &gt; 0;
             });
</verbatim> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="757" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="757" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a43f13583043013b5751afe1e193cc8b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalOr</definition>
        <argsstring>(PC const &amp;pc, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates over all particles on all levels. </para>
        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;LogicalOr&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para>
<para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable that operates on a single particle. Example forms: <verbatim>   using PType = typename PC::ParticleType;
   auto rv = amrex::ReduceLogicalOr(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PType&amp; p) -&gt; bool
             {
                 return p.id() &lt; 1;
             });

   using SPType  = typename PC::SuperParticleType;
   auto rv = amrex::ReduceLogicalOr(pc,
             [=] AMREX_GPU_HOST_DEVICE (const SPType&amp; p) -&gt; bool
             {
                 return p.id() &lt; 1;
             });

   using PTDType = typename PC::ParticleTileType::ConstParticleTileDataType;
   auto rv = amrex::ReduceLogicalOr(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PTDType&amp; ptd, const int i) -&gt; bool
             {
                 return ptd.m_aos[i].id() &lt; 1;
             });
</verbatim> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="858" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="858" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a18f76938d120a4d9891cc99e67cab771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalOr</definition>
        <argsstring>(PC const &amp;pc, int lev, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates only on the specified level. </para>
        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;LogicalOr&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para>
<para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>the level to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable that operates on a single particle. Example forms: <verbatim>   using PType = typename PC::ParticleType;
   auto rv = amrex::ReduceLogicalOr(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PType&amp; p) -&gt; bool
             {
                 return p.id() &lt; 1;
             });

   using SPType  = typename PC::SuperParticleType;
   auto rv = amrex::ReduceLogicalOr(pc,
             [=] AMREX_GPU_HOST_DEVICE (const SPType&amp; p) -&gt; bool
             {
                 return p.id() &lt; 1;
             });

   using PTDType = typename PC::ParticleTileType::ConstParticleTileDataType;
   auto rv = amrex::ReduceLogicalOr(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PTDType&amp; ptd, const int i) -&gt; bool
             {
                 return ptd.m_aos[i].id() &lt; 1;
             });
</verbatim> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="905" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="905" bodyend="908"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4045ba476918bce64dc92d94e4cda26d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ReduceLogicalOr</definition>
        <argsstring>(PC const &amp;pc, int lev_min, int lev_max, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates from the specified lev_min to lev_max. </para>
        </briefdescription>
        <detaileddescription>
<para>This version uses &quot;LogicalOr&quot; as the reduction operation. The quantity reduced over is an arbitrary function of a &quot;superparticle&quot;, which contains all the data in the particle type, whether it is stored in AoS or SoA form.</para>
<para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum level to include </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum level to include </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable that operates on a single particle. Example forms: <verbatim>   using PType = typename PC::ParticleType;
   auto rv = amrex::ReduceLogicalOr(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PType&amp; p) -&gt; bool
             {
                 return p.id() &lt; 1;
             });

   using SPType  = typename PC::SuperParticleType;
   auto rv = amrex::ReduceLogicalOr(pc,
             [=] AMREX_GPU_HOST_DEVICE (const SPType&amp; p) -&gt; bool
             {
                 return p.id() &lt; 1;
             });

   using PTDType = typename PC::ParticleTileType::ConstParticleTileDataType;
   auto rv = amrex::ReduceLogicalOr(pc,
             [=] AMREX_GPU_HOST_DEVICE (const PTDType&amp; ptd, const int i) -&gt; bool
             {
                 return ptd.m_aos[i].id() &lt; 1;
             });
</verbatim> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="953" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="953" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8d32380d1bccbedf1b24bd2c1bb7a1da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RD</type>
          </param>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class ReduceOps</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>RD::Type</type>
        <definition>RD::Type amrex::ParticleReduce</definition>
        <argsstring>(PC const &amp;pc, F &amp;&amp;f, ReduceOps &amp;reduce_ops)</argsstring>
        <name>ParticleReduce</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1ReduceOps" kindref="compound">ReduceOps</ref> &amp;</type>
          <declname>reduce_ops</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates over all particles on all levels. </para>
        </briefdescription>
        <detaileddescription>
<para>This version can operate on a <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref> worth of data at once. It also takes an arbitrary tuple of reduction operators.</para>
<para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para>
<para>Unlike the other reduction functions in this file, this version does not respect the Gpu::launchRegion flag. If <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> is built with GPU support, this reduction will always be done on the device.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RD</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="classamrex_1_1ReduceData" kindref="compound">amrex::ReduceData</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classamrex_1_1ReduceOps" kindref="compound">ReduceOps</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classamrex_1_1ReduceOps" kindref="compound">ReduceOps</ref> type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable that operates on a single particle, see below for example forms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduce_ops</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the reduction operations for each tuple element</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example usage: using PType = typename PC::ParticleType; amrex::ReduceOps&lt;ReduceOpSum, ReduceOpMin, ReduceOpMax&gt; reduce_ops; auto r = <ref refid="namespaceamrex_1a8d32380d1bccbedf1b24bd2c1bb7a1da" kindref="member">amrex::ParticleReduce</ref>&lt;ReduceData&lt;amrex::Real, amrex::Real,int&gt;&gt; ( pc, [=] AMREX_GPU_DEVICE (const PType&amp; p) noexcept -&gt; amrex::GpuTuple&lt;amrex::Real,amrex::Real,int&gt; { const amrex::Real a = p.rdata(1); const amrex::Real b = p.rdata(2); const int c = p.idata(1); return {a, b, c}; }, reduce_ops);</para>
<para>using SPType = typename PC::SuperParticleType; amrex::ReduceOps&lt;ReduceOpSum, ReduceOpMin, ReduceOpMax&gt; reduce_ops; auto r = <ref refid="namespaceamrex_1a8d32380d1bccbedf1b24bd2c1bb7a1da" kindref="member">amrex::ParticleReduce</ref>&lt;ReduceData&lt;amrex::Real, amrex::Real,int&gt;&gt; ( pc, [=] AMREX_GPU_DEVICE (const SPType&amp; p) noexcept -&gt; amrex::GpuTuple&lt;amrex::Real,amrex::Real,int&gt; { const amrex::Real a = p.rdata(1); const amrex::Real b = p.rdata(2); const int c = p.idata(1); return {a, b, c}; }, reduce_ops);</para>
<para>using PTDType = typename PC::ParticleTileType::ConstParticleTileDataType; amrex::ReduceOps&lt;ReduceOpSum, ReduceOpMin, ReduceOpMax&gt; reduce_ops; auto r = <ref refid="namespaceamrex_1a8d32380d1bccbedf1b24bd2c1bb7a1da" kindref="member">amrex::ParticleReduce</ref>&lt;ReduceData&lt;amrex::Real, amrex::Real,int&gt;&gt; ( pc, [=] AMREX_GPU_DEVICE (const PTDType&amp; ptd, const int i) noexcept -&gt; amrex::GpuTuple&lt;amrex::Real,amrex::Real,int&gt; { const amrex::Real a = ptd.m_aos[i].rdata(1); const amrex::Real b = ptd.m_aos[i].rdata(2); const int c = ptd.m_aos[i].idata(1); return {a, b, c}; }, reduce_ops); </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="1078" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="1078" bodyend="1081"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af42436c4813e6fedd6dd7a5c73581b63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RD</type>
          </param>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class ReduceOps</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>RD::Type</type>
        <definition>RD::Type amrex::ParticleReduce</definition>
        <argsstring>(PC const &amp;pc, int lev, F &amp;&amp;f, ReduceOps &amp;reduce_ops)</argsstring>
        <name>ParticleReduce</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1ReduceOps" kindref="compound">ReduceOps</ref> &amp;</type>
          <declname>reduce_ops</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates only on the specified level. </para>
        </briefdescription>
        <detaileddescription>
<para>This version can operate on a <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref> worth of data at once. It also takes an arbitrary tuple of reduction operators.</para>
<para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para>
<para>Unlike the other reduction functions in this file, this version does not respect the Gpu::launchRegion flag. If <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> is built with GPU support, this reduction will always be done on the device.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RD</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="classamrex_1_1ReduceData" kindref="compound">amrex::ReduceData</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classamrex_1_1ReduceOps" kindref="compound">ReduceOps</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classamrex_1_1ReduceOps" kindref="compound">ReduceOps</ref> type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>the level to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable that operates on a single particle, see below for example forms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduce_ops</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the reduction operations for each tuple element</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example usage: using PType = typename PC::ParticleType; amrex::ReduceOps&lt;ReduceOpSum, ReduceOpMin, ReduceOpMax&gt; reduce_ops; auto r = <ref refid="namespaceamrex_1a8d32380d1bccbedf1b24bd2c1bb7a1da" kindref="member">amrex::ParticleReduce</ref>&lt;ReduceData&lt;amrex::Real, amrex::Real,int&gt;&gt; ( pc, [=] AMREX_GPU_DEVICE (const PType&amp; p) noexcept -&gt; amrex::GpuTuple&lt;amrex::Real,amrex::Real,int&gt; { const amrex::Real a = p.rdata(1); const amrex::Real b = p.rdata(2); const int c = p.idata(1); return {a, b, c}; }, reduce_ops);</para>
<para>using SPType = typename PC::SuperParticleType; amrex::ReduceOps&lt;ReduceOpSum, ReduceOpMin, ReduceOpMax&gt; reduce_ops; auto r = <ref refid="namespaceamrex_1a8d32380d1bccbedf1b24bd2c1bb7a1da" kindref="member">amrex::ParticleReduce</ref>&lt;ReduceData&lt;amrex::Real, amrex::Real,int&gt;&gt; ( pc, [=] AMREX_GPU_DEVICE (const SPType&amp; p) noexcept -&gt; amrex::GpuTuple&lt;amrex::Real,amrex::Real,int&gt; { const amrex::Real a = p.rdata(1); const amrex::Real b = p.rdata(2); const int c = p.idata(1); return {a, b, c}; }, reduce_ops);</para>
<para>using PTDType = typename PC::ParticleTileType::ConstParticleTileDataType; amrex::ReduceOps&lt;ReduceOpSum, ReduceOpMin, ReduceOpMax&gt; reduce_ops; auto r = <ref refid="namespaceamrex_1a8d32380d1bccbedf1b24bd2c1bb7a1da" kindref="member">amrex::ParticleReduce</ref>&lt;ReduceData&lt;amrex::Real, amrex::Real,int&gt;&gt; ( pc, [=] AMREX_GPU_DEVICE (const PTDType&amp; ptd, const int i) noexcept -&gt; amrex::GpuTuple&lt;amrex::Real,amrex::Real,int&gt; { const amrex::Real a = ptd.m_aos[i].rdata(1); const amrex::Real b = ptd.m_aos[i].rdata(2); const int c = ptd.m_aos[i].idata(1); return {a, b, c}; }, reduce_ops); </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="1148" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="1148" bodyend="1151"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1abd99345bb2a77ab8b210256686079d4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RD</type>
          </param>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class ReduceOps</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>RD::Type</type>
        <definition>RD::Type amrex::ParticleReduce</definition>
        <argsstring>(PC const &amp;pc, int lev_min, int lev_max, F &amp;&amp;f, ReduceOps &amp;reduce_ops)</argsstring>
        <name>ParticleReduce</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1ReduceOps" kindref="compound">ReduceOps</ref> &amp;</type>
          <declname>reduce_ops</declname>
        </param>
        <briefdescription>
<para>A general reduction method for the particles in a <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> that can run on either CPUs or GPUs. This version operates from the specified lev_min to lev_max. </para>
        </briefdescription>
        <detaileddescription>
<para>This version can operate on a <ref refid="classamrex_1_1GpuTuple" kindref="compound">GpuTuple</ref> worth of data at once. It also takes an arbitrary tuple of reduction operators.</para>
<para>Note that there is no MPI reduction performed at the end of this operation. Users should manually call the MPI reduction operations described in <ref refid="namespaceamrex_1_1ParallelDescriptor" kindref="compound">ParallelDescriptor</ref> if they want that behavior.</para>
<para>Unlike the other reduction functions in this file, this version does not respect the Gpu::launchRegion flag. If <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> is built with GPU support, this reduction will always be done on the device.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RD</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="classamrex_1_1ReduceData" kindref="compound">amrex::ReduceData</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="classamrex_1_1ReduceOps" kindref="compound">ReduceOps</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classamrex_1_1ReduceOps" kindref="compound">ReduceOps</ref> type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> to operate on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum level to include </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum level to include </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable that operates on a single particle, see below for example forms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reduce_ops</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the reduction operations for each tuple element</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Example usage: using PType = typename PC::ParticleType; amrex::ReduceOps&lt;ReduceOpSum, ReduceOpMin, ReduceOpMax&gt; reduce_ops; auto r = <ref refid="namespaceamrex_1a8d32380d1bccbedf1b24bd2c1bb7a1da" kindref="member">amrex::ParticleReduce</ref>&lt;ReduceData&lt;amrex::Real, amrex::Real,int&gt;&gt; ( pc, [=] AMREX_GPU_DEVICE (const PType&amp; p) noexcept -&gt; amrex::GpuTuple&lt;amrex::Real,amrex::Real,int&gt; { const amrex::Real a = p.rdata(1); const amrex::Real b = p.rdata(2); const int c = p.idata(1); return {a, b, c}; }, reduce_ops);</para>
<para>using SPType = typename PC::SuperParticleType; amrex::ReduceOps&lt;ReduceOpSum, ReduceOpMin, ReduceOpMax&gt; reduce_ops; auto r = <ref refid="namespaceamrex_1a8d32380d1bccbedf1b24bd2c1bb7a1da" kindref="member">amrex::ParticleReduce</ref>&lt;ReduceData&lt;amrex::Real, amrex::Real,int&gt;&gt; ( pc, [=] AMREX_GPU_DEVICE (const SPType&amp; p) noexcept -&gt; amrex::GpuTuple&lt;amrex::Real,amrex::Real,int&gt; { const amrex::Real a = p.rdata(1); const amrex::Real b = p.rdata(2); const int c = p.idata(1); return {a, b, c}; }, reduce_ops);</para>
<para>using PTDType = typename PC::ParticleTileType::ConstParticleTileDataType; amrex::ReduceOps&lt;ReduceOpSum, ReduceOpMin, ReduceOpMax&gt; reduce_ops; auto r = <ref refid="namespaceamrex_1a8d32380d1bccbedf1b24bd2c1bb7a1da" kindref="member">amrex::ParticleReduce</ref>&lt;ReduceData&lt;amrex::Real, amrex::Real,int&gt;&gt; ( pc, [=] AMREX_GPU_DEVICE (const PTDType&amp; ptd, const int i) noexcept -&gt; amrex::GpuTuple&lt;amrex::Real,amrex::Real,int&gt; { const amrex::Real a = ptd.m_aos[i].rdata(1); const amrex::Real b = ptd.m_aos[i].rdata(2); const int c = ptd.m_aos[i].idata(1); return {a, b, c}; }, reduce_ops); </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="1219" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="1219" bodyend="1247"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9f2c65531307840edc2c376e273a2dcd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NSR</declname>
            <defname>NSR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NSI</declname>
            <defname>NSI</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAR</declname>
            <defname>NAR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAI</declname>
            <defname>NAI</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::copyParticle</definition>
        <argsstring>(const ParticleTileData&lt; NSR, NSI, NAR, NAI &gt; &amp;dst, const ConstParticleTileData&lt; NSR, NSI, NAR, NAI &gt; &amp;src, int src_i, int dst_i) noexcept</argsstring>
        <name>copyParticle</name>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleTileData" kindref="compound">ParticleTileData</ref>&lt; NSR, NSI, NAR, NAI &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ConstParticleTileData" kindref="compound">ConstParticleTileData</ref>&lt; NSR, NSI, NAR, NAI &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_i</declname>
        </param>
        <briefdescription>
<para>A general single particle copying routine that can run on the GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NSR</parametername>
</parameternamelist>
<parameterdescription>
<para>number of extra reals in the particle struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NSI</parametername>
</parameternamelist>
<parameterdescription>
<para>number of extra ints in the particle struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NAR</parametername>
</parameternamelist>
<parameterdescription>
<para>number of reals in the struct-of-arrays </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NAI</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ints in the struct-of-arrays</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the source to read from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the destination to write to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="31" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="31" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab7eeeee82fa57fd0fae0bd9bbcd4d3b7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NSR</declname>
            <defname>NSR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NSI</declname>
            <defname>NSI</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAR</declname>
            <defname>NAR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAI</declname>
            <defname>NAI</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::copyParticle</definition>
        <argsstring>(const ParticleTileData&lt; NSR, NSI, NAR, NAI &gt; &amp;dst, const ParticleTileData&lt; NSR, NSI, NAR, NAI &gt; &amp;src, int src_i, int dst_i) noexcept</argsstring>
        <name>copyParticle</name>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleTileData" kindref="compound">ParticleTileData</ref>&lt; NSR, NSI, NAR, NAI &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleTileData" kindref="compound">ParticleTileData</ref>&lt; NSR, NSI, NAR, NAI &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_i</declname>
        </param>
        <briefdescription>
<para>A general single particle copying routine that can run on the GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NSR</parametername>
</parameternamelist>
<parameterdescription>
<para>number of extra reals in the particle struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NSI</parametername>
</parameternamelist>
<parameterdescription>
<para>number of extra ints in the particle struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NAR</parametername>
</parameternamelist>
<parameterdescription>
<para>number of reals in the struct-of-arrays </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NAI</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ints in the struct-of-arrays</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the source to read from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the destination to write to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="65" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="65" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a65613a845224d7424cd18dfd602f1f49" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>NSR</declname>
            <defname>NSR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NSI</declname>
            <defname>NSI</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAR</declname>
            <defname>NAR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAI</declname>
            <defname>NAI</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::swapParticle</definition>
        <argsstring>(const ParticleTileData&lt; NSR, NSI, NAR, NAI &gt; &amp;dst, const ParticleTileData&lt; NSR, NSI, NAR, NAI &gt; &amp;src, int src_i, int dst_i) noexcept</argsstring>
        <name>swapParticle</name>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleTileData" kindref="compound">ParticleTileData</ref>&lt; NSR, NSI, NAR, NAI &gt; &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleTileData" kindref="compound">ParticleTileData</ref>&lt; NSR, NSI, NAR, NAI &gt; &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_i</declname>
        </param>
        <briefdescription>
<para>A general single particle swapping routine that can run on the GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NSR</parametername>
</parameternamelist>
<parameterdescription>
<para>number of extra reals in the particle struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NSI</parametername>
</parameternamelist>
<parameterdescription>
<para>number of extra ints in the particle struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NAR</parametername>
</parameternamelist>
<parameterdescription>
<para>number of reals in the struct-of-arrays </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NAI</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ints in the struct-of-arrays</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the source to read from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index in the destination to write to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="99" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="99" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2c694692aaba3c4e23ab3067eab1ba44" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::copyParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src) noexcept</argsstring>
        <name>copyParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const SrcTile &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Copy particles from src to dst. This version copies all the particles, writing them to the beginning of dst. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function that will be applied to each particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="130" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="130" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aebeffed6a37edc4d909acc6ab5cbbe83" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_integral&lt; Index &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::copyParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src, Index src_start, Index dst_start, N n) noexcept</argsstring>
        <name>copyParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const SrcTile &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>src_start</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>dst_start</declname>
        </param>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Copy particles from src to dst. This version copies n particles starting at index src_start, writing the result starting at dst_start. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index type, e.g. unsigned int </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the size type, e.g. Long</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start reading particles from src </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start writing particles to dst </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of particles to write </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="154" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="154" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae03ee3a195d7ee3ebcb19d20f9fdce73" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::transformParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src, F &amp;&amp;f) noexcept</argsstring>
        <name>transformParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const SrcTile &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Apply the function f to all the particles in src, writing the result to dst. This version does all the particles in src. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function that will be applied to each particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="182" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="182" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa97130d61a81b34078846228e608f149" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_integral&lt; Index &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::transformParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src, Index src_start, Index dst_start, N n, F &amp;&amp;f) noexcept</argsstring>
        <name>transformParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const SrcTile &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>src_start</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>dst_start</declname>
        </param>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Apply the function f to particles in src, writing the result to dst. This version applies the function to n particles starting at index src_start, writing the result starting at dst_start. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index type, e.g. unsigned int </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the size type, e.g. Long </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start reading particles from src </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start writing particles to dst </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function that will be applied to each particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="208" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="208" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5926a5d20c4f511675c02ec18cc7c87a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile1</type>
          </param>
          <param>
            <type>typename DstTile2</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::transformParticles</definition>
        <argsstring>(DstTile1 &amp;dst1, DstTile2 &amp;dst2, const SrcTile &amp;src, F &amp;&amp;f) noexcept</argsstring>
        <name>transformParticles</name>
        <param>
          <type>DstTile1 &amp;</type>
          <declname>dst1</declname>
        </param>
        <param>
          <type>DstTile2 &amp;</type>
          <declname>dst2</declname>
        </param>
        <param>
          <type>const SrcTile &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Apply the function f to all the particles in src, writing the results to dst1 and dst2. This version does all the particles in src. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile1</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst1 particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DstTile2</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst2 particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function that will be applied to each particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="238" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="238" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2a36a54f57606736a70a2ca6ce223ede" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile1</type>
          </param>
          <param>
            <type>typename DstTile2</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_integral&lt; Index &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::transformParticles</definition>
        <argsstring>(DstTile1 &amp;dst1, DstTile2 &amp;dst2, const SrcTile &amp;src, Index src_start, Index dst1_start, Index dst2_start, N n, F &amp;&amp;f) noexcept</argsstring>
        <name>transformParticles</name>
        <param>
          <type>DstTile1 &amp;</type>
          <declname>dst1</declname>
        </param>
        <param>
          <type>DstTile2 &amp;</type>
          <declname>dst2</declname>
        </param>
        <param>
          <type>const SrcTile &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>src_start</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>dst1_start</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>dst2_start</declname>
        </param>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Apply the function f to particles in src, writing the results to dst1 and dst2. This version applies the function to n particles starting at index src_start, writing the result starting at dst1_start and dst2_start. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile1</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst1 particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DstTile2</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst2 particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index type, e.g. unsigned int </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the size type, e.g. Long </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start reading particles from src </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst1_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start writing particles to dst1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst2_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start writing particles to dst2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the function that will be applied to each particle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="268" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="268" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a86fc8a08b6a63681e7751ac0b20bd96b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_integral&lt; Index &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>Index</type>
        <definition>Index amrex::filterParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src, const Index *mask) noexcept</argsstring>
        <name>filterParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const SrcTile &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const Index *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Conditionally copy particles from src to dst based on the value of mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index type, e.g. unsigned int</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the mask - 1 means copy, 0 means don&apos;t copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="297" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a0484051ab2f4dc9ebed16cb4f0ca2817" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_integral&lt; Index &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>Index</type>
        <definition>Index amrex::filterParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src, const Index *mask, Index src_start, Index dst_start, N n) noexcept</argsstring>
        <name>filterParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const SrcTile &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const Index *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>src_start</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>dst_start</declname>
        </param>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Conditionally copy particles from src to dst based on the value of mask. This version conditionally copies n particles starting at index src_start, writing the result starting at dst_start. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index type, e.g. unsigned int</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the mask - 1 means copy, 0 means don&apos;t copy </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start reading particles from src </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start writing particles to dst </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of particles to apply the operation to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="321" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="321" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a76b4c1f109d3d88013b6c85d8a3f40e8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Pred</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::filterParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src, Pred &amp;&amp;p) noexcept</argsstring>
        <name>filterParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const SrcTile &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Pred &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Conditionally copy particles from src to dst based on a predicate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Pred</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function - particles will be copied if p returns true </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="358" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="358" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a4b027b1592e100be6d4fbd56d59cefc5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Pred</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::filterParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src, Pred &amp;&amp;p, Index src_start, Index dst_start, N n) noexcept -&gt; decltype(Index(particle_detail::call_f(p, typename SrcTile::ConstParticleTileDataType(), int{}, RandomEngine{})))</argsstring>
        <name>filterParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const SrcTile &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Pred &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>src_start</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>dst_start</declname>
        </param>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Conditionally copy particles from src to dst based on a predicate. This version conditionally copies n particles starting at index src_start, writing the result starting at dst_start. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Pred</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function - particles will be copied if p returns true </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start reading particles from src </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start writing particles to dst </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of particles to apply the operation to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="381" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="381" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a665a9dd82810a77950950005d64f5f46" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_integral&lt; Index &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>Index</type>
        <definition>Index amrex::filterAndTransformParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src, Index *mask, F &amp;&amp;f, Index src_start, Index dst_start) noexcept</argsstring>
        <name>filterAndTransformParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const SrcTile &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Index *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>src_start</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>dst_start</declname>
        </param>
        <briefdescription>
<para>Conditionally copy particles from src to dst based on the value of mask. A transformation will also be applied to the particles on copy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index type, e.g. unsigned int </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>the transform function type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the mask - 1 means copy, 0 means don&apos;t copy </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the transformation that will be applied to the particles on copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="415" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="415" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af6ec82174b9e85180e43d20c64b52b26" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_integral&lt; Index &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>Index</type>
        <definition>Index amrex::filterAndTransformParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src, Index *mask, F &amp;&amp;f) noexcept</argsstring>
        <name>filterAndTransformParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const SrcTile &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Index *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Conditionally copy particles from src to dst based on the value of mask. A transformation will also be applied to the particles on copy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index type, e.g. unsigned int </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>the transform function type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the mask - 1 means copy, 0 means don&apos;t copy </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the transformation that will be applied to the particles on copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="458" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="458" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1afaaa33ba34ceb3b3c91f10a7c61227ae" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Pred</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::filterAndTransformParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src, Pred &amp;&amp;p, F &amp;&amp;f) noexcept</argsstring>
        <name>filterAndTransformParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const SrcTile &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Pred &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Conditionally copy particles from src to dst based on a predicate. A transformation will also be applied to the particles on copy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Pred</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>the transform function type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function - particles will be copied if p returns true </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the transformation that will be applied to the particles on copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="479" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="479" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a326a3d72298cd5b976db9b5f3d92fba5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile1</type>
          </param>
          <param>
            <type>typename DstTile2</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_integral&lt; Index &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>Index</type>
        <definition>Index amrex::filterAndTransformParticles</definition>
        <argsstring>(DstTile1 &amp;dst1, DstTile2 &amp;dst2, const SrcTile &amp;src, Index *mask, F &amp;&amp;f) noexcept</argsstring>
        <name>filterAndTransformParticles</name>
        <param>
          <type>DstTile1 &amp;</type>
          <declname>dst1</declname>
        </param>
        <param>
          <type>DstTile2 &amp;</type>
          <declname>dst2</declname>
        </param>
        <param>
          <type>const SrcTile &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Index *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Conditionally copy particles from src to dst1 and dst2 based on the value of mask. A transformation will also be applied to the particles on copy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile1</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst1 particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DstTile2</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst2 particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index type, e.g. unsigned int </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>the transform function type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the mask - 1 means copy, 0 means don&apos;t copy </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the transformation that will be applied to the particles on copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="503" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="503" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a5092c73b759966a3166c3f1b7eb40114" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile1</type>
          </param>
          <param>
            <type>typename DstTile2</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Pred</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::filterAndTransformParticles</definition>
        <argsstring>(DstTile1 &amp;dst1, DstTile2 &amp;dst2, const SrcTile &amp;src, Pred &amp;&amp;p, F &amp;&amp;f) noexcept</argsstring>
        <name>filterAndTransformParticles</name>
        <param>
          <type>DstTile1 &amp;</type>
          <declname>dst1</declname>
        </param>
        <param>
          <type>DstTile2 &amp;</type>
          <declname>dst2</declname>
        </param>
        <param>
          <type>const SrcTile &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Pred &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Conditionally copy particles from src to dst1 and dst2 based on a predicate. A transformation will also be applied to the particles on copy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile1</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst1 particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DstTile2</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst2 particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Pred</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>the transform function type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst1</parametername>
</parameternamelist>
<parameterdescription>
<para>the first destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst2</parametername>
</parameternamelist>
<parameterdescription>
<para>the second destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function - particles will be copied if p returns true </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>defines the transformation that will be applied to the particles on copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="547" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="547" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8e19b894848b0aa7635fe66cc59dfd02" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DstTile</type>
          </param>
          <param>
            <type>typename SrcTile</type>
          </param>
          <param>
            <type>typename Pred</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto amrex::filterAndTransformParticles</definition>
        <argsstring>(DstTile &amp;dst, const SrcTile &amp;src, Pred &amp;&amp;p, F &amp;&amp;f, Index src_start, Index dst_start) noexcept -&gt; decltype(Index(particle_detail::call_f(p, typename SrcTile::ConstParticleTileDataType(), int{}, RandomEngine{})))</argsstring>
        <name>filterAndTransformParticles</name>
        <param>
          <type>DstTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const SrcTile &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Pred &amp;&amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>src_start</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>dst_start</declname>
        </param>
        <briefdescription>
<para>Conditionally copy particles from src to dst based on a predicate. This version conditionally copies n particles starting at index src_start, writing the result starting at dst_start. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DstTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the dst particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SrcTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the src particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Pred</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate function - particles will be copied if p returns true </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start reading particles from src </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_start</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset at which to start writing particles to dst </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of particles to apply the operation to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="584" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="584" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ab75c7a4946d605a7072d64407df6a6d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PTile</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_integral&lt; Index &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::gatherParticles</definition>
        <argsstring>(PTile &amp;dst, const PTile &amp;src, N np, const Index *inds)</argsstring>
        <name>gatherParticles</name>
        <param>
          <type>PTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const PTile &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>N</type>
          <declname>np</declname>
        </param>
        <param>
          <type>const Index *</type>
          <declname>inds</declname>
        </param>
        <briefdescription>
<para>Gather particles copies particles into contiguous order from an arbitrary order. Specifically, the particle at the index inds[i] in src will be copied to the index i in dst. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the size type, e.g. Long </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index type, e.g. unsigned int</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of particles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inds</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the permutation array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="620" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="620" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ae05ffbbcc005cc8c081b859226222c78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PTile</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename Index</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_integral&lt; Index &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::scatterParticles</definition>
        <argsstring>(PTile &amp;dst, const PTile &amp;src, N np, const Index *inds)</argsstring>
        <name>scatterParticles</name>
        <param>
          <type>PTile &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const PTile &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>N</type>
          <declname>np</declname>
        </param>
        <param>
          <type>const Index *</type>
          <declname>inds</declname>
        </param>
        <briefdescription>
<para>Scatter particles copies particles from contiguous order into an arbitrary order. Specifically, the particle at the index i in src will be copied to the index inds[i] in dst. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PTile</parametername>
</parameternamelist>
<parameterdescription>
<para>the particle tile type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the size type, e.g. Long </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index type, e.g. unsigned int</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>the destination tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>the source tile </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>np</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of particles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>inds</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the permutation array </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" line="650" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleTransformation.H" bodystart="650" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ad2e9cbb8f28bbbba7378ec7bf4654b89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::computeRefFac</definition>
        <argsstring>(const ParGDBBase *a_gdb, int src_lev, int lev)</argsstring>
        <name>computeRefFac</name>
        <param>
          <type>const <ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
          <declname>a_gdb</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.cpp" line="6" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.cpp" bodystart="6" bodyend="20" declfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" declline="744" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac6d35da48f520c8ae3f429aee03601c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt; int &gt; amrex::computeNeighborProcs</definition>
        <argsstring>(const ParGDBBase *a_gdb, int ngrow)</argsstring>
        <name>computeNeighborProcs</name>
        <param>
          <type>const <ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
          <declname>a_gdb</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.cpp" line="22" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.cpp" bodystart="22" bodyend="66" declfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" declline="746" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1acad483c5f0e30f9cd471ad05e1920320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleIterator&lt; Iterator &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::numParticlesOutOfRange</definition>
        <argsstring>(Iterator const &amp;pti, int nGrow)</argsstring>
        <name>numParticlesOutOfRange</name>
        <param>
          <type>Iterator const &amp;</type>
          <declname>pti</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nGrow</declname>
        </param>
        <briefdescription>
<para>Returns the number of particles that are more than nGrow cells from the box correspond to the input iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> ParticleIterator</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator pointing to the current grid/tile to test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nGrow</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grow cells allowed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="241" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="241" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a76c9efa7ebf0969d1986d57f86c1882b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleIterator&lt; Iterator &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::numParticlesOutOfRange</definition>
        <argsstring>(Iterator const &amp;pti, IntVect nGrow)</argsstring>
        <name>numParticlesOutOfRange</name>
        <param>
          <type>Iterator const &amp;</type>
          <declname>pti</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
          <declname>nGrow</declname>
        </param>
        <briefdescription>
<para>Returns the number of particles that are more than nGrow cells from the box correspond to the input iterator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>an <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> ParticleIterator</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>iterator pointing to the current grid/tile to test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nGrow</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grow cells allowed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="259" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="259" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a9624cde7b9ad11a1692714a8a2cf4d5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::numParticlesOutOfRange</definition>
        <argsstring>(PC const &amp;pc, int nGrow)</argsstring>
        <name>numParticlesOutOfRange</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nGrow</declname>
        </param>
        <briefdescription>
<para>Returns the number of particles that are more than nGrow cells from their assigned box. </para>
        </briefdescription>
        <detaileddescription>
<para>This version tests over all levels.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>a type of <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> particle container.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the particle container to test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nGrow</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grow cells allowed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="310" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="310" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a16b2ad610aeda065996254dcb64e1210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::numParticlesOutOfRange</definition>
        <argsstring>(PC const &amp;pc, IntVect nGrow)</argsstring>
        <name>numParticlesOutOfRange</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
          <declname>nGrow</declname>
        </param>
        <briefdescription>
<para>Returns the number of particles that are more than nGrow cells from their assigned box. </para>
        </briefdescription>
        <detaileddescription>
<para>This version tests over all levels.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>a type of <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> particle container.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the particle container to test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nGrow</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grow cells allowed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="329" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="329" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1af026262a284dc45b1a535e1d2c3da3d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::numParticlesOutOfRange</definition>
        <argsstring>(PC const &amp;pc, int lev_min, int lev_max, int nGrow)</argsstring>
        <name>numParticlesOutOfRange</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nGrow</declname>
        </param>
        <briefdescription>
<para>Returns the number of particles that are more than nGrow cells from their assigned box. </para>
        </briefdescription>
        <detaileddescription>
<para>This version goes over only the specified levels</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>a type of <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> particle container.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the particle container to test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum level to test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum level to test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nGrow</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grow cells allowed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="350" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="350" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aa69e2d3ab61d58e37142f8ca2607da7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; IsParticleContainer&lt; PC &gt;::value, int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::numParticlesOutOfRange</definition>
        <argsstring>(PC const &amp;pc, int lev_min, int lev_max, IntVect nGrow)</argsstring>
        <name>numParticlesOutOfRange</name>
        <param>
          <type>PC const &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
          <declname>nGrow</declname>
        </param>
        <briefdescription>
<para>Returns the number of particles that are more than nGrow cells from their assigned box. </para>
        </briefdescription>
        <detaileddescription>
<para>This version goes over only the specified levels</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>PC</parametername>
</parameternamelist>
<parameterdescription>
<para>a type of <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> particle container.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pc</parametername>
</parameternamelist>
<parameterdescription>
<para>the particle container to test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum level to test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum level to test </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nGrow</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of grow cells allowed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="374" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="374" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1aede00a5fe66df6418eb44590a33296a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::getTileIndex</definition>
        <argsstring>(const IntVect &amp;iv, const Box &amp;box, const bool a_do_tiling, const IntVect &amp;a_tile_size, Box &amp;tbx)</argsstring>
        <name>getTileIndex</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>a_do_tiling</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>a_tile_size</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>tbx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="396" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="396" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a77b016483c8263c1a67e93d79d31da4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::numTilesInBox</definition>
        <argsstring>(const Box &amp;box, const bool a_do_tiling, const IntVect &amp;a_tile_size)</argsstring>
        <name>numTilesInBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>a_do_tiling</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>a_tile_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="444" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="444" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a6e7a7d55a9760a9b62a5675badced0e1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::getParticleCell</definition>
        <argsstring>(P const &amp;p, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;plo, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;dxi, const Box &amp;domain) noexcept</argsstring>
        <name>getParticleCell</name>
        <param>
          <type>P const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="534" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="534" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7137fe4c56ae26940acfef9783458ec1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::getParticleGrid</definition>
        <argsstring>(P const &amp;p, amrex::Array4&lt; int &gt; const &amp;mask, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;plo, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;dxi, const Box &amp;domain) noexcept</argsstring>
        <name>getParticleGrid</name>
        <param>
          <type>P const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const &amp;</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="549" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="549" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a8d4982679d65bfe0ea15633d2c6bbca1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::enforcePeriodic</definition>
        <argsstring>(P &amp;p, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;plo, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;phi, amrex::GpuArray&lt; amrex::ParticleReal, AMREX_SPACEDIM &gt; const &amp;rlo, amrex::GpuArray&lt; amrex::ParticleReal, AMREX_SPACEDIM &gt; const &amp;rhi, amrex::GpuArray&lt; int, AMREX_SPACEDIM &gt; const &amp;is_per) noexcept</argsstring>
        <name>enforcePeriodic</name>
        <param>
          <type>P &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::ParticleReal, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>rlo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::ParticleReal, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>rhi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>is_per</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="561" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="561" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a866fe0479b95fae68d4728835bf6ea68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename PTile</type>
          </param>
          <param>
            <type>typename PLocator</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::partitionParticlesByDest</definition>
        <argsstring>(PTile &amp;ptile, const PLocator &amp;ploc, const ParticleBufferMap &amp;pmap, const GpuArray&lt; Real, AMREX_SPACEDIM &gt; &amp;plo, const GpuArray&lt; Real, AMREX_SPACEDIM &gt; &amp;phi, const GpuArray&lt; ParticleReal, AMREX_SPACEDIM &gt; &amp;rlo, const GpuArray&lt; ParticleReal, AMREX_SPACEDIM &gt; &amp;rhi, const GpuArray&lt; int, AMREX_SPACEDIM &gt; &amp;is_per, int lev, int gid, int, int lev_min, int lev_max, int nGrow, bool remove_negative)</argsstring>
        <name>partitionParticlesByDest</name>
        <param>
          <type>PTile &amp;</type>
          <declname>ptile</declname>
        </param>
        <param>
          <type>const PLocator &amp;</type>
          <declname>ploc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleBufferMap" kindref="compound">ParticleBufferMap</ref> &amp;</type>
          <declname>pmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; ParticleReal, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>rlo</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; ParticleReal, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>rhi</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>is_per</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>gid</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev_max</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nGrow</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>remove_negative</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="602" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="602" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1ac8512b687a529806d0f382cf7c9eee97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC1</type>
          </param>
          <param>
            <type>class PC2</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::SameIteratorsOK</definition>
        <argsstring>(const PC1 &amp;pc1, const PC2 &amp;pc2)</argsstring>
        <name>SameIteratorsOK</name>
        <param>
          <type>const PC1 &amp;</type>
          <declname>pc1</declname>
        </param>
        <param>
          <type>const PC2 &amp;</type>
          <declname>pc2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="723" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="723" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a2a6f51f01e9f0350a8b447ee451d0efb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::EnsureThreadSafeTiles</definition>
        <argsstring>(PC &amp;pc)</argsstring>
        <name>EnsureThreadSafeTiles</name>
        <param>
          <type>PC &amp;</type>
          <declname>pc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="735" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="735" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a1983ce5560b8e4e34d4f0a8ade1fa640" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::cic_interpolate</definition>
        <argsstring>(const P &amp;p, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;plo, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;dxi, const amrex::Array4&lt; amrex::Real const &gt; &amp;uccarr, amrex::ParticleReal *val, int M)</argsstring>
        <name>cic_interpolate</name>
        <param>
          <type>const P &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; amrex::Real const &gt; &amp;</type>
          <declname>uccarr</declname>
        </param>
        <param>
          <type>amrex::ParticleReal *</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>M</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_TracerParticle_mod_K.H" line="19" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_TracerParticle_mod_K.H" bodystart="19" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a04ef083664648b0ae42c601507e5517b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::cic_interpolate</definition>
        <argsstring>(const P &amp;p, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;plo, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;dxi, const amrex::Array4&lt; amrex::Real const &gt; &amp;uccarr, amrex::ParticleReal *val)</argsstring>
        <name>cic_interpolate</name>
        <param>
          <type>const P &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; amrex::Real const &gt; &amp;</type>
          <declname>uccarr</declname>
        </param>
        <param>
          <type>amrex::ParticleReal *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_TracerParticle_mod_K.H" line="110" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_TracerParticle_mod_K.H" bodystart="110" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1a7a0b35edc3abc53059893fe83faf5357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::mac_interpolate</definition>
        <argsstring>(const P &amp;p, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;plo, amrex::GpuArray&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;dxi, amrex::GpuArray&lt; amrex::Array4&lt; amrex::Real const &gt;, AMREX_SPACEDIM &gt; const &amp;p_uccarr, amrex::ParticleReal *val)</argsstring>
        <name>mac_interpolate</name>
        <param>
          <type>const P &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; amrex::Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">amrex::GpuArray</ref>&lt; <ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; amrex::Real const &gt;, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>p_uccarr</declname>
        </param>
        <param>
          <type>amrex::ParticleReal *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_TracerParticle_mod_K.H" line="121" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_TracerParticle_mod_K.H" bodystart="121" bodyend="206"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Current Support:<itemizedlist>
<listitem><para>2D + 3D</para>
</listitem><listitem><para>single + multi-level (w/o nesting)</para>
</listitem><listitem><para>ghosts (indicator field created using <computeroutput>grow</computeroutput>)</para>
</listitem><listitem><para>particles</para>
</listitem></itemizedlist>
</para>
<para>TODO:<itemizedlist>
<listitem><para>AMR nesting </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Amr.cpp" line="49" column="1"/>
  </compounddef>
</doxygen>
