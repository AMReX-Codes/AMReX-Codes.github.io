<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structamrex_1_1IntegratorOps_3_01T_00_01typename_01std_1_1enable__if_3_01std_1_1is__same_3_01amr09a2cac7fed17a511fab4f6be5ebe511" kind="struct" language="C++" prot="public">
    <compoundname>amrex::IntegratorOps&lt; T, typename std::enable_if&lt; std::is_same&lt; amrex::MultiFab, T &gt;::value &gt;::type &gt;</compoundname>
    <includes refid="AMReX__IntegratorBase_8H" local="no">AMReX_IntegratorBase.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1IntegratorOps_3_01T_00_01typename_01std_1_1enable__if_3_01std_1_1is__same_3_01amr09a2cac7fed17a511fab4f6be5ebe511_1a47993e638b098a95bcfdfaca47058eb0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::IntegratorOps&lt; T, typename std::enable_if&lt; std::is_same&lt; amrex::MultiFab, T &gt;::value &gt;::type &gt;::CreateLike</definition>
        <argsstring>(amrex::Vector&lt; std::unique_ptr&lt; T &gt; &gt; &amp;V, const T &amp;Other, bool Grow=false)</argsstring>
        <name>CreateLike</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; std::unique_ptr&lt; T &gt; &gt; &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>Other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>Grow</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="126" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="126" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1IntegratorOps_3_01T_00_01typename_01std_1_1enable__if_3_01std_1_1is__same_3_01amr09a2cac7fed17a511fab4f6be5ebe511_1ad2577132a90ec5ee95abeac9bca03bcd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::IntegratorOps&lt; T, typename std::enable_if&lt; std::is_same&lt; amrex::MultiFab, T &gt;::value &gt;::type &gt;::Copy</definition>
        <argsstring>(T &amp;Y, const T &amp;Other, bool Grow=true)</argsstring>
        <name>Copy</name>
        <param>
          <type>T &amp;</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>Other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>Grow</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="133" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="133" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1IntegratorOps_3_01T_00_01typename_01std_1_1enable__if_3_01std_1_1is__same_3_01amr09a2cac7fed17a511fab4f6be5ebe511_1ad0a20ed2967f5654590f09308b379be2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::IntegratorOps&lt; T, typename std::enable_if&lt; std::is_same&lt; amrex::MultiFab, T &gt;::value &gt;::type &gt;::Saxpy</definition>
        <argsstring>(T &amp;Y, const amrex::Real a, const T &amp;X, bool Grow=false)</argsstring>
        <name>Saxpy</name>
        <param>
          <type>T &amp;</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>const amrex::Real</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>X</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>Grow</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="140" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="140" bodyend="145"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="124" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="123" bodyend="147"/>
    <listofallmembers>
      <member refid="structamrex_1_1IntegratorOps_3_01T_00_01typename_01std_1_1enable__if_3_01std_1_1is__same_3_01amr09a2cac7fed17a511fab4f6be5ebe511_1ad2577132a90ec5ee95abeac9bca03bcd" prot="public" virt="non-virtual"><scope>amrex::IntegratorOps&lt; T, typename std::enable_if&lt; std::is_same&lt; amrex::MultiFab, T &gt;::value &gt;::type &gt;</scope><name>Copy</name></member>
      <member refid="structamrex_1_1IntegratorOps_3_01T_00_01typename_01std_1_1enable__if_3_01std_1_1is__same_3_01amr09a2cac7fed17a511fab4f6be5ebe511_1a47993e638b098a95bcfdfaca47058eb0" prot="public" virt="non-virtual"><scope>amrex::IntegratorOps&lt; T, typename std::enable_if&lt; std::is_same&lt; amrex::MultiFab, T &gt;::value &gt;::type &gt;</scope><name>CreateLike</name></member>
      <member refid="structamrex_1_1IntegratorOps_3_01T_00_01typename_01std_1_1enable__if_3_01std_1_1is__same_3_01amr09a2cac7fed17a511fab4f6be5ebe511_1ad0a20ed2967f5654590f09308b379be2" prot="public" virt="non-virtual"><scope>amrex::IntegratorOps&lt; T, typename std::enable_if&lt; std::is_same&lt; amrex::MultiFab, T &gt;::value &gt;::type &gt;</scope><name>Saxpy</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
