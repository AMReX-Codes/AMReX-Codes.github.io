<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1RealVectND" kind="class" language="C++" prot="public">
    <compoundname>amrex::RealVectND</compoundname>
    <includes refid="AMReX__RealVect_8H" local="no">AMReX_RealVect.H</includes>
    <templateparamlist>
      <param>
        <type>int</type>
        <declname>dim</declname>
        <defname>dim</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="user-defined">
      <header>Static public members functions</header>
      <memberdef kind="typedef" id="classamrex_1_1RealVectND_1ae0a0cb29f737b147dd363ba8fbcbaf41" prot="public" static="no">
        <type>Real</type>
        <definition>using amrex::RealVectND&lt; dim &gt;::value_type =  Real</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>amrex::RealVectND::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="545" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="545" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1RealVectND_1a8b0c15f36a810af4974757509ad003df" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::RealVectND&lt; dim &gt;::vect[dim]</definition>
        <argsstring>[dim]</argsstring>
        <name>vect</name>
        <qualifiedname>amrex::RealVectND::vect</qualifiedname>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The individual components of this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="591" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="591" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a1da33519a7bbb64621e431527c2774f7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>new_dim</declname>
            <defname>new_dim</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>&lt; new_dim &gt;</type>
        <definition>__host__ __device__ RealVectND&lt; new_dim &gt; amrex::RealVectND&lt; dim &gt;::shrink</definition>
        <argsstring>() const noexcept</argsstring>
        <name>shrink</name>
        <qualifiedname>amrex::RealVectND::shrink</qualifiedname>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> of size new_dim and assigns the first new_dim values of this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> to it. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="553" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="553" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1af5bc4f81739ebdf0988f3e37874bf6ee" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>new_dim</declname>
            <defname>new_dim</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>&lt; new_dim &gt;</type>
        <definition>__host__ __device__ RealVectND&lt; new_dim &gt; amrex::RealVectND&lt; dim &gt;::expand</definition>
        <argsstring>(Real fill_extra=0.) const noexcept</argsstring>
        <name>expand</name>
        <qualifiedname>amrex::RealVectND::expand</qualifiedname>
        <param>
          <type>Real</type>
          <declname>fill_extra</declname>
          <defval>0.</defval>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> of size new_dim and assigns all values of this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> to it andÂ fill_extra to the remaining elements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="564" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="564" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1ada50dec1d66a073668fe3830845df703" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>new_dim</declname>
            <defname>new_dim</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>&lt; new_dim &gt;</type>
        <definition>__host__ __device__ RealVectND&lt; new_dim &gt; amrex::RealVectND&lt; dim &gt;::resize</definition>
        <argsstring>(Real fill_extra=0.) const noexcept</argsstring>
        <name>resize</name>
        <qualifiedname>amrex::RealVectND::resize</qualifiedname>
        <param>
          <type>Real</type>
          <declname>fill_extra</declname>
          <defval>0.</defval>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> of size new_dim by either shrinking or expanding this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="579" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="579" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a4e1c48adcab5b0f24ed1c336296499a3" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref></type>
        <definition>__host__ static __device__ constexpr RealVectND amrex::RealVectND&lt; dim &gt;::TheZeroVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheZeroVector</name>
        <qualifiedname>amrex::RealVectND::TheZeroVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The zero vector in dim-dimensional space. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="522" column="64" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="522" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1abc71735549a0d4d65d45da36d014f1ac" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref></type>
        <definition>__host__ static __device__ constexpr RealVectND amrex::RealVectND&lt; dim &gt;::TheUnitVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheUnitVector</name>
        <qualifiedname>amrex::RealVectND::TheUnitVector</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The unit vector in dim-dimensional space. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="529" column="64" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="529" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a79e3dc888f4444f5421db060ff5deda5" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr std::size_t</type>
        <definition>__host__ static __device__ constexpr std::size_t amrex::RealVectND&lt; dim &gt;::size</definition>
        <argsstring>() noexcept</argsstring>
        <name>size</name>
        <qualifiedname>amrex::RealVectND::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="536" column="34" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="536" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a3b6e98baa399fdefef56a6ca77585939" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ static __device__ constexpr int</type>
        <definition>__host__ static __device__ constexpr int amrex::RealVectND&lt; dim &gt;::isize</definition>
        <argsstring>() noexcept</argsstring>
        <name>isize</name>
        <qualifiedname>amrex::RealVectND::isize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="541" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="541" bodyend="543"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Constants</header>
      <memberdef kind="variable" id="classamrex_1_1RealVectND_1ac4286c6d8d6d8e0a948d8b8ef6d41d24" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>const <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref></type>
        <definition>constexpr const RealVectND&lt; dim &gt; amrex::RealVectND&lt; dim &gt;::Zero</definition>
        <argsstring></argsstring>
        <name>Zero</name>
        <qualifiedname>amrex::RealVectND::Zero</qualifiedname>
        <initializer>{Real(0)}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> all of whose components are equal to zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="503" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="503" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1RealVectND_1abd41268bd0749cb0555b6759be75dd25" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>const <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref></type>
        <definition>constexpr const RealVectND&lt; dim &gt; amrex::RealVectND&lt; dim &gt;::Unit</definition>
        <argsstring></argsstring>
        <name>Unit</name>
        <qualifiedname>amrex::RealVectND::Unit</qualifiedname>
        <initializer>{Real(1)}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> all of whose components are equal to one. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="509" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="509" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Constructors and Accessors</header>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a1c3eebfb4feed7b2dd63c8e8683d0b8b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr amrex::RealVectND&lt; dim &gt;::RealVectND</definition>
        <argsstring>() noexcept</argsstring>
        <name>RealVectND</name>
        <qualifiedname>amrex::RealVectND::RealVectND</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> whose components are zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="43" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a3fb9dbb4efcd3ee19ec87ce5e21ea7f2" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::RealVectND&lt; dim &gt;::RealVectND</definition>
        <argsstring>(const std::vector&lt; Real &gt; &amp;vr) noexcept</argsstring>
        <name>RealVectND</name>
        <qualifiedname>amrex::RealVectND::RealVectND</qualifiedname>
        <param>
          <type>const std::vector&lt; Real &gt; &amp;</type>
          <declname>vr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="45" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="45" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a2ee8e49e21167faf47bd8744fd622b2a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt;(sizeof...(Args)+2==dim) &amp;&amp;<ref refid="namespaceamrex_1a6c0ad9de6dc5e0ca9324f19210bd62b9" kindref="member">IsConvertible_v</ref>&lt; Real, Args... &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ constexpr</type>
        <definition>__host__ __device__ constexpr amrex::RealVectND&lt; dim &gt;::RealVectND</definition>
        <argsstring>(Real i, Real j, Args... ks) noexcept</argsstring>
        <name>RealVectND</name>
        <qualifiedname>amrex::RealVectND::RealVectND</qualifiedname>
        <param>
          <type>Real</type>
          <declname>i</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>j</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>ks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> given the specific values for its coordinates. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="63" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="63" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a6d3155ee50ad88beafcadbcb5f883a2d" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr</type>
        <definition>__host__ __device__ constexpr amrex::RealVectND&lt; dim &gt;::RealVectND</definition>
        <argsstring>(Real s) noexcept</argsstring>
        <name>RealVectND</name>
        <qualifiedname>amrex::RealVectND::RealVectND</qualifiedname>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="67" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="67" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1ae62fc59588f27d5725f45a704a7940df" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__</type>
        <definition>__host__ __device__ amrex::RealVectND&lt; dim &gt;::RealVectND</definition>
        <argsstring>(const Real *a) noexcept</argsstring>
        <name>RealVectND</name>
        <qualifiedname>amrex::RealVectND::RealVectND</qualifiedname>
        <param>
          <type>const Real *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> setting the coordinates to the corresponding values in the Real array a. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="79" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a83f8c66d614e2b58ec0b897028d47140" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr</type>
        <definition>__host__ __device__ constexpr amrex::RealVectND&lt; dim &gt;::RealVectND</definition>
        <argsstring>(const IntVectND&lt; dim &gt; &amp;iv) noexcept</argsstring>
        <name>RealVectND</name>
        <qualifiedname>amrex::RealVectND::RealVectND</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> from an <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref> by coercing each component from <computeroutput>int</computeroutput> to Real. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="91" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="91" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1aa7e9aca320f0d8fd717090cc5e918d72" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr</type>
        <definition>__host__ __device__ constexpr amrex::RealVectND&lt; dim &gt;::RealVectND</definition>
        <argsstring>(const GpuArray&lt; Real, dim &gt; ga) noexcept</argsstring>
        <name>RealVectND</name>
        <qualifiedname>amrex::RealVectND::RealVectND</qualifiedname>
        <param>
          <type>const <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, dim &gt;</type>
          <declname>ga</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> from a <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="102" column="4" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="102" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a8618cd406ab2d0af3c22ffc756f056c2" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type>Real &amp;</type>
        <definition>Real &amp; amrex::RealVectND&lt; dim &gt;::operator[]</definition>
        <argsstring>(int i) &amp;&amp;=delete</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::RealVectND::operator[]</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prevent rvalue assignment to the <emphasis>i</emphasis>&apos;th coordinate of the <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="113" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a84514d0ec398157e2484663900e7c7e1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr Real &amp;</type>
        <definition>__host__ __device__ constexpr Real &amp; amrex::RealVectND&lt; dim &gt;::operator[]</definition>
        <argsstring>(int i) &amp;noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::RealVectND::operator[]</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a modifiable lvalue reference to the <emphasis>i</emphasis>&apos;th coordinate of the <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="121" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1ae46ac86da652486446bcf101340f1fdb" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr const Real &amp;</type>
        <definition>__host__ __device__ constexpr const Real &amp; amrex::RealVectND&lt; dim &gt;::operator[]</definition>
        <argsstring>(int i) const &amp;noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::RealVectND::operator[]</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the <emphasis>i</emphasis>&apos;th coordinate of the <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="131" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a927eb30b57cad0d897c718b1e155bd0b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>i</declname>
            <defname>i</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ constexpr Real &amp;</type>
        <definition>__host__ __device__ constexpr Real &amp; amrex::RealVectND&lt; dim &gt;::get</definition>
        <argsstring>() noexcept</argsstring>
        <name>get</name>
        <qualifiedname>amrex::RealVectND::get</qualifiedname>
        <briefdescription>
<para>Returns a reference to the i&apos;th coordinate of the <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>. Used by structured bindings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="139" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a0a863c231659853556e36b249021c337" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>i</declname>
            <defname>i</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ constexpr const Real &amp;</type>
        <definition>__host__ __device__ constexpr const Real &amp; amrex::RealVectND&lt; dim &gt;::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <qualifiedname>amrex::RealVectND::get</qualifiedname>
        <briefdescription>
<para>Returns a reference to the i&apos;th coordinate of the <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>. Used by structured bindings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="144" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1ac8d6c990470b9a85cd9b124b27ffce58" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr <ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, dim &gt;</type>
        <definition>__host__ __device__ constexpr GpuArray&lt; Real, dim &gt; amrex::RealVectND&lt; dim &gt;::to_array</definition>
        <argsstring>() const noexcept</argsstring>
        <name>to_array</name>
        <qualifiedname>amrex::RealVectND::to_array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="147" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="147" bodyend="153"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Iterators</header>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a0e7749676f5d19184680af88dc5c3003" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr Real *</type>
        <definition>__host__ __device__ constexpr Real * amrex::RealVectND&lt; dim &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::RealVectND::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return pointer to the first component. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="167" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a5eae368fa2cf735bbd1f55e9fe2649dc" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr const Real *</type>
        <definition>__host__ __device__ constexpr const Real * amrex::RealVectND&lt; dim &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::RealVectND::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return pointer to the first component. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="174" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a188b9aeca7f8156d6ab83768dc26f55c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr Real *</type>
        <definition>__host__ __device__ constexpr Real * amrex::RealVectND&lt; dim &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::RealVectND::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return pointer to the one past last component </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="181" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a8ae8f1502b0bbc80f434efe6fea902cf" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr const Real *</type>
        <definition>__host__ __device__ constexpr const Real * amrex::RealVectND&lt; dim &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::RealVectND::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return pointer to the one past last component </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="188" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="188" bodyend="190"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Comparison Operators</header>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a29d82d96affeb67360606060885e096c" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr bool</type>
        <definition>__host__ __device__ constexpr bool amrex::RealVectND&lt; dim &gt;::operator==</definition>
        <argsstring>(const RealVectND &amp;p) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>amrex::RealVectND::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> is equivalent to argument <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>. All comparisons between analogous components must be satisfied. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="205" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="205" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1aff4513f2e926e03c5ab01ec22618eab9" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr bool</type>
        <definition>__host__ __device__ constexpr bool amrex::RealVectND&lt; dim &gt;::operator!=</definition>
        <argsstring>(const RealVectND &amp;p) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>amrex::RealVectND::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> is different from argument <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>. All comparisons between analogous components must be satisfied. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="219" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="219" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a71af025064b148b471d7b4b0714b281a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::RealVectND&lt; dim &gt;::operator&lt;</definition>
        <argsstring>(const RealVectND &amp;p) const noexcept</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>amrex::RealVectND::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> is less than argument <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>. All comparisons between analogous components must be satisfied. Note that, since the comparison is component-wise, it is possible for an <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> to be neither greater than, less than, nor equal to another. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="235" column="34" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="756" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a067d2c42902bd5121a2c5c683842c07d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::RealVectND&lt; dim &gt;::operator&lt;=</definition>
        <argsstring>(const RealVectND &amp;p) const noexcept</argsstring>
        <name>operator&lt;=</name>
        <qualifiedname>amrex::RealVectND::operator&lt;=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> is less than or equal to argument <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>. All comparisons between analogous components must be satisfied. Note that, since the comparison is component-wise, it is possible for an <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> to be neither greater than or equal to, less than or equal to, nor equal to another. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="245" column="34" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="767" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a9efe8ec25aa55523e589486ecfbfb77f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::RealVectND&lt; dim &gt;::operator&gt;</definition>
        <argsstring>(const RealVectND &amp;p) const noexcept</argsstring>
        <name>operator&gt;</name>
        <qualifiedname>amrex::RealVectND::operator&gt;</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> is greater than argument <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>. All comparisons between analogous components must be satisfied. Note that, since the comparison is component-wise, it is possible for an <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> to be neither greater than, less than, nor equal to another. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="255" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="778" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a66b01fb2d73a9ed32eb5ca86f7560cc4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::RealVectND&lt; dim &gt;::operator&gt;=</definition>
        <argsstring>(const RealVectND &amp;p) const noexcept</argsstring>
        <name>operator&gt;=</name>
        <qualifiedname>amrex::RealVectND::operator&gt;=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> is greater than or equal to argument <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>. All comparisons between analogous components must be satisfied. Note that, since the comparison is component-wise, it is possible for an <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> to be neither greater than or equal to, less than or equal to, nor equal to another. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="266" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="789" bodyend="795"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Arithmetic Operators</header>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a3f546536c20646ae36d3a273395b0179" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
        <definition>__host__ __device__ RealVectND&lt; dim &gt; &amp; amrex::RealVectND&lt; dim &gt;::operator+=</definition>
        <argsstring>(Real s) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>amrex::RealVectND::operator+=</qualifiedname>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> by addition of a scalar to each component. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="279" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="864" bodyend="869"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a6d13aad6ea26ed6ade30a586ba8871b8" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref></type>
        <definition>__host__ __device__ RealVectND&lt; dim &gt; amrex::RealVectND&lt; dim &gt;::operator+</definition>
        <argsstring>(Real s) const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>amrex::RealVectND::operator+</qualifiedname>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> that is this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> with a scalar s added to each component. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="286" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="916" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1afc937d0806084a10b7494362a5d4026f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
        <definition>__host__ __device__ RealVectND&lt; dim &gt; &amp; amrex::RealVectND&lt; dim &gt;::operator+=</definition>
        <argsstring>(const RealVectND &amp;p) noexcept</argsstring>
        <name>operator+=</name>
        <qualifiedname>amrex::RealVectND::operator+=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> by component-wise addition by argument. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="292" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="874" bodyend="879"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1ad3dc9ef4eda5aa69f9c4db0a3d61ad44" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
        <definition>__host__ __device__ RealVectND&lt; dim &gt; &amp; amrex::RealVectND&lt; dim &gt;::operator-=</definition>
        <argsstring>(Real s) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>amrex::RealVectND::operator-=</qualifiedname>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> by subtraction of a scalar from each component. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="299" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="623" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a7c41c7288f940db2576d62ef3d1b5aad" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
        <definition>__host__ __device__ RealVectND&lt; dim &gt; &amp; amrex::RealVectND&lt; dim &gt;::operator-=</definition>
        <argsstring>(const RealVectND &amp;p) noexcept</argsstring>
        <name>operator-=</name>
        <qualifiedname>amrex::RealVectND::operator-=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> by component-wise subtraction by argument. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="305" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="643" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a3796a337711019b0aa88de5e30bbc03c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref></type>
        <definition>__host__ __device__ RealVectND&lt; dim &gt; amrex::RealVectND&lt; dim &gt;::operator-</definition>
        <argsstring>(Real s) const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>amrex::RealVectND::operator-</qualifiedname>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> that is this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> with a scalar s subtracted from each component. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="312" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="905" bodyend="911"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a0cab9e4bf2f8c2d3fe36b9e6dbb81c19" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
        <definition>__host__ __device__ RealVectND&lt; dim &gt; &amp; amrex::RealVectND&lt; dim &gt;::operator*=</definition>
        <argsstring>(Real s) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>amrex::RealVectND::operator*=</qualifiedname>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> by multiplying each component by a scalar. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="318" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="633" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a41e58acfef75219b4a76892851a2cd4d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ Real</type>
        <definition>__host__ __device__ Real amrex::RealVectND&lt; dim &gt;::dotProduct</definition>
        <argsstring>(const RealVectND &amp;a_rhs) const noexcept</argsstring>
        <name>dotProduct</name>
        <qualifiedname>amrex::RealVectND::dotProduct</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
          <declname>a_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the result of the scalar product with another <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="324" column="40" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="842" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a42e1e156a25293eb9bc1b8ef7ca2f01f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
            <defval>dim</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(N==3), int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref></type>
        <definition>__host__ __device__ RealVectND amrex::RealVectND&lt; dim &gt;::crossProduct</definition>
        <argsstring>(const RealVectND &amp;a_rhs) const noexcept</argsstring>
        <name>crossProduct</name>
        <qualifiedname>amrex::RealVectND::crossProduct</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
          <declname>a_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the result of the cross product with another <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="332" column="46"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a04c4162d7bd60d9bd5437cc528289187" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
        <definition>__host__ __device__ RealVectND&lt; dim &gt; &amp; amrex::RealVectND&lt; dim &gt;::operator*=</definition>
        <argsstring>(const RealVectND &amp;p) noexcept</argsstring>
        <name>operator*=</name>
        <qualifiedname>amrex::RealVectND::operator*=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> by component-wise multiplication by argument. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="339" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="884" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a9f361dfdb1f127743140d66c109178a9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref></type>
        <definition>__host__ __device__ RealVectND&lt; dim &gt; amrex::RealVectND&lt; dim &gt;::operator*</definition>
        <argsstring>(Real s) const noexcept</argsstring>
        <name>operator*</name>
        <qualifiedname>amrex::RealVectND::operator*</qualifiedname>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> that is this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> with each component multiplied by a scalar. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="346" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="894" bodyend="900"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1ab99a31075f0104f4eae1c6c812dd5a75" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
        <definition>__host__ __device__ RealVectND&lt; dim &gt; &amp; amrex::RealVectND&lt; dim &gt;::operator/=</definition>
        <argsstring>(Real s) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>amrex::RealVectND::operator/=</qualifiedname>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> by dividing each component by a scalar. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="352" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="927" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1ade01c6984f7e62c18962cc9aaacd2816" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
        <definition>__host__ __device__ RealVectND&lt; dim &gt; &amp; amrex::RealVectND&lt; dim &gt;::operator/=</definition>
        <argsstring>(const RealVectND &amp;p) noexcept</argsstring>
        <name>operator/=</name>
        <qualifiedname>amrex::RealVectND::operator/=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> by component-wise division by argument. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="358" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="937" bodyend="942"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a5ed1ac4eef2678ccd501011da8671668" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref></type>
        <definition>__host__ __device__ RealVectND&lt; dim &gt; amrex::RealVectND&lt; dim &gt;::operator/</definition>
        <argsstring>(Real s) const noexcept</argsstring>
        <name>operator/</name>
        <qualifiedname>amrex::RealVectND::operator/</qualifiedname>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> that is this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> with each component divided by a scalar. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="365" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="947" bodyend="953"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a6dd849e8f5fdaed6f65fb325cbc458f0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
        <definition>__host__ __device__ RealVectND&lt; dim &gt; &amp; amrex::RealVectND&lt; dim &gt;::scale</definition>
        <argsstring>(Real s) noexcept</argsstring>
        <name>scale</name>
        <qualifiedname>amrex::RealVectND::scale</qualifiedname>
        <param>
          <type>Real</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> by multiplying each component by a scalar. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="371" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="671" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1ab3336e051bb9913732914be44b20e599" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>__host__ __device__ IntVectND&lt; dim &gt; amrex::RealVectND&lt; dim &gt;::floor</definition>
        <argsstring>() const noexcept</argsstring>
        <name>floor</name>
        <qualifiedname>amrex::RealVectND::floor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an IntVectND&lt;dim&gt; whose components are the std::floor of the <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> components. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="378" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="681" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1ab7f6c8dfca3ee0f6728d7f9fc9258b04" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>__host__ __device__ IntVectND&lt; dim &gt; amrex::RealVectND&lt; dim &gt;::ceil</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ceil</name>
        <qualifiedname>amrex::RealVectND::ceil</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an IntVectND&lt;dim&gt; whose components are the std::floor of the <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> components. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="385" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="692" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a47575101949d5d1b1b00a34d71e3764d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>__host__ __device__ IntVectND&lt; dim &gt; amrex::RealVectND&lt; dim &gt;::round</definition>
        <argsstring>() const noexcept</argsstring>
        <name>round</name>
        <qualifiedname>amrex::RealVectND::round</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an IntVectND&lt;dim&gt; whose components are the std::floor of the <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> components. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="392" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="703" bodyend="709"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Other arithmetic operators</header>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1af9bf196972aef047fd28a2b4ab1272cf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
        <definition>__host__ __device__ RealVectND&lt; dim &gt; &amp; amrex::RealVectND&lt; dim &gt;::min</definition>
        <argsstring>(const RealVectND &amp;p) noexcept</argsstring>
        <name>min</name>
        <qualifiedname>amrex::RealVectND::min</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> by taking component-wise min with <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> argument. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="406" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="800" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a1d9ce7fe0c472761e9c56db85231b230" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
        <definition>__host__ __device__ RealVectND&lt; dim &gt; &amp; amrex::RealVectND&lt; dim &gt;::max</definition>
        <argsstring>(const RealVectND &amp;p) noexcept</argsstring>
        <name>max</name>
        <qualifiedname>amrex::RealVectND::max</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modifies this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> by taking component-wise max with <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> argument. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="413" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="810" bodyend="815"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Unary operators</header>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a60596131123b3619fa94e8ee1aa53ad0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref></type>
        <definition>__host__ __device__ RealVectND&lt; dim &gt; amrex::RealVectND&lt; dim &gt;::operator+</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator+</name>
        <qualifiedname>amrex::RealVectND::operator+</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unary plus <ndash/> for completeness. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="426" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="653" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a2075f79e4191d2615dee3a9db314de61" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref></type>
        <definition>__host__ __device__ RealVectND&lt; dim &gt; amrex::RealVectND&lt; dim &gt;::operator-</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator-</name>
        <qualifiedname>amrex::RealVectND::operator-</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unary minus <ndash/> negates all components of this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="432" column="45" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="660" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a74097451011210f0f4709850880931d6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ Real</type>
        <definition>__host__ __device__ Real amrex::RealVectND&lt; dim &gt;::sum</definition>
        <argsstring>() const noexcept</argsstring>
        <name>sum</name>
        <qualifiedname>amrex::RealVectND::sum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sum of all components of this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="438" column="40" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="714" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a956b9659d82b9d8a53dc7db672dd1727" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ Real</type>
        <definition>__host__ __device__ Real amrex::RealVectND&lt; dim &gt;::vectorLength</definition>
        <argsstring>() const noexcept</argsstring>
        <name>vectorLength</name>
        <qualifiedname>amrex::RealVectND::vectorLength</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sqrt(sum squares) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="444" column="40" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="725" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a6e2ec1afd173c051cf49c7f8dfe47646" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ Real</type>
        <definition>__host__ __device__ Real amrex::RealVectND&lt; dim &gt;::radSquared</definition>
        <argsstring>() const noexcept</argsstring>
        <name>radSquared</name>
        <qualifiedname>amrex::RealVectND::radSquared</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sum squares<ndash/>no square root </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="450" column="40" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="734" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a8c56233c9b10913bc8aff6bec9205762" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ Real</type>
        <definition>__host__ __device__ Real amrex::RealVectND&lt; dim &gt;::product</definition>
        <argsstring>() const noexcept</argsstring>
        <name>product</name>
        <qualifiedname>amrex::RealVectND::product</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Product of all components of this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="456" column="40" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="745" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1aa5cc83518c1285163816eb4da232e11d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ int</type>
        <definition>__host__ __device__ int amrex::RealVectND&lt; dim &gt;::minDir</definition>
        <argsstring>(const bool &amp;a_doAbs) const noexcept</argsstring>
        <name>minDir</name>
        <qualifiedname>amrex::RealVectND::minDir</qualifiedname>
        <param>
          <type>const bool &amp;</type>
          <declname>a_doAbs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Component with the minimum value of this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> (returns 0 if they are all the same). a_doAbs : if true then take the absolute value before comparing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="463" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="958" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a0e863d906258b192d1c94b2a7bdbd179" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ int</type>
        <definition>__host__ __device__ int amrex::RealVectND&lt; dim &gt;::maxDir</definition>
        <argsstring>(const bool &amp;a_doAbs) const noexcept</argsstring>
        <name>maxDir</name>
        <qualifiedname>amrex::RealVectND::maxDir</qualifiedname>
        <param>
          <type>const bool &amp;</type>
          <declname>a_doAbs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Component with the maximum value of this <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> (returns 0 if they are all the same). a_doAbs : if true then take the absolute value before comparing </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="470" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="977" bodyend="991"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="user-defined">
      <header>Data pointer functions</header>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1a6bc6010caf48354d032e6e0c830e71f2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ const Real *</type>
        <definition>__host__ __device__ const Real * amrex::RealVectND&lt; dim &gt;::dataPtr</definition>
        <argsstring>() const noexcept</argsstring>
        <name>dataPtr</name>
        <qualifiedname>amrex::RealVectND::dataPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Only for sending stuff to Fortran </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="483" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="483" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealVectND_1ae40d48a6beebe5c352d0bfe2bab43468" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ Real *</type>
        <definition>__host__ __device__ Real * amrex::RealVectND&lt; dim &gt;::dataPtr</definition>
        <argsstring>() noexcept</argsstring>
        <name>dataPtr</name>
        <qualifiedname>amrex::RealVectND::dataPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Only for sending stuff to Fortran </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="490" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="490" bodyend="490"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1RealVectND_1aae0ae6a35164fbfae3156a7d9669726e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt;(N==3), int &gt;</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>&lt; dim &gt;</type>
        <definition>__host__ __device__ RealVectND&lt; dim &gt; amrex::RealVectND&lt; dim &gt;::crossProduct</definition>
        <argsstring>(const RealVectND&lt; dim &gt; &amp;a_rhs) const noexcept</argsstring>
        <name>crossProduct</name>
        <qualifiedname>amrex::RealVectND::crossProduct</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref>&lt; dim &gt; &amp;</type>
          <declname>a_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="854" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="854" bodyend="859"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A Real vector in dim-dimensional space. </para>
    </briefdescription>
    <detaileddescription>
<para>The class <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> is an implementation of a Real vector in a dim-dimensional space. <ref refid="classamrex_1_1RealVectND" kindref="compound">RealVectND</ref> values are accessed using the operator[] function, as for a normal C++ array. In addition, the basic arithmetic operators have been overloaded to implement scaling and translation operations. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>amrex::RealVectND&lt; dim &gt;</label>
        <link refid="classamrex_1_1RealVectND"/>
        <childnode refid="2" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::RealVectND&lt; dim &gt;</label>
        <link refid="classamrex_1_1RealVectND"/>
        <childnode refid="2" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" line="32" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealVect.H" bodystart="32" bodyend="592"/>
    <listofallmembers>
      <member refid="classamrex_1_1RealVectND_1a0e7749676f5d19184680af88dc5c3003" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>begin</name></member>
      <member refid="classamrex_1_1RealVectND_1a5eae368fa2cf735bbd1f55e9fe2649dc" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>begin</name></member>
      <member refid="classamrex_1_1RealVectND_1ab7f6c8dfca3ee0f6728d7f9fc9258b04" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>ceil</name></member>
      <member refid="classamrex_1_1RealVectND_1a42e1e156a25293eb9bc1b8ef7ca2f01f" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>crossProduct</name></member>
      <member refid="classamrex_1_1RealVectND_1aae0ae6a35164fbfae3156a7d9669726e" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>crossProduct</name></member>
      <member refid="classamrex_1_1RealVectND_1a6bc6010caf48354d032e6e0c830e71f2" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1RealVectND_1ae40d48a6beebe5c352d0bfe2bab43468" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1RealVectND_1a41e58acfef75219b4a76892851a2cd4d" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>dotProduct</name></member>
      <member refid="classamrex_1_1RealVectND_1a188b9aeca7f8156d6ab83768dc26f55c" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>end</name></member>
      <member refid="classamrex_1_1RealVectND_1a8ae8f1502b0bbc80f434efe6fea902cf" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>end</name></member>
      <member refid="classamrex_1_1RealVectND_1af5bc4f81739ebdf0988f3e37874bf6ee" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>expand</name></member>
      <member refid="classamrex_1_1RealVectND_1ab3336e051bb9913732914be44b20e599" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>floor</name></member>
      <member refid="classamrex_1_1RealVectND_1a927eb30b57cad0d897c718b1e155bd0b" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>get</name></member>
      <member refid="classamrex_1_1RealVectND_1a0a863c231659853556e36b249021c337" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>get</name></member>
      <member refid="classamrex_1_1RealVectND_1a3b6e98baa399fdefef56a6ca77585939" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>isize</name></member>
      <member refid="classamrex_1_1RealVectND_1a1d9ce7fe0c472761e9c56db85231b230" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>max</name></member>
      <member refid="classamrex_1_1RealVectND_1a0e863d906258b192d1c94b2a7bdbd179" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>maxDir</name></member>
      <member refid="classamrex_1_1RealVectND_1af9bf196972aef047fd28a2b4ab1272cf" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>min</name></member>
      <member refid="classamrex_1_1RealVectND_1aa5cc83518c1285163816eb4da232e11d" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>minDir</name></member>
      <member refid="classamrex_1_1RealVectND_1aff4513f2e926e03c5ab01ec22618eab9" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1RealVectND_1a9f361dfdb1f127743140d66c109178a9" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator*</name></member>
      <member refid="classamrex_1_1RealVectND_1a0cab9e4bf2f8c2d3fe36b9e6dbb81c19" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1RealVectND_1a04c4162d7bd60d9bd5437cc528289187" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1RealVectND_1a6d13aad6ea26ed6ade30a586ba8871b8" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator+</name></member>
      <member refid="classamrex_1_1RealVectND_1a60596131123b3619fa94e8ee1aa53ad0" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator+</name></member>
      <member refid="classamrex_1_1RealVectND_1a3f546536c20646ae36d3a273395b0179" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1RealVectND_1afc937d0806084a10b7494362a5d4026f" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1RealVectND_1a3796a337711019b0aa88de5e30bbc03c" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator-</name></member>
      <member refid="classamrex_1_1RealVectND_1a2075f79e4191d2615dee3a9db314de61" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator-</name></member>
      <member refid="classamrex_1_1RealVectND_1ad3dc9ef4eda5aa69f9c4db0a3d61ad44" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1RealVectND_1a7c41c7288f940db2576d62ef3d1b5aad" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1RealVectND_1a5ed1ac4eef2678ccd501011da8671668" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator/</name></member>
      <member refid="classamrex_1_1RealVectND_1ab99a31075f0104f4eae1c6c812dd5a75" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1RealVectND_1ade01c6984f7e62c18962cc9aaacd2816" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1RealVectND_1a71af025064b148b471d7b4b0714b281a" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator&lt;</name></member>
      <member refid="classamrex_1_1RealVectND_1a067d2c42902bd5121a2c5c683842c07d" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator&lt;=</name></member>
      <member refid="classamrex_1_1RealVectND_1a29d82d96affeb67360606060885e096c" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator==</name></member>
      <member refid="classamrex_1_1RealVectND_1a9efe8ec25aa55523e589486ecfbfb77f" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator&gt;</name></member>
      <member refid="classamrex_1_1RealVectND_1a66b01fb2d73a9ed32eb5ca86f7560cc4" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator&gt;=</name></member>
      <member refid="classamrex_1_1RealVectND_1a8618cd406ab2d0af3c22ffc756f056c2" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1RealVectND_1a84514d0ec398157e2484663900e7c7e1" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1RealVectND_1ae46ac86da652486446bcf101340f1fdb" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1RealVectND_1a8c56233c9b10913bc8aff6bec9205762" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>product</name></member>
      <member refid="classamrex_1_1RealVectND_1a6e2ec1afd173c051cf49c7f8dfe47646" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>radSquared</name></member>
      <member refid="classamrex_1_1RealVectND_1a1c3eebfb4feed7b2dd63c8e8683d0b8b" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>RealVectND</name></member>
      <member refid="classamrex_1_1RealVectND_1a3fb9dbb4efcd3ee19ec87ce5e21ea7f2" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>RealVectND</name></member>
      <member refid="classamrex_1_1RealVectND_1a2ee8e49e21167faf47bd8744fd622b2a" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>RealVectND</name></member>
      <member refid="classamrex_1_1RealVectND_1a6d3155ee50ad88beafcadbcb5f883a2d" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>RealVectND</name></member>
      <member refid="classamrex_1_1RealVectND_1ae62fc59588f27d5725f45a704a7940df" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>RealVectND</name></member>
      <member refid="classamrex_1_1RealVectND_1a83f8c66d614e2b58ec0b897028d47140" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>RealVectND</name></member>
      <member refid="classamrex_1_1RealVectND_1aa7e9aca320f0d8fd717090cc5e918d72" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>RealVectND</name></member>
      <member refid="classamrex_1_1RealVectND_1ada50dec1d66a073668fe3830845df703" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>resize</name></member>
      <member refid="classamrex_1_1RealVectND_1a47575101949d5d1b1b00a34d71e3764d" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>round</name></member>
      <member refid="classamrex_1_1RealVectND_1a6dd849e8f5fdaed6f65fb325cbc458f0" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>scale</name></member>
      <member refid="classamrex_1_1RealVectND_1a1da33519a7bbb64621e431527c2774f7" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>shrink</name></member>
      <member refid="classamrex_1_1RealVectND_1a79e3dc888f4444f5421db060ff5deda5" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>size</name></member>
      <member refid="classamrex_1_1RealVectND_1a74097451011210f0f4709850880931d6" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>sum</name></member>
      <member refid="classamrex_1_1RealVectND_1abc71735549a0d4d65d45da36d014f1ac" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>TheUnitVector</name></member>
      <member refid="classamrex_1_1RealVectND_1a4e1c48adcab5b0f24ed1c336296499a3" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>TheZeroVector</name></member>
      <member refid="classamrex_1_1RealVectND_1ac8d6c990470b9a85cd9b124b27ffce58" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>to_array</name></member>
      <member refid="classamrex_1_1RealVectND_1abd41268bd0749cb0555b6759be75dd25" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>Unit</name></member>
      <member refid="classamrex_1_1RealVectND_1ae0a0cb29f737b147dd363ba8fbcbaf41" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>value_type</name></member>
      <member refid="classamrex_1_1RealVectND_1a8b0c15f36a810af4974757509ad003df" prot="protected" virt="non-virtual"><scope>amrex::RealVectND</scope><name>vect</name></member>
      <member refid="classamrex_1_1RealVectND_1a956b9659d82b9d8a53dc7db672dd1727" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>vectorLength</name></member>
      <member refid="classamrex_1_1RealVectND_1ac4286c6d8d6d8e0a948d8b8ef6d41d24" prot="public" virt="non-virtual"><scope>amrex::RealVectND</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
