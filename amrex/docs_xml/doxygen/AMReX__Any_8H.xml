<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="AMReX__Any_8H" kind="file" language="C++">
    <compoundname>AMReX_Any.H</compoundname>
    <includes local="no">AMReX_Config.H</includes>
    <includes local="no">memory</includes>
    <includes local="no">typeinfo</includes>
    <includedby refid="AMReX__MLLinOp_8H" local="no">/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H</includedby>
    <incdepgraph>
      <node id="4">
        <label>typeinfo</label>
      </node>
      <node id="2">
        <label>AMReX_Config.H</label>
      </node>
      <node id="1">
        <label>/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H</label>
        <link refid="AMReX__Any_8H"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="10">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.cpp</label>
        <link refid="AMReX__MLTensorOp_8cpp"/>
      </node>
      <node id="3">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellLinOp.H</label>
        <link refid="AMReX__MLCellLinOp_8H"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCGSolver.H</label>
        <link refid="AMReX__MLCGSolver_8H"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLCellABecLap.H</label>
        <link refid="AMReX__MLCellABecLap_8H"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLaplacian.H</label>
        <link refid="AMReX__MLNodeTensorLaplacian_8H"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian_hypre.cpp</label>
        <link refid="AMReX__MLNodeLaplacian__hypre_8cpp"/>
      </node>
      <node id="27">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.H</label>
        <link refid="AMReX__MLNodeLaplacian_8H"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.H</label>
        <link refid="AMReX__MLEBNodeFDLaplacian_8H"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp.H</label>
        <link refid="AMReX__MLTensorOp_8H"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.H</label>
        <link refid="AMReX__MLEBABecLap_8H"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLap_K.H</label>
        <link refid="AMReX__MLNodeTensorLap__K_8H"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H</label>
        <link refid="AMReX__MLPoisson_8H"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.H</label>
        <link refid="AMReX__OpenBC_8H"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap_F.cpp</label>
        <link refid="AMReX__MLEBABecLap__F_8cpp"/>
      </node>
      <node id="18">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.cpp</label>
        <link refid="AMReX__MLEBTensorOp_8cpp"/>
      </node>
      <node id="8">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp</label>
        <link refid="AMReX__MLMG_8cpp"/>
      </node>
      <node id="28">
        <label>/home/runner/work/amrex/amrex/Src/Extern/HYPRE/AMReX_HypreNodeLap.cpp</label>
        <link refid="AMReX__HypreNodeLap_8cpp"/>
      </node>
      <node id="22">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H</label>
        <link refid="AMReX__MLMG_8H"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC.cpp</label>
        <link refid="AMReX__OpenBC_8cpp"/>
      </node>
      <node id="33">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian_sten.cpp</label>
        <link refid="AMReX__MLNodeLaplacian__sten_8cpp"/>
      </node>
      <node id="1">
        <label>/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H</label>
        <link refid="AMReX__Any_8H"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian_misc.cpp</label>
        <link refid="AMReX__MLNodeLaplacian__misc_8cpp"/>
      </node>
      <node id="12">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALaplacian.H</label>
        <link refid="AMReX__MLALaplacian_8H"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp.H</label>
        <link refid="AMReX__MLEBTensorOp_8H"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLTensorOp_grad.cpp</label>
        <link refid="AMReX__MLTensorOp__grad_8cpp"/>
      </node>
      <node id="35">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.cpp</label>
        <link refid="AMReX__MLNodeLinOp_8cpp"/>
      </node>
      <node id="29">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian.cpp</label>
        <link refid="AMReX__MLNodeLaplacian_8cpp"/>
      </node>
      <node id="6">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBABecLap.cpp</label>
        <link refid="AMReX__MLEBABecLap_8cpp"/>
      </node>
      <node id="20">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBTensorOp_bc.cpp</label>
        <link refid="AMReX__MLEBTensorOp__bc_8cpp"/>
      </node>
      <node id="30">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian_eb.cpp</label>
        <link refid="AMReX__MLNodeLaplacian__eb_8cpp"/>
      </node>
      <node id="26">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLaplacian.cpp</label>
        <link refid="AMReX__MLEBNodeFDLaplacian_8cpp"/>
      </node>
      <node id="16">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/OpenBC/AMReX_OpenBC_K.H</label>
        <link refid="AMReX__OpenBC__K_8H"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLABecLaplacian.H</label>
        <link refid="AMReX__MLABecLaplacian_8H"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLaplacian_sync.cpp</label>
        <link refid="AMReX__MLNodeLaplacian__sync_8cpp"/>
      </node>
      <node id="2">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H</label>
        <link refid="AMReX__MLLinOp_8H"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLEBNodeFDLap_K.H</label>
        <link refid="AMReX__MLEBNodeFDLap__K_8H"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeTensorLaplacian.cpp</label>
        <link refid="AMReX__MLNodeTensorLaplacian_8cpp"/>
      </node>
      <node id="23">
        <label>/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLNodeLinOp.H</label>
        <link refid="AMReX__MLNodeLinOp_8H"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classamrex_1_1Any" prot="public">amrex::Any</innerclass>
    <innerclass refid="structamrex_1_1Any_1_1innards__base" prot="private">amrex::Any::innards_base</innerclass>
    <innerclass refid="structamrex_1_1Any_1_1innards" prot="private">amrex::Any::innards</innerclass>
    <innernamespace refid="namespaceamrex">amrex</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>AMREX_ANY_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AMREX_ANY_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;AMReX_Config.H&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceamrex" kindref="compound">amrex</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="classamrex_1_1Any" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classamrex_1_1Any" kindref="compound">Any</ref></highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="classamrex_1_1Any_1a794f63d073e59619a7fed27e8e40e2ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Any_1a794f63d073e59619a7fed27e8e40e2ba" kindref="member">Any</ref><sp/>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="20" refid="classamrex_1_1Any_1a75f911e1b2a254db4b6626bf98fa1923" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Any_1a75f911e1b2a254db4b6626bf98fa1923" kindref="member">~Any</ref><sp/>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="classamrex_1_1Any_1afc3bc0660243e8d8719884a2f81a2a3a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Any_1afc3bc0660243e8d8719884a2f81a2a3a" kindref="member">Any</ref><sp/>(<ref refid="classamrex_1_1Any" kindref="compound">Any</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23" refid="classamrex_1_1Any_1ac04132048490ddd59eb7312eb33856e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Any" kindref="compound">Any</ref>&amp;<sp/><ref refid="classamrex_1_1Any_1ac04132048490ddd59eb7312eb33856e4" kindref="member">operator= </ref>(<ref refid="classamrex_1_1Any" kindref="compound">Any</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="classamrex_1_1Any_1aff8ca6a4b83b6cef467c7899d658aa47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Any_1aff8ca6a4b83b6cef467c7899d658aa47" kindref="member">Any</ref><sp/>(<ref refid="classamrex_1_1Any" kindref="compound">Any</ref><sp/>&amp;&amp;<sp/>rhs)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26" refid="classamrex_1_1Any_1ad23c5ad12e1baae2943f5e4dc707aac5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Any" kindref="compound">Any</ref>&amp;<sp/><ref refid="classamrex_1_1Any_1ac04132048490ddd59eb7312eb33856e4" kindref="member">operator= </ref>(<ref refid="classamrex_1_1Any" kindref="compound">Any</ref><sp/>&amp;&amp;<sp/>rhs)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MF&gt;</highlight></codeline>
<codeline lineno="30" refid="classamrex_1_1Any_1abbcaad293ac7cfef89396c60034c02ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Any_1abbcaad293ac7cfef89396c60034c02ff" kindref="member">Any</ref><sp/>(MF<sp/>&amp;&amp;<sp/>mf)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classamrex_1_1Any_1ae7a9bb6b1bb859d01987340327e8d570" kindref="member">m_ptr</ref>(std::make_unique&lt;<ref refid="structamrex_1_1Any_1_1innards" kindref="compound">innards</ref>&lt;MF&gt;<sp/>&gt;(std::forward&lt;MF&gt;(mf)))</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MF&gt;</highlight></codeline>
<codeline lineno="36" refid="classamrex_1_1Any_1a3b7b2ee39b9b1315ad4817de4683dbd6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Any" kindref="compound">Any</ref>&amp;<sp/><ref refid="classamrex_1_1Any_1ac04132048490ddd59eb7312eb33856e4" kindref="member">operator= </ref>(MF<sp/>&amp;&amp;<sp/>mf)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Any_1ae7a9bb6b1bb859d01987340327e8d570" kindref="member">m_ptr</ref><sp/>=<sp/>std::make_unique&lt;innards&lt;MF&gt;<sp/>&gt;(std::forward&lt;MF&gt;(mf));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="classamrex_1_1Any_1ad3ea6134bfd9b5a51d9ad381e548cb19" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;<sp/><ref refid="classamrex_1_1Any_1ad3ea6134bfd9b5a51d9ad381e548cb19" kindref="member">Type</ref><sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1Any_1ae7a9bb6b1bb859d01987340327e8d570" kindref="member">m_ptr</ref>)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Any_1ae7a9bb6b1bb859d01987340327e8d570" kindref="member">m_ptr</ref>-&gt;Type();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(void);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MF&gt;</highlight></codeline>
<codeline lineno="52" refid="classamrex_1_1Any_1ab3b0861ff49959fd1103921dc291b918" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>MF&amp;<sp/><ref refid="classamrex_1_1Any_1ab3b0861ff49959fd1103921dc291b918" kindref="member">get</ref><sp/>()<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p0<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="structamrex_1_1Any_1_1innards" kindref="compound">innards&lt;MF&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classamrex_1_1Any_1ae7a9bb6b1bb859d01987340327e8d570" kindref="member">m_ptr</ref>.get()))<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p0-&gt;m_mf;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="structamrex_1_1Any_1_1innards" kindref="compound">innards&lt;MF&amp;&gt;</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*m_ptr).<ref refid="structamrex_1_1Any_1_1innards_1a764850492da1fd11e69854a0a6d511cf" kindref="member">m_mf</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MF&gt;</highlight></codeline>
<codeline lineno="62" refid="classamrex_1_1Any_1a743acfa69c626f0a2f66fda4830312dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>MF<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="classamrex_1_1Any_1a743acfa69c626f0a2f66fda4830312dc" kindref="member">get</ref><sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p0<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="structamrex_1_1Any_1_1innards" kindref="compound">innards&lt;MF&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classamrex_1_1Any_1ae7a9bb6b1bb859d01987340327e8d570" kindref="member">m_ptr</ref>.get()))<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p0-&gt;m_mf;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p1<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="structamrex_1_1Any_1_1innards" kindref="compound">innards&lt;MF&amp;&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classamrex_1_1Any_1ae7a9bb6b1bb859d01987340327e8d570" kindref="member">m_ptr</ref>.get()))<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p1-&gt;m_mf;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="normal"><ref refid="structamrex_1_1Any_1_1innards" kindref="compound">innards&lt;MF const&amp;&gt;</ref><sp/>const&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*m_ptr).<ref refid="structamrex_1_1Any_1_1innards_1a764850492da1fd11e69854a0a6d511cf" kindref="member">m_mf</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MF&gt;</highlight></codeline>
<codeline lineno="73" refid="classamrex_1_1Any_1a6756f5c90f3bab7334449702da7ae003" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Any_1a6756f5c90f3bab7334449702da7ae003" kindref="member">is</ref><sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Any_1ad3ea6134bfd9b5a51d9ad381e548cb19" kindref="member">Type</ref>()<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(MF);<sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="classamrex_1_1Any_1a7b20f835a46c1aba635c2159391f53f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Any_1a7b20f835a46c1aba635c2159391f53f1" kindref="member">hasValue</ref><sp/>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Any_1ae7a9bb6b1bb859d01987340327e8d570" kindref="member">m_ptr</ref><sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="78" refid="structamrex_1_1Any_1_1innards__base" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structamrex_1_1Any_1_1innards__base" kindref="compound">innards_base</ref><sp/>{</highlight></codeline>
<codeline lineno="79" refid="structamrex_1_1Any_1_1innards__base_1afa3049bddd4c3493eeb9a1f62fa7981d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;<sp/><ref refid="structamrex_1_1Any_1_1innards__base_1afa3049bddd4c3493eeb9a1f62fa7981d" kindref="member">Type</ref><sp/>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="80" refid="structamrex_1_1Any_1_1innards__base_1ac2a0d84b48c0f50c6c608405c442d3ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structamrex_1_1Any_1_1innards__base_1ac2a0d84b48c0f50c6c608405c442d3ee" kindref="member">~innards_base</ref><sp/>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MF&gt;</highlight></codeline>
<codeline lineno="84" refid="structamrex_1_1Any_1_1innards" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structamrex_1_1Any_1_1innards" kindref="compound">innards</ref><sp/>:<sp/><ref refid="structamrex_1_1Any_1_1innards__base" kindref="compound">innards_base</ref></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86" refid="structamrex_1_1Any_1_1innards_1aacaac28ad77795a2c5443a992e3701ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structamrex_1_1Any_1_1innards_1aacaac28ad77795a2c5443a992e3701ad" kindref="member">innards</ref><sp/>(MF<sp/>&amp;&amp;<sp/>mf)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structamrex_1_1Any_1_1innards_1a764850492da1fd11e69854a0a6d511cf" kindref="member">m_mf</ref>(std::forward&lt;MF&gt;(mf))</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="structamrex_1_1Any_1_1innards_1a905490b0c2263d9d274a1c9b7d362c89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structamrex_1_1Any_1_1innards_1a905490b0c2263d9d274a1c9b7d362c89" kindref="member">~innards</ref><sp/>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="structamrex_1_1Any_1_1innards_1a8f84898111d3428ff1f529295f042918" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::type_info&amp;<sp/><ref refid="structamrex_1_1Any_1_1innards_1a8f84898111d3428ff1f529295f042918" kindref="member">Type</ref><sp/>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(MF);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="structamrex_1_1Any_1_1innards_1a764850492da1fd11e69854a0a6d511cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MF<sp/><ref refid="structamrex_1_1Any_1_1innards_1a764850492da1fd11e69854a0a6d511cf" kindref="member">m_mf</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="classamrex_1_1Any_1ae7a9bb6b1bb859d01987340327e8d570" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;innards_base&gt;<sp/><ref refid="classamrex_1_1Any_1ae7a9bb6b1bb859d01987340327e8d570" kindref="member">m_ptr</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Any.H"/>
  </compounddef>
</doxygen>
