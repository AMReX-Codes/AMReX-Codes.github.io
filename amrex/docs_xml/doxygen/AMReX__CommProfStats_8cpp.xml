<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="AMReX__CommProfStats_8cpp" kind="file" language="C++">
    <compoundname>AMReX_CommProfStats.cpp</compoundname>
    <includes local="no">cstdio</includes>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">map</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">vector</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">limits</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">set</includes>
    <includes local="no">sys/time.h</includes>
    <includes refid="AMReX__CommProfStats_8H" local="no">AMReX_CommProfStats.H</includes>
    <includes refid="AMReX__Utility_8H" local="no">AMReX_Utility.H</includes>
    <includes refid="AMReX__IntVect_8H" local="no">AMReX_IntVect.H</includes>
    <includes refid="AMReX__Box_8H" local="no">AMReX_Box.H</includes>
    <includes refid="AMReX__FArrayBox_8H" local="no">AMReX_FArrayBox.H</includes>
    <includes refid="AMReX__ParallelDescriptor_8H" local="no">AMReX_ParallelDescriptor.H</includes>
    <includes refid="AMReX__BLProfUtilities_8H" local="no">AMReX_BLProfUtilities.H</includes>
    <incdepgraph>
      <node id="49116">
        <label>AMReX_ParallelContext.H</label>
        <link refid="AMReX__ParallelContext_8H"/>
        <childnode refid="49078" relation="include">
        </childnode>
        <childnode refid="49053" relation="include">
        </childnode>
        <childnode refid="49087" relation="include">
        </childnode>
        <childnode refid="49075" relation="include">
        </childnode>
      </node>
      <node id="49084">
        <label>functional</label>
      </node>
      <node id="49061">
        <label>iomanip</label>
      </node>
      <node id="49113">
        <label>AMReX_BoxArray.H</label>
        <link refid="AMReX__BoxArray_8H"/>
        <childnode refid="49052" relation="include">
        </childnode>
        <childnode refid="49102" relation="include">
        </childnode>
        <childnode refid="49056" relation="include">
        </childnode>
        <childnode refid="49057" relation="include">
        </childnode>
        <childnode refid="49092" relation="include">
        </childnode>
        <childnode refid="49099" relation="include">
        </childnode>
        <childnode refid="49076" relation="include">
        </childnode>
        <childnode refid="49087" relation="include">
        </childnode>
      </node>
      <node id="49106">
        <label>AMReX_BoxIterator.H</label>
        <link refid="AMReX__BoxIterator_8H"/>
        <childnode refid="49072" relation="include">
        </childnode>
        <childnode refid="49086" relation="include">
        </childnode>
        <childnode refid="49089" relation="include">
        </childnode>
        <childnode refid="49067" relation="include">
        </childnode>
        <childnode refid="49069" relation="include">
        </childnode>
        <childnode refid="49070" relation="include">
        </childnode>
      </node>
      <node id="49060">
        <label>limits</label>
      </node>
      <node id="49066">
        <label>AMReX_BLProfiler.H</label>
        <link refid="AMReX__BLProfiler_8H"/>
        <childnode refid="49054" relation="include">
        </childnode>
        <childnode refid="49067" relation="include">
        </childnode>
      </node>
      <node id="49140">
        <label>AMReX_CudaContainers.H</label>
        <link refid="AMReX__CudaContainers_8H"/>
        <childnode refid="49123" relation="include">
        </childnode>
        <childnode refid="49087" relation="include">
        </childnode>
        <childnode refid="49138" relation="include">
        </childnode>
      </node>
      <node id="49089">
        <label>AMReX_Box.H</label>
        <link refid="AMReX__Box_8H"/>
        <childnode refid="49071" relation="include">
        </childnode>
        <childnode refid="49090" relation="include">
        </childnode>
        <childnode refid="49091" relation="include">
        </childnode>
        <childnode refid="49075" relation="include">
        </childnode>
        <childnode refid="49070" relation="include">
        </childnode>
        <childnode refid="49092" relation="include">
        </childnode>
        <childnode refid="49093" relation="include">
        </childnode>
        <childnode refid="49069" relation="include">
        </childnode>
        <childnode refid="49076" relation="include">
        </childnode>
        <childnode refid="49094" relation="include">
        </childnode>
        <childnode refid="49087" relation="include">
        </childnode>
        <childnode refid="49081" relation="include">
        </childnode>
        <childnode refid="49085" relation="include">
        </childnode>
      </node>
      <node id="49132">
        <label>AMReX_GpuUtility.H</label>
        <link refid="AMReX__GpuUtility_8H"/>
        <childnode refid="49081" relation="include">
        </childnode>
        <childnode refid="49085" relation="include">
        </childnode>
        <childnode refid="49129" relation="include">
        </childnode>
        <childnode refid="49068" relation="include">
        </childnode>
        <childnode refid="49067" relation="include">
        </childnode>
        <childnode refid="49076" relation="include">
        </childnode>
        <childnode refid="49094" relation="include">
        </childnode>
        <childnode refid="49052" relation="include">
        </childnode>
        <childnode refid="49073" relation="include">
        </childnode>
      </node>
      <node id="49144">
        <label>cstdint</label>
      </node>
      <node id="49153">
        <label>AMReX_FabArrayBase.H</label>
        <link refid="AMReX__FabArrayBase_8H"/>
        <childnode refid="49054" relation="include">
        </childnode>
        <childnode refid="49113" relation="include">
        </childnode>
        <childnode refid="49114" relation="include">
        </childnode>
        <childnode refid="49115" relation="include">
        </childnode>
        <childnode refid="49154" relation="include">
        </childnode>
        <childnode refid="49152" relation="include">
        </childnode>
        <childnode refid="49139" relation="include">
        </childnode>
        <childnode refid="49101" relation="include">
        </childnode>
        <childnode refid="49124" relation="include">
        </childnode>
      </node>
      <node id="49114">
        <label>AMReX_DistributionMapping.H</label>
        <link refid="AMReX__DistributionMapping_8H"/>
        <childnode refid="49056" relation="include">
        </childnode>
        <childnode refid="49060" relation="include">
        </childnode>
        <childnode refid="49078" relation="include">
        </childnode>
        <childnode refid="49102" relation="include">
        </childnode>
        <childnode refid="49052" relation="include">
        </childnode>
        <childnode refid="49080" relation="include">
        </childnode>
        <childnode refid="49076" relation="include">
        </childnode>
        <childnode refid="49087" relation="include">
        </childnode>
        <childnode refid="49089" relation="include">
        </childnode>
        <childnode refid="49067" relation="include">
        </childnode>
        <childnode refid="49115" relation="include">
        </childnode>
      </node>
      <node id="49070">
        <label>AMReX_IntVect.H</label>
        <link refid="AMReX__IntVect_8H"/>
        <childnode refid="49071" relation="include">
        </childnode>
        <childnode refid="49072" relation="include">
        </childnode>
        <childnode refid="49073" relation="include">
        </childnode>
        <childnode refid="49060" relation="include">
        </childnode>
        <childnode refid="49074" relation="include">
        </childnode>
        <childnode refid="49059" relation="include">
        </childnode>
        <childnode refid="49075" relation="include">
        </childnode>
        <childnode refid="49069" relation="include">
        </childnode>
        <childnode refid="49076" relation="include">
        </childnode>
        <childnode refid="49087" relation="include">
        </childnode>
        <childnode refid="49088" relation="include">
        </childnode>
        <childnode refid="49086" relation="include">
        </childnode>
        <childnode refid="49068" relation="include">
        </childnode>
        <childnode refid="49081" relation="include">
        </childnode>
      </node>
      <node id="49159">
        <label>stdlib.h</label>
      </node>
      <node id="49080">
        <label>AMReX.H</label>
        <link refid="AMReX_8H"/>
        <childnode refid="49081" relation="include">
        </childnode>
        <childnode refid="49075" relation="include">
        </childnode>
        <childnode refid="49082" relation="include">
        </childnode>
        <childnode refid="49052" relation="include">
        </childnode>
        <childnode refid="49084" relation="include">
        </childnode>
        <childnode refid="49054" relation="include">
        </childnode>
        <childnode refid="49051" relation="include">
        </childnode>
        <childnode refid="49058" relation="include">
        </childnode>
        <childnode refid="49078" relation="include">
        </childnode>
      </node>
      <node id="49107">
        <label>AMReX_MakeType.H</label>
        <link refid="AMReX__MakeType_8H"/>
      </node>
      <node id="49131">
        <label>AMReX_GpuLaunchFunctsC.H</label>
        <link refid="AMReX__GpuLaunchFunctsC_8H"/>
      </node>
      <node id="49126">
        <label>AMReX_GpuError.H</label>
        <link refid="AMReX__GpuError_8H"/>
        <childnode refid="49108" relation="include">
        </childnode>
        <childnode refid="49054" relation="include">
        </childnode>
      </node>
      <node id="49087">
        <label>AMReX_Vector.H</label>
        <link refid="AMReX__Vector_8H"/>
        <childnode refid="49059" relation="include">
        </childnode>
        <childnode refid="49058" relation="include">
        </childnode>
        <childnode refid="49078" relation="include">
        </childnode>
        <childnode refid="49086" relation="include">
        </childnode>
      </node>
      <node id="49139">
        <label>AMReX_Print.H</label>
        <link refid="AMReX__Print_8H"/>
        <childnode refid="49079" relation="include">
        </childnode>
        <childnode refid="49053" relation="include">
        </childnode>
        <childnode refid="49061" relation="include">
        </childnode>
        <childnode refid="49080" relation="include">
        </childnode>
        <childnode refid="49116" relation="include">
        </childnode>
        <childnode refid="49115" relation="include">
        </childnode>
      </node>
      <node id="49073">
        <label>cmath</label>
      </node>
      <node id="49151">
        <label>cassert</label>
      </node>
      <node id="49161">
        <label>AMReX_RegionsProfStats.H</label>
        <link refid="AMReX__RegionsProfStats_8H"/>
        <childnode refid="49065" relation="include">
        </childnode>
        <childnode refid="49066" relation="include">
        </childnode>
        <childnode refid="49067" relation="include">
        </childnode>
        <childnode refid="49069" relation="include">
        </childnode>
        <childnode refid="49076" relation="include">
        </childnode>
        <childnode refid="49087" relation="include">
        </childnode>
        <childnode refid="49070" relation="include">
        </childnode>
        <childnode refid="49089" relation="include">
        </childnode>
        <childnode refid="49095" relation="include">
        </childnode>
        <childnode refid="49051" relation="include">
        </childnode>
        <childnode refid="49052" relation="include">
        </childnode>
        <childnode refid="49053" relation="include">
        </childnode>
        <childnode refid="49054" relation="include">
        </childnode>
        <childnode refid="49056" relation="include">
        </childnode>
        <childnode refid="49057" relation="include">
        </childnode>
        <childnode refid="49058" relation="include">
        </childnode>
        <childnode refid="49118" relation="include">
        </childnode>
        <childnode refid="49079" relation="include">
        </childnode>
        <childnode refid="49159" relation="include">
        </childnode>
      </node>
      <node id="49083">
        <label>stdexcept</label>
      </node>
      <node id="49123">
        <label>numeric</label>
      </node>
      <node id="49099">
        <label>AMReX_BoxList.H</label>
        <link refid="AMReX__BoxList_8H"/>
        <childnode refid="49071" relation="include">
        </childnode>
        <childnode refid="49070" relation="include">
        </childnode>
        <childnode refid="49092" relation="include">
        </childnode>
        <childnode refid="49089" relation="include">
        </childnode>
        <childnode refid="49076" relation="include">
        </childnode>
        <childnode refid="49087" relation="include">
        </childnode>
      </node>
      <node id="49096">
        <label>AMReX_BaseFab.H</label>
        <link refid="AMReX__BaseFab_8H"/>
        <childnode refid="49073" relation="include">
        </childnode>
        <childnode refid="49072" relation="include">
        </childnode>
        <childnode refid="49059" relation="include">
        </childnode>
        <childnode refid="49060" relation="include">
        </childnode>
        <childnode refid="49074" relation="include">
        </childnode>
        <childnode refid="49077" relation="include">
        </childnode>
        <childnode refid="49097" relation="include">
        </childnode>
        <childnode refid="49078" relation="include">
        </childnode>
        <childnode refid="49068" relation="include">
        </childnode>
        <childnode refid="49086" relation="include">
        </childnode>
        <childnode refid="49076" relation="include">
        </childnode>
        <childnode refid="49089" relation="include">
        </childnode>
        <childnode refid="49098" relation="include">
        </childnode>
        <childnode refid="49099" relation="include">
        </childnode>
        <childnode refid="49100" relation="include">
        </childnode>
        <childnode refid="49103" relation="include">
        </childnode>
        <childnode refid="49067" relation="include">
        </childnode>
        <childnode refid="49066" relation="include">
        </childnode>
        <childnode refid="49106" relation="include">
        </childnode>
        <childnode refid="49107" relation="include">
        </childnode>
        <childnode refid="49108" relation="include">
        </childnode>
        <childnode refid="49124" relation="include">
        </childnode>
      </node>
      <node id="49054">
        <label>string</label>
      </node>
      <node id="49138">
        <label>AMReX_CudaAllocators.H</label>
        <link refid="AMReX__CudaAllocators_8H"/>
        <childnode refid="49056" relation="include">
        </childnode>
        <childnode refid="49078" relation="include">
        </childnode>
        <childnode refid="49060" relation="include">
        </childnode>
        <childnode refid="49139" relation="include">
        </childnode>
        <childnode refid="49101" relation="include">
        </childnode>
        <childnode refid="49129" relation="include">
        </childnode>
      </node>
      <node id="49098">
        <label>AMReX_Loop.H</label>
        <link refid="AMReX__Loop_8H"/>
        <childnode refid="49089" relation="include">
        </childnode>
      </node>
      <node id="49056">
        <label>map</label>
      </node>
      <node id="49143">
        <label>AMReX_MultiFab.H</label>
        <link refid="AMReX__MultiFab_8H"/>
        <childnode refid="49144" relation="include">
        </childnode>
        <childnode refid="49086" relation="include">
        </childnode>
        <childnode refid="49095" relation="include">
        </childnode>
        <childnode refid="49145" relation="include">
        </childnode>
        <childnode refid="49158" relation="include">
        </childnode>
        <childnode refid="49152" relation="include">
        </childnode>
      </node>
      <node id="49105">
        <label>unordered_set</label>
      </node>
      <node id="49157">
        <label>AMReX_FabArrayCommI.H</label>
        <link refid="AMReX__FabArrayCommI_8H"/>
      </node>
      <node id="49156">
        <label>AMReX_LayoutData.H</label>
        <link refid="AMReX__LayoutData_8H"/>
        <childnode refid="49153" relation="include">
        </childnode>
        <childnode refid="49155" relation="include">
        </childnode>
      </node>
      <node id="49053">
        <label>fstream</label>
      </node>
      <node id="49147">
        <label>AMReX_Geometry.H</label>
        <link refid="AMReX__Geometry_8H"/>
        <childnode refid="49071" relation="include">
        </childnode>
        <childnode refid="49056" relation="include">
        </childnode>
        <childnode refid="49076" relation="include">
        </childnode>
        <childnode refid="49148" relation="include">
        </childnode>
        <childnode refid="49115" relation="include">
        </childnode>
        <childnode refid="49149" relation="include">
        </childnode>
        <childnode refid="49152" relation="include">
        </childnode>
      </node>
      <node id="49155">
        <label>AMReX_MFIter.H</label>
        <link refid="AMReX__MFIter_8H"/>
        <childnode refid="49078" relation="include">
        </childnode>
        <childnode refid="49101" relation="include">
        </childnode>
        <childnode refid="49153" relation="include">
        </childnode>
        <childnode refid="49070" relation="include">
        </childnode>
        <childnode refid="49095" relation="include">
        </childnode>
        <childnode refid="49149" relation="include">
        </childnode>
        <childnode refid="49124" relation="include">
        </childnode>
      </node>
      <node id="49091">
        <label>AMReX_ArrayLim.H</label>
        <link refid="AMReX__ArrayLim_8H"/>
        <childnode refid="49067" relation="include">
        </childnode>
      </node>
      <node id="49149">
        <label>AMReX_RealBox.H</label>
        <link refid="AMReX__RealBox_8H"/>
        <childnode refid="49071" relation="include">
        </childnode>
        <childnode refid="49077" relation="include">
        </childnode>
        <childnode refid="49076" relation="include">
        </childnode>
        <childnode refid="49087" relation="include">
        </childnode>
        <childnode refid="49067" relation="include">
        </childnode>
        <childnode refid="49089" relation="include">
        </childnode>
        <childnode refid="49150" relation="include">
        </childnode>
      </node>
      <node id="49076">
        <label>AMReX_Array.H</label>
        <link refid="AMReX__Array_8H"/>
        <childnode refid="49077" relation="include">
        </childnode>
        <childnode refid="49078" relation="include">
        </childnode>
        <childnode refid="49055" relation="include">
        </childnode>
        <childnode refid="49054" relation="include">
        </childnode>
        <childnode refid="49052" relation="include">
        </childnode>
        <childnode refid="49079" relation="include">
        </childnode>
        <childnode refid="49051" relation="include">
        </childnode>
        <childnode refid="49080" relation="include">
        </childnode>
        <childnode refid="49081" relation="include">
        </childnode>
        <childnode refid="49085" relation="include">
        </childnode>
        <childnode refid="49086" relation="include">
        </childnode>
        <childnode refid="49069" relation="include">
        </childnode>
        <childnode refid="49067" relation="include">
        </childnode>
      </node>
      <node id="49137">
        <label>AMReX_GpuReduce.H</label>
        <link refid="AMReX__GpuReduce_8H"/>
        <childnode refid="49081" relation="include">
        </childnode>
        <childnode refid="49085" relation="include">
        </childnode>
        <childnode refid="49108" relation="include">
        </childnode>
      </node>
      <node id="49069">
        <label>AMReX_SPACE.H</label>
        <link refid="AMReX__SPACE_8H"/>
      </node>
      <node id="49064">
        <label>AMReX_CommProfStats.H</label>
        <link refid="AMReX__CommProfStats_8H"/>
        <childnode refid="49065" relation="include">
        </childnode>
        <childnode refid="49066" relation="include">
        </childnode>
        <childnode refid="49069" relation="include">
        </childnode>
        <childnode refid="49076" relation="include">
        </childnode>
        <childnode refid="49087" relation="include">
        </childnode>
        <childnode refid="49070" relation="include">
        </childnode>
        <childnode refid="49089" relation="include">
        </childnode>
        <childnode refid="49095" relation="include">
        </childnode>
        <childnode refid="49143" relation="include">
        </childnode>
        <childnode refid="49051" relation="include">
        </childnode>
        <childnode refid="49052" relation="include">
        </childnode>
        <childnode refid="49053" relation="include">
        </childnode>
        <childnode refid="49054" relation="include">
        </childnode>
        <childnode refid="49056" relation="include">
        </childnode>
        <childnode refid="49057" relation="include">
        </childnode>
        <childnode refid="49058" relation="include">
        </childnode>
        <childnode refid="49118" relation="include">
        </childnode>
        <childnode refid="49079" relation="include">
        </childnode>
        <childnode refid="49159" relation="include">
        </childnode>
      </node>
      <node id="49154">
        <label>AMReX_ParallelReduce.H</label>
        <link refid="AMReX__ParallelReduce_8H"/>
        <childnode refid="49080" relation="include">
        </childnode>
        <childnode refid="49115" relation="include">
        </childnode>
        <childnode refid="49139" relation="include">
        </childnode>
        <childnode refid="49087" relation="include">
        </childnode>
        <childnode refid="49097" relation="include">
        </childnode>
      </node>
      <node id="49068">
        <label>AMReX_Extension.H</label>
        <link refid="AMReX__Extension_8H"/>
      </node>
      <node id="49125">
        <label>AMReX_GpuLaunch.H</label>
        <link refid="AMReX__GpuLaunch_8H"/>
        <childnode refid="49081" relation="include">
        </childnode>
        <childnode refid="49085" relation="include">
        </childnode>
        <childnode refid="49126" relation="include">
        </childnode>
        <childnode refid="49127" relation="include">
        </childnode>
        <childnode refid="49129" relation="include">
        </childnode>
        <childnode refid="49089" relation="include">
        </childnode>
        <childnode refid="49098" relation="include">
        </childnode>
        <childnode refid="49068" relation="include">
        </childnode>
        <childnode refid="49086" relation="include">
        </childnode>
        <childnode refid="49128" relation="include">
        </childnode>
        <childnode refid="49102" relation="include">
        </childnode>
        <childnode refid="49060" relation="include">
        </childnode>
        <childnode refid="49059" relation="include">
        </childnode>
        <childnode refid="49130" relation="include">
        </childnode>
        <childnode refid="49131" relation="include">
        </childnode>
      </node>
      <node id="49110">
        <label>sys/types.h</label>
      </node>
      <node id="49152">
        <label>AMReX_Periodicity.H</label>
        <link refid="AMReX__Periodicity_8H"/>
        <childnode refid="49070" relation="include">
        </childnode>
        <childnode refid="49089" relation="include">
        </childnode>
        <childnode refid="49058" relation="include">
        </childnode>
      </node>
      <node id="49122">
        <label>typeinfo</label>
      </node>
      <node id="49051">
        <label>cstdio</label>
      </node>
      <node id="49128">
        <label>AMReX_TypeTraits.H</label>
        <link refid="AMReX__TypeTraits_8H"/>
        <childnode refid="49097" relation="include">
        </childnode>
        <childnode refid="49068" relation="include">
        </childnode>
      </node>
      <node id="49085">
        <label>AMReX_GpuControl.H</label>
        <link refid="AMReX__GpuControl_8H"/>
        <childnode refid="49081" relation="include">
        </childnode>
      </node>
      <node id="49117">
        <label>AMReX_BLBackTrace.H</label>
        <link refid="AMReX__BLBackTrace_8H"/>
        <childnode refid="49118" relation="include">
        </childnode>
        <childnode refid="49054" relation="include">
        </childnode>
        <childnode refid="49055" relation="include">
        </childnode>
        <childnode refid="49079" relation="include">
        </childnode>
        <childnode refid="49051" relation="include">
        </childnode>
        <childnode refid="49072" relation="include">
        </childnode>
        <childnode refid="49119" relation="include">
        </childnode>
        <childnode refid="49120" relation="include">
        </childnode>
        <childnode refid="49121" relation="include">
        </childnode>
      </node>
      <node id="49111">
        <label>unistd.h</label>
      </node>
      <node id="49118">
        <label>stack</label>
      </node>
      <node id="49058">
        <label>vector</label>
      </node>
      <node id="49142">
        <label>AMReX_FabFactory.H</label>
        <link refid="AMReX__FabFactory_8H"/>
        <childnode refid="49089" relation="include">
        </childnode>
        <childnode refid="49139" relation="include">
        </childnode>
        <childnode refid="49107" relation="include">
        </childnode>
        <childnode refid="49087" relation="include">
        </childnode>
        <childnode refid="49101" relation="include">
        </childnode>
      </node>
      <node id="49086">
        <label>AMReX_BLassert.H</label>
        <link refid="AMReX__BLassert_8H"/>
        <childnode refid="49080" relation="include">
        </childnode>
      </node>
      <node id="49081">
        <label>AMReX_GpuQualifiers.H</label>
        <link refid="AMReX__GpuQualifiers_8H"/>
      </node>
      <node id="49055">
        <label>utility</label>
      </node>
      <node id="49077">
        <label>array</label>
      </node>
      <node id="49145">
        <label>AMReX_FabArray.H</label>
        <link refid="AMReX__FabArray_8H"/>
        <childnode refid="49052" relation="include">
        </childnode>
        <childnode refid="49134" relation="include">
        </childnode>
        <childnode refid="49060" relation="include">
        </childnode>
        <childnode refid="49056" relation="include">
        </childnode>
        <childnode refid="49055" relation="include">
        </childnode>
        <childnode refid="49058" relation="include">
        </childnode>
        <childnode refid="49059" relation="include">
        </childnode>
        <childnode refid="49062" relation="include">
        </childnode>
        <childnode refid="49054" relation="include">
        </childnode>
        <childnode refid="49086" relation="include">
        </childnode>
        <childnode refid="49076" relation="include">
        </childnode>
        <childnode refid="49087" relation="include">
        </childnode>
        <childnode refid="49089" relation="include">
        </childnode>
        <childnode refid="49080" relation="include">
        </childnode>
        <childnode refid="49113" relation="include">
        </childnode>
        <childnode refid="49146" relation="include">
        </childnode>
        <childnode refid="49142" relation="include">
        </childnode>
        <childnode refid="49114" relation="include">
        </childnode>
        <childnode refid="49147" relation="include">
        </childnode>
        <childnode refid="49115" relation="include">
        </childnode>
        <childnode refid="49108" relation="include">
        </childnode>
        <childnode refid="49075" relation="include">
        </childnode>
        <childnode refid="49066" relation="include">
        </childnode>
        <childnode refid="49152" relation="include">
        </childnode>
        <childnode refid="49139" relation="include">
        </childnode>
        <childnode refid="49153" relation="include">
        </childnode>
        <childnode refid="49155" relation="include">
        </childnode>
        <childnode refid="49107" relation="include">
        </childnode>
        <childnode refid="49128" relation="include">
        </childnode>
        <childnode refid="49156" relation="include">
        </childnode>
        <childnode refid="49096" relation="include">
        </childnode>
        <childnode refid="49124" relation="include">
        </childnode>
        <childnode refid="49157" relation="include">
        </childnode>
      </node>
      <node id="49095">
        <label>AMReX_FArrayBox.H</label>
        <link refid="AMReX__FArrayBox_8H"/>
        <childnode refid="49089" relation="include">
        </childnode>
        <childnode refid="49096" relation="include">
        </childnode>
        <childnode refid="49067" relation="include">
        </childnode>
        <childnode refid="49069" relation="include">
        </childnode>
        <childnode refid="49142" relation="include">
        </childnode>
        <childnode refid="49073" relation="include">
        </childnode>
      </node>
      <node id="49079">
        <label>sstream</label>
      </node>
      <node id="49158">
        <label>AMReX_FabArrayUtility.H</label>
        <link refid="AMReX__FabArrayUtility_8H"/>
        <childnode refid="49145" relation="include">
        </childnode>
        <childnode refid="49156" relation="include">
        </childnode>
        <childnode refid="49139" relation="include">
        </childnode>
        <childnode refid="49060" relation="include">
        </childnode>
      </node>
      <node id="49082">
        <label>AMReX_Exception.H</label>
        <link refid="AMReX__Exception_8H"/>
        <childnode refid="49083" relation="include">
        </childnode>
      </node>
      <node id="49065">
        <label>AMReX_BLProfStats.H</label>
        <link refid="AMReX__BLProfStats_8H"/>
        <childnode refid="49066" relation="include">
        </childnode>
        <childnode refid="49069" relation="include">
        </childnode>
        <childnode refid="49070" relation="include">
        </childnode>
        <childnode refid="49089" relation="include">
        </childnode>
        <childnode refid="49095" relation="include">
        </childnode>
        <childnode refid="49143" relation="include">
        </childnode>
        <childnode refid="49051" relation="include">
        </childnode>
        <childnode refid="49052" relation="include">
        </childnode>
        <childnode refid="49053" relation="include">
        </childnode>
        <childnode refid="49054" relation="include">
        </childnode>
        <childnode refid="49062" relation="include">
        </childnode>
        <childnode refid="49056" relation="include">
        </childnode>
        <childnode refid="49079" relation="include">
        </childnode>
      </node>
      <node id="49090">
        <label>AMReX_Algorithm.H</label>
        <link refid="AMReX__Algorithm_8H"/>
        <childnode refid="49059" relation="include">
        </childnode>
        <childnode refid="49081" relation="include">
        </childnode>
        <childnode refid="49068" relation="include">
        </childnode>
        <childnode refid="49088" relation="include">
        </childnode>
      </node>
      <node id="49127">
        <label>AMReX_GpuRange.H</label>
        <link refid="AMReX__GpuRange_8H"/>
        <childnode refid="49081" relation="include">
        </childnode>
        <childnode refid="49085" relation="include">
        </childnode>
        <childnode refid="49126" relation="include">
        </childnode>
        <childnode refid="49089" relation="include">
        </childnode>
        <childnode refid="49128" relation="include">
        </childnode>
      </node>
      <node id="49115">
        <label>AMReX_ParallelDescriptor.H</label>
        <link refid="AMReX__ParallelDescriptor_8H"/>
        <childnode refid="49075" relation="include">
        </childnode>
        <childnode refid="49116" relation="include">
        </childnode>
        <childnode refid="49117" relation="include">
        </childnode>
        <childnode refid="49066" relation="include">
        </childnode>
        <childnode refid="49086" relation="include">
        </childnode>
        <childnode refid="49067" relation="include">
        </childnode>
        <childnode refid="49076" relation="include">
        </childnode>
        <childnode refid="49087" relation="include">
        </childnode>
        <childnode refid="49089" relation="include">
        </childnode>
        <childnode refid="49052" relation="include">
        </childnode>
        <childnode refid="49058" relation="include">
        </childnode>
        <childnode refid="49054" relation="include">
        </childnode>
        <childnode refid="49122" relation="include">
        </childnode>
        <childnode refid="49059" relation="include">
        </childnode>
        <childnode refid="49084" relation="include">
        </childnode>
        <childnode refid="49060" relation="include">
        </childnode>
        <childnode refid="49123" relation="include">
        </childnode>
      </node>
      <node id="49108">
        <label>AMReX_Utility.H</label>
        <link refid="AMReX__Utility_8H"/>
        <childnode refid="49072" relation="include">
        </childnode>
        <childnode refid="49052" relation="include">
        </childnode>
        <childnode refid="49054" relation="include">
        </childnode>
        <childnode refid="49056" relation="include">
        </childnode>
        <childnode refid="49109" relation="include">
        </childnode>
        <childnode refid="49097" relation="include">
        </childnode>
        <childnode refid="49110" relation="include">
        </childnode>
        <childnode refid="49111" relation="include">
        </childnode>
        <childnode refid="49112" relation="include">
        </childnode>
        <childnode refid="49086" relation="include">
        </childnode>
        <childnode refid="49067" relation="include">
        </childnode>
        <childnode refid="49076" relation="include">
        </childnode>
        <childnode refid="49087" relation="include">
        </childnode>
        <childnode refid="49089" relation="include">
        </childnode>
        <childnode refid="49113" relation="include">
        </childnode>
        <childnode refid="49114" relation="include">
        </childnode>
        <childnode refid="49115" relation="include">
        </childnode>
      </node>
      <node id="49050">
        <label>/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp</label>
        <link refid="AMReX_CommProfStats.cpp"/>
        <childnode refid="49051" relation="include">
        </childnode>
        <childnode refid="49052" relation="include">
        </childnode>
        <childnode refid="49053" relation="include">
        </childnode>
        <childnode refid="49054" relation="include">
        </childnode>
        <childnode refid="49055" relation="include">
        </childnode>
        <childnode refid="49056" relation="include">
        </childnode>
        <childnode refid="49057" relation="include">
        </childnode>
        <childnode refid="49058" relation="include">
        </childnode>
        <childnode refid="49059" relation="include">
        </childnode>
        <childnode refid="49060" relation="include">
        </childnode>
        <childnode refid="49061" relation="include">
        </childnode>
        <childnode refid="49062" relation="include">
        </childnode>
        <childnode refid="49063" relation="include">
        </childnode>
        <childnode refid="49064" relation="include">
        </childnode>
        <childnode refid="49108" relation="include">
        </childnode>
        <childnode refid="49070" relation="include">
        </childnode>
        <childnode refid="49089" relation="include">
        </childnode>
        <childnode refid="49095" relation="include">
        </childnode>
        <childnode refid="49115" relation="include">
        </childnode>
        <childnode refid="49160" relation="include">
        </childnode>
      </node>
      <node id="49101">
        <label>AMReX_Arena.H</label>
        <link refid="AMReX__Arena_8H"/>
        <childnode refid="49086" relation="include">
        </childnode>
        <childnode refid="49102" relation="include">
        </childnode>
        <childnode refid="49072" relation="include">
        </childnode>
      </node>
      <node id="49093">
        <label>AMReX_Orientation.H</label>
        <link refid="AMReX__Orientation_8H"/>
        <childnode refid="49071" relation="include">
        </childnode>
        <childnode refid="49086" relation="include">
        </childnode>
        <childnode refid="49069" relation="include">
        </childnode>
        <childnode refid="49081" relation="include">
        </childnode>
      </node>
      <node id="49088">
        <label>AMReX_Dim3.H</label>
        <link refid="AMReX__Dim3_8H"/>
        <childnode refid="49052" relation="include">
        </childnode>
        <childnode refid="49067" relation="include">
        </childnode>
        <childnode refid="49076" relation="include">
        </childnode>
      </node>
      <node id="49112">
        <label>sys/wait.h</label>
      </node>
      <node id="49071">
        <label>iosfwd</label>
      </node>
      <node id="49072">
        <label>cstdlib</label>
      </node>
      <node id="49121">
        <label>cfenv</label>
      </node>
      <node id="49063">
        <label>sys/time.h</label>
      </node>
      <node id="49052">
        <label>iostream</label>
      </node>
      <node id="49092">
        <label>AMReX_IndexType.H</label>
        <link refid="AMReX__IndexType_8H"/>
        <childnode refid="49071" relation="include">
        </childnode>
        <childnode refid="49075" relation="include">
        </childnode>
        <childnode refid="49070" relation="include">
        </childnode>
        <childnode refid="49069" relation="include">
        </childnode>
      </node>
      <node id="49094">
        <label>AMReX_Array4.H</label>
        <link refid="AMReX__Array4_8H"/>
        <childnode refid="49070" relation="include">
        </childnode>
      </node>
      <node id="49102">
        <label>cstddef</label>
      </node>
      <node id="49057">
        <label>unordered_map</label>
      </node>
      <node id="49146">
        <label>AMReX_BoxDomain.H</label>
        <link refid="AMReX__BoxDomain_8H"/>
        <childnode refid="49071" relation="include">
        </childnode>
        <childnode refid="49092" relation="include">
        </childnode>
        <childnode refid="49089" relation="include">
        </childnode>
        <childnode refid="49070" relation="include">
        </childnode>
        <childnode refid="49099" relation="include">
        </childnode>
      </node>
      <node id="49124">
        <label>AMReX_Gpu.H</label>
        <link refid="AMReX__Gpu_8H"/>
        <childnode refid="49081" relation="include">
        </childnode>
        <childnode refid="49085" relation="include">
        </childnode>
        <childnode refid="49125" relation="include">
        </childnode>
        <childnode refid="49126" relation="include">
        </childnode>
        <childnode refid="49132" relation="include">
        </childnode>
        <childnode refid="49129" relation="include">
        </childnode>
        <childnode refid="49133" relation="include">
        </childnode>
        <childnode refid="49135" relation="include">
        </childnode>
        <childnode refid="49136" relation="include">
        </childnode>
        <childnode refid="49127" relation="include">
        </childnode>
        <childnode refid="49137" relation="include">
        </childnode>
        <childnode refid="49138" relation="include">
        </childnode>
        <childnode refid="49140" relation="include">
        </childnode>
        <childnode refid="49141" relation="include">
        </childnode>
      </node>
      <node id="49074">
        <label>climits</label>
      </node>
      <node id="49141">
        <label>AMReX_CudaGraph.H</label>
        <link refid="AMReX__CudaGraph_8H"/>
      </node>
      <node id="49104">
        <label>mutex</label>
      </node>
      <node id="49109">
        <label>chrono</label>
      </node>
      <node id="49130">
        <label>AMReX_GpuLaunchMacrosC.H</label>
        <link refid="AMReX__GpuLaunchMacrosC_8H"/>
      </node>
      <node id="49120">
        <label>csignal</label>
      </node>
      <node id="49103">
        <label>AMReX_CArena.H</label>
        <link refid="AMReX__CArena_8H"/>
        <childnode refid="49102" relation="include">
        </childnode>
        <childnode refid="49062" relation="include">
        </childnode>
        <childnode refid="49058" relation="include">
        </childnode>
        <childnode refid="49104" relation="include">
        </childnode>
        <childnode refid="49105" relation="include">
        </childnode>
        <childnode refid="49084" relation="include">
        </childnode>
        <childnode refid="49101" relation="include">
        </childnode>
      </node>
      <node id="49097">
        <label>type_traits</label>
      </node>
      <node id="49062">
        <label>set</label>
      </node>
      <node id="49100">
        <label>AMReX_BArena.H</label>
        <link refid="AMReX__BArena_8H"/>
        <childnode refid="49101" relation="include">
        </childnode>
      </node>
      <node id="49075">
        <label>AMReX_ccse-mpi.H</label>
        <link refid="AMReX__ccse-mpi_8H"/>
      </node>
      <node id="49135">
        <label>AMReX_GpuElixir.H</label>
        <link refid="AMReX__GpuElixir_8H"/>
        <childnode refid="49101" relation="include">
        </childnode>
      </node>
      <node id="49059">
        <label>algorithm</label>
      </node>
      <node id="49129">
        <label>AMReX_GpuDevice.H</label>
        <link refid="AMReX__GpuDevice_8H"/>
        <childnode refid="49072" relation="include">
        </childnode>
        <childnode refid="49078" relation="include">
        </childnode>
        <childnode refid="49077" relation="include">
        </childnode>
        <childnode refid="49080" relation="include">
        </childnode>
        <childnode refid="49108" relation="include">
        </childnode>
        <childnode refid="49126" relation="include">
        </childnode>
        <childnode refid="49085" relation="include">
        </childnode>
      </node>
      <node id="49119">
        <label>execinfo.h</label>
      </node>
      <node id="49134">
        <label>cstring</label>
      </node>
      <node id="49160">
        <label>AMReX_BLProfUtilities.H</label>
        <link refid="AMReX__BLProfUtilities_8H"/>
        <childnode refid="49054" relation="include">
        </childnode>
        <childnode refid="49134" relation="include">
        </childnode>
        <childnode refid="49122" relation="include">
        </childnode>
        <childnode refid="49065" relation="include">
        </childnode>
        <childnode refid="49064" relation="include">
        </childnode>
        <childnode refid="49161" relation="include">
        </childnode>
        <childnode refid="49087" relation="include">
        </childnode>
      </node>
      <node id="49150">
        <label>AMReX_RealVect.H</label>
        <link refid="AMReX__RealVect_8H"/>
        <childnode refid="49102" relation="include">
        </childnode>
        <childnode refid="49072" relation="include">
        </childnode>
        <childnode refid="49134" relation="include">
        </childnode>
        <childnode refid="49052" relation="include">
        </childnode>
        <childnode refid="49073" relation="include">
        </childnode>
        <childnode refid="49089" relation="include">
        </childnode>
        <childnode refid="49067" relation="include">
        </childnode>
        <childnode refid="49069" relation="include">
        </childnode>
        <childnode refid="49058" relation="include">
        </childnode>
        <childnode refid="49151" relation="include">
        </childnode>
        <childnode refid="49070" relation="include">
        </childnode>
      </node>
      <node id="49148">
        <label>AMReX_CoordSys.H</label>
        <link refid="AMReX__CoordSys_8H"/>
        <childnode refid="49060" relation="include">
        </childnode>
        <childnode refid="49080" relation="include">
        </childnode>
        <childnode refid="49067" relation="include">
        </childnode>
        <childnode refid="49076" relation="include">
        </childnode>
        <childnode refid="49087" relation="include">
        </childnode>
        <childnode refid="49089" relation="include">
        </childnode>
      </node>
      <node id="49078">
        <label>memory</label>
      </node>
      <node id="49133">
        <label>AMReX_GpuAsyncArray.H</label>
        <link refid="AMReX__GpuAsyncArray_8H"/>
        <childnode refid="49102" relation="include">
        </childnode>
        <childnode refid="49134" relation="include">
        </childnode>
        <childnode refid="49072" relation="include">
        </childnode>
        <childnode refid="49078" relation="include">
        </childnode>
        <childnode refid="49101" relation="include">
        </childnode>
        <childnode refid="49128" relation="include">
        </childnode>
        <childnode refid="49129" relation="include">
        </childnode>
      </node>
      <node id="49136">
        <label>AMReX_GpuMemory.H</label>
        <link refid="AMReX__GpuMemory_8H"/>
        <childnode refid="49081" relation="include">
        </childnode>
        <childnode refid="49085" relation="include">
        </childnode>
        <childnode refid="49129" relation="include">
        </childnode>
        <childnode refid="49128" relation="include">
        </childnode>
        <childnode refid="49101" relation="include">
        </childnode>
        <childnode refid="49072" relation="include">
        </childnode>
      </node>
      <node id="49067">
        <label>AMReX_REAL.H</label>
        <link refid="AMReX__REAL_8H"/>
        <childnode refid="49068" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" prot="public" static="no">
        <name>SHOWVAL</name>
        <param><defname>val</defname></param>
        <initializer>{ cout &lt;&lt; #val &lt;&lt; &quot; = &quot; &lt;&lt; val &lt;&lt; endl; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" line="43" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="AMReX__CommProfStats_8cpp_1af68414f680b0fb5446013e51c08bc58b" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box topoBox</definition>
        <argsstring></argsstring>
        <name>topoBox</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" line="57" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="AMReX__CommProfStats_8cpp_1a1d82677f3cfb77d191834b8c0c6e350e" prot="public" static="no" mutable="no">
        <type>std::map&lt; int, <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt;</type>
        <definition>std::map&lt;int, IntVect&gt; pNumTopIVMap</definition>
        <argsstring></argsstring>
        <name>pNumTopIVMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" line="58" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="AMReX__CommProfStats_8cpp_1aa47c5b8f4f5bd6461d8e497d965742dd" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; procNodeNumber</definition>
        <argsstring></argsstring>
        <name>procNodeNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" line="60" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="AMReX__CommProfStats_8cpp_1a0b54508652b2932ee5c008a007ac1b1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int XDIR</definition>
        <argsstring>(0)</argsstring>
        <name>XDIR</name>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__CommProfStats_8cpp_1a82ff102a1952ad4ab549505b10f24456" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int YDIR</definition>
        <argsstring>(1)</argsstring>
        <name>YDIR</name>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__CommProfStats_8cpp_1a9eaad985fc3700bfc26c0ce411504f81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int ZDIR</definition>
        <argsstring>(2)</argsstring>
        <name>ZDIR</name>
        <param>
          <type>2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__CommProfStats_8cpp_1aafb2ddde567eb3472db5487e1baa09aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bExitTimesDone</definition>
        <argsstring>(false)</argsstring>
        <name>bExitTimesDone</name>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__CommProfStats_8cpp_1ad6e9a97e80532d3b7686c5096087c06e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bSkewTimesDone</definition>
        <argsstring>(false)</argsstring>
        <name>bSkewTimesDone</name>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__CommProfStats_8cpp_1a61756f82d2fe93c1d6cc04bd635fc4c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nTopPts</definition>
        <argsstring>(0)</argsstring>
        <name>nTopPts</name>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__CommProfStats_8cpp_1a5499430eba2a089dfb688e261d488394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int maxTopNodeNum</definition>
        <argsstring>(0)</argsstring>
        <name>maxTopNodeNum</name>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__CommProfStats_8cpp_1ae404b1aaff5433c3067ba025a8cffc52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bTopoFabInited</definition>
        <argsstring>(false)</argsstring>
        <name>bTopoFabInited</name>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__CommProfStats_8cpp_1af8ad0cca4f81d8ff59fd0b98787b2f11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect TopIVFromProcNumber</definition>
        <argsstring>(const int procnum)</argsstring>
        <name>TopIVFromProcNumber</name>
        <param>
          <type>const int</type>
          <declname>procnum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" line="92" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" bodystart="92" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__CommProfStats_8cpp_1a0558403f16fa49e0033c74e50d353b40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const CommProfStats::BarrierEntry &amp;be)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structCommProfStats_1_1BarrierEntry" kindref="compound">CommProfStats::BarrierEntry</ref> &amp;</type>
          <declname>be</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" line="1880" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp" bodystart="1880" bodyend="1885"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>CommProfStats.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::cout;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::endl;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::flush;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::string;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::ifstream;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::map;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::unordered_map;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::unordered_multimap;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::vector;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::pair;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__CommProfStats_8H" kindref="compound">AMReX_CommProfStats.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Utility_8H" kindref="compound">AMReX_Utility.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__IntVect_8H" kindref="compound">AMReX_IntVect.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Box_8H" kindref="compound">AMReX_Box.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__FArrayBox_8H" kindref="compound">AMReX_FArrayBox.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__ParallelDescriptor_8H" kindref="compound">AMReX_ParallelDescriptor.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__BLProfUtilities_8H" kindref="compound">AMReX_BLProfUtilities.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceamrex" kindref="compound">amrex</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;omp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHOWVAL(val)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/>#val<sp/>&lt;&lt;<sp/>&quot;<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>val<sp/>&lt;&lt;<sp/>endl;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="AMReX__CommProfStats_8cpp_1a0b54508652b2932ee5c008a007ac1b1d" kindref="member">XDIR</ref>(0);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="AMReX__CommProfStats_8cpp_1a82ff102a1952ad4ab549505b10f24456" kindref="member">YDIR</ref>(1);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="AMReX__CommProfStats_8cpp_1a9eaad985fc3700bfc26c0ce411504f81" kindref="member">ZDIR</ref>(2);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//Vector&lt;Vector&lt;Real&gt;<sp/>&gt;<sp/>barrierExitTimes;<sp/><sp/>//<sp/>[proc,<sp/>bnum]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//Vector&lt;Vector&lt;Real&gt;<sp/>&gt;<sp/>barrierSkewTimes;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="AMReX__CommProfStats_8cpp_1aafb2ddde567eb3472db5487e1baa09aa" kindref="member">bExitTimesDone</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="AMReX__CommProfStats_8cpp_1ad6e9a97e80532d3b7686c5096087c06e" kindref="member">bSkewTimesDone</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="AMReX__CommProfStats_8cpp_1a61756f82d2fe93c1d6cc04bd635fc4c2" kindref="member">nTopPts</ref>(0);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="AMReX__CommProfStats_8cpp_1a5499430eba2a089dfb688e261d488394" kindref="member">maxTopNodeNum</ref>(0);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/><ref refid="AMReX__CommProfStats_8cpp_1af68414f680b0fb5446013e51c08bc58b" kindref="member">topoBox</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">std::map&lt;int,<sp/>IntVect&gt;<sp/><ref refid="AMReX__CommProfStats_8cpp_1a1d82677f3cfb77d191834b8c0c6e350e" kindref="member">pNumTopIVMap</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>[procNumber,<sp/>topological<sp/>iv<sp/>position]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="AMReX__CommProfStats_8cpp_1ae404b1aaff5433c3067ba025a8cffc52" kindref="member">bTopoFabInited</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/><ref refid="AMReX__CommProfStats_8cpp_1aa47c5b8f4f5bd6461d8e497d965742dd" kindref="member">procNodeNumber</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a923e282e808775e9fb1578d7f41c1829" kindref="member">CommProfStats::bInitDataBlocks</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/><ref refid="classCommProfStats_1a561c5c27d7af6c7cf8fceddc00afb95e" kindref="member">CommProfStats::rankFromProx</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>[prox]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/><ref refid="classCommProfStats_1ae110ab5fe019cb5431f8954c51355933" kindref="member">CommProfStats::proxFromRank</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>[rank]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a75483e35d9c71b281451d66142e996b9" kindref="member">CommProfStats::bProxMapOK</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a176ee76d60863bf10f9b663c21c00a38" kindref="member">CommProfStats::persistentStreams</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a59273fedbb862c290ba63a251a024ed3" kindref="member">CommProfStats::cpVersion</ref>(-1);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1af705693efa58487843e7624857f94399" kindref="member">CommProfStats::csSize</ref>(-1);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1af6ce90c319a7c5388903fcfc2aae1f43" kindref="member">CommProfStats::finestLevel</ref>(-1);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a94641396a054d091cc6c5972397b83c9" kindref="member">CommProfStats::maxLevel</ref>(-1);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;IntVect&gt;</ref><sp/><ref refid="classCommProfStats_1a71a0a4c9fbfae52c4da448c6ac832319" kindref="member">CommProfStats::calcRefRatios</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Box&gt;</ref><sp/><ref refid="classCommProfStats_1abaab22e72988e0a65438fde205822073" kindref="member">CommProfStats::probDomain</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::string&gt;</ref><sp/><ref refid="classCommProfStats_1a2b9a45f7bb2aa14db0f2c0c5ec7b6877" kindref="member">CommProfStats::commHeaderFileNames</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">std::map&lt;std::string,<sp/>int&gt;<sp/><ref refid="classCommProfStats_1a3ed80c76ea0624f5f2e6eb77e6d759e3" kindref="member">CommProfStats::commDataFileNames</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::ifstream *&gt;</ref><sp/><ref refid="classCommProfStats_1a7157e096127303084fbae1e6c5929e01" kindref="member">CommProfStats::commDataStreams</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1ace32984e953e92b236d8e765dd2baaf6" kindref="member">amrex::NHops</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/>&amp;tbox,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref><sp/>&amp;ivfrom,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref><sp/>&amp;ivto);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aa2acbc851871868eb313f35d3512e986" kindref="member">amrex::Write2DFab</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;filenameprefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xdim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ydim,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a0e9acfad7e7501e9ff98d50a73b1382a" kindref="member">amrex::Write2DText</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;filenameprefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xdim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ydim,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1c02ea7752fae69fe9fb9e7f9c3e6f4f" kindref="member">amrex::Write3DFab</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;filenameprefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xdim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ydim,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zdim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a6d17597e95ab560d6e8db9bd3bc5c3d5" kindref="member">amrex::WriteFab</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;filenameprefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xdim,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ydim,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref><sp/><ref refid="AMReX__CommProfStats_8cpp_1af8ad0cca4f81d8ff59fd0b98787b2f11" kindref="member">TopIVFromProcNumber</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>procnum)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref><sp/>iv;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>std::map&lt;int,<sp/>IntVect&gt;::iterator<sp/>it<sp/>=<sp/><ref refid="AMReX__CommProfStats_8cpp_1a1d82677f3cfb77d191834b8c0c6e350e" kindref="member">pNumTopIVMap</ref>.find(procnum);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it<sp/>==<sp/><ref refid="AMReX__CommProfStats_8cpp_1a1d82677f3cfb77d191834b8c0c6e350e" kindref="member">pNumTopIVMap</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error<sp/>in<sp/>TopIVFromProcNumber:<sp/><sp/>procnum<sp/>not<sp/>found:<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>procnum<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>iv<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iv<sp/>!=<sp/><ref refid="AMReX__CommProfStats_8cpp_1a1d82677f3cfb77d191834b8c0c6e350e" kindref="member">pNumTopIVMap</ref>[procnum])<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error<sp/>in<sp/>TopIVFromProcNumber:<sp/><sp/>procnum<sp/>not<sp/>matched:<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>procnum<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iv;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><ref refid="classCommProfStats_1a6fa096e58f6defb29bb83ac4e68643b8" kindref="member">CommProfStats::CommProfStats</ref>()</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>:<sp/><sp/>currentDataBlock(0)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>TopoMap.resize(1);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>dataBlocks.reserve(2048);</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><ref refid="classCommProfStats_1af0dd55e0822e62401a6c87570d101a5c" kindref="member">CommProfStats::~CommProfStats</ref>()<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1ae236d8843e74f0b9defeb6ff27c0df9c" kindref="member">CommProfStats::InitDataFileNames</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::string&gt;</ref><sp/>&amp;hfn)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>hfn.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>dFileName(hfn[i]);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>dFileName.replace(dFileName.find(</highlight><highlight class="stringliteral">&quot;_H_&quot;</highlight><highlight class="normal">),<sp/>3,<sp/></highlight><highlight class="stringliteral">&quot;_D_&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>commDataFileNames.insert(std::pair&lt;std::string,<sp/>int&gt;(dFileName,<sp/>i));</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1acfb90e6b7303a7d0bec5cec72b70aed7" kindref="member">CommProfStats::InitCommDataBlock</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ncommstats,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>seekpos,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;procname,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodenumber)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>streamindex;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>int&gt;::iterator<sp/>it<sp/>=<sp/><sp/>commDataFileNames.find(filename);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it<sp/>==<sp/>commDataFileNames.end())<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>streamindex<sp/>=<sp/>commDataFileNames.size();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>commDataFileNames.insert(std::pair&lt;std::string,<sp/>int&gt;(filename,<sp/>streamindex));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>streamindex<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1a71e8f90f882541f319f641623c1d760f" kindref="member">bInitDataBlocks</ref>)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a59554322d0d460e70099c8eea9729aa1" kindref="member">currentProc</ref><sp/>=<sp/>proc;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>dataBlocks.push_back(DataBlock(proc,<sp/>ncommstats,<sp/>filename,<sp/>seekpos,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>procname,<sp/>nodenumber,<sp/>streamindex));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a1c9f481d55381cf92d0757bb9321c5a4" kindref="member">currentDataBlock</ref><sp/>=<sp/>dataBlocks.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1af04068edae93669e158694c835b0ec0c" kindref="member">CommProfStats::AfterBarrier</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/>if(bExitTimesDone)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/>if(barrierExitTimes[proc][0]<sp/>&gt;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/>for(int<sp/>i(0);<sp/>i<sp/>&lt;<sp/>barrierExitTimes[proc].size()<sp/>-<sp/>1;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if(barrierExitTimes[proc][i<sp/>+<sp/>1]<sp/>&gt;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>i;</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>(barrierExitTimes[proc].size()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>&quot;****<sp/>Error<sp/>in<sp/>AfterBarrier:<sp/><sp/>bExitTimesDone<sp/>==<sp/>false&quot;<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>-1;</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a500f34d9678754d43708a9427b9a6459" kindref="member">CommProfStats::AddBarrier</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>bnum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;bname,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bNameNumber(-1);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>std::map&lt;int,<sp/>std::string&gt;::iterator<sp/>it<sp/>=<sp/><ref refid="classBLProfStats_1a9d4b65df466fc4e6154b2c5b3af454b8" kindref="member">barrierNumbersToNames</ref>.find(bnum);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it<sp/>==<sp/><ref refid="classBLProfStats_1a9d4b65df466fc4e6154b2c5b3af454b8" kindref="member">barrierNumbersToNames</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>bNameNumber<sp/>=<sp/>barrierNames.size();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>barrierNames.push_back(bname);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a9d4b65df466fc4e6154b2c5b3af454b8" kindref="member">barrierNumbersToNames</ref>.insert(std::pair&lt;int,<sp/>std::string&gt;(bNameNumber,<sp/>bname));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>bNameNumber<sp/>=<sp/>bnum;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataBlocks[<ref refid="classBLProfStats_1a1c9f481d55381cf92d0757bb9321c5a4" kindref="member">currentDataBlock</ref>].barriers.size()<sp/>&lt;=<sp/>bnum)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>dataBlocks[<ref refid="classBLProfStats_1a1c9f481d55381cf92d0757bb9321c5a4" kindref="member">currentDataBlock</ref>].barriers.resize(bnum<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>dataBlocks[<ref refid="classBLProfStats_1a1c9f481d55381cf92d0757bb9321c5a4" kindref="member">currentDataBlock</ref>].barriers[bnum]<sp/>=<sp/>BarrierEntry(bnum,<sp/>bname,index,<sp/>bNameNumber);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a997f5a337189e617326bddcfcee83a16" kindref="member">CommProfStats::AddReduction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>rnum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>dataBlocks[<ref refid="classBLProfStats_1a1c9f481d55381cf92d0757bb9321c5a4" kindref="member">currentDataBlock</ref>].reductions.push_back(ReductionEntry(rnum,<sp/>index));</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a8f4075ef4f0bf6ad7016f6b6c8ad85a8" kindref="member">CommProfStats::AddNameTagName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;name)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::find(nameTagNames.begin(),<sp/>nameTagNames.end(),<sp/>name)<sp/>==<sp/>nameTagNames.end())<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>nameTagNames.push_back(name);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1aae68d250eab5fe4721274037a223ea4d" kindref="member">CommProfStats::AddNameTag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ntindex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>seekindex)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>dataBlocks[<ref refid="classBLProfStats_1a1c9f481d55381cf92d0757bb9321c5a4" kindref="member">currentDataBlock</ref>].nameTags.push_back(NameTagEntry(ntindex,<sp/>seekindex));</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a7bc613de3ca4cd25578bdab2205f5bbd" kindref="member">CommProfStats::AddTagRange</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>tmin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>tmax)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>tagMin<sp/>=<sp/>tmin;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>tagMax<sp/>=<sp/>tmax;</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1aab6ae5c2056536ac2d51e6b518c8769f" kindref="member">CommProfStats::AddTimeMinMax</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmax)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>dataBlocks[<ref refid="classBLProfStats_1a1c9f481d55381cf92d0757bb9321c5a4" kindref="member">currentDataBlock</ref>].timeMin<sp/>=<sp/>tmin;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>dataBlocks[<ref refid="classBLProfStats_1a1c9f481d55381cf92d0757bb9321c5a4" kindref="member">currentDataBlock</ref>].timeMax<sp/>=<sp/>tmax;</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1ae8644de4cf3fc15441df7b92f4b50c84" kindref="member">CommProfStats::AddTimerTime</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tt)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>dataBlocks[<ref refid="classBLProfStats_1a1c9f481d55381cf92d0757bb9321c5a4" kindref="member">currentDataBlock</ref>].timerTime<sp/>=<sp/>tt;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//++nTimerTimes;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1ad799bee97a7225cf5229845463be3b7a" kindref="member">CommProfStats::AddGridLevel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ngrids)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1aa2eb7356f3bcac1fa730c2e70b8c2956" kindref="member">CommProfStats::AddGrid3D</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xlo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ylo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zlo,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xhi,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yhi,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zhi,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xc,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yc,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zc,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xn,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yn,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proc)</highlight></codeline>
<codeline lineno="250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>nPoints(xn<sp/>*<sp/>yn<sp/>*<sp/>zn);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>std::map&lt;int,<sp/>long&gt;::iterator<sp/>it<sp/>=<sp/>glMap.find(proc);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it<sp/>==<sp/>glMap.end())<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>glMap.insert(std::make_pair(proc,<sp/>nPoints));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>glMap[proc]<sp/>+=<sp/>nPoints;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nP(nPoints);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>std::map&lt;int,<sp/>int&gt;::iterator<sp/>its<sp/>=<sp/>glSizeMap.find(nP);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(its<sp/>==<sp/>glSizeMap.end())<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>glSizeMap.insert(std::make_pair(nP,<sp/>1));</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>glSizeMap[nP]<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1ad0db4734114f935b8eb1dfd6be4a026e" kindref="member">CommProfStats::AddRefRatio</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref><sp/>&amp;rr)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((level<sp/>+<sp/>1)<sp/>&gt;<sp/>calcRefRatios.size())<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>calcRefRatios.resize(level<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>calcRefRatios[level]<sp/>=<sp/>rr;</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a2c70598493fad7c2700a509ddaf65584" kindref="member">CommProfStats::AddProbDomain</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/>&amp;pd)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((level<sp/>+<sp/>1)<sp/>&gt;<sp/>probDomain.size())<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>probDomain.resize(level<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>probDomain[level]<sp/>=<sp/>pd;</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1ad36a244d17cc3887b94206dcf28f8554" kindref="member">CommProfStats::AddTopoCoord</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>node,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ty,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tz,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>servicenode)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BL_SPACEDIM<sp/>==<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error:<sp/><sp/>CommProfStats::AddTopoCoord<sp/>not<sp/>supported<sp/>for<sp/>2D&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TopoMap.size()<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>TopoMap.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>nid<sp/>node<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nid<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>node<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>TopoMap[node].insert(std::pair&lt;int,<sp/>IntVect&gt;(nid,<sp/><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>(tx,<sp/>ty,<sp/>tz)));</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>++<ref refid="AMReX__CommProfStats_8cpp_1a61756f82d2fe93c1d6cc04bd635fc4c2" kindref="member">nTopPts</ref>;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a5499430eba2a089dfb688e261d488394" kindref="member">maxTopNodeNum</ref><sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(<ref refid="AMReX__CommProfStats_8cpp_1a5499430eba2a089dfb688e261d488394" kindref="member">maxTopNodeNum</ref>,<sp/>node);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a80bb7e3cae00c7db0c7633ebe2be3b38" kindref="member">CommProfStats::AddCommHeaderFileName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;hfn)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::find(commHeaderFileNames.begin(),</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>commHeaderFileNames.end(),<sp/>hfn)<sp/>==<sp/>commHeaderFileNames.end())</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>commHeaderFileNames.push_back(hfn);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a599b15517a65dde41a441be3705e8c01" kindref="member">CommProfStats::InitProxMap</ref>()<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>filename(</highlight><highlight class="stringliteral">&quot;RankProxOrder.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>ifstream<sp/>rpo(filename.c_str());</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>rpo.good())<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>bProxMapOK<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error<sp/>in<sp/>CommProfStats::InitProxMap:<sp/><sp/>cannot<sp/>open<sp/>file.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nprocs,<sp/>r,<sp/>p;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>rpo<sp/>&gt;&gt;<sp/>nprocs;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CommProfStats::InitProxMap:<sp/><sp/>nprocs<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nprocs<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>rankFromProx.resize(nprocs);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>proxFromRank.resize(nprocs);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>nprocs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rpo<sp/>&gt;&gt;<sp/>r<sp/>&gt;&gt;<sp/>p;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rankFromProx[p]<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>proxFromRank[r]<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>rpo.close();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>bProxMapOK<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1ab1e0fdef8849f319d13a3a68234dc68b" kindref="member">CommProfStats::WriteTopoFab</ref>()<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BL_SPACEDIM<sp/>==<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error:<sp/><sp/>CommProfStats::WriteTopoFab<sp/>not<sp/>supported<sp/>for<sp/>2D&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref><sp/>ivmin(100000,<sp/>100000,<sp/>100000);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref><sp/>ivmax(-100000,<sp/>-100000,<sp/>-100000);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>std::map&lt;int,<sp/>IntVect&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>TopoMap.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>TopoMap[i].<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">begin</ref>();<sp/>it<sp/>!=<sp/>TopoMap[i].end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ivmin.min(it-&gt;second);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ivmax.max(it-&gt;second);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/>tDomain(ivmin,<sp/>ivmax);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tDomain<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tDomain<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>npts<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tDomain.numPts()</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>nTopPts<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="AMReX__CommProfStats_8cpp_1a61756f82d2fe93c1d6cc04bd635fc4c2" kindref="member">nTopPts</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>maxTopNodeNum<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="AMReX__CommProfStats_8cpp_1a5499430eba2a089dfb688e261d488394" kindref="member">maxTopNodeNum</ref><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref><sp/>tFab(tDomain,<sp/><ref refid="AMReX__CommProfStats_8cpp_1a5499430eba2a089dfb688e261d488394" kindref="member">maxTopNodeNum</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>tFab.setVal(-1);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>TopoMap.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>TopoMap[i].<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">begin</ref>();<sp/>it<sp/>!=<sp/>TopoMap[i].end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tFab(it-&gt;second,<sp/>i)<sp/>=<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>std::ofstream<sp/>tfout(</highlight><highlight class="stringliteral">&quot;topolcoords.3d.fab&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>tFab.writeOn(tfout);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>tfout.close();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/>tBox(tFab.box());</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;tBox<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tBox<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>ncomp<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tFab.nComp()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>topoBox<sp/>=<sp/>tBox;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nc(0);<sp/>nc<sp/>&lt;<sp/>tFab.nComp();<sp/>++nc)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref><sp/>iv(tBox.smallEnd());<sp/>iv<sp/>&lt;=<sp/>tBox.bigEnd();<sp/>tBox.next(iv))<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pnum(tFab(iv,<sp/>nc));</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pnum<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;&gt;&gt;&gt;&gt;<sp/>iv<sp/>pnum<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>iv<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>pnum<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a1d82677f3cfb77d191834b8c0c6e350e" kindref="member">pNumTopIVMap</ref>.insert(std::pair&lt;int,<sp/>IntVect&gt;(pnum,<sp/>iv));</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//topIVpNumMM.insert(std::pair&lt;IntVect,<sp/>int&gt;(iv,<sp/>pnum));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1ae404b1aaff5433c3067ba025a8cffc52" kindref="member">bTopoFabInited</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a94503fc5a323afaba535e706249a9308" kindref="member">CommProfStats::OpenAllStreams</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;dirname)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa23714eb98f31ba71d565390dae2a7d2" kindref="member">BL_PROFILE_VAR</ref>(</highlight><highlight class="stringliteral">&quot;CommProfStats::OpenAllStreams&quot;</highlight><highlight class="normal">,<sp/>cpsopenallstreams);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>commDataStreams.resize(commDataFileNames.size());</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dsIndex(0);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::map&lt;std::string,<sp/>int&gt;::iterator<sp/>it<sp/>=<sp/>commDataFileNames.begin();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>commDataFileNames.end();<sp/>++it)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>fullFileName(dirname<sp/>+<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>+<sp/>it-&gt;first);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>commDataStreams[dsIndex]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::ifstream(fullFileName.c_str());</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(commDataStreams[dsIndex]-&gt;fail())</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****commDataStreams<sp/>failed.<sp/>Continuing<sp/>without<sp/>persistent<sp/>streams.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>persistentStreams<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a7b427cef2051f4d0bd82f8ecfd172d93" kindref="member">CloseAllStreams</ref>();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>++dsIndex;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a82c334c787872a6bbacabe9a38389224" kindref="member">BL_PROFILE_VAR_STOP</ref>(cpsopenallstreams);</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a1785f1e8537f2cbb475187b787abf6e1" kindref="member">CommProfStats::CloseAllStreams</ref>()<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa23714eb98f31ba71d565390dae2a7d2" kindref="member">BL_PROFILE_VAR</ref>(</highlight><highlight class="stringliteral">&quot;CommProfStats::CloseAllStreams&quot;</highlight><highlight class="normal">,<sp/>cpsclosellstreams);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>commDataStreams.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(commDataStreams[i]<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(commDataStreams[i]-&gt;is_open())</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>commDataStreams[i]-&gt;close();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>commDataStreams[i];</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>commDataStreams[i]<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a82c334c787872a6bbacabe9a38389224" kindref="member">BL_PROFILE_VAR_STOP</ref>(cpsclosellstreams);</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1afbced1780aae9f51df2a3ec897fdc5e7" kindref="member">CommProfStats::ReadCommStats</ref>(DataBlock<sp/>&amp;dBlock)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.vCommStats.size()<sp/>!=<sp/>dBlock.size)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>dBlock.vCommStats.resize(dBlock.size);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>std::string<sp/>fullFileName(<ref refid="classBLProfStats_1a599d00f7afc5dc348ba84e2ad4ab3bb2" kindref="member">dirName</ref><sp/>+<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>+<sp/>dBlock.fileName);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa23714eb98f31ba71d565390dae2a7d2" kindref="member">BL_PROFILE_VAR</ref>(</highlight><highlight class="stringliteral">&quot;OpenStream&quot;</highlight><highlight class="normal">,<sp/>openstream);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>instr(fullFileName.c_str());</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a82c334c787872a6bbacabe9a38389224" kindref="member">BL_PROFILE_VAR_STOP</ref>(openstream);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dataSize(dBlock.size<sp/>*<sp/>csSize);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>instr.seekg(dBlock.seekpos);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>instr.read(reinterpret_cast&lt;char<sp/>*&gt;(dBlock.vCommStats.dataPtr()),<sp/>dataSize);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>instr.close();</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1afe795502ea704a46a029d0e0a9e378ff" kindref="member">CommProfStats::ReadCommStatsNoOpen</ref>(DataBlock<sp/>&amp;dBlock)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.vCommStats.size()<sp/>!=<sp/>dBlock.size)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>dBlock.vCommStats.resize(dBlock.size);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>*instr<sp/>=<sp/>commDataStreams[dBlock.streamIndex];</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dataSize(dBlock.size<sp/>*<sp/>csSize);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>instr-&gt;seekg(dBlock.seekpos);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>instr-&gt;read(reinterpret_cast&lt;char<sp/>*&gt;(dBlock.vCommStats.dataPtr()),<sp/>dataSize);</highlight></codeline>
<codeline lineno="453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1afbced1780aae9f51df2a3ec897fdc5e7" kindref="member">CommProfStats::ReadCommStats</ref>(DataBlock<sp/>&amp;dBlock,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nmessages)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>leftToRead(dBlock.size<sp/>-<sp/>dBlock.readoffset);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>readSize(<ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" kindref="member">std::min</ref>(leftToRead,<sp/>nmessages));</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>readPos(dBlock.seekpos<sp/>+<sp/>dBlock.readoffset<sp/>*<sp/>csSize);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.vCommStats.size()<sp/>!=<sp/>readSize)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>dBlock.vCommStats.resize(readSize);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>std::string<sp/>fullFileName(<ref refid="classBLProfStats_1a599d00f7afc5dc348ba84e2ad4ab3bb2" kindref="member">dirName</ref><sp/>+<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>+<sp/>dBlock.fileName);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>instr(fullFileName.c_str());</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dataSize(readSize<sp/>*<sp/>csSize);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>instr.seekg(readPos);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>instr.read((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)<sp/>dBlock.vCommStats.dataPtr(),<sp/>dataSize);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>instr.close();</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>dBlock.readoffset<sp/>+=<sp/>readSize;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(dBlock.readoffset<sp/>&lt;<sp/>dBlock.size);</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1aab858210acf47eebbfa8549123cb2836" kindref="member">CommProfStats::ClearCommStats</ref>(DataBlock<sp/>&amp;dBlock)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>dBlock.barriers.clear();</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>dBlock.reductions.clear();</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>dBlock.nameTags.clear();</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>dBlock.vCommStats.clear();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;BarrierEntry&gt;</ref>().<ref refid="namespaceamrex_1_1algoim_1_1detail_1a71b582d94d1c5cd614711ec7b7853192" kindref="member">swap</ref>(dBlock.barriers);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>delete<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;ReductionEntry&gt;</ref>().<ref refid="namespaceamrex_1_1algoim_1_1detail_1a71b582d94d1c5cd614711ec7b7853192" kindref="member">swap</ref>(dBlock.reductions);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;NameTagEntry&gt;</ref>().<ref refid="namespaceamrex_1_1algoim_1_1detail_1a71b582d94d1c5cd614711ec7b7853192" kindref="member">swap</ref>(dBlock.nameTags);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;BLProfiler::CommStats&gt;</ref>().<ref refid="namespaceamrex_1_1algoim_1_1detail_1a71b582d94d1c5cd614711ec7b7853192" kindref="member">swap</ref>(dBlock.vCommStats);</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a8c515e8da3ca3c3437cd0b5bd18c656d" kindref="member">CommProfStats::CheckCommData</ref>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>&amp;nBMin,<sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>&amp;nBMax,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>&amp;nRMin,<sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>&amp;nRMax)</highlight></codeline>
<codeline lineno="494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myProc(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>());</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>myProc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;------------------------------------<sp/>checking<sp/>comm<sp/>data.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(<ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(csSize);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(dataBlocks.size());</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>myProc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;----&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>nBarriers(<ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>nReductions(<ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nBMin.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>()<sp/>!=<sp/><ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>nBMin.resize(<ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>,<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::numeric_limits&lt;long&gt;::max</ref>());</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nBMax.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>()<sp/>!=<sp/><ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>nBMax.resize(<ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>,<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" kindref="member">std::numeric_limits&lt;long&gt;::min</ref>());</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nRMin.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>()<sp/>!=<sp/><ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>nRMin.resize(<ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>,<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::numeric_limits&lt;long&gt;::max</ref>());</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nRMax.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>()<sp/>!=<sp/><ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>nRMax.resize(<ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>,<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" kindref="member">std::numeric_limits&lt;long&gt;::min</ref>());</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(idb<sp/>=<sp/>0;<sp/>idb<sp/>&lt;<sp/>dataBlocks.size();<sp/>++idb)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>go<sp/>through<sp/>dataBlocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/>dataBlocks[idb];</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1acca0fea9f472ea1fdb67cbebe9b93d5c" kindref="member">verbose</ref>)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>myProc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;CommProfProc<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dBlock.proc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>nCommStats<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>dBlock.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>datafile<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dBlock.fileName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>seekpos<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>dBlock.seekpos<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>myProc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;barriers.size()<sp/>=<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dBlock.barriers.size()</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dBlock.proc<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>ReadCommStats(dBlock);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---------------------<sp/>check<sp/>barrier<sp/>integrity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idbb(0);<sp/>idbb<sp/>&lt;<sp/>dBlock.barriers.size();<sp/>++idbb)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BarrierEntry<sp/>&amp;be<sp/>=<sp/>dBlock.barriers[idbb];</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bNumber(be.number);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>bName(be.name);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bIndex(be.seekIndex);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCS(dBlock.vCommStats.size());</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bIndex<sp/>&gt;<sp/>nCS-1<sp/>||<sp/>bIndex+1<sp/>&gt;<sp/>nCS-1)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error:<sp/><sp/>bad<sp/>bIndex:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>bIndex<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nCS<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;cs<sp/>=<sp/>dBlock.vCommStats[bIndex];</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;csNext<sp/>=<sp/>dBlock.vCommStats[bIndex<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.cfType<sp/>==<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a732a4be5017987f2d6edc0fcd2329301" kindref="member">BLProfiler::Barrier</ref><sp/>&amp;&amp;<sp/>csNext.cfType<sp/>==<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a732a4be5017987f2d6edc0fcd2329301" kindref="member">BLProfiler::Barrier</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs.tag<sp/>==<sp/>csNext.tag<sp/><sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>these<sp/>are<sp/>the<sp/>barrier<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cs.tag<sp/>==<sp/>bNumber<sp/>)</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.commpid<sp/>!=<sp/>BLProfiler::BeforeCall()<sp/>||<sp/>csNext.commpid<sp/>!=<sp/>BLProfiler::AfterCall())<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error:<sp/><sp/>bad<sp/>Barrier<sp/>before,<sp/>after.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>BLProfiler::CommStats::CFTToString(cs.cfType)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>BLProfiler::CommStats::CFTToString(csNext.cfType)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(cs.commpid)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(csNext.commpid)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(cs.tag)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(csNext.tag)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(cs.timeStamp)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(csNext.timeStamp)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error:<sp/><sp/>bad<sp/>Barriers.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>BLProfiler::CommStats::CFTToString(cs.cfType)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>BLProfiler::CommStats::CFTToString(csNext.cfType)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(cs.commpid)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(csNext.commpid)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(cs.tag)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(csNext.tag)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(cs.timeStamp)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(csNext.timeStamp)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>bName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>bNumber</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>---------------------<sp/>check<sp/>reduction<sp/>integrity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idbb(0);<sp/>idbb<sp/>&lt;<sp/>dBlock.reductions.size();<sp/>++idbb)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReductionEntry<sp/>&amp;re<sp/>=<sp/>dBlock.reductions[idbb];</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>rNumber(re.number);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bIndex(re.seekIndex);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCS(dBlock.vCommStats.size());</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bIndex<sp/>&gt;<sp/>nCS-1<sp/>||<sp/>bIndex+1<sp/>&gt;<sp/>nCS-1)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error:<sp/><sp/>bad<sp/>reduction<sp/>bIndex:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>bIndex<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nCS<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;cs<sp/>=<sp/>dBlock.vCommStats[bIndex];</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;csNext<sp/>=<sp/>dBlock.vCommStats[bIndex<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.cfType<sp/>==<sp/>csNext.cfType<sp/>&amp;&amp;<sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>check<sp/>each<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs.tag<sp/>==<sp/>csNext.tag)<sp/><sp/></highlight><highlight class="comment">//<sp/>these<sp/>are<sp/>the<sp/>reductions<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.commpid<sp/>!=<sp/>BLProfiler::BeforeCall()<sp/>||<sp/>csNext.commpid<sp/>!=<sp/>BLProfiler::AfterCall())<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error:<sp/><sp/>bad<sp/>Reduction<sp/>before,<sp/>after.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>BLProfiler::CommStats::CFTToString(cs.cfType)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>BLProfiler::CommStats::CFTToString(csNext.cfType)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(cs.size)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(csNext.size)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(cs.commpid)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(csNext.commpid)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(cs.tag)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(csNext.tag)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(cs.timeStamp)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(csNext.timeStamp)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error:<sp/><sp/>bad<sp/>Reductions.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/>BLProfiler::CommStats::CFTToString(cs.cfType)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>BLProfiler::CommStats::CFTToString(csNext.cfType)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(cs.size)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(csNext.size)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(cs.commpid)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(csNext.commpid)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(cs.tag)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(csNext.tag)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(cs.timeStamp)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(csNext.timeStamp)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idbb(0);<sp/>idbb<sp/>&lt;<sp/>dBlock.barriers.size();<sp/>++idbb)<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BarrierEntry<sp/>&amp;be<sp/>=<sp/>dBlock.barriers[idbb];</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nBarriers[dBlock.proc]<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(nBarriers[dBlock.proc],<sp/>be.number);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idbb(0);<sp/>idbb<sp/>&lt;<sp/>dBlock.reductions.size();<sp/>++idbb)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReductionEntry<sp/>&amp;re<sp/>=<sp/>dBlock.reductions[idbb];</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nReductions[dBlock.proc]<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(nReductions[dBlock.proc],<sp/>re.number);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearCommStats(dBlock);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//nBMin<sp/>=<sp/>std::min(nBMin,<sp/>(*std::min_element(nBarriers.begin(),<sp/>nBarriers.end())));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//nBMax<sp/>=<sp/>std::max(nBMax,<sp/>(*std::max_element(nBarriers.begin(),<sp/>nBarriers.end())));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;nBarriers.minmax<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>nBMin<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>nBMax<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if(nBMin<sp/>!=<sp/>nBMax)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cerr<sp/>&lt;&lt;<sp/>&quot;****<sp/>Error:<sp/><sp/>different<sp/>number<sp/>of<sp/>barriers<sp/>per<sp/>processor.&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//nRMin<sp/>=<sp/>std::min(nRMin,<sp/>(*std::min_element(nReductions.begin(),<sp/>nReductions.end())));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//nRMax<sp/>=<sp/>std::max(nRMax,<sp/>(*std::max_element(nReductions.begin(),<sp/>nReductions.end())));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;nReductions.minmax<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>nRMin<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>nRMax<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if(nRMin<sp/>!=<sp/>nRMax)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cerr<sp/>&lt;&lt;<sp/>&quot;****<sp/>Error:<sp/><sp/>different<sp/>number<sp/>of<sp/>reductions<sp/>per<sp/>processor.&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a92f370455b087129323dcae88ae2fb57" kindref="member">CommProfStats::FillSendFAB</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>&amp;totalSends,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>&amp;totalSentData,</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>&amp;totalSendsPerProc,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>&amp;totalSentDataPerProc,</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref><sp/>&amp;sendFAB,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>proxmap)</highlight></codeline>
<codeline lineno="645"><highlight class="normal">{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;CommProfStats::FillSendFAB&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BL_SPACEDIM<sp/>==<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(proxmap)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/>dataBlocks.size();<sp/>++idb)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>go<sp/>through<sp/>dataBlocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>*tsp<sp/><sp/>=<sp/>sendFAB.<ref refid="classamrex_1_1BaseFab_1ac1817d437a6ca523298e25202dd51705" kindref="member">dataPtr</ref>(0);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>*tsdp<sp/>=<sp/>sendFAB.<ref refid="classamrex_1_1BaseFab_1ac1817d437a6ca523298e25202dd51705" kindref="member">dataPtr</ref>(1);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/>dataBox(sendFAB.<ref refid="classamrex_1_1BaseFab_1a9359cb75c273aa3ab475d21ddc64f8f3" kindref="member">box</ref>());</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smallX(dataBox.smallEnd(<ref refid="AMReX__CommProfStats_8cpp_1a0b54508652b2932ee5c008a007ac1b1d" kindref="member">XDIR</ref>)),<sp/>bigX(dataBox.bigEnd(<ref refid="AMReX__CommProfStats_8cpp_1a0b54508652b2932ee5c008a007ac1b1d" kindref="member">XDIR</ref>));</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smallY(dataBox.smallEnd(<ref refid="AMReX__CommProfStats_8cpp_1a82ff102a1952ad4ab549505b10f24456" kindref="member">YDIR</ref>)),<sp/>bigY(dataBox.bigEnd(<ref refid="AMReX__CommProfStats_8cpp_1a82ff102a1952ad4ab549505b10f24456" kindref="member">YDIR</ref>));</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xlen(dataBox.length(<ref refid="AMReX__CommProfStats_8cpp_1a0b54508652b2932ee5c008a007ac1b1d" kindref="member">XDIR</ref>)),<sp/>rankFrom,<sp/>rankTo,<sp/>proxFrom,<sp/>proxTo,<sp/>proc;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/>dataBlocks[idb];</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>rankFrom<sp/>=<sp/>dBlock.proc;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>proxFrom<sp/>=<sp/>proxFromRank[rankFrom];</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>proc<sp/>=<sp/>dBlock.proc;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(proxFrom<sp/>&gt;=<sp/>smallX<sp/>&amp;&amp;<sp/>proxFrom<sp/>&lt;=<sp/>bigX)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>within<sp/>from<sp/>proc<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>offsetX(proxFrom<sp/>-<sp/>smallX);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa23714eb98f31ba71d565390dae2a7d2" kindref="member">BL_PROFILE_VAR</ref>(</highlight><highlight class="stringliteral">&quot;FillSendFABIO&quot;</highlight><highlight class="normal">,<sp/>fillsendfabio);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(persistentStreams){</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReadCommStatsNoOpen(dBlock);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReadCommStats(dBlock);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a82c334c787872a6bbacabe9a38389224" kindref="member">BL_PROFILE_VAR_STOP</ref>(fillsendfabio);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.vCommStats.size();<sp/>++i)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>find<sp/>sends<sp/>and<sp/>sum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;cs<sp/>=<sp/>dBlock.vCommStats[i];</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsSend(cs.cfType))<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.size<sp/>!=<sp/>BLProfiler::AfterCall())<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rankTo<sp/>=<sp/>cs.commpid;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proxTo<sp/>=<sp/>proxFromRank[rankTo];</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(proxTo<sp/>&gt;=<sp/>smallY<sp/>&amp;&amp;<sp/>proxTo<sp/>&lt;=<sp/>bigY)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>within<sp/>to<sp/>proc<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1a2232121c4ccb35f8edc71cc8ce1bd244" kindref="member">InTimeRange</ref>(proc,<sp/>cs.timeStamp))<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++totalSends;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSentData<sp/>+=<sp/>cs.size;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++totalSendsPerProc[proxFrom];</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSentDataPerProc[proxFrom]<sp/>+=<sp/>cs.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>(offsetX)<sp/>+<sp/>(xlen<sp/>*<sp/>(proxTo<sp/>-<sp/>smallY));</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tsp[index]<sp/><sp/>+=<sp/>1.0;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tsdp[index]<sp/>+=<sp/>cs.size;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ClearCommStats(dBlock);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/>dataBlocks.size();<sp/>++idb)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>go<sp/>through<sp/>dataBlocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>idb<sp/>+<sp/>1<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>flush;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if((idb<sp/>+<sp/>1)<sp/>%<sp/>20<sp/>==<sp/>0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>*tsp<sp/><sp/>=<sp/>sendFAB.<ref refid="classamrex_1_1BaseFab_1ac1817d437a6ca523298e25202dd51705" kindref="member">dataPtr</ref>(0);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>*tsdp<sp/>=<sp/>sendFAB.<ref refid="classamrex_1_1BaseFab_1ac1817d437a6ca523298e25202dd51705" kindref="member">dataPtr</ref>(1);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/>dataBox(sendFAB.<ref refid="classamrex_1_1BaseFab_1a9359cb75c273aa3ab475d21ddc64f8f3" kindref="member">box</ref>());</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smallX(dataBox.smallEnd(<ref refid="AMReX__CommProfStats_8cpp_1a0b54508652b2932ee5c008a007ac1b1d" kindref="member">XDIR</ref>)),<sp/>bigX(dataBox.bigEnd(<ref refid="AMReX__CommProfStats_8cpp_1a0b54508652b2932ee5c008a007ac1b1d" kindref="member">XDIR</ref>));</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smallY(dataBox.smallEnd(<ref refid="AMReX__CommProfStats_8cpp_1a82ff102a1952ad4ab549505b10f24456" kindref="member">YDIR</ref>)),<sp/>bigY(dataBox.bigEnd(<ref refid="AMReX__CommProfStats_8cpp_1a82ff102a1952ad4ab549505b10f24456" kindref="member">YDIR</ref>));</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xlen(dataBox.length(<ref refid="AMReX__CommProfStats_8cpp_1a0b54508652b2932ee5c008a007ac1b1d" kindref="member">XDIR</ref>)),<sp/>proc;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/>dataBlocks[idb];</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>proc<sp/>=<sp/>dBlock.proc;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(proc<sp/>&gt;=<sp/>smallX<sp/>&amp;&amp;<sp/>proc<sp/>&lt;=<sp/>bigX)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>within<sp/>from<sp/>proc<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index,<sp/>offsetX(proc<sp/>-<sp/>smallX);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa23714eb98f31ba71d565390dae2a7d2" kindref="member">BL_PROFILE_VAR</ref>(</highlight><highlight class="stringliteral">&quot;FillSendFABIO&quot;</highlight><highlight class="normal">,<sp/>fillsendfabio);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(persistentStreams){</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReadCommStatsNoOpen(dBlock);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReadCommStats(dBlock);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a82c334c787872a6bbacabe9a38389224" kindref="member">BL_PROFILE_VAR_STOP</ref>(fillsendfabio);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.vCommStats.size();<sp/>++i)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>find<sp/>sends<sp/>and<sp/>sum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;cs<sp/>=<sp/>dBlock.vCommStats[i];</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsSend(cs.cfType))<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.size<sp/>!=<sp/>BLProfiler::AfterCall())<sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.commpid<sp/>&gt;=<sp/>smallY<sp/>&amp;&amp;<sp/>cs.commpid<sp/>&lt;=<sp/>bigY)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>within<sp/>to<sp/>proc<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1a2232121c4ccb35f8edc71cc8ce1bd244" kindref="member">InTimeRange</ref>(proc,<sp/>cs.timeStamp))<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++totalSends;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSentData<sp/>+=<sp/>cs.size;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++totalSendsPerProc[proc];</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSentDataPerProc[proc]<sp/>+=<sp/>cs.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>(offsetX)<sp/>+<sp/>(xlen<sp/>*<sp/>(cs.commpid<sp/>-<sp/>smallY));</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tsp[index]<sp/><sp/>+=<sp/>1.0;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tsdp[index]<sp/>+=<sp/>cs.size;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ClearCommStats(dBlock);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error<sp/>in<sp/>ReportSendsFABS:<sp/><sp/>must<sp/>compile<sp/>with<sp/>DIM<sp/>=<sp/>2.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1adadb6ac329d2943f4b55b58602946beb" kindref="member">CommProfStats::ReportSyncPointDataSetup</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>&amp;nBMax,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>&amp;nRMax)</highlight></codeline>
<codeline lineno="766"><highlight class="normal">{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>nBarriers(<ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>,<sp/>0L);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>nReductions(<ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>,<sp/>0L);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/>dataBlocks.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/>dataBlocks[idb];</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proc(dBlock.proc);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idbb(0);<sp/>idbb<sp/>&lt;<sp/>dBlock.barriers.size();<sp/>++idbb)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BarrierEntry<sp/>&amp;be<sp/>=<sp/>dBlock.barriers[idbb];</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nBarriers[proc]<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(nBarriers[proc],<sp/>be.number);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idbb(0);<sp/>idbb<sp/>&lt;<sp/>dBlock.reductions.size();<sp/>++idbb)<sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReductionEntry<sp/>&amp;re<sp/>=<sp/>dBlock.reductions[idbb];</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nReductions[proc]<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(nReductions[proc],<sp/>re.number);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//nBMin<sp/>=<sp/>*std::min_element(nBarriers.begin(),<sp/>nBarriers.end());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>nBMax<sp/>=<sp/>*std::max_element(nBarriers.begin(),<sp/>nBarriers.end());</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//nRMin<sp/>=<sp/>*std::min_element(nReductions.begin(),<sp/>nReductions.end());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>nRMax<sp/>=<sp/>*std::max_element(nReductions.begin(),<sp/>nReductions.end());</highlight></codeline>
<codeline lineno="786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a519fea406d86c92cba5af6e67dfa2093" kindref="member">CommProfStats::ReportSyncPointData</ref>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>&gt;<sp/>&amp;barrierExitTimes,</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>&gt;<sp/>&amp;barrierWaitTimes,</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>&gt;<sp/>&amp;reductionWaitTimes,</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bDoReductions)</highlight></codeline>
<codeline lineno="794"><highlight class="normal">{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>procNodeNumber.resize(<ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/>dataBlocks.size();<sp/>++idb)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>go<sp/>through<sp/>dataBlocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>idb<sp/>+<sp/>1<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>flush;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if((idb<sp/>+<sp/>1)<sp/>%<sp/>20<sp/>==<sp/>0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/>dataBlocks[idb];</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(persistentStreams){</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReadCommStatsNoOpen(dBlock);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReadCommStats(dBlock);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>------------------------------------------------<sp/>collect<sp/>barrier<sp/>timings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.barriers.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BarrierEntry<sp/>&amp;be<sp/>=<sp/>dBlock.barriers[i];</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(be.seekIndex<sp/>&lt;<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>skip<sp/>these<sp/>unused<sp/>entries,<sp/>results<sp/>from<sp/>flushing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;*****************<sp/>be.seekIndex<sp/>&lt;<sp/>0<sp/>::<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>be.seekIndex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;&lt;<sp/>&quot;<sp/><sp/>i<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>dBlock.barriers.size()<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>dBlock.barriers.size()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;&lt;<sp/>&quot;<sp/><sp/>be.name<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>be.name<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;cs<sp/>=<sp/>dBlock.vCommStats[be.seekIndex];</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;csNext<sp/>=<sp/>dBlock.vCommStats[be.seekIndex<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1a2232121c4ccb35f8edc71cc8ce1bd244" kindref="member">InTimeRange</ref>(dBlock.proc,<sp/>cs.timeStamp))<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barrierWaitTimes[dBlock.proc][be.number]<sp/>=<sp/>csNext.timeStamp<sp/>-<sp/>cs.timeStamp;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barrierExitTimes[dBlock.proc][be.number]<sp/>=<sp/>csNext.timeStamp;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//double<sp/>zeroBarrierTime<sp/>=<sp/>barrierExitTimes[0][be.number];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for(int<sp/>isk(0);<sp/>isk<sp/>&lt;<sp/>barrierSkewTimes.size();<sp/>++isk)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//barrierSkewTimes[isk][be.number]<sp/>=<sp/>barrierExitTimes[isk][be.number]<sp/>-<sp/>zeroBarrierTime;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1aafb2ddde567eb3472db5487e1baa09aa" kindref="member">bExitTimesDone</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1ad6e9a97e80532d3b7686c5096087c06e" kindref="member">bSkewTimesDone</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>------------------------------------------------<sp/>collect<sp/>reduction<sp/>wait<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.reductions.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReductionEntry<sp/>&amp;re<sp/>=<sp/>dBlock.reductions[i];</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;cs<sp/>=<sp/>dBlock.vCommStats[re.seekIndex];</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;csNext<sp/>=<sp/>dBlock.vCommStats[re.seekIndex<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bDoReductions)<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1a2232121c4ccb35f8edc71cc8ce1bd244" kindref="member">InTimeRange</ref>(dBlock.proc,<sp/>cs.timeStamp))<sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reductionWaitTimes[dBlock.proc][re.number]<sp/>=<sp/>csNext.timeStamp<sp/>-<sp/>cs.timeStamp;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>procNodeNumber[dBlock.proc]<sp/>=<sp/>dBlock.nodeNumber;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearCommStats(dBlock);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>------------------------------------------------<sp/>proc<sp/>node<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>std::ofstream<sp/>pnnout(</highlight><highlight class="stringliteral">&quot;procNodeNumber.xgr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ip(0);<sp/>ip<sp/>&lt;<sp/><ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>;<sp/>++ip)<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>pnnout<sp/>&lt;&lt;<sp/>ip<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>procNodeNumber[ip]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>pnnout.close();</highlight></codeline>
<codeline lineno="859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a8b8ac605103da6aa68487bf7823f2f08" kindref="member">CommProfStats::ReportStats</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>&amp;totalSentData,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>&amp;totalNCommStats,</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>&amp;totalFuncCalls,</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytesPerSlot,<sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>&amp;msgSizes,</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;minMsgSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;maxMsgSize,</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>&amp;timeMin,<sp/>Real<sp/>&amp;timeMax,<sp/>Real<sp/>&amp;timerTime,</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>&amp;rankNodeNumbers)</highlight></codeline>
<codeline lineno="869"><highlight class="normal">{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>(Print::AllProcs)<sp/>&lt;&lt;<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;::Processing<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>dataBlocks.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>data<sp/>blocks:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nMsgSizes(msgSizes.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slot(0),<sp/>highSlot(nMsgSizes<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/>dataBlocks.size();<sp/>++idb)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>go<sp/>through<sp/>dataBlocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1acca0fea9f472ea1fdb67cbebe9b93d5c" kindref="member">verbose</ref>)<sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>idb<sp/>+<sp/>1<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>flush;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if((idb<sp/>+<sp/>1)<sp/>%<sp/>20<sp/>==<sp/>0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/>dataBlocks[idb];</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(persistentStreams){</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReadCommStatsNoOpen(dBlock);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReadCommStats(dBlock);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>rankNodeNumbers[dBlock.proc]<sp/>=<sp/>dBlock.nodeNumber;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>totalNCommStats<sp/>+=<sp/>dBlock.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.vCommStats.size();<sp/>++i)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>-------<sp/>sum<sp/>sent<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;cs<sp/>=<sp/>dBlock.vCommStats[i];</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsSend(cs.cfType))<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.size<sp/>!=<sp/>BLProfiler::AfterCall())<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1a2232121c4ccb35f8edc71cc8ce1bd244" kindref="member">InTimeRange</ref>(dBlock.proc,<sp/>cs.timeStamp))<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totalSentData<sp/>+=<sp/>cs.size;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slot<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" kindref="member">std::min</ref>(cs.size/bytesPerSlot,<sp/>highSlot);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++msgSizes[slot];</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minMsgSize<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" kindref="member">std::min</ref>(cs.size,<sp/>minMsgSize);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxMsgSize<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(cs.size,<sp/>maxMsgSize);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.vCommStats.size();<sp/>++i)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>-----<sp/>sum<sp/>function<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;cs<sp/>=<sp/>dBlock.vCommStats[i];</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((cs.size<sp/>&gt;<sp/>-1<sp/>&amp;&amp;<sp/>cs.cfType<sp/>!=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a3a66ca3d4d64098f62c7aa9c92dcffbb" kindref="member">BLProfiler::Waitsome</ref>)<sp/>||</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(cs.size<sp/>==<sp/>BLProfiler::BeforeCall()<sp/>&amp;&amp;<sp/>cs.cfType<sp/>==<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a3a66ca3d4d64098f62c7aa9c92dcffbb" kindref="member">BLProfiler::Waitsome</ref>))</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1a2232121c4ccb35f8edc71cc8ce1bd244" kindref="member">InTimeRange</ref>(dBlock.proc,<sp/>cs.timeStamp))<sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.cfType<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>cs.cfType<sp/>&lt;<sp/>totalFuncCalls.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>())<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++totalFuncCalls[cs.cfType];</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;--------::<sp/>totalFuncCalls.size()<sp/>cs.cfType<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>totalFuncCalls.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>()</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cs.cfType<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>------------------------------------------------<sp/>find<sp/>minmax<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>timeMin<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" kindref="member">std::min</ref>(timeMin,<sp/>dBlock.timeMin);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>timeMax<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(timeMax,<sp/>dBlock.timeMax);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>sums<sp/>timerTimes<sp/>for<sp/>all<sp/>datablocks<sp/>for<sp/>this<sp/>mpi<sp/>process<sp/>(not<sp/>dataNProcs)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//timerTime<sp/>+=<sp/>dBlock.timerTime;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearCommStats(dBlock);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if(nTimerTimes<sp/>&gt;<sp/>0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//timerTime<sp/>/=<sp/>nTimerTimes;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>(Print::AllProcs)<sp/>&lt;&lt;<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;::done.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="937"><highlight class="normal">}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1af024320c638e753af5a20def51afcde5" kindref="member">CommProfStats::FindTimeRange</ref>(<ref refid="structBLProfStats_1_1TimeRange" kindref="compound">BLProfStats::TimeRange</ref>&amp;<sp/>tr)<sp/>{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/>dataBlocks.size();<sp/>++idb)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>go<sp/>through<sp/>dataBlocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/>dataBlocks[idb];</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.<ref refid="structBLProfStats_1_1TimeRange_1acc1a0426cbe4ab8ec7294472aacc285e" kindref="member">startTime</ref><sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" kindref="member">std::min</ref>(tr.<ref refid="structBLProfStats_1_1TimeRange_1acc1a0426cbe4ab8ec7294472aacc285e" kindref="member">startTime</ref>,<sp/>dBlock.timeMin);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>tr.<ref refid="structBLProfStats_1_1TimeRange_1a69fd0fb94f6216e039668dd5280a9bb0" kindref="member">stopTime</ref><sp/><sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(tr.<ref refid="structBLProfStats_1_1TimeRange_1a69fd0fb94f6216e039668dd5280a9bb0" kindref="member">stopTime</ref>,<sp/><sp/>dBlock.timeMax);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal">}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a45e111eb57d243d366c3146a7ac7c0c9" kindref="member">CommProfStats::TimelineFAB</ref>(<ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref><sp/>&amp;timelineFAB,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/>&amp;probDomain,</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structBLProfStats_1_1TimeRange" kindref="compound">BLProfStats::TimeRange</ref><sp/>tr,</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rankMin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rankMax,</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rankStride,</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Real<sp/>ntnMultiplier,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>&amp;ntnNumbers,</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Real<sp/>bnMultiplier,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>&amp;bnNumbers)</highlight></codeline>
<codeline lineno="956"><highlight class="normal">{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;CommProfStats::TimelineFAB()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>Real<sp/>tlo<sp/>=<sp/>tr.<ref refid="structBLProfStats_1_1TimeRange_1acc1a0426cbe4ab8ec7294472aacc285e" kindref="member">startTime</ref>;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>Real<sp/>thi<sp/>=<sp/>tr.<ref refid="structBLProfStats_1_1TimeRange_1a69fd0fb94f6216e039668dd5280a9bb0" kindref="member">stopTime</ref>;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>Real<sp/>timeRangeAll(thi<sp/>-<sp/>tlo);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Real<sp/>ooTimeRangeAll(1.0<sp/>/<sp/>timeRangeAll);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>Real<sp/>dt(timeRangeAll<sp/>/<sp/>probDomain.<ref refid="classamrex_1_1Box_1a6a6733882a425dd6a062cce99c224421" kindref="member">length</ref>(<ref refid="AMReX__CommProfStats_8cpp_1a0b54508652b2932ee5c008a007ac1b1d" kindref="member">XDIR</ref>));</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>Real<sp/>fabTimeLo(tlo<sp/>+<sp/>((timelineFAB.<ref refid="classamrex_1_1BaseFab_1a9359cb75c273aa3ab475d21ddc64f8f3" kindref="member">box</ref>().<ref refid="classamrex_1_1Box_1a04e076a4688ca383aeaccfcb0bceef60" kindref="member">smallEnd</ref>(<ref refid="AMReX__CommProfStats_8cpp_1a0b54508652b2932ee5c008a007ac1b1d" kindref="member">XDIR</ref>)<sp/>-<sp/>probDomain.<ref refid="classamrex_1_1Box_1a04e076a4688ca383aeaccfcb0bceef60" kindref="member">smallEnd</ref>(<ref refid="AMReX__CommProfStats_8cpp_1a0b54508652b2932ee5c008a007ac1b1d" kindref="member">XDIR</ref>))<sp/>*<sp/>dt));</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>Real<sp/>fabTimeHi(fabTimeLo<sp/>+<sp/>(timelineFAB.<ref refid="classamrex_1_1BaseFab_1a9359cb75c273aa3ab475d21ddc64f8f3" kindref="member">box</ref>().<ref refid="classamrex_1_1Box_1a6a6733882a425dd6a062cce99c224421" kindref="member">length</ref>(<ref refid="AMReX__CommProfStats_8cpp_1a0b54508652b2932ee5c008a007ac1b1d" kindref="member">XDIR</ref>)<sp/>*<sp/>dt));</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>Real<sp/>timeRangeFab(fabTimeHi<sp/>-<sp/>fabTimeLo);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>Real<sp/>ooTimeRangeFab(1.0<sp/>/<sp/>timeRangeFab);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>index(-1),<sp/>xi(-1);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//int<sp/>nTimeSlotsTotal(probDomain.length(XDIR));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nTimeSlotsFab(timelineFAB.<ref refid="classamrex_1_1BaseFab_1a9359cb75c273aa3ab475d21ddc64f8f3" kindref="member">box</ref>().<ref refid="classamrex_1_1Box_1a6a6733882a425dd6a062cce99c224421" kindref="member">length</ref>(<ref refid="AMReX__CommProfStats_8cpp_1a0b54508652b2932ee5c008a007ac1b1d" kindref="member">XDIR</ref>));</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//int<sp/>nRanksTotal(probDomain.length(YDIR));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fabRankLo((timelineFAB.<ref refid="classamrex_1_1BaseFab_1a9359cb75c273aa3ab475d21ddc64f8f3" kindref="member">box</ref>().<ref refid="classamrex_1_1Box_1a04e076a4688ca383aeaccfcb0bceef60" kindref="member">smallEnd</ref>(<ref refid="AMReX__CommProfStats_8cpp_1a82ff102a1952ad4ab549505b10f24456" kindref="member">YDIR</ref>)<sp/>-<sp/>probDomain.<ref refid="classamrex_1_1Box_1a04e076a4688ca383aeaccfcb0bceef60" kindref="member">smallEnd</ref>(<ref refid="AMReX__CommProfStats_8cpp_1a82ff102a1952ad4ab549505b10f24456" kindref="member">YDIR</ref>))<sp/>*<sp/>rankStride);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fabRankHi(fabRankLo<sp/>+<sp/>(timelineFAB.<ref refid="classamrex_1_1BaseFab_1a9359cb75c273aa3ab475d21ddc64f8f3" kindref="member">box</ref>().<ref refid="classamrex_1_1Box_1a6a6733882a425dd6a062cce99c224421" kindref="member">length</ref>(<ref refid="AMReX__CommProfStats_8cpp_1a82ff102a1952ad4ab549505b10f24456" kindref="member">YDIR</ref>)<sp/>-<sp/>1)<sp/>*<sp/>rankStride);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/>dataBlocks.size();<sp/>++idb)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>go<sp/>through<sp/>dataBlocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/>dataBlocks[idb];</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.timeMin<sp/>&gt;<sp/>fabTimeHi<sp/>||<sp/>dBlock.timeMax<sp/>&lt;<sp/>fabTimeLo)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>entire<sp/>block<sp/>outside<sp/>time<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proc(dBlock.proc);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(proc<sp/>&gt;<sp/>fabRankHi<sp/>||<sp/>proc<sp/>&lt;<sp/>fabRankLo<sp/>||<sp/>proc<sp/>%<sp/>rankStride<sp/>!=<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>block<sp/>outside<sp/>rank<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(persistentStreams){</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReadCommStatsNoOpen(dBlock);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReadCommStats(dBlock);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>*timeline(timelineFAB.<ref refid="classamrex_1_1BaseFab_1ac1817d437a6ca523298e25202dd51705" kindref="member">dataPtr</ref>(0));</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>*mpiCount(timelineFAB.<ref refid="classamrex_1_1BaseFab_1ac1817d437a6ca523298e25202dd51705" kindref="member">dataPtr</ref>(1));</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>prevIndex(0);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.vCommStats.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;cs<sp/>=<sp/>dBlock.vCommStats[i];</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>ts(cs.timeStamp);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((ts<sp/>&lt;=<sp/>fabTimeHi<sp/>&amp;&amp;<sp/>ts<sp/>&gt;=<sp/>fabTimeLo)<sp/>&amp;&amp;<sp/><ref refid="classBLProfStats_1a2232121c4ccb35f8edc71cc8ce1bd244" kindref="member">InTimeRange</ref>(dBlock.proc,<sp/>ts))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>within<sp/>time<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xi<sp/>=<sp/>nTimeSlotsFab<sp/>*<sp/>((ts<sp/>-<sp/>fabTimeLo)<sp/>*<sp/>ooTimeRangeFab);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xi<sp/>==<sp/>nTimeSlotsFab)<sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--xi;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(xi<sp/>&lt;<sp/>0<sp/>||<sp/>xi<sp/>&gt;=<sp/>nTimeSlotsFab)<sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(xi)</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(nTimeSlotsFab)</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(timeRangeFab)</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(ts)</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex" kindref="compound">amrex</ref>::<ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">Abort</ref>(&quot;xi<sp/>out<sp/>of<sp/>range.&quot;);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>(((proc<sp/>-<sp/>fabRankLo)<sp/>/<sp/>rankStride)<sp/>*<sp/>nTimeSlotsFab)<sp/>+<sp/>xi;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>if(index<sp/>&lt;<sp/>0<sp/>||<sp/>index<sp/>&gt;=<sp/>timelineFAB.box().numPts())<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(index)</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(timelineFAB.box().<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1ac0bbdd3b8f64770191201e431e16c723" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex" kindref="compound">amrex</ref>::<ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">Abort</ref>(&quot;index<sp/>out<sp/>of<sp/>range.&quot;);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeline[index]<sp/>=<sp/>cs.cfType;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpiCount[index]<sp/>+=<sp/>1.0;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>ntnMult(0.0),<sp/>bnMult(0.0);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>if(cs.cfType<sp/>==<sp/><ref refid="classamrex_1_1BLProfiler" kindref="compound">BLProfiler</ref>::NameTag)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>add<sp/>encoded<sp/>value<sp/>for<sp/>the<sp/>name<sp/>tag<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ntnMult<sp/>=<sp/>ntnNumbers[cs.tag];</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeline[index]<sp/>+=<sp/>ntnMult;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.cfType<sp/>==<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a732a4be5017987f2d6edc0fcd2329301" kindref="member">BLProfiler::Barrier</ref>)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>add<sp/>encoded<sp/>value<sp/>for<sp/>the<sp/>barrier<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.tag<sp/>&gt;=<sp/><sp/>dBlock.barriers.size())<sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;********<sp/>TimelineFAB::0&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(i);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(cs.tag);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(dBlock.barriers.size());</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ib(0);<sp/>ib<sp/>&lt;<sp/>dBlock.barriers.size();<sp/>++ib)<sp/>{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;be[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ib<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dBlock.barriers[ib]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;---------<sp/>bad<sp/>barrier.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BarrierEntry<sp/>&amp;be<sp/>=<sp/>dBlock.barriers[cs.tag];</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bnMult<sp/>=<sp/>bnNumbers[be.bNameNumber];</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeline[index]<sp/>+=<sp/>bnMult;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>fill<sp/>in<sp/>gaps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>xi<sp/>&lt;<sp/>nTimeSlotsFab)<sp/>{</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;csPrev<sp/>=<sp/>dBlock.vCommStats[i-1];</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.cfType<sp/>==<sp/>csPrev.cfType</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>csPrev.size<sp/>==<sp/>BLProfiler::BeforeCall()</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs.size<sp/><sp/><sp/><sp/><sp/>==<sp/>BLProfiler::AfterCall()</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>csPrev.tag<sp/>==<sp/>BLProfiler::BeforeCall()</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs.tag<sp/><sp/><sp/><sp/><sp/>==<sp/>BLProfiler::AfterCall()</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>prevTs(csPrev.timeStamp);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(prevTs<sp/>&lt;<sp/>fabTimeLo)<sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;::::<sp/><sp/>prevTs<sp/>fabTimeLo<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>prevTs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fabTimeLo<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevTs<sp/>=<sp/>fabTimeLo;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>prevXi(nTimeSlotsFab<sp/>*<sp/>((prevTs<sp/>-<sp/>fabTimeLo)<sp/>*<sp/>ooTimeRangeFab));</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevIndex<sp/>=<sp/>(((proc<sp/>-<sp/>fabRankLo)<sp/>/<sp/>rankStride)<sp/>*<sp/>nTimeSlotsFab)<sp/>+<sp/>prevXi;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>idx(prevIndex);<sp/>idx<sp/>&lt;<sp/>index;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(idx<sp/>&lt;<sp/>0<sp/>||<sp/>idx<sp/>&gt;=<sp/>timelineFAB.<ref refid="classamrex_1_1BaseFab_1a9359cb75c273aa3ab475d21ddc64f8f3" kindref="member">box</ref>().<ref refid="classamrex_1_1Box_1a3d8fc04f3fa3fb6bb0721aea64cbb373" kindref="member">numPts</ref>()<sp/>||<sp/>idx<sp/>&gt;<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(proc)</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(ts)</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(prevTs)</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(fabTimeLo)</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(prevXi)</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(idx)</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(index)</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(prevIndex)</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(timelineFAB.box().<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1ac0bbdd3b8f64770191201e431e16c723" kindref="member">size</ref>())</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//amrex::Abort(&quot;idx<sp/>out<sp/>of<sp/>range.&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex" kindref="compound">amrex</ref>::<ref refid="classamrex_1_1Print" kindref="compound">Print</ref>()<sp/>&lt;&lt;<sp/>&quot;<ref refid="classCommProfStats" kindref="compound">CommProfStats</ref>::TimelineFAB::idx<sp/>out<sp/>of<sp/>range.&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>continue;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeline[idx]<sp/>=<sp/>cs.cfType;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mpiCount[idx]<sp/>+=<sp/>1.0;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(cs.cfType<sp/>==<sp/><ref refid="classamrex_1_1BLProfiler" kindref="compound">BLProfiler</ref>::NameTag)<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeline[idx]<sp/>+=<sp/>ntnMult;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.cfType<sp/>==<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a732a4be5017987f2d6edc0fcd2329301" kindref="member">BLProfiler::Barrier</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeline[idx]<sp/>+=<sp/>bnMult;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prevIndex<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearCommStats(dBlock);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a8e0ff1215f92ce779b69d858490926ba" kindref="member">CommProfStats::IsSend</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BLProfiler::CommFuncType<sp/>&amp;cft)<sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cft<sp/>==<sp/>BLProfiler::AsendTsii<sp/><sp/>||</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cft<sp/>==<sp/>BLProfiler::AsendTsiiM<sp/>||</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cft<sp/>==<sp/>BLProfiler::AsendvTii<sp/><sp/>||</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cft<sp/>==<sp/>BLProfiler::SendTsii<sp/><sp/><sp/>||</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>cft<sp/>==<sp/>BLProfiler::SendvTii);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1aa39af5c360eed166f1eab2758f3b3099" kindref="member">CommProfStats::IsRecv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BLProfiler::CommFuncType<sp/>&amp;cft)<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cft<sp/>==<sp/>BLProfiler::ArecvTsii<sp/><sp/>||</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cft<sp/>==<sp/>BLProfiler::ArecvTsiiM<sp/>||</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cft<sp/>==<sp/>BLProfiler::ArecvTii<sp/><sp/><sp/>||</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cft<sp/>==<sp/>BLProfiler::ArecvvTii<sp/><sp/>||</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cft<sp/>==<sp/>BLProfiler::RecvTsii<sp/><sp/><sp/>||</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cft<sp/>==<sp/>BLProfiler::RecvvTii<sp/><sp/><sp/>||</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cft<sp/>==<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a3a66ca3d4d64098f62c7aa9c92dcffbb" kindref="member">BLProfiler::Waitsome</ref>);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1ab0655c04de1ca1a5f803f6bae67dec18" kindref="member">CommProfStats::IsBlockingRecv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BLProfiler::CommFuncType<sp/>&amp;cft)<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(cft<sp/>==<sp/>BLProfiler::RecvTsii<sp/><sp/><sp/>||</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cft<sp/>==<sp/>BLProfiler::RecvvTii<sp/><sp/><sp/>||</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cft<sp/>==<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a3a66ca3d4d64098f62c7aa9c92dcffbb" kindref="member">BLProfiler::Waitsome</ref>);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a2f1c9ef45b46be3997c49b3a1a5bf7c0" kindref="member">CommProfStats::SendRecvList</ref>(std::multimap&lt;Real,<sp/>SendRecvPairUnpaired&gt;<sp/>&amp;srMMap)</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;SendRecvList&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/>dataBlocks.size();<sp/>++idb)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>go<sp/>through<sp/>dataBlocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/>dataBlocks[idb];</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proc(dBlock.proc);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>ReadCommStats(dBlock);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.vCommStats.size();<sp/>++i)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>find<sp/>sends<sp/>and<sp/>recvs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;cs<sp/>=<sp/>dBlock.vCommStats[i];</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsSend(cs.cfType))<sp/>{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.size<sp/>!=<sp/>BLProfiler::AfterCall())<sp/>{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1a2232121c4ccb35f8edc71cc8ce1bd244" kindref="member">InTimeRange</ref>(proc,<sp/>cs.timeStamp))<sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srMMap.insert(std::pair&lt;Real,<sp/>SendRecvPairUnpaired&gt;(cs.timeStamp,</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendRecvPairUnpaired(cs.cfType,<sp/>proc,<sp/>cs.commpid,</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs.size,<sp/>cs.tag,<sp/>cs.timeStamp,</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1000.0,<sp/>0.0)));</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsRecv(cs.cfType))<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.size<sp/>!=<sp/>BLProfiler::AfterCall())<sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1a2232121c4ccb35f8edc71cc8ce1bd244" kindref="member">InTimeRange</ref>(proc,<sp/>cs.timeStamp))<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srMMap.insert(std::pair&lt;Real,<sp/>SendRecvPairUnpaired&gt;(cs.timeStamp,</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendRecvPairUnpaired(cs.cfType,<sp/>cs.commpid,<sp/>proc,</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs.size,<sp/>cs.tag,<sp/>-2000.0,</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs.timeStamp,<sp/>0.0)));</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearCommStats(dBlock);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1aaba7711671dac7abcce70c3a94ba4dff" kindref="member">CommProfStats::SendRecvData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filenameprefix,</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tlo,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>thi)</highlight></codeline>
<codeline lineno="1176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dstart(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">amrex::ParallelDescriptor::second</ref>());</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/>Real<sp/>timeMin(<ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::numeric_limits&lt;Real&gt;::max</ref>());</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>Real<sp/>timeMax(-<ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::numeric_limits&lt;Real&gt;::max</ref>());</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Vector&lt;Real&gt;</ref><sp/>&gt;<sp/>sendCallTimes(dataNProcs);<sp/><sp/></highlight><highlight class="comment">//<sp/>[proc,<sp/>bnum]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Vector&lt;Real&gt;</ref><sp/>&gt;<sp/>recvCallTimes(dataNProcs);<sp/><sp/></highlight><highlight class="comment">//<sp/>[proc,<sp/>bnum]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>dataSentPerProc(dataNProcs<sp/>*<sp/>dataNProcs,<sp/>0.0);<sp/><sp/></highlight><highlight class="comment">//<sp/>[fromproc,<sp/>toproc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;unordered_map&lt;int, unordered_multimap&lt;long, SendRecvPairUnpaired&gt;</ref><sp/>&gt;<sp/>&gt;<sp/>unpairedMessages;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[tag,[hash,msges]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Vector&lt;SendRecvPair&gt;</ref><sp/>&gt;<sp/>pairedMessages;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//unpairedMessages.rehash(minComps);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//double<sp/>st(0.0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>s0(0.0),<sp/>s1(0.0),<sp/>s2(0.0),<sp/>s3(0.0),<sp/>rtime(0.0),<sp/>ptime(0.0);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>maxupmsize(0),<sp/>upmsize(0),<sp/>maxupmmapsize(0);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>upmsizeV;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxTag(-1),<sp/>maxNMatches(-1);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//bool<sp/>matches(false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>mTotal(0),<sp/>mNeg(0);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//float<sp/>maxLF0(0.0),<sp/>maxLF1(0.0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/>Real<sp/>filterTLo(00.0),<sp/>filterTHi(30000.0);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nReads(4);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;omp_lock_t&gt;</ref><sp/>locks(nReads);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>locks.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>omp_init_lock(&amp;(locks[i]));</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nThreads(<ref refid="namespaceamrex__omp__module_1a88c4536a09e2cc9d9edff5cd040814db" kindref="member">omp_get_max_threads</ref>());</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myThread(<ref refid="namespaceamrex__omp__module_1a1f5881f02905de2162615538e3989e36" kindref="member">omp_get_thread_num</ref>());</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nThreads(1);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myThread(0);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/>procNodeNumber.resize(dataNProcs);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;DataBlock&gt;</ref><sp/>dBlockV(nThreads);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/>unpairedMessages.resize(nThreads);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/>pairedMessages.resize(nThreads);</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>pairedMessages.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>pairedMessages[i].reserve(2000000);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>anyDataLeft(dataBlocks.size());</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/>vector&lt;bool&gt;<sp/>dataLeft(dataBlocks.size(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>this<sp/>part<sp/>orders<sp/>the<sp/>indicies<sp/>by<sp/>time,<sp/>then<sp/>processor<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>idbIndex;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>resort(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(resort)<sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;int,<sp/>multimap&lt;int,<sp/>int&gt;<sp/>&gt;<sp/>idbMM;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[time,<sp/>[proc,<sp/>index]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;int,<sp/>multimap&lt;int,<sp/>int&gt;<sp/>&gt;::iterator<sp/>idb_m_MMiter;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>multimap&lt;int,<sp/>int&gt;::iterator<sp/>idbMMiter;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;==============&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>countI(0);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/>dataBlocks.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;idb<sp/>dB.proc<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>idb<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>dataBlocks[idb].proc<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>idb<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>dataBlocks[idb].proc<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t0(dataBlocks[idb].timeMin<sp/>*<sp/>1.0);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>idbMM[t0].insert(std::pair&lt;int,<sp/>int&gt;(dataBlocks[idb].proc,<sp/>idb));</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++countI;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;%%%%%%%%%%%%%%&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count(0);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(idb_m_MMiter<sp/>=<sp/>idbMM.begin();<sp/>idb_m_MMiter<sp/>!=<sp/>idbMM.end();<sp/>++idb_m_MMiter)<sp/>{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>multimap&lt;int,<sp/>int&gt;<sp/>&amp;mm<sp/>=<sp/>idb_m_MMiter-&gt;second;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;----<sp/>&quot;<sp/>&lt;&lt;<sp/>idb_m_MMiter-&gt;first<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(idbMMiter<sp/>=<sp/>mm.begin();<sp/>idbMMiter<sp/>!=<sp/>mm.end();<sp/>++idbMMiter)<sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;idb<sp/>idbMM.proc<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>idbMMiter-&gt;second<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>idbMMiter-&gt;first<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idbIndex.push_back(idbMMiter-&gt;second);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;==============<sp/><sp/>count<sp/>countI<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>count<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>countI<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;**************<sp/><sp/>idbIndex.size()<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>idbIndex.size()<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for(idb<sp/>=<sp/>0;<sp/>idb<sp/>&lt;<sp/>idbIndex.size();<sp/>++idb)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>idb<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>idbIndex[idb]<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>dataBlocks[idbIndex[idb]].timeMin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>dataBlocks[idbIndex[idb]].size<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;**************&quot;<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>idbIndex.resize(dataBlocks.size());</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idbII<sp/>=<sp/>0;<sp/>idbII<sp/>&lt;<sp/>idbIndex.size();<sp/>++idbII)<sp/>{</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>idbIndex[idbII]<sp/>=<sp/>idbII;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(anyDataLeft)<sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>parallel<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//for(idb<sp/>=<sp/>0;<sp/>idb<sp/>&lt;<sp/>dataBlocks.size();<sp/>++idb)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idbII<sp/>=<sp/>0;<sp/>idbII<sp/>&lt;<sp/>dataBlocks.size();<sp/>++idbII)<sp/>{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(idbIndex[idbII]);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>mySet(myThread<sp/>%<sp/>nReads);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>mySet(idb<sp/>%<sp/>nReads);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dB<sp/>=<sp/>dataBlocks[idb];</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/>dBlockV[myThread];</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>dBlock.proc<sp/>=<sp/>dB.proc;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>dBlock.size<sp/>=<sp/>dB.size;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>dBlock.fileName<sp/>=<sp/>dB.fileName;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>dBlock.seekpos<sp/>=<sp/>dB.seekpos;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>dBlock.readoffset<sp/>=<sp/>dB.readoffset;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//DataBlock<sp/>dBlock(dB.proc,<sp/>dB.size,<sp/>dB.fileName,<sp/>dB.seekpos);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>procNodeNumber[dBlock.proc]<sp/>=<sp/>dB.nodeNumber;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>timeMin<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" kindref="member">std::min</ref>(timeMin,<sp/>dB.timeMin);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>timeMax<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(timeMax,<sp/>dB.timeMax);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>pctDone(100.0<sp/>-<sp/>100.0<sp/>*<sp/>((Real)(dB.size<sp/>-<sp/>dB.readoffset)<sp/>/<sp/>(Real)<sp/>dB.size));</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Processing<sp/>data<sp/>block<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>idb<sp/>+<sp/>1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>idbII<sp/>+<sp/>1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>/<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>dataBlocks.size()</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>pctDone<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pctDone<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.timeMin<sp/>&gt;<sp/>filterTHi<sp/>||<sp/>dBlock.timeMax<sp/>&lt;<sp/>filterTLo)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>block<sp/>outside<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rstart(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">amrex::ParallelDescriptor::second</ref>());</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>omp_set_lock(&amp;(locks[mySet]));<sp/><sp/><sp/><sp/>//<sp/>sort<sp/>of<sp/>a<sp/>semaphore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ReadCommStats(dBlock);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>readSize(64<sp/>+<sp/>dBlock.size/2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>readSize(dBlock.size);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>readSize(1000000);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataLeft[idb])<sp/>{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataLeft[idb]<sp/>=<sp/>ReadCommStats(dBlock,<sp/>readSize);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataLeft[idb]<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--anyDataLeft;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dB.readoffset<sp/>=<sp/>dBlock.readoffset;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>omp_unset_lock(&amp;(locks[mySet]));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>rtime<sp/>+=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">amrex::ParallelDescriptor::second</ref>()<sp/>-<sp/>rstart;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>sttemp(0.0),<sp/>rttemp(0.0),<sp/>tttemp(0.0);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proc(dBlock.proc);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>prevIndex(0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ics(0);<sp/>ics<sp/>&lt;<sp/>dBlock.vCommStats.size();<sp/>++ics)<sp/>{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;cs<sp/>=<sp/>dBlock.vCommStats[ics];</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>ts(cs.timeStamp);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ts<sp/>&gt;<sp/>filterTHi<sp/>||<sp/>ts<sp/>&lt;<sp/>filterTLo)<sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsBlockingRecv(cs.cfType)<sp/>&amp;&amp;<sp/>cs.size<sp/>==<sp/>BLProfiler::BeforeCall())<sp/>{</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsSend(cs.cfType)<sp/>&amp;&amp;<sp/>cs.size<sp/>==<sp/>BLProfiler::AfterCall())<sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.tag<sp/>==<sp/>BLProfiler::NoTag())<sp/>{</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.tag<sp/>&lt;<sp/>1000)<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsSend(cs.cfType)<sp/>||<sp/>IsBlockingRecv(cs.cfType))<sp/>{</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pstart(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">amrex::ParallelDescriptor::second</ref>());</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>st0<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">amrex::ParallelDescriptor::second</ref>();</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fromProcTemp,<sp/>toProcTemp;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsSend(cs.cfType))<sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fromProcTemp<sp/>=<sp/>proc;</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>toProcTemp<sp/><sp/><sp/>=<sp/>cs.commpid;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fromProcTemp<sp/>=<sp/>cs.commpid;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>toProcTemp<sp/><sp/><sp/>=<sp/>proc;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//long<sp/>hlong(SendRecvPair::HashLong(fromProcTemp,<sp/>toProcTemp,<sp/>cs.size,<sp/>cs.tag));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hlong<sp/>=<sp/>SendRecvPair::HashLong(fromProcTemp,<sp/>toProcTemp,<sp/>cs.tag);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//bool<sp/>foundMatch(false);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>nMatches(0);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/>pair&lt;unordered_multimap&lt;long,<sp/>SendRecvPairUnpaired&gt;::iterator,</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unordered_multimap&lt;long,<sp/>SendRecvPairUnpaired&gt;::iterator&gt;<sp/>upmSRPERI;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;unordered_multimap&lt;long, SendRecvPairUnpaired&gt;::iterator</ref>&gt;<sp/>upmSRPMatchSave;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/>maxTag<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(maxTag,<sp/>cs.tag);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_multimap&lt;long,<sp/>SendRecvPairUnpaired&gt;<sp/>&amp;upm<sp/>=<sp/>unpairedMessages[myThread][cs.tag];</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//maxupmmapsize<sp/>=<sp/>std::max(static_cast&lt;long&gt;(unpairedMessages[myThread].size()),<sp/>maxupmmapsize);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>upmSRPERI<sp/>=<sp/>upm.equal_range(hlong);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(unordered_multimap&lt;long,<sp/>SendRecvPairUnpaired&gt;::iterator<sp/>upmsrit<sp/>=<sp/>upmSRPERI.first;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upmsrit<sp/>!=<sp/>upmSRPERI.second;<sp/>++upmsrit)</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SendRecvPairUnpaired<sp/>&amp;srp<sp/>=<sp/>upmsrit-&gt;second;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(srp.Matches(fromProcTemp,<sp/>toProcTemp,<sp/>cs.size,<sp/>cs.tag))<sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((IsSend(srp.unmatchedCFType)<sp/>&amp;&amp;<sp/>IsBlockingRecv(cs.cfType))<sp/>||<sp/></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(IsSend(cs.cfType)<sp/>&amp;&amp;<sp/>IsBlockingRecv(srp.unmatchedCFType)))</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upmSRPMatchSave.push_back(upmsrit);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nMatches;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxNMatches<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(maxNMatches,<sp/>nMatches);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1385"><highlight class="normal">s0<sp/>+=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">amrex::ParallelDescriptor::second</ref>()<sp/>-<sp/>st0;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ics+1<sp/>&gt;=<sp/>dBlock.vCommStats.size())<sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nMatches<sp/>==<sp/>0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>------------------------<sp/>unpaired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>st1<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">amrex::ParallelDescriptor::second</ref>();</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsSend(cs.cfType))<sp/>{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sttemp<sp/>=<sp/>cs.timeStamp;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tttemp<sp/>=<sp/>sttemp;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ics+1<sp/>&gt;=<sp/>dBlock.vCommStats.size())<sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;!!!!!!!!!!!!!!!!!!!!!!!<sp/>cs<sp/>on<sp/>end<sp/>(unpaired).&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;csNext<sp/>=<sp/>dBlock.vCommStats[ics+1];</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rttemp<sp/>=<sp/>csNext.timeStamp;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tttemp<sp/>=<sp/>rttemp;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upm.insert(std::pair&lt;long,<sp/>SendRecvPairUnpaired&gt;(hlong,<sp/></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SendRecvPairUnpaired(cs.cfType,<sp/>fromProcTemp,</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toProcTemp,<sp/>cs.size,<sp/>cs.tag,</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sttemp,<sp/>rttemp,<sp/>tttemp)));</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++upmsize;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxupmsize<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(upmsize,<sp/>maxupmsize);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal">s1<sp/>+=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">amrex::ParallelDescriptor::second</ref>()<sp/>-<sp/>st1;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>------------------------<sp/>paired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>st2<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">amrex::ParallelDescriptor::second</ref>();</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unordered_multimap&lt;long,<sp/>SendRecvPairUnpaired&gt;::iterator</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>earliestMatchSave<sp/>=<sp/>upmSRPMatchSave[0];</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(1);<sp/>i<sp/>&lt;<sp/>upmSRPMatchSave.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(upmSRPMatchSave[i]-&gt;<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">second</ref>.totalTime<sp/>&lt;<sp/>earliestMatchSave-&gt;second.totalTime)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>earliestMatchSave<sp/>=<sp/>upmSRPMatchSave[i];</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SendRecvPairUnpaired<sp/>&amp;srpup<sp/>=<sp/>earliestMatchSave-&gt;second;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sttemp<sp/>=<sp/>srpup.sendTime;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rttemp<sp/>=<sp/>srpup.recvTime;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsSend(cs.cfType))<sp/>{</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sttemp<sp/>=<sp/>cs.timeStamp;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ics+1<sp/>&gt;=<sp/>dBlock.vCommStats.size())<sp/>{</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;!!!!!!!!!!!!!!!!!!!!!!!<sp/>cs<sp/>on<sp/>end<sp/>(paired).&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;csNext<sp/>=<sp/>dBlock.vCommStats[ics<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rttemp<sp/>=<sp/>csNext.timeStamp;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tttemp<sp/>=<sp/>rttemp<sp/>-<sp/>sttemp;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tttemp<sp/>&lt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++mNeg;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++mTotal;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pairedMessages[myThread].push_back(SendRecvPair(srpup.fromProc,<sp/>srpup.toProc,</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>srpup.dataSize,<sp/>srpup.tag,</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sttemp,<sp/>rttemp,<sp/>tttemp));</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>upm.erase(earliestMatchSave);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--upmsize;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal">s2<sp/>+=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">amrex::ParallelDescriptor::second</ref>()<sp/>-<sp/>st2;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>else<sp/>paired</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>ptime<sp/>+=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">amrex::ParallelDescriptor::second</ref>()<sp/>-<sp/>pstart;</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>if(IsSend...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>for(ics...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="comment">//st<sp/>=<sp/>amrex::ParallelDescriptor::second();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ClearCommStats(dBlock);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="comment">//s3<sp/>+=<sp/>amrex::ParallelDescriptor::second()<sp/>-<sp/>st;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SHOWVAL(unpairedMessages[myThread].bucket_count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//SHOWVAL(unpairedMessages[myThread].load_factor());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(upmsize);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>upmsizeV.push_back(upmsize);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>end<sp/>for(idb...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>locks.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>omp_destroy_lock(&amp;(locks[i]));</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(maxTag);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(maxNMatches);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(mTotal);</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(mNeg);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pNeg(static_cast&lt;double&gt;(mNeg)<sp/>/<sp/>static_cast&lt;double&gt;(mTotal));</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(pNeg);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(upmsize);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(maxupmsize);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(maxupmmapsize);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(s0);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(s1);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(s2);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(s3);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%%%%%%%%%%%%%<sp/>SendRecvData<sp/>pairing<sp/>time<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">amrex::ParallelDescriptor::second</ref>()<sp/>-<sp/>dstart<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(rtime);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(ptime);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(ptime-s0-s1-s2-s3);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//SHOWVAL(maxLF0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//SHOWVAL(maxLF1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight><highlight class="comment">//return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/>std::ofstream<sp/>upmout(</highlight><highlight class="stringliteral">&quot;upmsize.xgr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>upmsizeV.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>upmout<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>upmsizeV[i]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>upmout.close();</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight><highlight class="comment">//<sp/>=================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>------------------------------------------------<sp/>print<sp/>send<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1514"><highlight class="comment"><sp/><sp/>std::ofstream<sp/>tsdout(&quot;sendtimes.xgr&quot;);</highlight></codeline>
<codeline lineno="1515"><highlight class="comment"><sp/><sp/>for(int<sp/>i(0);<sp/>i<sp/>&lt;<sp/>pairedMessages[0].size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1516"><highlight class="comment"><sp/><sp/><sp/><sp/>SendRecvPair<sp/>&amp;srp<sp/>=<sp/>pairedMessages[i];</highlight></codeline>
<codeline lineno="1517"><highlight class="comment"><sp/><sp/><sp/><sp/>tsdout<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>srp.totalTime<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1518"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1519"><highlight class="comment"><sp/><sp/>tsdout.close();</highlight></codeline>
<codeline lineno="1520"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;double&gt;</ref><sp/>sdataTT(dataNProcs<sp/>*<sp/>dataNProcs,<sp/>0.0);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;double&gt;</ref><sp/>sdataDS(dataNProcs<sp/>*<sp/>dataNProcs,<sp/>0.0);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;double&gt;</ref><sp/>sdataNC(dataNProcs<sp/>*<sp/>dataNProcs,<sp/>0.0);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;double&gt;</ref><sp/>sdataNHops(dataNProcs<sp/>*<sp/>dataNProcs,<sp/>0.0);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(pairedMessages[0].<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1ac0bbdd3b8f64770191201e431e16c723" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;----------------------------------<sp/>send<sp/>receive<sp/>pairs&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>pairedMessages[0].<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SendRecvPair<sp/>&amp;srp<sp/>=<sp/>pairedMessages[0][i];</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>srp.fromProc<sp/>+<sp/>srp.toProc<sp/>*<sp/><ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sdataTT[index]<sp/>+=<sp/>srp.totalTime;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sdataDS[index]<sp/>+=<sp/>srp.dataSize;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;srp:<sp/><sp/>i<sp/>fromProc<sp/>toProc<sp/>dataSize<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/><sp/>srp.fromProc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>srp.toProc<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>srp.dataSize<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>srp.sendTime<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sdataNC[index]<sp/>+=<sp/>1.0;<sp/><sp/></highlight><highlight class="comment">//<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="AMReX__CommProfStats_8cpp_1ae404b1aaff5433c3067ba025a8cffc52" kindref="member">bTopoFabInited</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref><sp/>ivfrom(<ref refid="AMReX__CommProfStats_8cpp_1af8ad0cca4f81d8ff59fd0b98787b2f11" kindref="member">TopIVFromProcNumber</ref>(procNodeNumber[srp.fromProc]));</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref><sp/>ivto(<ref refid="AMReX__CommProfStats_8cpp_1af8ad0cca4f81d8ff59fd0b98787b2f11" kindref="member">TopIVFromProcNumber</ref>(procNodeNumber[srp.toProc]));</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nhops(<ref refid="namespaceamrex_1ace32984e953e92b236d8e765dd2baaf6" kindref="member">NHops</ref>(topoBox,<sp/>ivfrom,<sp/>ivto));</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdataNHops[index]<sp/>+=<sp/>nhops;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aa2acbc851871868eb313f35d3512e986" kindref="member">Write2DFab</ref>(</highlight><highlight class="stringliteral">&quot;srTotalTime&quot;</highlight><highlight class="normal">,<sp/>dataNProcs,<sp/>dataNProcs,<sp/>&amp;sdataTT[0]);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aa2acbc851871868eb313f35d3512e986" kindref="member">Write2DFab</ref>(</highlight><highlight class="stringliteral">&quot;srTotalData&quot;</highlight><highlight class="normal">,<sp/>dataNProcs,<sp/>dataNProcs,<sp/>&amp;sdataDS[0]);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0e9acfad7e7501e9ff98d50a73b1382a" kindref="member">Write2DText</ref>(</highlight><highlight class="stringliteral">&quot;srTotalData&quot;</highlight><highlight class="normal">,<sp/>dataNProcs,<sp/>dataNProcs,<sp/>&amp;sdataDS[0]);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aa2acbc851871868eb313f35d3512e986" kindref="member">Write2DFab</ref>(</highlight><highlight class="stringliteral">&quot;srTotalMsgs&quot;</highlight><highlight class="normal">,<sp/>dataNProcs,<sp/>dataNProcs,<sp/>&amp;sdataNC[0]);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0e9acfad7e7501e9ff98d50a73b1382a" kindref="member">Write2DText</ref>(</highlight><highlight class="stringliteral">&quot;srTotalMsgs&quot;</highlight><highlight class="normal">,<sp/>dataNProcs,<sp/>dataNProcs,<sp/>&amp;sdataNC[0]);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="AMReX__CommProfStats_8cpp_1ae404b1aaff5433c3067ba025a8cffc52" kindref="member">bTopoFabInited</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aa2acbc851871868eb313f35d3512e986" kindref="member">Write2DFab</ref>(</highlight><highlight class="stringliteral">&quot;srTotalNHops&quot;</highlight><highlight class="normal">,<sp/>dataNProcs,<sp/>dataNProcs,<sp/>&amp;sdataNHops[0]);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;----------------------------------<sp/>total<sp/>sent<sp/>data<sp/>per<sp/>proc&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1558"><highlight class="comment"><sp/><sp/>for(int<sp/>j(dataNProcs-1);<sp/>j<sp/>&gt;=<sp/>0;<sp/>--j)<sp/>{</highlight></codeline>
<codeline lineno="1559"><highlight class="comment"><sp/><sp/><sp/><sp/>for(int<sp/>i(0);<sp/>i<sp/>&lt;<sp/>dataNProcs;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>sdataDS[i<sp/>+<sp/>j<sp/>*<sp/>dataNProcs]<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;;</highlight></codeline>
<codeline lineno="1561"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1562"><highlight class="comment"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight></codeline>
<codeline lineno="1563"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1564"><highlight class="comment"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1565"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;----------------------------------<sp/>total<sp/>time<sp/>time<sp/>view&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>timeMinZ(0.0);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>timeMaxZ(timeMax<sp/>+<sp/>0.001);</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>timeMaxRange(timeMaxZ<sp/>-<sp/>timeMinZ);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ntimeslots<sp/>=<sp/>(int)<sp/>timeMaxRange;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>ntimeslots<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(512,<sp/>ntimeslots);</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Real<sp/>dt(timeMaxRange<sp/>/<sp/>(Real)<sp/>ntimeslots);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index(-1),<sp/>zi(-1);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(timeMinZ);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(timeMax);</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(timeMaxZ);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(timeMaxRange);</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(ntimeslots);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(dataNProcs);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;double&gt;</ref><sp/>ttData(dataNProcs<sp/>*<sp/>dataNProcs<sp/>*<sp/>ntimeslots,<sp/>0.0);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;double&gt;</ref><sp/>bwData(dataNProcs<sp/>*<sp/>dataNProcs<sp/>*<sp/>ntimeslots,<sp/>0.0);</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>pairedMessages[0].<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SendRecvPair<sp/>&amp;srp<sp/>=<sp/>pairedMessages[0][i];</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>ts(srp.recvTime);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zi<sp/>=<sp/>(ntimeslots<sp/>-<sp/>1)<sp/>-<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>((ntimeslots<sp/>-<sp/>1)<sp/>*<sp/>((timeMaxRange<sp/>-<sp/>ts)<sp/>/<sp/>timeMaxRange));</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>srp.fromProc<sp/>+<sp/>(dataNProcs<sp/>*<sp/>srp.toProc)<sp/>+<sp/>(dataNProcs<sp/>*<sp/>dataNProcs<sp/>*<sp/>zi);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index<sp/>&gt;=<sp/>ttData.size())<sp/>{</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(ts);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(zi);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(index);</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ttData[index]<sp/>+=<sp/>srp.totalTime;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bwData[index]<sp/>+=<sp/>srp.dataSize;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;srp:<sp/><sp/>i<sp/>fromProc<sp/>toProc<sp/>dataSize<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/><sp/>srp.fromProc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>srp.toProc<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>srp.dataSize<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>srp.sendTime<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>bwData.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ttData[i]<sp/>&gt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bwData[i]<sp/>/=<sp/>ttData[i];</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1c02ea7752fae69fe9fb9e7f9c3e6f4f" kindref="member">Write3DFab</ref>(</highlight><highlight class="stringliteral">&quot;SRP_TT&quot;</highlight><highlight class="normal">,<sp/>dataNProcs,<sp/>dataNProcs,<sp/>ntimeslots,<sp/>&amp;ttData[0]);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1c02ea7752fae69fe9fb9e7f9c3e6f4f" kindref="member">Write3DFab</ref>(</highlight><highlight class="stringliteral">&quot;SRP_BW&quot;</highlight><highlight class="normal">,<sp/>dataNProcs,<sp/>dataNProcs,<sp/>ntimeslots,<sp/>&amp;bwData[0]);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;double&gt;</ref><sp/>sdataTT(dataNProcs<sp/>*<sp/>dataNProcs,<sp/>0.0);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;----------------------------------<sp/>time<sp/>data<sp/>total<sp/>calculated&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>pairedMessages.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SendRecvPair<sp/>&amp;srp<sp/>=<sp/>pairedMessages[i];</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fp,<sp/>tp;</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(srp.fromProc<sp/>&gt;<sp/>srp.toProc)<sp/>{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp<sp/>=<sp/>srp.fromProc;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp<sp/>=<sp/>srp.toProc;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp<sp/>=<sp/>srp.toProc;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp<sp/>=<sp/>srp.fromProc;</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>fp<sp/>+<sp/>tp<sp/>*<sp/><ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sdataTT[index]<sp/>+=<sp/>srp.totalTime;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aa2acbc851871868eb313f35d3512e986" kindref="member">Write2DFab</ref>(</highlight><highlight class="stringliteral">&quot;timeDataCalc&quot;</highlight><highlight class="normal">,<sp/>dataNProcs,<sp/>dataNProcs,<sp/>&amp;sdataTT[0]);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>------------------------------------------------<sp/>unskew</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="AMReX__CommProfStats_8cpp_1aafb2ddde567eb3472db5487e1baa09aa" kindref="member">bExitTimesDone</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>pairedMessages.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SendRecvPair<sp/>&amp;srp<sp/>=<sp/>pairedMessages[i];</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//tsdout<sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>srp.totalTime<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//srp.<sp/>sendTime<sp/>recvTime<sp/>fromProc<sp/>toProc...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sB<sp/>=<sp/>AfterBarrier(srp.fromProc,<sp/>srp.sendTime);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rB<sp/>=<sp/>AfterBarrier(srp.toProc,<sp/><sp/><sp/>srp.recvTime);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sB<sp/>!=<sp/>rB)<sp/>{</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error:<sp/><sp/>over<sp/>barrier:<sp/><sp/>sB<sp/>rB<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sB<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rB<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>&lt;<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;unskew:<sp/><sp/>fP<sp/>sT<sp/><sp/>tP<sp/>rT<sp/><sp/>betS<sp/>betR<sp/>s-r<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>srp.fromProc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>srp.sendTime</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&gt;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>srp.toProc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>srp.recvTime<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>barrierExitTimes[srp.fromProc][sB]</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>barrierExitTimes[srp.toProc][rB]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>barrierExitTimes[srp.fromProc][sB]<sp/>-<sp/>barrierExitTimes[srp.toProc][rB]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//srp.totalTime<sp/>+=<sp/>barrierExitTimes[srp.fromProc][sB]<sp/>-<sp/>barrierExitTimes[srp.toProc][rB];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srp.totalTime<sp/>=<sp/>(srp.recvTime<sp/>-<sp/>barrierExitTimes[srp.toProc][rB])<sp/>-</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(srp.sendTime<sp/>-<sp/>barrierExitTimes[srp.fromProc][sB]);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;double&gt;</ref><sp/>sdataTT(dataNProcs<sp/>*<sp/>dataNProcs,<sp/>0.0);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;----------------------------------<sp/>send<sp/>receive<sp/>pairs&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>pairedMessages.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SendRecvPair<sp/>&amp;srp<sp/>=<sp/>pairedMessages[i];</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>srp.fromProc<sp/>+<sp/>srp.toProc<sp/>*<sp/><ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sdataTT[index]<sp/>+=<sp/>srp.totalTime;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aa2acbc851871868eb313f35d3512e986" kindref="member">Write2DFab</ref>(</highlight><highlight class="stringliteral">&quot;srTotalTimeUnskewed&quot;</highlight><highlight class="normal">,<sp/>dataNProcs,<sp/>dataNProcs,<sp/>&amp;sdataTT[0]);</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;double&gt;</ref><sp/>sdataTT(dataNProcs<sp/>*<sp/>dataNProcs,<sp/>0.0);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;----------------------------------<sp/>time<sp/>data<sp/>total<sp/>calculated&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>pairedMessages.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SendRecvPair<sp/>&amp;srp<sp/>=<sp/>pairedMessages[i];</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fp,<sp/>tp;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(srp.fromProc<sp/>&gt;<sp/>srp.toProc)<sp/>{</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp<sp/>=<sp/>srp.fromProc;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp<sp/>=<sp/>srp.toProc;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp<sp/>=<sp/>srp.toProc;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp<sp/>=<sp/>srp.fromProc;</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>fp<sp/>+<sp/>tp<sp/>*<sp/><ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sdataTT[index]<sp/>+=<sp/>srp.totalTime;</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aa2acbc851871868eb313f35d3512e986" kindref="member">Write2DFab</ref>(</highlight><highlight class="stringliteral">&quot;timeDataCalcUnskewed&quot;</highlight><highlight class="normal">,<sp/>dataNProcs,<sp/>dataNProcs,<sp/>&amp;sdataTT[0]);</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight><highlight class="comment">//return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/>sendCallTimes.reserve(2000000);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/>recvCallTimes.reserve(2000000);</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Processing<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dataBlocks.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>data<sp/>blocks:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/>dataBlocks.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>idb<sp/>+<sp/>1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>flush;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((idb<sp/>+<sp/>1)<sp/>%<sp/>20<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/>dataBlocks[idb];</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>ReadCommStats(dBlock);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proc(dBlock.proc);</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prevIndex(0);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.vCommStats.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;cs<sp/>=<sp/>dBlock.vCommStats[i];</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>time<sp/>for<sp/>send<sp/>call<sp/>to<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsSend(cs.cfType))<sp/>{</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>proc<sp/>+<sp/>dataNProcs<sp/>*<sp/>cs.commpid;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataSentPerProc[index]<sp/>+=<sp/>cs.size;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i+1<sp/>&gt;=<sp/><sp/>dBlock.vCommStats.size())<sp/>{</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error<sp/>in<sp/>SendRecvData:<sp/><sp/>bad<sp/>i.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;csNext<sp/>=<sp/>dBlock.vCommStats[i+1];</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sendCallTimes[proc].push_back(csNext.timeStamp<sp/>-<sp/>cs.timeStamp);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>time<sp/>for<sp/>recv<sp/>call<sp/>to<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(IsRecv(cs.cfType))<sp/>{</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i+1<sp/>&gt;=<sp/><sp/>dBlock.vCommStats.size())<sp/>{</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error<sp/>in<sp/>SendRecvData:<sp/><sp/>bad<sp/>i.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CommStats<sp/>&amp;csNext<sp/>=<sp/>dBlock.vCommStats[i+1];</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recvCallTimes[proc].push_back(csNext.timeStamp<sp/>-<sp/>cs.timeStamp);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>ClearCommStats(dBlock);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>------------------------------------------------<sp/>print<sp/>send<sp/>call<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxSends(0);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>sendCallTimes.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxSends<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(maxSends,<sp/>static_cast&lt;int&gt;<sp/>(sendCallTimes[i].<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1ac0bbdd3b8f64770191201e431e16c723" kindref="member">size</ref>()));</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(maxSends);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;double&gt;</ref><sp/>sdata(maxSends<sp/>*<sp/>dataNProcs,<sp/>0.0);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ip(0);<sp/>ip<sp/>&lt;<sp/><ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>;<sp/>++ip)<sp/>{</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is(0);<sp/>is<sp/>&lt;<sp/>sendCallTimes[ip].size();<sp/>++is)<sp/>{</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>is<sp/>+<sp/>ip<sp/>*<sp/>maxSends;</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdata[index]<sp/>=<sp/>sendCallTimes[ip][is];</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;writing<sp/>send<sp/>wait<sp/>times.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a6d17597e95ab560d6e8db9bd3bc5c3d5" kindref="member">WriteFab</ref>(</highlight><highlight class="stringliteral">&quot;sendCallTimes&quot;</highlight><highlight class="normal">,<sp/>maxSends,<sp/>dataNProcs,<sp/>&amp;sdata[0]);</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>------------------------------------------------<sp/>print<sp/>recv<sp/>call<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxRecvs(0);</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>recvCallTimes.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxRecvs<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(maxRecvs,<sp/>static_cast&lt;int&gt;<sp/>(recvCallTimes[i].<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1ac0bbdd3b8f64770191201e431e16c723" kindref="member">size</ref>()));</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__CommProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(maxRecvs);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;double&gt;</ref><sp/>rdata(maxRecvs<sp/>*<sp/>dataNProcs,<sp/>0.0);</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ip(0);<sp/>ip<sp/>&lt;<sp/><ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>;<sp/>++ip)<sp/>{</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>is(0);<sp/>is<sp/>&lt;<sp/>recvCallTimes[ip].size();<sp/>++is)<sp/>{</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>is<sp/>+<sp/>ip<sp/>*<sp/>maxRecvs;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rdata[index]<sp/>=<sp/>recvCallTimes[ip][is];</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;writing<sp/>recv<sp/>wait<sp/>times.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a6d17597e95ab560d6e8db9bd3bc5c3d5" kindref="member">WriteFab</ref>(</highlight><highlight class="stringliteral">&quot;recvCallTimes&quot;</highlight><highlight class="normal">,<sp/>maxRecvs,<sp/>dataNProcs,<sp/>&amp;rdata[0]);</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1aa2acbc851871868eb313f35d3512e986" kindref="member">Write2DFab</ref>(</highlight><highlight class="stringliteral">&quot;dataSentPerProc&quot;</highlight><highlight class="normal">,<sp/>dataNProcs,<sp/>dataNProcs,<sp/>&amp;dataSentPerProc[0]);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%%%%%%%%%%%%%<sp/>SendRecvData<sp/>time<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">amrex::ParallelDescriptor::second</ref>()<sp/>-<sp/>dstart<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a62079444f690e518e8797d23b16defde" kindref="member">CommProfStats::InitEdisonTopoMF</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/>edisonNodeFab.resize(32<sp/>*<sp/>24<sp/>*<sp/>8,<sp/>-1.0);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/>edisonCPUFab.resize(64<sp/>*<sp/>24<sp/>*<sp/>96,<sp/>-2.0);</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/>edisonNodeXYZ.resize(16);</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix(0);<sp/>ix<sp/>&lt;<sp/>edisonNodeXYZ.size();<sp/>++ix)<sp/>{</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/>edisonNodeXYZ[ix].resize(6);</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy(0);<sp/>iy<sp/>&lt;<sp/>edisonNodeXYZ[ix].size();<sp/>++iy)<sp/>{</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>edisonNodeXYZ[ix][iy].resize(16);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a829919a6ccc9bb521cdf384ae48625f1" kindref="member">CommProfStats::WriteEdisonTopoMF</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1a1c02ea7752fae69fe9fb9e7f9c3e6f4f" kindref="member">Write3DFab</ref>(</highlight><highlight class="stringliteral">&quot;edisonNode&quot;</highlight><highlight class="normal">,<sp/>32,<sp/>24,<sp/>8,<sp/>edisonNodeFab.dataPtr());</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ip(0);</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/>std::ofstream<sp/>pnnout(</highlight><highlight class="stringliteral">&quot;edisonNodeXYZ.xgr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix(0);<sp/>ix<sp/>&lt;<sp/>edisonNodeXYZ.size();<sp/>++ix)<sp/>{</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/>edisonNodeXYZ[ix].resize(6);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy(0);<sp/>iy<sp/>&lt;<sp/>edisonNodeXYZ[ix].size();<sp/>++iy)<sp/>{</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iz(0);<sp/>iz<sp/>&lt;<sp/>edisonNodeXYZ[ix][iy].size();<sp/>++iz)<sp/>{</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;XYZ<sp/>pid<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ix<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iy<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iz<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>edisonNodeXYZ[ix][iy][iz]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnnout<sp/>&lt;&lt;<sp/>ip++<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>edisonNodeXYZ[ix][iy][iz]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/>pnnout.close();</highlight></codeline>
<codeline lineno="1831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCommProfStats_1a8cd21057d82e32887fa0b13f4394061b" kindref="member">CommProfStats::AddEdisonPID</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>X,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Z,</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cab,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>row,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cage,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slot,</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pid)</highlight></codeline>
<codeline lineno="1838"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/>iy,<sp/>iz,<sp/>index;</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ixGroup,<sp/>ixCab,<sp/>ixSlot,<sp/>ixNode,<sp/>iyCage,<sp/>iySlot,<sp/>izGroup,<sp/>izNode;</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/>edisonNodeXYZ[X][Y][Z]<sp/>=<sp/>pid;</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/>ixGroup<sp/>=<sp/>X<sp/>/<sp/>4;</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ixGroup<sp/>!=<sp/>row)<sp/>{</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ixGroup<sp/>row<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ixGroup<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>row<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/>ixCab<sp/>=<sp/>cab<sp/>%<sp/>2;</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/>ixSlot<sp/>=<sp/>Z<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/>ixNode<sp/>=<sp/>cpu<sp/>%<sp/>2;</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/>ix<sp/>=<sp/>(8<sp/>*<sp/>ixGroup)<sp/>+<sp/>(4<sp/>*<sp/>ixCab)<sp/>+<sp/>(2<sp/>*<sp/>ixSlot)<sp/>+<sp/>ixNode;</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/>iyCage<sp/>=<sp/>Y<sp/>%<sp/>3;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/>iySlot<sp/>=<sp/>Z<sp/>%<sp/>8;</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/>iy<sp/>=<sp/>(8<sp/>*<sp/>iyCage)<sp/>+<sp/>iySlot;</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/>izGroup<sp/>=<sp/>X<sp/>%<sp/>4;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/>izNode<sp/>=<sp/>cpu<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/>iz<sp/>=<sp/>(2<sp/>*<sp/>izGroup)<sp/>+<sp/>izNode;</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/>index<sp/>=<sp/>(iz<sp/>*<sp/>32<sp/>*<sp/>24)<sp/>+<sp/>(iy<sp/>*<sp/>32)<sp/>+<sp/>ix;</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/>Real<sp/>*ptr<sp/>=<sp/>edisonNodeFab.dataPtr();</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/>ptr[index]<sp/>=<sp/>pid;</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(X<sp/>==<sp/>11<sp/>&amp;&amp;<sp/>Y<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;AddEdisonPID::113:<sp/><sp/>pid<sp/>index<sp/>ix<sp/>iy<sp/>iz<sp/>X<sp/>Y<sp/>Z<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pid<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>index<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ix<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iy<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iz<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>X<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Y<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Z<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(X<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>Y<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;AddEdisonPID::30:<sp/><sp/>pid<sp/>index<sp/>ix<sp/>iy<sp/>iz<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pid<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>index<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ix<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iy<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>iz<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1874"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal">std::ostream<sp/>&amp;<ref refid="AMReX__CommProfStats_8cpp_1a0558403f16fa49e0033c74e50d353b40" kindref="member">operator&lt;&lt;</ref>(std::ostream<sp/>&amp;os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structCommProfStats_1_1BarrierEntry" kindref="compound">CommProfStats::BarrierEntry</ref><sp/>&amp;be)</highlight></codeline>
<codeline lineno="1881"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;BE:<sp/><sp/>num<sp/>seek<sp/>name<sp/>bnn<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>be.<ref refid="structCommProfStats_1_1BarrierEntry_1a44cad8e418f7be7c01a8d8fb75f90865" kindref="member">number</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>be.<ref refid="structCommProfStats_1_1BarrierEntry_1ab15687c13dfc4641ab7ce30d42d8c560" kindref="member">seekIndex</ref></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>be.<ref refid="structCommProfStats_1_1BarrierEntry_1aa4edfb42a1c77e953234b83e0f87ce6f" kindref="member">name</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>be.<ref refid="structCommProfStats_1_1BarrierEntry_1a14d594f7a0f3360a1efbe5621869d37e" kindref="member">bNameNumber</ref><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><ref refid="structCommProfStats_1_1BarrierEntry" kindref="compound">CommProfStats::BarrierEntry</ref><sp/>&amp;<ref refid="structCommProfStats_1_1BarrierEntry_1ac26275b15424e584ebe7f5a89c23e4c7" kindref="member">CommProfStats::BarrierEntry::operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structCommProfStats_1_1BarrierEntry" kindref="compound">CommProfStats::BarrierEntry</ref><sp/>&amp;be)</highlight></codeline>
<codeline lineno="1890"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/>number<sp/>=<sp/>be.<ref refid="structCommProfStats_1_1BarrierEntry_1a44cad8e418f7be7c01a8d8fb75f90865" kindref="member">number</ref>;</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/>name<sp/>=<sp/>be.<ref refid="structCommProfStats_1_1BarrierEntry_1aa4edfb42a1c77e953234b83e0f87ce6f" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/>seekIndex<sp/>=<sp/>be.<ref refid="structCommProfStats_1_1BarrierEntry_1ab15687c13dfc4641ab7ce30d42d8c560" kindref="member">seekIndex</ref>;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/>bNameNumber<sp/>=<sp/>be.<ref refid="structCommProfStats_1_1BarrierEntry_1a14d594f7a0f3360a1efbe5621869d37e" kindref="member">bNameNumber</ref>;</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_CommProfStats.cpp"/>
  </compounddef>
</doxygen>
