<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1BaseUmap" kind="class" language="C++" prot="public">
    <compoundname>amrex::BaseUmap</compoundname>
    <includes refid="AMReX__BaseUmap_8H" local="no">AMReX_BaseUmap.H</includes>
    <innerclass refid="structamrex_1_1BaseUmap_1_1const__iterator" prot="public">amrex::BaseUmap::const_iterator</innerclass>
    <innerclass refid="structamrex_1_1BaseUmap_1_1Tuple" prot="public">amrex::BaseUmap::Tuple</innerclass>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1BaseUmap_1a54bde86c83f9ba12fc8a85d02fd27774" prot="public" static="no">
        <type>T</type>
        <definition>typedef T amrex::BaseUmap&lt; T &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="44" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1BaseUmap_1a4daf0e2e65125254a0e944585f4ebd9a" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::BaseUmap&lt; T &gt;::domain</definition>
        <argsstring></argsstring>
        <name>domain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="163" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BaseUmap_1afff9dd7123b0033209dc8e53723c9ce6" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::BaseUmap&lt; T &gt;::nvar</definition>
        <argsstring></argsstring>
        <name>nvar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="164" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BaseUmap_1a5420c2fdbb1aafae7a455ce7b5cb8267" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::BaseUmap&lt; T &gt;::numpts</definition>
        <argsstring></argsstring>
        <name>numpts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="165" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BaseUmap_1a407410aa62ca3aa7e0b3c331f877ea46" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; amrex::BaseUmap&lt; T &gt;::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="166" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BaseUmap_1a40c5b71c9cf854f34bc1443786fb53fb" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a9f4d0df7602cb80e9c2217dae6b9281d" kindref="member">key_table_type</ref> *</type>
        <definition>key_table_type* amrex::BaseUmap&lt; T &gt;::key_table</definition>
        <argsstring></argsstring>
        <name>key_table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="167" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BaseUmap_1ac76f08b25e30b916da1c13f2e3cc87da" prot="protected" static="no" mutable="no">
        <type>std::map&lt; <ref refid="namespaceamrex_1a9f4d0df7602cb80e9c2217dae6b9281d" kindref="member">key_table_type</ref>, <ref refid="structamrex_1_1BaseUmap_1_1Tuple" kindref="compound">Tuple</ref> &gt;</type>
        <definition>std::map&lt;key_table_type,Tuple&gt; amrex::BaseUmap&lt; T &gt;::data_key_tuple_map</definition>
        <argsstring></argsstring>
        <name>data_key_tuple_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="168" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BaseUmap_1ad620fcee1e1d1d1dafaad74468416138" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::BaseUmap&lt; T &gt;::kt_size</definition>
        <argsstring></argsstring>
        <name>kt_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="169" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BaseUmap_1ab3c27bc094cb445f62b98fa008bd086b" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::BaseUmap&lt; T &gt;::max_mv</definition>
        <argsstring></argsstring>
        <name>max_mv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="170" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="170" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1BaseUmap_1ad27ad46462e94180a16a14b7ff36533a" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::BaseUmap&lt; T &gt;::ptr_owner</definition>
        <argsstring></argsstring>
        <name>ptr_owner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="173" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="173" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1a9ad1da3854a39e5df49794e6b59a6865" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1BaseUmap_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const const_iterator amrex::BaseUmap&lt; T &gt;::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="83" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1a43aaebfa1562237241c9b3a34a560bc2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1BaseUmap_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const const_iterator amrex::BaseUmap&lt; T &gt;::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="84" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1a5a9f7b1f66eb76d6520a7a39946aa8c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t amrex::BaseUmap&lt; T &gt;::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="85" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1a7139c2c6f64902632db8a27b3c7ccd0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseUmap&lt; T &gt;::BaseUmap</definition>
        <argsstring>(const Box &amp;bx, int a_nvar, int lmax=5)</argsstring>
        <name>BaseUmap</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a_nvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lmax</declname>
          <defval>5</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para>index space covered by this Umap, which ends up being the size of the array to lookup offsets into the data array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a_nvar</parametername>
</parameternamelist>
<parameterdescription>
<para>number of components </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lmax</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum number of values in a multi valued cell </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="96" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="198" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1a66dce96b470d563ad6f46b9054733106" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BaseUmap&lt; T &gt;::~BaseUmap</definition>
        <argsstring>()</argsstring>
        <name>~BaseUmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="97" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="250" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1a775355b85686b56e3ef31c5a47e45993" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>const Box&amp; amrex::BaseUmap&lt; T &gt;::box</definition>
        <argsstring>() const </argsstring>
        <name>box</name>
        <briefdescription>
<para>Returns the domain (box) where the array is defined. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="100" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1a1f298471a3d160fbfb136d4cd20edf1e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::BaseUmap&lt; T &gt;::MaxMV</definition>
        <argsstring>() const </argsstring>
        <name>MaxMV</name>
        <briefdescription>
<para>Returns max_mv. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="103" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1aab574be99562389e7462455d2626c04f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::BaseUmap&lt; T &gt;::numPts</definition>
        <argsstring>() const </argsstring>
        <name>numPts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="105" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1a743c4a02efc3936150ace66230d7cfdc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::BaseUmap&lt; T &gt;::nComp</definition>
        <argsstring>() const </argsstring>
        <name>nComp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="107" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1a6cf2ab53ed1819eaf29fe02788293941" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::BaseUmap&lt; T &gt;::key</definition>
        <argsstring>(const IntVect &amp;pos, const int n, const int l) const </argsstring>
        <name>key</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Build the key from the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>, component, and multi-valued index For array based implementation this is offset into array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="113" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="257" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1a45b198dbc9830412dd239d1c8794689c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseUmap&lt; T &gt;::set_key</definition>
        <argsstring>(const IntVect &amp;pos, const int n, const int l, const int k)</argsstring>
        <name>set_key</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="115" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="272" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1a5685818d58ac2cf9e0377350598ec18a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseUmap&lt; T &gt;::setVal</definition>
        <argsstring>(T val, const IntVect &amp;pos, const int ncomp, const int l)</argsstring>
        <name>setVal</name>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Store value at (<ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>, ncomp, l) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="121" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="291" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1a45dabdc550cbd3b1a1a0037436b3b090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; amrex::BaseUmap&lt; T &gt;::getVal</definition>
        <argsstring>(const IntVect &amp;pos, const int ncomp, const int l)</argsstring>
        <name>getVal</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="126" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="332" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1af8d8cc96aaa8d3223cd7e9ca288c9b07" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; amrex::BaseUmap&lt; T &gt;::getVal</definition>
        <argsstring>(const IntVect &amp;pos, const int ncomp, const int l) const </argsstring>
        <name>getVal</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="130" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="316" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1a745c0471dad0d623504a8d4f3b357426" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; amrex::BaseUmap&lt; T &gt;::operator()</definition>
        <argsstring>(const IntVect &amp;pos, int ncomp, int l)</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="134" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="180" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1a213b7d4c1f3b20bb02dabbe3424aefb7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; amrex::BaseUmap&lt; T &gt;::operator()</definition>
        <argsstring>(const IntVect &amp;pos, int ncomp, int l) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="138" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="190" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1a79fa2711ee3d45ed5634024fce05f693" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* amrex::BaseUmap&lt; T &gt;::dataPtr</definition>
        <argsstring>()</argsstring>
        <name>dataPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="143" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1acf9c66f6768ec79122394e15f4392cff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* amrex::BaseUmap&lt; T &gt;::dataPtr</definition>
        <argsstring>(int n=0) const </argsstring>
        <name>dataPtr</name>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Same as above except works on const UMaps. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="146" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1a338b21ba6abefea8cab9cb9f257929fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a9f4d0df7602cb80e9c2217dae6b9281d" kindref="member">key_table_type</ref> *</type>
        <definition>key_table_type* amrex::BaseUmap&lt; T &gt;::keyTablePtr</definition>
        <argsstring>()</argsstring>
        <name>keyTablePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="149" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="149" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1a1a4952f4e66416d51654e2263dadfa7f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1a9f4d0df7602cb80e9c2217dae6b9281d" kindref="member">key_table_type</ref> *</type>
        <definition>const key_table_type* amrex::BaseUmap&lt; T &gt;::keyTablePtr</definition>
        <argsstring>(int n=0) const </argsstring>
        <name>keyTablePtr</name>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Same as above except works on const UMaps. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="152" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="152" bodyend="152"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1a36d3e1ed4439437fdef098dc4fb65242" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseUmap&lt; T &gt;::define</definition>
        <argsstring>()</argsstring>
        <name>define</name>
        <briefdescription>
<para>Allocates memory for key_table and vector of data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="158" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="233" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BaseUmap_1a2be3b4f65316383ea177b70132beda04" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BaseUmap&lt; T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Free memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="161" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="212" bodyend="228"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A sparse storage container for data in an i,j,k,n,m index space. Interface is intended to make something that behaves like a multi-dimensional array </para>    </detaileddescription>
    <collaborationgraph>
      <node id="609">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="609" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="607">
        <label>amrex::BaseUmap&lt; T &gt;</label>
        <link refid="classamrex_1_1BaseUmap"/>
        <childnode refid="608" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="608">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="609" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="610" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="610">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" line="41" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BaseUmap.H" bodystart="40" bodyend="175"/>
    <listofallmembers>
      <member refid="classamrex_1_1BaseUmap_1a7139c2c6f64902632db8a27b3c7ccd0a" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>BaseUmap</name></member>
      <member refid="classamrex_1_1BaseUmap_1a9ad1da3854a39e5df49794e6b59a6865" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>begin</name></member>
      <member refid="classamrex_1_1BaseUmap_1a775355b85686b56e3ef31c5a47e45993" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>box</name></member>
      <member refid="classamrex_1_1BaseUmap_1a2be3b4f65316383ea177b70132beda04" prot="protected" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>clear</name></member>
      <member refid="classamrex_1_1BaseUmap_1a407410aa62ca3aa7e0b3c331f877ea46" prot="protected" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>data</name></member>
      <member refid="classamrex_1_1BaseUmap_1ac76f08b25e30b916da1c13f2e3cc87da" prot="protected" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>data_key_tuple_map</name></member>
      <member refid="classamrex_1_1BaseUmap_1a79fa2711ee3d45ed5634024fce05f693" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseUmap_1acf9c66f6768ec79122394e15f4392cff" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseUmap_1a36d3e1ed4439437fdef098dc4fb65242" prot="protected" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>define</name></member>
      <member refid="classamrex_1_1BaseUmap_1a4daf0e2e65125254a0e944585f4ebd9a" prot="protected" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>domain</name></member>
      <member refid="classamrex_1_1BaseUmap_1a43aaebfa1562237241c9b3a34a560bc2" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>end</name></member>
      <member refid="classamrex_1_1BaseUmap_1a45dabdc550cbd3b1a1a0037436b3b090" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseUmap_1af8d8cc96aaa8d3223cd7e9ca288c9b07" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseUmap_1a6cf2ab53ed1819eaf29fe02788293941" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>key</name></member>
      <member refid="classamrex_1_1BaseUmap_1a40c5b71c9cf854f34bc1443786fb53fb" prot="protected" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>key_table</name></member>
      <member refid="classamrex_1_1BaseUmap_1a338b21ba6abefea8cab9cb9f257929fb" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>keyTablePtr</name></member>
      <member refid="classamrex_1_1BaseUmap_1a1a4952f4e66416d51654e2263dadfa7f" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>keyTablePtr</name></member>
      <member refid="classamrex_1_1BaseUmap_1ad620fcee1e1d1d1dafaad74468416138" prot="protected" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>kt_size</name></member>
      <member refid="classamrex_1_1BaseUmap_1ab3c27bc094cb445f62b98fa008bd086b" prot="protected" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>max_mv</name></member>
      <member refid="classamrex_1_1BaseUmap_1a1f298471a3d160fbfb136d4cd20edf1e" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>MaxMV</name></member>
      <member refid="classamrex_1_1BaseUmap_1a743c4a02efc3936150ace66230d7cfdc" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>nComp</name></member>
      <member refid="classamrex_1_1BaseUmap_1a5420c2fdbb1aafae7a455ce7b5cb8267" prot="protected" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>numpts</name></member>
      <member refid="classamrex_1_1BaseUmap_1aab574be99562389e7462455d2626c04f" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>numPts</name></member>
      <member refid="classamrex_1_1BaseUmap_1afff9dd7123b0033209dc8e53723c9ce6" prot="protected" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>nvar</name></member>
      <member refid="classamrex_1_1BaseUmap_1a745c0471dad0d623504a8d4f3b357426" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseUmap_1a213b7d4c1f3b20bb02dabbe3424aefb7" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseUmap_1ad27ad46462e94180a16a14b7ff36533a" prot="private" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>ptr_owner</name></member>
      <member refid="classamrex_1_1BaseUmap_1a45b198dbc9830412dd239d1c8794689c" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>set_key</name></member>
      <member refid="classamrex_1_1BaseUmap_1a5685818d58ac2cf9e0377350598ec18a" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseUmap_1a5a9f7b1f66eb76d6520a7a39946aa8c1" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>size</name></member>
      <member refid="classamrex_1_1BaseUmap_1a54bde86c83f9ba12fc8a85d02fd27774" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>value_type</name></member>
      <member refid="classamrex_1_1BaseUmap_1a66dce96b470d563ad6f46b9054733106" prot="public" virt="non-virtual"><scope>amrex::BaseUmap</scope><name>~BaseUmap</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
