<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1BoxArray" kind="class" language="C++" prot="public">
    <compoundname>amrex::BoxArray</compoundname>
    <includes refid="AMReX__BoxArray_8H" local="no">AMReX_BoxArray.H</includes>
    <innerclass refid="structamrex_1_1BoxArray_1_1RefID" prot="public">amrex::BoxArray::RefID</innerclass>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1BoxArray_1a88d35757727faba3973cc46625237e74" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::BoxArray::initialized</definition>
        <argsstring></argsstring>
        <name>initialized</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="492" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" bodystart="492" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1BoxArray_1ab2c1fcb73c2b03fe552bfd3db42b9f50" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; BATransformer &gt;</type>
        <definition>std::unique_ptr&lt;BATransformer&gt; amrex::BoxArray::m_transformer</definition>
        <argsstring></argsstring>
        <name>m_transformer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="506" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" bodystart="506" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BoxArray_1a837fb70be84443dff456b34df4cce754" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
        <definition>IndexType amrex::BoxArray::m_typ</definition>
        <argsstring></argsstring>
        <name>m_typ</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="507" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" bodystart="507" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BoxArray_1aaf6797ef27a17877937193328d3734ee" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::BoxArray::m_crse_ratio</definition>
        <argsstring></argsstring>
        <name>m_crse_ratio</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="508" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" bodystart="508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BoxArray_1a7cad79fe93491b09a6b194a3bc847a40" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::BoxArray::m_simple</definition>
        <argsstring></argsstring>
        <name>m_simple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="509" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" bodystart="509" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BoxArray_1aaf44041b956612401793f474280e5e2f" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; BARef &gt;</type>
        <definition>std::shared_ptr&lt;BARef&gt; amrex::BoxArray::m_ref</definition>
        <argsstring></argsstring>
        <name>m_ref</name>
        <briefdescription>
<para>The data <ndash/> a reference-counted pointer to a Ref. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="512" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" bodystart="512" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ad666fe6cebd7a6cefb1914ecc807c08d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>()</argsstring>
        <name>BoxArray</name>
        <briefdescription>
<para>Construct an empty <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="212" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="274" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a63a26e03740d9cf35dfdda6a3315bc08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(const BoxArray &amp;rhs)</argsstring>
        <name>BoxArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>The copy constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="215" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="351" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a6af808cb8cf129f013f0336fafa57a5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::operator=</definition>
        <argsstring>(const BoxArray &amp;rhs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>The assignment operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="218" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="361" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac1ed271c8bba3f4a6f874f9aed33f5d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(BoxArray &amp;&amp;rhs) noexcept=default</argsstring>
        <name>BoxArray</name>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>The move constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac273e3e3038f3ca71306de6576d41c74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::operator=</definition>
        <argsstring>(BoxArray &amp;&amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>The move assignment operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac969ef57c4c67c6dd624e9f261f2afb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::~BoxArray</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~BoxArray</name>
        <briefdescription>
<para>The destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aff04ba0858cf808f3f7871667344a7bd" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(const Box &amp;bx)</argsstring>
        <name>BoxArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>Make a boxarray out of a single box. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="230" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="283" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1acb12dd00d5196cc320072bce8188d5d1" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(size_t size)</argsstring>
        <name>BoxArray</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> of the specified size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="233" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="314" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a4b713738c14f93de97c288200cb69cd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(const Box *bxvec, int nbox)</argsstring>
        <name>BoxArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> *</type>
          <declname>bxvec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbox</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from an array of Boxes of size nbox. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="236" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="323" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a9802183a182f70509c9b1f0dc5c4bf84" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(const BoxList &amp;bl)</argsstring>
        <name>BoxArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="240" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="292" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a8f81a0f854fcc971e054650850308270" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(BoxList &amp;&amp;bl) noexcept</argsstring>
        <name>BoxArray</name>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;&amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="241" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="303" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1afd76dc52a3e04f2242831d4fb4d8bde1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(const BoxArray &amp;rhs, const BATransformer &amp;trans)</argsstring>
        <name>BoxArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const BATransformer &amp;</type>
          <declname>trans</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="243" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="337" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a55d69deebe4b1ae84fc259bfd4d045f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::define</definition>
        <argsstring>(const Box &amp;bx)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from a single box. It is an error if the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> has already been initialized. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="250" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="372" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a50815493c47d22812c0e9e3745e19390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::define</definition>
        <argsstring>(const BoxList &amp;bl)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from the supplied <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. It is an error if the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> has already been initialized. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="255" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="383" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a1797dfe4fdb30221d30cef785da8929d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::define</definition>
        <argsstring>(BoxList &amp;&amp;bl) noexcept</argsstring>
        <name>define</name>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;&amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="256" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="393" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1afed0e52f6570fe4960ce4758f5558761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Remove all Boxes from the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="259" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="403" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aa405ddc0841be0f5b1bac1d1d1abf7ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::resize</definition>
        <argsstring>(long len)</argsstring>
        <name>resize</name>
        <param>
          <type>long</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Resize the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. See Vector&lt;T&gt;::resize() for the gory details. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="262" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="410" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a011f9535b7bcab7cb5e43dace246b310" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::BoxArray::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>Return the number of boxes in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="265" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" bodystart="265" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a68e0aa6f86975ad68ac7758f00ee9808" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::BoxArray::capacity</definition>
        <argsstring>() const noexcept</argsstring>
        <name>capacity</name>
        <briefdescription>
<para>Return the number of boxes that can be held in the current allocated storage. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="268" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" bodystart="268" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ae71159edaa4456e59699f01955144d97" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Return whether the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="271" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" bodystart="271" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a857a2628b2a0b5e16cfdb36fc4d34870" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::BoxArray::numPts</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numPts</name>
        <briefdescription>
<para>Returns the total number of cells contained in all boxes in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="274" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="417" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a85a31cf2bd546e2292492cb6c288eb8d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double amrex::BoxArray::d_numPts</definition>
        <argsstring>() const noexcept</argsstring>
        <name>d_numPts</name>
        <briefdescription>
<para>Returns the total number of cells (in double type) contained in all boxes in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="277" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="432" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a4df72bcadb7bdaa2c5db57212e48853a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::BoxArray::readFrom</definition>
        <argsstring>(std::istream &amp;is)</argsstring>
        <name>readFrom</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from the supplied istream. It is an error if the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> has already been initialized. Note that the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> in the istream must have been written using <ref refid="classamrex_1_1BoxArray_1a3d7bd96e3a518279a830a8e53761f5a6" kindref="member">writeOn()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="284" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="447" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a3d7bd96e3a518279a830a8e53761f5a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::BoxArray::writeOn</definition>
        <argsstring>(std::ostream &amp;) const </argsstring>
        <name>writeOn</name>
        <param>
          <type>std::ostream &amp;</type>
          <defname>os</defname>
        </param>
        <briefdescription>
<para>Output this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to a checkpoint file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="287" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="460" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a74ee48ddcfd53d548f7a55352dba7cb4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::operator==</definition>
        <argsstring>(const BoxArray &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Are the BoxArrays equal? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="290" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="481" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a5856751adc0f5194829d3c3920bc2717" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::operator!=</definition>
        <argsstring>(const BoxArray &amp;rhs) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Are the BoxArrays not equal? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="293" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="496" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac7392d5269b259859afb66f9528f1f6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::operator==</definition>
        <argsstring>(const Vector&lt; Box &gt; &amp;bv) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &amp;</type>
          <declname>bv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="295" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="502" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a20f87e767c1742aa9d48ab35c5739352" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::operator!=</definition>
        <argsstring>(const Vector&lt; Box &gt; &amp;bv) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &amp;</type>
          <declname>bv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="296" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="512" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1acaed188c00aecea228d8c92c17a0c3fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::CellEqual</definition>
        <argsstring>(const BoxArray &amp;rhs) const noexcept</argsstring>
        <name>CellEqual</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Are the BoxArrays equal after conversion to cell-centered. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="299" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="518" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aebefb23ed05e76ffc8ec0c3af718652e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::maxSize</definition>
        <argsstring>(int block_size)</argsstring>
        <name>maxSize</name>
        <param>
          <type>int</type>
          <declname>block_size</declname>
        </param>
        <briefdescription>
<para>Forces each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to have sides &lt;= block_size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="302" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="525" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a59b44d438d01893bcae36064ec089cdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::maxSize</definition>
        <argsstring>(const IntVect &amp;block_size)</argsstring>
        <name>maxSize</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>block_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="304" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="531" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a6f3cb1eac256b7f40e4b6491aff29448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::refine</definition>
        <argsstring>(int refinement_ratio)</argsstring>
        <name>refine</name>
        <param>
          <type>int</type>
          <declname>refinement_ratio</declname>
        </param>
        <briefdescription>
<para>Refine each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to the specified ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="307" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="546" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aa0c0d491648b056a2c961a79dcfe0862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::refine</definition>
        <argsstring>(const IntVect &amp;refinement_ratio)</argsstring>
        <name>refine</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>refinement_ratio</declname>
        </param>
        <briefdescription>
<para>Refine each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to the specified ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="310" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="552" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ab905a7751a6378467cf96c78c1ac880d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::coarsen</definition>
        <argsstring>(int refinement_ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type>int</type>
          <declname>refinement_ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to the specified ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="313" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="596" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1afb286e24ad585ab5663caf6fc4da7689" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::coarsenable</definition>
        <argsstring>(int refinement_ratio, int min_width=1) const </argsstring>
        <name>coarsenable</name>
        <param>
          <type>int</type>
          <declname>refinement_ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_width</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Coarsen each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to the specified ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="317" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="568" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a131c32c4fea868f15051a44c5b79dbe7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::coarsenable</definition>
        <argsstring>(const IntVect &amp;refinement_ratio, int min_width=1) const </argsstring>
        <name>coarsenable</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>refinement_ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_width</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="318" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="574" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aa6e0639e937b32bdcf265a67fa4074c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::coarsen</definition>
        <argsstring>(const IntVect &amp;refinement_ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>refinement_ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to the specified ratio. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="321" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="602" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a39dc6acfc5027b83d4e788e378990b57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::growcoarsen</definition>
        <argsstring>(int n, const IntVect &amp;refinement_ratio)</argsstring>
        <name>growcoarsen</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>refinement_ratio</declname>
        </param>
        <briefdescription>
<para>Grow and then coarsen each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="324" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="610" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a5d1e1381e0bcaf2becd4dbfece949ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::growcoarsen</definition>
        <argsstring>(IntVect const &amp;ngrow, const IntVect &amp;refinement_ratio)</argsstring>
        <name>growcoarsen</name>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>refinement_ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="325" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="616" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a12a6842ecc48421374e69c0d40ba1542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::grow</definition>
        <argsstring>(int n)</argsstring>
        <name>grow</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Grow each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> by the specified amount. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="328" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="631" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac76ee31fa4b71fa56dad4635a650cfbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::grow</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>grow</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Grow each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> by the specified amount. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="331" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="646" bodyend="658"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a624b3513f2b285491050d17d8952c474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::grow</definition>
        <argsstring>(int idir, int n_cell)</argsstring>
        <name>grow</name>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
<para>Grow each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> on the low and high ends by n_cell cells in the idir direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="336" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="661" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a76695bda9b8e135e6d945c578557d78d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::growLo</definition>
        <argsstring>(int idir, int n_cell)</argsstring>
        <name>growLo</name>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
<para>Grow each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> on the low end by n_cell cells in the idir direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="341" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="677" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a9848441ce9a5694f17e8617486e0b167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::growHi</definition>
        <argsstring>(int idir, int n_cell)</argsstring>
        <name>growHi</name>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
<para>Grow each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> on the high end by n_cell cells in the idir direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="346" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="693" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1abf9bf4fe5d5ddb8ae3498893bc2253c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::surroundingNodes</definition>
        <argsstring>()</argsstring>
        <name>surroundingNodes</name>
        <briefdescription>
<para>Apply surroundingNodes(Box) to each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. See the documentation of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> for details. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="351" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="709" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ae3ca0eb36b4308574b2f0dfc1fdd3562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::surroundingNodes</definition>
        <argsstring>(int dir)</argsstring>
        <name>surroundingNodes</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Apply surroundingNodes(Box,int) to each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. See the documentation of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> for details. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="356" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="716" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a8199954b0860a879faa63867400b5435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::enclosedCells</definition>
        <argsstring>()</argsstring>
        <name>enclosedCells</name>
        <briefdescription>
<para>Apply <ref refid="classamrex_1_1Box_1ae17168bdeb2aab35fdffc69ac0e21bce" kindref="member">Box::enclosedCells()</ref> to each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="359" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="724" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac6147deef62aa311d8c7bbf681fc35ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::enclosedCells</definition>
        <argsstring>(int dir)</argsstring>
        <name>enclosedCells</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="classamrex_1_1Box_1a3a2fa1570beab3cd64d2d7c8f7902458" kindref="member">Box::enclosedCells(int)</ref> to each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="362" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="730" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ad830f3b87aaa26bf46f53cc54eed83ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::convert</definition>
        <argsstring>(IndexType typ)</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="classamrex_1_1Box_1a5499f2bb3ff92ef3951332fa6b390b73" kindref="member">Box::convert(IndexType)</ref> to each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="365" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="738" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1af2179cbe6df46ce5bf844646775fb55e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::convert</definition>
        <argsstring>(const IntVect &amp;typ)</argsstring>
        <name>convert</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>typ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="367" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="746" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a7c550a5e0396c503e3465da2c28f8db9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::convert</definition>
        <argsstring>(Box(*fp)(const Box &amp;))</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref>(*)(const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;)</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
<para>Apply function (*fp)(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref>) to each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="370" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="755" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1abbb552183613f3c0861fb4e6755d942e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::shift</definition>
        <argsstring>(int dir, int nzones)</argsstring>
        <name>shift</name>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nzones</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="classamrex_1_1Box_1abe35c4589dedd7df76bbcd5937d3b2e1" kindref="member">Box::shift(int,int)</ref> to each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="373" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="774" bodyend="787"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a2ae1e7b4aa2c6c0f78d777bbb6b9f290" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::shift</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="classamrex_1_1Box_1ab2cad65205f78eb96496261885e65784" kindref="member">Box::shift(const IntVect &amp;iv)</ref> to each <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="376" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="790" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1accbf2c73a258ba522542ac1ad13f9ca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::set</definition>
        <argsstring>(int i, const Box &amp;ibox)</argsstring>
        <name>set</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>ibox</declname>
        </param>
        <briefdescription>
<para>Set element i in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> ibox. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="379" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="805" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a0386a0ab9aa86bee7e8f499770f99ca5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::BoxArray::operator[]</definition>
        <argsstring>(int index) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return element index of this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="382" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" bodystart="382" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1accfeb1e3facccbcdedc791ce6bbb67dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::BoxArray::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Return element index of this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="393" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="817" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac4e1bbf1c88985b380f9e9df11be7354" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::BoxArray::get</definition>
        <argsstring>(int index) const noexcept</argsstring>
        <name>get</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return element index of this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="396" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" bodystart="396" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a8366f694b15adc33374df70cdd56d0b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::BoxArray::getCellCenteredBox</definition>
        <argsstring>(int index) const noexcept</argsstring>
        <name>getCellCenteredBox</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return cell-centered box at element index of this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="399" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" bodystart="399" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac4850267c44a2d8fcec69aed35273f10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::ok</definition>
        <argsstring>() const </argsstring>
        <name>ok</name>
        <briefdescription>
<para>Return true if <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is valid and they all have the same <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref>. Is true by default if the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="407" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="823" bodyend="836"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a71ee9d089c61879519be6ef5f6c9d5be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::isDisjoint</definition>
        <argsstring>() const </argsstring>
        <name>isDisjoint</name>
        <briefdescription>
<para>Return true if set of intersecting Boxes in <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is null. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="410" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="839" bodyend="855"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ad5ce37e7cd577d5a50daee4f2812848e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::BoxArray::boxList</definition>
        <argsstring>() const </argsstring>
        <name>boxList</name>
        <briefdescription>
<para>Create a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> from this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="413" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="858" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aef0cb56c35eb69699a65b8cedac0ee8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::contains</definition>
        <argsstring>(const IntVect &amp;v) const </argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>True if the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> is within any of the Boxes in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="416" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="873" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a64402c62ddcdc3f061a11cce3380b242" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::contains</definition>
        <argsstring>(const Box &amp;b, bool assume_disjoint_ba=false) const </argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>assume_disjoint_ba</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>True if the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> is within any of the Boxes in the List. The <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> must also have the same <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> as those in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="422" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="883" bodyend="919"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a07747cdf96210e6a8f5e3ad5df4b3755" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::contains</definition>
        <argsstring>(const BoxArray &amp;bl, bool assume_disjoint_ba=false) const </argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>assume_disjoint_ba</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>True if all Boxes in bl are contained in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="425" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="922" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a529a87a58dd44541a29f086f845793d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::BoxArray::minimalBox</definition>
        <argsstring>() const </argsstring>
        <name>minimalBox</name>
        <briefdescription>
<para>Return smallest <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> that contains all Boxes in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="428" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="938" bodyend="984"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aa4bee4bde618f5551c4f9b11ce0cfc8e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::BoxArray::minimalBox</definition>
        <argsstring>(long &amp;npts_avg_box) const </argsstring>
        <name>minimalBox</name>
        <param>
          <type>long &amp;</type>
          <declname>npts_avg_box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="429" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="987" bodyend="1040"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a5e4e4bc0ce85e8bdbe8411e99e37b540" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::intersects</definition>
        <argsstring>(const Box &amp;b, int ng=0) const </argsstring>
        <name>intersects</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ng</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>True if the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> intersects with this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>(+ghostcells). The <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> must have the same <ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref> as those in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="435" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1043" bodyend="1046"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a8bb3ab19e4f6c0bd022fac9867b5fa0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::intersects</definition>
        <argsstring>(const Box &amp;b, const IntVect &amp;ng) const </argsstring>
        <name>intersects</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="437" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1049" bodyend="1057"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aa18b2101c3312c7dad9a6692249fbeaa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; int, <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; int, Box &gt; &gt; amrex::BoxArray::intersections</definition>
        <argsstring>(const Box &amp;bx) const </argsstring>
        <name>intersections</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>Return intersections of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="440" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1060" bodyend="1065"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a319d10412d00d88445667d0ab17b37ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; int, <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; int, Box &gt; &gt; amrex::BoxArray::intersections</definition>
        <argsstring>(const Box &amp;bx, bool first_only, int ng) const </argsstring>
        <name>intersections</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>first_only</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
<para>Return intersections of <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>(+ghostcells). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="443" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1068" bodyend="1073"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a5a1f3d0a26c3013d1c78929891835afd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; int, <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; int, Box &gt; &gt; amrex::BoxArray::intersections</definition>
        <argsstring>(const Box &amp;bx, bool first_only, const IntVect &amp;ng) const </argsstring>
        <name>intersections</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>first_only</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="445" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1076" bodyend="1081"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a475e354adc3fee9a9f31afb43a092723" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::intersections</definition>
        <argsstring>(const Box &amp;bx, std::vector&lt; std::pair&lt; int, Box &gt; &gt; &amp;isects) const </argsstring>
        <name>intersections</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>std::vector&lt; std::pair&lt; int, <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &gt; &amp;</type>
          <declname>isects</declname>
        </param>
        <briefdescription>
<para>intersect <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>, then store the result in isects </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="448" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1084" bodyend="1088"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a5651ec7b52ae0f2d95540ccd0ce88045" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::intersections</definition>
        <argsstring>(const Box &amp;bx, std::vector&lt; std::pair&lt; int, Box &gt; &gt; &amp;isects, bool first_only, int ng) const </argsstring>
        <name>intersections</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>std::vector&lt; std::pair&lt; int, <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &gt; &amp;</type>
          <declname>isects</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>first_only</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
<para>intersect <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>(+ghostcells), then store the result in isects </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="451" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1091" bodyend="1097"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a66380d733cd68c76c5aa0bd057bf26a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::intersections</definition>
        <argsstring>(const Box &amp;bx, std::vector&lt; std::pair&lt; int, Box &gt; &gt; &amp;isects, bool first_only, const IntVect &amp;ng) const </argsstring>
        <name>intersections</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>std::vector&lt; std::pair&lt; int, <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &gt; &amp;</type>
          <declname>isects</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>first_only</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="454" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1100" bodyend="1158"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ab3b22d3a396645e254efa7808df0f979" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::BoxArray::complementIn</definition>
        <argsstring>(const Box &amp;b) const </argsstring>
        <name>complementIn</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Return box - boxarray. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="458" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1161" bodyend="1166"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a13e3918caa82dee44d3dc2816f5fa728" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::complementIn</definition>
        <argsstring>(BoxList &amp;bl, const Box &amp;b) const </argsstring>
        <name>complementIn</name>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="459" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1169" bodyend="1235"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a6f5062bfe51df819a39eab3adbce639c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::clear_hash_bin</definition>
        <argsstring>() const </argsstring>
        <name>clear_hash_bin</name>
        <briefdescription>
<para>Clear out the internal hash table used by intersections. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="462" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1238" bodyend="1248"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aafdd2fe3c88e9b17d4892dd36e92225f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::removeOverlap</definition>
        <argsstring>(bool simplify=true)</argsstring>
        <name>removeOverlap</name>
        <param>
          <type>bool</type>
          <declname>simplify</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Change the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to one with no overlap and then simplify it (see the simplify function in <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="465" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1254" bodyend="1332"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a0c8df27bfc6981d3e50784b64026a249" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1BoxArray_1_1RefID" kindref="compound">RefID</ref></type>
        <definition>RefID amrex::BoxArray::getRefID</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getRefID</name>
        <briefdescription>
<para>Return a unique ID of the reference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="482" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" bodystart="482" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a0005742d49b95bea045b6f46edb75714" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
        <definition>IndexType amrex::BoxArray::ixType</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ixType</name>
        <briefdescription>
<para>Return index type of this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="485" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" bodystart="485" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a4c29b9c027bf459bb2d368484e90bb76" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::BoxArray::crseRatio</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crseRatio</name>
        <briefdescription>
<para>Return crse ratio of this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="488" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" bodystart="488" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ae3fba31af025b800aef97da09bc4113c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::uniqify</definition>
        <argsstring>()</argsstring>
        <name>uniqify</name>
        <briefdescription>
<para>Make ourselves unique. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="495" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1416" bodyend="1435"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a93718ee84062758c5256a2792939c6f7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::BoxArray::SameRefs</definition>
        <argsstring>(const BoxArray &amp;lhs, const BoxArray &amp;rhs)</argsstring>
        <name>SameRefs</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>whether two BoxArrays share the same data </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="468" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" bodystart="468" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a34bf3e13bc08cfec354d8d6b52004885" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="490" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="258" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a16062c68a56d66f78af7d8cdaf61e330" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="491" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="269" bodyend="272"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a9f2c23e3d3ccd73f1045f2bca61f7a11" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::type_update</definition>
        <argsstring>()</argsstring>
        <name>type_update</name>
        <briefdescription>
<para>Update <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> index type according the box type, and then convert boxes to cell-centered. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="499" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1335" bodyend="1348"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac80a0f4e753f11c0f80acfa789c279ca" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>BARef::HashType &amp;</type>
        <definition>BARef::HashType &amp; amrex::BoxArray::getHashMap</definition>
        <argsstring>() const </argsstring>
        <name>getHashMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="501" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1363" bodyend="1413"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a505e85adf7cf632051028a779afb02d9" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::BoxArray::getDoiLo</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getDoiLo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="503" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1351" bodyend="1354"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a6884438231c020a69d778c573c16b9e7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::BoxArray::getDoiHi</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getDoiHi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="504" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1357" bodyend="1360"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="774">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="774" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="773">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="774" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="775" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="775">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" line="209" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BoxArray.H" bodystart="208" bodyend="513"/>
    <listofallmembers>
      <member refid="classamrex_1_1BoxArray_1ad666fe6cebd7a6cefb1914ecc807c08d" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1a63a26e03740d9cf35dfdda6a3315bc08" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1ac1ed271c8bba3f4a6f874f9aed33f5d6" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1aff04ba0858cf808f3f7871667344a7bd" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1acb12dd00d5196cc320072bce8188d5d1" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1a4b713738c14f93de97c288200cb69cd6" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1a9802183a182f70509c9b1f0dc5c4bf84" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1a8f81a0f854fcc971e054650850308270" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1afd76dc52a3e04f2242831d4fb4d8bde1" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1ad5ce37e7cd577d5a50daee4f2812848e" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>boxList</name></member>
      <member refid="classamrex_1_1BoxArray_1a68e0aa6f86975ad68ac7758f00ee9808" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>capacity</name></member>
      <member refid="classamrex_1_1BoxArray_1acaed188c00aecea228d8c92c17a0c3fb" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>CellEqual</name></member>
      <member refid="classamrex_1_1BoxArray_1afed0e52f6570fe4960ce4758f5558761" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>clear</name></member>
      <member refid="classamrex_1_1BoxArray_1a6f5062bfe51df819a39eab3adbce639c" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>clear_hash_bin</name></member>
      <member refid="classamrex_1_1BoxArray_1ab905a7751a6378467cf96c78c1ac880d" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1BoxArray_1aa6e0639e937b32bdcf265a67fa4074c4" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1BoxArray_1afb286e24ad585ab5663caf6fc4da7689" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>coarsenable</name></member>
      <member refid="classamrex_1_1BoxArray_1a131c32c4fea868f15051a44c5b79dbe7" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>coarsenable</name></member>
      <member refid="classamrex_1_1BoxArray_1ab3b22d3a396645e254efa7808df0f979" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>complementIn</name></member>
      <member refid="classamrex_1_1BoxArray_1a13e3918caa82dee44d3dc2816f5fa728" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>complementIn</name></member>
      <member refid="classamrex_1_1BoxArray_1aef0cb56c35eb69699a65b8cedac0ee8f" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>contains</name></member>
      <member refid="classamrex_1_1BoxArray_1a64402c62ddcdc3f061a11cce3380b242" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>contains</name></member>
      <member refid="classamrex_1_1BoxArray_1a07747cdf96210e6a8f5e3ad5df4b3755" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>contains</name></member>
      <member refid="classamrex_1_1BoxArray_1ad830f3b87aaa26bf46f53cc54eed83ce" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>convert</name></member>
      <member refid="classamrex_1_1BoxArray_1af2179cbe6df46ce5bf844646775fb55e" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>convert</name></member>
      <member refid="classamrex_1_1BoxArray_1a7c550a5e0396c503e3465da2c28f8db9" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>convert</name></member>
      <member refid="classamrex_1_1BoxArray_1a4c29b9c027bf459bb2d368484e90bb76" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>crseRatio</name></member>
      <member refid="classamrex_1_1BoxArray_1a85a31cf2bd546e2292492cb6c288eb8d" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>d_numPts</name></member>
      <member refid="classamrex_1_1BoxArray_1a55d69deebe4b1ae84fc259bfd4d045f2" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>define</name></member>
      <member refid="classamrex_1_1BoxArray_1a50815493c47d22812c0e9e3745e19390" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>define</name></member>
      <member refid="classamrex_1_1BoxArray_1a1797dfe4fdb30221d30cef785da8929d" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>define</name></member>
      <member refid="classamrex_1_1BoxArray_1ae71159edaa4456e59699f01955144d97" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>empty</name></member>
      <member refid="classamrex_1_1BoxArray_1a8199954b0860a879faa63867400b5435" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>enclosedCells</name></member>
      <member refid="classamrex_1_1BoxArray_1ac6147deef62aa311d8c7bbf681fc35ce" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>enclosedCells</name></member>
      <member refid="classamrex_1_1BoxArray_1a16062c68a56d66f78af7d8cdaf61e330" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1BoxArray_1ac4e1bbf1c88985b380f9e9df11be7354" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>get</name></member>
      <member refid="classamrex_1_1BoxArray_1a8366f694b15adc33374df70cdd56d0b5" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getCellCenteredBox</name></member>
      <member refid="classamrex_1_1BoxArray_1a6884438231c020a69d778c573c16b9e7" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getDoiHi</name></member>
      <member refid="classamrex_1_1BoxArray_1a505e85adf7cf632051028a779afb02d9" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getDoiLo</name></member>
      <member refid="classamrex_1_1BoxArray_1ac80a0f4e753f11c0f80acfa789c279ca" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getHashMap</name></member>
      <member refid="classamrex_1_1BoxArray_1a0c8df27bfc6981d3e50784b64026a249" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getRefID</name></member>
      <member refid="classamrex_1_1BoxArray_1a12a6842ecc48421374e69c0d40ba1542" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>grow</name></member>
      <member refid="classamrex_1_1BoxArray_1ac76ee31fa4b71fa56dad4635a650cfbe" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>grow</name></member>
      <member refid="classamrex_1_1BoxArray_1a624b3513f2b285491050d17d8952c474" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>grow</name></member>
      <member refid="classamrex_1_1BoxArray_1a39dc6acfc5027b83d4e788e378990b57" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>growcoarsen</name></member>
      <member refid="classamrex_1_1BoxArray_1a5d1e1381e0bcaf2becd4dbfece949ecf" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>growcoarsen</name></member>
      <member refid="classamrex_1_1BoxArray_1a9848441ce9a5694f17e8617486e0b167" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>growHi</name></member>
      <member refid="classamrex_1_1BoxArray_1a76695bda9b8e135e6d945c578557d78d" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>growLo</name></member>
      <member refid="classamrex_1_1BoxArray_1a34bf3e13bc08cfec354d8d6b52004885" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1BoxArray_1a88d35757727faba3973cc46625237e74" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>initialized</name></member>
      <member refid="classamrex_1_1BoxArray_1aa18b2101c3312c7dad9a6692249fbeaa" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersections</name></member>
      <member refid="classamrex_1_1BoxArray_1a319d10412d00d88445667d0ab17b37ca" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersections</name></member>
      <member refid="classamrex_1_1BoxArray_1a5a1f3d0a26c3013d1c78929891835afd" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersections</name></member>
      <member refid="classamrex_1_1BoxArray_1a475e354adc3fee9a9f31afb43a092723" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersections</name></member>
      <member refid="classamrex_1_1BoxArray_1a5651ec7b52ae0f2d95540ccd0ce88045" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersections</name></member>
      <member refid="classamrex_1_1BoxArray_1a66380d733cd68c76c5aa0bd057bf26a6" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersections</name></member>
      <member refid="classamrex_1_1BoxArray_1a5e4e4bc0ce85e8bdbe8411e99e37b540" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersects</name></member>
      <member refid="classamrex_1_1BoxArray_1a8bb3ab19e4f6c0bd022fac9867b5fa0a" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersects</name></member>
      <member refid="classamrex_1_1BoxArray_1a71ee9d089c61879519be6ef5f6c9d5be" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>isDisjoint</name></member>
      <member refid="classamrex_1_1BoxArray_1a0005742d49b95bea045b6f46edb75714" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>ixType</name></member>
      <member refid="classamrex_1_1BoxArray_1aaf6797ef27a17877937193328d3734ee" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>m_crse_ratio</name></member>
      <member refid="classamrex_1_1BoxArray_1aaf44041b956612401793f474280e5e2f" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>m_ref</name></member>
      <member refid="classamrex_1_1BoxArray_1a7cad79fe93491b09a6b194a3bc847a40" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>m_simple</name></member>
      <member refid="classamrex_1_1BoxArray_1ab2c1fcb73c2b03fe552bfd3db42b9f50" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>m_transformer</name></member>
      <member refid="classamrex_1_1BoxArray_1a837fb70be84443dff456b34df4cce754" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>m_typ</name></member>
      <member refid="classamrex_1_1BoxArray_1aebefb23ed05e76ffc8ec0c3af718652e" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>maxSize</name></member>
      <member refid="classamrex_1_1BoxArray_1a59b44d438d01893bcae36064ec089cdc" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>maxSize</name></member>
      <member refid="classamrex_1_1BoxArray_1a529a87a58dd44541a29f086f845793d3" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>minimalBox</name></member>
      <member refid="classamrex_1_1BoxArray_1aa4bee4bde618f5551c4f9b11ce0cfc8e" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>minimalBox</name></member>
      <member refid="classamrex_1_1BoxArray_1a857a2628b2a0b5e16cfdb36fc4d34870" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>numPts</name></member>
      <member refid="classamrex_1_1BoxArray_1ac4850267c44a2d8fcec69aed35273f10" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>ok</name></member>
      <member refid="classamrex_1_1BoxArray_1a5856751adc0f5194829d3c3920bc2717" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1BoxArray_1a20f87e767c1742aa9d48ab35c5739352" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1BoxArray_1a6af808cb8cf129f013f0336fafa57a5c" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BoxArray_1ac273e3e3038f3ca71306de6576d41c74" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BoxArray_1a74ee48ddcfd53d548f7a55352dba7cb4" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator==</name></member>
      <member refid="classamrex_1_1BoxArray_1ac7392d5269b259859afb66f9528f1f6b" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator==</name></member>
      <member refid="classamrex_1_1BoxArray_1a0386a0ab9aa86bee7e8f499770f99ca5" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1BoxArray_1accfeb1e3facccbcdedc791ce6bbb67dc" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1BoxArray_1a4df72bcadb7bdaa2c5db57212e48853a" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>readFrom</name></member>
      <member refid="classamrex_1_1BoxArray_1a6f3cb1eac256b7f40e4b6491aff29448" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>refine</name></member>
      <member refid="classamrex_1_1BoxArray_1aa0c0d491648b056a2c961a79dcfe0862" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>refine</name></member>
      <member refid="classamrex_1_1BoxArray_1aafdd2fe3c88e9b17d4892dd36e92225f" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>removeOverlap</name></member>
      <member refid="classamrex_1_1BoxArray_1aa405ddc0841be0f5b1bac1d1d1abf7ed" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>resize</name></member>
      <member refid="classamrex_1_1BoxArray_1a93718ee84062758c5256a2792939c6f7" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>SameRefs</name></member>
      <member refid="classamrex_1_1BoxArray_1accbf2c73a258ba522542ac1ad13f9ca8" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>set</name></member>
      <member refid="classamrex_1_1BoxArray_1abbb552183613f3c0861fb4e6755d942e" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>shift</name></member>
      <member refid="classamrex_1_1BoxArray_1a2ae1e7b4aa2c6c0f78d777bbb6b9f290" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>shift</name></member>
      <member refid="classamrex_1_1BoxArray_1a011f9535b7bcab7cb5e43dace246b310" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>size</name></member>
      <member refid="classamrex_1_1BoxArray_1abf9bf4fe5d5ddb8ae3498893bc2253c8" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>surroundingNodes</name></member>
      <member refid="classamrex_1_1BoxArray_1ae3ca0eb36b4308574b2f0dfc1fdd3562" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>surroundingNodes</name></member>
      <member refid="classamrex_1_1BoxArray_1a9f2c23e3d3ccd73f1045f2bca61f7a11" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>type_update</name></member>
      <member refid="classamrex_1_1BoxArray_1ae3fba31af025b800aef97da09bc4113c" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>uniqify</name></member>
      <member refid="classamrex_1_1BoxArray_1a3d7bd96e3a518279a830a8e53761f5a6" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>writeOn</name></member>
      <member refid="classamrex_1_1BoxArray_1ac969ef57c4c67c6dd624e9f261f2afb4" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>~BoxArray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
