<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1BoxArray" kind="class" language="C++" prot="public">
    <compoundname>amrex::BoxArray</compoundname>
    <includes refid="AMReX__BoxArray_8H" local="no">AMReX_BoxArray.H</includes>
    <innerclass refid="structamrex_1_1BoxArray_1_1RefID" prot="public">amrex::BoxArray::RefID</innerclass>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1BoxArray_1a88d35757727faba3973cc46625237e74" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::BoxArray::initialized</definition>
        <argsstring></argsstring>
        <name>initialized</name>
        <qualifiedname>amrex::BoxArray::initialized</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="848" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="848" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1BoxArray_1abffb5edfa79d13ec2e7f77a2a150cc7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class AmrMesh</definition>
        <argsstring></argsstring>
        <name>AmrMesh</name>
        <qualifiedname>amrex::BoxArray::AmrMesh</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1AmrMesh" kindref="compound">AmrMesh</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="862" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="862" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1BoxArray_1a4636f955857e2be478f7e1a6a43305ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class FabArrayBase</definition>
        <argsstring></argsstring>
        <name>FabArrayBase</name>
        <qualifiedname>amrex::BoxArray::FabArrayBase</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="863" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="863" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1BoxArray_1a416da5b2620e5c9cad12ab2fd73d349b" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1BATransformer" kindref="compound">BATransformer</ref></type>
        <definition>BATransformer amrex::BoxArray::m_bat</definition>
        <argsstring></argsstring>
        <name>m_bat</name>
        <qualifiedname>amrex::BoxArray::m_bat</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="874" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="874" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BoxArray_1aaf44041b956612401793f474280e5e2f" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="structamrex_1_1BARef" kindref="compound">BARef</ref> &gt;</type>
        <definition>std::shared_ptr&lt;BARef&gt; amrex::BoxArray::m_ref</definition>
        <argsstring></argsstring>
        <name>m_ref</name>
        <qualifiedname>amrex::BoxArray::m_ref</qualifiedname>
        <briefdescription>
<para>The data <ndash/> a reference-counted pointer to a Ref. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="876" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="876" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BoxArray_1a6111d0d59d47fcfe76123cc90bfa2f9c" prot="private" static="no" mutable="yes">
        <type>std::shared_ptr&lt; <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &gt;</type>
        <definition>std::shared_ptr&lt;BoxList&gt; amrex::BoxArray::m_simplified_list</definition>
        <argsstring></argsstring>
        <name>m_simplified_list</name>
        <qualifiedname>amrex::BoxArray::m_simplified_list</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="877" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="877" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a16d5410c4beb4a7376d57d6d17b7d201" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>() noexcept</argsstring>
        <name>BoxArray</name>
        <qualifiedname>amrex::BoxArray::BoxArray</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="554" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="280" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ae51fad2f4cc75e0d49934bd8cbbec39a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(const BoxArray &amp;rhs)=default</argsstring>
        <name>BoxArray</name>
        <qualifiedname>amrex::BoxArray::BoxArray</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="555" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac1ed271c8bba3f4a6f874f9aed33f5d6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(BoxArray &amp;&amp;rhs) noexcept=default</argsstring>
        <name>BoxArray</name>
        <qualifiedname>amrex::BoxArray::BoxArray</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="556" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ade9bb482ef4fbf4083421edcf729f2e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::operator=</definition>
        <argsstring>(BoxArray const &amp;rhs)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::BoxArray::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="557" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ab32146ee509bfffd5268ebbf38d4ff85" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::operator=</definition>
        <argsstring>(BoxArray &amp;&amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::BoxArray::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="558" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac969ef57c4c67c6dd624e9f261f2afb4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::~BoxArray</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~BoxArray</name>
        <qualifiedname>amrex::BoxArray::~BoxArray</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="559" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aff04ba0858cf808f3f7871667344a7bd" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(const Box &amp;bx)</argsstring>
        <name>BoxArray</name>
        <qualifiedname>amrex::BoxArray::BoxArray</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>Make a boxarray out of a single box. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="562" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="285" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aecd5949e593c8357b06cd69b29b0bbeb" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(size_t n)</argsstring>
        <name>BoxArray</name>
        <qualifiedname>amrex::BoxArray::BoxArray</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> of the specified size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="565" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="308" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a4b713738c14f93de97c288200cb69cd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(const Box *bxvec, int nbox)</argsstring>
        <name>BoxArray</name>
        <qualifiedname>amrex::BoxArray::BoxArray</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> *</type>
          <declname>bxvec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nbox</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from an array of Boxes of size nbox. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="568" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="313" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a9802183a182f70509c9b1f0dc5c4bf84" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(const BoxList &amp;bl)</argsstring>
        <name>BoxArray</name>
        <qualifiedname>amrex::BoxArray::BoxArray</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="572" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="292" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a8f81a0f854fcc971e054650850308270" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(BoxList &amp;&amp;bl) noexcept</argsstring>
        <name>BoxArray</name>
        <qualifiedname>amrex::BoxArray::BoxArray</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;&amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="573" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="300" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1afd76dc52a3e04f2242831d4fb4d8bde1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(const BoxArray &amp;rhs, const BATransformer &amp;trans)</argsstring>
        <name>BoxArray</name>
        <qualifiedname>amrex::BoxArray::BoxArray</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1BATransformer" kindref="compound">BATransformer</ref> &amp;</type>
          <declname>trans</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="575" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="323" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aeca058dac155989ce728cb44301c9454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(BoxList &amp;&amp;bl, IntVect const &amp;max_grid_size)</argsstring>
        <name>BoxArray</name>
        <qualifiedname>amrex::BoxArray::BoxArray</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;&amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> const &amp;</type>
          <declname>max_grid_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="577" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="332" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a55d69deebe4b1ae84fc259bfd4d045f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::define</definition>
        <argsstring>(const Box &amp;bx)</argsstring>
        <name>define</name>
        <qualifiedname>amrex::BoxArray::define</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from a single box. It is an error if the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> has already been initialized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="583" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="345" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a50815493c47d22812c0e9e3745e19390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::define</definition>
        <argsstring>(const BoxList &amp;bl)</argsstring>
        <name>define</name>
        <qualifiedname>amrex::BoxArray::define</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from the supplied <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. It is an error if the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> has already been initialized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="588" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="354" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a1797dfe4fdb30221d30cef785da8929d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::define</definition>
        <argsstring>(BoxList &amp;&amp;bl) noexcept</argsstring>
        <name>define</name>
        <qualifiedname>amrex::BoxArray::define</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;&amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="589" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="363" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1afed0e52f6570fe4960ce4758f5558761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>amrex::BoxArray::clear</qualifiedname>
        <briefdescription>
<para>Remove all Boxes from the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="592" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="372" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a7d000ff42a0a1d9be2862c1b53472d3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::resize</definition>
        <argsstring>(Long len)</argsstring>
        <name>resize</name>
        <qualifiedname>amrex::BoxArray::resize</qualifiedname>
        <param>
          <type>Long</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Resize the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. See Vector&lt;T&gt;::resize() for the gory details. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="595" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="380" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac492bfeacfc03ff2dcb5375e5422d417" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::BoxArray::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <qualifiedname>amrex::BoxArray::size</qualifiedname>
        <briefdescription>
<para>Return the number of boxes in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="598" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="598" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a04d7713cdc01e24d50d715119f5c333d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::BoxArray::capacity</definition>
        <argsstring>() const noexcept</argsstring>
        <name>capacity</name>
        <qualifiedname>amrex::BoxArray::capacity</qualifiedname>
        <briefdescription>
<para>Return the number of boxes that can be held in the current allocated storage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="601" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="601" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ae71159edaa4456e59699f01955144d97" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <qualifiedname>amrex::BoxArray::empty</qualifiedname>
        <briefdescription>
<para>Return whether the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="604" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="604" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a5f25bd92e654851319f55a17ee276723" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::BoxArray::numPts</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numPts</name>
        <qualifiedname>amrex::BoxArray::numPts</qualifiedname>
        <briefdescription>
<para>Returns the total number of cells contained in all boxes in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="607" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="387" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a85a31cf2bd546e2292492cb6c288eb8d" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double amrex::BoxArray::d_numPts</definition>
        <argsstring>() const noexcept</argsstring>
        <name>d_numPts</name>
        <qualifiedname>amrex::BoxArray::d_numPts</qualifiedname>
        <briefdescription>
<para>Returns the total number of cells (in double type) contained in all boxes in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="610" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="424" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a4df72bcadb7bdaa2c5db57212e48853a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::BoxArray::readFrom</definition>
        <argsstring>(std::istream &amp;is)</argsstring>
        <name>readFrom</name>
        <qualifiedname>amrex::BoxArray::readFrom</qualifiedname>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from the supplied istream. It is an error if the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> has already been initialized. Note that the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> in the istream must have been written using <ref refid="classamrex_1_1BoxArray_1a20e70e6b9fe276e04f66520bb2f56931" kindref="member">writeOn()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="617" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="461" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a20e70e6b9fe276e04f66520bb2f56931" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; amrex::BoxArray::writeOn</definition>
        <argsstring>(std::ostream &amp;) const</argsstring>
        <name>writeOn</name>
        <qualifiedname>amrex::BoxArray::writeOn</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <defname>os</defname>
        </param>
        <briefdescription>
<para>Output this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to a checkpoint file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="620" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="475" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a74ee48ddcfd53d548f7a55352dba7cb4" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::operator==</definition>
        <argsstring>(const BoxArray &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>amrex::BoxArray::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Are the BoxArrays equal? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="623" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="510" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a5856751adc0f5194829d3c3920bc2717" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::operator!=</definition>
        <argsstring>(const BoxArray &amp;rhs) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>amrex::BoxArray::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Are the BoxArrays not equal? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="626" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="517" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac7392d5269b259859afb66f9528f1f6b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::operator==</definition>
        <argsstring>(const Vector&lt; Box &gt; &amp;bv) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>amrex::BoxArray::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &gt; &amp;</type>
          <declname>bv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="628" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="523" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a20f87e767c1742aa9d48ab35c5739352" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::operator!=</definition>
        <argsstring>(const Vector&lt; Box &gt; &amp;bv) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>amrex::BoxArray::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &gt; &amp;</type>
          <declname>bv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="629" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="533" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1acaed188c00aecea228d8c92c17a0c3fb" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::CellEqual</definition>
        <argsstring>(const BoxArray &amp;rhs) const noexcept</argsstring>
        <name>CellEqual</name>
        <qualifiedname>amrex::BoxArray::CellEqual</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Are the BoxArrays equal after conversion to cell-centered. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="632" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="539" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aebefb23ed05e76ffc8ec0c3af718652e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::maxSize</definition>
        <argsstring>(int block_size)</argsstring>
        <name>maxSize</name>
        <qualifiedname>amrex::BoxArray::maxSize</qualifiedname>
        <param>
          <type>int</type>
          <declname>block_size</declname>
        </param>
        <briefdescription>
<para>Forces each Box in <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to have sides &lt;= block_size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="635" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="546" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a59b44d438d01893bcae36064ec089cdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::maxSize</definition>
        <argsstring>(const IntVect &amp;block_size)</argsstring>
        <name>maxSize</name>
        <qualifiedname>amrex::BoxArray::maxSize</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>block_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="637" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="552" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a6dda265eaf3fda5d6255cbe2cd91e09a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::minmaxSize</definition>
        <argsstring>(const IntVect &amp;min_size, const IntVect &amp;max_size)</argsstring>
        <name>minmaxSize</name>
        <qualifiedname>amrex::BoxArray::minmaxSize</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>min_size</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>max_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Forces each Box in <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to have sizes &gt;= min_size and &lt;= max_size. It&apos;s the caller&apos;s responsibility to make sure both the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and max_size are coarsenable by min_size. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="642" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="570" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a6f3cb1eac256b7f40e4b6491aff29448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::refine</definition>
        <argsstring>(int refinement_ratio)</argsstring>
        <name>refine</name>
        <qualifiedname>amrex::BoxArray::refine</qualifiedname>
        <param>
          <type>int</type>
          <declname>refinement_ratio</declname>
        </param>
        <briefdescription>
<para>Refine each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to the specified ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="645" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="586" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ae1cf040542692a8255915fdb5f85421e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::refine</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>refine</name>
        <qualifiedname>amrex::BoxArray::refine</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Refine each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to the specified ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="648" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="592" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ab905a7751a6378467cf96c78c1ac880d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::coarsen</definition>
        <argsstring>(int refinement_ratio)</argsstring>
        <name>coarsen</name>
        <qualifiedname>amrex::BoxArray::coarsen</qualifiedname>
        <param>
          <type>int</type>
          <declname>refinement_ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to the specified ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="651" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="665" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a7398fc2b3ae449dfcec355e071bc16ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::coarsenable</definition>
        <argsstring>(int refinement_ratio, int min_width=1) const</argsstring>
        <name>coarsenable</name>
        <qualifiedname>amrex::BoxArray::coarsenable</qualifiedname>
        <param>
          <type>int</type>
          <declname>refinement_ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_width</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Coarsen each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to the specified ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="654" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="608" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1af7f2342f51c3bc2de5e8a195d6955d9f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::coarsenable</definition>
        <argsstring>(const IntVect &amp;refinement_ratio, int min_width=1) const</argsstring>
        <name>coarsenable</name>
        <qualifiedname>amrex::BoxArray::coarsenable</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>refinement_ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>min_width</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="655" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="614" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aa502788789ab808e34a3a4b5b940a928" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::coarsenable</definition>
        <argsstring>(const IntVect &amp;refinement_ratio, const IntVect &amp;min_width) const</argsstring>
        <name>coarsenable</name>
        <qualifiedname>amrex::BoxArray::coarsenable</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>refinement_ratio</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>min_width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="656" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="620" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a0f177129b5e8d3ce247991a139ecc8f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::coarsen</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>coarsen</name>
        <qualifiedname>amrex::BoxArray::coarsen</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Coarsen each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to the specified ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="659" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="671" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ad28652c559f9057fc343bd3c0beb0116" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::growcoarsen</definition>
        <argsstring>(int n, const IntVect &amp;iv)</argsstring>
        <name>growcoarsen</name>
        <qualifiedname>amrex::BoxArray::growcoarsen</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Grow and then coarsen each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="662" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="678" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aaca5f33122df36bed145432e5b4f5c57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::growcoarsen</definition>
        <argsstring>(IntVect const &amp;ngrow, const IntVect &amp;iv)</argsstring>
        <name>growcoarsen</name>
        <qualifiedname>amrex::BoxArray::growcoarsen</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> const &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="663" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="684" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a12a6842ecc48421374e69c0d40ba1542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::grow</definition>
        <argsstring>(int n)</argsstring>
        <name>grow</name>
        <qualifiedname>amrex::BoxArray::grow</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Grow each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> by the specified amount. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="666" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="699" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac76ee31fa4b71fa56dad4635a650cfbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::grow</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>grow</name>
        <qualifiedname>amrex::BoxArray::grow</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Grow each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> by the specified amount. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="669" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="714" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a624b3513f2b285491050d17d8952c474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::grow</definition>
        <argsstring>(int idir, int n_cell)</argsstring>
        <name>grow</name>
        <qualifiedname>amrex::BoxArray::grow</qualifiedname>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
<para>Grow each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> on the low and high ends by n_cell cells in the idir direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="674" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="729" bodyend="742"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a76695bda9b8e135e6d945c578557d78d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::growLo</definition>
        <argsstring>(int idir, int n_cell)</argsstring>
        <name>growLo</name>
        <qualifiedname>amrex::BoxArray::growLo</qualifiedname>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
<para>Grow each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> on the low end by n_cell cells in the idir direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="679" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="745" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a9848441ce9a5694f17e8617486e0b167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::growHi</definition>
        <argsstring>(int idir, int n_cell)</argsstring>
        <name>growHi</name>
        <qualifiedname>amrex::BoxArray::growHi</qualifiedname>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
<para>Grow each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> on the high end by n_cell cells in the idir direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="684" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="761" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1abf9bf4fe5d5ddb8ae3498893bc2253c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::surroundingNodes</definition>
        <argsstring>()</argsstring>
        <name>surroundingNodes</name>
        <qualifiedname>amrex::BoxArray::surroundingNodes</qualifiedname>
        <briefdescription>
<para>Apply surroundingNodes(Box) to each Box in <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. See the documentation of Box for details. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="689" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="777" bodyend="781"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ae3ca0eb36b4308574b2f0dfc1fdd3562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::surroundingNodes</definition>
        <argsstring>(int dir)</argsstring>
        <name>surroundingNodes</name>
        <qualifiedname>amrex::BoxArray::surroundingNodes</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Apply surroundingNodes(Box,int) to each Box in <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. See the documentation of Box for details. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="694" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="784" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a8199954b0860a879faa63867400b5435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::enclosedCells</definition>
        <argsstring>()</argsstring>
        <name>enclosedCells</name>
        <qualifiedname>amrex::BoxArray::enclosedCells</qualifiedname>
        <briefdescription>
<para>Apply <ref refid="classamrex_1_1BoxND_1ac0333b5d5352b2a5b0eb75e668e64f3b" kindref="member">Box::enclosedCells()</ref> to each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="697" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="792" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac6147deef62aa311d8c7bbf681fc35ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::enclosedCells</definition>
        <argsstring>(int dir)</argsstring>
        <name>enclosedCells</name>
        <qualifiedname>amrex::BoxArray::enclosedCells</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="classamrex_1_1BoxND_1a3aa16f77dc78b935e0e3cb30ddf33b12" kindref="member">Box::enclosedCells(int)</ref> to each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="700" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="798" bodyend="803"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ad830f3b87aaa26bf46f53cc54eed83ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::convert</definition>
        <argsstring>(IndexType typ)</argsstring>
        <name>convert</name>
        <qualifiedname>amrex::BoxArray::convert</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a7e095993c9b3f5a4c2abddd839d800e2" kindref="member">IndexType</ref></type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Apply Box::convert(IndexType) to each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="703" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="806" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a8e396fcc6af0ac6314069413e9815f7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::convert</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>convert</name>
        <qualifiedname>amrex::BoxArray::convert</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="705" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="813" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a7c550a5e0396c503e3465da2c28f8db9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::convert</definition>
        <argsstring>(Box(*fp)(const Box &amp;))</argsstring>
        <name>convert</name>
        <qualifiedname>amrex::BoxArray::convert</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref>(*)(const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;)</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
<para>Apply function (*fp)(Box) to each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="708" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="821" bodyend="837"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1abbb552183613f3c0861fb4e6755d942e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::shift</definition>
        <argsstring>(int dir, int nzones)</argsstring>
        <name>shift</name>
        <qualifiedname>amrex::BoxArray::shift</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nzones</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="classamrex_1_1BoxND_1a727c4435a5b201da0db3eb322b01c944" kindref="member">Box::shift(int,int)</ref> to each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="711" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="840" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a2ae1e7b4aa2c6c0f78d777bbb6b9f290" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray &amp; amrex::BoxArray::shift</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>shift</name>
        <qualifiedname>amrex::BoxArray::shift</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Apply Box::shift(const IntVect &amp;iv) to each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="714" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="856" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1accbf2c73a258ba522542ac1ad13f9ca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::set</definition>
        <argsstring>(int i, const Box &amp;ibox)</argsstring>
        <name>set</name>
        <qualifiedname>amrex::BoxArray::set</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>ibox</declname>
        </param>
        <briefdescription>
<para>Set element i in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to Box ibox. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="717" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="871" bodyend="878"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a0386a0ab9aa86bee7e8f499770f99ca5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref></type>
        <definition>Box amrex::BoxArray::operator[]</definition>
        <argsstring>(int index) const noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::BoxArray::operator[]</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return element index of this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="720" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="720" bodyend="722"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1accfeb1e3facccbcdedc791ce6bbb67dc" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref></type>
        <definition>Box amrex::BoxArray::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::BoxArray::operator[]</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Return element index of this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="725" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="881" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac4e1bbf1c88985b380f9e9df11be7354" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref></type>
        <definition>Box amrex::BoxArray::get</definition>
        <argsstring>(int index) const noexcept</argsstring>
        <name>get</name>
        <qualifiedname>amrex::BoxArray::get</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return element index of this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="728" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="728" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a8366f694b15adc33374df70cdd56d0b5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref></type>
        <definition>Box amrex::BoxArray::getCellCenteredBox</definition>
        <argsstring>(int index) const noexcept</argsstring>
        <name>getCellCenteredBox</name>
        <qualifiedname>amrex::BoxArray::getCellCenteredBox</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return cell-centered box at element index of this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="731" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="731" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1adab47a68f8e82d7161ca4951db618a95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::ok</definition>
        <argsstring>() const</argsstring>
        <name>ok</name>
        <qualifiedname>amrex::BoxArray::ok</qualifiedname>
        <briefdescription>
<para>Return true if Box is valid and they all have the same IndexType. Is true by default if the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="739" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="887" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ae724686faa6eed126df5223966a425eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::isDisjoint</definition>
        <argsstring>() const</argsstring>
        <name>isDisjoint</name>
        <qualifiedname>amrex::BoxArray::isDisjoint</qualifiedname>
        <briefdescription>
<para>Return true if set of intersecting Boxes in <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is null. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="742" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="913" bodyend="939"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a4a0626dbe9602ecfda3c0fbc34112c22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::BoxArray::boxList</definition>
        <argsstring>() const</argsstring>
        <name>boxList</name>
        <qualifiedname>amrex::BoxArray::boxList</qualifiedname>
        <briefdescription>
<para>Create a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> from this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="745" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="942" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a258cd3a2a8c608f7cc0068e0ddd08d3f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::contains</definition>
        <argsstring>(const IntVect &amp;v) const</argsstring>
        <name>contains</name>
        <qualifiedname>amrex::BoxArray::contains</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>True if the IntVect is within any of the Boxes in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="748" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="970" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a23ba905888437090a2fc1cfd8e578c4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::contains</definition>
        <argsstring>(const Box &amp;b, bool assume_disjoint_ba=false, const IntVect &amp;ng=IntVect(0)) const</argsstring>
        <name>contains</name>
        <qualifiedname>amrex::BoxArray::contains</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>assume_disjoint_ba</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>ng</declname>
          <defval><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref>(0)</defval>
        </param>
        <briefdescription>
<para>True if the Box is contained in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>(+ng). The Box must also have the same IndexType as those in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="755" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="980" bodyend="1013"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a27b3133e35f0dbae139aebf7769d86b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::contains</definition>
        <argsstring>(const BoxArray &amp;ba, bool assume_disjoint_ba=false, const IntVect &amp;ng=IntVect(0)) const</argsstring>
        <name>contains</name>
        <qualifiedname>amrex::BoxArray::contains</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>assume_disjoint_ba</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>ng</declname>
          <defval><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref>(0)</defval>
        </param>
        <briefdescription>
<para>True if all Boxes in ba are contained in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>(+ng). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="762" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1016" bodyend="1029"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a5535d8c27dece816a8ef7bf022777040" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::contains</definition>
        <argsstring>(const BoxArray &amp;ba, Periodicity const &amp;period) const</argsstring>
        <name>contains</name>
        <qualifiedname>amrex::BoxArray::contains</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> const &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>True if all cells in ba are periodically contained in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If a cell after being periodically shifted is contained in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>, it&apos;s considered being periodically contained. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="773" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1032" bodyend="1057"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a6c5052b75daf4b8fad5f6bd0c65da9a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref></type>
        <definition>Box amrex::BoxArray::minimalBox</definition>
        <argsstring>() const</argsstring>
        <name>minimalBox</name>
        <qualifiedname>amrex::BoxArray::minimalBox</qualifiedname>
        <briefdescription>
<para>Return smallest Box that contains all Boxes in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="776" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1060" bodyend="1104"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1adc6fda292fafd7aa9e93227271842a56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref></type>
        <definition>Box amrex::BoxArray::minimalBox</definition>
        <argsstring>(Long &amp;npts_avg_box) const</argsstring>
        <name>minimalBox</name>
        <qualifiedname>amrex::BoxArray::minimalBox</qualifiedname>
        <param>
          <type>Long &amp;</type>
          <declname>npts_avg_box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="777" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1107" bodyend="1159"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a0ec59f7f66dc947a4911ac0b88609ce7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::intersects</definition>
        <argsstring>(const Box &amp;b, int ng=0) const</argsstring>
        <name>intersects</name>
        <qualifiedname>amrex::BoxArray::intersects</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ng</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>True if the Box intersects with this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>(+ghostcells). The Box must have the same IndexType as those in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="784" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1162" bodyend="1165"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a15880d75956fdc7052c011f342f62e4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::intersects</definition>
        <argsstring>(const Box &amp;b, const IntVect &amp;ng) const</argsstring>
        <name>intersects</name>
        <qualifiedname>amrex::BoxArray::intersects</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="787" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1168" bodyend="1176"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a1a6bba7ce3f3a648d9c1fb8815f7a3af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; int, <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; int, Box &gt; &gt; amrex::BoxArray::intersections</definition>
        <argsstring>(const Box &amp;bx) const</argsstring>
        <name>intersections</name>
        <qualifiedname>amrex::BoxArray::intersections</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>Return intersections of Box and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="791" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1179" bodyend="1184"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a0c73c4d67413a076f526d3209028285e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; int, <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; int, Box &gt; &gt; amrex::BoxArray::intersections</definition>
        <argsstring>(const Box &amp;bx, bool first_only, int ng) const</argsstring>
        <name>intersections</name>
        <qualifiedname>amrex::BoxArray::intersections</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>first_only</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
<para>Return intersections of Box and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>(+ghostcells). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="795" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1187" bodyend="1192"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aa9813523e16f907563f2c1d054dfaf4f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; int, <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; int, Box &gt; &gt; amrex::BoxArray::intersections</definition>
        <argsstring>(const Box &amp;bx, bool first_only, const IntVect &amp;ng) const</argsstring>
        <name>intersections</name>
        <qualifiedname>amrex::BoxArray::intersections</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>first_only</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="798" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1195" bodyend="1200"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a80052e0d9dfb04e293a213fe3c62f053" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::intersections</definition>
        <argsstring>(const Box &amp;bx, std::vector&lt; std::pair&lt; int, Box &gt; &gt; &amp;isects) const</argsstring>
        <name>intersections</name>
        <qualifiedname>amrex::BoxArray::intersections</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>std::vector&lt; std::pair&lt; int, <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &gt; &gt; &amp;</type>
          <declname>isects</declname>
        </param>
        <briefdescription>
<para>intersect Box and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>, then store the result in isects </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="801" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1203" bodyend="1207"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a7cd5573bebca1fbbe29bd8bd328ce172" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::intersections</definition>
        <argsstring>(const Box &amp;bx, std::vector&lt; std::pair&lt; int, Box &gt; &gt; &amp;isects, bool first_only, int ng) const</argsstring>
        <name>intersections</name>
        <qualifiedname>amrex::BoxArray::intersections</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>std::vector&lt; std::pair&lt; int, <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &gt; &gt; &amp;</type>
          <declname>isects</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>first_only</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
<para>intersect Box and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>(+ghostcells), then store the result in isects </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="804" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1210" bodyend="1216"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac19b485ff74dd52d9bb8d8919184e0ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::intersections</definition>
        <argsstring>(const Box &amp;bx, std::vector&lt; std::pair&lt; int, Box &gt; &gt; &amp;isects, bool first_only, const IntVect &amp;ng) const</argsstring>
        <name>intersections</name>
        <qualifiedname>amrex::BoxArray::intersections</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>std::vector&lt; std::pair&lt; int, <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &gt; &gt; &amp;</type>
          <declname>isects</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>first_only</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="807" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1219" bodyend="1304"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a9cfc3c2251e61eb1f1defb1e57badeb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::BoxArray::complementIn</definition>
        <argsstring>(const Box &amp;b) const</argsstring>
        <name>complementIn</name>
        <qualifiedname>amrex::BoxArray::complementIn</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Return box - boxarray. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="811" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1307" bodyend="1312"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aae7887e346945ad1154a31823b1f73e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::complementIn</definition>
        <argsstring>(BoxList &amp;bl, const Box &amp;b) const</argsstring>
        <name>complementIn</name>
        <qualifiedname>amrex::BoxArray::complementIn</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="812" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1335" bodyend="1423"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a2c257ef1b3cd2b03436b16e5ec1d9ddd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::BoxArray::complementIn</definition>
        <argsstring>(const Box &amp;b, const Periodicity &amp;period) const</argsstring>
        <name>complementIn</name>
        <qualifiedname>amrex::BoxArray::complementIn</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>Return box - periodic boxarray. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="815" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1315" bodyend="1332"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a6bdf6476369bee9a51d4c3d2f7d70cd0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::clear_hash_bin</definition>
        <argsstring>() const</argsstring>
        <name>clear_hash_bin</name>
        <qualifiedname>amrex::BoxArray::clear_hash_bin</qualifiedname>
        <briefdescription>
<para>Clear out the internal hash table used by intersections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="818" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1426" bodyend="1436"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aafdd2fe3c88e9b17d4892dd36e92225f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::removeOverlap</definition>
        <argsstring>(bool simplify=true)</argsstring>
        <name>removeOverlap</name>
        <qualifiedname>amrex::BoxArray::removeOverlap</qualifiedname>
        <param>
          <type>bool</type>
          <declname>simplify</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Change the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to one with no overlap and then simplify it (see the simplify function in <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="821" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1442" bodyend="1518"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a0c8df27bfc6981d3e50784b64026a249" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1BoxArray_1_1RefID" kindref="compound">RefID</ref></type>
        <definition>RefID amrex::BoxArray::getRefID</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getRefID</name>
        <qualifiedname>amrex::BoxArray::getRefID</qualifiedname>
        <briefdescription>
<para>Return a unique ID of the reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="838" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="838" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a0005742d49b95bea045b6f46edb75714" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a7e095993c9b3f5a4c2abddd839d800e2" kindref="member">IndexType</ref></type>
        <definition>IndexType amrex::BoxArray::ixType</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ixType</name>
        <qualifiedname>amrex::BoxArray::ixType</qualifiedname>
        <briefdescription>
<para>Return index type of this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="841" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="841" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a4c29b9c027bf459bb2d368484e90bb76" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::BoxArray::crseRatio</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crseRatio</name>
        <qualifiedname>amrex::BoxArray::crseRatio</qualifiedname>
        <briefdescription>
<para>Return crse ratio of this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="844" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="844" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ae3fba31af025b800aef97da09bc4113c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::uniqify</definition>
        <argsstring>()</argsstring>
        <name>uniqify</name>
        <qualifiedname>amrex::BoxArray::uniqify</qualifiedname>
        <briefdescription>
<para>Make ourselves unique. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="851" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1601" bodyend="1621"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a49e30b75672ca760ce5b4ece3114f08f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> const &amp;</type>
        <definition>BoxList const  &amp; amrex::BoxArray::simplified_list</definition>
        <argsstring>() const</argsstring>
        <name>simplified_list</name>
        <qualifiedname>amrex::BoxArray::simplified_list</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="853" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1624" bodyend="1632"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a4b3404ba7ad7bd57ae030a505619e205" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::BoxArray::simplified</definition>
        <argsstring>() const</argsstring>
        <name>simplified</name>
        <qualifiedname>amrex::BoxArray::simplified</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="854" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1635" bodyend="1638"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a88cd64a084e68534607b2463a28081f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1BATransformer" kindref="compound">BATransformer</ref> const &amp;</type>
        <definition>BATransformer const  &amp; amrex::BoxArray::transformer</definition>
        <argsstring>() const</argsstring>
        <name>transformer</name>
        <qualifiedname>amrex::BoxArray::transformer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="856" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1641" bodyend="1644"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a714f5f493769d6c0e1b10c2d0a5396db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::weak_ptr&lt; <ref refid="structamrex_1_1BARef" kindref="compound">BARef</ref> &gt;</type>
        <definition>std::weak_ptr&lt; BARef &gt; amrex::BoxArray::getWeakRef</definition>
        <argsstring>() const</argsstring>
        <name>getWeakRef</name>
        <qualifiedname>amrex::BoxArray::getWeakRef</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="858" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1647" bodyend="1650"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a83557d9e18e5adfcf34e9b432acbbbeb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structamrex_1_1BARef" kindref="compound">BARef</ref> &gt; const &amp;</type>
        <definition>std::shared_ptr&lt; BARef &gt; const  &amp; amrex::BoxArray::getSharedRef</definition>
        <argsstring>() const</argsstring>
        <name>getSharedRef</name>
        <qualifiedname>amrex::BoxArray::getSharedRef</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="859" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1653" bodyend="1656"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a252b092079d72947a731ad9f01d0897e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structamrex_1_1BARef" kindref="compound">BARef</ref> &gt; &amp;</type>
        <definition>std::shared_ptr&lt; BARef &gt; &amp; amrex::BoxArray::getSharedRef</definition>
        <argsstring>()</argsstring>
        <name>getSharedRef</name>
        <qualifiedname>amrex::BoxArray::getSharedRef</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="860" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1659" bodyend="1662"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a93718ee84062758c5256a2792939c6f7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::BoxArray::SameRefs</definition>
        <argsstring>(const BoxArray &amp;lhs, const BoxArray &amp;rhs)</argsstring>
        <name>SameRefs</name>
        <qualifiedname>amrex::BoxArray::SameRefs</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>whether two BoxArrays share the same data </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="824" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="824" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a34bf3e13bc08cfec354d8d6b52004885" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <qualifiedname>amrex::BoxArray::Initialize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="846" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="264" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a16062c68a56d66f78af7d8cdaf61e330" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <qualifiedname>amrex::BoxArray::Finalize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="847" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="275" bodyend="278"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a9f2c23e3d3ccd73f1045f2bca61f7a11" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::type_update</definition>
        <argsstring>()</argsstring>
        <name>type_update</name>
        <qualifiedname>amrex::BoxArray::type_update</qualifiedname>
        <briefdescription>
<para>Update <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> index type according the box type, and then convert boxes to cell-centered. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="867" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1521" bodyend="1532"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a64bcc84783a1477aa898e6f8f6d55ae7" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1BARef_1a59cc4e634f9108fb676919f94f8ff55f" kindref="member">BARef::HashType</ref> &amp;</type>
        <definition>BARef::HashType &amp; amrex::BoxArray::getHashMap</definition>
        <argsstring>() const</argsstring>
        <name>getHashMap</name>
        <qualifiedname>amrex::BoxArray::getHashMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="869" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1547" bodyend="1598"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a505e85adf7cf632051028a779afb02d9" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::BoxArray::getDoiLo</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getDoiLo</name>
        <qualifiedname>amrex::BoxArray::getDoiLo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="871" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1535" bodyend="1538"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a6884438231c020a69d778c573c16b9e7" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::BoxArray::getDoiHi</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getDoiHi</name>
        <qualifiedname>amrex::BoxArray::getDoiHi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="872" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.cpp" bodystart="1541" bodyend="1544"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A collection of Boxes stored in an Array. </para>
    </briefdescription>
    <detaileddescription>
<para>It is a reference-counted concrete class, not a polymorphic one; i.e. you cannot use any of the List member functions with a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="18">
        <label>amrex::BoxND&lt; 3 &gt;</label>
        <link refid="classamrex_1_1BoxND"/>
      </node>
      <node id="6">
        <label>amrex::IndexTypeND&lt; 3 &gt;</label>
        <link refid="classamrex_1_1IndexTypeND"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>amrex::IntVectND&lt; 3 &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="17">
        <label>T</label>
      </node>
      <node id="15">
        <label>amrex::Vector&lt; amrex::BoxND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="15" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="12" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="6" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="6" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="2">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="15" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>amrex::CellIndexEnum</label>
        <link refid="structamrex_1_1CellIndexEnum"/>
      </node>
      <node id="20">
        <label>amrex::IntVectND&lt; dim &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="12">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="13">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
        <childnode refid="14" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
        <childnode refid="23" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="17" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="20" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>std::vector&lt; int &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="550" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="551" bodyend="878"/>
    <listofallmembers>
      <member refid="classamrex_1_1BoxArray_1abffb5edfa79d13ec2e7f77a2a150cc7d" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1BoxArray_1a16d5410c4beb4a7376d57d6d17b7d201" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1ae51fad2f4cc75e0d49934bd8cbbec39a" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1ac1ed271c8bba3f4a6f874f9aed33f5d6" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1aff04ba0858cf808f3f7871667344a7bd" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1aecd5949e593c8357b06cd69b29b0bbeb" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1a4b713738c14f93de97c288200cb69cd6" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1a9802183a182f70509c9b1f0dc5c4bf84" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1a8f81a0f854fcc971e054650850308270" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1afd76dc52a3e04f2242831d4fb4d8bde1" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1aeca058dac155989ce728cb44301c9454" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1a4a0626dbe9602ecfda3c0fbc34112c22" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>boxList</name></member>
      <member refid="classamrex_1_1BoxArray_1a04d7713cdc01e24d50d715119f5c333d" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>capacity</name></member>
      <member refid="classamrex_1_1BoxArray_1acaed188c00aecea228d8c92c17a0c3fb" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>CellEqual</name></member>
      <member refid="classamrex_1_1BoxArray_1afed0e52f6570fe4960ce4758f5558761" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>clear</name></member>
      <member refid="classamrex_1_1BoxArray_1a6bdf6476369bee9a51d4c3d2f7d70cd0" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>clear_hash_bin</name></member>
      <member refid="classamrex_1_1BoxArray_1ab905a7751a6378467cf96c78c1ac880d" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1BoxArray_1a0f177129b5e8d3ce247991a139ecc8f3" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1BoxArray_1a7398fc2b3ae449dfcec355e071bc16ce" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>coarsenable</name></member>
      <member refid="classamrex_1_1BoxArray_1af7f2342f51c3bc2de5e8a195d6955d9f" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>coarsenable</name></member>
      <member refid="classamrex_1_1BoxArray_1aa502788789ab808e34a3a4b5b940a928" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>coarsenable</name></member>
      <member refid="classamrex_1_1BoxArray_1a9cfc3c2251e61eb1f1defb1e57badeb1" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>complementIn</name></member>
      <member refid="classamrex_1_1BoxArray_1aae7887e346945ad1154a31823b1f73e5" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>complementIn</name></member>
      <member refid="classamrex_1_1BoxArray_1a2c257ef1b3cd2b03436b16e5ec1d9ddd" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>complementIn</name></member>
      <member refid="classamrex_1_1BoxArray_1a258cd3a2a8c608f7cc0068e0ddd08d3f" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>contains</name></member>
      <member refid="classamrex_1_1BoxArray_1a23ba905888437090a2fc1cfd8e578c4d" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>contains</name></member>
      <member refid="classamrex_1_1BoxArray_1a27b3133e35f0dbae139aebf7769d86b3" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>contains</name></member>
      <member refid="classamrex_1_1BoxArray_1a5535d8c27dece816a8ef7bf022777040" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>contains</name></member>
      <member refid="classamrex_1_1BoxArray_1ad830f3b87aaa26bf46f53cc54eed83ce" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>convert</name></member>
      <member refid="classamrex_1_1BoxArray_1a8e396fcc6af0ac6314069413e9815f7c" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>convert</name></member>
      <member refid="classamrex_1_1BoxArray_1a7c550a5e0396c503e3465da2c28f8db9" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>convert</name></member>
      <member refid="classamrex_1_1BoxArray_1a4c29b9c027bf459bb2d368484e90bb76" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>crseRatio</name></member>
      <member refid="classamrex_1_1BoxArray_1a85a31cf2bd546e2292492cb6c288eb8d" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>d_numPts</name></member>
      <member refid="classamrex_1_1BoxArray_1a55d69deebe4b1ae84fc259bfd4d045f2" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>define</name></member>
      <member refid="classamrex_1_1BoxArray_1a50815493c47d22812c0e9e3745e19390" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>define</name></member>
      <member refid="classamrex_1_1BoxArray_1a1797dfe4fdb30221d30cef785da8929d" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>define</name></member>
      <member refid="classamrex_1_1BoxArray_1ae71159edaa4456e59699f01955144d97" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>empty</name></member>
      <member refid="classamrex_1_1BoxArray_1a8199954b0860a879faa63867400b5435" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>enclosedCells</name></member>
      <member refid="classamrex_1_1BoxArray_1ac6147deef62aa311d8c7bbf681fc35ce" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>enclosedCells</name></member>
      <member refid="classamrex_1_1BoxArray_1a4636f955857e2be478f7e1a6a43305ee" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1BoxArray_1a16062c68a56d66f78af7d8cdaf61e330" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1BoxArray_1ac4e1bbf1c88985b380f9e9df11be7354" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>get</name></member>
      <member refid="classamrex_1_1BoxArray_1a8366f694b15adc33374df70cdd56d0b5" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getCellCenteredBox</name></member>
      <member refid="classamrex_1_1BoxArray_1a6884438231c020a69d778c573c16b9e7" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getDoiHi</name></member>
      <member refid="classamrex_1_1BoxArray_1a505e85adf7cf632051028a779afb02d9" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getDoiLo</name></member>
      <member refid="classamrex_1_1BoxArray_1a64bcc84783a1477aa898e6f8f6d55ae7" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getHashMap</name></member>
      <member refid="classamrex_1_1BoxArray_1a0c8df27bfc6981d3e50784b64026a249" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getRefID</name></member>
      <member refid="classamrex_1_1BoxArray_1a83557d9e18e5adfcf34e9b432acbbbeb" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getSharedRef</name></member>
      <member refid="classamrex_1_1BoxArray_1a252b092079d72947a731ad9f01d0897e" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getSharedRef</name></member>
      <member refid="classamrex_1_1BoxArray_1a714f5f493769d6c0e1b10c2d0a5396db" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getWeakRef</name></member>
      <member refid="classamrex_1_1BoxArray_1a12a6842ecc48421374e69c0d40ba1542" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>grow</name></member>
      <member refid="classamrex_1_1BoxArray_1ac76ee31fa4b71fa56dad4635a650cfbe" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>grow</name></member>
      <member refid="classamrex_1_1BoxArray_1a624b3513f2b285491050d17d8952c474" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>grow</name></member>
      <member refid="classamrex_1_1BoxArray_1ad28652c559f9057fc343bd3c0beb0116" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>growcoarsen</name></member>
      <member refid="classamrex_1_1BoxArray_1aaca5f33122df36bed145432e5b4f5c57" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>growcoarsen</name></member>
      <member refid="classamrex_1_1BoxArray_1a9848441ce9a5694f17e8617486e0b167" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>growHi</name></member>
      <member refid="classamrex_1_1BoxArray_1a76695bda9b8e135e6d945c578557d78d" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>growLo</name></member>
      <member refid="classamrex_1_1BoxArray_1a34bf3e13bc08cfec354d8d6b52004885" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1BoxArray_1a88d35757727faba3973cc46625237e74" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>initialized</name></member>
      <member refid="classamrex_1_1BoxArray_1a1a6bba7ce3f3a648d9c1fb8815f7a3af" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersections</name></member>
      <member refid="classamrex_1_1BoxArray_1a0c73c4d67413a076f526d3209028285e" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersections</name></member>
      <member refid="classamrex_1_1BoxArray_1aa9813523e16f907563f2c1d054dfaf4f" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersections</name></member>
      <member refid="classamrex_1_1BoxArray_1a80052e0d9dfb04e293a213fe3c62f053" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersections</name></member>
      <member refid="classamrex_1_1BoxArray_1a7cd5573bebca1fbbe29bd8bd328ce172" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersections</name></member>
      <member refid="classamrex_1_1BoxArray_1ac19b485ff74dd52d9bb8d8919184e0ce" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersections</name></member>
      <member refid="classamrex_1_1BoxArray_1a0ec59f7f66dc947a4911ac0b88609ce7" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersects</name></member>
      <member refid="classamrex_1_1BoxArray_1a15880d75956fdc7052c011f342f62e4c" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersects</name></member>
      <member refid="classamrex_1_1BoxArray_1ae724686faa6eed126df5223966a425eb" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>isDisjoint</name></member>
      <member refid="classamrex_1_1BoxArray_1a0005742d49b95bea045b6f46edb75714" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>ixType</name></member>
      <member refid="classamrex_1_1BoxArray_1a416da5b2620e5c9cad12ab2fd73d349b" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>m_bat</name></member>
      <member refid="classamrex_1_1BoxArray_1aaf44041b956612401793f474280e5e2f" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>m_ref</name></member>
      <member refid="classamrex_1_1BoxArray_1a6111d0d59d47fcfe76123cc90bfa2f9c" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>m_simplified_list</name></member>
      <member refid="classamrex_1_1BoxArray_1aebefb23ed05e76ffc8ec0c3af718652e" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>maxSize</name></member>
      <member refid="classamrex_1_1BoxArray_1a59b44d438d01893bcae36064ec089cdc" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>maxSize</name></member>
      <member refid="classamrex_1_1BoxArray_1a6c5052b75daf4b8fad5f6bd0c65da9a0" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>minimalBox</name></member>
      <member refid="classamrex_1_1BoxArray_1adc6fda292fafd7aa9e93227271842a56" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>minimalBox</name></member>
      <member refid="classamrex_1_1BoxArray_1a6dda265eaf3fda5d6255cbe2cd91e09a" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>minmaxSize</name></member>
      <member refid="classamrex_1_1BoxArray_1a5f25bd92e654851319f55a17ee276723" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>numPts</name></member>
      <member refid="classamrex_1_1BoxArray_1adab47a68f8e82d7161ca4951db618a95" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>ok</name></member>
      <member refid="classamrex_1_1BoxArray_1a5856751adc0f5194829d3c3920bc2717" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1BoxArray_1a20f87e767c1742aa9d48ab35c5739352" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1BoxArray_1ade9bb482ef4fbf4083421edcf729f2e3" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BoxArray_1ab32146ee509bfffd5268ebbf38d4ff85" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BoxArray_1a74ee48ddcfd53d548f7a55352dba7cb4" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator==</name></member>
      <member refid="classamrex_1_1BoxArray_1ac7392d5269b259859afb66f9528f1f6b" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator==</name></member>
      <member refid="classamrex_1_1BoxArray_1a0386a0ab9aa86bee7e8f499770f99ca5" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1BoxArray_1accfeb1e3facccbcdedc791ce6bbb67dc" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1BoxArray_1a4df72bcadb7bdaa2c5db57212e48853a" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>readFrom</name></member>
      <member refid="classamrex_1_1BoxArray_1a6f3cb1eac256b7f40e4b6491aff29448" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>refine</name></member>
      <member refid="classamrex_1_1BoxArray_1ae1cf040542692a8255915fdb5f85421e" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>refine</name></member>
      <member refid="classamrex_1_1BoxArray_1aafdd2fe3c88e9b17d4892dd36e92225f" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>removeOverlap</name></member>
      <member refid="classamrex_1_1BoxArray_1a7d000ff42a0a1d9be2862c1b53472d3f" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>resize</name></member>
      <member refid="classamrex_1_1BoxArray_1a93718ee84062758c5256a2792939c6f7" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>SameRefs</name></member>
      <member refid="classamrex_1_1BoxArray_1accbf2c73a258ba522542ac1ad13f9ca8" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>set</name></member>
      <member refid="classamrex_1_1BoxArray_1abbb552183613f3c0861fb4e6755d942e" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>shift</name></member>
      <member refid="classamrex_1_1BoxArray_1a2ae1e7b4aa2c6c0f78d777bbb6b9f290" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>shift</name></member>
      <member refid="classamrex_1_1BoxArray_1a4b3404ba7ad7bd57ae030a505619e205" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>simplified</name></member>
      <member refid="classamrex_1_1BoxArray_1a49e30b75672ca760ce5b4ece3114f08f" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>simplified_list</name></member>
      <member refid="classamrex_1_1BoxArray_1ac492bfeacfc03ff2dcb5375e5422d417" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>size</name></member>
      <member refid="classamrex_1_1BoxArray_1abf9bf4fe5d5ddb8ae3498893bc2253c8" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>surroundingNodes</name></member>
      <member refid="classamrex_1_1BoxArray_1ae3ca0eb36b4308574b2f0dfc1fdd3562" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>surroundingNodes</name></member>
      <member refid="classamrex_1_1BoxArray_1a88cd64a084e68534607b2463a28081f3" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>transformer</name></member>
      <member refid="classamrex_1_1BoxArray_1a9f2c23e3d3ccd73f1045f2bca61f7a11" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>type_update</name></member>
      <member refid="classamrex_1_1BoxArray_1ae3fba31af025b800aef97da09bc4113c" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>uniqify</name></member>
      <member refid="classamrex_1_1BoxArray_1a20e70e6b9fe276e04f66520bb2f56931" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>writeOn</name></member>
      <member refid="classamrex_1_1BoxArray_1ac969ef57c4c67c6dd624e9f261f2afb4" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>~BoxArray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
