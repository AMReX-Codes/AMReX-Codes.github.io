<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1BoxArray" kind="class" language="C++" prot="public">
    <compoundname>amrex::BoxArray</compoundname>
    <includes refid="AMReX__BoxArray_8H" local="no">AMReX_BoxArray.H</includes>
    <innerclass refid="structamrex_1_1BoxArray_1_1RefID" prot="public">amrex::BoxArray::RefID</innerclass>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1BoxArray_1a88d35757727faba3973cc46625237e74" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::BoxArray::initialized</definition>
        <argsstring></argsstring>
        <name>initialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="844" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="844" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1BoxArray_1abffb5edfa79d13ec2e7f77a2a150cc7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class AmrMesh</definition>
        <argsstring></argsstring>
        <name>AmrMesh</name>
        <param>
          <type><ref refid="classamrex_1_1AmrMesh" kindref="compound">AmrMesh</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="858" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="858" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1BoxArray_1a4636f955857e2be478f7e1a6a43305ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class FabArrayBase</definition>
        <argsstring></argsstring>
        <name>FabArrayBase</name>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="859" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="859" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1BoxArray_1a416da5b2620e5c9cad12ab2fd73d349b" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1BATransformer" kindref="compound">BATransformer</ref></type>
        <definition>BATransformer amrex::BoxArray::m_bat</definition>
        <argsstring></argsstring>
        <name>m_bat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="870" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="870" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BoxArray_1aaf44041b956612401793f474280e5e2f" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="structamrex_1_1BARef" kindref="compound">BARef</ref> &gt;</type>
        <definition>std::shared_ptr&lt;BARef&gt; amrex::BoxArray::m_ref</definition>
        <argsstring></argsstring>
        <name>m_ref</name>
        <briefdescription>
<para>The data <ndash/> a reference-counted pointer to a Ref. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="872" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="872" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BoxArray_1a6111d0d59d47fcfe76123cc90bfa2f9c" prot="private" static="no" mutable="yes">
        <type>std::shared_ptr&lt; <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &gt;</type>
        <definition>std::shared_ptr&lt;BoxList&gt; amrex::BoxArray::m_simplified_list</definition>
        <argsstring></argsstring>
        <name>m_simplified_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="873" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="873" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a16d5410c4beb4a7376d57d6d17b7d201" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>() noexcept</argsstring>
        <name>BoxArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="553" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ae51fad2f4cc75e0d49934bd8cbbec39a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(const BoxArray &amp;rhs)=default</argsstring>
        <name>BoxArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="554" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac1ed271c8bba3f4a6f874f9aed33f5d6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(BoxArray &amp;&amp;rhs) noexcept=default</argsstring>
        <name>BoxArray</name>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="555" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a71523423b56d7e520f67c7f164689c87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::operator=</definition>
        <argsstring>(BoxArray const &amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="556" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac273e3e3038f3ca71306de6576d41c74" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::operator=</definition>
        <argsstring>(BoxArray &amp;&amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="557" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac969ef57c4c67c6dd624e9f261f2afb4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::~BoxArray</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>~BoxArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="558" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aff04ba0858cf808f3f7871667344a7bd" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(const Box &amp;bx)</argsstring>
        <name>BoxArray</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>Make a boxarray out of a single box. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="561" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aecd5949e593c8357b06cd69b29b0bbeb" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(size_t n)</argsstring>
        <name>BoxArray</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> of the specified size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="564" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a4b713738c14f93de97c288200cb69cd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(const Box *bxvec, int nbox)</argsstring>
        <name>BoxArray</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> *</type>
          <declname>bxvec</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nbox</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from an array of Boxes of size nbox. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="567" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a9802183a182f70509c9b1f0dc5c4bf84" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(const BoxList &amp;bl)</argsstring>
        <name>BoxArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="571" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a8f81a0f854fcc971e054650850308270" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(BoxList &amp;&amp;bl) noexcept</argsstring>
        <name>BoxArray</name>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;&amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="572" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1afd76dc52a3e04f2242831d4fb4d8bde1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(const BoxArray &amp;rhs, const BATransformer &amp;trans)</argsstring>
        <name>BoxArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1BATransformer" kindref="compound">BATransformer</ref> &amp;</type>
          <declname>trans</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="574" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aeca058dac155989ce728cb44301c9454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxArray::BoxArray</definition>
        <argsstring>(BoxList &amp;&amp;bl, IntVect const &amp;max_grid_size)</argsstring>
        <name>BoxArray</name>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;&amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>max_grid_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="576" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a55d69deebe4b1ae84fc259bfd4d045f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::define</definition>
        <argsstring>(const Box &amp;bx)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from a single box. It is an error if the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> has already been initialized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="582" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a50815493c47d22812c0e9e3745e19390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::define</definition>
        <argsstring>(const BoxList &amp;bl)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from the supplied <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. It is an error if the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> has already been initialized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="587" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a1797dfe4fdb30221d30cef785da8929d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::define</definition>
        <argsstring>(BoxList &amp;&amp;bl) noexcept</argsstring>
        <name>define</name>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;&amp;</type>
          <declname>bl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="588" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1afed0e52f6570fe4960ce4758f5558761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Remove all Boxes from the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="591" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a7d000ff42a0a1d9be2862c1b53472d3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::resize</definition>
        <argsstring>(Long len)</argsstring>
        <name>resize</name>
        <param>
          <type>Long</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Resize the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. See Vector&lt;T&gt;::resize() for the gory details. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="594" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac492bfeacfc03ff2dcb5375e5422d417" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::BoxArray::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>Return the number of boxes in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="597" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="597" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a04d7713cdc01e24d50d715119f5c333d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::BoxArray::capacity</definition>
        <argsstring>() const noexcept</argsstring>
        <name>capacity</name>
        <briefdescription>
<para>Return the number of boxes that can be held in the current allocated storage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="600" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="600" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ae71159edaa4456e59699f01955144d97" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Return whether the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="603" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="603" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a5f25bd92e654851319f55a17ee276723" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::BoxArray::numPts</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numPts</name>
        <briefdescription>
<para>Returns the total number of cells contained in all boxes in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="606" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a85a31cf2bd546e2292492cb6c288eb8d" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double amrex::BoxArray::d_numPts</definition>
        <argsstring>() const noexcept</argsstring>
        <name>d_numPts</name>
        <briefdescription>
<para>Returns the total number of cells (in double type) contained in all boxes in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="609" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a4df72bcadb7bdaa2c5db57212e48853a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::BoxArray::readFrom</definition>
        <argsstring>(std::istream &amp;is)</argsstring>
        <name>readFrom</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> from the supplied istream. It is an error if the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> has already been initialized. Note that the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> in the istream must have been written using <ref refid="classamrex_1_1BoxArray_1ab73812875ab7b0cb8c298103e71f6dd8" kindref="member">writeOn()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="616" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ab73812875ab7b0cb8c298103e71f6dd8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; amrex::BoxArray::writeOn</definition>
        <argsstring>(std::ostream &amp;) const</argsstring>
        <name>writeOn</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <briefdescription>
<para>Output this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to a checkpoint file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="619" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a74ee48ddcfd53d548f7a55352dba7cb4" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::operator==</definition>
        <argsstring>(const BoxArray &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Are the BoxArrays equal? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="622" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a5856751adc0f5194829d3c3920bc2717" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::operator!=</definition>
        <argsstring>(const BoxArray &amp;rhs) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Are the BoxArrays not equal? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="625" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac7392d5269b259859afb66f9528f1f6b" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::operator==</definition>
        <argsstring>(const Vector&lt; Box &gt; &amp;bv) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &gt; &amp;</type>
          <declname>bv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="627" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a20f87e767c1742aa9d48ab35c5739352" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::operator!=</definition>
        <argsstring>(const Vector&lt; Box &gt; &amp;bv) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &gt; &amp;</type>
          <declname>bv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="628" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1acaed188c00aecea228d8c92c17a0c3fb" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::CellEqual</definition>
        <argsstring>(const BoxArray &amp;rhs) const noexcept</argsstring>
        <name>CellEqual</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Are the BoxArrays equal after conversion to cell-centered. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="631" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a8b428c4ab58e4657bc6a728dd2eba31a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::maxSize</definition>
        <argsstring>(int block_size)</argsstring>
        <name>maxSize</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>block_size</declname>
        </param>
        <briefdescription>
<para>Forces each Box in <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to have sides &lt;= block_size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="634" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a3e82821593ec9b579ef9392de6bd548c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::maxSize</definition>
        <argsstring>(const IntVect &amp;block_size)</argsstring>
        <name>maxSize</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>block_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="636" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a047807c657ddd8950abc890ea01256cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::minmaxSize</definition>
        <argsstring>(const IntVect &amp;min_size, const IntVect &amp;max_size)</argsstring>
        <name>minmaxSize</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>min_size</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>max_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Forces each Box in <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to have sizes &gt;= min_size and &lt;= max_size. It&apos;s the caller&apos;s responsibility to make sure both the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and max_size are coarsenable by min_size. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="641" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a7c9a570ab83e12cf4d621b78862d5573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::refine</definition>
        <argsstring>(int refinement_ratio)</argsstring>
        <name>refine</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>refinement_ratio</declname>
        </param>
        <briefdescription>
<para>Refine each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to the specified ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="644" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a815b7fed7c01414c854bc81df03349d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::refine</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>refine</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Refine each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to the specified ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="647" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a19275f679bdcf0a56ba8aaa0557796a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::coarsen</definition>
        <argsstring>(int refinement_ratio)</argsstring>
        <name>coarsen</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>refinement_ratio</declname>
        </param>
        <briefdescription>
<para>Coarsen each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to the specified ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="650" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a7398fc2b3ae449dfcec355e071bc16ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::coarsenable</definition>
        <argsstring>(int refinement_ratio, int min_width=1) const</argsstring>
        <name>coarsenable</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>refinement_ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>min_width</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Coarsen each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to the specified ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="653" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1af7f2342f51c3bc2de5e8a195d6955d9f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::coarsenable</definition>
        <argsstring>(const IntVect &amp;refinement_ratio, int min_width=1) const</argsstring>
        <name>coarsenable</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>refinement_ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>min_width</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="654" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aa502788789ab808e34a3a4b5b940a928" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::coarsenable</definition>
        <argsstring>(const IntVect &amp;refinement_ratio, const IntVect &amp;min_width) const</argsstring>
        <name>coarsenable</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>refinement_ratio</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>min_width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="655" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1acea52b28c4bfa3bea87045c7803580c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::coarsen</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Coarsen each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to the specified ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="658" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a0ac6b3a6e7c21b3fb647cee572a8e43c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::growcoarsen</definition>
        <argsstring>(int n, const IntVect &amp;iv)</argsstring>
        <name>growcoarsen</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Grow and then coarsen each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="661" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ad0683d690fad17607e3e142b18e2f2d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::growcoarsen</definition>
        <argsstring>(IntVect const &amp;ngrow, const IntVect &amp;iv)</argsstring>
        <name>growcoarsen</name>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="662" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ae8dc6e393a9040bdcc8d30cf6c175e42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::grow</definition>
        <argsstring>(int n)</argsstring>
        <name>grow</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Grow each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> by the specified amount. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="665" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aab141a1a65613c007c9815ef4ff2ea5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::grow</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>grow</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Grow each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> by the specified amount. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="668" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac403b59842ac37a5675678e7b4a3e7e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::grow</definition>
        <argsstring>(int idir, int n_cell)</argsstring>
        <name>grow</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
<para>Grow each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> on the low and high ends by n_cell cells in the idir direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="673" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a5789b39ad5c1f8b47d279bd51555657f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::growLo</definition>
        <argsstring>(int idir, int n_cell)</argsstring>
        <name>growLo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
<para>Grow each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> on the low end by n_cell cells in the idir direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="678" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ad9da1180061a25ae5cdc2a15eec88d7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::growHi</definition>
        <argsstring>(int idir, int n_cell)</argsstring>
        <name>growHi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_cell</declname>
        </param>
        <briefdescription>
<para>Grow each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> on the high end by n_cell cells in the idir direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="683" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a9aa3edc41d3bf33d1a0d0569438b4e74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::surroundingNodes</definition>
        <argsstring>()</argsstring>
        <name>surroundingNodes</name>
        <briefdescription>
<para>Apply surroundingNodes(Box) to each Box in <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. See the documentation of Box for details. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="688" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a33a13ee42fefc260884997d8e9e427ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::surroundingNodes</definition>
        <argsstring>(int dir)</argsstring>
        <name>surroundingNodes</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Apply surroundingNodes(Box,int) to each Box in <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. See the documentation of Box for details. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="693" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a6f5da0ba73ab73833db4f18cd512799a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::enclosedCells</definition>
        <argsstring>()</argsstring>
        <name>enclosedCells</name>
        <briefdescription>
<para>Apply <ref refid="classamrex_1_1BoxND_1a821a9d499c7795c593c3b5ebcaaf5ab0" kindref="member">Box::enclosedCells()</ref> to each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="696" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aeea20b902f4c63135230c6e2dfeadd84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::enclosedCells</definition>
        <argsstring>(int dir)</argsstring>
        <name>enclosedCells</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="classamrex_1_1BoxND_1a9b5c6fc3bf92ac01341aa97dc3b4c4b9" kindref="member">Box::enclosedCells(int)</ref> to each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="699" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a9fd795307c0c723085b0f7c38957db8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::convert</definition>
        <argsstring>(IndexType typ)</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="namespaceamrex_1ad35342b486ef07ba6108169268169296" kindref="member">IndexType</ref></type>
          <declname>typ</declname>
        </param>
        <briefdescription>
<para>Apply Box::convert(IndexType) to each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="702" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aac6381dd6e0ef88003f6804dc1272c99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::convert</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>convert</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="704" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a6b338ad8abe06780c44d734dcc5a52ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::convert</definition>
        <argsstring>(Box(*fp)(const Box &amp;))</argsstring>
        <name>convert</name>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref>(*)(const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;)</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
<para>Apply function (*fp)(Box) to each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="707" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1af6485eb97c41d77e94dae7e2473486d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::shift</definition>
        <argsstring>(int dir, int nzones)</argsstring>
        <name>shift</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nzones</declname>
        </param>
        <briefdescription>
<para>Apply <ref refid="classamrex_1_1BoxND_1a2a35ad93e71d6072bec8d9d33892511a" kindref="member">Box::shift(int,int)</ref> to each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="710" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a519058bde273a0b9e2298ef2c3f1628a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>BoxArray&amp; amrex::BoxArray::shift</definition>
        <argsstring>(const IntVect &amp;iv)</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Apply Box::shift(const IntVect &amp;iv) to each Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="713" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1accbf2c73a258ba522542ac1ad13f9ca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::set</definition>
        <argsstring>(int i, const Box &amp;ibox)</argsstring>
        <name>set</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>ibox</declname>
        </param>
        <briefdescription>
<para>Set element i in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to Box ibox. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="716" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a0386a0ab9aa86bee7e8f499770f99ca5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::BoxArray::operator[]</definition>
        <argsstring>(int index) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return element index of this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="719" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="719" bodyend="721"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1accfeb1e3facccbcdedc791ce6bbb67dc" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::BoxArray::operator[]</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
<para>Return element index of this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="724" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac4e1bbf1c88985b380f9e9df11be7354" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::BoxArray::get</definition>
        <argsstring>(int index) const noexcept</argsstring>
        <name>get</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return element index of this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="727" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="727" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a8366f694b15adc33374df70cdd56d0b5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::BoxArray::getCellCenteredBox</definition>
        <argsstring>(int index) const noexcept</argsstring>
        <name>getCellCenteredBox</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return cell-centered box at element index of this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="730" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="730" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1adab47a68f8e82d7161ca4951db618a95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::ok</definition>
        <argsstring>() const</argsstring>
        <name>ok</name>
        <briefdescription>
<para>Return true if Box is valid and they all have the same IndexType. Is true by default if the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is empty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="738" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ae724686faa6eed126df5223966a425eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::isDisjoint</definition>
        <argsstring>() const</argsstring>
        <name>isDisjoint</name>
        <briefdescription>
<para>Return true if set of intersecting Boxes in <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is null. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="741" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a4a0626dbe9602ecfda3c0fbc34112c22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::BoxArray::boxList</definition>
        <argsstring>() const</argsstring>
        <name>boxList</name>
        <briefdescription>
<para>Create a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> from this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="744" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a258cd3a2a8c608f7cc0068e0ddd08d3f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::contains</definition>
        <argsstring>(const IntVect &amp;v) const</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>True if the IntVect is within any of the Boxes in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="747" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a23ba905888437090a2fc1cfd8e578c4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::contains</definition>
        <argsstring>(const Box &amp;b, bool assume_disjoint_ba=false, const IntVect &amp;ng=IntVect(0)) const</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>assume_disjoint_ba</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>ng</declname>
          <defval><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref>(0)</defval>
        </param>
        <briefdescription>
<para>True if the Box is contained in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>(+ng). The Box must also have the same IndexType as those in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="754" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a27b3133e35f0dbae139aebf7769d86b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::contains</definition>
        <argsstring>(const BoxArray &amp;ba, bool assume_disjoint_ba=false, const IntVect &amp;ng=IntVect(0)) const</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>assume_disjoint_ba</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>ng</declname>
          <defval><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref>(0)</defval>
        </param>
        <briefdescription>
<para>True if all Boxes in ba are contained in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>(+ng). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="761" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a5535d8c27dece816a8ef7bf022777040" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::contains</definition>
        <argsstring>(const BoxArray &amp;ba, Periodicity const &amp;period) const</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> const &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
<para>True if all cells in ba are periodically contained in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>If a cell after being periodically shifted is contained in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>, it&apos;s considered being periodically contained. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="772" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a6c5052b75daf4b8fad5f6bd0c65da9a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::BoxArray::minimalBox</definition>
        <argsstring>() const</argsstring>
        <name>minimalBox</name>
        <briefdescription>
<para>Return smallest Box that contains all Boxes in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="775" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1adc6fda292fafd7aa9e93227271842a56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::BoxArray::minimalBox</definition>
        <argsstring>(Long &amp;npts_avg_box) const</argsstring>
        <name>minimalBox</name>
        <param>
          <type>Long &amp;</type>
          <declname>npts_avg_box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="776" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a0ec59f7f66dc947a4911ac0b88609ce7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::intersects</definition>
        <argsstring>(const Box &amp;b, int ng=0) const</argsstring>
        <name>intersects</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ng</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>True if the Box intersects with this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>(+ghostcells). The Box must have the same IndexType as those in this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="783" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a15880d75956fdc7052c011f342f62e4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::BoxArray::intersects</definition>
        <argsstring>(const Box &amp;b, const IntVect &amp;ng) const</argsstring>
        <name>intersects</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="786" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a2470e4615fe1056163cd6ae32fbea08e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt;int,Box&gt; &gt; amrex::BoxArray::intersections</definition>
        <argsstring>(const Box &amp;bx) const</argsstring>
        <name>intersections</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>Return intersections of Box and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="790" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aee84ed0469f4a20c6b83f935588ac751" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt;int,Box&gt; &gt; amrex::BoxArray::intersections</definition>
        <argsstring>(const Box &amp;bx, bool first_only, int ng) const</argsstring>
        <name>intersections</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>first_only</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ng</declname>
        </param>
        <briefdescription>
<para>Return intersections of Box and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>(+ghostcells). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="794" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a4a94bddbcd47fd5fb129cf54f4f0096f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt;int,Box&gt; &gt; amrex::BoxArray::intersections</definition>
        <argsstring>(const Box &amp;bx, bool first_only, const IntVect &amp;ng) const</argsstring>
        <name>intersections</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>first_only</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="797" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a80052e0d9dfb04e293a213fe3c62f053" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::intersections</definition>
        <argsstring>(const Box &amp;bx, std::vector&lt; std::pair&lt; int, Box &gt; &gt; &amp;isects) const</argsstring>
        <name>intersections</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>std::vector&lt; std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &gt; &gt; &amp;</type>
          <declname>isects</declname>
        </param>
        <briefdescription>
<para>intersect Box and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>, then store the result in isects </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="800" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a7cd5573bebca1fbbe29bd8bd328ce172" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::intersections</definition>
        <argsstring>(const Box &amp;bx, std::vector&lt; std::pair&lt; int, Box &gt; &gt; &amp;isects, bool first_only, int ng) const</argsstring>
        <name>intersections</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>std::vector&lt; std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &gt; &gt; &amp;</type>
          <declname>isects</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>first_only</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ng</declname>
        </param>
        <briefdescription>
<para>intersect Box and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>(+ghostcells), then store the result in isects </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="803" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ac19b485ff74dd52d9bb8d8919184e0ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::intersections</definition>
        <argsstring>(const Box &amp;bx, std::vector&lt; std::pair&lt; int, Box &gt; &gt; &amp;isects, bool first_only, const IntVect &amp;ng) const</argsstring>
        <name>intersections</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>std::vector&lt; std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &gt; &gt; &amp;</type>
          <declname>isects</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>first_only</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="806" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a9cfc3c2251e61eb1f1defb1e57badeb1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref></type>
        <definition>BoxList amrex::BoxArray::complementIn</definition>
        <argsstring>(const Box &amp;b) const</argsstring>
        <name>complementIn</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Return box - boxarray. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="810" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aae7887e346945ad1154a31823b1f73e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::complementIn</definition>
        <argsstring>(BoxList &amp;bl, const Box &amp;b) const</argsstring>
        <name>complementIn</name>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="811" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a6bdf6476369bee9a51d4c3d2f7d70cd0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::clear_hash_bin</definition>
        <argsstring>() const</argsstring>
        <name>clear_hash_bin</name>
        <briefdescription>
<para>Clear out the internal hash table used by intersections. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="814" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1aafdd2fe3c88e9b17d4892dd36e92225f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::removeOverlap</definition>
        <argsstring>(bool simplify=true)</argsstring>
        <name>removeOverlap</name>
        <param>
          <type>bool</type>
          <declname>simplify</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Change the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to one with no overlap and then simplify it (see the simplify function in <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="817" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a0c8df27bfc6981d3e50784b64026a249" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1BoxArray_1_1RefID" kindref="compound">RefID</ref></type>
        <definition>RefID amrex::BoxArray::getRefID</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getRefID</name>
        <briefdescription>
<para>Return a unique ID of the reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="834" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="834" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a0005742d49b95bea045b6f46edb75714" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad35342b486ef07ba6108169268169296" kindref="member">IndexType</ref></type>
        <definition>IndexType amrex::BoxArray::ixType</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ixType</name>
        <briefdescription>
<para>Return index type of this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="837" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="837" bodyend="837"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a4c29b9c027bf459bb2d368484e90bb76" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::BoxArray::crseRatio</definition>
        <argsstring>() const noexcept</argsstring>
        <name>crseRatio</name>
        <briefdescription>
<para>Return crse ratio of this <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="840" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="840" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ae3fba31af025b800aef97da09bc4113c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::uniqify</definition>
        <argsstring>()</argsstring>
        <name>uniqify</name>
        <briefdescription>
<para>Make ourselves unique. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="847" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a6926e32d8af57ad9ad7d28bb713e44cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> const  &amp;</type>
        <definition>BoxList const&amp; amrex::BoxArray::simplified_list</definition>
        <argsstring>() const</argsstring>
        <name>simplified_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="849" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a4b3404ba7ad7bd57ae030a505619e205" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::BoxArray::simplified</definition>
        <argsstring>() const</argsstring>
        <name>simplified</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="850" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a9e5c9ebac77cdbae33b26f876fec60ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1BATransformer" kindref="compound">BATransformer</ref> const  &amp;</type>
        <definition>BATransformer const&amp; amrex::BoxArray::transformer</definition>
        <argsstring>() const</argsstring>
        <name>transformer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="852" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1af5fdbe570354844839523768c9f0d610" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::weak_ptr&lt; <ref refid="structamrex_1_1BARef" kindref="compound">BARef</ref> &gt;</type>
        <definition>std::weak_ptr&lt;BARef&gt; amrex::BoxArray::getWeakRef</definition>
        <argsstring>() const</argsstring>
        <name>getWeakRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="854" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ae90acac6723ee9c525234b9a129fe988" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structamrex_1_1BARef" kindref="compound">BARef</ref> &gt; const  &amp;</type>
        <definition>std::shared_ptr&lt;BARef&gt; const&amp; amrex::BoxArray::getSharedRef</definition>
        <argsstring>() const</argsstring>
        <name>getSharedRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="855" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a71c14d5f96161181135fa18b45ab0360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structamrex_1_1BARef" kindref="compound">BARef</ref> &gt; &amp;</type>
        <definition>std::shared_ptr&lt;BARef&gt;&amp; amrex::BoxArray::getSharedRef</definition>
        <argsstring>()</argsstring>
        <name>getSharedRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="856" column="21"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a93718ee84062758c5256a2792939c6f7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::BoxArray::SameRefs</definition>
        <argsstring>(const BoxArray &amp;lhs, const BoxArray &amp;rhs)</argsstring>
        <name>SameRefs</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>whether two BoxArrays share the same data </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="820" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="820" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a62d4dfe6d9e3c2bab494187b26dadff0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::BoxArray::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="842" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a3af4d078cc19ee1a141a41e4605b8c99" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::BoxArray::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="843" column="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a9f2c23e3d3ccd73f1045f2bca61f7a11" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BoxArray::type_update</definition>
        <argsstring>()</argsstring>
        <name>type_update</name>
        <briefdescription>
<para>Update <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> index type according the box type, and then convert boxes to cell-centered. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="863" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1ab4d9ffcab6b7147cd81c3f7da7f36298" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1BARef_1a59cc4e634f9108fb676919f94f8ff55f" kindref="member">BARef::HashType</ref> &amp;</type>
        <definition>BARef::HashType&amp; amrex::BoxArray::getHashMap</definition>
        <argsstring>() const</argsstring>
        <name>getHashMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="865" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a505e85adf7cf632051028a779afb02d9" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::BoxArray::getDoiLo</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getDoiLo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="867" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BoxArray_1a6884438231c020a69d778c573c16b9e7" prot="private" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::BoxArray::getDoiHi</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getDoiHi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="868" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A collection of Boxes stored in an Array. </para>
    </briefdescription>
    <detaileddescription>
<para>It is a reference-counted concrete class, not a polymorphic one; i.e. you cannot use any of the List member functions with a <ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref>. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="12">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="7" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="9">
        <label>amrex::IndexTypeND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IndexTypeND"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="4">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="5" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="7" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="6" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
      </node>
      <node id="6">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="7" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>amrex::CellIndexEnum</label>
        <link refid="structamrex_1_1CellIndexEnum"/>
      </node>
      <node id="3">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
      </node>
      <node id="7">
        <label>amrex::IntVectND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" line="549" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BoxArray.H" bodystart="550" bodyend="874"/>
    <listofallmembers>
      <member refid="classamrex_1_1BoxArray_1abffb5edfa79d13ec2e7f77a2a150cc7d" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1BoxArray_1a16d5410c4beb4a7376d57d6d17b7d201" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1ae51fad2f4cc75e0d49934bd8cbbec39a" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1ac1ed271c8bba3f4a6f874f9aed33f5d6" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1aff04ba0858cf808f3f7871667344a7bd" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1aecd5949e593c8357b06cd69b29b0bbeb" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1a4b713738c14f93de97c288200cb69cd6" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1a9802183a182f70509c9b1f0dc5c4bf84" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1a8f81a0f854fcc971e054650850308270" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1afd76dc52a3e04f2242831d4fb4d8bde1" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1aeca058dac155989ce728cb44301c9454" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>BoxArray</name></member>
      <member refid="classamrex_1_1BoxArray_1a4a0626dbe9602ecfda3c0fbc34112c22" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>boxList</name></member>
      <member refid="classamrex_1_1BoxArray_1a04d7713cdc01e24d50d715119f5c333d" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>capacity</name></member>
      <member refid="classamrex_1_1BoxArray_1acaed188c00aecea228d8c92c17a0c3fb" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>CellEqual</name></member>
      <member refid="classamrex_1_1BoxArray_1afed0e52f6570fe4960ce4758f5558761" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>clear</name></member>
      <member refid="classamrex_1_1BoxArray_1a6bdf6476369bee9a51d4c3d2f7d70cd0" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>clear_hash_bin</name></member>
      <member refid="classamrex_1_1BoxArray_1a19275f679bdcf0a56ba8aaa0557796a4" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1BoxArray_1acea52b28c4bfa3bea87045c7803580c8" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1BoxArray_1a7398fc2b3ae449dfcec355e071bc16ce" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>coarsenable</name></member>
      <member refid="classamrex_1_1BoxArray_1af7f2342f51c3bc2de5e8a195d6955d9f" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>coarsenable</name></member>
      <member refid="classamrex_1_1BoxArray_1aa502788789ab808e34a3a4b5b940a928" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>coarsenable</name></member>
      <member refid="classamrex_1_1BoxArray_1a9cfc3c2251e61eb1f1defb1e57badeb1" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>complementIn</name></member>
      <member refid="classamrex_1_1BoxArray_1aae7887e346945ad1154a31823b1f73e5" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>complementIn</name></member>
      <member refid="classamrex_1_1BoxArray_1a258cd3a2a8c608f7cc0068e0ddd08d3f" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>contains</name></member>
      <member refid="classamrex_1_1BoxArray_1a23ba905888437090a2fc1cfd8e578c4d" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>contains</name></member>
      <member refid="classamrex_1_1BoxArray_1a27b3133e35f0dbae139aebf7769d86b3" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>contains</name></member>
      <member refid="classamrex_1_1BoxArray_1a5535d8c27dece816a8ef7bf022777040" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>contains</name></member>
      <member refid="classamrex_1_1BoxArray_1a9fd795307c0c723085b0f7c38957db8d" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>convert</name></member>
      <member refid="classamrex_1_1BoxArray_1aac6381dd6e0ef88003f6804dc1272c99" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>convert</name></member>
      <member refid="classamrex_1_1BoxArray_1a6b338ad8abe06780c44d734dcc5a52ac" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>convert</name></member>
      <member refid="classamrex_1_1BoxArray_1a4c29b9c027bf459bb2d368484e90bb76" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>crseRatio</name></member>
      <member refid="classamrex_1_1BoxArray_1a85a31cf2bd546e2292492cb6c288eb8d" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>d_numPts</name></member>
      <member refid="classamrex_1_1BoxArray_1a55d69deebe4b1ae84fc259bfd4d045f2" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>define</name></member>
      <member refid="classamrex_1_1BoxArray_1a50815493c47d22812c0e9e3745e19390" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>define</name></member>
      <member refid="classamrex_1_1BoxArray_1a1797dfe4fdb30221d30cef785da8929d" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>define</name></member>
      <member refid="classamrex_1_1BoxArray_1ae71159edaa4456e59699f01955144d97" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>empty</name></member>
      <member refid="classamrex_1_1BoxArray_1a6f5da0ba73ab73833db4f18cd512799a" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>enclosedCells</name></member>
      <member refid="classamrex_1_1BoxArray_1aeea20b902f4c63135230c6e2dfeadd84" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>enclosedCells</name></member>
      <member refid="classamrex_1_1BoxArray_1a4636f955857e2be478f7e1a6a43305ee" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1BoxArray_1a3af4d078cc19ee1a141a41e4605b8c99" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1BoxArray_1ac4e1bbf1c88985b380f9e9df11be7354" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>get</name></member>
      <member refid="classamrex_1_1BoxArray_1a8366f694b15adc33374df70cdd56d0b5" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getCellCenteredBox</name></member>
      <member refid="classamrex_1_1BoxArray_1a6884438231c020a69d778c573c16b9e7" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getDoiHi</name></member>
      <member refid="classamrex_1_1BoxArray_1a505e85adf7cf632051028a779afb02d9" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getDoiLo</name></member>
      <member refid="classamrex_1_1BoxArray_1ab4d9ffcab6b7147cd81c3f7da7f36298" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getHashMap</name></member>
      <member refid="classamrex_1_1BoxArray_1a0c8df27bfc6981d3e50784b64026a249" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getRefID</name></member>
      <member refid="classamrex_1_1BoxArray_1ae90acac6723ee9c525234b9a129fe988" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getSharedRef</name></member>
      <member refid="classamrex_1_1BoxArray_1a71c14d5f96161181135fa18b45ab0360" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getSharedRef</name></member>
      <member refid="classamrex_1_1BoxArray_1af5fdbe570354844839523768c9f0d610" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>getWeakRef</name></member>
      <member refid="classamrex_1_1BoxArray_1ae8dc6e393a9040bdcc8d30cf6c175e42" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>grow</name></member>
      <member refid="classamrex_1_1BoxArray_1aab141a1a65613c007c9815ef4ff2ea5e" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>grow</name></member>
      <member refid="classamrex_1_1BoxArray_1ac403b59842ac37a5675678e7b4a3e7e1" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>grow</name></member>
      <member refid="classamrex_1_1BoxArray_1a0ac6b3a6e7c21b3fb647cee572a8e43c" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>growcoarsen</name></member>
      <member refid="classamrex_1_1BoxArray_1ad0683d690fad17607e3e142b18e2f2d7" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>growcoarsen</name></member>
      <member refid="classamrex_1_1BoxArray_1ad9da1180061a25ae5cdc2a15eec88d7d" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>growHi</name></member>
      <member refid="classamrex_1_1BoxArray_1a5789b39ad5c1f8b47d279bd51555657f" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>growLo</name></member>
      <member refid="classamrex_1_1BoxArray_1a62d4dfe6d9e3c2bab494187b26dadff0" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1BoxArray_1a88d35757727faba3973cc46625237e74" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>initialized</name></member>
      <member refid="classamrex_1_1BoxArray_1a2470e4615fe1056163cd6ae32fbea08e" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersections</name></member>
      <member refid="classamrex_1_1BoxArray_1aee84ed0469f4a20c6b83f935588ac751" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersections</name></member>
      <member refid="classamrex_1_1BoxArray_1a4a94bddbcd47fd5fb129cf54f4f0096f" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersections</name></member>
      <member refid="classamrex_1_1BoxArray_1a80052e0d9dfb04e293a213fe3c62f053" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersections</name></member>
      <member refid="classamrex_1_1BoxArray_1a7cd5573bebca1fbbe29bd8bd328ce172" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersections</name></member>
      <member refid="classamrex_1_1BoxArray_1ac19b485ff74dd52d9bb8d8919184e0ce" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersections</name></member>
      <member refid="classamrex_1_1BoxArray_1a0ec59f7f66dc947a4911ac0b88609ce7" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersects</name></member>
      <member refid="classamrex_1_1BoxArray_1a15880d75956fdc7052c011f342f62e4c" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>intersects</name></member>
      <member refid="classamrex_1_1BoxArray_1ae724686faa6eed126df5223966a425eb" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>isDisjoint</name></member>
      <member refid="classamrex_1_1BoxArray_1a0005742d49b95bea045b6f46edb75714" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>ixType</name></member>
      <member refid="classamrex_1_1BoxArray_1a416da5b2620e5c9cad12ab2fd73d349b" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>m_bat</name></member>
      <member refid="classamrex_1_1BoxArray_1aaf44041b956612401793f474280e5e2f" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>m_ref</name></member>
      <member refid="classamrex_1_1BoxArray_1a6111d0d59d47fcfe76123cc90bfa2f9c" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>m_simplified_list</name></member>
      <member refid="classamrex_1_1BoxArray_1a8b428c4ab58e4657bc6a728dd2eba31a" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>maxSize</name></member>
      <member refid="classamrex_1_1BoxArray_1a3e82821593ec9b579ef9392de6bd548c" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>maxSize</name></member>
      <member refid="classamrex_1_1BoxArray_1a6c5052b75daf4b8fad5f6bd0c65da9a0" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>minimalBox</name></member>
      <member refid="classamrex_1_1BoxArray_1adc6fda292fafd7aa9e93227271842a56" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>minimalBox</name></member>
      <member refid="classamrex_1_1BoxArray_1a047807c657ddd8950abc890ea01256cf" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>minmaxSize</name></member>
      <member refid="classamrex_1_1BoxArray_1a5f25bd92e654851319f55a17ee276723" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>numPts</name></member>
      <member refid="classamrex_1_1BoxArray_1adab47a68f8e82d7161ca4951db618a95" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>ok</name></member>
      <member refid="classamrex_1_1BoxArray_1a5856751adc0f5194829d3c3920bc2717" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1BoxArray_1a20f87e767c1742aa9d48ab35c5739352" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1BoxArray_1a71523423b56d7e520f67c7f164689c87" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BoxArray_1ac273e3e3038f3ca71306de6576d41c74" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BoxArray_1a74ee48ddcfd53d548f7a55352dba7cb4" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator==</name></member>
      <member refid="classamrex_1_1BoxArray_1ac7392d5269b259859afb66f9528f1f6b" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator==</name></member>
      <member refid="classamrex_1_1BoxArray_1a0386a0ab9aa86bee7e8f499770f99ca5" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1BoxArray_1accfeb1e3facccbcdedc791ce6bbb67dc" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1BoxArray_1a4df72bcadb7bdaa2c5db57212e48853a" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>readFrom</name></member>
      <member refid="classamrex_1_1BoxArray_1a7c9a570ab83e12cf4d621b78862d5573" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>refine</name></member>
      <member refid="classamrex_1_1BoxArray_1a815b7fed7c01414c854bc81df03349d9" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>refine</name></member>
      <member refid="classamrex_1_1BoxArray_1aafdd2fe3c88e9b17d4892dd36e92225f" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>removeOverlap</name></member>
      <member refid="classamrex_1_1BoxArray_1a7d000ff42a0a1d9be2862c1b53472d3f" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>resize</name></member>
      <member refid="classamrex_1_1BoxArray_1a93718ee84062758c5256a2792939c6f7" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>SameRefs</name></member>
      <member refid="classamrex_1_1BoxArray_1accbf2c73a258ba522542ac1ad13f9ca8" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>set</name></member>
      <member refid="classamrex_1_1BoxArray_1af6485eb97c41d77e94dae7e2473486d4" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>shift</name></member>
      <member refid="classamrex_1_1BoxArray_1a519058bde273a0b9e2298ef2c3f1628a" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>shift</name></member>
      <member refid="classamrex_1_1BoxArray_1a4b3404ba7ad7bd57ae030a505619e205" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>simplified</name></member>
      <member refid="classamrex_1_1BoxArray_1a6926e32d8af57ad9ad7d28bb713e44cd" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>simplified_list</name></member>
      <member refid="classamrex_1_1BoxArray_1ac492bfeacfc03ff2dcb5375e5422d417" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>size</name></member>
      <member refid="classamrex_1_1BoxArray_1a9aa3edc41d3bf33d1a0d0569438b4e74" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>surroundingNodes</name></member>
      <member refid="classamrex_1_1BoxArray_1a33a13ee42fefc260884997d8e9e427ec" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>surroundingNodes</name></member>
      <member refid="classamrex_1_1BoxArray_1a9e5c9ebac77cdbae33b26f876fec60ba" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>transformer</name></member>
      <member refid="classamrex_1_1BoxArray_1a9f2c23e3d3ccd73f1045f2bca61f7a11" prot="private" virt="non-virtual"><scope>amrex::BoxArray</scope><name>type_update</name></member>
      <member refid="classamrex_1_1BoxArray_1ae3fba31af025b800aef97da09bc4113c" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>uniqify</name></member>
      <member refid="classamrex_1_1BoxArray_1ab73812875ab7b0cb8c298103e71f6dd8" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>writeOn</name></member>
      <member refid="classamrex_1_1BoxArray_1ac969ef57c4c67c6dd624e9f261f2afb4" prot="public" virt="non-virtual"><scope>amrex::BoxArray</scope><name>~BoxArray</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
