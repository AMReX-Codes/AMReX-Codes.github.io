<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1Geometry" kind="class" language="C++" prot="public">
    <compoundname>amrex::Geometry</compoundname>
    <basecompoundref refid="classamrex_1_1CoordSys" prot="public" virt="non-virtual">amrex::CoordSys</basecompoundref>
    <includes refid="AMReX__Geometry_8H" local="no">AMReX_Geometry.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1Geometry_1a84b1ad3fef8594c10d9ff2000505b20a" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::Geometry::is_periodic[AMREX_SPACEDIM]</definition>
        <argsstring>[AMREX_SPACEDIM]</argsstring>
        <name>is_periodic</name>
        <initializer>= {AMREX_D_DECL(false,false,false)}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="432" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Geometry_1af62cd34804aea5643a6fc2205495b7a2" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref></type>
        <definition>RealBox amrex::Geometry::prob_domain</definition>
        <argsstring></argsstring>
        <name>prob_domain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="433" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Geometry_1a00586ef08697068f26b1a8002a3fb8ac" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; ParticleReal, AMREX_SPACEDIM &gt;</type>
        <definition>GpuArray&lt;ParticleReal , AMREX_SPACEDIM&gt; amrex::Geometry::roundoff_lo</definition>
        <argsstring></argsstring>
        <name>roundoff_lo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="439" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Geometry_1a7b910ad6d9743cd015e54449fcc2da78" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; ParticleReal, AMREX_SPACEDIM &gt;</type>
        <definition>GpuArray&lt;ParticleReal , AMREX_SPACEDIM&gt; amrex::Geometry::roundoff_hi</definition>
        <argsstring></argsstring>
        <name>roundoff_hi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="439" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Geometry_1a52477661ac7c7ccbd93f397340176c74" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::Geometry::domain</definition>
        <argsstring></argsstring>
        <name>domain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="442" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="442" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Geometry_1abe4767b2f215bc24725017610b86091d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Geometry::Geometry</definition>
        <argsstring>() noexcept</argsstring>
        <name>Geometry</name>
        <briefdescription>
<para>The default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Leaves object in an unusable state. A &quot;define&quot; method must be called before use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="79" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1ab9cc9315f181884f554c5866cd1e68e5" prot="public" static="no" const="no" explicit="yes" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Geometry::Geometry</definition>
        <argsstring>(const Box &amp;dom, const RealBox *rb=nullptr, int coord=-1, int const *is_per=nullptr) noexcept</argsstring>
        <name>Geometry</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>dom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> *</type>
          <declname>rb</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const *</type>
          <declname>is_per</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a fully-defined geometry object that describes the problem domain and coordinate system.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dom</parametername>
</parameternamelist>
<parameterdescription>
<para>cell-centered <computeroutput>Box</computeroutput> specifying the index space bounds of the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rb</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <computeroutput><ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref></computeroutput> specifying the real space bounds of the domain. Optional. If not specified, will be ParmParsed from &quot;geometry.prob_lo&quot; and &quot;geometry.prob_hi&quot;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coord</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the coordinate system type. Optional. Can be one of: <ref refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa773443060faab3679fd6637fbb386086" kindref="member">CoordSys::cartesian</ref> <ref refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa090e74483c754250a5e0ee448bdfe8b3" kindref="member">CoordSys::RZ</ref> <ref refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaaa0c55dfafca5806f988babd974f5b158" kindref="member">CoordSys::SPHERICAL</ref> Default is cartesian. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_per</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to memory space specifying periodicity in each coordinate direction. Optional. Default is non-periodic. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="95" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="50" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a7ba1318caf7c0f051bc33126789c4e94" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Geometry::Geometry</definition>
        <argsstring>(const Box &amp;dom, const RealBox &amp;rb, int coord, Array&lt; int, AMREX_SPACEDIM &gt; const &amp;is_per) noexcept</argsstring>
        <name>Geometry</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>dom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>rb</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>is_per</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructs a fully-defined geometry object that describes the problem domain and coordinate system.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dom</parametername>
</parameternamelist>
<parameterdescription>
<para>cell-centered <computeroutput>Box</computeroutput> specifying the index space bounds of the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rb</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <computeroutput><ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref></computeroutput> specifying the real space bounds of the domain. Optional. If not specified, will be ParmParsed from &quot;geometry.prob_lo&quot; and &quot;geometry.prob_hi&quot;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coord</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the coordinate system type. Optional. Can be one of: <ref refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa773443060faab3679fd6637fbb386086" kindref="member">CoordSys::cartesian</ref> <ref refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa090e74483c754250a5e0ee448bdfe8b3" kindref="member">CoordSys::RZ</ref> <ref refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaaa0c55dfafca5806f988babd974f5b158" kindref="member">CoordSys::SPHERICAL</ref> Default is cartesian. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_per</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">amrex::Array</ref> specifying periodicity in each coordinate direction. Optional. Default is non-periodic. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="113" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="56" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a064dbb1fe7f6866145fd4f18a50275ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Geometry::~Geometry</definition>
        <argsstring>()=default</argsstring>
        <name>~Geometry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="116" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a61c7b8c8cbb3b7a39b4db6ed8eface07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Geometry::Geometry</definition>
        <argsstring>(const Geometry &amp;rhs)=default</argsstring>
        <name>Geometry</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="117" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a02c8a9fe2c0a14e7ca251ce48e97ee5b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Geometry::Geometry</definition>
        <argsstring>(Geometry &amp;&amp;rhs) noexcept=default</argsstring>
        <name>Geometry</name>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="118" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1accb415f1b74fa7e10a767254c3943e6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>Geometry&amp; amrex::Geometry::operator=</definition>
        <argsstring>(const Geometry &amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="119" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1ad798fd92507868f0ee233bc92e2b30aa" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>Geometry&amp; amrex::Geometry::operator=</definition>
        <argsstring>(Geometry &amp;&amp;rhs) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="120" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1abb8b8662f077d9913f0af282f32ed415" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1GeometryData" kindref="compound">GeometryData</ref></type>
        <definition>GeometryData amrex::Geometry::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <briefdescription>
<para>Returns non-static copy of geometry&apos;s stored data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="123" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="123" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1ac7ce6de2c732fa66a87df91c06c55b92" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::define</definition>
        <argsstring>(const Box &amp;dom, const RealBox *rb=nullptr, int coord=-1, int const *is_per=nullptr) noexcept</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>dom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> *</type>
          <declname>rb</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const *</type>
          <declname>is_per</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines a geometry object that describes the problem domain and coordinate system for rectangular problem domains. Useful for when the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> object has been constructed with the default constructor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dom</parametername>
</parameternamelist>
<parameterdescription>
<para>cell-centered <computeroutput>Box</computeroutput> specifying the index space bounds of the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rb</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <computeroutput><ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref></computeroutput> specifying the real space bounds of the domain. Optional. If not specified, will be ParmParsed from &quot;geometry.prob_lo&quot; and &quot;geometry.prob_hi&quot;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coord</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the coordinate system type. Optional. Can be one of: <ref refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa773443060faab3679fd6637fbb386086" kindref="member">CoordSys::cartesian</ref> <ref refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa090e74483c754250a5e0ee448bdfe8b3" kindref="member">CoordSys::RZ</ref> <ref refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaaa0c55dfafca5806f988babd974f5b158" kindref="member">CoordSys::SPHERICAL</ref> Default is cartesian. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_per</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to memory space specifying periodicity in each coordinate direction. Optional. Default is non-periodic. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="150" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="70" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a1b38d6eb6c35983b8569d5acafad944b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::define</definition>
        <argsstring>(const Box &amp;dom, const RealBox &amp;rb, int coord, Array&lt; int, AMREX_SPACEDIM &gt; const &amp;is_per) noexcept</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>dom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>rb</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>is_per</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines a geometry object that describes the problem domain and coordinate system for rectangular problem domains. Useful for when the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> object has been constructed with the default constructor.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dom</parametername>
</parameternamelist>
<parameterdescription>
<para>cell-centered <computeroutput>Box</computeroutput> specifying the index space bounds of the domain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rb</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <computeroutput><ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref></computeroutput> specifying the real space bounds of the domain. Optional. If not specified, will be ParmParsed from &quot;geometry.prob_lo&quot; and &quot;geometry.prob_hi&quot;. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coord</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the coordinate system type. Optional. Can be one of: <ref refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa773443060faab3679fd6637fbb386086" kindref="member">CoordSys::cartesian</ref> <ref refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa090e74483c754250a5e0ee448bdfe8b3" kindref="member">CoordSys::RZ</ref> <ref refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaaa0c55dfafca5806f988babd974f5b158" kindref="member">CoordSys::SPHERICAL</ref> Default is cartesian. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_per</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">amrex::Array</ref> specifying periodicity in each coordinate direction. Optional. Default is non-periodic. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="167" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a69dfda38f7288ba1c26211d5b2160c1c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
        <definition>const RealBox&amp; amrex::Geometry::ProbDomain</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ProbDomain</name>
        <briefdescription>
<para>Returns the problem domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="170" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="170" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1ae68fad0b0c42fcd904bcc36c8d678ca9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::ProbDomain</definition>
        <argsstring>(const RealBox &amp;rb) noexcept</argsstring>
        <name>ProbDomain</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>rb</declname>
        </param>
        <briefdescription>
<para>Sets the problem domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="172" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="172" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a02ef0d522174b99ca75e569def4c091c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const Real *</type>
        <definition>const Real* amrex::Geometry::ProbLo</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ProbLo</name>
        <briefdescription>
<para>Returns the lo end of the problem domain in each dimension. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="178" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="178" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a9a8ebe29bfbb66ffa7d2ac47d2fb255b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const Real *</type>
        <definition>const Real* amrex::Geometry::ProbHi</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ProbHi</name>
        <briefdescription>
<para>Returns the hi end of the problem domain in each dimension. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="180" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="180" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a03bdebdfb4b402507aab117a78bb71b4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::Geometry::ProbLo</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>ProbLo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns the lo end of the problem domain in specified direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="182" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a5fd19e6998dd24eb5156808bdabc1dae" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::Geometry::ProbHi</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>ProbHi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns the hi end of the problem domain in specified direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="184" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="184" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a2cbf2a8943849597fdcb06608416d0db" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt;</type>
        <definition>GpuArray&lt;Real,AMREX_SPACEDIM&gt; amrex::Geometry::ProbLoArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ProbLoArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="186" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a8de19f13c63f4cb2759207cb725581ed" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt;</type>
        <definition>GpuArray&lt;Real,AMREX_SPACEDIM&gt; amrex::Geometry::ProbHiArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ProbHiArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="190" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="190" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a8f5623ee19b444e7c1a38d28a79459fb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; ParticleReal, AMREX_SPACEDIM &gt;</type>
        <definition>GpuArray&lt;ParticleReal,AMREX_SPACEDIM&gt; amrex::Geometry::ProbLoArrayInParticleReal</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ProbLoArrayInParticleReal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="194" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="194" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1aa55c38ac0db751b7aa40625464034b73" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; ParticleReal, AMREX_SPACEDIM &gt;</type>
        <definition>GpuArray&lt;ParticleReal,AMREX_SPACEDIM&gt; amrex::Geometry::ProbHiArrayInParticleReal</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ProbHiArrayInParticleReal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="198" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="198" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1ad215766309286d88d85b4d78f7280f4c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::Geometry::ProbSize</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ProbSize</name>
        <briefdescription>
<para>Returns the overall size of the domain by multiplying the ProbLength&apos;s together. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="203" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1aa957525db46a7c7c22c1371633a3f263" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::Geometry::ProbLength</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>ProbLength</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns length of problem domain in specified dimension. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="208" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="208" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a94f4ddb683e381201694d644be7566f1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
        <definition>const Box&amp; amrex::Geometry::Domain</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Domain</name>
        <briefdescription>
<para>Returns our rectangular domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="210" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="210" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a781c6fe9c69aab1b6955f311503888bc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::Domain</definition>
        <argsstring>(const Box &amp;bx) noexcept</argsstring>
        <name>Domain</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>Sets our rectangular domain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="212" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="212" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a109125700647435d188afbc74b9a2725" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::GetVolume</definition>
        <argsstring>(MultiFab &amp;vol, const BoxArray &amp;grds, const DistributionMapping &amp;dm, int grow) const</argsstring>
        <name>GetVolume</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>vol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grds</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>grow</declname>
        </param>
        <briefdescription>
<para>Define a multifab of areas and volumes with given grow factor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="219" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="207" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1abaac123e12e2b3e5f0f9fdc0edcef6b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::GetVolume</definition>
        <argsstring>(MultiFab &amp;vol) const</argsstring>
        <name>GetVolume</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>vol</declname>
        </param>
        <briefdescription>
<para>Fill the pre-built multifab with volume. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="224" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="217" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1af7996fe47b1e82704565102c15df47c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::GetVolume</definition>
        <argsstring>(FArrayBox &amp;vol, const BoxArray &amp;grds, int idx, int grow) const</argsstring>
        <name>GetVolume</name>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>vol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grds</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>grow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="226" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="253" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a877e863e6797d128bdb0603313a54431" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::GetDLogA</definition>
        <argsstring>(MultiFab &amp;dloga, const BoxArray &amp;grds, const DistributionMapping &amp;dm, int dir, int grow) const</argsstring>
        <name>GetDLogA</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>dloga</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grds</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>grow</declname>
        </param>
        <briefdescription>
<para>Compute d(log(A))/dr at cell centers in given region and stuff the results into the passed <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="294" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="263" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a5959b22b9bfa06ce43a7357c18b0124e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::GetFaceArea</definition>
        <argsstring>(MultiFab &amp;area, const BoxArray &amp;grds, const DistributionMapping &amp;dm, int dir, int grow) const</argsstring>
        <name>GetFaceArea</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grds</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>grow</declname>
        </param>
        <briefdescription>
<para>Compute area of cell faces in given region and stuff stuff the results into the passed <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="303" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="298" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1aa546dc5e4e7fd70bc151955e2984b0ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::GetFaceArea</definition>
        <argsstring>(MultiFab &amp;area, int dir) const</argsstring>
        <name>GetFaceArea</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Fill the pre-built multifab with area. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="309" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="312" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a8e4aa2c2e88a46cb31b1ce0f9590c350" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::GetFaceArea</definition>
        <argsstring>(FArrayBox &amp;area, const BoxArray &amp;grds, int idx, int dir, int grow) const</argsstring>
        <name>GetFaceArea</name>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>grds</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>grow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="312" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="359" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1aed68387cf6235047891119eb57ee878e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Geometry::isPeriodic</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>isPeriodic</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Is the domain periodic in the specified direction? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="318" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="318" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a40882432c46bfa9ae6a7316a0889dc35" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Geometry::isAnyPeriodic</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isAnyPeriodic</name>
        <briefdescription>
<para>Is domain periodic in any direction? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="320" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="320" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1aecbdf44d0934d9245886228cdffb8f37" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Geometry::isAllPeriodic</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isAllPeriodic</name>
        <briefdescription>
<para>Is domain periodic in all directions? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="325" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="325" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a4a9c33cfb4af2e159fcf3dff841881e7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt;</type>
        <definition>Array&lt;int,AMREX_SPACEDIM&gt; amrex::Geometry::isPeriodic</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isPeriodic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="329" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="329" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a6b21e315b7fa018c5e528e620fd554c6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt;</type>
        <definition>GpuArray&lt;int,AMREX_SPACEDIM&gt; amrex::Geometry::isPeriodicArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isPeriodicArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="334" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="334" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a622746891e67a5016ae4b0c0137d70ce" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Geometry::period</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>period</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>What&apos;s period in specified direction? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="340" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="340" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a7b365b1560bb9a31cf49cd55668085cf" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref></type>
        <definition>Periodicity amrex::Geometry::periodicity</definition>
        <argsstring>() const noexcept</argsstring>
        <name>periodicity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="342" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="342" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1affe5cf2164950c1670a92f7b2719c0ff" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref></type>
        <definition>Periodicity amrex::Geometry::periodicity</definition>
        <argsstring>(const Box &amp;b) const noexcept</argsstring>
        <name>periodicity</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="348" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="348" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a95ab5abc1e6c5d1efb9de40e0873d391" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::periodicShift</definition>
        <argsstring>(const Box &amp;target, const Box &amp;src, Vector&lt; IntVect &gt; &amp;out) const noexcept</argsstring>
        <name>periodicShift</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Compute Array of shifts which will translate src so that it will intersect target with non-zero intersection. the array will be resized internally, so anything previously there will be gone DO NOT return non-periodic shifts, even if the box&apos;s do intersect without shifting. The logic is that you will only do this as a special case if there is some periodicity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="363" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="369" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a8a4838041db3d95fdd4960045349db2d" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::Geometry::growNonPeriodicDomain</definition>
        <argsstring>(IntVect const &amp;ngrow) const noexcept</argsstring>
        <name>growNonPeriodicDomain</name>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Return domain box with non-periodic directions grown by ngrow. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="368" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="479" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a4535bb6797e6c53c228d598f23cc7296" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::Geometry::growNonPeriodicDomain</definition>
        <argsstring>(int ngrow) const noexcept</argsstring>
        <name>growNonPeriodicDomain</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Return domain box with non-periodic directions grown by ngrow. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="370" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="503" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1aca0dd62693f548b7fb4ee38acc6310db" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::Geometry::growPeriodicDomain</definition>
        <argsstring>(IntVect const &amp;ngrow) const noexcept</argsstring>
        <name>growPeriodicDomain</name>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Return domain box with periodic directions grown by ngrow. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="372" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="491" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1abe9c676150da912017772bb39a1f0d91" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::Geometry::growPeriodicDomain</definition>
        <argsstring>(int ngrow) const noexcept</argsstring>
        <name>growPeriodicDomain</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Return domain box with periodic directions grown by ngrow. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="374" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="509" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a07025080452434734ae74c23e9f97224" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt;</type>
        <definition>Array&lt;int,AMREX_SPACEDIM&gt; amrex::Geometry::setPeriodicity</definition>
        <argsstring>(Array&lt; int, AMREX_SPACEDIM &gt; const &amp;period) noexcept</argsstring>
        <name>setPeriodicity</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set periodicity flags and return the old flags. Note that, unlike <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> class, the flags are just boolean. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="380" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="380" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a1d9c01b45625d9e6f8e0e4d1cdd4a5a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::coarsen</definition>
        <argsstring>(IntVect const &amp;rr)</argsstring>
        <name>coarsen</name>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="390" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="390" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a122947abb8d93a6984f26277576faad3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::refine</definition>
        <argsstring>(IntVect const &amp;rr)</argsstring>
        <name>refine</name>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="398" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="398" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1af5bc2516bcf62a317b7bd5c77def5171" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Geometry::outsideRoundoffDomain</definition>
        <argsstring>(AMREX_D_DECL(ParticleReal x, ParticleReal y, ParticleReal z)) const</argsstring>
        <name>outsideRoundoffDomain</name>
        <param>
          <type>AMREX_D_DECL(ParticleReal x, ParticleReal y, ParticleReal z)</type>
        </param>
        <briefdescription>
<para>Returns true if a point is outside the roundoff domain. All particles with positions inside the roundoff domain are sure to be mapped to cells inside the <ref refid="classamrex_1_1Geometry_1a94f4ddb683e381201694d644be7566f1" kindref="member">Domain()</ref> box. Note that the same need not be true for all points inside <ref refid="classamrex_1_1Geometry_1a69dfda38f7288ba1c26211d5b2160c1c" kindref="member">ProbDomain()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="412" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="688" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1ab6da90b609946e2435bdb054e7770f54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Geometry::insideRoundoffDomain</definition>
        <argsstring>(AMREX_D_DECL(ParticleReal x, ParticleReal y, ParticleReal z)) const</argsstring>
        <name>insideRoundoffDomain</name>
        <param>
          <type>AMREX_D_DECL(ParticleReal x, ParticleReal y, ParticleReal z)</type>
        </param>
        <briefdescription>
<para>Returns true if a point is inside the roundoff domain. All particles with positions inside the roundoff domain are sure to be mapped to cells inside the <ref refid="classamrex_1_1Geometry_1a94f4ddb683e381201694d644be7566f1" kindref="member">Domain()</ref> box. Note that the same need not be true for all points inside <ref refid="classamrex_1_1Geometry_1a69dfda38f7288ba1c26211d5b2160c1c" kindref="member">ProbDomain()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="420" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="700" bodyend="703"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1aa9f2a9f6b90b4c58d8b870685669a398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::computeRoundoffDomain</definition>
        <argsstring>()</argsstring>
        <name>computeRoundoffDomain</name>
        <briefdescription>
<para>Compute the roundoff domain. Public because it contains an extended host / device lambda. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="426" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="515" bodyend="685"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1Geometry_1a9b691763a32026e16671e3213068f745" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::Setup</definition>
        <argsstring>(const RealBox *rb=nullptr, int coord=-1, int const *isper=nullptr) noexcept</argsstring>
        <name>Setup</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> *</type>
          <declname>rb</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const *</type>
          <declname>isper</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Read static values from <ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> database. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="130" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="108" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a4de5799760ae5f5831c719af01a33531" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::ResetDefaultProbDomain</definition>
        <argsstring>(const RealBox &amp;rb) noexcept</argsstring>
        <name>ResetDefaultProbDomain</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>rb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="131" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="183" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1af726da4deb561adeecf94bc4eefbf89b" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::ResetDefaultPeriodicity</definition>
        <argsstring>(const Array&lt; int, AMREX_SPACEDIM &gt; &amp;is_per) noexcept</argsstring>
        <name>ResetDefaultPeriodicity</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>is_per</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="132" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="192" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1afacf607bf05ea6d4588954f09b391d37" prot="public" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::ResetDefaultCoord</definition>
        <argsstring>(int coord) noexcept</argsstring>
        <name>ResetDefaultCoord</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="133" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="199" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Geometry_1a26f93383859ece5c7349633cc9f50948" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1aeb09e10bb31cfaa6b8928520c9041df9" kindref="member">AMREX_INLINE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_INLINE Real amrex::Geometry::Volume</definition>
        <argsstring>(const IntVect &amp;point, const GeometryData &amp;geomdata)</argsstring>
        <name>Volume</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1GeometryData" kindref="compound">GeometryData</ref> &amp;</type>
          <declname>geomdata</declname>
        </param>
        <briefdescription>
<para>Return the volume of the specified cell. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="233" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="233" bodyend="288"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1Geometry_1aa0385aea8391d0b59b6adfb910cffbf4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Geometry::read_params</definition>
        <argsstring>()</argsstring>
        <name>read_params</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="429" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1Geometry_1a3ca59e88c7830d6acd3f90177916f308" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;, Geometry &amp;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <defname>is</defname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <defname>g</defname>
        </param>
        <briefdescription>
<para>Nice ASCII input. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="444" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.cpp" bodystart="25" bodyend="43"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Rectangular problem domain geometry. </para>
    </briefdescription>
    <detaileddescription>
<para>This class describes problem domain and coordinate system for RECTANGULAR problem domains. Since the problem domain is RECTANGULAR, periodicity is meaningful. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
      </node>
      <node id="1">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>Real</label>
      </node>
      <node id="6">
        <label>amrex::BoxND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1BoxND"/>
      </node>
      <node id="5">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="3" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
        <childnode refid="3" relation="usage">
          <edgelabel>dx</edgelabel>
          <edgelabel>inv_dx</edgelabel>
          <edgelabel>offset</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>amrex::GpuArray&lt; ParticleReal, AMREX_SPACEDIM &gt;</label>
        <link refid="structamrex_1_1GpuArray"/>
      </node>
      <node id="1">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>roundoff_hi</edgelabel>
          <edgelabel>roundoff_lo</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>prob_domain</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" line="70" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Geometry.H" bodystart="73" bodyend="445"/>
    <listofallmembers>
      <member refid="classamrex_1_1CoordSys_1a7de7d489e53654914daf590cc820fd60" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>AreaHi</name></member>
      <member refid="classamrex_1_1CoordSys_1aef00cc43234b7a33f92f246bbea6edac" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>AreaLo</name></member>
      <member refid="classamrex_1_1CoordSys_1a80883db17d63160073d45479d937e74b" prot="protected" virt="non-virtual"><scope>amrex::Geometry</scope><name>c_sys</name></member>
      <member refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa773443060faab3679fd6637fbb386086" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>cartesian</name></member>
      <member refid="classamrex_1_1CoordSys_1a5c2b7698e44ce750730b8246fc1aa992" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CellCenter</name></member>
      <member refid="classamrex_1_1CoordSys_1a20d11f9a4a56cc4abbbc63520b1a5e7f" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CellCenter</name></member>
      <member refid="classamrex_1_1CoordSys_1aa88777a3be31a577cf01ed63a806f94b" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CellCenter</name></member>
      <member refid="classamrex_1_1CoordSys_1a285d110b44d2e4412b27427418246fa4" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CellIndex</name></member>
      <member refid="classamrex_1_1CoordSys_1ade9815d7413549b5bb09000f1c9ede76" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CellSize</name></member>
      <member refid="classamrex_1_1CoordSys_1afc9b2295dec506f60239afca5e6a4a5d" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CellSize</name></member>
      <member refid="classamrex_1_1CoordSys_1aa352d079ec1fb2e0c971e8f5a6b077da" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CellSizeArray</name></member>
      <member refid="classamrex_1_1Geometry_1a1d9c01b45625d9e6f8e0e4d1cdd4a5a6" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1Geometry_1aa9f2a9f6b90b4c58d8b870685669a398" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>computeRoundoffDomain</name></member>
      <member refid="classamrex_1_1CoordSys_1a2c36af3bfd89e3168d643c45f123cac5" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Coord</name></member>
      <member refid="classamrex_1_1CoordSys_1a37d58cefcf442aea6b94e824394cde52" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CoordInt</name></member>
      <member refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806eba" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>CoordType</name></member>
      <member refid="classamrex_1_1Geometry_1abb8b8662f077d9913f0af282f32ed415" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>data</name></member>
      <member refid="classamrex_1_1Geometry_1ac7ce6de2c732fa66a87df91c06c55b92" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>define</name></member>
      <member refid="classamrex_1_1Geometry_1a1b38d6eb6c35983b8569d5acafad944b" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>define</name></member>
      <member refid="classamrex_1_1Geometry_1a52477661ac7c7ccbd93f397340176c74" prot="private" virt="non-virtual"><scope>amrex::Geometry</scope><name>domain</name></member>
      <member refid="classamrex_1_1Geometry_1a94f4ddb683e381201694d644be7566f1" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Domain</name></member>
      <member refid="classamrex_1_1Geometry_1a781c6fe9c69aab1b6955f311503888bc" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Domain</name></member>
      <member refid="classamrex_1_1CoordSys_1a178c38de0cae8e587e4c34541db7f45b" prot="protected" virt="non-virtual"><scope>amrex::Geometry</scope><name>dx</name></member>
      <member refid="classamrex_1_1Geometry_1abe4767b2f215bc24725017610b86091d" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Geometry</name></member>
      <member refid="classamrex_1_1Geometry_1ab9cc9315f181884f554c5866cd1e68e5" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Geometry</name></member>
      <member refid="classamrex_1_1Geometry_1a7ba1318caf7c0f051bc33126789c4e94" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Geometry</name></member>
      <member refid="classamrex_1_1Geometry_1a61c7b8c8cbb3b7a39b4db6ed8eface07" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Geometry</name></member>
      <member refid="classamrex_1_1Geometry_1a02c8a9fe2c0a14e7ca251ce48e97ee5b" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Geometry</name></member>
      <member refid="classamrex_1_1CoordSys_1a1e5bb6708a24e6df5c5d73422b637620" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetCellLoc</name></member>
      <member refid="classamrex_1_1CoordSys_1a635fa3a22b91c84b298c72e42f9c18d9" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetCellVolCoord</name></member>
      <member refid="classamrex_1_1Geometry_1a877e863e6797d128bdb0603313a54431" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetDLogA</name></member>
      <member refid="classamrex_1_1CoordSys_1add482d37cf7569590ad9052ef0c9d5be" prot="public" virt="non-virtual" ambiguityscope="amrex::CoordSys::"><scope>amrex::Geometry</scope><name>GetDLogA</name></member>
      <member refid="classamrex_1_1CoordSys_1aea1434ade6324f26e8535f495ad65bdf" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetEdgeLoc</name></member>
      <member refid="classamrex_1_1CoordSys_1a3a021239e50efa6a5a02ac8a3b5e45c3" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetEdgeVolCoord</name></member>
      <member refid="classamrex_1_1Geometry_1a5959b22b9bfa06ce43a7357c18b0124e" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetFaceArea</name></member>
      <member refid="classamrex_1_1Geometry_1aa546dc5e4e7fd70bc151955e2984b0ed" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetFaceArea</name></member>
      <member refid="classamrex_1_1Geometry_1a8e4aa2c2e88a46cb31b1ce0f9590c350" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetFaceArea</name></member>
      <member refid="classamrex_1_1CoordSys_1af912928529cb7ca74eae3d2a812c9c0c" prot="public" virt="non-virtual" ambiguityscope="amrex::CoordSys::"><scope>amrex::Geometry</scope><name>GetFaceArea</name></member>
      <member refid="classamrex_1_1Geometry_1a109125700647435d188afbc74b9a2725" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetVolume</name></member>
      <member refid="classamrex_1_1Geometry_1abaac123e12e2b3e5f0f9fdc0edcef6b8" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetVolume</name></member>
      <member refid="classamrex_1_1Geometry_1af7996fe47b1e82704565102c15df47c9" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>GetVolume</name></member>
      <member refid="classamrex_1_1CoordSys_1a273cbc218839d9d4f88bfde8b8253c2c" prot="public" virt="non-virtual" ambiguityscope="amrex::CoordSys::"><scope>amrex::Geometry</scope><name>GetVolume</name></member>
      <member refid="classamrex_1_1Geometry_1a8a4838041db3d95fdd4960045349db2d" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>growNonPeriodicDomain</name></member>
      <member refid="classamrex_1_1Geometry_1a4535bb6797e6c53c228d598f23cc7296" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>growNonPeriodicDomain</name></member>
      <member refid="classamrex_1_1Geometry_1aca0dd62693f548b7fb4ee38acc6310db" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>growPeriodicDomain</name></member>
      <member refid="classamrex_1_1Geometry_1abe9c676150da912017772bb39a1f0d91" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>growPeriodicDomain</name></member>
      <member refid="classamrex_1_1CoordSys_1a9ec92efce51bbde30e91c69673b080cf" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>HiEdge</name></member>
      <member refid="classamrex_1_1CoordSys_1a67a1ad822f7d6fac4907e3d37ab8953d" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>HiEdge</name></member>
      <member refid="classamrex_1_1CoordSys_1a8c5e075f96416bf7b2b62f2b049c8066" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>HiFace</name></member>
      <member refid="classamrex_1_1CoordSys_1a99d299808c6a8314a3e2064894d0a03a" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>HiFace</name></member>
      <member refid="classamrex_1_1CoordSys_1a6900764dc4dfae368296b0caf5548999" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>HiNode</name></member>
      <member refid="classamrex_1_1CoordSys_1a450803429d6c54bdfaeacaadeace5cb3" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>HiNode</name></member>
      <member refid="classamrex_1_1Geometry_1ab6da90b609946e2435bdb054e7770f54" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>insideRoundoffDomain</name></member>
      <member refid="classamrex_1_1CoordSys_1a09a58ce8c24e2ad549c98754fd2adaeb" prot="protected" virt="non-virtual"><scope>amrex::Geometry</scope><name>inv_dx</name></member>
      <member refid="classamrex_1_1CoordSys_1ad195c96d818c1331428e90a727745304" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>InvCellSize</name></member>
      <member refid="classamrex_1_1CoordSys_1a3a9c67df49c93b825ac5378f5411b9da" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>InvCellSize</name></member>
      <member refid="classamrex_1_1CoordSys_1ad30ea5aed12689007843a59201563409" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>InvCellSizeArray</name></member>
      <member refid="classamrex_1_1Geometry_1a84b1ad3fef8594c10d9ff2000505b20a" prot="private" virt="non-virtual"><scope>amrex::Geometry</scope><name>is_periodic</name></member>
      <member refid="classamrex_1_1Geometry_1aecbdf44d0934d9245886228cdffb8f37" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>isAllPeriodic</name></member>
      <member refid="classamrex_1_1Geometry_1a40882432c46bfa9ae6a7316a0889dc35" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>isAnyPeriodic</name></member>
      <member refid="classamrex_1_1CoordSys_1a500695aa14e3fd01f3d7162fd784133e" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>IsCartesian</name></member>
      <member refid="classamrex_1_1Geometry_1aed68387cf6235047891119eb57ee878e" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>isPeriodic</name></member>
      <member refid="classamrex_1_1Geometry_1a4a9c33cfb4af2e159fcf3dff841881e7" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>isPeriodic</name></member>
      <member refid="classamrex_1_1Geometry_1a6b21e315b7fa018c5e528e620fd554c6" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>isPeriodicArray</name></member>
      <member refid="classamrex_1_1CoordSys_1aff79cb7249a744e24c5b335935f20fe6" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>IsRZ</name></member>
      <member refid="classamrex_1_1CoordSys_1a87414a566bba1fff3d0185286a11ba56" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>IsSPHERICAL</name></member>
      <member refid="classamrex_1_1CoordSys_1aad8c159e97f7422f2bf45b92bf3a3002" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>LoEdge</name></member>
      <member refid="classamrex_1_1CoordSys_1a6f6cad7c903feeb070e26cea3df1af5c" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>LoEdge</name></member>
      <member refid="classamrex_1_1CoordSys_1abbaf6097689bdafcce5853d0a74c8a73" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>LoFace</name></member>
      <member refid="classamrex_1_1CoordSys_1ae177792027908beb20976fbd0628d754" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>LoFace</name></member>
      <member refid="classamrex_1_1CoordSys_1a2b1eed19248c0b8ffc16733bbf1d6baa" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>LoNode</name></member>
      <member refid="classamrex_1_1CoordSys_1a0f2dc8592daa645225f6fbb76c7061c7" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>LoNode</name></member>
      <member refid="classamrex_1_1CoordSys_1aedba9cb3e81e6a96fd3cea8330ef0708" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>LowerIndex</name></member>
      <member refid="classamrex_1_1CoordSys_1a9d3eb77447b9c748b7223e271f6c9bb1" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Offset</name></member>
      <member refid="classamrex_1_1CoordSys_1aa67991fbbc479f95a966bcf04ae0e49a" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Offset</name></member>
      <member refid="classamrex_1_1CoordSys_1a87497b1adb83ce034ea0ab943fffc08f" prot="protected" virt="non-virtual"><scope>amrex::Geometry</scope><name>offset</name></member>
      <member refid="classamrex_1_1CoordSys_1abee8e858b3ca22a33388275e0a2cfcbf" prot="protected" virt="non-virtual"><scope>amrex::Geometry</scope><name>ok</name></member>
      <member refid="classamrex_1_1CoordSys_1a13dd49de2ef262fde3364ae394f32538" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Ok</name></member>
      <member refid="classamrex_1_1Geometry_1accb415f1b74fa7e10a767254c3943e6a" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Geometry_1ad798fd92507868f0ee233bc92e2b30aa" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Geometry_1a3ca59e88c7830d6acd3f90177916f308" prot="private" virt="non-virtual"><scope>amrex::Geometry</scope><name>operator&gt;&gt;</name></member>
      <member refid="classamrex_1_1Geometry_1af5bc2516bcf62a317b7bd5c77def5171" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>outsideRoundoffDomain</name></member>
      <member refid="classamrex_1_1Geometry_1a622746891e67a5016ae4b0c0137d70ce" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>period</name></member>
      <member refid="classamrex_1_1Geometry_1a7b365b1560bb9a31cf49cd55668085cf" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>periodicity</name></member>
      <member refid="classamrex_1_1Geometry_1affe5cf2164950c1670a92f7b2719c0ff" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>periodicity</name></member>
      <member refid="classamrex_1_1Geometry_1a95ab5abc1e6c5d1efb9de40e0873d391" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>periodicShift</name></member>
      <member refid="classamrex_1_1Geometry_1af62cd34804aea5643a6fc2205495b7a2" prot="private" virt="non-virtual"><scope>amrex::Geometry</scope><name>prob_domain</name></member>
      <member refid="classamrex_1_1Geometry_1a69dfda38f7288ba1c26211d5b2160c1c" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbDomain</name></member>
      <member refid="classamrex_1_1Geometry_1ae68fad0b0c42fcd904bcc36c8d678ca9" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbDomain</name></member>
      <member refid="classamrex_1_1Geometry_1a9a8ebe29bfbb66ffa7d2ac47d2fb255b" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbHi</name></member>
      <member refid="classamrex_1_1Geometry_1a5fd19e6998dd24eb5156808bdabc1dae" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbHi</name></member>
      <member refid="classamrex_1_1Geometry_1a8de19f13c63f4cb2759207cb725581ed" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbHiArray</name></member>
      <member refid="classamrex_1_1Geometry_1aa55c38ac0db751b7aa40625464034b73" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbHiArrayInParticleReal</name></member>
      <member refid="classamrex_1_1Geometry_1aa957525db46a7c7c22c1371633a3f263" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbLength</name></member>
      <member refid="classamrex_1_1Geometry_1a02ef0d522174b99ca75e569def4c091c" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbLo</name></member>
      <member refid="classamrex_1_1Geometry_1a03bdebdfb4b402507aab117a78bb71b4" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbLo</name></member>
      <member refid="classamrex_1_1Geometry_1a2cbf2a8943849597fdcb06608416d0db" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbLoArray</name></member>
      <member refid="classamrex_1_1Geometry_1a8f5623ee19b444e7c1a38d28a79459fb" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbLoArrayInParticleReal</name></member>
      <member refid="classamrex_1_1Geometry_1ad215766309286d88d85b4d78f7280f4c" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ProbSize</name></member>
      <member refid="classamrex_1_1Geometry_1aa0385aea8391d0b59b6adfb910cffbf4" prot="private" virt="non-virtual"><scope>amrex::Geometry</scope><name>read_params</name></member>
      <member refid="classamrex_1_1Geometry_1a122947abb8d93a6984f26277576faad3" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>refine</name></member>
      <member refid="classamrex_1_1Geometry_1afacf607bf05ea6d4588954f09b391d37" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ResetDefaultCoord</name></member>
      <member refid="classamrex_1_1Geometry_1af726da4deb561adeecf94bc4eefbf89b" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ResetDefaultPeriodicity</name></member>
      <member refid="classamrex_1_1Geometry_1a4de5799760ae5f5831c719af01a33531" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>ResetDefaultProbDomain</name></member>
      <member refid="classamrex_1_1Geometry_1a7b910ad6d9743cd015e54449fcc2da78" prot="private" virt="non-virtual"><scope>amrex::Geometry</scope><name>roundoff_hi</name></member>
      <member refid="classamrex_1_1Geometry_1a00586ef08697068f26b1a8002a3fb8ac" prot="private" virt="non-virtual"><scope>amrex::Geometry</scope><name>roundoff_lo</name></member>
      <member refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa090e74483c754250a5e0ee448bdfe8b3" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>RZ</name></member>
      <member refid="classamrex_1_1CoordSys_1a2bf1bf10c89e3d151b0ad49b2c1722fa" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>SetCoord</name></member>
      <member refid="classamrex_1_1CoordSys_1ab487c819b8467fb587f459b98d100897" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>SetDLogA</name></member>
      <member refid="classamrex_1_1CoordSys_1a3036d0e98088cf5ce1478f81b6d02aea" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>SetFaceArea</name></member>
      <member refid="classamrex_1_1CoordSys_1aded987526da2665b805f491a3544ccd8" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>SetOffset</name></member>
      <member refid="classamrex_1_1Geometry_1a07025080452434734ae74c23e9f97224" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>setPeriodicity</name></member>
      <member refid="classamrex_1_1Geometry_1a9b691763a32026e16671e3213068f745" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Setup</name></member>
      <member refid="classamrex_1_1CoordSys_1a7d18b648e6020f7b18907a2a96c8b4fd" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>SetVolume</name></member>
      <member refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaaa0c55dfafca5806f988babd974f5b158" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>SPHERICAL</name></member>
      <member refid="classamrex_1_1CoordSys_1afb633344fd17c5565ce2fff188806ebaa2debcd8f37986ae0e3c488f583234ccc" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>undef</name></member>
      <member refid="classamrex_1_1CoordSys_1a74cecde9e2041a58b0d9b81b8ed00c22" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>UpperIndex</name></member>
      <member refid="classamrex_1_1Geometry_1a26f93383859ece5c7349633cc9f50948" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>Volume</name></member>
      <member refid="classamrex_1_1CoordSys_1aba35a53907662ab238f8ad457a9c242d" prot="public" virt="non-virtual" ambiguityscope="amrex::CoordSys::"><scope>amrex::Geometry</scope><name>Volume</name></member>
      <member refid="classamrex_1_1CoordSys_1a1f29329ea886494a3df45eaba9c0b2cb" prot="public" virt="non-virtual" ambiguityscope="amrex::CoordSys::"><scope>amrex::Geometry</scope><name>Volume</name></member>
      <member refid="classamrex_1_1Geometry_1a064dbb1fe7f6866145fd4f18a50275ff" prot="public" virt="non-virtual"><scope>amrex::Geometry</scope><name>~Geometry</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
