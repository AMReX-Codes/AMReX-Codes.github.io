<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1Array4" kind="struct" language="C++" prot="public">
    <compoundname>amrex::Array4</compoundname>
    <derivedcompoundref refid="structamrex_1_1PolymorphicArray4" prot="public" virt="non-virtual">amrex::PolymorphicArray4&lt; T &gt;</derivedcompoundref>
    <includes refid="AMReX__Array4_8H" local="no">AMReX_Array4.H</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1Array4_1abecbdc4b33af06f30325783ca02d9510" prot="public" static="no" mutable="no">
        <type>T *restrict</type>
        <definition>T* restrict amrex::Array4&lt; T &gt;::p</definition>
        <argsstring></argsstring>
        <name>p</name>
        <qualifiedname>amrex::Array4::p</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="62" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1ac5874d9946c7fab10b8baccf17852150" prot="public" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::Array4&lt; T &gt;::jstride</definition>
        <argsstring></argsstring>
        <name>jstride</name>
        <qualifiedname>amrex::Array4::jstride</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="63" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1a2f847bb967235ec601258fe8726ec83e" prot="public" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::Array4&lt; T &gt;::kstride</definition>
        <argsstring></argsstring>
        <name>kstride</name>
        <qualifiedname>amrex::Array4::kstride</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="64" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1af34de268f8d40135be4374144dd2b34a" prot="public" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::Array4&lt; T &gt;::nstride</definition>
        <argsstring></argsstring>
        <name>nstride</name>
        <qualifiedname>amrex::Array4::nstride</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="65" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1a866f2c12eb3e3d6a26399866f355e088" prot="public" static="no" mutable="no">
        <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>Dim3 amrex::Array4&lt; T &gt;::begin</definition>
        <argsstring></argsstring>
        <name>begin</name>
        <qualifiedname>amrex::Array4::begin</qualifiedname>
        <initializer>{1,1,1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="66" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1ae3e6ea18e90f4b382a90da961a93d8e9" prot="public" static="no" mutable="no">
        <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>Dim3 amrex::Array4&lt; T &gt;::end</definition>
        <argsstring></argsstring>
        <name>end</name>
        <qualifiedname>amrex::Array4::end</qualifiedname>
        <initializer>{0,0,0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="67" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1a58a49cd7aec26094f9a5dda9ee795cca" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::Array4&lt; T &gt;::ncomp</definition>
        <argsstring></argsstring>
        <name>ncomp</name>
        <qualifiedname>amrex::Array4::ncomp</qualifiedname>
        <initializer>=0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="68" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="68" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1Array4_1a5a625143d2022ec1c53a9330e4cdccf3" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr</type>
        <definition>__host__ __device__ constexpr amrex::Array4&lt; T &gt;::Array4</definition>
        <argsstring>() noexcept</argsstring>
        <name>Array4</name>
        <qualifiedname>amrex::Array4::Array4</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="71" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a9d5e7fb260eb6907c7feb338fd167370" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_const_v&lt; U &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ constexpr</type>
        <definition>__host__ __device__ constexpr amrex::Array4&lt; T &gt;::Array4</definition>
        <argsstring>(Array4&lt; std::remove_const_t&lt; T &gt; &gt; const &amp;rhs) noexcept</argsstring>
        <name>Array4</name>
        <qualifiedname>amrex::Array4::Array4</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; std::remove_const_t&lt; T &gt; &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="75" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="75" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a4d464dd349cd0bbcdbbfaf1329ddaeb9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ constexpr</type>
        <definition>__host__ __device__ constexpr amrex::Array4&lt; T &gt;::Array4</definition>
        <argsstring>(T *a_p, Dim3 const &amp;a_begin, Dim3 const &amp;a_end, int a_ncomp) noexcept</argsstring>
        <name>Array4</name>
        <qualifiedname>amrex::Array4::Array4</qualifiedname>
        <param>
          <type>T *</type>
          <declname>a_p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>a_begin</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>a_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a_ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="86" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="86" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a84edc315754294397f374dca9d115e73" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_same_v&lt; std::remove_const_t&lt; T &gt;, std::remove_const_t&lt; U &gt; &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ constexpr</type>
        <definition>__host__ __device__ constexpr amrex::Array4&lt; T &gt;::Array4</definition>
        <argsstring>(Array4&lt; U &gt; const &amp;rhs, int start_comp) noexcept</argsstring>
        <name>Array4</name>
        <qualifiedname>amrex::Array4::Array4</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="101" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="101" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1ad9c87c00215afb2c9829133af721cf3a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_same_v&lt; std::remove_const_t&lt; T &gt;, std::remove_const_t&lt; U &gt; &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ constexpr</type>
        <definition>__host__ __device__ constexpr amrex::Array4&lt; T &gt;::Array4</definition>
        <argsstring>(Array4&lt; U &gt; const &amp;rhs, int start_comp, int num_comps) noexcept</argsstring>
        <name>Array4</name>
        <qualifiedname>amrex::Array4::Array4</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start_comp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_comps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="116" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="116" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a8317a7e67a07cbb3948e7b7c9ce7a4bc" prot="public" static="no" const="yes" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__</type>
        <definition>__host__ __device__ amrex::Array4&lt; T &gt;::operator bool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator bool</name>
        <qualifiedname>amrex::Array4::operator bool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="127" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a546f12d67d36578b2fd14b44b26a3ed3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_void_v&lt; U &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ U &amp;</type>
        <definition>__host__ __device__ U &amp; amrex::Array4&lt; T &gt;::operator()</definition>
        <argsstring>(int i, int j, int k) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array4::operator()</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="131" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="131" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1abf3151143b34696618def00420d730fa" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_void_v&lt; U &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ U &amp;</type>
        <definition>__host__ __device__ U &amp; amrex::Array4&lt; T &gt;::operator()</definition>
        <argsstring>(int i, int j, int k, int n) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array4::operator()</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="140" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="140" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1aaaae2059e183c331a12d2c3c3731de99" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_void_v&lt; U &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T * amrex::Array4&lt; T &gt;::ptr</definition>
        <argsstring>(int i, int j, int k) const noexcept</argsstring>
        <name>ptr</name>
        <qualifiedname>amrex::Array4::ptr</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="149" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="149" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a3be688ccaac37d2e45d8126b52ab288c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_void_v&lt; U &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T * amrex::Array4&lt; T &gt;::ptr</definition>
        <argsstring>(int i, int j, int k, int n) const noexcept</argsstring>
        <name>ptr</name>
        <qualifiedname>amrex::Array4::ptr</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="158" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="158" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1afa5823b500e444c12e4df9f91206cbcd" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_void_v&lt; U &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ U &amp;</type>
        <definition>__host__ __device__ U &amp; amrex::Array4&lt; T &gt;::operator()</definition>
        <argsstring>(IntVect const &amp;iv) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array4::operator()</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> const &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="167" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="167" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a027d499c3286a400e6eba8893a302916" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_void_v&lt; U &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ U &amp;</type>
        <definition>__host__ __device__ U &amp; amrex::Array4&lt; T &gt;::operator()</definition>
        <argsstring>(IntVect const &amp;iv, int n) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array4::operator()</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> const &amp;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="179" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="179" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a50c13869de572ef6462171d976c60cc7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_void_v&lt; U &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T * amrex::Array4&lt; T &gt;::ptr</definition>
        <argsstring>(IntVect const &amp;iv) const noexcept</argsstring>
        <name>ptr</name>
        <qualifiedname>amrex::Array4::ptr</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> const &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="191" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="191" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a0fc1ece7864456f1db8f8a453929b13e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_void_v&lt; U &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T * amrex::Array4&lt; T &gt;::ptr</definition>
        <argsstring>(IntVect const &amp;iv, int n) const noexcept</argsstring>
        <name>ptr</name>
        <qualifiedname>amrex::Array4::ptr</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> const &amp;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="203" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="203" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a2c3d63a6d0542c512c626127831c2e9b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_void_v&lt; U &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ U &amp;</type>
        <definition>__host__ __device__ U &amp; amrex::Array4&lt; T &gt;::operator()</definition>
        <argsstring>(Dim3 const &amp;cell) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array4::operator()</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>cell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="215" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="215" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a019596109273e237727cad9ad677ad12" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_void_v&lt; U &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ U &amp;</type>
        <definition>__host__ __device__ U &amp; amrex::Array4&lt; T &gt;::operator()</definition>
        <argsstring>(Dim3 const &amp;cell, int n) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array4::operator()</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="221" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="221" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a57a5a17a2002a5694e257954f9590a77" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_void_v&lt; U &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T * amrex::Array4&lt; T &gt;::ptr</definition>
        <argsstring>(Dim3 const &amp;cell) const noexcept</argsstring>
        <name>ptr</name>
        <qualifiedname>amrex::Array4::ptr</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>cell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="227" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="227" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a502e30c7c72b061f1aed49f1fedede7a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_void_v&lt; U &gt;, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T * amrex::Array4&lt; T &gt;::ptr</definition>
        <argsstring>(Dim3 const &amp;cell, int n) const noexcept</argsstring>
        <name>ptr</name>
        <qualifiedname>amrex::Array4::ptr</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>cell</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="233" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="233" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a30636a80cebef5e779f22ed7728ed494" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T * amrex::Array4&lt; T &gt;::dataPtr</definition>
        <argsstring>() const noexcept</argsstring>
        <name>dataPtr</name>
        <qualifiedname>amrex::Array4::dataPtr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="238" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="238" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a186c06714414e11899155c2952675b01" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ std::size_t</type>
        <definition>__host__ __device__ std::size_t amrex::Array4&lt; T &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <qualifiedname>amrex::Array4::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="243" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="243" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a93d28feba79ff0f0fbd1fd6483e68392" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ int</type>
        <definition>__host__ __device__ int amrex::Array4&lt; T &gt;::nComp</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nComp</name>
        <qualifiedname>amrex::Array4::nComp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="248" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="248" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a3002e52059e15dd0184172446bb1c4a2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::Array4&lt; T &gt;::contains</definition>
        <argsstring>(int i, int j, int k) const noexcept</argsstring>
        <name>contains</name>
        <qualifiedname>amrex::Array4::contains</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="251" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="251" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a6bfa4a4176676e1a5c69c51c7fa46e01" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::Array4&lt; T &gt;::contains</definition>
        <argsstring>(IntVect const &amp;iv) const noexcept</argsstring>
        <name>contains</name>
        <qualifiedname>amrex::Array4::contains</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> const &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="256" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="256" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1afa456813f60b182958067dab3ff87b1a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::Array4&lt; T &gt;::contains</definition>
        <argsstring>(Dim3 const &amp;cell) const noexcept</argsstring>
        <name>contains</name>
        <qualifiedname>amrex::Array4::contains</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>cell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="263" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="263" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a362a923341ff8a845e4a1a2eef73b61c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="structamrex_1_1CellData" kindref="compound">CellData</ref>&lt; T &gt;</type>
        <definition>__host__ __device__ CellData&lt; T &gt; amrex::Array4&lt; T &gt;::cellData</definition>
        <argsstring>(int i, int j, int k) const noexcept</argsstring>
        <name>cellData</name>
        <qualifiedname>amrex::Array4::cellData</qualifiedname>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="298" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="298" bodyend="300"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::Array4&lt; T &gt;</label>
        <link refid="structamrex_1_1Array4"/>
      </node>
      <node id="2">
        <label>amrex::PolymorphicArray4&lt; T &gt;</label>
        <link refid="structamrex_1_1PolymorphicArray4"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>amrex::Array4&lt; T &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="2" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="60" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="61" bodyend="301"/>
    <listofallmembers>
      <member refid="structamrex_1_1Array4_1a5a625143d2022ec1c53a9330e4cdccf3" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>Array4</name></member>
      <member refid="structamrex_1_1Array4_1a9d5e7fb260eb6907c7feb338fd167370" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>Array4</name></member>
      <member refid="structamrex_1_1Array4_1a4d464dd349cd0bbcdbbfaf1329ddaeb9" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>Array4</name></member>
      <member refid="structamrex_1_1Array4_1a84edc315754294397f374dca9d115e73" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>Array4</name></member>
      <member refid="structamrex_1_1Array4_1ad9c87c00215afb2c9829133af721cf3a" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>Array4</name></member>
      <member refid="structamrex_1_1Array4_1a866f2c12eb3e3d6a26399866f355e088" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>begin</name></member>
      <member refid="structamrex_1_1Array4_1a362a923341ff8a845e4a1a2eef73b61c" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>cellData</name></member>
      <member refid="structamrex_1_1Array4_1a3002e52059e15dd0184172446bb1c4a2" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>contains</name></member>
      <member refid="structamrex_1_1Array4_1a6bfa4a4176676e1a5c69c51c7fa46e01" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>contains</name></member>
      <member refid="structamrex_1_1Array4_1afa456813f60b182958067dab3ff87b1a" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>contains</name></member>
      <member refid="structamrex_1_1Array4_1a30636a80cebef5e779f22ed7728ed494" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>dataPtr</name></member>
      <member refid="structamrex_1_1Array4_1ae3e6ea18e90f4b382a90da961a93d8e9" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>end</name></member>
      <member refid="structamrex_1_1Array4_1ac5874d9946c7fab10b8baccf17852150" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>jstride</name></member>
      <member refid="structamrex_1_1Array4_1a2f847bb967235ec601258fe8726ec83e" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>kstride</name></member>
      <member refid="structamrex_1_1Array4_1a58a49cd7aec26094f9a5dda9ee795cca" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>ncomp</name></member>
      <member refid="structamrex_1_1Array4_1a93d28feba79ff0f0fbd1fd6483e68392" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>nComp</name></member>
      <member refid="structamrex_1_1Array4_1af34de268f8d40135be4374144dd2b34a" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>nstride</name></member>
      <member refid="structamrex_1_1Array4_1a8317a7e67a07cbb3948e7b7c9ce7a4bc" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>operator bool</name></member>
      <member refid="structamrex_1_1Array4_1a546f12d67d36578b2fd14b44b26a3ed3" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array4_1abf3151143b34696618def00420d730fa" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array4_1afa5823b500e444c12e4df9f91206cbcd" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array4_1a027d499c3286a400e6eba8893a302916" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array4_1a2c3d63a6d0542c512c626127831c2e9b" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array4_1a019596109273e237727cad9ad677ad12" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array4_1abecbdc4b33af06f30325783ca02d9510" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>p</name></member>
      <member refid="structamrex_1_1Array4_1aaaae2059e183c331a12d2c3c3731de99" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>ptr</name></member>
      <member refid="structamrex_1_1Array4_1a3be688ccaac37d2e45d8126b52ab288c" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>ptr</name></member>
      <member refid="structamrex_1_1Array4_1a50c13869de572ef6462171d976c60cc7" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>ptr</name></member>
      <member refid="structamrex_1_1Array4_1a0fc1ece7864456f1db8f8a453929b13e" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>ptr</name></member>
      <member refid="structamrex_1_1Array4_1a57a5a17a2002a5694e257954f9590a77" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>ptr</name></member>
      <member refid="structamrex_1_1Array4_1a502e30c7c72b061f1aed49f1fedede7a" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>ptr</name></member>
      <member refid="structamrex_1_1Array4_1a186c06714414e11899155c2952675b01" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
