<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="structamrex_1_1Array4" kind="struct" language="C++" prot="public">
    <compoundname>amrex::Array4</compoundname>
    <includes refid="AMReX__Array4_8H" local="no">AMReX_Array4.H</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1Array4_1afc65a955f06b484f0ff95fa6ca5579e8" prot="public" static="no" mutable="no">
        <type>T *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
        <definition>T* AMREX_RESTRICT amrex::Array4&lt; T &gt;::p</definition>
        <argsstring></argsstring>
        <name>p</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="11" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1a158521972068c0c4346305005e44fdb4" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long amrex::Array4&lt; T &gt;::jstride</definition>
        <argsstring></argsstring>
        <name>jstride</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="12" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1a4adbc6fbedab06dc579764520c4ec9e6" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long amrex::Array4&lt; T &gt;::kstride</definition>
        <argsstring></argsstring>
        <name>kstride</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="13" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1a028dbc3fe4060224f23e6f5f95382215" prot="public" static="no" mutable="no">
        <type>long</type>
        <definition>long amrex::Array4&lt; T &gt;::nstride</definition>
        <argsstring></argsstring>
        <name>nstride</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="14" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1a866f2c12eb3e3d6a26399866f355e088" prot="public" static="no" mutable="no">
        <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>Dim3 amrex::Array4&lt; T &gt;::begin</definition>
        <argsstring></argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="15" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1ae3e6ea18e90f4b382a90da961a93d8e9" prot="public" static="no" mutable="no">
        <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>Dim3 amrex::Array4&lt; T &gt;::end</definition>
        <argsstring></argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="16" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1a58a49cd7aec26094f9a5dda9ee795cca" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::Array4&lt; T &gt;::ncomp</definition>
        <argsstring></argsstring>
        <name>ncomp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="17" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1Array4_1aaa08e35fd7ccb15fed1ccccef040043c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;std::is_const&lt;U&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::Array4&lt; T &gt;::Array4</definition>
        <argsstring>(Array4&lt; typename std::remove_const&lt; T &gt;::type &gt; const &amp;rhs) noexcept</argsstring>
        <name>Array4</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename std::remove_const&lt; T &gt;::type &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="21" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="21" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a27dea3839c1c9bd9fb2c7a818821691a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::Array4&lt; T &gt;::Array4</definition>
        <argsstring>(T *a_p, Dim3 const &amp;a_begin, Dim3 const &amp;a_end, int a_ncomp) noexcept</argsstring>
        <name>Array4</name>
        <param>
          <type>T *</type>
          <declname>a_p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>a_begin</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>a_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a_ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="32" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="32" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a15fcfafed6764ea4131dee006d4150a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if &lt;std::is_same&lt;typename std::remove_const&lt;T&gt;::type,                                typename std::remove_const&lt;U&gt;::type&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::Array4&lt; T &gt;::Array4</definition>
        <argsstring>(Array4&lt; U &gt; const &amp;rhs, int start_comp) noexcept</argsstring>
        <name>Array4</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="47" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="47" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1ae42098cbe246650094884bee0aa75c84" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;!std::is_void&lt;U&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> U &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE U&amp; amrex::Array4&lt; T &gt;::operator()</definition>
        <argsstring>(int i, int j, int k) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="55" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a3ced076d0c7749962476bc53b35209ef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;!std::is_void&lt;U&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> U &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE U&amp; amrex::Array4&lt; T &gt;::operator()</definition>
        <argsstring>(int i, int j, int k, int n) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="64" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="64" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a0951dd1a1e6d5b4f5a41c4cae335f6f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;!std::is_void&lt;U&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::Array4&lt; T &gt;::ptr</definition>
        <argsstring>(int i, int j, int k) const noexcept</argsstring>
        <name>ptr</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="73" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="73" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a4348b8093dd5bd53b0094f2db00bd643" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;!std::is_void&lt;U&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::Array4&lt; T &gt;::ptr</definition>
        <argsstring>(int i, int j, int k, int n) const noexcept</argsstring>
        <name>ptr</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="82" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="82" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a4d10b2bc8e84c54a971e9a72b5eb760c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;!std::is_void&lt;U&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> U &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE U&amp; amrex::Array4&lt; T &gt;::operator()</definition>
        <argsstring>(IntVect const &amp;iv) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="91" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="91" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a646dba54267ac369c499b16c68cd7b51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;!std::is_void&lt;U&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> U &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE U&amp; amrex::Array4&lt; T &gt;::operator()</definition>
        <argsstring>(IntVect const &amp;iv, int n) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="103" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="103" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a6ca368fd14b6a0393e41dd72c0d3b48f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;!std::is_void&lt;U&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::Array4&lt; T &gt;::ptr</definition>
        <argsstring>(IntVect const &amp;iv) const noexcept</argsstring>
        <name>ptr</name>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="115" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="115" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a2e9026521a8eb804b7822ee594358322" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>class</type>
            <defval>typename std::enable_if&lt;!std::is_void&lt;U&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::Array4&lt; T &gt;::ptr</definition>
        <argsstring>(IntVect const &amp;iv, int n) const noexcept</argsstring>
        <name>ptr</name>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="127" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="127" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a7c005d65913452a3aa2b0e2e4d6ffd22" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::Array4&lt; T &gt;::nComp</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nComp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="138" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="138" bodyend="138"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="579">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="578">
        <label>amrex::Array4&lt; T &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="579" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" line="10" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Array4.H" bodystart="9" bodyend="164"/>
    <listofallmembers>
      <member refid="structamrex_1_1Array4_1aaa08e35fd7ccb15fed1ccccef040043c" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>Array4</name></member>
      <member refid="structamrex_1_1Array4_1a27dea3839c1c9bd9fb2c7a818821691a" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>Array4</name></member>
      <member refid="structamrex_1_1Array4_1a15fcfafed6764ea4131dee006d4150a1" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>Array4</name></member>
      <member refid="structamrex_1_1Array4_1a866f2c12eb3e3d6a26399866f355e088" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>begin</name></member>
      <member refid="structamrex_1_1Array4_1ae3e6ea18e90f4b382a90da961a93d8e9" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>end</name></member>
      <member refid="structamrex_1_1Array4_1a158521972068c0c4346305005e44fdb4" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>jstride</name></member>
      <member refid="structamrex_1_1Array4_1a4adbc6fbedab06dc579764520c4ec9e6" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>kstride</name></member>
      <member refid="structamrex_1_1Array4_1a7c005d65913452a3aa2b0e2e4d6ffd22" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>nComp</name></member>
      <member refid="structamrex_1_1Array4_1a58a49cd7aec26094f9a5dda9ee795cca" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>ncomp</name></member>
      <member refid="structamrex_1_1Array4_1a028dbc3fe4060224f23e6f5f95382215" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>nstride</name></member>
      <member refid="structamrex_1_1Array4_1ae42098cbe246650094884bee0aa75c84" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array4_1a3ced076d0c7749962476bc53b35209ef" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array4_1a4d10b2bc8e84c54a971e9a72b5eb760c" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array4_1a646dba54267ac369c499b16c68cd7b51" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array4_1afc65a955f06b484f0ff95fa6ca5579e8" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>p</name></member>
      <member refid="structamrex_1_1Array4_1a0951dd1a1e6d5b4f5a41c4cae335f6f1" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>ptr</name></member>
      <member refid="structamrex_1_1Array4_1a4348b8093dd5bd53b0094f2db00bd643" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>ptr</name></member>
      <member refid="structamrex_1_1Array4_1a6ca368fd14b6a0393e41dd72c0d3b48f" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>ptr</name></member>
      <member refid="structamrex_1_1Array4_1a2e9026521a8eb804b7822ee594358322" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>ptr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
