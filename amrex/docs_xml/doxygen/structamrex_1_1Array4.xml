<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structamrex_1_1Array4" kind="struct" language="C++" prot="public">
    <compoundname>amrex::Array4</compoundname>
    <derivedcompoundref refid="structamrex_1_1PolymorphicArray4" prot="public" virt="non-virtual">amrex::PolymorphicArray4&lt; T &gt;</derivedcompoundref>
    <includes refid="AMReX__Array4_8H" local="no">AMReX_Array4.H</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1Array4_1afc65a955f06b484f0ff95fa6ca5579e8" prot="public" static="no" mutable="no">
        <type>T *<ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref></type>
        <definition>T* AMREX_RESTRICT amrex::Array4&lt; T &gt;::p</definition>
        <argsstring></argsstring>
        <name>p</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="14" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1ac5874d9946c7fab10b8baccf17852150" prot="public" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::Array4&lt; T &gt;::jstride</definition>
        <argsstring></argsstring>
        <name>jstride</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="15" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1a2f847bb967235ec601258fe8726ec83e" prot="public" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::Array4&lt; T &gt;::kstride</definition>
        <argsstring></argsstring>
        <name>kstride</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="16" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1af34de268f8d40135be4374144dd2b34a" prot="public" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::Array4&lt; T &gt;::nstride</definition>
        <argsstring></argsstring>
        <name>nstride</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="17" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1a866f2c12eb3e3d6a26399866f355e088" prot="public" static="no" mutable="no">
        <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>Dim3 amrex::Array4&lt; T &gt;::begin</definition>
        <argsstring></argsstring>
        <name>begin</name>
        <initializer>{1,1,1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="18" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1ae3e6ea18e90f4b382a90da961a93d8e9" prot="public" static="no" mutable="no">
        <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>Dim3 amrex::Array4&lt; T &gt;::end</definition>
        <argsstring></argsstring>
        <name>end</name>
        <initializer>{0,0,0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="19" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Array4_1a58a49cd7aec26094f9a5dda9ee795cca" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::Array4&lt; T &gt;::ncomp</definition>
        <argsstring></argsstring>
        <name>ncomp</name>
        <initializer>=0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="20" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1Array4_1aa9104074135ab3db54cf3224f7dcc4aa" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE amrex::Array4&lt; T &gt;::Array4</definition>
        <argsstring>() noexcept</argsstring>
        <name>Array4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="23" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a68895c23f542effc10e2a36ef80fcf37" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_const&lt; U &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE amrex::Array4&lt; T &gt;::Array4</definition>
        <argsstring>(Array4&lt; typename std::remove_const&lt; T &gt;::type &gt; const &amp;rhs) noexcept</argsstring>
        <name>Array4</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; typename std::remove_const&lt; T &gt;::type &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="27" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="27" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1aadaa817898bc6aaee36f54e294c94d6d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE amrex::Array4&lt; T &gt;::Array4</definition>
        <argsstring>(T *a_p, Dim3 const &amp;a_begin, Dim3 const &amp;a_end, int a_ncomp) noexcept</argsstring>
        <name>Array4</name>
        <param>
          <type>T *</type>
          <declname>a_p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>a_begin</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>a_end</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="38" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="38" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a8ce3c58d917a4c14dce99d84097756cd" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_same&lt; typename std::remove_const&lt; T &gt;::type, typename std::remove_const&lt; U &gt;::type &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE amrex::Array4&lt; T &gt;::Array4</definition>
        <argsstring>(Array4&lt; U &gt; const &amp;rhs, int start_comp) noexcept</argsstring>
        <name>Array4</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="53" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="53" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1addc632464912cc3a4db197cb3eb831b1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_same&lt; typename std::remove_const&lt; T &gt;::type, typename std::remove_const&lt; U &gt;::type &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE amrex::Array4&lt; T &gt;::Array4</definition>
        <argsstring>(Array4&lt; U &gt; const &amp;rhs, int start_comp, int num_comps) noexcept</argsstring>
        <name>Array4</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; U &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="68" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="68" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1ae71e941fe0aaf1a422e09ac5aa031a4c" prot="public" static="no" const="yes" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::Array4&lt; T &gt;::operator bool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="79" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1ae42098cbe246650094884bee0aa75c84" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt;!std::is_void&lt; U &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> U &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE U&amp; amrex::Array4&lt; T &gt;::operator()</definition>
        <argsstring>(int i, int j, int k) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="83" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="83" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a3ced076d0c7749962476bc53b35209ef" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt;!std::is_void&lt; U &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> U &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE U&amp; amrex::Array4&lt; T &gt;::operator()</definition>
        <argsstring>(int i, int j, int k, int n) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="92" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="92" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a0951dd1a1e6d5b4f5a41c4cae335f6f1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt;!std::is_void&lt; U &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::Array4&lt; T &gt;::ptr</definition>
        <argsstring>(int i, int j, int k) const noexcept</argsstring>
        <name>ptr</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="101" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="101" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a4348b8093dd5bd53b0094f2db00bd643" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt;!std::is_void&lt; U &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::Array4&lt; T &gt;::ptr</definition>
        <argsstring>(int i, int j, int k, int n) const noexcept</argsstring>
        <name>ptr</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="110" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="110" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a4d10b2bc8e84c54a971e9a72b5eb760c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt;!std::is_void&lt; U &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> U &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE U&amp; amrex::Array4&lt; T &gt;::operator()</definition>
        <argsstring>(IntVect const &amp;iv) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="119" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="119" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a646dba54267ac369c499b16c68cd7b51" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt;!std::is_void&lt; U &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> U &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE U&amp; amrex::Array4&lt; T &gt;::operator()</definition>
        <argsstring>(IntVect const &amp;iv, int n) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="131" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="131" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a6ca368fd14b6a0393e41dd72c0d3b48f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt;!std::is_void&lt; U &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::Array4&lt; T &gt;::ptr</definition>
        <argsstring>(IntVect const &amp;iv) const noexcept</argsstring>
        <name>ptr</name>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="143" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="143" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a2e9026521a8eb804b7822ee594358322" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
            <defval>T</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt;!std::is_void&lt; U &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::Array4&lt; T &gt;::ptr</definition>
        <argsstring>(IntVect const &amp;iv, int n) const noexcept</argsstring>
        <name>ptr</name>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>iv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="155" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="155" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a92996beac4532d45d7ac4be41b1ff439" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::Array4&lt; T &gt;::dataPtr</definition>
        <argsstring>() const noexcept</argsstring>
        <name>dataPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="166" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="166" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a80b7a0c3a54daeee59f711fc97011a83" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> std::size_t</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE std::size_t amrex::Array4&lt; T &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="171" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1a7c005d65913452a3aa2b0e2e4d6ffd22" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::Array4&lt; T &gt;::nComp</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nComp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="176" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="176" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array4_1afffb83a576c2e90e22fa03b27057ac49" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::Array4&lt; T &gt;::contains</definition>
        <argsstring>(int i, int j, int k) const noexcept</argsstring>
        <name>contains</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="179" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="179" bodyend="181"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::PolymorphicArray4&lt; T &gt;</label>
        <link refid="structamrex_1_1PolymorphicArray4"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::Array4&lt; T &gt;</label>
        <link refid="structamrex_1_1Array4"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="1">
        <label>amrex::Array4&lt; T &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="2" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" line="13" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array4.H" bodystart="12" bodyend="207"/>
    <listofallmembers>
      <member refid="structamrex_1_1Array4_1aa9104074135ab3db54cf3224f7dcc4aa" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>Array4</name></member>
      <member refid="structamrex_1_1Array4_1a68895c23f542effc10e2a36ef80fcf37" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>Array4</name></member>
      <member refid="structamrex_1_1Array4_1aadaa817898bc6aaee36f54e294c94d6d" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>Array4</name></member>
      <member refid="structamrex_1_1Array4_1a8ce3c58d917a4c14dce99d84097756cd" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>Array4</name></member>
      <member refid="structamrex_1_1Array4_1addc632464912cc3a4db197cb3eb831b1" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>Array4</name></member>
      <member refid="structamrex_1_1Array4_1a866f2c12eb3e3d6a26399866f355e088" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>begin</name></member>
      <member refid="structamrex_1_1Array4_1afffb83a576c2e90e22fa03b27057ac49" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>contains</name></member>
      <member refid="structamrex_1_1Array4_1a92996beac4532d45d7ac4be41b1ff439" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>dataPtr</name></member>
      <member refid="structamrex_1_1Array4_1ae3e6ea18e90f4b382a90da961a93d8e9" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>end</name></member>
      <member refid="structamrex_1_1Array4_1ac5874d9946c7fab10b8baccf17852150" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>jstride</name></member>
      <member refid="structamrex_1_1Array4_1a2f847bb967235ec601258fe8726ec83e" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>kstride</name></member>
      <member refid="structamrex_1_1Array4_1a58a49cd7aec26094f9a5dda9ee795cca" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>ncomp</name></member>
      <member refid="structamrex_1_1Array4_1a7c005d65913452a3aa2b0e2e4d6ffd22" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>nComp</name></member>
      <member refid="structamrex_1_1Array4_1af34de268f8d40135be4374144dd2b34a" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>nstride</name></member>
      <member refid="structamrex_1_1Array4_1ae71e941fe0aaf1a422e09ac5aa031a4c" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>operator bool</name></member>
      <member refid="structamrex_1_1Array4_1ae42098cbe246650094884bee0aa75c84" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array4_1a3ced076d0c7749962476bc53b35209ef" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array4_1a4d10b2bc8e84c54a971e9a72b5eb760c" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array4_1a646dba54267ac369c499b16c68cd7b51" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array4_1afc65a955f06b484f0ff95fa6ca5579e8" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>p</name></member>
      <member refid="structamrex_1_1Array4_1a0951dd1a1e6d5b4f5a41c4cae335f6f1" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>ptr</name></member>
      <member refid="structamrex_1_1Array4_1a4348b8093dd5bd53b0094f2db00bd643" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>ptr</name></member>
      <member refid="structamrex_1_1Array4_1a6ca368fd14b6a0393e41dd72c0d3b48f" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>ptr</name></member>
      <member refid="structamrex_1_1Array4_1a2e9026521a8eb804b7822ee594358322" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>ptr</name></member>
      <member refid="structamrex_1_1Array4_1a80b7a0c3a54daeee59f711fc97011a83" prot="public" virt="non-virtual"><scope>amrex::Array4</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
