<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1BArena" kind="class" language="C++" prot="public">
    <compoundname>amrex::BArena</compoundname>
    <basecompoundref refid="classamrex_1_1Arena" prot="public" virt="non-virtual">amrex::Arena</basecompoundref>
    <includes refid="AMReX__BArena_8H" local="no">AMReX_BArena.H</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1BArena_1ac5b992935b798555e12f3ed280420c5b" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void *</type>
        <definition>void * amrex::BArena::alloc</definition>
        <argsstring>(std::size_t sz) final</argsstring>
        <name>alloc</name>
        <qualifiedname>amrex::BArena::alloc</qualifiedname>
        <reimplements refid="classamrex_1_1Arena_1a0fa2cdc35eb9da4a03fedf53f6484c86">alloc</reimplements>
        <param>
          <type>std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Allocates a dynamic memory arena of size sz. Returns a pointer to this memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BArena.H" line="23" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BArena.cpp" bodystart="4" bodyend="9"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BArena_1a423a57e61bf30c0dd08c5b03042306ff" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::BArena::free</definition>
        <argsstring>(void *pt) final</argsstring>
        <name>free</name>
        <qualifiedname>amrex::BArena::free</qualifiedname>
        <reimplements refid="classamrex_1_1Arena_1a0c7e0730574c98febb6ddca2712cb515">free</reimplements>
        <param>
          <type>void *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Deletes the arena pointed to by pt. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BArena.H" line="27" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BArena.cpp" bodystart="12" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BArena_1ad0656effeaa29bac32c44198b8922f0f" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::BArena::isDeviceAccessible</definition>
        <argsstring>() const final</argsstring>
        <name>isDeviceAccessible</name>
        <qualifiedname>amrex::BArena::isDeviceAccessible</qualifiedname>
        <reimplements refid="classamrex_1_1Arena_1afa7c9e223346f671eb055b3ce8580e56">isDeviceAccessible</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BArena.H" line="29" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BArena.cpp" bodystart="19" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BArena_1a84fc546372485495fe7eca80c08764e6" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::BArena::isHostAccessible</definition>
        <argsstring>() const final</argsstring>
        <name>isHostAccessible</name>
        <qualifiedname>amrex::BArena::isHostAccessible</qualifiedname>
        <reimplements refid="classamrex_1_1Arena_1a40d897685d407918d2d6143b5301a525">isHostAccessible</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BArena.H" line="30" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BArena.cpp" bodystart="25" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BArena_1a56c8b6538282b4a56466b9053065b3e0" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::BArena::isManaged</definition>
        <argsstring>() const final</argsstring>
        <name>isManaged</name>
        <qualifiedname>amrex::BArena::isManaged</qualifiedname>
        <reimplements refid="classamrex_1_1Arena_1a7119489f4464f902d907f6dfe9716909">isManaged</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BArena.H" line="32" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BArena.cpp" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BArena_1abf63d084f8e220d01d53b543f7f93bc6" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::BArena::isDevice</definition>
        <argsstring>() const final</argsstring>
        <name>isDevice</name>
        <qualifiedname>amrex::BArena::isDevice</qualifiedname>
        <reimplements refid="classamrex_1_1Arena_1aa45555e396ee74158b0c6f3331ce5536">isDevice</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BArena.H" line="33" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BArena.cpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BArena_1a4089e5008457c5f04ee4acfc430b3f37" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::BArena::isPinned</definition>
        <argsstring>() const final</argsstring>
        <name>isPinned</name>
        <qualifiedname>amrex::BArena::isPinned</qualifiedname>
        <reimplements refid="classamrex_1_1Arena_1a336e271c5a07296e4c2866d194111784">isPinned</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BArena.H" line="34" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BArena.cpp" bodystart="43" bodyend="46"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A Concrete Class for Dynamic Memory Management This is the simplest dynamic memory management class derived from <ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref>. Makes calls to std::malloc and std::free. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
      </node>
      <node id="1">
        <label>amrex::BArena</label>
        <link refid="classamrex_1_1BArena"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="3" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_profiler</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>amrex::Arena::ArenaProfiler</label>
        <link refid="structamrex_1_1Arena_1_1ArenaProfiler"/>
        <childnode refid="5" relation="usage">
          <edgelabel>m_arena_profiler_mutex</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_profiling_stats</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_currently_allocated</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="1">
        <label>amrex::BArena</label>
        <link refid="classamrex_1_1BArena"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>amrex::MemStat</label>
        <link refid="structamrex_1_1MemStat"/>
      </node>
      <node id="6">
        <label>std::map&lt; std::string, amrex::MemStat &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="5">
        <label>std::mutex</label>
      </node>
      <node id="7">
        <label>std::string</label>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>std::unordered_map&lt; void *, std::pair&lt; amrex::MemStat *, std::size_t &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_BArena.H" line="14" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_BArena.H" bodystart="17" bodyend="35"/>
    <listofallmembers>
      <member refid="classamrex_1_1Arena_1a253c417e0bd2863509c75d6250468a4e" prot="public" virt="non-virtual"><scope>amrex::BArena</scope><name>align</name></member>
      <member refid="classamrex_1_1Arena_1a4b2f3b31e81e52426aef615cb2aaa7b7" prot="public" virt="non-virtual"><scope>amrex::BArena</scope><name>align_size</name></member>
      <member refid="classamrex_1_1BArena_1ac5b992935b798555e12f3ed280420c5b" prot="public" virt="virtual"><scope>amrex::BArena</scope><name>alloc</name></member>
      <member refid="classamrex_1_1Arena_1a872ba01b7389ba36beb402641df3f2b9" prot="public" virt="virtual"><scope>amrex::BArena</scope><name>alloc_in_place</name></member>
      <member refid="classamrex_1_1Arena_1afc721e195430f79b2d1b287c490ef0fb" prot="protected" virt="non-virtual"><scope>amrex::BArena</scope><name>allocate_system</name></member>
      <member refid="classamrex_1_1Arena_1a2e2407d56d1710a0029928c776b27682" prot="public" virt="non-virtual"><scope>amrex::BArena</scope><name>Arena</name></member>
      <member refid="classamrex_1_1Arena_1a57de8f5ef86cceadc9f1c00bc7ea7790" prot="public" virt="non-virtual"><scope>amrex::BArena</scope><name>Arena</name></member>
      <member refid="classamrex_1_1Arena_1a3e2c87e60ea734fe6be6e49d124d5a76" prot="public" virt="non-virtual"><scope>amrex::BArena</scope><name>Arena</name></member>
      <member refid="classamrex_1_1Arena_1aeb2158ba443c9b23ba0d12bcf38a66e1" prot="protected" virt="non-virtual"><scope>amrex::BArena</scope><name>arena_info</name></member>
      <member refid="classamrex_1_1Arena_1a6cf1a7926c2ee38d82fab5fadef8e4d0" prot="public" virt="non-virtual"><scope>amrex::BArena</scope><name>arenaInfo</name></member>
      <member refid="classamrex_1_1Arena_1ac07ba8cda253cddee3cab1168ac65694" prot="protected" virt="non-virtual"><scope>amrex::BArena</scope><name>deallocate_system</name></member>
      <member refid="classamrex_1_1Arena_1a76f2f99b3aa712fe5da7b00610c07385" prot="public" virt="non-virtual"><scope>amrex::BArena</scope><name>deregisterFromProfiling</name></member>
      <member refid="classamrex_1_1Arena_1a06dd6197d2081d7dd4c1bed308edd387" prot="public" virt="non-virtual"><scope>amrex::BArena</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1BArena_1a423a57e61bf30c0dd08c5b03042306ff" prot="public" virt="virtual"><scope>amrex::BArena</scope><name>free</name></member>
      <member refid="classamrex_1_1Arena_1ae58dbb9ab6bb4e8d980b384b0d8804e5" prot="public" virt="virtual"><scope>amrex::BArena</scope><name>freeUnused</name></member>
      <member refid="classamrex_1_1Arena_1a881f97d5676c4784f52d6f4c702da696" prot="protected" virt="virtual"><scope>amrex::BArena</scope><name>freeUnused_protected</name></member>
      <member refid="classamrex_1_1Arena_1abd6b026129f35157aa2b3945a37bdbd3" prot="public" virt="virtual"><scope>amrex::BArena</scope><name>hasFreeDeviceMemory</name></member>
      <member refid="classamrex_1_1Arena_1a9f40990a545f4d280e905117fc6a0786" prot="public" virt="non-virtual"><scope>amrex::BArena</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1BArena_1abf63d084f8e220d01d53b543f7f93bc6" prot="public" virt="virtual"><scope>amrex::BArena</scope><name>isDevice</name></member>
      <member refid="classamrex_1_1BArena_1ad0656effeaa29bac32c44198b8922f0f" prot="public" virt="virtual"><scope>amrex::BArena</scope><name>isDeviceAccessible</name></member>
      <member refid="classamrex_1_1BArena_1a84fc546372485495fe7eca80c08764e6" prot="public" virt="virtual"><scope>amrex::BArena</scope><name>isHostAccessible</name></member>
      <member refid="classamrex_1_1BArena_1a56c8b6538282b4a56466b9053065b3e0" prot="public" virt="virtual"><scope>amrex::BArena</scope><name>isManaged</name></member>
      <member refid="classamrex_1_1BArena_1a4089e5008457c5f04ee4acfc430b3f37" prot="public" virt="virtual"><scope>amrex::BArena</scope><name>isPinned</name></member>
      <member refid="classamrex_1_1Arena_1a45cb8a8f57250c6858412296275c8dbb" prot="public" virt="virtual"><scope>amrex::BArena</scope><name>isStreamOrderedArena</name></member>
      <member refid="classamrex_1_1Arena_1ad136b691382e7a7d8fba158837416b98" prot="protected" virt="non-virtual"><scope>amrex::BArena</scope><name>m_profiler</name></member>
      <member refid="classamrex_1_1Arena_1a79c958fa2bc911b683c1bb312b54ef13" prot="public" virt="non-virtual"><scope>amrex::BArena</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Arena_1a23c2b2614dcafe7437bdba8ac8cbe163" prot="public" virt="non-virtual"><scope>amrex::BArena</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Arena_1a506a68384da30629323d0839f13812c2" prot="public" virt="non-virtual"><scope>amrex::BArena</scope><name>PrintUsage</name></member>
      <member refid="classamrex_1_1Arena_1aa1cfbcfa1c41ac7e45bf469e93db7402" prot="public" virt="non-virtual"><scope>amrex::BArena</scope><name>PrintUsageToFiles</name></member>
      <member refid="classamrex_1_1Arena_1a99982885760cd861e6e860dea40ea64f" prot="public" virt="non-virtual"><scope>amrex::BArena</scope><name>registerForProfiling</name></member>
      <member refid="classamrex_1_1Arena_1aceacbbe5395a8671cc571063d51ee7e2" prot="public" virt="virtual"><scope>amrex::BArena</scope><name>shrink_in_place</name></member>
      <member refid="classamrex_1_1Arena_1a327e7541e6291ce735c03392b21931b6" prot="public" virt="virtual"><scope>amrex::BArena</scope><name>~Arena</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
