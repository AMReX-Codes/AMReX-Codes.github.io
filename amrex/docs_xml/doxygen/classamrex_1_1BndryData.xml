<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1BndryData" kind="class" language="C++" prot="public">
    <compoundname>amrex::BndryData</compoundname>
    <basecompoundref refid="classamrex_1_1BndryRegister" prot="public" virt="non-virtual">amrex::BndryRegister</basecompoundref>
    <derivedcompoundref refid="classamrex_1_1InterpBndryData" prot="public" virt="non-virtual">amrex::InterpBndryData</derivedcompoundref>
    <includes refid="AMReX__BndryData_8H" local="no">AMReX_BndryData.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1BndryData_1a4d31afbfcfb31a6229877bb9ad880fb9" prot="public" static="no">
        <name>MaskVal</name>
        <enumvalue id="classamrex_1_1BndryData_1a4d31afbfcfb31a6229877bb9ad880fb9a843d5274aec429fe8bea1719d6162727" prot="public">
          <name>covered</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1BndryData_1a4d31afbfcfb31a6229877bb9ad880fb9a54f598ca1ea830b90bd86719dd843014" prot="public">
          <name>not_covered</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1BndryData_1a4d31afbfcfb31a6229877bb9ad880fb9aa3c78d810a253d1eace3c04595537ff1" prot="public">
          <name>outside_domain</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1BndryData_1a4d31afbfcfb31a6229877bb9ad880fb9a22450c0e6f732b3f87827b12e1b20aa5" prot="public">
          <name>NumMaskVals</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>mask values enumeration </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="54" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1BndryData_1ab4ed85c429f2c9ba26ce7e046590aee0" prot="public" static="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, 2 *AMREX_SPACEDIM &gt;</type>
        <definition>using amrex::BndryData::RealTuple =  Array&lt;Real,2*AMREX_SPACEDIM&gt;</definition>
        <argsstring></argsstring>
        <name>RealTuple</name>
        <briefdescription>
<para>Some useful typedefs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="92" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" bodystart="92" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1BndryData_1a33b33d468118587f694c916018b3f3fb" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1LayoutData" kindref="compound">LayoutData</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref> &gt; &gt; &gt;</type>
        <definition>LayoutData&lt;Vector&lt; Vector&lt;BoundCond&gt; &gt; &gt; amrex::BndryData::bcond</definition>
        <argsstring></argsstring>
        <name>bcond</name>
        <briefdescription>
<para>Map of boundary condition type specifiers. The outer Array dimension is over <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="155" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BndryData_1a30e8975eaca9018ee72a0f5e9600e590" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1LayoutData" kindref="compound">LayoutData</ref>&lt; <ref refid="classamrex_1_1BndryData_1ab4ed85c429f2c9ba26ce7e046590aee0" kindref="member">RealTuple</ref> &gt;</type>
        <definition>LayoutData&lt;RealTuple&gt; amrex::BndryData::bcloc</definition>
        <argsstring></argsstring>
        <name>bcloc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="157" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BndryData_1af590a7b776cc9ccee49e607a3e84671d" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiMask" kindref="compound">MultiMask</ref> &gt;</type>
        <definition>Vector&lt;MultiMask&gt; amrex::BndryData::masks</definition>
        <argsstring></argsstring>
        <name>masks</name>
        <briefdescription>
<para>Boundary condition mask. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="159" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BndryData_1a2aee61504e5cdef7ac8af1986bff5c6c" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::BndryData::geom</definition>
        <argsstring></argsstring>
        <name>geom</name>
        <briefdescription>
<para>Domain used for mask definitions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="161" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BndryData_1a407bf2d353db9c58b6205a43b2d500bd" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::BndryData::m_ncomp</definition>
        <argsstring></argsstring>
        <name>m_ncomp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="162" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1BndryData_1a93c9313da3c49504432d4eefb95fab98" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::BndryData::m_defined</definition>
        <argsstring></argsstring>
        <name>m_defined</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="163" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" bodystart="163" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1BndryData_1ad69d8769b561cfe76e6dd1cac73d7517" prot="private" static="yes" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::BndryData::NTangHalfWidth</definition>
        <argsstring></argsstring>
        <name>NTangHalfWidth</name>
        <initializer>= 5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="166" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" bodystart="166" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1BndryData_1a56865f9312ebb3ec688b1d6dcb1a579f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BndryData::BndryData</definition>
        <argsstring>() noexcept</argsstring>
        <name>BndryData</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="57" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.cpp" bodystart="15" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1a1d889161b75f5cb49d91b6da56c3596b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BndryData::BndryData</definition>
        <argsstring>(const BoxArray &amp;grids, const DistributionMapping &amp;dmap, int ncomp, const Geometry &amp;geom)</argsstring>
        <name>BndryData</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>constructor specifying number of components and box of physical domain (cell-centered) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="63" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.cpp" bodystart="19" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1ad6ebc5a788a82c41a8b1bffc8e589440" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::BndryData::~BndryData</definition>
        <argsstring>()</argsstring>
        <name>~BndryData</name>
        <briefdescription>
<para>destructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="69" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.cpp" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1af682ca27d245a4002c2e8f47b7c96ec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BndryData::BndryData</definition>
        <argsstring>(const BndryData &amp;src)</argsstring>
        <name>BndryData</name>
        <param>
          <type>const <ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>copy constructor </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="72" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.cpp" bodystart="108" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1a7a048ebe06e3f4bd0eda04267d099526" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> &amp;</type>
        <definition>BndryData &amp; amrex::BndryData::operator=</definition>
        <argsstring>(const BndryData &amp;src)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>copy assignment operator </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="75" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.cpp" bodystart="117" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1a0ce8e12e17b925619b9792d6469e1904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::BndryData::BndryData</definition>
        <argsstring>(BndryData &amp;&amp;rhs)=delete</argsstring>
        <name>BndryData</name>
        <param>
          <type><ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1a91c68a0f4629147dee1b0d6a9105ce91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> &amp;</type>
        <definition>BndryData&amp; amrex::BndryData::operator=</definition>
        <argsstring>(BndryData &amp;&amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1a3457a4bb428e2f1478f95e76fd15a9df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BndryData::define</definition>
        <argsstring>(const BoxArray &amp;grids, const DistributionMapping &amp;dmap, int ncomp, const Geometry &amp;geom)</argsstring>
        <name>define</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
<para>alocate bndry fabs along given face </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="81" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.cpp" bodystart="132" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1aa9e18873f726b8e44ff7a7569a79a8fe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiMask" kindref="compound">MultiMask</ref> &amp;</type>
        <definition>const MultiMask&amp; amrex::BndryData::bndryMasks</definition>
        <argsstring>(Orientation face) const noexcept</argsstring>
        <name>bndryMasks</name>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="86" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1a3ce6d337a83e14d713a998d6b09a27e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
        <definition>const FabSet&amp; amrex::BndryData::bndryValues</definition>
        <argsstring>(Orientation face) const noexcept</argsstring>
        <name>bndryValues</name>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <briefdescription>
<para>Return <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> on given face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="89" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1a8c53fbb7063c71b365d41ef352f4ffb5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BndryData_1ab4ed85c429f2c9ba26ce7e046590aee0" kindref="member">RealTuple</ref> &amp;</type>
        <definition>const BndryData::RealTuple &amp; amrex::BndryData::bndryLocs</definition>
        <argsstring>(int igrid) const noexcept</argsstring>
        <name>bndryLocs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>igrid</declname>
        </param>
        <briefdescription>
<para>Return boundary location on given face for grids we own. It&apos;s an error if we don&apos;t own that grid. RealTuple is indexed with <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="99" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.cpp" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1a0f33ed526270778cb45aea3f8532315e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BndryData_1ab4ed85c429f2c9ba26ce7e046590aee0" kindref="member">RealTuple</ref> &amp;</type>
        <definition>const BndryData::RealTuple &amp; amrex::BndryData::bndryLocs</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>bndryLocs</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="100" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.cpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1ab22274b8017f01edf0d5e432240a3308" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref> &gt; &gt; &amp;</type>
        <definition>const Vector&lt; Vector&lt; BoundCond &gt; &gt; &amp; amrex::BndryData::bndryConds</definition>
        <argsstring>(int igrid) const noexcept</argsstring>
        <name>bndryConds</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>igrid</declname>
        </param>
        <briefdescription>
<para>Return boundary type specifier on given face for grids we own. It&apos;s an error if we don&apos;t own that grid. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="106" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.cpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1a91ee362b8e44820cf8d6ffa2c78cad90" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref> &gt; &gt; &amp;</type>
        <definition>const Vector&lt; Vector&lt; BoundCond &gt; &gt; &amp; amrex::BndryData::bndryConds</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>bndryConds</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="107" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.cpp" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1a97018aa05709deb4cdbbcdc4a2c9f410" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::BndryData::nComp</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nComp</name>
        <briefdescription>
<para>return number of components for which this object is intended </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="110" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1a23e91cef1e7680f2ee0f8c741768e790" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>const Box&amp; amrex::BndryData::getDomain</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getDomain</name>
        <briefdescription>
<para>return domain used to define masks </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="113" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1a1c808b83c725af10075314a95391e06f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::BndryData::getGeom</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getGeom</name>
        <briefdescription>
<para>return geometry used to define masks </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="116" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1a1fe4b4c1ca31db758ed7599cc0993f13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BndryData::setValue</definition>
        <argsstring>(Orientation face, int n, Real val) noexcept</argsstring>
        <name>setValue</name>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>set values of boundary Fab for given orientation on nth grid </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="119" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.cpp" bodystart="194" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1a1817e397bfd5fde2d13cf387fdea1634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BndryData::setBoundCond</definition>
        <argsstring>(Orientation face, int n, int comp, const BoundCond &amp;bcn) noexcept</argsstring>
        <name>setBoundCond</name>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref> &amp;</type>
          <declname>bcn</declname>
        </param>
        <briefdescription>
<para>set boundary type specifier for given orientation on nth grid </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="122" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.cpp" bodystart="32" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1a2d630b4b3737a4d5f8a896954919b210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BndryData::setBoundCond</definition>
        <argsstring>(Orientation face, const MFIter &amp;mfi, int comp, const BoundCond &amp;bcn) noexcept</argsstring>
        <name>setBoundCond</name>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref> &amp;</type>
          <declname>bcn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="127" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.cpp" bodystart="41" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1a915cd3e0f2421e3ffe2286c62305bedf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BndryData::setBoundLoc</definition>
        <argsstring>(Orientation face, int n, Real val) noexcept</argsstring>
        <name>setBoundLoc</name>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>set boundary location for given orientation on nth grid </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="133" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.cpp" bodystart="50" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1a09c6217601d6804d709c3860a081e3f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BndryData::setBoundLoc</definition>
        <argsstring>(Orientation face, const MFIter &amp;mfi, Real val) noexcept</argsstring>
        <name>setBoundLoc</name>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="137" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.cpp" bodystart="58" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1a46b99b60d63dc321382543e85c6fac52" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
        <definition>const FabSet&amp; amrex::BndryData::operator[]</definition>
        <argsstring>(Orientation face) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <briefdescription>
<para>implement public access to const <ref refid="classamrex_1_1BndryRegister_1ab8aa5237e5f88e11d7f0222c0732f0c8" kindref="member">BndryRegister::operator[]</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="142" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1BndryData_1abde34b0ee2d6202d1cc507137de7110c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabSet" kindref="compound">FabSet</ref> &amp;</type>
        <definition>FabSet&amp; amrex::BndryData::operator[]</definition>
        <argsstring>(Orientation face) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
          <declname>face</declname>
        </param>
        <briefdescription>
<para>implement public access to <ref refid="classamrex_1_1BndryRegister_1ab8aa5237e5f88e11d7f0222c0732f0c8" kindref="member">BndryRegister::operator[]</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="145" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" bodystart="145" bodyend="145"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1BndryData_1a86d75e0d19f16438072188201b4e6dea" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::BndryData::init</definition>
        <argsstring>(const BndryData &amp;src)</argsstring>
        <name>init</name>
        <param>
          <type>const <ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Helper function for copy constructor and assigment operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="149" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.cpp" bodystart="90" bodyend="106"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> contains a <ref refid="classamrex_1_1BndryRegister" kindref="compound">BndryRegister</ref> about each side of each grid in a Boxarray. These data are used to store information along the outer layer of each grid (at the same level of coarseness), such as the value of boundary conditions there. Also, for each boundary, this class maintains a <ref refid="classamrex_1_1BoundCond" kindref="compound">BoundCond</ref> identifier and a location. This &quot;location&quot; often specifies where, in physical space, a value, which is stored in the boundary registers, will be applied by a solver (although interpretation of this information is application-specific). </para>    </briefdescription>
    <detaileddescription>
<para>In addition to boundary condition values, types and locations, and BndryDate object maintains a mask for each boundary value. Given a <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> describing the physical &quot;domain&quot; of application, a <ref refid="classamrex_1_1BndryData" kindref="compound">BndryData</ref> object fills the mask arrays with a mask value to indicate if the node is outside the domain (outside_domain), or, if not, whether it lays within the valid region of an adjacent grid (covered), or not (not_covered). This mask data is created upon non-default class instantiation. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="583">
        <label>amrex::BndryData</label>
        <link refid="classamrex_1_1BndryData"/>
        <childnode refid="584" relation="public-inheritance">
        </childnode>
      </node>
      <node id="585">
        <label>amrex::InterpBndryData</label>
        <link refid="classamrex_1_1InterpBndryData"/>
        <childnode refid="583" relation="public-inheritance">
        </childnode>
      </node>
      <node id="587">
        <label>amrex::MLMGBndry</label>
        <link refid="classamrex_1_1MLMGBndry"/>
        <childnode refid="585" relation="public-inheritance">
        </childnode>
      </node>
      <node id="584">
        <label>amrex::BndryRegister</label>
        <link refid="classamrex_1_1BndryRegister"/>
      </node>
      <node id="586">
        <label>amrex::MacBndry</label>
        <link refid="classamrex_1_1MacBndry"/>
        <childnode refid="585" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="615">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="594">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="595" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="598">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="610">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="597">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="597" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="630">
        <label>amrex::LayoutData&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="593" relation="public-inheritance">
        </childnode>
        <childnode refid="631" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="621">
        <label>Real</label>
      </node>
      <node id="616">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="617" relation="public-inheritance">
        </childnode>
      </node>
      <node id="608">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="609" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="588">
        <label>amrex::BndryData</label>
        <link refid="classamrex_1_1BndryData"/>
        <childnode refid="589" relation="public-inheritance">
        </childnode>
        <childnode refid="619" relation="usage">
          <edgelabel>geom</edgelabel>
        </childnode>
        <childnode refid="625" relation="usage">
          <edgelabel>bcloc</edgelabel>
        </childnode>
        <childnode refid="628" relation="usage">
          <edgelabel>masks</edgelabel>
        </childnode>
        <childnode refid="630" relation="usage">
          <edgelabel>bcond</edgelabel>
        </childnode>
      </node>
      <node id="607">
        <label>std::vector&lt; char *, std::allocator&lt; char *&gt; &gt;</label>
      </node>
      <node id="612">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="609">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="610" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="599">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="600" relation="public-inheritance">
        </childnode>
      </node>
      <node id="595">
        <label>string</label>
      </node>
      <node id="618">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="597" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="629">
        <label>std::vector&lt; amrex::MultiMask, std::allocator&lt; amrex::MultiMask &gt; &gt;</label>
      </node>
      <node id="632">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="613">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="606">
        <label>amrex::Vector&lt; char *&gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="607" relation="public-inheritance">
        </childnode>
      </node>
      <node id="628">
        <label>amrex::Vector&lt; amrex::MultiMask &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="629" relation="public-inheritance">
        </childnode>
      </node>
      <node id="617">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="600">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="622">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="621" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
      <node id="631">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="632" relation="public-inheritance">
        </childnode>
      </node>
      <node id="623">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="597" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="624" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="602">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="603" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="614">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="615" relation="public-inheritance">
        </childnode>
      </node>
      <node id="620">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
        <childnode refid="621" relation="usage">
          <edgelabel>inv_dx</edgelabel>
          <edgelabel>offset</edgelabel>
          <edgelabel>dx</edgelabel>
        </childnode>
      </node>
      <node id="624">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="603">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="599" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="590">
        <label>amrex::FabSet</label>
        <link refid="classamrex_1_1FabSet"/>
        <childnode refid="591" relation="usage">
          <edgelabel>m_mf</edgelabel>
        </childnode>
      </node>
      <node id="611">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="612" relation="public-inheritance">
        </childnode>
      </node>
      <node id="596">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="601">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="602" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="591">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="592" relation="public-inheritance">
        </childnode>
      </node>
      <node id="589">
        <label>amrex::BndryRegister</label>
        <link refid="classamrex_1_1BndryRegister"/>
        <childnode refid="590" relation="usage">
          <edgelabel>bndry</edgelabel>
        </childnode>
      </node>
      <node id="619">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="620" relation="public-inheritance">
        </childnode>
        <childnode refid="622" relation="usage">
          <edgelabel>roundoff_domain</edgelabel>
          <edgelabel>prob_domain</edgelabel>
        </childnode>
        <childnode refid="623" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="627">
        <label>std::vector&lt; RealTuple, std::allocator&lt; RealTuple &gt; &gt;</label>
      </node>
      <node id="625">
        <label>amrex::LayoutData&lt; RealTuple &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="593" relation="public-inheritance">
        </childnode>
        <childnode refid="626" relation="usage">
          <edgelabel>m_data</edgelabel>
        </childnode>
      </node>
      <node id="626">
        <label>amrex::Vector&lt; RealTuple &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="627" relation="public-inheritance">
        </childnode>
      </node>
      <node id="592">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="593" relation="public-inheritance">
        </childnode>
        <childnode refid="604" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
        </childnode>
        <childnode refid="606" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="597" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="608" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="599" relation="usage">
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="611" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="613" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="614" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="616" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="618" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="604">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="605" relation="public-inheritance">
        </childnode>
      </node>
      <node id="593">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="594" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="596" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="597" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="598" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="599" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="601" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
      </node>
      <node id="605">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" line="51" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Boundary/AMReX_BndryData.H" bodystart="48" bodyend="167"/>
    <listofallmembers>
      <member refid="classamrex_1_1BndryData_1a30e8975eaca9018ee72a0f5e9600e590" prot="protected" virt="non-virtual"><scope>amrex::BndryData</scope><name>bcloc</name></member>
      <member refid="classamrex_1_1BndryData_1a33b33d468118587f694c916018b3f3fb" prot="protected" virt="non-virtual"><scope>amrex::BndryData</scope><name>bcond</name></member>
      <member refid="classamrex_1_1BndryRegister_1adb20e61942a04f1783a0e82598583bc9" prot="protected" virt="non-virtual"><scope>amrex::BndryData</scope><name>bndry</name></member>
      <member refid="classamrex_1_1BndryData_1ab22274b8017f01edf0d5e432240a3308" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>bndryConds</name></member>
      <member refid="classamrex_1_1BndryData_1a91ee362b8e44820cf8d6ffa2c78cad90" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>bndryConds</name></member>
      <member refid="classamrex_1_1BndryData_1a56865f9312ebb3ec688b1d6dcb1a579f" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>BndryData</name></member>
      <member refid="classamrex_1_1BndryData_1a1d889161b75f5cb49d91b6da56c3596b" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>BndryData</name></member>
      <member refid="classamrex_1_1BndryData_1af682ca27d245a4002c2e8f47b7c96ec3" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>BndryData</name></member>
      <member refid="classamrex_1_1BndryData_1a0ce8e12e17b925619b9792d6469e1904" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>BndryData</name></member>
      <member refid="classamrex_1_1BndryData_1a8c53fbb7063c71b365d41ef352f4ffb5" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>bndryLocs</name></member>
      <member refid="classamrex_1_1BndryData_1a0f33ed526270778cb45aea3f8532315e" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>bndryLocs</name></member>
      <member refid="classamrex_1_1BndryData_1aa9e18873f726b8e44ff7a7569a79a8fe" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>bndryMasks</name></member>
      <member refid="classamrex_1_1BndryRegister_1aa4688ce12aed07218f4eb52082c290c2" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>BndryRegister</name></member>
      <member refid="classamrex_1_1BndryRegister_1aecf2bfb5d33fc73dc7fff1da73df6cb3" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>BndryRegister</name></member>
      <member refid="classamrex_1_1BndryRegister_1ada2a8c68444266b0a43501e0bbbfb187" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>BndryRegister</name></member>
      <member refid="classamrex_1_1BndryRegister_1ae816eecbaf5ba41568607d00441d3420" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>BndryRegister</name></member>
      <member refid="classamrex_1_1BndryData_1a3ce6d337a83e14d713a998d6b09a27e0" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>bndryValues</name></member>
      <member refid="classamrex_1_1BndryRegister_1a013d3c766ec5b97ea88fa71f9cc810cb" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>boxes</name></member>
      <member refid="classamrex_1_1BndryRegister_1acb41d395fa564b8c3c9d46327920d239" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>clear</name></member>
      <member refid="classamrex_1_1BndryRegister_1a361e5f4f34fe99325481f704c661c2ed" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>Copy</name></member>
      <member refid="classamrex_1_1BndryRegister_1af9a7b006622b33878423e6be4fd7fcc3" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>copyFrom</name></member>
      <member refid="classamrex_1_1BndryData_1a4d31afbfcfb31a6229877bb9ad880fb9a843d5274aec429fe8bea1719d6162727" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>covered</name></member>
      <member refid="classamrex_1_1BndryData_1a3457a4bb428e2f1478f95e76fd15a9df" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>define</name></member>
      <member refid="classamrex_1_1BndryRegister_1a7ac16569b9b981389bb8a08a6d99e89e" prot="public" virt="non-virtual" ambiguityscope="amrex::BndryRegister::"><scope>amrex::BndryData</scope><name>define</name></member>
      <member refid="classamrex_1_1BndryRegister_1a50339ee95902a57f40f9251322cbd143" prot="public" virt="non-virtual" ambiguityscope="amrex::BndryRegister::"><scope>amrex::BndryData</scope><name>define</name></member>
      <member refid="classamrex_1_1BndryRegister_1a543c6c7f9abadfda4cb25368007d14f8" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1BndryData_1a2aee61504e5cdef7ac8af1986bff5c6c" prot="protected" virt="non-virtual"><scope>amrex::BndryData</scope><name>geom</name></member>
      <member refid="classamrex_1_1BndryData_1a23e91cef1e7680f2ee0f8c741768e790" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>getDomain</name></member>
      <member refid="classamrex_1_1BndryData_1a1c808b83c725af10075314a95391e06f" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>getGeom</name></member>
      <member refid="classamrex_1_1BndryRegister_1ae15db9f8fcfd9583ae5907d4cf69eeb9" prot="protected" virt="non-virtual"><scope>amrex::BndryData</scope><name>grids</name></member>
      <member refid="classamrex_1_1BndryData_1a86d75e0d19f16438072188201b4e6dea" prot="protected" virt="non-virtual"><scope>amrex::BndryData</scope><name>init</name></member>
      <member refid="classamrex_1_1BndryRegister_1a02832dac3fe498a4a60c84024d2fa2ad" prot="public" virt="non-virtual" ambiguityscope="amrex::BndryRegister::"><scope>amrex::BndryData</scope><name>init</name></member>
      <member refid="classamrex_1_1BndryRegister_1a081060fb3475eb5b2a2b5a620ca98bcb" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>linComb</name></member>
      <member refid="classamrex_1_1BndryData_1a93c9313da3c49504432d4eefb95fab98" prot="protected" virt="non-virtual"><scope>amrex::BndryData</scope><name>m_defined</name></member>
      <member refid="classamrex_1_1BndryData_1a407bf2d353db9c58b6205a43b2d500bd" prot="protected" virt="non-virtual"><scope>amrex::BndryData</scope><name>m_ncomp</name></member>
      <member refid="classamrex_1_1BndryData_1af590a7b776cc9ccee49e607a3e84671d" prot="protected" virt="non-virtual"><scope>amrex::BndryData</scope><name>masks</name></member>
      <member refid="classamrex_1_1BndryData_1a4d31afbfcfb31a6229877bb9ad880fb9" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>MaskVal</name></member>
      <member refid="classamrex_1_1BndryData_1a97018aa05709deb4cdbbcdc4a2c9f410" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>nComp</name></member>
      <member refid="classamrex_1_1BndryData_1a4d31afbfcfb31a6229877bb9ad880fb9a54f598ca1ea830b90bd86719dd843014" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>not_covered</name></member>
      <member refid="classamrex_1_1BndryData_1ad69d8769b561cfe76e6dd1cac73d7517" prot="private" virt="non-virtual"><scope>amrex::BndryData</scope><name>NTangHalfWidth</name></member>
      <member refid="classamrex_1_1BndryData_1a4d31afbfcfb31a6229877bb9ad880fb9a22450c0e6f732b3f87827b12e1b20aa5" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>NumMaskVals</name></member>
      <member refid="classamrex_1_1BndryRegister_1ad0674b001bc3b0a4b75d1029e94312c2" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BndryData_1a7a048ebe06e3f4bd0eda04267d099526" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BndryData_1a91c68a0f4629147dee1b0d6a9105ce91" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BndryRegister_1aca9e7d7c7f5c551ed60dde97cab4cc76" prot="public" virt="non-virtual" ambiguityscope="amrex::BndryRegister::"><scope>amrex::BndryData</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BndryRegister_1a09b5da018d193a820c808b1f2cab5095" prot="public" virt="non-virtual" ambiguityscope="amrex::BndryRegister::"><scope>amrex::BndryData</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BndryData_1a46b99b60d63dc321382543e85c6fac52" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1BndryData_1abde34b0ee2d6202d1cc507137de7110c" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1BndryData_1a4d31afbfcfb31a6229877bb9ad880fb9aa3c78d810a253d1eace3c04595537ff1" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>outside_domain</name></member>
      <member refid="classamrex_1_1BndryRegister_1a1fbfbedbc701bb9f20fa7487bff20bdf" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>plus</name></member>
      <member refid="classamrex_1_1BndryRegister_1ab19d96f57df527f106a7f53c2590b65a" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>plusFrom</name></member>
      <member refid="classamrex_1_1BndryRegister_1a4cb1af64eb4645b6e6398c1839ecabe7" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>read</name></member>
      <member refid="classamrex_1_1BndryData_1ab4ed85c429f2c9ba26ce7e046590aee0" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>RealTuple</name></member>
      <member refid="classamrex_1_1BndryData_1a1817e397bfd5fde2d13cf387fdea1634" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>setBoundCond</name></member>
      <member refid="classamrex_1_1BndryData_1a2d630b4b3737a4d5f8a896954919b210" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>setBoundCond</name></member>
      <member refid="classamrex_1_1BndryData_1a915cd3e0f2421e3ffe2286c62305bedf" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>setBoundLoc</name></member>
      <member refid="classamrex_1_1BndryData_1a09c6217601d6804d709c3860a081e3f3" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>setBoundLoc</name></member>
      <member refid="classamrex_1_1BndryRegister_1a4da05261825b0d26b246bf5c5b5fb586" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>setBoxes</name></member>
      <member refid="classamrex_1_1BndryRegister_1a8a45cb99b2e11388c149bf277120fbc9" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BndryData_1a1fe4b4c1ca31db758ed7599cc0993f13" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>setValue</name></member>
      <member refid="classamrex_1_1BndryRegister_1a32eadb3490dbaa29c79ebea0c0c8b8bd" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>size</name></member>
      <member refid="classamrex_1_1BndryRegister_1aadb7c6f9bb2e6ed7be5c1c0647576615" prot="public" virt="non-virtual"><scope>amrex::BndryData</scope><name>write</name></member>
      <member refid="classamrex_1_1BndryData_1ad6ebc5a788a82c41a8b1bffc8e589440" prot="public" virt="virtual"><scope>amrex::BndryData</scope><name>~BndryData</name></member>
      <member refid="classamrex_1_1BndryRegister_1a3607c6a07e3dd764daaf2cb5301f1a59" prot="public" virt="virtual"><scope>amrex::BndryData</scope><name>~BndryRegister</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
