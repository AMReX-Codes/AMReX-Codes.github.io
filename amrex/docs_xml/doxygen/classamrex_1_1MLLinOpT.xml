<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1MLLinOpT" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::MLLinOpT</compoundname>
    <derivedcompoundref refid="classamrex_1_1MLCellLinOpT" prot="public" virt="non-virtual">amrex::MLCellLinOpT&lt; MF &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1MLNodeLinOp" prot="public" virt="non-virtual">amrex::MLNodeLinOp</derivedcompoundref>
    <includes refid="AMReX__MLLinOp_8H" local="no">AMReX_MLLinOp.H</includes>
    <innerclass refid="structamrex_1_1MLLinOpT_1_1CommContainer" prot="protected">amrex::MLLinOpT::CommContainer</innerclass>
    <templateparamlist>
      <param>
        <type>typename MF</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1MLLinOpT_1aa3a86c1d0b6dcdc16c55798848842dd8" prot="public" static="no">
        <type>typename MF::fab_type</type>
        <definition>using amrex::MLLinOpT&lt; MF &gt;::FAB =  typename MF::fab_type</definition>
        <argsstring></argsstring>
        <name>FAB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="103" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLLinOpT_1a2c1dedd6f4eccfcbb62d5b5dd3256f86" prot="public" static="no">
        <type>typename MF::value_type</type>
        <definition>using amrex::MLLinOpT&lt; MF &gt;::RT =  typename MF::value_type</definition>
        <argsstring></argsstring>
        <name>RT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="104" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLLinOpT_1a6dce9b9c92850fb742b131ba66f934d6" prot="public" static="no">
        <type>LinOpBCType</type>
        <definition>using amrex::MLLinOpT&lt; MF &gt;::BCType =  LinOpBCType</definition>
        <argsstring></argsstring>
        <name>BCType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="106" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLLinOpT_1ad3f214e6e55b5de314dd5725a4148467" prot="public" static="no">
        <type><ref refid="structamrex_1_1LinOpEnumType_1ac0ca2bfc9c5a1de7514545be0058b627" kindref="member">LinOpEnumType::BCMode</ref></type>
        <definition>using amrex::MLLinOpT&lt; MF &gt;::BCMode =  LinOpEnumType::BCMode</definition>
        <argsstring></argsstring>
        <name>BCMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="107" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLLinOpT_1a246fbbc22c78e2327ea936e3433fddf1" prot="public" static="no">
        <type><ref refid="structamrex_1_1LinOpEnumType_1a1afeea6c44c6989ddd2ef9f7ad67b2b8" kindref="member">LinOpEnumType::StateMode</ref></type>
        <definition>using amrex::MLLinOpT&lt; MF &gt;::StateMode =  LinOpEnumType::StateMode</definition>
        <argsstring></argsstring>
        <name>StateMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="108" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLLinOpT_1ac1e86de83222345c43a378d8698c9543" prot="public" static="no">
        <type><ref refid="structamrex_1_1LinOpEnumType_1acc2058c2f5b3c370c08f75fc71ff3bb4" kindref="member">LinOpEnumType::Location</ref></type>
        <definition>using amrex::MLLinOpT&lt; MF &gt;::Location =  LinOpEnumType::Location</definition>
        <argsstring></argsstring>
        <name>Location</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="109" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1MLLinOpT_1ad167454adc7ef3f671c1c51aa863f5d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class MLMGT</definition>
        <argsstring></argsstring>
        <name>MLMGT</name>
        <param>
          <type><ref refid="classamrex_1_1MLMGT" kindref="compound">MLMGT</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="98" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1MLLinOpT_1a7d74bb864e0e5e676d689302876b3da3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class MLCGSolverT</definition>
        <argsstring></argsstring>
        <name>MLCGSolverT</name>
        <param>
          <type><ref refid="classamrex_1_1MLCGSolverT" kindref="compound">MLCGSolverT</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="99" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1MLLinOpT_1a4314fcd3e8cf089757c3c88e923f9a2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class MLPoissonT</definition>
        <argsstring></argsstring>
        <name>MLPoissonT</name>
        <param>
          <type><ref refid="classamrex_1_1MLPoissonT" kindref="compound">MLPoissonT</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="100" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1MLLinOpT_1aae889d9617524451e9e7daeb85f6d22c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class MLABecLaplacianT</definition>
        <argsstring></argsstring>
        <name>MLABecLaplacianT</name>
        <param>
          <type><ref refid="classamrex_1_1MLABecLaplacianT" kindref="compound">MLABecLaplacianT</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="101" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="101" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a9f2e0c10c385f9bee16af5fed5f4e9c9" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOpT_1a6dce9b9c92850fb742b131ba66f934d6" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &gt;</type>
        <definition>Vector&lt;Array&lt;BCType, AMREX_SPACEDIM&gt; &gt; amrex::MLLinOpT&lt; MF &gt;::m_lobc</definition>
        <argsstring></argsstring>
        <name>m_lobc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="500" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="500" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1ad073f92f684b4d5ea20718fbc396ef40" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOpT_1a6dce9b9c92850fb742b131ba66f934d6" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &gt;</type>
        <definition>Vector&lt;Array&lt;BCType, AMREX_SPACEDIM&gt; &gt; amrex::MLLinOpT&lt; MF &gt;::m_hibc</definition>
        <argsstring></argsstring>
        <name>m_hibc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="501" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="501" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a726dec103c10ea9c84e649b9c8200767" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOpT_1a6dce9b9c92850fb742b131ba66f934d6" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &gt;</type>
        <definition>Vector&lt;Array&lt;BCType, AMREX_SPACEDIM&gt; &gt; amrex::MLLinOpT&lt; MF &gt;::m_lobc_orig</definition>
        <argsstring></argsstring>
        <name>m_lobc_orig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="504" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="504" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a2cf9f506d5cee3aeaaae8b9930e7866d" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOpT_1a6dce9b9c92850fb742b131ba66f934d6" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &gt;</type>
        <definition>Vector&lt;Array&lt;BCType, AMREX_SPACEDIM&gt; &gt; amrex::MLLinOpT&lt; MF &gt;::m_hibc_orig</definition>
        <argsstring></argsstring>
        <name>m_hibc_orig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="505" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="505" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a4ab72cdcf8c7d1746bd1e03fac99d808" prot="protected" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::MLLinOpT&lt; MF &gt;::mg_coarsen_ratio</definition>
        <argsstring></argsstring>
        <name>mg_coarsen_ratio</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="509" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="509" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a958be92529c763a85a81c3fc03e1e5af" prot="protected" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::MLLinOpT&lt; MF &gt;::mg_box_min_width</definition>
        <argsstring></argsstring>
        <name>mg_box_min_width</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="510" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="510" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1adb9b30d3eda7f6dd1d77740f58674c84" prot="protected" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::MLLinOpT&lt; MF &gt;::mg_domain_min_width</definition>
        <argsstring></argsstring>
        <name>mg_domain_min_width</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="514" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="514" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1ad0412f399e1e29e200a2451b371b0133" prot="protected" static="no" mutable="no">
        <type><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref></type>
        <definition>LPInfo amrex::MLLinOpT&lt; MF &gt;::info</definition>
        <argsstring></argsstring>
        <name>info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="517" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="517" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a685caf14f09300309d306d01150eae9a" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLLinOpT&lt; MF &gt;::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="519" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1abddb56c317b794cc672b446046784d95" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLLinOpT&lt; MF &gt;::maxorder</definition>
        <argsstring></argsstring>
        <name>maxorder</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="521" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1adb9b0f44a3e66fbefa2310385747427b" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLLinOpT&lt; MF &gt;::enforceSingularSolvable</definition>
        <argsstring></argsstring>
        <name>enforceSingularSolvable</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="523" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1afe9761ce7b771e51e0b47d415779ce93" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLLinOpT&lt; MF &gt;::m_num_amr_levels</definition>
        <argsstring></argsstring>
        <name>m_num_amr_levels</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="525" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="525" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a520a29dd5773acdba2c227d316e059a4" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::MLLinOpT&lt; MF &gt;::m_amr_ref_ratio</definition>
        <argsstring></argsstring>
        <name>m_amr_ref_ratio</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="526" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a64262a62291404dab652353158886cce" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::MLLinOpT&lt; MF &gt;::m_num_mg_levels</definition>
        <argsstring></argsstring>
        <name>m_num_mg_levels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="528" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1aa96812cd049f02fe827fc1573fa0626e" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; MF &gt; *</type>
        <definition>const MLLinOpT&lt;MF&gt;* amrex::MLLinOpT&lt; MF &gt;::m_parent</definition>
        <argsstring></argsstring>
        <name>m_parent</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="529" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a1144a9c3d743270ff29c8e9f582581c0" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::MLLinOpT&lt; MF &gt;::m_ixtype</definition>
        <argsstring></argsstring>
        <name>m_ixtype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="531" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a452827d7dc1f2d84d701248f05e908af" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLLinOpT&lt; MF &gt;::m_do_agglomeration</definition>
        <argsstring></argsstring>
        <name>m_do_agglomeration</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="533" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a0e1db3374227c3c6043734d42bbbc795" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLLinOpT&lt; MF &gt;::m_do_consolidation</definition>
        <argsstring></argsstring>
        <name>m_do_consolidation</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="534" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a3f65a4345945e648b7170635a33c9557" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLLinOpT&lt; MF &gt;::m_do_semicoarsening</definition>
        <argsstring></argsstring>
        <name>m_do_semicoarsening</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="536" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1abf470fae49c59ccd4cbc058ebfdab2a2" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt;</type>
        <definition>Vector&lt;IntVect&gt; amrex::MLLinOpT&lt; MF &gt;::mg_coarsen_ratio_vec</definition>
        <argsstring></argsstring>
        <name>mg_coarsen_ratio_vec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="537" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="537" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1aab42ad785f4263767af0a0e7306cdf8a" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Geometry&gt; &gt; amrex::MLLinOpT&lt; MF &gt;::m_geom</definition>
        <argsstring></argsstring>
        <name>m_geom</name>
        <briefdescription>
<para>first <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> is for amr level and second is mg level </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="540" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="540" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a4458bc19263fdcf39df3665681ce3aef" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;BoxArray&gt; &gt; amrex::MLLinOpT&lt; MF &gt;::m_grids</definition>
        <argsstring></argsstring>
        <name>m_grids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="541" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="541" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a67d38036b0d30275047637a1ab739ca6" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;DistributionMapping&gt; &gt; amrex::MLLinOpT&lt; MF &gt;::m_dmap</definition>
        <argsstring></argsstring>
        <name>m_dmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="542" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a07a2cce97f1c77f36f8a241090543b8e" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1MLLinOpT_1aa3a86c1d0b6dcdc16c55798848842dd8" kindref="member">FAB</ref> &gt; &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;std::unique_ptr&lt;FabFactory&lt;FAB&gt; &gt; &gt; &gt; amrex::MLLinOpT&lt; MF &gt;::m_factory</definition>
        <argsstring></argsstring>
        <name>m_factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="543" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1aa83ed4b753b00606bcdff3573a6f0824" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::MLLinOpT&lt; MF &gt;::m_domain_covered</definition>
        <argsstring></argsstring>
        <name>m_domain_covered</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="544" column="37" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a52e548305943a2d3a1b1731eb5855b73" prot="protected" static="no" mutable="no">
        <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::MLLinOpT&lt; MF &gt;::m_default_comm</definition>
        <argsstring></argsstring>
        <name>m_default_comm</name>
        <initializer>= <ref refid="AMReX__ccse-mpi_8H_1a9eb867d9cda6acfce33985d67a31d5fc" kindref="member">MPI_COMM_NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="546" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="546" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1aee13b9d32b909adb7903586bfa352855" prot="protected" static="no" mutable="no">
        <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::MLLinOpT&lt; MF &gt;::m_bottom_comm</definition>
        <argsstring></argsstring>
        <name>m_bottom_comm</name>
        <initializer>= <ref refid="AMReX__ccse-mpi_8H_1a9eb867d9cda6acfce33985d67a31d5fc" kindref="member">MPI_COMM_NULL</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="547" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="547" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a3e96c4035b1315b80c6301329695f86e" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1MLLinOpT_1_1CommContainer" kindref="compound">CommContainer</ref> &gt;</type>
        <definition>std::unique_ptr&lt;CommContainer&gt; amrex::MLLinOpT&lt; MF &gt;::m_raii_comm</definition>
        <argsstring></argsstring>
        <name>m_raii_comm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="561" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="561" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a437d5bd996be47153207c90d286b336c" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, AMREX_SPACEDIM &gt;</type>
        <definition>Array&lt;Real, AMREX_SPACEDIM&gt; amrex::MLLinOpT&lt; MF &gt;::m_domain_bloc_lo</definition>
        <argsstring></argsstring>
        <name>m_domain_bloc_lo</name>
        <initializer>{{AMREX_D_DECL(0._rt,0._rt,0._rt)}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="563" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="563" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a1375eac46dcbfeb8155a251b904cc727" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, AMREX_SPACEDIM &gt;</type>
        <definition>Array&lt;Real, AMREX_SPACEDIM&gt; amrex::MLLinOpT&lt; MF &gt;::m_domain_bloc_hi</definition>
        <argsstring></argsstring>
        <name>m_domain_bloc_hi</name>
        <initializer>{{AMREX_D_DECL(0._rt,0._rt,0._rt)}}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="564" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="564" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1abc7eaafcc5804d269386c6bdbd13181d" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLLinOpT&lt; MF &gt;::m_needs_coarse_data_for_bc</definition>
        <argsstring></argsstring>
        <name>m_needs_coarse_data_for_bc</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="566" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="566" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a1b5ecb2a824287420c4f6acf8540b2f6" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLLinOpT&lt; MF &gt;::m_coarse_data_crse_ratio</definition>
        <argsstring></argsstring>
        <name>m_coarse_data_crse_ratio</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="567" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="567" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a1a730552d4db500b99496712dec21038" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>RealVect amrex::MLLinOpT&lt; MF &gt;::m_coarse_bc_loc</definition>
        <argsstring></argsstring>
        <name>m_coarse_bc_loc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="568" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="568" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a02f8f07d9d724566c7aea603ea1248a6" prot="protected" static="no" mutable="no">
        <type>const MF *</type>
        <definition>const MF* amrex::MLLinOpT&lt; MF &gt;::m_coarse_data_for_bc</definition>
        <argsstring></argsstring>
        <name>m_coarse_data_for_bc</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="569" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="569" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a3bf0a8559fbed2ec5297f97590e92cb0" prot="protected" static="no" mutable="no">
        <type>MF</type>
        <definition>MF amrex::MLLinOpT&lt; MF &gt;::m_coarse_data_for_bc_raii</definition>
        <argsstring></argsstring>
        <name>m_coarse_data_for_bc_raii</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="570" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="570" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a3ac078eb634767e8e812746b8327a6b5" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; MF &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;MF&gt; &gt; amrex::MLLinOpT&lt; MF &gt;::levelbc_raii</definition>
        <argsstring></argsstring>
        <name>levelbc_raii</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="686" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="686" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1afdb609a7a4b9ea229e7b9cc89a8751f7" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; MF &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;MF&gt; &gt; amrex::MLLinOpT&lt; MF &gt;::robin_a_raii</definition>
        <argsstring></argsstring>
        <name>robin_a_raii</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="687" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="687" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a90e6517d0ff6dee31c92101a9249de67" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; MF &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;MF&gt; &gt; amrex::MLLinOpT&lt; MF &gt;::robin_b_raii</definition>
        <argsstring></argsstring>
        <name>robin_b_raii</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="688" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="688" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLLinOpT_1a451681732629cb75f6a4a9ba29799f44" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; MF &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;MF&gt; &gt; amrex::MLLinOpT&lt; MF &gt;::robin_f_raii</definition>
        <argsstring></argsstring>
        <name>robin_f_raii</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="689" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="689" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1ab768833f0df0eb419284243a6940153e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLLinOpT&lt; MF &gt;::MLLinOpT</definition>
        <argsstring>()=default</argsstring>
        <name>MLLinOpT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="111" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1ac7718af80beb24d049ffad1239e31384" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual amrex::MLLinOpT&lt; MF &gt;::~MLLinOpT</definition>
        <argsstring>()=default</argsstring>
        <name>~MLLinOpT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="112" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1aae73abc3efc9dcc4b381ff020e043c68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLLinOpT&lt; MF &gt;::MLLinOpT</definition>
        <argsstring>(const MLLinOpT&lt; MF &gt; &amp;)=delete</argsstring>
        <name>MLLinOpT</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; MF &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="114" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a709f5c12d16e1e5e191a1d56df622173" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLLinOpT&lt; MF &gt;::MLLinOpT</definition>
        <argsstring>(MLLinOpT&lt; MF &gt; &amp;&amp;)=delete</argsstring>
        <name>MLLinOpT</name>
        <param>
          <type><ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; MF &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="115" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1aba8d3e06373e96ddac7da02928522796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; MF &gt; &amp;</type>
        <definition>MLLinOpT&lt;MF&gt;&amp; amrex::MLLinOpT&lt; MF &gt;::operator=</definition>
        <argsstring>(const MLLinOpT&lt; MF &gt; &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; MF &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="116" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a9399276c8cadba0d0e513200ab8758c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; MF &gt; &amp;</type>
        <definition>MLLinOpT&lt;MF&gt;&amp; amrex::MLLinOpT&lt; MF &gt;::operator=</definition>
        <argsstring>(MLLinOpT&lt; MF &gt; &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; MF &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="117" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1abe69b9ebe0a04b3da502ac8606871680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOpT&lt; MF &gt;::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info, const Vector&lt; FabFactory&lt; FAB &gt; const * &gt; &amp;a_factory, bool eb_limit_coarsening=true)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1MLLinOpT_1aa3a86c1d0b6dcdc16c55798848842dd8" kindref="member">FAB</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>eb_limit_coarsening</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="119" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="694" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a2fb16a53d8b6d9dd08306f89a535c617" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string amrex::MLLinOpT&lt; MF &gt;::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <reimplementedby refid="classamrex_1_1MLEBNodeFDLaplacian_1a1abd0ae30a7a51ffe7672505fd171c2d">name</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeABecLaplacian_1a4b31dd42e50b3cdeca609dfd22fb79ce">name</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1a32ac8e52543365ce2565213c83725f15">name</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeTensorLaplacian_1a06e0f836743b4313fdd706e28e365d65">name</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="126" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a065b7216ffbd4136592b893066feabc9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOpT&lt; MF &gt;::setDomainBC</definition>
        <argsstring>(const Array&lt; BCType, AMREX_SPACEDIM &gt; &amp;lobc, const Array&lt; BCType, AMREX_SPACEDIM &gt; &amp;hibc) noexcept</argsstring>
        <name>setDomainBC</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOpT_1a6dce9b9c92850fb742b131ba66f934d6" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>lobc</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOpT_1a6dce9b9c92850fb742b131ba66f934d6" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>hibc</declname>
        </param>
        <briefdescription>
<para>Boundary of the whole domain. </para>
        </briefdescription>
        <detaileddescription>
<para>This functions must be called, and must be called before other bc functions. This version is for single-component solve or when all the components have the same BC types.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lobc</parametername>
</parameternamelist>
<parameterdescription>
<para>lower boundaries </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hibc</parametername>
</parameternamelist>
<parameterdescription>
<para>upper boundaries </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="138" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1109" bodyend="1115"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a472da4d3c20cee50275d2790e18bf046" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOpT&lt; MF &gt;::setDomainBC</definition>
        <argsstring>(const Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &amp;lobc, const Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &amp;hibc) noexcept</argsstring>
        <name>setDomainBC</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOpT_1a6dce9b9c92850fb742b131ba66f934d6" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>lobc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLLinOpT_1a6dce9b9c92850fb742b131ba66f934d6" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>hibc</declname>
        </param>
        <briefdescription>
<para>Boundary of the whole domain. </para>
        </briefdescription>
        <detaileddescription>
<para>This functions must be called, and must be called before other bc functions. This version is for multi-component solve.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lobc</parametername>
</parameternamelist>
<parameterdescription>
<para>lower boundaries </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hibc</parametername>
</parameternamelist>
<parameterdescription>
<para>upper boundaries </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="150" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1119" bodyend="1167"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a7dd25019053e84389e2d9226fc5816ed" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOpT&lt; MF &gt;::setDomainBCLoc</definition>
        <argsstring>(const Array&lt; Real, AMREX_SPACEDIM &gt; &amp;lo_bcloc, const Array&lt; Real, AMREX_SPACEDIM &gt; &amp;hi_bcloc) noexcept</argsstring>
        <name>setDomainBCLoc</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>lo_bcloc</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; Real, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>hi_bcloc</declname>
        </param>
        <briefdescription>
<para>Set location of domain boundaries. </para>
        </briefdescription>
        <detaileddescription>
<para>By default, domain BC is on the domain face. If that&apos;s the case, this function doesn&apos;t need to be called. However, one could use this function to set non-zero domain BC locations. Note all values should be &gt;= 0. If this function is called, it MUST be called before setLevelBC. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="162" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1346" bodyend="1351"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a7e2d1058dd843b67192b1aa489e112b6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOpT&lt; MF &gt;::needsCoarseDataForBC</definition>
        <argsstring>() const noexcept</argsstring>
        <name>needsCoarseDataForBC</name>
        <briefdescription>
<para>Needs coarse data for bc? </para>
        </briefdescription>
        <detaileddescription>
<para>If the lowest level grids does not cover the entire domain, coarse level data are needed for supplying Dirichlet bc at coarse/fine boundary, even when the domain bc is not Dirichlet. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="172" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="172" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a1645f2059f3e9816fedfa8b45315d484" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOpT&lt; MF &gt;::setCoarseFineBC</definition>
        <argsstring>(const MF *crse, int crse_ratio) noexcept</argsstring>
        <name>setCoarseFineBC</name>
        <param>
          <type>const MF *</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_ratio</declname>
        </param>
        <briefdescription>
<para>Set coarse/fine boundary conditions. For cell-centered solves only. </para>
        </briefdescription>
        <detaileddescription>
<para>If we want to do a linear solve where the boundary conditions on the coarsest AMR level of the solve come from a coarser level (e.g. the base AMR level of the solve is &gt; 0 and does not cover the entire domain), we must explicitly provide the coarser data. Boundary conditions from a coarser level are always Dirichlet. The <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> crse does not need to have ghost cells and is at a coarser resolution than the coarsest AMR level of the solve; it is used to supply (interpolated) boundary conditions for the solve. NOTE: If this is called, it must be called before <computeroutput>setLevelBC</computeroutput>. If crse is nullptr, then the bc values are assumed to be zero.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crse</parametername>
</parameternamelist>
<parameterdescription>
<para>the coarse AMR level data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_ratio</parametername>
</parameternamelist>
<parameterdescription>
<para>the coarsening ratio between fine and coarse AMR levels. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="192" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1355" bodyend="1359"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1ad832dbc5dd9ed90db2136815c1c1a190" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename AMF</type>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_same_v&lt; MF, AMF &gt;, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::MLLinOpT&lt; MF &gt;::setCoarseFineBC</definition>
        <argsstring>(const AMF *crse, int crse_ratio) noexcept</argsstring>
        <name>setCoarseFineBC</name>
        <param>
          <type>const AMF *</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="195" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1364" bodyend="1372"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a1ca9d659068ffdf4e8d78d035aa9450c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::setLevelBC</definition>
        <argsstring>(int, const MF *, const MF *=nullptr, const MF *=nullptr, const MF *=nullptr)=0</argsstring>
        <name>setLevelBC</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1afaf162a4471fc9b3a7121d9579fea518">setLevelBC</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>const MF *</type>
        </param>
        <param>
          <type>const MF *</type>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const MF *</type>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const MF *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Set boundary conditions for given level. For cell-centered solves only. </para>
        </briefdescription>
        <detaileddescription>
<para>This must be called for each level. Argument <computeroutput>levelbcdata</computeroutput> is used to supply Dirichlet or Neumann bc at the physical domain; if those data are homogeneous we can pass nullptr instead of levelbcdata. Regardless, this function must be called. If used, the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> levelbcdata must have one ghost cell. Only the data outside the physical domain will be used. It is assumed that the data in those ghost cells outside the domain live exactly on the face of the physical domain. Argument <computeroutput>amrlev</computeroutput> is relative level such that the lowest to the solver is always 0. The optional arguments robinbc_[a|b|f] provide Robin boundary condition <computeroutput>a*phi + b*dphi/dn = f</computeroutput>. Note that <computeroutput>d./dn</computeroutput> is <computeroutput>d./dx</computeroutput> at the upper boundary and <computeroutput>-d./dx</computeroutput> at the lower boundary, for Robin BC. However, for inhomogeneous Neumann BC, the value in leveldata is assumed to be <computeroutput>d./dx</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="215" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1adc2c4cd3ccc03f6c0f958429b1d1f093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename AMF</type>
          </param>
          <param>
            <type>std::enable_if_t&lt;!std::is_same_v&lt; MF, AMF &gt;, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::MLLinOpT&lt; MF &gt;::setLevelBC</definition>
        <argsstring>(int amrlev, const AMF *levelbcdata, const AMF *robinbc_a=nullptr, const AMF *robinbc_b=nullptr, const AMF *robinbc_f=nullptr)</argsstring>
        <name>setLevelBC</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const AMF *</type>
          <declname>levelbcdata</declname>
        </param>
        <param>
          <type>const AMF *</type>
          <declname>robinbc_a</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const AMF *</type>
          <declname>robinbc_b</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>const AMF *</type>
          <declname>robinbc_f</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="221" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1480" bodyend="1527"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a135bc97332faf6e4f7f864b45c2b0b69" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOpT&lt; MF &gt;::setVerbose</definition>
        <argsstring>(int v) noexcept</argsstring>
        <name>setVerbose</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Set verbosity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="227" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="227" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a2cea879bd6717f7b2f425b1c1aeff724" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOpT&lt; MF &gt;::setMaxOrder</definition>
        <argsstring>(int o) noexcept</argsstring>
        <name>setMaxOrder</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Set order of interpolation at coarse/fine boundary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="230" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="230" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a4e2a07d995c0fc8d2dfe5be544501eea" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLLinOpT&lt; MF &gt;::getMaxOrder</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getMaxOrder</name>
        <briefdescription>
<para>Get order of interpolation at coarse/fine boundary. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="232" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="232" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a28dec45d870edf5fba713b18c53542cf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOpT&lt; MF &gt;::setEnforceSingularSolvable</definition>
        <argsstring>(bool o) noexcept</argsstring>
        <name>setEnforceSingularSolvable</name>
        <param>
          <type>bool</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the flag for whether the solver should try to make singular problem solvable, which is on by default. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="236" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="236" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1af823f5b435d2f329595b333c82080e35" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOpT&lt; MF &gt;::getEnforceSingularSolvable</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getEnforceSingularSolvable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the flag for whether the solver should try to make singular problem solvable. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="239" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="239" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a5e588d148e2672c3e82c8f40d5826671" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4" kindref="member">BottomSolver</ref></type>
        <definition>virtual BottomSolver amrex::MLLinOpT&lt; MF &gt;::getDefaultBottomSolver</definition>
        <argsstring>() const</argsstring>
        <name>getDefaultBottomSolver</name>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1ab3de2ad805881979397a0c5b7dfc7175">getDefaultBottomSolver</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="241" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="241" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a4f45234f33332dbaf9406e4daa01b475" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>virtual int amrex::MLLinOpT&lt; MF &gt;::getNComp</definition>
        <argsstring>() const</argsstring>
        <name>getNComp</name>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a88ced4b56c0bcae8b8d191ed461efb97">getNComp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1ae95246a8ce25a240837faf8c84f6c523">getNComp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacianT_1a1b83dc2b560d4872a20e2a3dcbd9983a">getNComp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacianT_1aea18bbc9ee334ccc7fe5d22e7c693926">getNComp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1ac8592f1eb3bbc7a07f14a286f4de37db">getNComp</reimplementedby>
        <briefdescription>
<para>Return number of components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="244" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="244" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1afe8257f1157b08104c622bedb11b0d00" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>virtual int amrex::MLLinOpT&lt; MF &gt;::getNGrow</definition>
        <argsstring>(int=0, int=0) const</argsstring>
        <name>getNGrow</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="246" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="246" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a1aeab1e2fe2f589ecdc3b9751208a22a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLLinOpT&lt; MF &gt;::needsUpdate</definition>
        <argsstring>() const</argsstring>
        <name>needsUpdate</name>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a28c6954110a23fa141f9ab6420086999">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeABecLaplacian_1aecca19e63305762f008c9965c37b34e4">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a8fb6d1048cec22ab43f69b7d91ccce1d">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacianT_1af42c52eb173946c7ff2628ef20e2a89a">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacianT_1ac016de333c8459f75c458870a8a3b384">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellABecLapT_1a972b0c17208b96e3bc1c41d688ebf5d2">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1afb2f8218dcad4df69508e7ea795c2aaf">needsUpdate</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a95ea231a7ff288e48c9209aa44210bcd">needsUpdate</reimplementedby>
        <briefdescription>
<para>Does it need update if it&apos;s reused? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="249" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="249" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a81443deada65588ba7a71e191def4aa0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::update</definition>
        <argsstring>()</argsstring>
        <name>update</name>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1aa4a38baa43b1454a82381cbb0b8ff253">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeABecLaplacian_1a7d4de7a03f5dcdc4c52c4451afb04737">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a099b8059c7848bf601ca1cc33426ce24">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacianT_1af3a21bba5cafce9e1c1c75194f37ca93">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacianT_1a47b92deed478d2df8e6a92070437a17c">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellABecLapT_1ae9730b505209a9fc2f255dd6cf9ea177">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1a4482485699afcfc64adb1f8179714636">update</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1ad6b4be6cef1783fdb223e5aa7eb50343">update</reimplementedby>
        <briefdescription>
<para>Update for reuse. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="251" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="251" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1aee3f3df0d83ef41c04eb1eef68f41797" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::restriction</definition>
        <argsstring>(int amrlev, int cmglev, MF &amp;crse, MF &amp;fine) const =0</argsstring>
        <name>restriction</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1ab4713a678d7c2ac9e1a9c5b027f965c5">restriction</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cmglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>fine</declname>
        </param>
        <briefdescription>
<para>Restriction onto coarse MG level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmglev</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse MG level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse data. This is the output. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine</parametername>
</parameternamelist>
<parameterdescription>
<para>fine data. This is the input. Some operators might need to fill ghost cells. This is why it&apos;s not a const reference. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="262" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a1c8739b0c8b387f82d1c4cb3ba3ea509" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::interpolation</definition>
        <argsstring>(int amrlev, int fmglev, MF &amp;fine, const MF &amp;crse) const =0</argsstring>
        <name>interpolation</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1a7a7909cddc98ec2abe949ee2f043e817">interpolation</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fmglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
<para>Add interpolated coarse MG level data to fine MG level data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmglev</parametername>
</parameternamelist>
<parameterdescription>
<para>fine MG level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine</parametername>
</parameternamelist>
<parameterdescription>
<para>fine data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="272" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1ae3e6c0eaba362960b0c4292c92667ad4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::interpAssign</definition>
        <argsstring>(int amrlev, int fmglev, MF &amp;fine, MF &amp;crse) const =0</argsstring>
        <name>interpAssign</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1ac40a7cc1f424156f36d3d8b2f0254ae7">interpAssign</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fmglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
<para>Overwrite fine MG level data with interpolated coarse data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmglev</parametername>
</parameternamelist>
<parameterdescription>
<para>fine MG level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine</parametername>
</parameternamelist>
<parameterdescription>
<para>fine MG level data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse MG level data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="282" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a1983bfc60c0de1f62e0d6f1747b030c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::interpolationAmr</definition>
        <argsstring>(int famrlev, MF &amp;fine, const MF &amp;crse, IntVect const &amp;nghost) const =0</argsstring>
        <name>interpolationAmr</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1ae4108ba43d2b66494dd56578879a29a9">interpolationAmr</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>famrlev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>crse</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
<para>Interpolation between AMR levels. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>famrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>fine AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine</parametername>
</parameternamelist>
<parameterdescription>
<para>fine level data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse level data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nghost</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ghost cells </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="292" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1ad8919e9d2b5197ed2743008e28b76253" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::averageDownSolutionRHS</definition>
        <argsstring>(int camrlev, MF &amp;crse_sol, MF &amp;crse_rhs, const MF &amp;fine_sol, const MF &amp;fine_rhs)=0</argsstring>
        <name>averageDownSolutionRHS</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1a116deee661b635f1872ac7eded5f28a7">averageDownSolutionRHS</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>camrlev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>crse_sol</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>crse_rhs</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>fine_sol</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>fine_rhs</declname>
        </param>
        <briefdescription>
<para>Average-down data from fine AMR level to coarse AMR level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>camrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_sol</parametername>
</parameternamelist>
<parameterdescription>
<para>solutoin on coarse AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>RHS on coarse AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_sol</parametername>
</parameternamelist>
<parameterdescription>
<para>solution on fine AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>RHS on fine AMR level </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="304" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a7aea888ca18e54df62e7dffc8378d872" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::apply</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;out, MF &amp;in, BCMode bc_mode, StateMode s_mode, const MLMGBndryT&lt; MF &gt; *bndry=nullptr) const =0</argsstring>
        <name>apply</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1a8755fe1a7a09db77e7d810dd9dfdb107">apply</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1LinOpEnumType_1ac0ca2bfc9c5a1de7514545be0058b627" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1LinOpEnumType_1a1afeea6c44c6989ddd2ef9f7ad67b2b8" kindref="member">StateMode</ref></type>
          <declname>s_mode</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLMGBndryT" kindref="compound">MLMGBndryT</ref>&lt; MF &gt; *</type>
          <declname>bndry</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Apply the linear operator, out = L(in) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mglev</parametername>
</parameternamelist>
<parameterdescription>
<para>MG level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>input </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Is the BC homogeneous or inhomogeneous? </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Are data data solution or correction? </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bndry</parametername>
</parameternamelist>
<parameterdescription>
<para>object for handling coarse/fine and physical boundaries </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="318" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a03189718c2f8cd40c34158bb4ddf6120" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::smooth</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;sol, const MF &amp;rhs, bool skip_fillboundary=false) const =0</argsstring>
        <name>smooth</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1a04486888c630dc3e4a5258a0e174345c">smooth</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>skip_fillboundary</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Smooth. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mglev</parametername>
</parameternamelist>
<parameterdescription>
<para>MG level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sol</parametername>
</parameternamelist>
<parameterdescription>
<para>unknowns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>RHS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>skip_fillboundary</parametername>
</parameternamelist>
<parameterdescription>
<para>flag controlling whether ghost cell filling can be skipped. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="330" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1aaa66bfea39287ead35be91ec940d0bb1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::normalize</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;mf) const</argsstring>
        <name>normalize</name>
        <reimplementedby refid="classamrex_1_1MLABecLaplacianT_1aa8139012779454a901a8d4697174bd1e">normalize</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacianT_1ab6e413473dfba935e5169b5db1edcb56">normalize</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLPoissonT_1a557eb6e2ad1b92790b50e1781835b692">normalize</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
<para>Divide mf by the diagonal component of the operator. Used by bicgstab. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="334" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="334" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a4c4d498e615acd98b90da20eaee2a529" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::solutionResidual</definition>
        <argsstring>(int amrlev, MF &amp;resid, MF &amp;x, const MF &amp;b, const MF *crse_bcdata=nullptr)=0</argsstring>
        <name>solutionResidual</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1ad6684ea6b055170aad353ee9a4dcc316">solutionResidual</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const MF *</type>
          <declname>crse_bcdata</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Compute residual for solution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resid</parametername>
</parameternamelist>
<parameterdescription>
<para>residual </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>solution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>RHS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_bc_data</parametername>
</parameternamelist>
<parameterdescription>
<para>optional argument providing BC at coarse/fine boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="347" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a6f18465de0228f8ec4609e9e45367e5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::correctionResidual</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;resid, MF &amp;x, const MF &amp;b, BCMode bc_mode, const MF *crse_bcdata=nullptr)=0</argsstring>
        <name>correctionResidual</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1a51480d2022ad9346d6eb11f3cbfd631a">correctionResidual</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>resid</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1LinOpEnumType_1ac0ca2bfc9c5a1de7514545be0058b627" kindref="member">BCMode</ref></type>
          <declname>bc_mode</declname>
        </param>
        <param>
          <type>const MF *</type>
          <declname>crse_bcdata</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Compute residual for the residual-correction form, resid = b - L(x) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mglev</parametername>
</parameternamelist>
<parameterdescription>
<para>MG level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resid</parametername>
</parameternamelist>
<parameterdescription>
<para>residual </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>unknown in the residual-correction form </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>RHS in the residual-correction form </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bc_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Is the BC homogeneous or inhomogeneous? </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_bc_data</parametername>
</parameternamelist>
<parameterdescription>
<para>optional argument providing BC at coarse/fine boundary. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="361" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a52cceb132c5de0aad73ee774d41b4d0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::reflux</definition>
        <argsstring>(int crse_amrlev, MF &amp;res, const MF &amp;crse_sol, const MF &amp;crse_rhs, MF &amp;fine_res, MF &amp;fine_sol, const MF &amp;fine_rhs) const =0</argsstring>
        <name>reflux</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1a35158f8a8bd840468c4dedb08d6726ff">reflux</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_amrlev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>crse_sol</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>crse_rhs</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>fine_res</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>fine_sol</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>fine_rhs</declname>
        </param>
        <briefdescription>
<para>Reflux at AMR coarse/fine boundary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>crse_amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse level residual </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_sol</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse level solution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>crse_rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>coarse level RHS </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_res</parametername>
</parameternamelist>
<parameterdescription>
<para>fine level residual </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_sol</parametername>
</parameternamelist>
<parameterdescription>
<para>fine level solution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fine_rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>fine level RHS </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="375" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a5461a389d02ccf6df7e36a583fada6fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::compFlux</definition>
        <argsstring>(int amrlev, const Array&lt; MF *, AMREX_SPACEDIM &gt; &amp;fluxes, MF &amp;sol, Location loc) const =0</argsstring>
        <name>compFlux</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1ae7f32e1b953ea4ef5643501e91560d32">compFlux</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>fluxes</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1LinOpEnumType_1acc2058c2f5b3c370c08f75fc71ff3bb4" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
<para>Compute fluxes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fluxes</parametername>
</parameternamelist>
<parameterdescription>
<para>fluxes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sol</parametername>
</parameternamelist>
<parameterdescription>
<para>solution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>location of the fluxes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="387" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a593b5b7825da6be93b4383ccf86654e6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::compGrad</definition>
        <argsstring>(int amrlev, const Array&lt; MF *, AMREX_SPACEDIM &gt; &amp;grad, MF &amp;sol, Location loc) const =0</argsstring>
        <name>compGrad</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1a2ed74b3dc4e3c46d2cd589cbb8301e94">compGrad</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>grad</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1LinOpEnumType_1acc2058c2f5b3c370c08f75fc71ff3bb4" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <briefdescription>
<para>Compute gradients of the solution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amrlev</parametername>
</parameternamelist>
<parameterdescription>
<para>AMR level </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grad</parametername>
</parameternamelist>
<parameterdescription>
<para>grad(sol) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sol</parametername>
</parameternamelist>
<parameterdescription>
<para>solution </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>location of the gradients </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="398" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a776e1a7593f09fc231b80f3ce7e6468e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::applyMetricTerm</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;rhs) const =0</argsstring>
        <name>applyMetricTerm</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1a87bccd5330e4295f7108cf56c0a1cd20">applyMetricTerm</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>apply metric terms if there are any </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="402" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a53280186d7512080b4c6b42bc52c6f72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::unapplyMetricTerm</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;rhs) const =0</argsstring>
        <name>unapplyMetricTerm</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1a8681147e6aa6a83cba4451adda7b719c">unapplyMetricTerm</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>unapply metric terms if there are any </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="404" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1af5258bf128c18afbb9712ad7230dad8e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::unimposeNeumannBC</definition>
        <argsstring>(int, MF &amp;) const</argsstring>
        <name>unimposeNeumannBC</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>MF &amp;</type>
        </param>
        <briefdescription>
<para>This is needed for our nodal projection solver. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="407" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="407" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1aaa73c9a5abc4c1289c181dc297906221" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::applyInhomogNeumannTerm</definition>
        <argsstring>(int, MF &amp;) const</argsstring>
        <name>applyInhomogNeumannTerm</name>
        <reimplementedby refid="classamrex_1_1MLCellABecLapT_1ae96c2381214550fc17f99eeac401eeee">applyInhomogNeumannTerm</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>MF &amp;</type>
        </param>
        <briefdescription>
<para>Extra terms introduced when we treat inhomogeneous Nuemann BC as homogeneous. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="410" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="410" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1af3ef819a79d23afc7993a4f6750d7a1d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::applyOverset</definition>
        <argsstring>(int, MF &amp;) const</argsstring>
        <name>applyOverset</name>
        <reimplementedby refid="classamrex_1_1MLCellABecLapT_1a78233be19743ed1432077186937f51cc">applyOverset</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>MF &amp;</type>
        </param>
        <briefdescription>
<para>for overset solver only </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="413" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="413" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1ad86c06dbaa4556184fb4dea08186e3c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::scaleRHS</definition>
        <argsstring>(int, MF &amp;) const</argsstring>
        <name>scaleRHS</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>MF &amp;</type>
        </param>
        <briefdescription>
<para>scale RHS to fix solvability </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="416" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="416" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a94c2f24c3e40ca7b09e7757d94d009af" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MLLinOpT_1a2c1dedd6f4eccfcbb62d5b5dd3256f86" kindref="member">RT</ref> &gt;</type>
        <definition>virtual Vector&lt;RT&gt; amrex::MLLinOpT&lt; MF &gt;::getSolvabilityOffset</definition>
        <argsstring>(int, int, MF const &amp;) const</argsstring>
        <name>getSolvabilityOffset</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1a08e68e2870cd7367dd09d2ef777261b3">getSolvabilityOffset</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>MF const &amp;</type>
        </param>
        <briefdescription>
<para>get offset for fixing solvability </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="419" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="419" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a9b6ac2fe55b5951ef0aee9cfdf3e56c0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::fixSolvabilityByOffset</definition>
        <argsstring>(int, int, MF &amp;, Vector&lt; RT &gt; const &amp;) const</argsstring>
        <name>fixSolvabilityByOffset</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1ac44f404584644c6cb3f7548de48206d0">fixSolvabilityByOffset</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>MF &amp;</type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MLLinOpT_1a2c1dedd6f4eccfcbb62d5b5dd3256f86" kindref="member">RT</ref> &gt; const &amp;</type>
        </param>
        <briefdescription>
<para>fix solvability by subtracting offset from RHS </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="423" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="423" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1af8740f5bcf25e80b3e074a99be681c47" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::prepareForSolve</definition>
        <argsstring>()=0</argsstring>
        <name>prepareForSolve</name>
        <reimplementedby refid="classamrex_1_1MLALaplacianT_1a72d228dbde4801d9b4086a2dc94779c6">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBNodeFDLaplacian_1ad5475aafb15a2e53a6dada12839c27c9">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1a16a71281b7dfd14b0f89a2c50fc327bb">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeABecLaplacian_1aa9e73a4d8720519ab2cecb3cd62c5d9b">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1a339396bc771f5e6b9e630746d0c7e0ab">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeTensorLaplacian_1ab2886d51be38082d20a26e35ddbf3b28">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLPoissonT_1a46fe8bdcadd6679f29d19971eeb19242">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a9e8e4689f0e0f349f5a29708c224360c">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacianT_1a5c7e2382421d34818b66ccaba2e9ba95">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellABecLapT_1acff16f567dc8c5c30be1337318235e45">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1a8201ce95349a35448ba37366eabc518b">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a10d9a42df59b0c48c0de0bc3a2b41cca">prepareForSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a997cf1a004e76b021a262f35a834da32">prepareForSolve</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="426" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1ae4208159e7121c341be4c40f148563ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLLinOpT&lt; MF &gt;::isSingular</definition>
        <argsstring>(int amrlev) const =0</argsstring>
        <name>isSingular</name>
        <reimplementedby refid="classamrex_1_1MLALaplacianT_1aa59148993a6c569354845306245c8ab0">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLPoissonT_1a908ed94e88ef21f70373a16c1665229d">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacianT_1a25f78b91eada0f84dfce92d458f9082a">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1acd759cc5cbf540fbcc5114f2a092ef60">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1ae961a84e4d91aa6ff69bbfcd65f22e9c">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBNodeFDLaplacian_1afdc35cf0e4f9853590f3857b567c5aaf">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1aea991638ae9cea1583bd4101bb22d1d9">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeABecLaplacian_1a76eb50b8a4a8f096f99ae5a15041a2e5">isSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a994dcb4070bfd07513129c584419e148">isSingular</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <briefdescription>
<para>Is it singular on given AMR level? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="429" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a8a5fce59ba5bb0e9eb9d65e8615050ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLLinOpT&lt; MF &gt;::isBottomSingular</definition>
        <argsstring>() const =0</argsstring>
        <name>isBottomSingular</name>
        <reimplementedby refid="classamrex_1_1MLALaplacianT_1a4b5b9e0e1b0f97052557e4045c85ad8c">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBNodeFDLaplacian_1a1ddc66c86313eb322b25f378139bc6d0">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBTensorOp_1ac2ad630180b0745bdf96664c696731fa">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeABecLaplacian_1a7f735d6386e3974aa751d6ba3a4f0b4c">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLPoissonT_1a3e11b6d8928e597b0146fcccfa45fd05">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLTensorOp_1a30d559613d6da25a22923fbc03163f82">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacianT_1add466d8a308f474217d0b7bbf5528a12">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1adbf568e3e1892791a245ca22fe2d0002">isBottomSingular</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a24c4a3663f7c10dfe3b70fdf6f815809">isBottomSingular</reimplementedby>
        <briefdescription>
<para>Is the bottom of MG singular? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="431" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1adc521ed02a450f7efc4d24f18d8ee7aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classamrex_1_1MLLinOpT_1a2c1dedd6f4eccfcbb62d5b5dd3256f86" kindref="member">RT</ref></type>
        <definition>virtual RT amrex::MLLinOpT&lt; MF &gt;::xdoty</definition>
        <argsstring>(int amrlev, int mglev, const MF &amp;x, const MF &amp;y, bool local) const =0</argsstring>
        <name>xdoty</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1a7c044db51cc603481135fb0d75e43e90">xdoty</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
        </param>
        <briefdescription>
<para>x dot y, used by the bottom solver </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="434" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1aa3a7b3b61770119955aca3fa6885a839" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; MF &gt; &gt;</type>
        <definition>virtual std::unique_ptr&lt;MLLinOpT&lt;MF&gt; &gt; amrex::MLLinOpT&lt; MF &gt;::makeNLinOp</definition>
        <argsstring>(int grid_size) const =0</argsstring>
        <name>makeNLinOp</name>
        <reimplementedby refid="classamrex_1_1MLPoissonT_1af9a31f692af9979009765151942209b8">makeNLinOp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLABecLaplacianT_1ac03f98cb7e5a9397213306e9884a65b4">makeNLinOp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLALaplacianT_1aedb08ecb8e516d3fa40ec712cf39a36a">makeNLinOp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1acc092ce18db466c80a5e590b2b79b120">makeNLinOp</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1a982b2e2aa33ccb3354e8042a7a83e3ba">makeNLinOp</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>grid_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="436" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a2ae10763b783ce6190c161927125dd63" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::getFluxes</definition>
        <argsstring>(const Vector&lt; Array&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;, const Vector&lt; MF * &gt; &amp;, Location) const</argsstring>
        <name>getFluxes</name>
        <reimplementedby refid="classamrex_1_1MLCellABecLapT_1a47c09599ba7bee546dfb637ac8962fa0">getFluxes</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF * &gt; &amp;</type>
        </param>
        <param>
          <type><ref refid="structamrex_1_1LinOpEnumType_1acc2058c2f5b3c370c08f75fc71ff3bb4" kindref="member">Location</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="438" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="438" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a4fc56d4aef22e014e4743cc6745f92e9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::getFluxes</definition>
        <argsstring>(const Vector&lt; MF * &gt; &amp;, const Vector&lt; MF * &gt; &amp;) const</argsstring>
        <name>getFluxes</name>
        <reimplementedby refid="classamrex_1_1MLCellABecLapT_1ad86670e0d6ce7f6cdc72e456fad67faf">getFluxes</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF * &gt; &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF * &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="443" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="443" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1aa9b2cbde953686aaf94f7f6442a0ea5c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLLinOpT&lt; MF &gt;::supportNSolve</definition>
        <argsstring>() const</argsstring>
        <name>supportNSolve</name>
        <reimplementedby refid="classamrex_1_1MLABecLaplacianT_1abb6062df17c9eec35484fa60924fa5a9">supportNSolve</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLPoissonT_1a9985a165b354d7d4366441c90f89bd4d">supportNSolve</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="476" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="476" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a4b8c0b3d1fd866b3b9a787bdcb056e77" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::copyNSolveSolution</definition>
        <argsstring>(MF &amp;, MF const &amp;) const</argsstring>
        <name>copyNSolveSolution</name>
        <reimplementedby refid="classamrex_1_1MLABecLaplacianT_1adfd3a48893737214b12ed5e95b17f1e3">copyNSolveSolution</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLPoissonT_1a38e4c472a2642a55ba84c2c3b42a8015">copyNSolveSolution</reimplementedby>
        <param>
          <type>MF &amp;</type>
        </param>
        <param>
          <type>MF const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="478" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="478" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a7766bf3ef48ac5508865ef5aa3ef49be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::postSolve</definition>
        <argsstring>(Vector&lt; MF &gt; &amp;) const</argsstring>
        <name>postSolve</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="480" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="480" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a637cc2c475b32f4606119af00617d840" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classamrex_1_1MLLinOpT_1a2c1dedd6f4eccfcbb62d5b5dd3256f86" kindref="member">RT</ref></type>
        <definition>virtual RT amrex::MLLinOpT&lt; MF &gt;::normInf</definition>
        <argsstring>(int amrlev, MF const &amp;mf, bool local) const =0</argsstring>
        <name>normInf</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1a6207e307cf8edda53498feebe2abb2e3">normInf</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="482" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1aaef6b6d5b5aa06ad781f7c81b996ad78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::averageDownAndSync</definition>
        <argsstring>(Vector&lt; MF &gt; &amp;sol) const =0</argsstring>
        <name>averageDownAndSync</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1a118fb8de26be373907091016e1207645">averageDownAndSync</reimplementedby>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF &gt; &amp;</type>
          <declname>sol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="484" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1aef8fc9c922b0b1c599fa369eabec080c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::avgDownResAmr</definition>
        <argsstring>(int clev, MF &amp;cres, MF const &amp;fres) const =0</argsstring>
        <name>avgDownResAmr</name>
        <reimplementedby refid="classamrex_1_1MLCellLinOpT_1a33f2c8cbf69e58cbe60e9be048181f5d">avgDownResAmr</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>clev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>cres</declname>
        </param>
        <param>
          <type>MF const &amp;</type>
          <declname>fres</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="486" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a08f1cfd6afc79121fce39e027f15cac5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLLinOpT&lt; MF &gt;::avgDownResMG</definition>
        <argsstring>(int clev, MF &amp;cres, MF const &amp;fres) const</argsstring>
        <name>avgDownResMG</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>clev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>cres</declname>
        </param>
        <param>
          <type>MF const &amp;</type>
          <declname>fres</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="487" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1447" bodyend="1467"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a1666fe3156e40b2fbd7a44166f70ce11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOpT&lt; MF &gt;::isMFIterSafe</definition>
        <argsstring>(int amrlev, int mglev1, int mglev2) const</argsstring>
        <name>isMFIterSafe</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev1</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="489" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1471" bodyend="1475"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a09c567773980f90aa59d90d3235ded9c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLLinOpT&lt; MF &gt;::NAMRLevels</definition>
        <argsstring>() const noexcept</argsstring>
        <name>NAMRLevels</name>
        <briefdescription>
<para>Return the number of AMR levels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="492" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="492" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1ad1697410f7ce33223a511796bbf9273f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLLinOpT&lt; MF &gt;::NMGLevels</definition>
        <argsstring>(int amrlev) const noexcept</argsstring>
        <name>NMGLevels</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <briefdescription>
<para>Return the number of MG levels at given AMR level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="495" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="495" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a02b3d2ea4535daf60276e9014571f955" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::MLLinOpT&lt; MF &gt;::Geom</definition>
        <argsstring>(int amr_lev, int mglev=0) const noexcept</argsstring>
        <name>Geom</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amr_lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="497" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="497" bodyend="497"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a10ebb5d290f3579d4c3e69aa56cf6251" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
        <definition>const Vector&lt;int&gt;&amp; amrex::MLLinOpT&lt; MF &gt;::AMRRefRatio</definition>
        <argsstring>() const noexcept</argsstring>
        <name>AMRRefRatio</name>
        <briefdescription>
<para>Return AMR refinement ratios. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="573" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="573" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1ae88bc615f7fa178e54ea32899aae6506" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLLinOpT&lt; MF &gt;::AMRRefRatio</definition>
        <argsstring>(int amr_lev) const noexcept</argsstring>
        <name>AMRRefRatio</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amr_lev</declname>
        </param>
        <briefdescription>
<para>Return AMR refinement ratio at given AMR level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="576" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="576" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a3ca782a47b55ca765b4fd9eeda174d36" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1MLLinOpT_1aa3a86c1d0b6dcdc16c55798848842dd8" kindref="member">FAB</ref> &gt; const  *</type>
        <definition>FabFactory&lt;FAB&gt; const* amrex::MLLinOpT&lt; MF &gt;::Factory</definition>
        <argsstring>(int amr_lev, int mglev=0) const noexcept</argsstring>
        <name>Factory</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amr_lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="578" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="578" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a60f337c8a71be69643d62c774a536dcd" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="classamrex_1_1MLLinOpT_1a6dce9b9c92850fb742b131ba66f934d6" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt;</type>
        <definition>GpuArray&lt;BCType,AMREX_SPACEDIM&gt; amrex::MLLinOpT&lt; MF &gt;::LoBC</definition>
        <argsstring>(int icomp=0) const noexcept</argsstring>
        <name>LoBC</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="582" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="582" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1ae6a081e88ffb4aafb123a7eb644ebd72" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; <ref refid="classamrex_1_1MLLinOpT_1a6dce9b9c92850fb742b131ba66f934d6" kindref="member">BCType</ref>, AMREX_SPACEDIM &gt;</type>
        <definition>GpuArray&lt;BCType,AMREX_SPACEDIM&gt; amrex::MLLinOpT&lt; MF &gt;::HiBC</definition>
        <argsstring>(int icomp=0) const noexcept</argsstring>
        <name>HiBC</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>icomp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="587" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="587" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a647cd4352c3719aa23545a8e0f88b562" prot="protected" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOpT&lt; MF &gt;::hasBC</definition>
        <argsstring>(BCType bct) const noexcept</argsstring>
        <name>hasBC</name>
        <param>
          <type><ref refid="classamrex_1_1MLLinOpT_1a6dce9b9c92850fb742b131ba66f934d6" kindref="member">BCType</ref></type>
          <declname>bct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="593" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1171" bodyend="1182"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1afdb203f24caba5241fa95fad173cfae7" prot="protected" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOpT&lt; MF &gt;::hasInhomogNeumannBC</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hasInhomogNeumannBC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="594" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1186" bodyend="1189"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a40cc3ea13c4a150195a6198e33f1eac2" prot="protected" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOpT&lt; MF &gt;::hasRobinBC</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hasRobinBC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="595" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1193" bodyend="1196"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1aaa1fde319e32db3c05ca0f7fd944c111" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLLinOpT&lt; MF &gt;::supportRobinBC</definition>
        <argsstring>() const noexcept</argsstring>
        <name>supportRobinBC</name>
        <reimplementedby refid="classamrex_1_1MLABecLaplacianT_1a4fda1e7c51f0f57be99c0d9a8d94f9f9">supportRobinBC</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a26c05859556a13779ff0efcb84c92f91">supportRobinBC</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="597" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="597" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1ae0ca480e28c3c9c318f0e4d5beee0143" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool amrex::MLLinOpT&lt; MF &gt;::supportInhomogNeumannBC</definition>
        <argsstring>() const noexcept</argsstring>
        <name>supportInhomogNeumannBC</name>
        <reimplementedby refid="classamrex_1_1MLCellABecLapT_1ac7b687cd9603d112b33b92f2047f663f">supportInhomogNeumannBC</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="598" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="598" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a56ed51708c4e70b4ec224f4d0c2f2ff9" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOpT&lt; MF &gt;::isBottomActive</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isBottomActive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="603" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="603" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a2859b0cddde955b30ccf90c0af86e897" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::MLLinOpT&lt; MF &gt;::BottomCommunicator</definition>
        <argsstring>() const noexcept</argsstring>
        <name>BottomCommunicator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="605" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="605" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a2ac85c71c7e15137bd62cbfd04cc52ed" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::MLLinOpT&lt; MF &gt;::Communicator</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Communicator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="606" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="606" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a51edb661205b9d4b77b5acab32d17cd2" prot="protected" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOpT&lt; MF &gt;::setCoarseFineBCLocation</definition>
        <argsstring>(const RealVect &amp;cloc) noexcept</argsstring>
        <name>setCoarseFineBCLocation</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>cloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="608" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="608" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a33e77669d6f0da47f28959678db508e4" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOpT&lt; MF &gt;::doAgglomeration</definition>
        <argsstring>() const noexcept</argsstring>
        <name>doAgglomeration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="610" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="610" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1add56650e9ecd05e16a7f2f71bcbe7c9b" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOpT&lt; MF &gt;::doConsolidation</definition>
        <argsstring>() const noexcept</argsstring>
        <name>doConsolidation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="611" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="611" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1aa99dea32527b34287aa64542b5545256" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOpT&lt; MF &gt;::doSemicoarsening</definition>
        <argsstring>() const noexcept</argsstring>
        <name>doSemicoarsening</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="612" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="612" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a107c8a8b4f0b4d5209357ab3a8225671" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOpT&lt; MF &gt;::isCellCentered</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isCellCentered</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="614" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="614" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1afb48e62b81e97ddffb92d7b7cea09c55" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLLinOpT&lt; MF &gt;::make</definition>
        <argsstring>(Vector&lt; Vector&lt; MF &gt; &gt; &amp;mf, IntVect const &amp;ng) const</argsstring>
        <name>make</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; MF &gt; &gt; &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="616" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1376" bodyend="1386"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a223df72e572182f58b611c220487fe20" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>MF</type>
        <definition>MF amrex::MLLinOpT&lt; MF &gt;::make</definition>
        <argsstring>(int amrlev, int mglev, IntVect const &amp;ng) const</argsstring>
        <name>make</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="618" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1390" bodyend="1395"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a457c82b4259eab9916ca4e5f4493b373" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>MF</type>
        <definition>MF amrex::MLLinOpT&lt; MF &gt;::makeAlias</definition>
        <argsstring>(MF const &amp;mf) const</argsstring>
        <name>makeAlias</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="620" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1399" bodyend="1402"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a9991da8ff85055f29349c9f5b8246c65" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>MF</type>
        <definition>MF amrex::MLLinOpT&lt; MF &gt;::makeCoarseMG</definition>
        <argsstring>(int amrlev, int mglev, IntVect const &amp;ng) const</argsstring>
        <name>makeCoarseMG</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="622" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1406" bodyend="1414"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a44952a0322f09ae53fe7e26669f85de1" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>MF</type>
        <definition>MF amrex::MLLinOpT&lt; MF &gt;::makeCoarseAmr</definition>
        <argsstring>(int famrlev, IntVect const &amp;ng) const</argsstring>
        <name>makeCoarseAmr</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>famrlev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="624" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1418" bodyend="1425"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a46477d4e418960292da4f442741541b6" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1MLLinOpT_1aa3a86c1d0b6dcdc16c55798848842dd8" kindref="member">FAB</ref> &gt; &gt;</type>
        <definition>virtual std::unique_ptr&lt;FabFactory&lt;FAB&gt; &gt; amrex::MLLinOpT&lt; MF &gt;::makeFactory</definition>
        <argsstring>(int, int) const</argsstring>
        <name>makeFactory</name>
        <reimplementedby refid="classamrex_1_1MLEBABecLap_1a6c7b9e7f8c29dd4ca75b7254f81409d1">makeFactory</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="626" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="626" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a43fcad8e24531044114e9572beb28323" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLLinOpT&lt; MF &gt;::resizeMultiGrid</definition>
        <argsstring>(int new_size)</argsstring>
        <name>resizeMultiGrid</name>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1aea2a34ccbaafa9697d789fb85def8f98">resizeMultiGrid</reimplementedby>
        <reimplementedby refid="classamrex_1_1MLNodeLinOp_1abe8255742bf5756e6659344cfa6ef5c4">resizeMultiGrid</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="630" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1429" bodyend="1443"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a894d1f80e83452c32470d42e05947e13" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::MLLinOpT&lt; MF &gt;::hasHiddenDimension</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hasHiddenDimension</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="632" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="632" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1aa0c3b0c5a4e23b9248d18138229aec76" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLLinOpT&lt; MF &gt;::hiddenDirection</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hiddenDirection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="633" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="633" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1abb542d962e83dd7479852f83fd3575bf" prot="protected" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::MLLinOpT&lt; MF &gt;::compactify</definition>
        <argsstring>(Box const &amp;b) const noexcept</argsstring>
        <name>compactify</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="634" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1200" bodyend="1218"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a3f7e812180f57035bfe85cb7d10b26e9" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt;</type>
        <definition>Array4&lt;T&gt; amrex::MLLinOpT&lt; MF &gt;::compactify</definition>
        <argsstring>(Array4&lt; T &gt; const &amp;a) const noexcept</argsstring>
        <name>compactify</name>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="637" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="637" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a28402657d9216f6ef38835ab562ee58b" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::MLLinOpT&lt; MF &gt;::get_d0</definition>
        <argsstring>(T const &amp;dx, T const &amp;dy, T const &amp;) const noexcept</argsstring>
        <name>get_d0</name>
        <param>
          <type>T const &amp;</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>T const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="651" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="651" bodyend="658"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1adad8c3e9a304cc409d473b2d44aa4520" prot="protected" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::MLLinOpT&lt; MF &gt;::get_d1</definition>
        <argsstring>(T const &amp;, T const &amp;dy, T const &amp;dz) const noexcept</argsstring>
        <name>get_d1</name>
        <param>
          <type>T const &amp;</type>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>dy</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>dz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="661" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="661" bodyend="668"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a5aa9449241f9867021b4d5300284a76a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOpT&lt; MF &gt;::defineGrids</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const Vector&lt; FabFactory&lt; FAB &gt; const * &gt; &amp;a_factory)</argsstring>
        <name>defineGrids</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1MLLinOpT_1aa3a86c1d0b6dcdc16c55798848842dd8" kindref="member">FAB</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="672" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="732" bodyend="1093"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a50ba282a5c21fc37d3b1c286e726abc8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOpT&lt; MF &gt;::defineBC</definition>
        <argsstring>()</argsstring>
        <name>defineBC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="676" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1097" bodyend="1105"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1ad05360dc7ba30a94505918519dea299c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__ccse-mpi_8H_1a161d2f0d69c09838316e4ea9a74f02d7" kindref="member">MPI_Comm</ref></type>
        <definition>MPI_Comm amrex::MLLinOpT&lt; MF &gt;::makeSubCommunicator</definition>
        <argsstring>(const DistributionMapping &amp;dm)</argsstring>
        <name>makeSubCommunicator</name>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="680" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1307" bodyend="1342"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a6b2ce3775a4c209860db63635f969640" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::MLLinOpT&lt; MF &gt;::checkPoint</definition>
        <argsstring>(std::string const &amp;) const</argsstring>
        <name>checkPoint</name>
        <reimplementedby refid="classamrex_1_1MLNodeLaplacian_1ad798a370022ba9766ddc8423c8c3cdf6">checkPoint</reimplementedby>
        <param>
          <type>std::string const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="682" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="682" bodyend="684"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a54590ff0d7670660d6520c753f6fbbbb" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOpT&lt; MF &gt;::makeAgglomeratedDMap</definition>
        <argsstring>(const Vector&lt; BoxArray &gt; &amp;ba, Vector&lt; DistributionMapping &gt; &amp;dm)</argsstring>
        <name>makeAgglomeratedDMap</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="677" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1222" bodyend="1247"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLLinOpT_1a6574c3f3a840f96723f9a10ccb2eeb69" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLLinOpT&lt; MF &gt;::makeConsolidatedDMap</definition>
        <argsstring>(const Vector&lt; BoxArray &gt; &amp;ba, Vector&lt; DistributionMapping &gt; &amp;dm, int ratio, int strategy)</argsstring>
        <name>makeConsolidatedDMap</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ratio</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>strategy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="678" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="1251" bodyend="1303"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="10">
        <label>amrex::MLNodeLinOp&lt; MultiFab &gt;</label>
        <link refid="classamrex_1_1MLNodeLinOp"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>amrex::MLEBTensorOp</label>
        <link refid="classamrex_1_1MLEBTensorOp"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>amrex::MLNodeABecLaplacian</label>
        <link refid="classamrex_1_1MLNodeABecLaplacian"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>amrex::MLEBNodeFDLaplacian</label>
        <link refid="classamrex_1_1MLEBNodeFDLaplacian"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::MLCellABecLapT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLCellABecLapT"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::MLABecLaplacianT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLABecLaplacianT"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>amrex::MLNodeTensorLaplacian</label>
        <link refid="classamrex_1_1MLNodeTensorLaplacian"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>amrex::MLALaplacianT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLALaplacianT"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::MLTensorOp&lt; MultiFab &gt;</label>
        <link refid="classamrex_1_1MLTensorOp"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>amrex::MLNodeLaplacian</label>
        <link refid="classamrex_1_1MLNodeLaplacian"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>amrex::MLPoissonT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLPoissonT"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLCellLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLCellLinOpT"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::MLLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLLinOpT"/>
      </node>
      <node id="7">
        <label>amrex::MLEBABecLap&lt; MultiFab &gt;</label>
        <link refid="classamrex_1_1MLEBABecLap"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="9">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="9" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>T</label>
      </node>
      <node id="7">
        <label>Real</label>
      </node>
      <node id="3">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>std::unique_ptr&lt; amrex::MLLinOpT::CommContainer &gt;</label>
      </node>
      <node id="11">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="6" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; FAB &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::Vector&lt; std::unique_ptr&lt; MF &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="1">
        <label>amrex::MLLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLLinOpT"/>
        <childnode refid="2" relation="usage">
          <edgelabel>levelbc_raii</edgelabel>
          <edgelabel>robin_a_raii</edgelabel>
          <edgelabel>robin_b_raii</edgelabel>
          <edgelabel>robin_f_raii</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_raii_comm</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_hibc_orig</edgelabel>
          <edgelabel>m_lobc</edgelabel>
          <edgelabel>m_lobc_orig</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" line="94" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLLinOp.H" bodystart="95" bodyend="690"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLLinOpT_1a10ebb5d290f3579d4c3e69aa56cf6251" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae88bc615f7fa178e54ea32899aae6506" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7aea888ca18e54df62e7dffc8378d872" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaa73c9a5abc4c1289c181dc297906221" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>applyInhomogNeumannTerm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a776e1a7593f09fc231b80f3ce7e6468e" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af3ef819a79d23afc7993a4f6750d7a1d" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>applyOverset</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaef6b6d5b5aa06ad781f7c81b996ad78" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>averageDownAndSync</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad8919e9d2b5197ed2743008e28b76253" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aef8fc9c922b0b1c599fa369eabec080c" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>avgDownResAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a08f1cfd6afc79121fce39e027f15cac5" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>avgDownResMG</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad3f214e6e55b5de314dd5725a4148467" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6dce9b9c92850fb742b131ba66f934d6" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2859b0cddde955b30ccf90c0af86e897" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6b2ce3775a4c209860db63635f969640" prot="private" virt="virtual"><scope>amrex::MLLinOpT</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2ac85c71c7e15137bd62cbfd04cc52ed" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abb542d962e83dd7479852f83fd3575bf" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3f7e812180f57035bfe85cb7d10b26e9" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a5461a389d02ccf6df7e36a583fada6fa" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a593b5b7825da6be93b4383ccf86654e6" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4b8c0b3d1fd866b3b9a787bdcb056e77" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>copyNSolveSolution</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6f18465de0228f8ec4609e9e45367e5d" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abe69b9ebe0a04b3da502ac8606871680" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a50ba282a5c21fc37d3b1c286e726abc8" prot="private" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>defineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a5aa9449241f9867021b4d5300284a76a" prot="private" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>defineGrids</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a33e77669d6f0da47f28959678db508e4" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOpT_1add56650e9ecd05e16a7f2f71bcbe7c9b" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa99dea32527b34287aa64542b5545256" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>doSemicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adb9b0f44a3e66fbefa2310385747427b" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>enforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa3a86c1d0b6dcdc16c55798848842dd8" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>FAB</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3ca782a47b55ca765b4fd9eeda174d36" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9b6ac2fe55b5951ef0aee9cfdf3e56c0" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>fixSolvabilityByOffset</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a02b3d2ea4535daf60276e9014571f955" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a28402657d9216f6ef38835ab562ee58b" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>get_d0</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adad8c3e9a304cc409d473b2d44aa4520" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>get_d1</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a5e588d148e2672c3e82c8f40d5826671" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af823f5b435d2f329595b333c82080e35" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>getEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2ae10763b783ce6190c161927125dd63" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4fc56d4aef22e014e4743cc6745f92e9" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4e2a07d995c0fc8d2dfe5be544501eea" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4f45234f33332dbaf9406e4daa01b475" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afe8257f1157b08104c622bedb11b0d00" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a94c2f24c3e40ca7b09e7757d94d009af" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>getSolvabilityOffset</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a647cd4352c3719aa23545a8e0f88b562" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>hasBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a894d1f80e83452c32470d42e05947e13" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>hasHiddenDimension</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afdb203f24caba5241fa95fad173cfae7" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>hasInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a40cc3ea13c4a150195a6198e33f1eac2" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>hasRobinBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae6a081e88ffb4aafb123a7eb644ebd72" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>HiBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa0c3b0c5a4e23b9248d18138229aec76" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>hiddenDirection</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad0412f399e1e29e200a2451b371b0133" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>info</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae3e6c0eaba362960b0c4292c92667ad4" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>interpAssign</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1c8739b0c8b387f82d1c4cb3ba3ea509" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1983bfc60c0de1f62e0d6f1747b030c8" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>interpolationAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a56ed51708c4e70b4ec224f4d0c2f2ff9" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a8a5fce59ba5bb0e9eb9d65e8615050ea" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a107c8a8b4f0b4d5209357ab3a8225671" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1666fe3156e40b2fbd7a44166f70ce11" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>isMFIterSafe</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae4208159e7121c341be4c40f148563ad" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3ac078eb634767e8e812746b8327a6b5" prot="private" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>levelbc_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a60f337c8a71be69643d62c774a536dcd" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>LoBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ac1e86de83222345c43a378d8698c9543" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a520a29dd5773acdba2c227d316e059a4" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aee13b9d32b909adb7903586bfa352855" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1a730552d4db500b99496712dec21038" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1b5ecb2a824287420c4f6acf8540b2f6" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a02f8f07d9d724566c7aea603ea1248a6" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3bf0a8559fbed2ec5297f97590e92cb0" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_coarse_data_for_bc_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a52e548305943a2d3a1b1731eb5855b73" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a67d38036b0d30275047637a1ab739ca6" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a452827d7dc1f2d84d701248f05e908af" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a0e1db3374227c3c6043734d42bbbc795" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3f65a4345945e648b7170635a33c9557" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_do_semicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1375eac46dcbfeb8155a251b904cc727" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a437d5bd996be47153207c90d286b336c" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa83ed4b753b00606bcdff3573a6f0824" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a07a2cce97f1c77f36f8a241090543b8e" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aab42ad785f4263767af0a0e7306cdf8a" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4458bc19263fdcf39df3665681ce3aef" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad073f92f684b4d5ea20718fbc396ef40" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2cf9f506d5cee3aeaaae8b9930e7866d" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_hibc_orig</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1144a9c3d743270ff29c8e9f582581c0" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9f2e0c10c385f9bee16af5fed5f4e9c9" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a726dec103c10ea9c84e649b9c8200767" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_lobc_orig</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abc7eaafcc5804d269386c6bdbd13181d" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afe9761ce7b771e51e0b47d415779ce93" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a64262a62291404dab652353158886cce" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa96812cd049f02fe827fc1573fa0626e" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3e96c4035b1315b80c6301329695f86e" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afb48e62b81e97ddffb92d7b7cea09c55" prot="protected" virt="virtual"><scope>amrex::MLLinOpT</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a223df72e572182f58b611c220487fe20" prot="protected" virt="virtual"><scope>amrex::MLLinOpT</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a54590ff0d7670660d6520c753f6fbbbb" prot="private" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>makeAgglomeratedDMap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a457c82b4259eab9916ca4e5f4493b373" prot="protected" virt="virtual"><scope>amrex::MLLinOpT</scope><name>makeAlias</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a44952a0322f09ae53fe7e26669f85de1" prot="protected" virt="virtual"><scope>amrex::MLLinOpT</scope><name>makeCoarseAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9991da8ff85055f29349c9f5b8246c65" prot="protected" virt="virtual"><scope>amrex::MLLinOpT</scope><name>makeCoarseMG</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6574c3f3a840f96723f9a10ccb2eeb69" prot="private" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>makeConsolidatedDMap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a46477d4e418960292da4f442741541b6" prot="protected" virt="virtual"><scope>amrex::MLLinOpT</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa3a7b3b61770119955aca3fa6885a839" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad05360dc7ba30a94505918519dea299c" prot="private" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>makeSubCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abddb56c317b794cc672b446046784d95" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a958be92529c763a85a81c3fc03e1e5af" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4ab72cdcf8c7d1746bd1e03fac99d808" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abf470fae49c59ccd4cbc058ebfdab2a2" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>mg_coarsen_ratio_vec</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adb9b30d3eda7f6dd1d77740f58674c84" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aae889d9617524451e9e7daeb85f6d22c" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>MLABecLaplacianT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7d74bb864e0e5e676d689302876b3da3" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>MLCGSolverT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ab768833f0df0eb419284243a6940153e" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aae73abc3efc9dcc4b381ff020e043c68" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a709f5c12d16e1e5e191a1d56df622173" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad167454adc7ef3f671c1c51aa863f5d1" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>MLMGT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4314fcd3e8cf089757c3c88e923f9a2b" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>MLPoissonT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2fb16a53d8b6d9dd08306f89a535c617" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a09c567773980f90aa59d90d3235ded9c" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7e2d1058dd843b67192b1aa489e112b6" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1aeab1e2fe2f589ecdc3b9751208a22a" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad1697410f7ce33223a511796bbf9273f" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaa66bfea39287ead35be91ec940d0bb1" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a637cc2c475b32f4606119af00617d840" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>normInf</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aba8d3e06373e96ddac7da02928522796" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9399276c8cadba0d0e513200ab8758c9" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7766bf3ef48ac5508865ef5aa3ef49be" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>postSolve</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af8740f5bcf25e80b3e074a99be681c47" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a52cceb132c5de0aad73ee774d41b4d0d" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a43fcad8e24531044114e9572beb28323" prot="protected" virt="virtual"><scope>amrex::MLLinOpT</scope><name>resizeMultiGrid</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aee3f3df0d83ef41c04eb1eef68f41797" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afdb609a7a4b9ea229e7b9cc89a8751f7" prot="private" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>robin_a_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a90e6517d0ff6dee31c92101a9249de67" prot="private" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>robin_b_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a451681732629cb75f6a4a9ba29799f44" prot="private" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>robin_f_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2c1dedd6f4eccfcbb62d5b5dd3256f86" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>RT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad86c06dbaa4556184fb4dea08186e3c9" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>scaleRHS</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1645f2059f3e9816fedfa8b45315d484" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad832dbc5dd9ed90db2136815c1c1a190" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a51edb661205b9d4b77b5acab32d17cd2" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a065b7216ffbd4136592b893066feabc9" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a472da4d3c20cee50275d2790e18bf046" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7dd25019053e84389e2d9226fc5816ed" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a28dec45d870edf5fba713b18c53542cf" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>setEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1ca9d659068ffdf4e8d78d035aa9450c" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adc2c4cd3ccc03f6c0f958429b1d1f093" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2cea879bd6717f7b2f425b1c1aeff724" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a135bc97332faf6e4f7f864b45c2b0b69" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a03189718c2f8cd40c34158bb4ddf6120" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4c4d498e615acd98b90da20eaee2a529" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a246fbbc22c78e2327ea936e3433fddf1" prot="public" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae0ca480e28c3c9c318f0e4d5beee0143" prot="protected" virt="virtual"><scope>amrex::MLLinOpT</scope><name>supportInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa9b2cbde953686aaf94f7f6442a0ea5c" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>supportNSolve</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaa1fde319e32db3c05ca0f7fd944c111" prot="protected" virt="virtual"><scope>amrex::MLLinOpT</scope><name>supportRobinBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a53280186d7512080b4c6b42bc52c6f72" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af5258bf128c18afbb9712ad7230dad8e" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>unimposeNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a81443deada65588ba7a71e191def4aa0" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>update</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a685caf14f09300309d306d01150eae9a" prot="protected" virt="non-virtual"><scope>amrex::MLLinOpT</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adc521ed02a450f7efc4d24f18d8ee7aa" prot="public" virt="pure-virtual"><scope>amrex::MLLinOpT</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ac7718af80beb24d049ffad1239e31384" prot="public" virt="virtual"><scope>amrex::MLLinOpT</scope><name>~MLLinOpT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
