<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1ParticleContainer" kind="class" language="C++" prot="public">
    <compoundname>amrex::ParticleContainer</compoundname>
    <derivedcompoundref refid="classamrex_1_1AmrParticleContainer" prot="public" virt="non-virtual">amrex::AmrParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</derivedcompoundref>
    <includes refid="AMReX__Particles_8H" local="no">AMReX_Particles.H</includes>
    <templateparamlist>
      <param>
        <type>int</type>
        <declname>NStructReal</declname>
        <defname>NStructReal</defname>
      </param>
      <param>
        <type>int</type>
        <declname>NStructInt</declname>
        <defname>NStructInt</defname>
        <defval>0</defval>
      </param>
      <param>
        <type>int</type>
        <declname>NArrayReal</declname>
        <defname>NArrayReal</defname>
        <defval>0</defval>
      </param>
      <param>
        <type>int</type>
        <declname>NArrayInt</declname>
        <defname>NArrayInt</defname>
        <defval>0</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer_1aec73ed00e2482cb245a8c6a2ac7bea8e" prot="public" static="no">
        <type><ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; NStructReal, NStructInt &gt;</type>
        <definition>using amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleType =  Particle&lt;NStructReal, NStructInt&gt;</definition>
        <argsstring></argsstring>
        <name>ParticleType</name>
        <briefdescription>
<para>The type of Particles we hold. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="149" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer_1ac7c4beada431be321733272a131425fd" prot="public" static="no">
        <type><ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; NStructReal+NArrayReal, NStructInt+NArrayInt &gt;</type>
        <definition>using amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::SuperParticleType =  Particle&lt;NStructReal+NArrayReal, NStructInt+NArrayInt&gt;</definition>
        <argsstring></argsstring>
        <name>SuperParticleType</name>
        <briefdescription>
<para>The type of the &quot;SuperParticle&quot; which stored all components in AoS form. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="151" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer_1aa415f73a03aab24593ffe0d99075e329" prot="public" static="no">
        <type>typename <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; NStructReal, NStructInt &gt;::<ref refid="classamrex_1_1ParticleContainer_1aa415f73a03aab24593ffe0d99075e329" kindref="member">RealType</ref></type>
        <definition>using amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::RealType =  typename Particle&lt;NStructReal, NStructInt&gt;::RealType</definition>
        <argsstring></argsstring>
        <name>RealType</name>
        <briefdescription>
<para>The type of the Real data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="153" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer_1a37ecb4d391a3355e67d6a4341c2a9bc4" prot="public" static="no">
        <type><ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref>&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</type>
        <definition>using amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleContainerType =  ParticleContainer&lt;NStructReal, NStructInt, NArrayReal, NArrayInt&gt;</definition>
        <argsstring></argsstring>
        <name>ParticleContainerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="161" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer_1a9c8d796e15d37e7dad6efb3e9fdb4fca" prot="public" static="no">
        <type><ref refid="structamrex_1_1ParticleTile" kindref="compound">ParticleTile</ref>&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</type>
        <definition>using amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleTileType =  ParticleTile&lt;NStructReal, NStructInt, NArrayReal, NArrayInt&gt;</definition>
        <argsstring></argsstring>
        <name>ParticleTileType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="162" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer_1a6edead171e873a9e37cfe2491511ba59" prot="public" static="no">
        <type><ref refid="structamrex_1_1ParticleInitType" kindref="compound">ParticleInitType</ref>&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</type>
        <definition>using amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleInitData =  ParticleInitType&lt;NStructReal, NStructInt, NArrayReal, NArrayInt&gt;</definition>
        <argsstring></argsstring>
        <name>ParticleInitData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="163" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer_1a2c82102263d5f301111f85c31af9bd8a" prot="public" static="no">
        <type>std::map&lt; std::pair&lt; int, int &gt;, <ref refid="classamrex_1_1ParticleContainer_1a9c8d796e15d37e7dad6efb3e9fdb4fca" kindref="member">ParticleTileType</ref> &gt;</type>
        <definition>using amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleLevel =  std::map&lt;std::pair&lt;int, int&gt;, ParticleTileType&gt;</definition>
        <argsstring></argsstring>
        <name>ParticleLevel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A single level worth of particles is indexed (grid id, tile id) for both SoA and AoS data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="167" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer_1a34292c05dc95e39064c392382af0f4cd" prot="public" static="no">
        <type>typename <ref refid="structamrex_1_1ParticleTile_1ab10926418fb9524de6ea3f822892e1d3" kindref="member">ParticleTileType::AoS</ref></type>
        <definition>using amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::AoS =  typename ParticleTileType::AoS</definition>
        <argsstring></argsstring>
        <name>AoS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="168" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer_1a687d4752e63683529eecb23e0f25d3ff" prot="public" static="no">
        <type>typename <ref refid="structamrex_1_1ParticleTile_1ae6b0bb596eb811ce93f8ba2ec6b46589" kindref="member">ParticleTileType::SoA</ref></type>
        <definition>using amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::SoA =  typename ParticleTileType::SoA</definition>
        <argsstring></argsstring>
        <name>SoA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="169" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer_1a0e7c4cbdae01b74faec61771f467d029" prot="public" static="no">
        <type>typename SoA::RealVector</type>
        <definition>using amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::RealVector =  typename SoA::RealVector</definition>
        <argsstring></argsstring>
        <name>RealVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="171" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer_1a6771cf4d68f77e662aa8ef3dc3e10230" prot="public" static="no">
        <type>typename SoA::IntVector</type>
        <definition>using amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::IntVector =  typename SoA::IntVector</definition>
        <argsstring></argsstring>
        <name>IntVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="172" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer_1aaee7b7f9a52218b0ae9efcc9f1c5be58" prot="public" static="no">
        <type>typename AoS::ParticleVector</type>
        <definition>using amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleVector =  typename AoS::ParticleVector</definition>
        <argsstring></argsstring>
        <name>ParticleVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="173" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer_1a3d8a82738e731377cd4c172b7aefac5f" prot="public" static="no">
        <type><ref refid="namespaceamrex_1_1Cuda_1a897b2b181edf87b86f91b08b8a0c8991" kindref="member">Gpu::ManagedDeviceVector</ref>&lt; char &gt;</type>
        <definition>using amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::CharVector =  Gpu::ManagedDeviceVector&lt;char&gt;</definition>
        <argsstring></argsstring>
        <name>CharVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="174" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer_1aefa5810a30720321a45b5467946720ff" prot="public" static="no">
        <type><ref refid="namespaceamrex_1_1Cuda_1a88a8840f4a86a379c21df2da5b4e077d" kindref="member">Gpu::PolymorphicDeviceVector</ref>&lt; char &gt;</type>
        <definition>using amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::SendBuffer =  Gpu::PolymorphicDeviceVector&lt;char&gt;</definition>
        <argsstring></argsstring>
        <name>SendBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="175" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer_1ae1ddeffd58e837ef523fecacdb249bbd" prot="public" static="no">
        <type><ref refid="classamrex_1_1ParIter" kindref="compound">ParIter</ref>&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</type>
        <definition>using amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParIterType =  ParIter&lt;NStructReal, NStructInt, NArrayReal, NArrayInt&gt;</definition>
        <argsstring></argsstring>
        <name>ParIterType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="176" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParticleContainer_1af071b16aa6e432e29bd3125422873800" prot="public" static="no">
        <type><ref refid="classamrex_1_1ParConstIter" kindref="compound">ParConstIter</ref>&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</type>
        <definition>using amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParConstIterType =  ParConstIter&lt;NStructReal, NStructInt, NArrayReal, NArrayInt&gt;</definition>
        <argsstring></argsstring>
        <name>ParConstIterType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="177" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="177" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1ParticleContainer_1a2bafd5f149b05c71e77f8a76f265de46" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class ParIterBase&lt; true, NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</definition>
        <argsstring></argsstring>
        <name>ParIterBase&lt; true, NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="116" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1ParticleContainer_1aa4fc68de6148ace63b82ffc571e8a5d2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class ParIterBase&lt; false, NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</definition>
        <argsstring></argsstring>
        <name>ParIterBase&lt; false, NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="116" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="145" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a3745cc53b964fc08052fe340d1fd42b2" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref></type>
        <definition>RealDescriptor amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleRealDescriptor</definition>
        <argsstring></argsstring>
        <name>ParticleRealDescriptor</name>
        <initializer>= <ref refid="classamrex_1_1FPC_1a3e122a19b07bc732bf83c360354ef2a4" kindref="member">FPC::Native64RealDescriptor</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="158" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1ab9f454ac348d292cb7834eb189d45f76" prot="public" static="no" mutable="no">
        <type>std::vector&lt; bool &gt;</type>
        <definition>std::vector&lt;bool&gt; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::communicate_real_comp</definition>
        <argsstring></argsstring>
        <name>communicate_real_comp</name>
        <briefdescription>
<para>struct-of-array stuff </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="848" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="848" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a6b59c2f3c8342b421deeb74380a46175" prot="public" static="no" mutable="no">
        <type>std::vector&lt; bool &gt;</type>
        <definition>std::vector&lt;bool&gt; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::communicate_int_comp</definition>
        <argsstring></argsstring>
        <name>communicate_int_comp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="849" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="849" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1ad99c12c6f4382d0e38c1fd95625b518e" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::do_tiling</definition>
        <argsstring></argsstring>
        <name>do_tiling</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="851" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="851" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a433e6240ebcad3866f30555496ab418f" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::tile_size</definition>
        <argsstring></argsstring>
        <name>tile_size</name>
        <initializer>{ <ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(1024000,8,8) }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="852" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="852" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a1c7e6f19b1640c0b4980d2d7fa3ad15e" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; int &gt;</type>
        <definition>amrex::Vector&lt;int&gt; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::neighbor_procs</definition>
        <argsstring></argsstring>
        <name>neighbor_procs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="916" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="916" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1ad155f9c3e0ced8900ebda12d45bab1dd" prot="protected" static="no" mutable="yes">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt;iMultiFab&gt; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::redistribute_mask_ptr</definition>
        <argsstring></argsstring>
        <name>redistribute_mask_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="968" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="968" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1afa4f544ea8b970dfc267cd965468cc81" prot="protected" static="no" mutable="yes">
        <type>int</type>
        <definition>int amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::redistribute_mask_nghost</definition>
        <argsstring></argsstring>
        <name>redistribute_mask_nghost</name>
        <initializer>= std::numeric_limits&lt;int&gt;::<ref refid="namespaceamrex_1a6d4aa02eb1ece2b795273e1ccbfd1805" kindref="member">min</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="969" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="969" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a53b0b658192ecf9453776e49b9a76843" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1ParticleBufferMap" kindref="compound">ParticleBufferMap</ref></type>
        <definition>ParticleBufferMap amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::m_buffer_map</definition>
        <argsstring></argsstring>
        <name>m_buffer_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="972" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="972" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a68c842aac5e81aa1c36c35d5ce1799be" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::m_verbose</definition>
        <argsstring></argsstring>
        <name>m_verbose</name>
        <briefdescription>
<para>The member data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="975" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="975" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a53bab1e7b78d5f15ac215168f72fd770" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
        <definition>ParGDBBase* amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::m_gdb</definition>
        <argsstring></argsstring>
        <name>m_gdb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="976" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="976" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a13427e94f92d61f4639b5076f7f71d55" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref></type>
        <definition>ParGDB amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::m_gdb_object</definition>
        <argsstring></argsstring>
        <name>m_gdb_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="977" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="977" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a03b2c956029810b305eea345617ad6f7" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::levelDirectoriesCreated</definition>
        <argsstring></argsstring>
        <name>levelDirectoriesCreated</name>
        <briefdescription>
<para>-<mdash/> variables for i/o optimization saved for pre and post checkpoint </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="981" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="981" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1acb1ee952f82bdf31959c8d72cbfb454b" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::usePrePost</definition>
        <argsstring></argsstring>
        <name>usePrePost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="982" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="982" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1ad95c19743d9fafcf24f7b157ae5dae7b" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::doUnlink</definition>
        <argsstring></argsstring>
        <name>doUnlink</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="983" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="983" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a90b5037a7968afc7d25bcecf94463900" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::maxnextidPrePost</definition>
        <argsstring></argsstring>
        <name>maxnextidPrePost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="984" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="984" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1ace382ba1157b559d2ef5ff00fbca36e2" prot="protected" static="no" mutable="yes">
        <type>int</type>
        <definition>int amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::nOutFilesPrePost</definition>
        <argsstring></argsstring>
        <name>nOutFilesPrePost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="985" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="985" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1aa1d938ace39436b8ce17da3ac8e371a3" prot="protected" static="no" mutable="no">
        <type>long</type>
        <definition>long amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::nparticlesPrePost</definition>
        <argsstring></argsstring>
        <name>nparticlesPrePost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="986" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="986" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a6e7c1ff537295e739af9e43819ba4636" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; long &gt;</type>
        <definition>Vector&lt;long&gt; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::nParticlesAtLevelPrePost</definition>
        <argsstring></argsstring>
        <name>nParticlesAtLevelPrePost</name>
        <briefdescription>
<para>-<mdash/> [level] </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="987" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="987" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a9d8fe1d047d61a92b7a295b40d2ce33a" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;int&gt; &gt; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::whichPrePost</definition>
        <argsstring></argsstring>
        <name>whichPrePost</name>
        <briefdescription>
<para>-<mdash/> [level] </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="988" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="988" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a20f76f3abbc086a48f21791a386aaf8a" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;int&gt; &gt; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::countPrePost</definition>
        <argsstring></argsstring>
        <name>countPrePost</name>
        <briefdescription>
<para>-<mdash/> [level] </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="989" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="989" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a3ae8b90bce42ffba3df8257ea4c50c75" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; long &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;long&gt; &gt; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::wherePrePost</definition>
        <argsstring></argsstring>
        <name>wherePrePost</name>
        <briefdescription>
<para>-<mdash/> [level] </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="990" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="990" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1addbdf8245abc71b69878bdf71946636d" prot="protected" static="no" mutable="yes">
        <type>std::string</type>
        <definition>std::string amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::HdrFileNamePrePost</definition>
        <argsstring></argsstring>
        <name>HdrFileNamePrePost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="991" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="991" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a98129e6f756bf24d39487b5fbaf54568" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;</type>
        <definition>Vector&lt;std::string&gt; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::filePrefixPrePost</definition>
        <argsstring></argsstring>
        <name>filePrefixPrePost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="992" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="992" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a2e417921acd00358a3af55e11d2ed0e5" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::m_runtime_comps_defined</definition>
        <argsstring></argsstring>
        <name>m_runtime_comps_defined</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="1050" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="1050" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1adb02eee87d9bbd80a80ff1fbb0fb1d64" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::m_num_runtime_real</definition>
        <argsstring></argsstring>
        <name>m_num_runtime_real</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="1051" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="1051" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a0031cc138f125cdaad369157691c4270" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::m_num_runtime_int</definition>
        <argsstring></argsstring>
        <name>m_num_runtime_int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="1052" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="1052" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a243921584a4cf66e26df7f2104ce79b1" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::particle_size</definition>
        <argsstring></argsstring>
        <name>particle_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="1054" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="1054" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a09a8f0a93ae94e2c92927635258b0ee5" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::superparticle_size</definition>
        <argsstring></argsstring>
        <name>superparticle_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="1054" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="1054" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a61ac370a6cc648a787b43ad6110156bc" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::num_real_comm_comps</definition>
        <argsstring></argsstring>
        <name>num_real_comm_comps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="1055" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="1055" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a1677be256793e993c7adbfdae3c30b2e" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::num_int_comm_comps</definition>
        <argsstring></argsstring>
        <name>num_int_comm_comps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="1055" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="1055" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a4fa9365dbc47e60f255cec1ce3f19ecc" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1ParticleContainer_1a2c82102263d5f301111f85c31af9bd8a" kindref="member">ParticleLevel</ref> &gt;</type>
        <definition>Vector&lt;ParticleLevel&gt; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::m_particles</definition>
        <argsstring></argsstring>
        <name>m_particles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="1056" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="1056" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainer_1a623f1158041f9dc802cc4cc295c37054" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;MultiFab&gt; &gt; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::m_dummy_mf</definition>
        <argsstring></argsstring>
        <name>m_dummy_mf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="1057" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="1057" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1aedac68717a73a118a10f48a8b8ffcd8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleContainer</definition>
        <argsstring>()</argsstring>
        <name>ParticleContainer</name>
        <briefdescription>
<para>Default constructor - construct an empty particle container that has no concept of a level hierarchy. Must be properly initialized later. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="181" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="181" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1aa6e20b1d1f2261f62e16046cf3634708" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleContainer</definition>
        <argsstring>(ParGDBBase *gdb)</argsstring>
        <name>ParticleContainer</name>
        <param>
          <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
          <declname>gdb</declname>
        </param>
        <briefdescription>
<para>Construct a particle container using a <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> object. The container will track changes in the grid structure of the <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> automatically. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gdb</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref>, which contains pointers to the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>, <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> objects that define the AMR hierarchy. Usually, this is generated by an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="201" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="201" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a8f1790c031a70dffef5f35699fa89091" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleContainer</definition>
        <argsstring>(const Geometry &amp;geom, const DistributionMapping &amp;dmap, const BoxArray &amp;ba)</argsstring>
        <name>ParticleContainer</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
<para>Construct a particle container using a given <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>, <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. Single level version. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> object, which describes the problem domain </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, which describes how the boxes are distributed onto MPI tasks </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>, which gives the set of grid boxes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="223" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="223" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a42909daffb4b1122122636ab736e7d3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleContainer</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; int &gt; &amp;rr)</argsstring>
        <name>ParticleContainer</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
<para>Construct a particle container using a given <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>, <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of refinement ratios. Multi-level version. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geom</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> objects, one for each level </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dmap</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of DistributionMappings, one for each level </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ba</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of BoxArrays, one for each level </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rr</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of integer refinement ratios, of size num_levels - 1. rr[n] gives the refinement ratio between levels n and n+1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="250" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="250" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ad5589a0d892cce53eb17d42dd06d6607" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleContainer</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; IntVect &gt; &amp;rr)</argsstring>
        <name>ParticleContainer</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
<para>Same as the above, but accepts different refinement ratios in each direction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geom</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> objects, one for each level </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dmap</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of DistributionMappings, one for each level </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ba</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of BoxArrays, one for each level </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rr</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> refinement ratios, of size num_levels - 1. rr[n] gives the refinement ratio between levels n and n+1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="277" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="277" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a19844f745bc06b0d50ed462e1645c7b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::~ParticleContainer</definition>
        <argsstring>()</argsstring>
        <name>~ParticleContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="308" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="308" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a7581c3c3cf4dbe1da5a913e767804a09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleContainer</definition>
        <argsstring>(const ParticleContainer &amp;)=delete</argsstring>
        <name>ParticleContainer</name>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="310" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a0e99a292ca5da900e62889ab9383384f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> &amp;</type>
        <definition>ParticleContainer&amp; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::operator=</definition>
        <argsstring>(const ParticleContainer &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ad92deea74184c862d25d3cf3b45817d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleContainer</definition>
        <argsstring>(ParticleContainer &amp;&amp;)=default</argsstring>
        <name>ParticleContainer</name>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a7b5d32ca999aed19e1821a13c67bf852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> &amp;</type>
        <definition>ParticleContainer&amp; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::operator=</definition>
        <argsstring>(ParticleContainer &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a441a49ae4ae6f0b5e733f84c0172af07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::Define</definition>
        <argsstring>(ParGDBBase *gdb)</argsstring>
        <name>Define</name>
        <param>
          <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
          <declname>gdb</declname>
        </param>
        <briefdescription>
<para>Define a default-constructed <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> using a <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> object. The container will track changes in the grid structure of the <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> automatically. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gdb</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a <ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref>, which contains pointers to the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>, <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> objects that define the AMR hierarchy. Usually, this is generated by an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="324" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="324" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a7c9fa09e3c86d45c0e1f1c7155261f96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::Define</definition>
        <argsstring>(const Geometry &amp;geom, const DistributionMapping &amp;dmap, const BoxArray &amp;ba)</argsstring>
        <name>Define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
<para>Define a default-constructed <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> using a <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> object. Single-level version. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> object, which describes the problem domain </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, which describes how the boxes are distributed onto MPI tasks </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>, which gives the set of grid boxes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="338" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="338" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a4d0835bde47ea596456304aacd9b376a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::Define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; int &gt; &amp;rr)</argsstring>
        <name>Define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
<para>Define a default-constructed <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> using a <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> object. Multi-level version. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geom</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> objects, one for each level </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dmap</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of DistributionMappings, one for each level </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ba</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of BoxArrays, one for each level </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rr</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> of integer refinement ratios, of size num_levels - 1. rr[n] gives the refinement ratio between levels n and n+1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="357" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="357" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a0b62f808d6d437d88f35d9bb03fa0819" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::SetParticleBoxArray</definition>
        <argsstring>(int lev, const BoxArray &amp;new_ba)</argsstring>
        <name>SetParticleBoxArray</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>new_ba</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondance will be broken here. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level on which to set the ba. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_ba</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="375" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="375" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a4f50be8d23d662dcc4472c7429510d89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::SetParticleDistributionMap</definition>
        <argsstring>(int lev, const DistributionMapping &amp;new_dmap)</argsstring>
        <name>SetParticleDistributionMap</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>new_dmap</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondance will be broken here. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level on which to set the dm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_dmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="385" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="385" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a32a1fcb2793ecfd8f31b0b114898e524" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray&amp; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleBoxArray</definition>
        <argsstring>(int lev) const </argsstring>
        <name>ParticleBoxArray</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> for a given level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="392" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="392" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1afee606df1de7128ab2ef442c1abfa60a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping&amp; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticleDistributionMap</definition>
        <argsstring>(int lev) const </argsstring>
        <name>ParticleDistributionMap</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> for a given level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="399" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="399" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a61c3f48daf2c5879f684daf431fec981" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::Geom</definition>
        <argsstring>(int lev) const </argsstring>
        <name>Geom</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> for a given level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="406" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="406" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ae28279a5f2e839b30021cf3b01d149a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::finestLevel</definition>
        <argsstring>() const </argsstring>
        <name>finestLevel</name>
        <briefdescription>
<para>the finest level actually defined for the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="409" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="409" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a18460ce73e84b83a29233319455996c8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::maxLevel</definition>
        <argsstring>() const </argsstring>
        <name>maxLevel</name>
        <briefdescription>
<para>the finest allowed level in the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref>, whether it is defined or not. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="412" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="412" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a2edf149588bf5390e8fc14ad2e64d7ba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::numLevels</definition>
        <argsstring>() const </argsstring>
        <name>numLevels</name>
        <briefdescription>
<para>the number of defined levels in the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="415" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="415" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a2be183949c39b61d2d506c1199ac3cf7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::numLocalTilesAtLevel</definition>
        <argsstring>(int lev) const </argsstring>
        <name>numLocalTilesAtLevel</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>The total number of tiles on this rank on this level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="418" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="418" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a1a4e9af04ab8e38d218d01e1f8e6f032" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
        <definition>const ParGDBBase* amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::GetParGDB</definition>
        <argsstring>() const </argsstring>
        <name>GetParGDB</name>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> object used to define this container (const version) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="421" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="421" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a0a89beaad4445b7f918a3ce59cb31a18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
        <definition>ParGDBBase* amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::GetParGDB</definition>
        <argsstring>()</argsstring>
        <name>GetParGDB</name>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> object used to define this container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="424" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="424" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ae6988ce9675107c1377a32706edb38ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::reserveData</definition>
        <argsstring>()</argsstring>
        <name>reserveData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="426" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="287" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a73a9685a51644f83bd92af8691ca0230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::resizeData</definition>
        <argsstring>()</argsstring>
        <name>resizeData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="427" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="296" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a12ad35f5b7401e94f35688a46dd46738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::RedefineDummyMF</definition>
        <argsstring>(int lev)</argsstring>
        <name>RedefineDummyMF</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="429" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="308" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1adee34fabfe6ba6542fad9607e2843ff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::InitFromAsciiFile</definition>
        <argsstring>(const std::string &amp;file, int extradata, const IntVect *Nrep=0)</argsstring>
        <name>InitFromAsciiFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>extradata</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> *</type>
          <declname>Nrep</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="431" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleInit.H" bodystart="6" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ac108830360927c2b81f70f79273f5c30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::InitFromBinaryFile</definition>
        <argsstring>(const std::string &amp;file, int extradata)</argsstring>
        <name>InitFromBinaryFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>extradata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="433" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleInit.H" bodystart="336" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1aa38b6a6a9072401b044d1a1998531bfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::InitFromBinaryMetaFile</definition>
        <argsstring>(const std::string &amp;file, int extradata)</argsstring>
        <name>InitFromBinaryMetaFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>extradata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="435" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleInit.H" bodystart="768" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ab625b5a4a0f0b861281f75c797c6787d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::InitRandom</definition>
        <argsstring>(long icount, unsigned long iseed, const ParticleInitData &amp;mass, bool serialize=false, RealBox bx=RealBox())</argsstring>
        <name>InitRandom</name>
        <param>
          <type>long</type>
          <declname>icount</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>iseed</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainer_1a6edead171e873a9e37cfe2491511ba59" kindref="member">ParticleInitData</ref> &amp;</type>
          <declname>mass</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>serialize</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref></type>
          <declname>bx</declname>
          <defval><ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>()</defval>
        </param>
        <briefdescription>
<para>/ / This initializes the particle container with icount randomly distributed / particles. If serialize is true, then the particles will all be generated / on the IO Process, and the particle positions will be broadcast to all / other process. If serialize is false, then the particle positions will be / randomly generated in parallel, which each process using the random seed / iseed + MyProc. The particles can be constrained to lie within the <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> / bx, if so desired. The default is the full domain. / </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>icount</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iseed</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mass</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serialize</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="454" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleInit.H" bodystart="805" bodyend="1085"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a78c63ad7c9a8ec65ce136664bdc7dacf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::InitRandomPerBox</definition>
        <argsstring>(long icount, unsigned long iseed, const ParticleInitData &amp;pdata)</argsstring>
        <name>InitRandomPerBox</name>
        <param>
          <type>long</type>
          <declname>icount</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>iseed</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainer_1a6edead171e873a9e37cfe2491511ba59" kindref="member">ParticleInitData</ref> &amp;</type>
          <declname>pdata</declname>
        </param>
        <briefdescription>
<para>/ / This initializes the container with icount randomly distributed particles / per box, using the random seed iseed. All the particles have the same data / and attributes, which are passed using the pdata struct. / / This routine is used when we want to replicate a box for a scaling study <ndash/> / within each box the distribution is random but the particle data is replicated / across all boxes in the container. The boxes are assumed to be those / on the coarsest level. / </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>icount</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iseed</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pdata</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="475" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleInit.H" bodystart="1090" bodyend="1182"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a23fef3ef39243107d38903a067b38bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::InitOnePerCell</definition>
        <argsstring>(Real x_off, Real y_off, Real z_off, const ParticleInitData &amp;pdata)</argsstring>
        <name>InitOnePerCell</name>
        <param>
          <type>Real</type>
          <declname>x_off</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>y_off</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>z_off</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainer_1a6edead171e873a9e37cfe2491511ba59" kindref="member">ParticleInitData</ref> &amp;</type>
          <declname>pdata</declname>
        </param>
        <briefdescription>
<para>/ / This initializes the particle container with one particle per cell, / where the other particle data and attributes are all contant. The / coarsest level is used to generate the particle positions. The particle / variable values are passed in through the pdata struct. The parameters / x_off, y_off, and z_off represent offsets between 0 and 1 that show / where inside the cells to place the particles. 0.5 means cell centered. / </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x_off</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y_off</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z_off</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pdata</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="493" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleInit.H" bodystart="1187" bodyend="1267"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a43c257d811d31372ec9aeb183a04831b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::InitNRandomPerCell</definition>
        <argsstring>(int n_per_cell, const ParticleInitData &amp;pdata)</argsstring>
        <name>InitNRandomPerCell</name>
        <param>
          <type>int</type>
          <declname>n_per_cell</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainer_1a6edead171e873a9e37cfe2491511ba59" kindref="member">ParticleInitData</ref> &amp;</type>
          <declname>pdata</declname>
        </param>
        <briefdescription>
<para>/ / This initializes the particle container with n_per_cell randomly / distributed particles per cell, where the other particle data and / and attributes are all constant. The cells on the coarsest level / are used to generate the particle positions. The particle variable / values are passed in through the pdata struct. / </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n_per_cell</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pdata</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="509" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleInit.H" bodystart="1272" bodyend="1402"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1af87210895f80e5c9851d5b8fa4330fd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::MoveRandom</definition>
        <argsstring>()</argsstring>
        <name>MoveRandom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="511" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="476" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a8ff12a8b622148daa96f435bbfc5acb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::MoveRandom</definition>
        <argsstring>(int level)</argsstring>
        <name>MoveRandom</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="513" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="490" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a5b610b558d1559e50c8edfaf7ed2ca27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::Increment</definition>
        <argsstring>(MultiFab &amp;mf, int level)</argsstring>
        <name>Increment</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="515" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="527" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a23a7c76d6e8f0f1b030e8a224bf42c43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::IncrementWithTotal</definition>
        <argsstring>(MultiFab &amp;mf, int level, bool local=false)</argsstring>
        <name>IncrementWithTotal</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="517" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="534" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1af1e4d4ca50e58f86f09f55943902bffa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::sumParticleMass</definition>
        <argsstring>(int rho_index, int level, bool local=false) const </argsstring>
        <name>sumParticleMass</name>
        <param>
          <type>int</type>
          <declname>rho_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>rho_index: rho index in rdata </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rho_index</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="527" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="598" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a8d0a48a32a6e15966ca61144fdaf661a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::Redistribute</definition>
        <argsstring>(int lev_min=0, int lev_max=-1, int nGrow=0, int local=0)</argsstring>
        <name>Redistribute</name>
        <param>
          <type>int</type>
          <declname>lev_min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>lev_max</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>nGrow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>local</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Redistribute puts all the particles back in the right places (for some value of right) </para>        </briefdescription>
        <detaileddescription>
<para>Assigns particles to the levels, grids, and tiles that contain their current positions. If periodic boundary conditions are used, those will be enforced here.</para><para>If Redistribute is called with default arguments, all particles will be placed on the finest level that covers their current positions.</para><para>The lev_min, lev_max, and nGrow flags are used to do proper checking for subcycling particles. The default values are fine for non-subcycling methods</para><para>The local flag controls whether this is <computeroutput>local</computeroutput> or <computeroutput>global</computeroutput> Redistribute. In a local Redistribute, particles can only have moved a certain distance since the last time <ref refid="classamrex_1_1ParticleContainer_1a8d0a48a32a6e15966ca61144fdaf661a" kindref="member">Redistribute()</ref> was called. Thus, communication only needs to happen between neighboring ranks. In a global Redistribute, the particles can potentially go from any rank to any rank. This usually happens after initialiation or when doing dynamic load balancing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nGrow</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="552" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="909" bodyend="923"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a22e1d8ca180b542ad1610173f3a28d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::SortParticlesByCell</definition>
        <argsstring>()</argsstring>
        <name>SortParticlesByCell</name>
        <briefdescription>
<para>Sort the particles on each tile by cell, using Fortran ordering. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="557" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="927" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a62c9b3ef7bf4765aa4cdf6dc4eaa2063" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::OK</definition>
        <argsstring>(int lev_min=0, int lev_max=-1, int nGrow=0) const </argsstring>
        <name>OK</name>
        <param>
          <type>int</type>
          <declname>lev_min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>lev_max</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>nGrow</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>OK checks that all particles are in the right places (for some value of right) </para>        </briefdescription>
        <detaileddescription>
<para>These flags are used to do proper checking for subcycling particles the default values are fine for non-subcycling methods</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nGrow</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="569" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1977" bodyend="1985"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a4dfd59beb5a1b5447126346737cdc2e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ByteSpread</definition>
        <argsstring>() const </argsstring>
        <name>ByteSpread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="571" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="438" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a146d49935caceb1a2816c8fb608930ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::NumberOfParticlesAtLevel</definition>
        <argsstring>(int level, bool only_valid=true, bool only_local=false) const </argsstring>
        <name>NumberOfParticlesAtLevel</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>only_valid</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>only_local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns # of particles at specified the level. </para>        </briefdescription>
        <detaileddescription>
<para>If &quot;only_valid&quot; is true it only counts valid particles.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>only_valid</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>only_local</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="582" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="409" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a71bc723a5da99ad7d6cc8ec96f7981b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; long &gt;</type>
        <definition>Vector&lt; long &gt; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::NumberOfParticlesInGrid</definition>
        <argsstring>(int level, bool only_valid=true, bool only_local=false) const </argsstring>
        <name>NumberOfParticlesInGrid</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>only_valid</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>only_local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="584" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="381" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a7a672776ab2c219caa7e2b3124596a41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::TotalNumberOfParticles</definition>
        <argsstring>(bool only_valid=true, bool only_local=false) const </argsstring>
        <name>TotalNumberOfParticles</name>
        <param>
          <type>bool</type>
          <declname>only_valid</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>only_local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns # of particles at all levels. </para>        </briefdescription>
        <detaileddescription>
<para>If &quot;only_valid&quot; is true it only counts valid particles.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>only_valid</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>only_local</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="594" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="367" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a8933b3680b986631fa58b64aabcc1056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::RemoveParticlesAtLevel</definition>
        <argsstring>(int level)</argsstring>
        <name>RemoveParticlesAtLevel</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>The Following methods are for managing Virtual and Ghost Particles. </para>        </briefdescription>
        <detaileddescription>
<para>Removes all particles at a given level</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="604" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="624" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a5e9f1af11b34f555dadfaea79db35f3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::RemoveParticlesNotAtFinestLevel</definition>
        <argsstring>()</argsstring>
        <name>RemoveParticlesNotAtFinestLevel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="606" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="637" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a70ef0c7366d807b3cfc148ed1c3e5a26" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::CreateVirtualParticles</definition>
        <argsstring>(int level, AoS &amp;virts) const </argsstring>
        <name>CreateVirtualParticles</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer_1a34292c05dc95e39064c392382af0f4cd" kindref="member">AoS</ref> &amp;</type>
          <declname>virts</declname>
        </param>
        <briefdescription>
<para>Creates virtual particles for a given level that represent in some capacity all particles at finer levels. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>virts</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="615" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="667" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a4a1c44fdf3e109f0ef2707a00810f0a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::CreateGhostParticles</definition>
        <argsstring>(int level, int ngrow, AoS &amp;ghosts) const </argsstring>
        <name>CreateGhostParticles</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer_1a34292c05dc95e39064c392382af0f4cd" kindref="member">AoS</ref> &amp;</type>
          <declname>ghosts</declname>
        </param>
        <briefdescription>
<para>Create ghost particles for a given level that are copies of particles near coarse-&gt;fine boundaries in level-1. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ngrow</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ghosts</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="625" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="795" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ae81d42996a0794aaca5e198f7b1179f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::AddParticlesAtLevel</definition>
        <argsstring>(AoS &amp;particles, int level, int nGrow=0)</argsstring>
        <name>AddParticlesAtLevel</name>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer_1a34292c05dc95e39064c392382af0f4cd" kindref="member">AoS</ref> &amp;</type>
          <declname>particles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nGrow</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Add particles from a pbox to the grid at this level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>particles</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nGrow</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="634" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1989" bodyend="2022"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a0090be98ea5068fd31672a06a7c74f5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::clearParticles</definition>
        <argsstring>()</argsstring>
        <name>clearParticles</name>
        <briefdescription>
<para>Clear all the particles in this container. This does not free memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="640" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="830" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a1472c0ff5f0f576e6d4d972f50b20115" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::copyParticles</definition>
        <argsstring>(const ParticleContainerType &amp;other, bool local=false)</argsstring>
        <name>copyParticles</name>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainer_1a37ecb4d391a3355e67d6a4341c2a9bc4" kindref="member">ParticleContainerType</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Copy particles from other to this <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref>. Will clear all the particles from this container first. local controls whether or not to call <ref refid="classamrex_1_1ParticleContainer_1a8d0a48a32a6e15966ca61144fdaf661a" kindref="member">Redistribute()</ref> after adding the particles. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="650" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="846" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a5e2e20340bf613d45dffb1ce3177c5e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::addParticles</definition>
        <argsstring>(const ParticleContainerType &amp;other, bool local=false)</argsstring>
        <name>addParticles</name>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainer_1a37ecb4d391a3355e67d6a4341c2a9bc4" kindref="member">ParticleContainerType</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Add particles from other to this <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref>. local controls whether or not to call Redistribute after adding the particles. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="658" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="856" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a812c8380cdc8d37bdb318c85fc88e04e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::WriteParticleRealData</definition>
        <argsstring>(void *data, size_t size, std::ostream &amp;os, const RealDescriptor &amp;rd) const </argsstring>
        <name>WriteParticleRealData</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="660" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="7" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ad556fa72e0f22533d5f90f641f4f2bce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ReadParticleRealData</definition>
        <argsstring>(void *data, size_t size, std::istream &amp;is, const RealDescriptor &amp;rd)</argsstring>
        <name>ReadParticleRealData</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="663" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="21" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a35914c8639272469d7423f7be9d96f57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::Checkpoint</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name) const </argsstring>
        <name>Checkpoint</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Writes a particle checkpoint to file, suitable for restarting. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="669" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="83" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a3ea620211137665221481b35d8e35347" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::Checkpoint</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name, bool is_checkpoint, const Vector&lt; std::string &gt; &amp;real_comp_names=Vector&lt; std::string &gt;(), const Vector&lt; std::string &gt; &amp;int_comp_names=Vector&lt; std::string &gt;()) const </argsstring>
        <name>Checkpoint</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>real_comp_names</declname>
          <defval><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>int_comp_names</declname>
          <defval><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt;()</defval>
        </param>
        <briefdescription>
<para>Older form of checkpoint, for reverse compatability. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="674" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="36" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a2887a24b0f9dca72ec22f4e52addca55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::WriteBinaryParticleData</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp, const Vector&lt; std::string &gt; &amp;real_comp_names, const Vector&lt; std::string &gt; &amp;int_comp_names) const </argsstring>
        <name>WriteBinaryParticleData</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>real_comp_names</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>int_comp_names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="678" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="236" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a04202c0398fb9dde3867ffaa49f9c724" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::CheckpointPre</definition>
        <argsstring>()</argsstring>
        <name>CheckpointPre</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="685" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="536" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a58b92af437a359f18810fb9f18b6683c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::CheckpointPost</definition>
        <argsstring>()</argsstring>
        <name>CheckpointPost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="687" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="592" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a2ddf26f00578c5221138fa5e44c04460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::Restart</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;file)</argsstring>
        <name>Restart</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Restart from checkpoint </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="692" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="810" bodyend="1071"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1af513b73d7827e554fa3eb68e359e4003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::Restart</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;file, bool is_checkpoint)</argsstring>
        <name>Restart</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Older version, for backwards compatability </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="697" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="802" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a1042daffa7e43cafbdfc0258fe0d22e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::WritePlotFile</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name) const </argsstring>
        <name>WritePlotFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This version of WritePlotFile writes all components and assigns component names </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="702" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="112" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1addc617bc2186cf542c25ba4d7aa29534" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::WritePlotFile</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name, const Vector&lt; std::string &gt; &amp;real_comp_names, const Vector&lt; std::string &gt; &amp;int_comp_names) const </argsstring>
        <name>WritePlotFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>real_comp_names</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>int_comp_names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This version of WritePlotFile writes all components and allows the user to specify the names of the components. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="708" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="141" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a861fedf2aeffefda28d7c099fab113cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::WritePlotFile</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name, const Vector&lt; std::string &gt; &amp;real_comp_names) const </argsstring>
        <name>WritePlotFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>real_comp_names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This version of WritePlotFile writes all components and allows the user to specify the names of the components. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="716" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="162" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a737b0ab65a446474c4217c6205a5cb3d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::WritePlotFile</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp) const </argsstring>
        <name>WritePlotFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This version of WritePlotFile assigns component names, but allows the user to pass in a vector of ints that toggle on / off the writing of specfic components. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="723" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="189" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a7a2626f845b2fde4e66e7d256d3e003a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::WritePlotFile</definition>
        <argsstring>(const std::string &amp;dir, const std::string &amp;name, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp, const Vector&lt; std::string &gt; &amp;real_comp_names, const Vector&lt; std::string &gt; &amp;int_comp_names) const </argsstring>
        <name>WritePlotFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>real_comp_names</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>int_comp_names</declname>
        </param>
        <briefdescription>
<para>This is the most general version of WritePlotFile, which takes component names and flags for whether to write each variable as components. Note that the user should pass in vectors containing names of all the componets, whether they are written or not. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="734" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="220" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a2cf9ca8d8c7aeeb9fc8465a6f8ddf740" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::WritePlotFilePre</definition>
        <argsstring>()</argsstring>
        <name>WritePlotFilePre</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="741" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="647" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a48ed8d81c408cc65cb7b8c6f21a32ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::WritePlotFilePost</definition>
        <argsstring>()</argsstring>
        <name>WritePlotFilePost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="743" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="656" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1afa652b6ccee3292f1567ac82d3e3ebab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::WriteAsciiFile</definition>
        <argsstring>(const std::string &amp;file)</argsstring>
        <name>WriteAsciiFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="745" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="1201" bodyend="1346"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ad811292435541ceff38cb6f09cc9b6a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::WriteCoarsenedAsciiFile</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>WriteCoarsenedAsciiFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="747" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="1350" bodyend="1496"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1aeed70d1b658b5fe9e82b19f53a4f4862" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::Verbose</definition>
        <argsstring>()</argsstring>
        <name>Verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="749" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="749" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a31677806416ae622294a0a8da91e8deb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::SetVerbose</definition>
        <argsstring>(int verbose)</argsstring>
        <name>SetVerbose</name>
        <param>
          <type>int</type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="751" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="751" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a36db1a2b4431f8e02dfda59ae1434b1e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1ParticleContainer_1a2c82102263d5f301111f85c31af9bd8a" kindref="member">ParticleLevel</ref> &gt; &amp;</type>
        <definition>const Vector&lt;ParticleLevel&gt;&amp; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::GetParticles</definition>
        <argsstring>() const </argsstring>
        <name>GetParticles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="753" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="753" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1adb23494a725f458cd1b235b0c1403b49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1ParticleContainer_1a2c82102263d5f301111f85c31af9bd8a" kindref="member">ParticleLevel</ref> &gt; &amp;</type>
        <definition>Vector&lt;ParticleLevel&gt;&amp; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::GetParticles</definition>
        <argsstring>()</argsstring>
        <name>GetParticles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="754" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="754" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a4e1386384687811d666ccb8575447659" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1ParticleContainer_1a2c82102263d5f301111f85c31af9bd8a" kindref="member">ParticleLevel</ref> &amp;</type>
        <definition>const ParticleLevel&amp; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::GetParticles</definition>
        <argsstring>(int lev) const </argsstring>
        <name>GetParticles</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="756" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="756" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1aefb0a30104bd23807d23fb40e485cf8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParticleContainer_1a2c82102263d5f301111f85c31af9bd8a" kindref="member">ParticleLevel</ref> &amp;</type>
        <definition>ParticleLevel&amp; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::GetParticles</definition>
        <argsstring>(int lev)</argsstring>
        <name>GetParticles</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="758" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="758" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a6e75b71866d56450d04a1c243d4c3cfb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1ParticleContainer_1a9c8d796e15d37e7dad6efb3e9fdb4fca" kindref="member">ParticleTileType</ref> &amp;</type>
        <definition>const ParticleTileType&amp; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticlesAt</definition>
        <argsstring>(int lev, int grid, int tile) const </argsstring>
        <name>ParticlesAt</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>grid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="760" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="760" bodyend="761"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1aca1ee98a4dce5d7301527e13dbd35eeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParticleContainer_1a9c8d796e15d37e7dad6efb3e9fdb4fca" kindref="member">ParticleTileType</ref> &amp;</type>
        <definition>ParticleTileType&amp; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticlesAt</definition>
        <argsstring>(int lev, int grid, int tile)</argsstring>
        <name>ParticlesAt</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>grid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="763" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="763" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ad24ca91ffbcdf3f474c0ce4e1c0f1c48" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="classamrex_1_1ParticleContainer_1a9c8d796e15d37e7dad6efb3e9fdb4fca" kindref="member">ParticleTileType</ref> &amp;</type>
        <definition>const ParticleTileType&amp; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticlesAt</definition>
        <argsstring>(int lev, const Iterator &amp;iter) const </argsstring>
        <name>ParticlesAt</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const Iterator &amp;</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="768" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="768" bodyend="769"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1acd785eb9f6acd5c201473cf9e9c246a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Iterator</type>
          </param>
        </templateparamlist>
        <type><ref refid="classamrex_1_1ParticleContainer_1a9c8d796e15d37e7dad6efb3e9fdb4fca" kindref="member">ParticleTileType</ref> &amp;</type>
        <definition>ParticleTileType&amp; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ParticlesAt</definition>
        <argsstring>(int lev, const Iterator &amp;iter)</argsstring>
        <name>ParticlesAt</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const Iterator &amp;</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="773" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="773" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1acbef5bef2e7bd9b1c3bea993ce4514d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParticleContainer_1a9c8d796e15d37e7dad6efb3e9fdb4fca" kindref="member">ParticleTileType</ref> &amp;</type>
        <definition>ParticleTileType&amp; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::DefineAndReturnParticleTile</definition>
        <argsstring>(int lev, int grid, int tile)</argsstring>
        <name>DefineAndReturnParticleTile</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>grid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="776" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="776" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ad8c4881ee78ae85368b508e5387e52d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::AssignDensity</definition>
        <argsstring>(int rho_index, Vector&lt; std::unique_ptr&lt; MultiFab &gt; &gt; &amp;mf_to_be_filled, int lev_min, int ncomp, int finest_level, int ngrow=2) const </argsstring>
        <name>AssignDensity</name>
        <param>
          <type>int</type>
          <declname>rho_index</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt; &amp;</type>
          <declname>mf_to_be_filled</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>finest_level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
<para>Functions depending the layout of the data. Use with caution. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rho_index</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mf_to_be_filled</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finest_level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ngrow</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="792" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrParticles.H" bodystart="14" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ae81487d8bc67dbfa4ab241a8f32d186a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::Interpolate</definition>
        <argsstring>(Vector&lt; std::unique_ptr&lt; MultiFab &gt; &gt; &amp;mesh_data, int lev_min, int lev_max)</argsstring>
        <name>Interpolate</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt; &amp;</type>
          <declname>mesh_data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="796" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="2167" bodyend="2174"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a0cfa715f33235a017da433fb9df6a2e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::InterpolateSingleLevel</definition>
        <argsstring>(MultiFab &amp;mesh_data, int lev)</argsstring>
        <name>InterpolateSingleLevel</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mesh_data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="799" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="2179" bodyend="2210"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a514e65157e2dfd98361e399c934c4a2f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::AssignCellDensitySingleLevel</definition>
        <argsstring>(int rho_index, MultiFab &amp;mf, int level, int ncomp=1, int particle_lvl_offset=0) const </argsstring>
        <name>AssignCellDensitySingleLevel</name>
        <param>
          <type>int</type>
          <declname>rho_index</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>particle_lvl_offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="801" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="2028" bodyend="2163"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a65a31505d0970f0f972d5653fdd8cf12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::moveKick</definition>
        <argsstring>(MultiFab &amp;acceleration, int level, Real timestep, Real a_new=1.0, Real a_half=1.0, int start_comp_for_accel=-1)</argsstring>
        <name>moveKick</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>acceleration</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>timestep</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a_new</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>Real</type>
          <declname>a_half</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>start_comp_for_accel</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="804" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="2220" bodyend="2305"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a97712d72564dbda7ac5b6b6ededf04a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::Index</definition>
        <argsstring>(const Particle&lt; NStructReal, NStructInt &gt; &amp;p, int lev) const </argsstring>
        <name>Index</name>
        <param>
          <type>const <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; NStructReal, NStructInt &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="808" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="67" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a8fa8583debe79010d5754a968b7a2552" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1ParticleLocData" kindref="compound">ParticleLocData</ref></type>
        <definition>ParticleLocData amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::Reset</definition>
        <argsstring>(ParticleType &amp;prt, bool update, bool verbose=true, ParticleLocData pld=ParticleLocData()) const </argsstring>
        <name>Reset</name>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer_1aec73ed00e2482cb245a8c6a2ac7bea8e" kindref="member">ParticleType</ref> &amp;</type>
          <declname>prt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>update</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>verbose</declname>
          <defval>true</defval>
        </param>
        <param>
          <type><ref refid="structamrex_1_1ParticleLocData" kindref="compound">ParticleLocData</ref></type>
          <declname>pld</declname>
          <defval><ref refid="structamrex_1_1ParticleLocData" kindref="compound">ParticleLocData</ref>()</defval>
        </param>
        <briefdescription>
<para>Updates a particle&apos;s location (Where), tries to periodic shift any particles that have left the domain. May need work (see inline comments) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prt</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>update</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbose</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pld</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="820" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="254" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ac2edb80997a975c0316a78c4c08962b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::PeriodicShift</definition>
        <argsstring>(ParticleType &amp;prt) const </argsstring>
        <name>PeriodicShift</name>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer_1aec73ed00e2482cb245a8c6a2ac7bea8e" kindref="member">ParticleType</ref> &amp;</type>
          <declname>prt</declname>
        </param>
        <briefdescription>
<para>Returns true if the particle was shifted. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prt</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="829" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="215" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1aaadbba0d36f06116fabb93b85a37d42a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref></type>
        <definition>MFIter amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::MakeMFIter</definition>
        <argsstring>(int lev, const MFItInfo &amp;info) const </argsstring>
        <name>MakeMFIter</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFItInfo" kindref="compound">MFItInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="831" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="831" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ae255930bd09dcffc5a5d8f5762507a55" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref></type>
        <definition>MFIter amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::MakeMFIter</definition>
        <argsstring>(int lev) const </argsstring>
        <name>MakeMFIter</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="836" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="836" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a8d677cd75c347dae13fb863e377b4e04" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref></type>
        <definition>MFIter amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::MakeMFIter</definition>
        <argsstring>(int lev, bool tile) const </argsstring>
        <name>MakeMFIter</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>tile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="841" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="841" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ad7bfacae6390e8cf1c80d24cc0f5b56d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::SetLevelDirectoriesCreated</definition>
        <argsstring>(bool tf)</argsstring>
        <name>SetLevelDirectoriesCreated</name>
        <param>
          <type>bool</type>
          <declname>tf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="854" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="854" bodyend="856"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a938f2a2146503550838e0255b4644047" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::SetUsePrePost</definition>
        <argsstring>(bool tf)</argsstring>
        <name>SetUsePrePost</name>
        <param>
          <type>bool</type>
          <declname>tf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="858" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="858" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a14e1efed19d20a6dde567f747c733aa9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::GetUsePrePost</definition>
        <argsstring>()</argsstring>
        <name>GetUsePrePost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="861" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="861" bodyend="863"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1addb677e3ecf4c180476b73b4231eb509" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::SetUseUnlink</definition>
        <argsstring>(bool tf)</argsstring>
        <name>SetUseUnlink</name>
        <param>
          <type>bool</type>
          <declname>tf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="865" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="865" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1afceaa107820b6654e34edd4c8a79d372" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::GetUseUnlink</definition>
        <argsstring>()</argsstring>
        <name>GetUseUnlink</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="869" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="869" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1afcfa4b3226447e29584bf9c609b7b405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::RedistributeCPU</definition>
        <argsstring>(int lev_min=0, int lev_max=-1, int nGrow=0, int local=0)</argsstring>
        <name>RedistributeCPU</name>
        <param>
          <type>int</type>
          <declname>lev_min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>lev_max</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>nGrow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>local</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="873" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1288" bodyend="1628"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a405049a333766dd8d8e4a8e244d4b715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::RedistributeGPU</definition>
        <argsstring>(int lev_min=0, int lev_max=-1, int nGrow=0, int local=0)</argsstring>
        <name>RedistributeGPU</name>
        <param>
          <type>int</type>
          <declname>lev_min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>lev_max</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>nGrow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>local</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="875" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1014" bodyend="1249"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a69e98c5ae9055383e3b290b25b58dbe0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::OKCPU</definition>
        <argsstring>(int lev_min=0, int lev_max=-1, int nGrow=0) const </argsstring>
        <name>OKCPU</name>
        <param>
          <type>int</type>
          <declname>lev_min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>lev_max</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>nGrow</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="877" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a79ee48f306fd7ba69527b310f9d69aca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::OKGPU</definition>
        <argsstring>(int lev_min=0, int lev_max=-1, int nGrow=0) const </argsstring>
        <name>OKGPU</name>
        <param>
          <type>int</type>
          <declname>lev_min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>lev_max</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>nGrow</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="879" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a93595817875a3846db6d2bcd42bfd48e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_same&lt; T, bool &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::AddRealComp</definition>
        <argsstring>(T communicate=true)</argsstring>
        <name>AddRealComp</name>
        <param>
          <type>T</type>
          <declname>communicate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="887" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="887" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a74de4251bff552fcfe88a007bff4dc96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename std::enable_if&lt; std::is_same&lt; T, bool &gt;::value, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::AddIntComp</definition>
        <argsstring>(T communicate=true)</argsstring>
        <name>AddIntComp</name>
        <param>
          <type>T</type>
          <declname>communicate</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="897" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="897" bodyend="903"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ae745531c931aadabc3620c50d91a7ae7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1ParticleBufferMap" kindref="compound">ParticleBufferMap</ref> &amp;</type>
        <definition>const ParticleBufferMap&amp; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::BufferMap</definition>
        <argsstring>() const </argsstring>
        <name>BufferMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="905" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="905" bodyend="905"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a313b845a6567dd527d04c879ddeafb8c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::NeighborProcs</definition>
        <argsstring>(int ngrow) const </argsstring>
        <name>NeighborProcs</name>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="907" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="907" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a0ccfb91513567f326eb6b4969b4ce60a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::OnSameGrids</definition>
        <argsstring>(int level, const MultiFab &amp;mf) const </argsstring>
        <name>OnSameGrids</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="912" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="912" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a225de1db7fe017ffc776d93c61e64efa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RTYPE</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ReadParticles</definition>
        <argsstring>(int cnt, int grd, int lev, std::ifstream &amp;ifs, int finest_level_in_file)</argsstring>
        <name>ReadParticles</name>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>grd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>ifs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>finest_level_in_file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleIO.H" line="1078" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="1078" bodyend="1197"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a70e8ce8b358ab7de7e423a5ce7d05447" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::Where</definition>
        <argsstring>(const ParticleType &amp;prt, ParticleLocData &amp;pld, int lev_min=0, int lev_max=-1, int nGrow=0, int local_grid=-1) const </argsstring>
        <name>Where</name>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainer_1aec73ed00e2482cb245a8c6a2ac7bea8e" kindref="member">ParticleType</ref> &amp;</type>
          <declname>prt</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1ParticleLocData" kindref="compound">ParticleLocData</ref> &amp;</type>
          <declname>pld</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev_min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>lev_max</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>nGrow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>local_grid</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Checks a particle&apos;s location on levels lev_min and higher. Returns false if the particle does not exist on that level. Only if lev_min == lev_max, nGrow can be &gt; 0 (i.e., including nGrow ghost cells). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prt</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pld</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nGrow</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_grid</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="931" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="84" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1abbf38c48b91649ffb5da36ca3e24a01c" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::EnforcePeriodicWhere</definition>
        <argsstring>(ParticleType &amp;prt, ParticleLocData &amp;pld, int lev_min=0, int lev_max=-1, int local_grid=-1) const </argsstring>
        <name>EnforcePeriodicWhere</name>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer_1aec73ed00e2482cb245a8c6a2ac7bea8e" kindref="member">ParticleType</ref> &amp;</type>
          <declname>prt</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1ParticleLocData" kindref="compound">ParticleLocData</ref> &amp;</type>
          <declname>pld</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev_min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>lev_max</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>local_grid</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Checks whether the particle has crossed a periodic boundary in such a way that it is on levels lev_min and higher. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prt</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pld</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_min</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lev_max</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_grid</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="945" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="147" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a79e3b55b52a11a3d2d6c546be080fa94" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::WriteParticles</definition>
        <argsstring>(int level, std::ofstream &amp;ofs, int fnum, Vector&lt; int &gt; &amp;which, Vector&lt; int &gt; &amp;count, Vector&lt; long &gt; &amp;where, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp) const </argsstring>
        <name>WriteParticles</name>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>ofs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fnum</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>which</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; long &gt; &amp;</type>
          <declname>where</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <briefdescription>
<para>Helper function for <ref refid="classamrex_1_1ParticleContainer_1a35914c8639272469d7423f7be9d96f57" kindref="member">Checkpoint()</ref> and <ref refid="classamrex_1_1ParticleContainer_1a1042daffa7e43cafbdfc0258fe0d22e7" kindref="member">WritePlotFile()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ofs</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fnum</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>which</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="958" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleIO.H" bodystart="665" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a225de1db7fe017ffc776d93c61e64efa" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class RTYPE</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::ReadParticles</definition>
        <argsstring>(int cnt, int grd, int lev, std::ifstream &amp;ifs, int finest_level_in_file)</argsstring>
        <name>ReadParticles</name>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>grd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>ifs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>finest_level_in_file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="963" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="1079" bodyend="1198"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1aa68b9885de02d650cf3626441b0c11a1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::SetParticleSize</definition>
        <argsstring>()</argsstring>
        <name>SetParticleSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="965" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="14" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a488b5a0ac231cfdea811c579cfe7a439" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::BuildRedistributeMask</definition>
        <argsstring>(int lev, int nghost=1) const </argsstring>
        <name>BuildRedistributeMask</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nghost</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="967" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1649" bodyend="1699"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ac0fd1a7e7bc38bd3aa5ff14a264e4f51" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::defineBufferMap</definition>
        <argsstring>() const </argsstring>
        <name>defineBufferMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="971" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1633" bodyend="1644"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a5bccb747039f092dc962598d04d44dd1" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::NumRuntimeRealComps</definition>
        <argsstring>() const </argsstring>
        <name>NumRuntimeRealComps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="1027" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="1027" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a33f8a4b1f9577723ba6ff469cb512b5b" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::NumRuntimeIntComps</definition>
        <argsstring>() const </argsstring>
        <name>NumRuntimeIntComps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="1028" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="1028" bodyend="1028"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a95c4060d41d8f287cf4ced5d46c7bd57" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::NumRealComps</definition>
        <argsstring>() const </argsstring>
        <name>NumRealComps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="1030" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="1030" bodyend="1030"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ae708158aa3c6c8bbb333a60cf06887d5" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::NumIntComps</definition>
        <argsstring>() const </argsstring>
        <name>NumIntComps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="1031" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="1031" bodyend="1031"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a48592b115a6f470dead23224ebeee123" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::particlePostLocate</definition>
        <argsstring>(ParticleType &amp;p, const ParticleLocData &amp;pld, const int lev)</argsstring>
        <name>particlePostLocate</name>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer_1aec73ed00e2482cb245a8c6a2ac7bea8e" kindref="member">ParticleType</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleLocData" kindref="compound">ParticleLocData</ref> &amp;</type>
          <declname>pld</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="1036" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="1036" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ac0db30253d3211299ca4060b95c2a531" prot="private" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::correctCellVectors</definition>
        <argsstring>(int old_index, int new_index, int grid, const ParticleType &amp;p)</argsstring>
        <name>correctCellVectors</name>
        <param>
          <type>int</type>
          <declname>old_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>new_index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>grid</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainer_1aec73ed00e2482cb245a8c6a2ac7bea8e" kindref="member">ParticleType</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="1039" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="1039" bodyend="1040"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1ad73f34e88289b2d40ccaa06f101dfb09" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::RedistributeMPI</definition>
        <argsstring>(std::map&lt; int, Vector&lt; char &gt; &gt; &amp;not_ours, int lev_min=0, int lev_max=0, int nGrow=0, int local=0)</argsstring>
        <name>RedistributeMPI</name>
        <param>
          <type>std::map&lt; int, <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char &gt; &gt; &amp;</type>
          <declname>not_ours</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev_min</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>lev_max</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>nGrow</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>local</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="1042" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="1704" bodyend="1973"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1aab7b351a2366e658e9be84c5a0393c3c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::locateParticle</definition>
        <argsstring>(ParticleType &amp;p, ParticleLocData &amp;pld, int lev_min, int lev_max, int nGrow, int local_grid=-1) const </argsstring>
        <name>locateParticle</name>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainer_1aec73ed00e2482cb245a8c6a2ac7bea8e" kindref="member">ParticleType</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1ParticleLocData" kindref="compound">ParticleLocData</ref> &amp;</type>
          <declname>pld</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev_min</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev_max</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nGrow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>local_grid</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="1045" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="326" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainer_1a3ff226eab3163a69157e3d447984af0e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="1048" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_ParticleContainerI.H" bodystart="33" bodyend="63"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A distributed container for Particles sorted onto the levels, grids, and tiles of a block-structured AMR hierarachy. </para>    </briefdescription>
    <detaileddescription>
<para>The data layout on a single tile is determined by the value of the following template parameters:</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>NStructReal</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of extra Real components in the particle struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NStructInt</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of extra integer components in the particle struct </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NArrayReal</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of extra Real components stored in struct-of-array form </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NArrayInt</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of extra integer components stored in struct-of-array form </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="5747">
        <label>amrex::AmrParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</label>
        <link refid="classamrex_1_1AmrParticleContainer"/>
        <childnode refid="5746" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5746">
        <label>amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</label>
        <link refid="classamrex_1_1ParticleContainer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5771">
        <label>std::vector&lt; amrex::BoxArray, std::allocator&lt; amrex::BoxArray &gt; &gt;</label>
      </node>
      <node id="5766">
        <label>amrex::ParGDB</label>
        <link refid="classamrex_1_1ParGDB"/>
        <childnode refid="5767" relation="public-inheritance">
        </childnode>
        <childnode refid="5768" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="5756" relation="usage">
          <edgelabel>m_rr</edgelabel>
        </childnode>
        <childnode refid="5770" relation="usage">
          <edgelabel>m_ba</edgelabel>
        </childnode>
        <childnode refid="5772" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
      </node>
      <node id="5751">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="5751" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="5752">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5753" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5773">
        <label>std::vector&lt; amrex::Geometry, std::allocator&lt; amrex::Geometry &gt; &gt;</label>
      </node>
      <node id="5755">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="5764">
        <label>amrex::Vector&lt; amrex::Vector&lt; int &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5765" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5768">
        <label>amrex::Vector&lt; amrex::DistributionMapping &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5769" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5756">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5757" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5758">
        <label>string</label>
      </node>
      <node id="5767">
        <label>amrex::ParGDBBase</label>
        <link refid="classamrex_1_1ParGDBBase"/>
      </node>
      <node id="5770">
        <label>amrex::Vector&lt; amrex::BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5771" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5760">
        <label>std::vector&lt; amrex::Vector&lt; long &gt;, std::allocator&lt; amrex::Vector&lt; long &gt; &gt; &gt;</label>
      </node>
      <node id="5774">
        <label>amrex::ParticleBufferMap</label>
        <link refid="classamrex_1_1ParticleBufferMap"/>
        <childnode refid="5775" relation="usage">
          <edgelabel>d_lev_offsets</edgelabel>
          <edgelabel>d_lev_gid_to_bucket</edgelabel>
        </childnode>
        <childnode refid="5768" relation="usage">
          <edgelabel>m_dm</edgelabel>
        </childnode>
        <childnode refid="5756" relation="usage">
          <edgelabel>m_lev_offsets</edgelabel>
          <edgelabel>m_proc_box_offsets</edgelabel>
          <edgelabel>m_bucket_to_pid</edgelabel>
          <edgelabel>m_bucket_to_lev</edgelabel>
          <edgelabel>m_bucket_to_gid</edgelabel>
          <edgelabel>m_lev_gid_to_bucket</edgelabel>
          <edgelabel>m_proc_box_counts</edgelabel>
        </childnode>
        <childnode refid="5770" relation="usage">
          <edgelabel>m_ba</edgelabel>
        </childnode>
      </node>
      <node id="5763">
        <label>std::vector&lt; ParticleLevel, std::allocator&lt; ParticleLevel &gt; &gt;</label>
      </node>
      <node id="5769">
        <label>std::vector&lt; amrex::DistributionMapping, std::allocator&lt; amrex::DistributionMapping &gt; &gt;</label>
      </node>
      <node id="5753">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="5749">
        <label>amrex::Vector&lt; long &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5750" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5757">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="5761">
        <label>amrex::RealDescriptor</label>
        <link refid="classamrex_1_1RealDescriptor"/>
        <childnode refid="5749" relation="usage">
          <edgelabel>fr</edgelabel>
        </childnode>
        <childnode refid="5756" relation="usage">
          <edgelabel>ord</edgelabel>
        </childnode>
      </node>
      <node id="5775">
        <label>amrex::PODVector&lt; int &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="5776" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5776">
        <label>std::allocator&lt; int &gt;</label>
      </node>
      <node id="5754">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5755" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5762">
        <label>amrex::Vector&lt; ParticleLevel &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5763" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5772">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5773" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5750">
        <label>std::vector&lt; long, std::allocator&lt; long &gt; &gt;</label>
      </node>
      <node id="5765">
        <label>std::vector&lt; amrex::Vector&lt; int &gt;, std::allocator&lt; amrex::Vector&lt; int &gt; &gt; &gt;</label>
      </node>
      <node id="5759">
        <label>amrex::Vector&lt; amrex::Vector&lt; long &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5760" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5748">
        <label>amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</label>
        <link refid="classamrex_1_1ParticleContainer"/>
        <childnode refid="5749" relation="usage">
          <edgelabel>nParticlesAtLevelPrePost</edgelabel>
        </childnode>
        <childnode refid="5751" relation="usage">
          <edgelabel>tile_size</edgelabel>
        </childnode>
        <childnode refid="5752" relation="usage">
          <edgelabel>m_dummy_mf</edgelabel>
        </childnode>
        <childnode refid="5754" relation="usage">
          <edgelabel>filePrefixPrePost</edgelabel>
        </childnode>
        <childnode refid="5756" relation="usage">
          <edgelabel>neighbor_procs</edgelabel>
        </childnode>
        <childnode refid="5758" relation="usage">
          <edgelabel>HdrFileNamePrePost</edgelabel>
        </childnode>
        <childnode refid="5759" relation="usage">
          <edgelabel>wherePrePost</edgelabel>
        </childnode>
        <childnode refid="5761" relation="usage">
          <edgelabel>ParticleRealDescriptor</edgelabel>
        </childnode>
        <childnode refid="5762" relation="usage">
          <edgelabel>m_particles</edgelabel>
        </childnode>
        <childnode refid="5764" relation="usage">
          <edgelabel>whichPrePost</edgelabel>
          <edgelabel>countPrePost</edgelabel>
        </childnode>
        <childnode refid="5766" relation="usage">
          <edgelabel>m_gdb_object</edgelabel>
        </childnode>
        <childnode refid="5774" relation="usage">
          <edgelabel>m_buffer_map</edgelabel>
        </childnode>
        <childnode refid="5767" relation="usage">
          <edgelabel>m_gdb</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" line="143" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particles.H" bodystart="142" bodyend="1058"/>
    <listofallmembers>
      <member refid="classamrex_1_1ParticleContainer_1a74de4251bff552fcfe88a007bff4dc96" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>AddIntComp</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a5e2e20340bf613d45dffb1ce3177c5e2" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>addParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ae81d42996a0794aaca5e198f7b1179f6" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>AddParticlesAtLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a93595817875a3846db6d2bcd42bfd48e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>AddRealComp</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a34292c05dc95e39064c392382af0f4cd" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>AoS</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a514e65157e2dfd98361e399c934c4a2f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>AssignCellDensitySingleLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ad8c4881ee78ae85368b508e5387e52d8" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>AssignDensity</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ae745531c931aadabc3620c50d91a7ae7" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>BufferMap</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a488b5a0ac231cfdea811c579cfe7a439" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>BuildRedistributeMask</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a4dfd59beb5a1b5447126346737cdc2e7" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ByteSpread</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a3d8a82738e731377cd4c172b7aefac5f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>CharVector</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a35914c8639272469d7423f7be9d96f57" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>Checkpoint</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a3ea620211137665221481b35d8e35347" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>Checkpoint</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a58b92af437a359f18810fb9f18b6683c" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>CheckpointPost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a04202c0398fb9dde3867ffaa49f9c724" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>CheckpointPre</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a0090be98ea5068fd31672a06a7c74f5e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>clearParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a6b59c2f3c8342b421deeb74380a46175" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>communicate_int_comp</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ab9f454ac348d292cb7834eb189d45f76" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>communicate_real_comp</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a1472c0ff5f0f576e6d4d972f50b20115" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>copyParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ac0db30253d3211299ca4060b95c2a531" prot="private" virt="virtual"><scope>amrex::ParticleContainer</scope><name>correctCellVectors</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a20f76f3abbc086a48f21791a386aaf8a" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>countPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a4a1c44fdf3e109f0ef2707a00810f0a0" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>CreateGhostParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a70ef0c7366d807b3cfc148ed1c3e5a26" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>CreateVirtualParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a441a49ae4ae6f0b5e733f84c0172af07" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a7c9fa09e3c86d45c0e1f1c7155261f96" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a4d0835bde47ea596456304aacd9b376a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainer_1acbef5bef2e7bd9b1c3bea993ce4514d2" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>DefineAndReturnParticleTile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ac0fd1a7e7bc38bd3aa5ff14a264e4f51" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>defineBufferMap</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ad99c12c6f4382d0e38c1fd95625b518e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>do_tiling</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ad95c19743d9fafcf24f7b157ae5dae7b" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>doUnlink</name></member>
      <member refid="classamrex_1_1ParticleContainer_1abbf38c48b91649ffb5da36ca3e24a01c" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>EnforcePeriodicWhere</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a98129e6f756bf24d39487b5fbaf54568" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>filePrefixPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ae28279a5f2e839b30021cf3b01d149a5" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>finestLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a61c3f48daf2c5879f684daf431fec981" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>Geom</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a1a4e9af04ab8e38d218d01e1f8e6f032" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>GetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a0a89beaad4445b7f918a3ce59cb31a18" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>GetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a36db1a2b4431f8e02dfda59ae1434b1e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>GetParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1adb23494a725f458cd1b235b0c1403b49" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>GetParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a4e1386384687811d666ccb8575447659" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>GetParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aefb0a30104bd23807d23fb40e485cf8a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>GetParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a14e1efed19d20a6dde567f747c733aa9" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>GetUsePrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1afceaa107820b6654e34edd4c8a79d372" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>GetUseUnlink</name></member>
      <member refid="classamrex_1_1ParticleContainer_1addbdf8245abc71b69878bdf71946636d" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>HdrFileNamePrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a5b610b558d1559e50c8edfaf7ed2ca27" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>Increment</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a23a7c76d6e8f0f1b030e8a224bf42c43" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>IncrementWithTotal</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a97712d72564dbda7ac5b6b6ededf04a0" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>Index</name></member>
      <member refid="classamrex_1_1ParticleContainer_1adee34fabfe6ba6542fad9607e2843ff7" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>InitFromAsciiFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ac108830360927c2b81f70f79273f5c30" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>InitFromBinaryFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aa38b6a6a9072401b044d1a1998531bfb" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>InitFromBinaryMetaFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a3ff226eab3163a69157e3d447984af0e" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a43c257d811d31372ec9aeb183a04831b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>InitNRandomPerCell</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a23fef3ef39243107d38903a067b38bc7" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>InitOnePerCell</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ab625b5a4a0f0b861281f75c797c6787d" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>InitRandom</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a78c63ad7c9a8ec65ce136664bdc7dacf" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>InitRandomPerBox</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ae81487d8bc67dbfa4ab241a8f32d186a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>Interpolate</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a0cfa715f33235a017da433fb9df6a2e4" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>InterpolateSingleLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a6771cf4d68f77e662aa8ef3dc3e10230" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>IntVector</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a03b2c956029810b305eea345617ad6f7" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>levelDirectoriesCreated</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aab7b351a2366e658e9be84c5a0393c3c" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>locateParticle</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a53b0b658192ecf9453776e49b9a76843" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>m_buffer_map</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a623f1158041f9dc802cc4cc295c37054" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>m_dummy_mf</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a53bab1e7b78d5f15ac215168f72fd770" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>m_gdb</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a13427e94f92d61f4639b5076f7f71d55" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>m_gdb_object</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a0031cc138f125cdaad369157691c4270" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>m_num_runtime_int</name></member>
      <member refid="classamrex_1_1ParticleContainer_1adb02eee87d9bbd80a80ff1fbb0fb1d64" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>m_num_runtime_real</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a4fa9365dbc47e60f255cec1ce3f19ecc" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>m_particles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a2e417921acd00358a3af55e11d2ed0e5" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>m_runtime_comps_defined</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a68c842aac5e81aa1c36c35d5ce1799be" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>m_verbose</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aaadbba0d36f06116fabb93b85a37d42a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>MakeMFIter</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ae255930bd09dcffc5a5d8f5762507a55" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>MakeMFIter</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a8d677cd75c347dae13fb863e377b4e04" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>MakeMFIter</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a18460ce73e84b83a29233319455996c8" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>maxLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a90b5037a7968afc7d25bcecf94463900" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>maxnextidPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a65a31505d0970f0f972d5653fdd8cf12" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>moveKick</name></member>
      <member refid="classamrex_1_1ParticleContainer_1af87210895f80e5c9851d5b8fa4330fd3" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>MoveRandom</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a8ff12a8b622148daa96f435bbfc5acb7" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>MoveRandom</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a1c7e6f19b1640c0b4980d2d7fa3ad15e" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>neighbor_procs</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a313b845a6567dd527d04c879ddeafb8c" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>NeighborProcs</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ace382ba1157b559d2ef5ff00fbca36e2" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>nOutFilesPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a6e7c1ff537295e739af9e43819ba4636" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>nParticlesAtLevelPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aa1d938ace39436b8ce17da3ac8e371a3" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>nparticlesPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a1677be256793e993c7adbfdae3c30b2e" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>num_int_comm_comps</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a61ac370a6cc648a787b43ad6110156bc" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>num_real_comm_comps</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a146d49935caceb1a2816c8fb608930ea" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>NumberOfParticlesAtLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a71bc723a5da99ad7d6cc8ec96f7981b0" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>NumberOfParticlesInGrid</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ae708158aa3c6c8bbb333a60cf06887d5" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>NumIntComps</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a2edf149588bf5390e8fc14ad2e64d7ba" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>numLevels</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a2be183949c39b61d2d506c1199ac3cf7" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>numLocalTilesAtLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a95c4060d41d8f287cf4ced5d46c7bd57" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>NumRealComps</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a33f8a4b1f9577723ba6ff469cb512b5b" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>NumRuntimeIntComps</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a5bccb747039f092dc962598d04d44dd1" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>NumRuntimeRealComps</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a62c9b3ef7bf4765aa4cdf6dc4eaa2063" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>OK</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a69e98c5ae9055383e3b290b25b58dbe0" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>OKCPU</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a79ee48f306fd7ba69527b310f9d69aca" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>OKGPU</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a0ccfb91513567f326eb6b4969b4ce60a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>OnSameGrids</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a0e99a292ca5da900e62889ab9383384f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>operator=</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a7b5d32ca999aed19e1821a13c67bf852" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>operator=</name></member>
      <member refid="classamrex_1_1ParticleContainer_1af071b16aa6e432e29bd3125422873800" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParConstIterType</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aa4fc68de6148ace63b82ffc571e8a5d2" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParIterBase&lt; false, NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a2bafd5f149b05c71e77f8a76f265de46" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParIterBase&lt; true, NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ae1ddeffd58e837ef523fecacdb249bbd" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParIterType</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a243921584a4cf66e26df7f2104ce79b1" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>particle_size</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a32a1fcb2793ecfd8f31b0b114898e524" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticleBoxArray</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aedac68717a73a118a10f48a8b8ffcd8a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticleContainer</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aa6e20b1d1f2261f62e16046cf3634708" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticleContainer</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a8f1790c031a70dffef5f35699fa89091" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticleContainer</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a42909daffb4b1122122636ab736e7d3d" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticleContainer</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ad5589a0d892cce53eb17d42dd06d6607" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticleContainer</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a7581c3c3cf4dbe1da5a913e767804a09" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticleContainer</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ad92deea74184c862d25d3cf3b45817d2" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticleContainer</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a37ecb4d391a3355e67d6a4341c2a9bc4" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticleContainerType</name></member>
      <member refid="classamrex_1_1ParticleContainer_1afee606df1de7128ab2ef442c1abfa60a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticleDistributionMap</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a6edead171e873a9e37cfe2491511ba59" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticleInitData</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a2c82102263d5f301111f85c31af9bd8a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticleLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a48592b115a6f470dead23224ebeee123" prot="private" virt="virtual"><scope>amrex::ParticleContainer</scope><name>particlePostLocate</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a3745cc53b964fc08052fe340d1fd42b2" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticleRealDescriptor</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a6e75b71866d56450d04a1c243d4c3cfb" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticlesAt</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aca1ee98a4dce5d7301527e13dbd35eeb" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticlesAt</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ad24ca91ffbcdf3f474c0ce4e1c0f1c48" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticlesAt</name></member>
      <member refid="classamrex_1_1ParticleContainer_1acd785eb9f6acd5c201473cf9e9c246a3" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticlesAt</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a9c8d796e15d37e7dad6efb3e9fdb4fca" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticleTileType</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aec73ed00e2482cb245a8c6a2ac7bea8e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticleType</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aaee7b7f9a52218b0ae9efcc9f1c5be58" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ParticleVector</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ac2edb80997a975c0316a78c4c08962b9" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>PeriodicShift</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ad556fa72e0f22533d5f90f641f4f2bce" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ReadParticleRealData</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a225de1db7fe017ffc776d93c61e64efa" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ReadParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a225de1db7fe017ffc776d93c61e64efa" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>ReadParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aa415f73a03aab24593ffe0d99075e329" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>RealType</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a0e7c4cbdae01b74faec61771f467d029" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>RealVector</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a12ad35f5b7401e94f35688a46dd46738" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>RedefineDummyMF</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a8d0a48a32a6e15966ca61144fdaf661a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>Redistribute</name></member>
      <member refid="classamrex_1_1ParticleContainer_1afa4f544ea8b970dfc267cd965468cc81" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>redistribute_mask_nghost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ad155f9c3e0ced8900ebda12d45bab1dd" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>redistribute_mask_ptr</name></member>
      <member refid="classamrex_1_1ParticleContainer_1afcfa4b3226447e29584bf9c609b7b405" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>RedistributeCPU</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a405049a333766dd8d8e4a8e244d4b715" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>RedistributeGPU</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ad73f34e88289b2d40ccaa06f101dfb09" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>RedistributeMPI</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a8933b3680b986631fa58b64aabcc1056" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>RemoveParticlesAtLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a5e9f1af11b34f555dadfaea79db35f3f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>RemoveParticlesNotAtFinestLevel</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ae6988ce9675107c1377a32706edb38ac" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>reserveData</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a8fa8583debe79010d5754a968b7a2552" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>Reset</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a73a9685a51644f83bd92af8691ca0230" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>resizeData</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a2ddf26f00578c5221138fa5e44c04460" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>Restart</name></member>
      <member refid="classamrex_1_1ParticleContainer_1af513b73d7827e554fa3eb68e359e4003" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>Restart</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aefa5810a30720321a45b5467946720ff" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>SendBuffer</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ad7bfacae6390e8cf1c80d24cc0f5b56d" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>SetLevelDirectoriesCreated</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a0b62f808d6d437d88f35d9bb03fa0819" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>SetParticleBoxArray</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a4f50be8d23d662dcc4472c7429510d89" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>SetParticleDistributionMap</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aa68b9885de02d650cf3626441b0c11a1" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>SetParticleSize</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a938f2a2146503550838e0255b4644047" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>SetUsePrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1addb677e3ecf4c180476b73b4231eb509" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>SetUseUnlink</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a31677806416ae622294a0a8da91e8deb" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>SetVerbose</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a687d4752e63683529eecb23e0f25d3ff" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>SoA</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a22e1d8ca180b542ad1610173f3a28d63" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>SortParticlesByCell</name></member>
      <member refid="classamrex_1_1ParticleContainer_1af1e4d4ca50e58f86f09f55943902bffa" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>sumParticleMass</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a09a8f0a93ae94e2c92927635258b0ee5" prot="private" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>superparticle_size</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ac7c4beada431be321733272a131425fd" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>SuperParticleType</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a433e6240ebcad3866f30555496ab418f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>tile_size</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a7a672776ab2c219caa7e2b3124596a41" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>TotalNumberOfParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1acb1ee952f82bdf31959c8d72cbfb454b" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>usePrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1aeed70d1b658b5fe9e82b19f53a4f4862" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>Verbose</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a70e8ce8b358ab7de7e423a5ce7d05447" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>Where</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a3ae8b90bce42ffba3df8257ea4c50c75" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>wherePrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a9d8fe1d047d61a92b7a295b40d2ce33a" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>whichPrePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1afa652b6ccee3292f1567ac82d3e3ebab" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>WriteAsciiFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a2887a24b0f9dca72ec22f4e52addca55" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>WriteBinaryParticleData</name></member>
      <member refid="classamrex_1_1ParticleContainer_1ad811292435541ceff38cb6f09cc9b6a2" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>WriteCoarsenedAsciiFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a812c8380cdc8d37bdb318c85fc88e04e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>WriteParticleRealData</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a79e3b55b52a11a3d2d6c546be080fa94" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>WriteParticles</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a1042daffa7e43cafbdfc0258fe0d22e7" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1addc617bc2186cf542c25ba4d7aa29534" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a861fedf2aeffefda28d7c099fab113cf" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a737b0ab65a446474c4217c6205a5cb3d" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a7a2626f845b2fde4e66e7d256d3e003a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>WritePlotFile</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a48ed8d81c408cc65cb7b8c6f21a32ece" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>WritePlotFilePost</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a2cf9ca8d8c7aeeb9fc8465a6f8ddf740" prot="public" virt="non-virtual"><scope>amrex::ParticleContainer</scope><name>WritePlotFilePre</name></member>
      <member refid="classamrex_1_1ParticleContainer_1a19844f745bc06b0d50ed462e1645c7b8" prot="public" virt="virtual"><scope>amrex::ParticleContainer</scope><name>~ParticleContainer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
