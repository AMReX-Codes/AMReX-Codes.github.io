<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1EB2_1_1IndexSpace" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::EB2::IndexSpace</compoundname>
    <derivedcompoundref refid="classamrex_1_1EB2_1_1IndexSpaceChkptFile" prot="public" virt="non-virtual">amrex::EB2::IndexSpaceChkptFile</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1EB2_1_1IndexSpaceImp" prot="public" virt="non-virtual">amrex::EB2::IndexSpaceImp&lt; G &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1EB2_1_1IndexSpaceSTL" prot="public" virt="non-virtual">amrex::EB2::IndexSpaceSTL</derivedcompoundref>
    <includes refid="AMReX__EB2_8H" local="no">AMReX_EB2.H</includes>
    <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1IndexSpace_1a8534fa5e1a19e2e1f6fbcfb162a8460a" prot="protected" static="yes" mutable="no">
        <type><ref refid="AMReX__Extension_8H_1ac05fa35b3db13c4599d7ad5fc51bef47" kindref="member">AMREX_EXPORT</ref> <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">IndexSpace</ref> &gt; &gt;</type>
        <definition>AMREX_EXPORT Vector&lt; std::unique_ptr&lt; IndexSpace &gt; &gt; amrex::EB2::IndexSpace::m_instance</definition>
        <argsstring></argsstring>
        <name>m_instance</name>
        <qualifiedname>amrex::EB2::IndexSpace::m_instance</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="66" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="66" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1aa8956b4011dc91c2a886fdaf701cce58" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual amrex::EB2::IndexSpace::~IndexSpace</definition>
        <argsstring>()=default</argsstring>
        <name>~IndexSpace</name>
        <qualifiedname>amrex::EB2::IndexSpace::~IndexSpace</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="28" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1a2a72ea2c766a09d49b74420005f4f700" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::IndexSpace::IndexSpace</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>IndexSpace</name>
        <qualifiedname>amrex::EB2::IndexSpace::IndexSpace</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="30" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1afd623b9a8ba399823e33335841e30a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::IndexSpace::IndexSpace</definition>
        <argsstring>(IndexSpace const &amp;)=delete</argsstring>
        <name>IndexSpace</name>
        <qualifiedname>amrex::EB2::IndexSpace::IndexSpace</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">IndexSpace</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="31" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1a08a6bcc75e45852b005fe627095155fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::IndexSpace::IndexSpace</definition>
        <argsstring>(IndexSpace &amp;&amp;)=delete</argsstring>
        <name>IndexSpace</name>
        <qualifiedname>amrex::EB2::IndexSpace::IndexSpace</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">IndexSpace</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="32" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1a8e563c8fd91426e5eb07c22b2e5b49d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">IndexSpace</ref> &amp;</type>
        <definition>IndexSpace &amp; amrex::EB2::IndexSpace::operator=</definition>
        <argsstring>(IndexSpace const &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::EB2::IndexSpace::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">IndexSpace</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="33" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1ab65632b734dbdca5fa3eb5431dd2e7f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">IndexSpace</ref> &amp;</type>
        <definition>IndexSpace &amp; amrex::EB2::IndexSpace::operator=</definition>
        <argsstring>(IndexSpace &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::EB2::IndexSpace::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">IndexSpace</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="34" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1a109b97f6fdcc3ca3ddfc05ab56c054b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="classamrex_1_1EB2_1_1Level" kindref="compound">Level</ref> &amp;</type>
        <definition>virtual const Level &amp; amrex::EB2::IndexSpace::getLevel</definition>
        <argsstring>(const Geometry &amp;geom) const =0</argsstring>
        <name>getLevel</name>
        <qualifiedname>amrex::EB2::IndexSpace::getLevel</qualifiedname>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceImp_1a1eeaab4266c11166a3072eea2f888f52">getLevel</reimplementedby>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceChkptFile_1ac851ed9fe4d83eccab062b387e301447">getLevel</reimplementedby>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1a4106393335714ad0351ccf212d479cdf">getLevel</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="55" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1a05925d4a7d0818f060dfbf7559e5b568" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>virtual const Geometry &amp; amrex::EB2::IndexSpace::getGeometry</definition>
        <argsstring>(const Box &amp;domain) const =0</argsstring>
        <name>getGeometry</name>
        <qualifiedname>amrex::EB2::IndexSpace::getGeometry</qualifiedname>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceImp_1ac216284322537eefb6a3817e784a716d">getGeometry</reimplementedby>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceChkptFile_1afb59a8649d374054b28322ebd3674428">getGeometry</reimplementedby>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1afa9591f706505991554b147f3d2a137b">getGeometry</reimplementedby>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="56" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1aae13c88201ac2660fa01b87672decf51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
        <definition>virtual const Box &amp; amrex::EB2::IndexSpace::coarsestDomain</definition>
        <argsstring>() const =0</argsstring>
        <name>coarsestDomain</name>
        <qualifiedname>amrex::EB2::IndexSpace::coarsestDomain</qualifiedname>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceImp_1a159b0492cabafd1bf0c3b5631ba6e070">coarsestDomain</reimplementedby>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceChkptFile_1a46e1c42db13fc6885d101b0be2b8f26e">coarsestDomain</reimplementedby>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1ab367fbb00dcd482615df4b0d163945a8">coarsestDomain</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="57" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1a346cc897525e434cd311f4b303d6b898" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::EB2::IndexSpace::addFineLevels</definition>
        <argsstring>(int num_new_fine_levels)=0</argsstring>
        <name>addFineLevels</name>
        <qualifiedname>amrex::EB2::IndexSpace::addFineLevels</qualifiedname>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceImp_1a5be42585336a617690b28a56e5c3bc1e">addFineLevels</reimplementedby>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceChkptFile_1ad224ca5a5ff6adf64c814338375835bc">addFineLevels</reimplementedby>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1a91c9991bc2691ccf3603be8005954c83">addFineLevels</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_new_fine_levels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="58" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1a7fb0a3782aceccca024eebde7a8b292b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void amrex::EB2::IndexSpace::addRegularCoarseLevels</definition>
        <argsstring>(int num_new_coarse_levels)=0</argsstring>
        <name>addRegularCoarseLevels</name>
        <qualifiedname>amrex::EB2::IndexSpace::addRegularCoarseLevels</qualifiedname>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceImp_1a6a7071824d8cf842a187f86b15683537">addRegularCoarseLevels</reimplementedby>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceChkptFile_1a26a8d00be225eff4a34576e5bb4cacfa">addRegularCoarseLevels</reimplementedby>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1af24a9105766a527cf4e5f12118e58ca3">addRegularCoarseLevels</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_new_coarse_levels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="59" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1ae4c7ef0e00904d9edb4d575bbb66c6ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::EB2::IndexSpace::setShift</definition>
        <argsstring>(int, int)</argsstring>
        <name>setShift</name>
        <qualifiedname>amrex::EB2::IndexSpace::setShift</qualifiedname>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceImp_1ae4467aff16a7f41a2e985fd833d36130">setShift</reimplementedby>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1a8dcdf975ec76757e54832f096aebb718">setShift</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="61" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="61" bodyend="63"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1a5a3c0ce524a4c0bff9901548d9e8648d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::IndexSpace::push</definition>
        <argsstring>(IndexSpace *ispace)</argsstring>
        <name>push</name>
        <qualifiedname>amrex::EB2::IndexSpace::push</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">IndexSpace</ref> *</type>
          <declname>ispace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="40" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" bodystart="53" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1aff6283995254b7660c80cd420d99886b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::IndexSpace::erase</definition>
        <argsstring>(IndexSpace *ispace)</argsstring>
        <name>erase</name>
        <qualifiedname>amrex::EB2::IndexSpace::erase</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">IndexSpace</ref> *</type>
          <declname>ispace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="43" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" bodystart="66" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1a45b714be9d0d45f3ecb339085a73c6ec" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::EB2::IndexSpace::pop</definition>
        <argsstring>() noexcept</argsstring>
        <name>pop</name>
        <qualifiedname>amrex::EB2::IndexSpace::pop</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="45" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1ac2b149fea822702476a70d1b12ae2f21" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::EB2::IndexSpace::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <qualifiedname>amrex::EB2::IndexSpace::clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="46" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1af74968526bd39d50fef8d945440d7fab" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">IndexSpace</ref> &amp;</type>
        <definition>static IndexSpace &amp; amrex::EB2::IndexSpace::top</definition>
        <argsstring>()</argsstring>
        <name>top</name>
        <qualifiedname>amrex::EB2::IndexSpace::top</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="47" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="47" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1a7ebc7ce80aded82313b3f96ba0f14d8e" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::EB2::IndexSpace::empty</definition>
        <argsstring>() noexcept</argsstring>
        <name>empty</name>
        <qualifiedname>amrex::EB2::IndexSpace::empty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="52" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1aa263203c4d632942992a81436d22d658" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>static int amrex::EB2::IndexSpace::size</definition>
        <argsstring>() noexcept</argsstring>
        <name>size</name>
        <qualifiedname>amrex::EB2::IndexSpace::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="53" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="53" bodyend="53"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::EB2::IndexSpace</label>
        <link refid="classamrex_1_1EB2_1_1IndexSpace"/>
      </node>
      <node id="2">
        <label>amrex::EB2::IndexSpaceChkptFile</label>
        <link refid="classamrex_1_1EB2_1_1IndexSpaceChkptFile"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::EB2::IndexSpaceImp&lt; G &gt;</label>
        <link refid="classamrex_1_1EB2_1_1IndexSpaceImp"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::EB2::IndexSpaceSTL</label>
        <link refid="classamrex_1_1EB2_1_1IndexSpaceSTL"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>T</label>
      </node>
      <node id="2">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::EB2::IndexSpace &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::EB2::IndexSpace</label>
        <link refid="classamrex_1_1EB2_1_1IndexSpace"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_instance</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="25" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="26" bodyend="67"/>
    <listofallmembers>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a346cc897525e434cd311f4b303d6b898" prot="public" virt="pure-virtual"><scope>amrex::EB2::IndexSpace</scope><name>addFineLevels</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a7fb0a3782aceccca024eebde7a8b292b" prot="public" virt="pure-virtual"><scope>amrex::EB2::IndexSpace</scope><name>addRegularCoarseLevels</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1ac2b149fea822702476a70d1b12ae2f21" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>clear</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1aae13c88201ac2660fa01b87672decf51" prot="public" virt="pure-virtual"><scope>amrex::EB2::IndexSpace</scope><name>coarsestDomain</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a7ebc7ce80aded82313b3f96ba0f14d8e" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>empty</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1aff6283995254b7660c80cd420d99886b" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>erase</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a05925d4a7d0818f060dfbf7559e5b568" prot="public" virt="pure-virtual"><scope>amrex::EB2::IndexSpace</scope><name>getGeometry</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a109b97f6fdcc3ca3ddfc05ab56c054b2" prot="public" virt="pure-virtual"><scope>amrex::EB2::IndexSpace</scope><name>getLevel</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a2a72ea2c766a09d49b74420005f4f700" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>IndexSpace</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1afd623b9a8ba399823e33335841e30a20" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>IndexSpace</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a08a6bcc75e45852b005fe627095155fe" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>IndexSpace</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a8534fa5e1a19e2e1f6fbcfb162a8460a" prot="protected" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>m_instance</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a8e563c8fd91426e5eb07c22b2e5b49d7" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1ab65632b734dbdca5fa3eb5431dd2e7f6" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a45b714be9d0d45f3ecb339085a73c6ec" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>pop</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a5a3c0ce524a4c0bff9901548d9e8648d" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>push</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1ae4c7ef0e00904d9edb4d575bbb66c6ff" prot="public" virt="virtual"><scope>amrex::EB2::IndexSpace</scope><name>setShift</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1aa263203c4d632942992a81436d22d658" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>size</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1af74968526bd39d50fef8d945440d7fab" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>top</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1aa8956b4011dc91c2a886fdaf701cce58" prot="public" virt="virtual"><scope>amrex::EB2::IndexSpace</scope><name>~IndexSpace</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
