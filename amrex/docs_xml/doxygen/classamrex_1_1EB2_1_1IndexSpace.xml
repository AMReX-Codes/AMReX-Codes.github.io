<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1EB2_1_1IndexSpace" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>amrex::EB2::IndexSpace</compoundname>
    <derivedcompoundref refid="classamrex_1_1EB2_1_1IndexSpaceImp" prot="public" virt="non-virtual">amrex::EB2::IndexSpaceImp&lt; G &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1EB2_1_1IndexSpaceSTL" prot="public" virt="non-virtual">amrex::EB2::IndexSpaceSTL</derivedcompoundref>
    <includes refid="AMReX__EB2_8H" local="no">AMReX_EB2.H</includes>
      <sectiondef kind="protected-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1IndexSpace_1a8534fa5e1a19e2e1f6fbcfb162a8460a" prot="protected" static="yes" mutable="no">
        <type><ref refid="AMReX__Extension_8H_1ac05fa35b3db13c4599d7ad5fc51bef47" kindref="member">AMREX_EXPORT</ref> <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">IndexSpace</ref> &gt; &gt;</type>
        <definition>AMREX_EXPORT Vector&lt; std::unique_ptr&lt; IndexSpace &gt; &gt; amrex::EB2::IndexSpace::m_instance</definition>
        <argsstring></argsstring>
        <name>m_instance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="54" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1ac4076fe625fa22e660fed58771f6b2d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual amrex::EB2::IndexSpace::~IndexSpace</definition>
        <argsstring>()</argsstring>
        <name>~IndexSpace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="28" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1a71aa6d39a145bc12424b2fc6c9a7e015" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="classamrex_1_1EB2_1_1Level" kindref="compound">Level</ref> &amp;</type>
        <definition>virtual const Level&amp; amrex::EB2::IndexSpace::getLevel</definition>
        <argsstring>(const Geometry &amp;geom) const =0</argsstring>
        <name>getLevel</name>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1a4106393335714ad0351ccf212d479cdf">getLevel</reimplementedby>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceImp_1a1eeaab4266c11166a3072eea2f888f52">getLevel</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="49" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1a683092cb9c842fb986c79f0aedcd05bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>virtual const Geometry&amp; amrex::EB2::IndexSpace::getGeometry</definition>
        <argsstring>(const Box &amp;domain) const =0</argsstring>
        <name>getGeometry</name>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1afa9591f706505991554b147f3d2a137b">getGeometry</reimplementedby>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceImp_1ac216284322537eefb6a3817e784a716d">getGeometry</reimplementedby>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="50" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1a7795703119c27937004c54f50532a369" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
        <definition>virtual const Box&amp; amrex::EB2::IndexSpace::coarsestDomain</definition>
        <argsstring>() const =0</argsstring>
        <name>coarsestDomain</name>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceSTL_1aaaa590849e7bb70c9f2b0814153b0e9e">coarsestDomain</reimplementedby>
        <reimplementedby refid="classamrex_1_1EB2_1_1IndexSpaceImp_1aeb660db350d2d8ea329bdbd72e6f258d">coarsestDomain</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="51" column="23"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1a5a3c0ce524a4c0bff9901548d9e8648d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::IndexSpace::push</definition>
        <argsstring>(IndexSpace *ispace)</argsstring>
        <name>push</name>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">IndexSpace</ref> *</type>
          <declname>ispace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="34" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" bodystart="45" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1aff6283995254b7660c80cd420d99886b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::EB2::IndexSpace::erase</definition>
        <argsstring>(IndexSpace *ispace)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">IndexSpace</ref> *</type>
          <declname>ispace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="37" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.cpp" bodystart="58" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1a45b714be9d0d45f3ecb339085a73c6ec" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::EB2::IndexSpace::pop</definition>
        <argsstring>() noexcept</argsstring>
        <name>pop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="39" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1ac2b149fea822702476a70d1b12ae2f21" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::EB2::IndexSpace::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="40" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1ad17160a9839f2d64ac20460b4cefbaee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">IndexSpace</ref> &amp;</type>
        <definition>static const IndexSpace&amp; amrex::EB2::IndexSpace::top</definition>
        <argsstring>()</argsstring>
        <name>top</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="41" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="41" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1a7ebc7ce80aded82313b3f96ba0f14d8e" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::EB2::IndexSpace::empty</definition>
        <argsstring>() noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="46" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1IndexSpace_1aa263203c4d632942992a81436d22d658" prot="public" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>static int amrex::EB2::IndexSpace::size</definition>
        <argsstring>() noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="47" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="47" bodyend="47"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>amrex::EB2::IndexSpaceSTL</label>
        <link refid="classamrex_1_1EB2_1_1IndexSpaceSTL"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::EB2::IndexSpace</label>
        <link refid="classamrex_1_1EB2_1_1IndexSpace"/>
      </node>
      <node id="2">
        <label>amrex::EB2::IndexSpaceImp&lt; G &gt;</label>
        <link refid="classamrex_1_1EB2_1_1IndexSpaceImp"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>amrex::EB2::IndexSpace</label>
        <link refid="classamrex_1_1EB2_1_1IndexSpace"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_instance</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>T</label>
      </node>
      <node id="3">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::EB2::IndexSpace &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::EB2::IndexSpace &gt; &gt; &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::EB2::IndexSpace &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" line="26" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2.H" bodystart="25" bodyend="55"/>
    <listofallmembers>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1ac2b149fea822702476a70d1b12ae2f21" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>clear</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a7795703119c27937004c54f50532a369" prot="public" virt="pure-virtual"><scope>amrex::EB2::IndexSpace</scope><name>coarsestDomain</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a7ebc7ce80aded82313b3f96ba0f14d8e" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>empty</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1aff6283995254b7660c80cd420d99886b" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>erase</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a683092cb9c842fb986c79f0aedcd05bb" prot="public" virt="pure-virtual"><scope>amrex::EB2::IndexSpace</scope><name>getGeometry</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a71aa6d39a145bc12424b2fc6c9a7e015" prot="public" virt="pure-virtual"><scope>amrex::EB2::IndexSpace</scope><name>getLevel</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a8534fa5e1a19e2e1f6fbcfb162a8460a" prot="protected" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>m_instance</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a45b714be9d0d45f3ecb339085a73c6ec" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>pop</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1a5a3c0ce524a4c0bff9901548d9e8648d" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>push</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1aa263203c4d632942992a81436d22d658" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>size</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1ad17160a9839f2d64ac20460b4cefbaee" prot="public" virt="non-virtual"><scope>amrex::EB2::IndexSpace</scope><name>top</name></member>
      <member refid="classamrex_1_1EB2_1_1IndexSpace_1ac4076fe625fa22e660fed58771f6b2d5" prot="public" virt="virtual"><scope>amrex::EB2::IndexSpace</scope><name>~IndexSpace</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
