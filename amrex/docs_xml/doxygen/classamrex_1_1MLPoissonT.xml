<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1MLPoissonT" kind="class" language="C++" prot="public">
    <compoundname>amrex::MLPoissonT</compoundname>
    <basecompoundref refid="classamrex_1_1MLCellABecLapT" prot="public" virt="non-virtual">amrex::MLCellABecLapT&lt; MF &gt;</basecompoundref>
    <includes refid="AMReX__MLPoisson_8H" local="no">AMReX_MLPoisson.H</includes>
    <templateparamlist>
      <param>
        <type>typename MF</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1MLPoissonT_1a7669bc7ef521da4a7dc238fbb2f45813" prot="public" static="no">
        <type>typename MF::fab_type</type>
        <definition>using amrex::MLPoissonT&lt; MF &gt;::FAB =  typename MF::fab_type</definition>
        <argsstring></argsstring>
        <name>FAB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="19" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLPoissonT_1a0a273ffe9d2206819c602129db225071" prot="public" static="no">
        <type>typename MF::value_type</type>
        <definition>using amrex::MLPoissonT&lt; MF &gt;::RT =  typename MF::value_type</definition>
        <argsstring></argsstring>
        <name>RT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="20" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLPoissonT_1a047885327e9a796d040945393d184d4b" prot="public" static="no">
        <type>LinOpBCType</type>
        <definition>using amrex::MLPoissonT&lt; MF &gt;::BCType =  LinOpBCType</definition>
        <argsstring></argsstring>
        <name>BCType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="22" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLPoissonT_1aee09d92cf1cb6a1f95ccadead11ccac4" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; MF &gt;::<ref refid="classamrex_1_1MLCellABecLapT_1a97dd28df6c3a612116bc4d4f95fb98fb" kindref="member">Location</ref></type>
        <definition>using amrex::MLPoissonT&lt; MF &gt;::Location =  typename MLLinOpT&lt;MF&gt;::Location</definition>
        <argsstring></argsstring>
        <name>Location</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="23" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLPoissonT_1aeba6bdc290f5aa871187ccbfb92afc16" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::MLPoissonT&lt; MF &gt;::m_is_singular</definition>
        <argsstring></argsstring>
        <name>m_is_singular</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="86" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1ae8bb112b8e057c31f2b2960ddbb42c57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLPoissonT&lt; MF &gt;::MLPoissonT</definition>
        <argsstring>()=default</argsstring>
        <name>MLPoissonT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="25" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1aa704b533c4daad5126cfabe71901aeeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLPoissonT&lt; MF &gt;::MLPoissonT</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FAB &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>MLPoissonT</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1MLCellABecLapT_1a9e4c8149cff8a651f45c0f5b24a0db54" kindref="member">FAB</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="26" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="90" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1a5bccc694799572e3f31b2c7862f278ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLPoissonT&lt; MF &gt;::MLPoissonT</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const Vector&lt; iMultiFab const * &gt; &amp;a_overset_mask, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FAB &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>MLPoissonT</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> const * &gt; &amp;</type>
          <declname>a_overset_mask</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1MLCellABecLapT_1a9e4c8149cff8a651f45c0f5b24a0db54" kindref="member">FAB</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="31" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="100" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1a9778d75f4e2b618f57cd2d6df57907ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLPoissonT&lt; MF &gt;::~MLPoissonT</definition>
        <argsstring>() override</argsstring>
        <name>~MLPoissonT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="37" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1a987b9536da690461737da64c367feabb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLPoissonT&lt; MF &gt;::MLPoissonT</definition>
        <argsstring>(const MLPoissonT&lt; MF &gt; &amp;)=delete</argsstring>
        <name>MLPoissonT</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLPoissonT" kindref="compound">MLPoissonT</ref>&lt; MF &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="39" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1aa8afb7d2454430bac23626c25224e528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLPoissonT&lt; MF &gt;::MLPoissonT</definition>
        <argsstring>(MLPoissonT&lt; MF &gt; &amp;&amp;)=delete</argsstring>
        <name>MLPoissonT</name>
        <param>
          <type><ref refid="classamrex_1_1MLPoissonT" kindref="compound">MLPoissonT</ref>&lt; MF &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="40" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1a2d8e6b0aa269254735db2dfba265aa80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLPoissonT" kindref="compound">MLPoissonT</ref>&lt; MF &gt; &amp;</type>
        <definition>MLPoissonT&lt;MF&gt;&amp; amrex::MLPoissonT&lt; MF &gt;::operator=</definition>
        <argsstring>(const MLPoissonT&lt; MF &gt; &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1MLPoissonT" kindref="compound">MLPoissonT</ref>&lt; MF &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="41" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1a67c25c473285026978a8f48b968ab434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1MLPoissonT" kindref="compound">MLPoissonT</ref>&lt; MF &gt; &amp;</type>
        <definition>MLPoissonT&lt;MF&gt;&amp; amrex::MLPoissonT&lt; MF &gt;::operator=</definition>
        <argsstring>(MLPoissonT&lt; MF &gt; &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1MLPoissonT" kindref="compound">MLPoissonT</ref>&lt; MF &gt; &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="42" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1aacc6210e9f4001a55db197a54b97a8ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLPoissonT&lt; MF &gt;::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FAB &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1MLCellABecLapT_1a9e4c8149cff8a651f45c0f5b24a0db54" kindref="member">FAB</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="44" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="112" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1af5f22af920dbd7b546cfac1567b784e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLPoissonT&lt; MF &gt;::define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;a_geom, const Vector&lt; BoxArray &gt; &amp;a_grids, const Vector&lt; DistributionMapping &gt; &amp;a_dmap, const Vector&lt; iMultiFab const * &gt; &amp;a_overset_mask, const LPInfo &amp;a_info=LPInfo(), const Vector&lt; FabFactory&lt; FAB &gt; const * &gt; &amp;a_factory={})</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>a_geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>a_grids</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>a_dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> const * &gt; &amp;</type>
          <declname>a_overset_mask</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> &amp;</type>
          <declname>a_info</declname>
          <defval><ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1MLCellABecLapT_1a9e4c8149cff8a651f45c0f5b24a0db54" kindref="member">FAB</ref> &gt; const * &gt; &amp;</type>
          <declname>a_factory</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="50" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="124" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1a46fe8bdcadd6679f29d19971eeb19242" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLPoissonT&lt; MF &gt;::prepareForSolve</definition>
        <argsstring>() final</argsstring>
        <name>prepareForSolve</name>
        <reimplements refid="classamrex_1_1MLCellABecLapT_1acff16f567dc8c5c30be1337318235e45">prepareForSolve</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="57" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="140" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1a908ed94e88ef21f70373a16c1665229d" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::MLPoissonT&lt; MF &gt;::isSingular</definition>
        <argsstring>(int amrlev) const final</argsstring>
        <name>isSingular</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1ae4208159e7121c341be4c40f148563ad">isSingular</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <briefdescription>
<para>Is it singular on given AMR level? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="58" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1a3e11b6d8928e597b0146fcccfa45fd05" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::MLPoissonT&lt; MF &gt;::isBottomSingular</definition>
        <argsstring>() const final</argsstring>
        <name>isBottomSingular</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a8a5fce59ba5bb0e9eb9d65e8615050ea">isBottomSingular</reimplements>
        <briefdescription>
<para>Is the bottom of MG singular? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="59" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1a51fb5455fbb2f0940a4f4b99a03f1c44" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLPoissonT&lt; MF &gt;::Fapply</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;out, const MF &amp;in) const final</argsstring>
        <name>Fapply</name>
        <reimplements refid="classamrex_1_1MLCellLinOpT_1a3841e981caa197033fcd74eee93f0daf">Fapply</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="60" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="182" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1af9232adb87973674d3243a2e01a10155" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLPoissonT&lt; MF &gt;::Fsmooth</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;sol, const MF &amp;rhs, int redblack) const final</argsstring>
        <name>Fsmooth</name>
        <reimplements refid="classamrex_1_1MLCellLinOpT_1a07fa09c5665782a39755f32fccdb7ec6">Fsmooth</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="61" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="366" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1aede7210df6c1aca7b7bee58a88c3a75d" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLPoissonT&lt; MF &gt;::FFlux</definition>
        <argsstring>(int amrlev, const MFIter &amp;mfi, const Array&lt; FAB *, AMREX_SPACEDIM &gt; &amp;flux, const FAB &amp;sol, Location loc, int face_only=0) const final</argsstring>
        <name>FFlux</name>
        <reimplements refid="classamrex_1_1MLCellLinOpT_1af69b48f91ccf0266c5d219c0c24ea3c2">FFlux</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MLCellABecLapT_1a9e4c8149cff8a651f45c0f5b24a0db54" kindref="member">FAB</ref> *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MLCellABecLapT_1a9e4c8149cff8a651f45c0f5b24a0db54" kindref="member">FAB</ref> &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCellABecLapT_1a97dd28df6c3a612116bc4d4f95fb98fb" kindref="member">Location</ref></type>
          <declname>loc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>face_only</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="62" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="857" bodyend="1050"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1a557eb6e2ad1b92790b50e1781835b692" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLPoissonT&lt; MF &gt;::normalize</definition>
        <argsstring>(int amrlev, int mglev, MF &amp;mf) const final</argsstring>
        <name>normalize</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1aaa66bfea39287ead35be91ec940d0bb1">normalize</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type>MF &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
<para>Divide mf by the diagonal component of the operator. Used by bicgstab. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="66" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="313" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1ab2de7ccf4ff7b1a71d80807c35edc388" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="classamrex_1_1MLCellABecLapT_1a7294b2967cfff2e5dd03e746871646ec" kindref="member">RT</ref></type>
        <definition>RT amrex::MLPoissonT&lt; MF &gt;::getAScalar</definition>
        <argsstring>() const final</argsstring>
        <name>getAScalar</name>
        <reimplements refid="classamrex_1_1MLCellABecLapT_1ae138125310f7e77c24bfc57fc2435a96">getAScalar</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="68" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1ac2c255d7ebd13f20faf6f069ec48389b" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="classamrex_1_1MLCellABecLapT_1a7294b2967cfff2e5dd03e746871646ec" kindref="member">RT</ref></type>
        <definition>RT amrex::MLPoissonT&lt; MF &gt;::getBScalar</definition>
        <argsstring>() const final</argsstring>
        <name>getBScalar</name>
        <reimplements refid="classamrex_1_1MLCellABecLapT_1a877572517fc472cd65fc3597abc59dea">getBScalar</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="69" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1a31ef925e5d50b04583caa69df4085cd1" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type>MF const  *</type>
        <definition>MF const* amrex::MLPoissonT&lt; MF &gt;::getACoeffs</definition>
        <argsstring>(int, int) const final</argsstring>
        <name>getACoeffs</name>
        <reimplements refid="classamrex_1_1MLCellABecLapT_1a1081608527ed0e29d67689eaaafceeb2">getACoeffs</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="70" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1af775f557e81f016fd82aac1740dab0ac" prot="public" static="no" const="yes" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF const  *, AMREX_SPACEDIM &gt;</type>
        <definition>Array&lt;MF const*,AMREX_SPACEDIM&gt; amrex::MLPoissonT&lt; MF &gt;::getBCoeffs</definition>
        <argsstring>(int, int) const final</argsstring>
        <name>getBCoeffs</name>
        <reimplements refid="classamrex_1_1MLCellABecLapT_1a934552e4d4831940545037de23c96f32">getBCoeffs</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="71" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="71" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1af9a31f692af9979009765151942209b8" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLLinOpT" kindref="compound">MLLinOpT</ref>&lt; MF &gt; &gt;</type>
        <definition>std::unique_ptr&lt; MLLinOpT&lt; MF &gt; &gt; amrex::MLPoissonT&lt; MF &gt;::makeNLinOp</definition>
        <argsstring>(int grid_size) const final</argsstring>
        <name>makeNLinOp</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a1170a5be1e22a4168e341b9edff1ff76">makeNLinOp</reimplements>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>grid_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="74" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="1065" bodyend="1130"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1a9985a165b354d7d4366441c90f89bd4d" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool amrex::MLPoissonT&lt; MF &gt;::supportNSolve</definition>
        <argsstring>() const final</argsstring>
        <name>supportNSolve</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1aa9b2cbde953686aaf94f7f6442a0ea5c">supportNSolve</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="76" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="1054" bodyend="1061"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1a38e4c472a2642a55ba84c2c3b42a8015" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>void</type>
        <definition>void amrex::MLPoissonT&lt; MF &gt;::copyNSolveSolution</definition>
        <argsstring>(MF &amp;dst, MF const &amp;src) const final</argsstring>
        <name>copyNSolveSolution</name>
        <reimplements refid="classamrex_1_1MLLinOpT_1a4b8c0b3d1fd866b3b9a787bdcb056e77">copyNSolveSolution</reimplements>
        <param>
          <type>MF &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>MF const &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="78" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="1134" bodyend="1137"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLPoissonT_1ac6a0e027881bd8d0314ab054afb5dbc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLPoissonT&lt; MF &gt;::get_dpdn_on_domain_faces</definition>
        <argsstring>(Array&lt; MF *, AMREX_SPACEDIM &gt; const &amp;dpdn, MF const &amp;phi)</argsstring>
        <name>get_dpdn_on_domain_faces</name>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; MF *, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dpdn</declname>
        </param>
        <param>
          <type>MF const &amp;</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
<para>Compute dphi/dn on domain faces after the solver has converged. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="81" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="1141" bodyend="1197"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::MLCellABecLapT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLCellABecLapT"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::MLPoissonT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLPoissonT"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::MLCellLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLCellLinOpT"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::MLLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLLinOpT"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="27">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MLCellLinOpT::BndryCondLoc &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>T</label>
      </node>
      <node id="10">
        <label>Real</label>
      </node>
      <node id="6">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MLCellABecLapT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLCellABecLapT"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>m_overset_mask</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_lpinfo_arg</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>amrex::Vector&lt; amrex::Vector&lt; RT &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::BndryRegisterT&lt; MF &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>std::unique_ptr&lt; amrex::MLLinOpT::CommContainer &gt;</label>
      </node>
      <node id="24">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MLMGBndryT&lt; MF &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::BndryRegisterT&lt; MF &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>amrex::Vector&lt; amrex::IntVectND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>amrex::Vector&lt; amrex::YAFluxRegisterT&lt; MF &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="9" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; FAB &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::Vector&lt; std::unique_ptr&lt; MF &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::MLPoissonT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLPoissonT"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_is_singular</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>amrex::MLCellLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLCellLinOpT"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_undrrelxr</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>m_robin_bcval</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>m_fluxreg</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>m_norm_fine_mask</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>m_crse_cor_br</edgelabel>
          <edgelabel>m_crse_sol_br</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>m_bndry_cor</edgelabel>
          <edgelabel>m_bndry_sol</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>m_maskvals</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>m_volinv</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>m_bcondloc</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="28">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::MLLinOpT&lt; MF &gt;</label>
        <link refid="classamrex_1_1MLLinOpT"/>
        <childnode refid="5" relation="usage">
          <edgelabel>levelbc_raii</edgelabel>
          <edgelabel>robin_a_raii</edgelabel>
          <edgelabel>robin_b_raii</edgelabel>
          <edgelabel>robin_f_raii</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_coarse_data_crse_ratio</edgelabel>
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_raii_comm</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_hibc_orig</edgelabel>
          <edgelabel>m_lobc</edgelabel>
          <edgelabel>m_lobc_orig</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>amrex::Vector&lt; amrex::Vector&lt; Array&lt; amrex::MultiMask, 2 *AMREX_SPACEDIM &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>amrex::IntVectND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" line="14" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson.H" bodystart="16" bodyend="87"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLCellABecLapT_1a2be65b6a2c0a68b5a8954d4be9ace8d7" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>addInhomogNeumannFlux</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a10ebb5d290f3579d4c3e69aa56cf6251" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae88bc615f7fa178e54ea32899aae6506" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>AMRRefRatio</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a8755fe1a7a09db77e7d810dd9dfdb107" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a251a2f1de9fea9f0d0230e04b19c078e" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>applyBC</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1ae96c2381214550fc17f99eeac401eeee" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>applyInhomogNeumannTerm</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a87bccd5330e4295f7108cf56c0a1cd20" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>applyMetricTerm</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a78233be19743ed1432077186937f51cc" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>applyOverset</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a118fb8de26be373907091016e1207645" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>averageDownAndSync</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a116deee661b635f1872ac7eded5f28a7" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>averageDownSolutionRHS</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a33f2c8cbf69e58cbe60e9be048181f5d" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>avgDownResAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a08f1cfd6afc79121fce39e027f15cac5" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>avgDownResMG</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a5f24e3a713313778626619bfd96ebc96" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a6ce4d3fd41e76507b017ff826a52c62e" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>BCTuple</name></member>
      <member refid="classamrex_1_1MLPoissonT_1a047885327e9a796d040945393d184d4b" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>BCType</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2859b0cddde955b30ccf90c0af86e897" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>BottomCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6b2ce3775a4c209860db63635f969640" prot="private" virt="virtual"><scope>amrex::MLPoissonT</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2ac85c71c7e15137bd62cbfd04cc52ed" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>Communicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abb542d962e83dd7479852f83fd3575bf" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3f7e812180f57035bfe85cb7d10b26e9" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>compactify</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ae7f32e1b953ea4ef5643501e91560d32" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>compFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a2ed74b3dc4e3c46d2cd589cbb8301e94" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>compGrad</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1af28f1c33141158bd515093c3741d7124" prot="private" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>computeVolInv</name></member>
      <member refid="classamrex_1_1MLPoissonT_1a38e4c472a2642a55ba84c2c3b42a8015" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>copyNSolveSolution</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a51480d2022ad9346d6eb11f3cbfd631a" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>correctionResidual</name></member>
      <member refid="classamrex_1_1MLPoissonT_1aacc6210e9f4001a55db197a54b97a8ef" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>define</name></member>
      <member refid="classamrex_1_1MLPoissonT_1af5f22af920dbd7b546cfac1567b784e8" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>define</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abe69b9ebe0a04b3da502ac8606871680" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLPoissonT</scope><name>define</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a95432ea80c81e30e58ffda678f2d926d" prot="private" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>defineAuxData</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a3b583520578b832e04ea2baf3ea48917" prot="private" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>defineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a5aa9449241f9867021b4d5300284a76a" prot="private" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>defineGrids</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a33e77669d6f0da47f28959678db508e4" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>doAgglomeration</name></member>
      <member refid="classamrex_1_1MLLinOpT_1add56650e9ecd05e16a7f2f71bcbe7c9b" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>doConsolidation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa99dea32527b34287aa64542b5545256" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>doSemicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adb9b0f44a3e66fbefa2310385747427b" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>enforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLPoissonT_1a7669bc7ef521da4a7dc238fbb2f45813" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>FAB</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3ca782a47b55ca765b4fd9eeda174d36" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>Factory</name></member>
      <member refid="classamrex_1_1MLPoissonT_1a51fb5455fbb2f0940a4f4b99a03f1c44" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>Fapply</name></member>
      <member refid="classamrex_1_1MLPoissonT_1aede7210df6c1aca7b7bee58a88c3a75d" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>FFlux</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ac44f404584644c6cb3f7548de48206d0" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>fixSolvabilityByOffset</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9b6ac2fe55b5951ef0aee9cfdf3e56c0" prot="public" virt="virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLPoissonT</scope><name>fixSolvabilityByOffset</name></member>
      <member refid="classamrex_1_1MLPoissonT_1af9232adb87973674d3243a2e01a10155" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>Fsmooth</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a02b3d2ea4535daf60276e9014571f955" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>Geom</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a28402657d9216f6ef38835ab562ee58b" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>get_d0</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adad8c3e9a304cc409d473b2d44aa4520" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>get_d1</name></member>
      <member refid="classamrex_1_1MLPoissonT_1ac6a0e027881bd8d0314ab054afb5dbc9" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>get_dpdn_on_domain_faces</name></member>
      <member refid="classamrex_1_1MLPoissonT_1a31ef925e5d50b04583caa69df4085cd1" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>getACoeffs</name></member>
      <member refid="classamrex_1_1MLPoissonT_1ab2de7ccf4ff7b1a71d80807c35edc388" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>getAScalar</name></member>
      <member refid="classamrex_1_1MLPoissonT_1af775f557e81f016fd82aac1740dab0ac" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>getBCoeffs</name></member>
      <member refid="classamrex_1_1MLPoissonT_1ac2c255d7ebd13f20faf6f069ec48389b" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>getBScalar</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a5e588d148e2672c3e82c8f40d5826671" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>getDefaultBottomSolver</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af823f5b435d2f329595b333c82080e35" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>getEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a47c09599ba7bee546dfb637ac8962fa0" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1ad86670e0d6ce7f6cdc72e456fad67faf" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4e2a07d995c0fc8d2dfe5be544501eea" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>getMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4f45234f33332dbaf9406e4daa01b475" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>getNComp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afe8257f1157b08104c622bedb11b0d00" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>getNGrow</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a8f0f9865915b5d7c47bbff26bc46d442" prot="protected" virt="virtual"><scope>amrex::MLPoissonT</scope><name>getNGrowVectRestriction</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a8ab63e064604cb872297d224250c4921" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>getOversetMask</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a08e68e2870cd7367dd09d2ef777261b3" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>getSolvabilityOffset</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a647cd4352c3719aa23545a8e0f88b562" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>hasBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a894d1f80e83452c32470d42e05947e13" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>hasHiddenDimension</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afdb203f24caba5241fa95fad173cfae7" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>hasInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a40cc3ea13c4a150195a6198e33f1eac2" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>hasRobinBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae6a081e88ffb4aafb123a7eb644ebd72" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>HiBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa0c3b0c5a4e23b9248d18138229aec76" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>hiddenDirection</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad0412f399e1e29e200a2451b371b0133" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>info</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ac40a7cc1f424156f36d3d8b2f0254ae7" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>interpAssign</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a7a7909cddc98ec2abe949ee2f043e817" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>interpolation</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ae4108ba43d2b66494dd56578879a29a9" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>interpolationAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a56ed51708c4e70b4ec224f4d0c2f2ff9" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>isBottomActive</name></member>
      <member refid="classamrex_1_1MLPoissonT_1a3e11b6d8928e597b0146fcccfa45fd05" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>isBottomSingular</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a107c8a8b4f0b4d5209357ab3a8225671" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>isCellCentered</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a69fbf6add2bd954f6fb9a17f89adebf8" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>isCrossStencil</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1666fe3156e40b2fbd7a44166f70ce11" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>isMFIterSafe</name></member>
      <member refid="classamrex_1_1MLPoissonT_1a908ed94e88ef21f70373a16c1665229d" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>isSingular</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1aae0589f189ee2d39dadca3a308e3df9b" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>isTensorOp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3ac078eb634767e8e812746b8327a6b5" prot="private" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>levelbc_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a60f337c8a71be69643d62c774a536dcd" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>LoBC</name></member>
      <member refid="classamrex_1_1MLPoissonT_1aee09d92cf1cb6a1f95ccadead11ccac4" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a520a29dd5773acdba2c227d316e059a4" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_amr_ref_ratio</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a8ea2fb547b5b9b37d88880948073e00c" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_bcondloc</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ac667791f6b37a42e55ef25267bc78fa9" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_bndry_cor</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a2b8a625f55f16b9c5b620a82021f17f4" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_bndry_sol</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aee13b9d32b909adb7903586bfa352855" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_bottom_comm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1a730552d4db500b99496712dec21038" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_coarse_bc_loc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6d6305f5cb6d0df287f766719bb9566d" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_coarse_data_crse_ratio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a02f8f07d9d724566c7aea603ea1248a6" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3bf0a8559fbed2ec5297f97590e92cb0" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_coarse_data_for_bc_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ae152107703463ca7e27c2e3dccf7538d" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_coarse_fine_bc_type</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a892cce2e429f77cee7360f2859ceda4d" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_crse_cor_br</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1adf51879b81fbd24f9ccb7b9f0142d63b" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_crse_sol_br</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a52e548305943a2d3a1b1731eb5855b73" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_default_comm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a67d38036b0d30275047637a1ab739ca6" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_dmap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a452827d7dc1f2d84d701248f05e908af" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_do_agglomeration</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a0e1db3374227c3c6043734d42bbbc795" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_do_consolidation</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3f65a4345945e648b7170635a33c9557" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_do_semicoarsening</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1375eac46dcbfeb8155a251b904cc727" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_domain_bloc_hi</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a437d5bd996be47153207c90d286b336c" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_domain_bloc_lo</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa83ed4b753b00606bcdff3573a6f0824" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_domain_covered</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a07a2cce97f1c77f36f8a241090543b8e" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_factory</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a22cdf5d6b191ab3c883b7167e9f94ebe" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_fluxreg</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aab42ad785f4263767af0a0e7306cdf8a" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_geom</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4458bc19263fdcf39df3665681ce3aef" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_grids</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ada8bf2b1964f2023282e23ac54a948f4" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_has_metric_term</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad073f92f684b4d5ea20718fbc396ef40" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_hibc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2cf9f506d5cee3aeaaae8b9930e7866d" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_hibc_orig</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab5b6c73fee0004ac732f74350cc72bab" prot="private" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_interpbndry_halfwidth</name></member>
      <member refid="classamrex_1_1MLPoissonT_1aeba6bdc290f5aa871187ccbfb92afc16" prot="private" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_is_singular</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a1144a9c3d743270ff29c8e9f582581c0" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_ixtype</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9f2e0c10c385f9bee16af5fed5f4e9c9" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_lobc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a726dec103c10ea9c84e649b9c8200767" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_lobc_orig</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a2a4ce226902dbe904fa45173845d4cac" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_lpinfo_arg</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a9c470f145301b98fe0938ac6241284eb" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_maskvals</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abc7eaafcc5804d269386c6bdbd13181d" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_needs_coarse_data_for_bc</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1af29ed070015666e58d890685cb491900" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_norm_fine_mask</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afe9761ce7b771e51e0b47d415779ce93" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_num_amr_levels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a64262a62291404dab652353158886cce" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_num_mg_levels</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1aa1bc328cdef65e6dfab478914c2913d7" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_overset_mask</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aa96812cd049f02fe827fc1573fa0626e" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_parent</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3e96c4035b1315b80c6301329695f86e" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_raii_comm</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a95a0dd3f6700b3da5b020a66ef726dff" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_robin_bcval</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab50c53ea7ff9c53bf37ac816e0663406" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_undrrelxr</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1add77293caacd09584aa8b5f0fd7f923a" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_use_gauss_seidel</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ad73d9eed28e8d9d32cf54327e21c5225" prot="private" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>m_volinv</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afb48e62b81e97ddffb92d7b7cea09c55" prot="protected" virt="virtual"><scope>amrex::MLPoissonT</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a223df72e572182f58b611c220487fe20" prot="protected" virt="virtual"><scope>amrex::MLPoissonT</scope><name>make</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a54590ff0d7670660d6520c753f6fbbbb" prot="private" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>makeAgglomeratedDMap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a457c82b4259eab9916ca4e5f4493b373" prot="protected" virt="virtual"><scope>amrex::MLPoissonT</scope><name>makeAlias</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a44952a0322f09ae53fe7e26669f85de1" prot="protected" virt="virtual"><scope>amrex::MLPoissonT</scope><name>makeCoarseAmr</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9991da8ff85055f29349c9f5b8246c65" prot="protected" virt="virtual"><scope>amrex::MLPoissonT</scope><name>makeCoarseMG</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a6574c3f3a840f96723f9a10ccb2eeb69" prot="private" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>makeConsolidatedDMap</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a46477d4e418960292da4f442741541b6" prot="protected" virt="virtual"><scope>amrex::MLPoissonT</scope><name>makeFactory</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a1574dd8857314d9658c28c26adc6ce12" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>makeNGrids</name></member>
      <member refid="classamrex_1_1MLPoissonT_1af9a31f692af9979009765151942209b8" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>makeNLinOp</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad05360dc7ba30a94505918519dea299c" prot="private" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>makeSubCommunicator</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abddb56c317b794cc672b446046784d95" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>maxorder</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ac42612ebc576bd674db633fd6d0363db" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>MFType</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a958be92529c763a85a81c3fc03e1e5af" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>mg_box_min_width</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a4ab72cdcf8c7d1746bd1e03fac99d808" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>mg_coarsen_ratio</name></member>
      <member refid="classamrex_1_1MLLinOpT_1abf470fae49c59ccd4cbc058ebfdab2a2" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>mg_coarsen_ratio_vec</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2c3fc7b84d860915b7aa6bb06417800f" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>mg_domain_min_width</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a37eddbe9290f0102dc09e24e022f038d" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>MLCellABecLapT</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a241cb451732d5ad6ab42c46ad4e1f597" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>MLCellABecLapT</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a5f871352ed5f3af819701d945c2de871" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>MLCellABecLapT</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab6bc4d82971ae75fc206df8d00d15ef6" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a54558ff60dc7b62ac803e8dd8a5c1816" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab75b6f4249c1408041b529732b179d32" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ab768833f0df0eb419284243a6940153e" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aae73abc3efc9dcc4b381ff020e043c68" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a709f5c12d16e1e5e191a1d56df622173" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>MLLinOpT</name></member>
      <member refid="classamrex_1_1MLPoissonT_1ae8bb112b8e057c31f2b2960ddbb42c57" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>MLPoissonT</name></member>
      <member refid="classamrex_1_1MLPoissonT_1aa704b533c4daad5126cfabe71901aeeb" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>MLPoissonT</name></member>
      <member refid="classamrex_1_1MLPoissonT_1a5bccc694799572e3f31b2c7862f278ea" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>MLPoissonT</name></member>
      <member refid="classamrex_1_1MLPoissonT_1a987b9536da690461737da64c367feabb" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>MLPoissonT</name></member>
      <member refid="classamrex_1_1MLPoissonT_1aa8afb7d2454430bac23626c25224e528" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>MLPoissonT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2fb16a53d8b6d9dd08306f89a535c617" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>name</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a09c567773980f90aa59d90d3235ded9c" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>NAMRLevels</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7e2d1058dd843b67192b1aa489e112b6" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>needsCoarseDataForBC</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a972b0c17208b96e3bc1c41d688ebf5d2" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>needsUpdate</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad1697410f7ce33223a511796bbf9273f" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>NMGLevels</name></member>
      <member refid="classamrex_1_1MLPoissonT_1a557eb6e2ad1b92790b50e1781835b692" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>normalize</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a6207e307cf8edda53498feebe2abb2e3" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>normInf</name></member>
      <member refid="classamrex_1_1MLPoissonT_1a2d8e6b0aa269254735db2dfba265aa80" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLPoissonT_1a67c25c473285026978a8f48b968ab434" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1ab5b785aa902dc8bd312b0545966bb36a" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLPoissonT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a53ae18ac5de6900a4a30e6de3385e25b" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellABecLapT::"><scope>amrex::MLPoissonT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1abcbc29c6deeba6419b5cd5a67b553cd6" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOpT::"><scope>amrex::MLPoissonT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a36d76fae0e448ac86582b957eb7b5174" prot="public" virt="non-virtual" ambiguityscope="amrex::MLCellLinOpT::"><scope>amrex::MLPoissonT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aba8d3e06373e96ddac7da02928522796" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLPoissonT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a9399276c8cadba0d0e513200ab8758c9" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLPoissonT</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7766bf3ef48ac5508865ef5aa3ef49be" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>postSolve</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1acfbbd0bc16c6143b970276cb3db30a03" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>prepareForFluxes</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af79ba1ae9377062bdcdfc68884529865" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>prepareForGMRES</name></member>
      <member refid="classamrex_1_1MLPoissonT_1a46fe8bdcadd6679f29d19971eeb19242" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a65abf3895113354dbd34041b96dfb3ba" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>RealTuple</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a35158f8a8bd840468c4dedb08d6726ff" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>reflux</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a43fcad8e24531044114e9572beb28323" prot="protected" virt="virtual"><scope>amrex::MLPoissonT</scope><name>resizeMultiGrid</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ab4713a678d7c2ac9e1a9c5b027f965c5" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>restriction</name></member>
      <member refid="classamrex_1_1MLLinOpT_1afdb609a7a4b9ea229e7b9cc89a8751f7" prot="private" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>robin_a_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a90e6517d0ff6dee31c92101a9249de67" prot="private" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>robin_b_raii</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a451681732629cb75f6a4a9ba29799f44" prot="private" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>robin_f_raii</name></member>
      <member refid="classamrex_1_1MLPoissonT_1a0a273ffe9d2206819c602129db225071" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>RT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ad86c06dbaa4556184fb4dea08186e3c9" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>scaleRHS</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a776db3c3a85a3f2d3938446d7ce6b19c" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ab12336bb4e985ab158e63397b4960171" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a455030051a17d954b7aeb6323b0a4fba" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a3210982bb202d42999661f1c3920bf1e" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>setCoarseFineBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a51edb661205b9d4b77b5acab32d17cd2" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>setCoarseFineBCLocation</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1a76c83a76bea9715006d1c962471346aa" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>setDirichletNodesToZero</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a065b7216ffbd4136592b893066feabc9" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a472da4d3c20cee50275d2790e18bf046" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>setDomainBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a7dd25019053e84389e2d9226fc5816ed" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>setDomainBCLoc</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a28dec45d870edf5fba713b18c53542cf" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>setEnforceSingularSolvable</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a910678e8eb5a82aaa5550910cb4ac3fb" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>setGaussSeidel</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1afaf162a4471fc9b3a7121d9579fea518" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1adc2c4cd3ccc03f6c0f958429b1d1f093" prot="public" virt="non-virtual" ambiguityscope="amrex::MLLinOpT::"><scope>amrex::MLPoissonT</scope><name>setLevelBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a2cea879bd6717f7b2f425b1c1aeff724" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>setMaxOrder</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a135bc97332faf6e4f7f864b45c2b0b69" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a04486888c630dc3e4a5258a0e174345c" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>smooth</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1ad6684ea6b055170aad353ee9a4dcc316" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>solutionResidual</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1afaa558995ac0e6dace1b2539572250a7" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>StateMode</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1ac7b687cd9603d112b33b92f2047f663f" prot="protected" virt="virtual"><scope>amrex::MLPoissonT</scope><name>supportInhomogNeumannBC</name></member>
      <member refid="classamrex_1_1MLPoissonT_1a9985a165b354d7d4366441c90f89bd4d" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>supportNSolve</name></member>
      <member refid="classamrex_1_1MLLinOpT_1aaa1fde319e32db3c05ca0f7fd944c111" prot="protected" virt="virtual"><scope>amrex::MLPoissonT</scope><name>supportRobinBC</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a8681147e6aa6a83cba4451adda7b719c" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>unapplyMetricTerm</name></member>
      <member refid="classamrex_1_1MLLinOpT_1af5258bf128c18afbb9712ad7230dad8e" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>unimposeNeumannBC</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1ae9730b505209a9fc2f255dd6cf9ea177" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>update</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a6bb9614b2635f9935e7cb8816074a2ef" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>updateCorBC</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a28d4c00dc8448c2c8f10dc519a42ae0f" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>updateSolBC</name></member>
      <member refid="classamrex_1_1MLLinOpT_1a685caf14f09300309d306d01150eae9a" prot="protected" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1a7c044db51cc603481135fb0d75e43e90" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>xdoty</name></member>
      <member refid="classamrex_1_1MLCellABecLapT_1ad4713655e99b1cd1f480c36376be40f7" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>~MLCellABecLapT</name></member>
      <member refid="classamrex_1_1MLCellLinOpT_1aaa89b0307d84d1687ece7880403c5689" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>~MLCellLinOpT</name></member>
      <member refid="classamrex_1_1MLLinOpT_1ac7718af80beb24d049ffad1239e31384" prot="public" virt="virtual"><scope>amrex::MLPoissonT</scope><name>~MLLinOpT</name></member>
      <member refid="classamrex_1_1MLPoissonT_1a9778d75f4e2b618f57cd2d6df57907ae" prot="public" virt="non-virtual"><scope>amrex::MLPoissonT</scope><name>~MLPoissonT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
