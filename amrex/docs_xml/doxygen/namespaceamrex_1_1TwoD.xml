<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceamrex_1_1TwoD" kind="namespace" language="C++">
    <compoundname>amrex::TwoD</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a621627cf03e331fa5957019410d55deb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlalap_adotx</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, GpuArray&lt; Real, 2 &gt; const &amp;dxinv, Real alpha, Real beta) noexcept</argsstring>
        <name>mlalap_adotx</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="12" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="12" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1acb5404e63c50f1d88cf91f23552ced8b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlalap_adotx_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, GpuArray&lt; Real, 2 &gt; const &amp;dxinv, Real alpha, Real beta, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlalap_adotx_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="35" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="35" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a62a1d04d4c6b9817ad971a9a8fccc18f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlalap_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, GpuArray&lt; Real, 2 &gt; const &amp;dxinv, Real alpha, Real beta) noexcept</argsstring>
        <name>mlalap_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="62" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="62" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1ab2d0856afa1d3e5d6009b7362dbdcfe5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlalap_normalize_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;x, Array4&lt; Real const &gt; const &amp;a, GpuArray&lt; Real, 2 &gt; const &amp;dxinv, Real alpha, Real beta, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlalap_normalize_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 2 &gt; const &amp;</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>beta</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="82" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="82" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1ab74919469fafb9c096121764c71fb18e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlalap_flux_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;sol, Real fac) noexcept</argsstring>
        <name>mlalap_flux_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="107" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="107" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1ae7854dec883b939010a9a98f4f1d2f31" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlalap_flux_x_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;sol, Real fac, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlalap_flux_x_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="122" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="122" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a03e4688f49b8bed9182372039095de04" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlalap_flux_xface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;sol, Real fac, int xlen) noexcept</argsstring>
        <name>mlalap_flux_xface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="139" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="139" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1ae80a5781c732456cd64bc76495998058" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlalap_flux_xface_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;sol, Real fac, int xlen, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlalap_flux_xface_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="154" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="154" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a209145e5c52d63b75d29839f8615dbd8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlalap_flux_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;sol, Real fac) noexcept</argsstring>
        <name>mlalap_flux_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="172" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="172" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1aeb1ca8d9a07d6829451a05cb6b2b5bad" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlalap_flux_y_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;sol, Real fac, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlalap_flux_y_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="187" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="187" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a0d7843eb08fc333f9b70b2a8deaaf368" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlalap_flux_yface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;sol, Real fac, int ylen) noexcept</argsstring>
        <name>mlalap_flux_yface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ylen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="204" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="204" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a43937de373fddeb010f23ac221cad2fb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlalap_flux_yface_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;sol, Real fac, int ylen, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlalap_flux_yface_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>fac</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ylen</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="223" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="223" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1adc7cff6a548e6c0cf374da4b0494d549" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlalap_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real alpha, Real dhx, Real dhy, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; int const &gt; const &amp;m2, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; int const &gt; const &amp;m3, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>mlalap_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="245" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="245" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a6235109774e2d8b76a1e27ce24109d00" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlalap_gsrb_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real alpha, Real dhx, Real dhy, Array4&lt; Real const &gt; const &amp;a, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; int const &gt; const &amp;m2, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; int const &gt; const &amp;m3, Box const &amp;vbox, int redblack, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlalap_gsrb_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="287" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" bodystart="287" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a53ac28d7fcb903d3250356d60446fa86" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlmg_lin_cc_interp_r2</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;ff, Array4&lt; Real const &gt; const &amp;cc, int nc) noexcept</argsstring>
        <name>mlmg_lin_cc_interp_r2</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>ff</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_2D_K.H" line="12" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_2D_K.H" bodystart="12" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a0f65ba3b3292f2d2588519e02226a83f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlmg_lin_cc_interp_r4</definition>
        <argsstring>(Box const &amp;bx, Array4&lt; Real &gt; const &amp;ff, Array4&lt; Real const &gt; const &amp;cc, int nc) noexcept</argsstring>
        <name>mlmg_lin_cc_interp_r4</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>ff</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_2D_K.H" line="37" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_2D_K.H" bodystart="37" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a14c611e46a8a2519c1fae959422183e8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlmg_lin_nd_interp_r2</definition>
        <argsstring>(int i, int j, int, int n, Array4&lt; Real &gt; const &amp;fine, Array4&lt; Real const &gt; const &amp;crse) noexcept</argsstring>
        <name>mlmg_lin_nd_interp_r2</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_2D_K.H" line="82" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_2D_K.H" bodystart="82" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1aca956cf281a6212168377ba9b833c159" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlmg_lin_nd_interp_r4</definition>
        <argsstring>(int i, int j, int, int n, Array4&lt; Real &gt; const &amp;fine, Array4&lt; Real const &gt; const &amp;crse) noexcept</argsstring>
        <name>mlmg_lin_nd_interp_r4</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fine</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>crse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_2D_K.H" line="106" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG_2D_K.H" bodystart="106" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a761892863c1170f1b208fdafa7bfa91b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlpoisson_adotx</definition>
        <argsstring>(int i, int j, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Real dhx, Real dhy) noexcept</argsstring>
        <name>mlpoisson_adotx</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="12" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="12" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a2a204c90cbc244db78c4b9841151e400" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlpoisson_adotx_os</definition>
        <argsstring>(int i, int j, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Array4&lt; int const &gt; const &amp;osm, Real dhx, Real dhy) noexcept</argsstring>
        <name>mlpoisson_adotx_os</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="21" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="21" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a2cd57f5a7ab4c4d365dae5e4c354283b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlpoisson_adotx_m</definition>
        <argsstring>(int i, int j, Array4&lt; Real &gt; const &amp;y, Array4&lt; Real const &gt; const &amp;x, Real dhx, Real dhy, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlpoisson_adotx_m</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>j</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="35" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="35" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1af8c6f5b8b4f4aadedc5117e11307d081" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlpoisson_flux_x</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;sol, Real dxinv) noexcept</argsstring>
        <name>mlpoisson_flux_x</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="47" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="47" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a74f5bbbd0c954f2a427b8ff873a4d435" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlpoisson_flux_x_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;sol, Real dxinv, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlpoisson_flux_x_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="62" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="62" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a4d606f0d80352373a66023a03c041ec8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlpoisson_flux_xface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;sol, Real dxinv, int xlen) noexcept</argsstring>
        <name>mlpoisson_flux_xface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="79" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="79" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a176a07715cca8ff70fc412ca78a8b7ed" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlpoisson_flux_xface_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fx, Array4&lt; Real const &gt; const &amp;sol, Real dxinv, int xlen, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlpoisson_flux_xface_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fx</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dxinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>xlen</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="94" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="94" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a56aa8e14ac865dc7bc146933efd78654" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlpoisson_flux_y</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;sol, Real dyinv) noexcept</argsstring>
        <name>mlpoisson_flux_y</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="112" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="112" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a63a58087be8a6baecfbcac0429b6061c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlpoisson_flux_y_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;sol, Real dyinv, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlpoisson_flux_y_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyinv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="127" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="127" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a0dcf0ef001800b03b64cc1221507ebf8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlpoisson_flux_yface</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;sol, Real dyinv, int ylen) noexcept</argsstring>
        <name>mlpoisson_flux_yface</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ylen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="144" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="144" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1aeca4b2ad75a8fda6e8abf6f03ad0200f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlpoisson_flux_yface_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;fy, Array4&lt; Real const &gt; const &amp;sol, Real dyinv, int ylen, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlpoisson_flux_yface_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>fy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>sol</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dyinv</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ylen</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="163" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="163" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1afd3ce576b519e19af892033034e631b1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlpoisson_gsrb</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real dhx, Real dhy, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; int const &gt; const &amp;m2, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; int const &gt; const &amp;m3, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>mlpoisson_gsrb</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="185" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="185" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a13499c2f964512fac0992c6f9941eb6a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlpoisson_gsrb_os</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Array4&lt; int const &gt; const &amp;osm, Real dhx, Real dhy, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; int const &gt; const &amp;m2, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; int const &gt; const &amp;m3, Box const &amp;vbox, int redblack) noexcept</argsstring>
        <name>mlpoisson_gsrb_os</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>osm</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="226" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="226" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a589021ffc80a3c2fb217cea848607005" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlpoisson_gsrb_m</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;phi, Array4&lt; Real const &gt; const &amp;rhs, Real dhx, Real dhy, Array4&lt; Real const &gt; const &amp;f0, Array4&lt; int const &gt; const &amp;m0, Array4&lt; Real const &gt; const &amp;f1, Array4&lt; int const &gt; const &amp;m1, Array4&lt; Real const &gt; const &amp;f2, Array4&lt; int const &gt; const &amp;m2, Array4&lt; Real const &gt; const &amp;f3, Array4&lt; int const &gt; const &amp;m3, Box const &amp;vbox, int redblack, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlpoisson_gsrb_m</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>phi</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m0</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m1</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m2</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real const &gt; const &amp;</type>
          <declname>f3</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const &gt; const &amp;</type>
          <declname>m3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>vbox</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>redblack</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="271" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="271" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1TwoD_1a60e4df68a8d8f3c6eabfa6b4c704cbd4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::TwoD::mlpoisson_normalize</definition>
        <argsstring>(Box const &amp;box, Array4&lt; Real &gt; const &amp;x, Real dhx, Real dhy, Real dx, Real probxlo) noexcept</argsstring>
        <name>mlpoisson_normalize</name>
        <param>
          <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; Real &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dhy</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>probxlo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" line="316" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLPoisson_2D_K.H" bodystart="316" bodyend="331"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLALap_2D_K.H" line="8" column="14"/>
  </compounddef>
</doxygen>
