<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classamrex_1_1ParticleContainerBase" kind="class" language="C++" prot="public">
    <compoundname>amrex::ParticleContainerBase</compoundname>
    <includes refid="AMReX__ParticleContainerBase_8H" local="no">AMReX_ParticleContainerBase.H</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a29311c7fd7f83d43f84951476f9a265d" prot="public" static="yes" mutable="no">
        <type><ref refid="AMReX__Extension_8H_1ac05fa35b3db13c4599d7ad5fc51bef47" kindref="member">AMREX_EXPORT</ref> bool</type>
        <definition>bool ParticleContainerBase::do_tiling</definition>
        <argsstring></argsstring>
        <name>do_tiling</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="209" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1adb03167dec6a952cfa60beb45a514dfa" prot="public" static="yes" mutable="no">
        <type><ref refid="AMReX__Extension_8H_1ac05fa35b3db13c4599d7ad5fc51bef47" kindref="member">AMREX_EXPORT</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect ParticleContainerBase::tile_size</definition>
        <argsstring></argsstring>
        <name>tile_size</name>
        <initializer>{ AMREX_D_DECL(1024000,8,8) }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="210" column="33" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a5a0a39b2da4b85ad599ea7fc51fba940" prot="public" static="yes" mutable="no">
        <type><ref refid="AMReX__Extension_8H_1ac05fa35b3db13c4599d7ad5fc51bef47" kindref="member">AMREX_EXPORT</ref> bool</type>
        <definition>bool ParticleContainerBase::memEfficientSort</definition>
        <argsstring></argsstring>
        <name>memEfficientSort</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="211" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="211" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1aa9bbd6752d478b3a24e66f2caa11196b" prot="public" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1AmrParticleLocator" kindref="compound">AmrParticleLocator</ref>&lt; <ref refid="classamrex_1_1DenseBins" kindref="compound">DenseBins</ref>&lt; <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &gt; &gt;</type>
        <definition>AmrParticleLocator&lt;DenseBins&lt;Box&gt; &gt; amrex::ParticleContainerBase::m_particle_locator</definition>
        <argsstring></argsstring>
        <name>m_particle_locator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="212" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="212" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a89f6fb84fb7e73fc185ae5d8f45818ab" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::m_verbose</definition>
        <argsstring></argsstring>
        <name>m_verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="219" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a2821fc52ed661ccd9e9d821b81476fff" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
        <definition>ParGDBBase* amrex::ParticleContainerBase::m_gdb</definition>
        <argsstring></argsstring>
        <name>m_gdb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="220" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a2377d6db2ff1c36ebbb5424d391ada41" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref></type>
        <definition>ParGDB amrex::ParticleContainerBase::m_gdb_object</definition>
        <argsstring></argsstring>
        <name>m_gdb_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="221" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1adb9b347bff9efa17831af4b1c5cb846a" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;MultiFab&gt; &gt; amrex::ParticleContainerBase::m_dummy_mf</definition>
        <argsstring></argsstring>
        <name>m_dummy_mf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="222" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a18183e85d5ae22c27721996b3c5bfead" prot="protected" static="no" mutable="yes">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt;iMultiFab&gt; amrex::ParticleContainerBase::redistribute_mask_ptr</definition>
        <argsstring></argsstring>
        <name>redistribute_mask_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="224" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1ac6b4b306d8f0399657b3884f51ea569e" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::redistribute_mask_nghost</definition>
        <argsstring></argsstring>
        <name>redistribute_mask_nghost</name>
        <initializer>= std::numeric_limits&lt;<ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>&gt;::<ref refid="namespaceamrex_1a2d2bb7bdafe91906c966d8e75d540bea" kindref="member">min</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="225" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a0e1a0dcc5bf3f405f40ad020f18389bc" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>amrex::Vector&lt;int&gt; amrex::ParticleContainerBase::neighbor_procs</definition>
        <argsstring></argsstring>
        <name>neighbor_procs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="226" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a2eddb55f0ebdf394ea2ace09e1d0e4a4" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1ParticleBufferMap" kindref="compound">ParticleBufferMap</ref></type>
        <definition>ParticleBufferMap amrex::ParticleContainerBase::m_buffer_map</definition>
        <argsstring></argsstring>
        <name>m_buffer_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="227" column="31" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="227" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ab54580a5d1f1373d18b7d8f88a087fec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>()</argsstring>
        <name>ParticleContainerBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="26" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="26" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a783bf6edc1d9d0bdc5d4e8dd1f98cd5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(ParGDBBase *gdb)</argsstring>
        <name>ParticleContainerBase</name>
        <param>
          <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
          <declname>gdb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="32" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="32" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a66e036defd5c86431c583bbd8cb91e2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(const Geometry &amp;geom, const DistributionMapping &amp;dmap, const BoxArray &amp;ba)</argsstring>
        <name>ParticleContainerBase</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="38" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="38" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a1b59660938f651e5a56bc45bb6bc4d8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; int &gt; &amp;rr)</argsstring>
        <name>ParticleContainerBase</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="48" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="48" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1af60ff4efea559ba4e49dc7178e504e4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; IntVect &gt; &amp;rr)</argsstring>
        <name>ParticleContainerBase</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="59" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="59" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a58cb6f59ee8ed859dce4a4c82b148dab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::Define</definition>
        <argsstring>(ParGDBBase *gdb)</argsstring>
        <name>Define</name>
        <param>
          <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
          <declname>gdb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="82" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ab2d7e2f655c0926dc7856544d9626140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::Define</definition>
        <argsstring>(const Geometry &amp;geom, const DistributionMapping &amp;dmap, const BoxArray &amp;ba)</argsstring>
        <name>Define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="84" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="14" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a2d2f5b76392326defb14c8adaee1f1a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::Define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; int &gt; &amp;rr)</argsstring>
        <name>Define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="88" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="22" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a1784a92d18a97247d05bbaae9ba0135b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::Define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; IntVect &gt; &amp;rr)</argsstring>
        <name>Define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="93" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="31" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a0fef888a5370f9723f2ab2df2fe32266" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleContainerBase::isDefined</definition>
        <argsstring>() const</argsstring>
        <name>isDefined</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="98" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a914a3fd813739f126e92408d194a3752" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::reserveData</definition>
        <argsstring>()</argsstring>
        <name>reserveData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="100" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a41c8b5cccfa817dbfa0b005451322817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::resizeData</definition>
        <argsstring>()</argsstring>
        <name>resizeData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="101" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="45" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a7fc7373a60be7c74a38a17b1711f59fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::RedefineDummyMF</definition>
        <argsstring>(int lev)</argsstring>
        <name>RedefineDummyMF</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="102" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="54" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1adc8bb6ea7e7d8a9596936623bc2e26ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref></type>
        <definition>MFIter amrex::ParticleContainerBase::MakeMFIter</definition>
        <argsstring>(int lev, const MFItInfo &amp;info) const</argsstring>
        <name>MakeMFIter</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFItInfo" kindref="compound">MFItInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="104" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a41cb0c34d64f3d1df87d83f3b26f594b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref></type>
        <definition>MFIter amrex::ParticleContainerBase::MakeMFIter</definition>
        <argsstring>(int lev) const</argsstring>
        <name>MakeMFIter</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="109" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a30a608b14352a5cd5bfed79f69f98011" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref></type>
        <definition>MFIter amrex::ParticleContainerBase::MakeMFIter</definition>
        <argsstring>(int lev, bool tile) const</argsstring>
        <name>MakeMFIter</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>tile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="114" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ab9178727a4ce89e1859d0c643d2644e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::SetParticleBoxArray</definition>
        <argsstring>(int lev, const BoxArray &amp;new_ba)</argsstring>
        <name>SetParticleBoxArray</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>new_ba</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondence will be broken here. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level on which to set the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_ba</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="126" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="81" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a7ef165a3433acfec088cba74cbd71328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::SetParticleDistributionMap</definition>
        <argsstring>(int lev, const DistributionMapping &amp;new_dmap)</argsstring>
        <name>SetParticleDistributionMap</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>new_dmap</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondence will be broken here. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level on which to set the dm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_dmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="135" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="89" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1afb0d994206e4bfcef5381c0147a476ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::SetParticleGeometry</definition>
        <argsstring>(int lev, const Geometry &amp;new_geom)</argsstring>
        <name>SetParticleGeometry</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>new_geom</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondence will be broken here. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level on which to set the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_geom</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="144" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="97" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1aa22d7a841e78ebeadb741eb5fedd6473" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray&amp; amrex::ParticleContainerBase::ParticleBoxArray</definition>
        <argsstring>(int lev) const</argsstring>
        <name>ParticleBoxArray</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> for a given level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="150" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="150" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a7e2ec84758098c59382aba1343bc4a8b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping&amp; amrex::ParticleContainerBase::ParticleDistributionMap</definition>
        <argsstring>(int lev) const</argsstring>
        <name>ParticleDistributionMap</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> for a given level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="157" column="31" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="157" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a9ae9a37898b7fb6929b598194c8bca61" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::ParticleContainerBase::Geom</definition>
        <argsstring>(int lev) const</argsstring>
        <name>Geom</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> for a given level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="164" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="164" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a00182008cdf9fb0039e82588fb15e67e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::ParticleContainerBase::ParticleGeom</definition>
        <argsstring>(int lev) const</argsstring>
        <name>ParticleGeom</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Get the particle <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> for a given level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="170" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="170" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1aa9d1fb8c82d375e2d473e0dd677b3f61" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::finestLevel</definition>
        <argsstring>() const</argsstring>
        <name>finestLevel</name>
        <briefdescription>
<para>the finest level actually defined for the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="173" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="173" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ad60ba0c10f19af842fdfbeaccd02b2ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::maxLevel</definition>
        <argsstring>() const</argsstring>
        <name>maxLevel</name>
        <briefdescription>
<para>the finest allowed level in the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref>, whether it is defined or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="176" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="176" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a6ec01a89cd77b4473dc1895e1a2b1ebe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::numLevels</definition>
        <argsstring>() const</argsstring>
        <name>numLevels</name>
        <briefdescription>
<para>the number of defined levels in the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="179" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="179" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a0e42065282e0589082794401db6d2247" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
        <definition>const ParGDBBase* amrex::ParticleContainerBase::GetParGDB</definition>
        <argsstring>() const</argsstring>
        <name>GetParGDB</name>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> object used to define this container (const version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="182" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1adafb217d391165d8afaf21b38912e068" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
        <definition>ParGDBBase* amrex::ParticleContainerBase::GetParGDB</definition>
        <argsstring>()</argsstring>
        <name>GetParGDB</name>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> object used to define this container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="185" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="185" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a13f1ba978494a83228cdee6dcbfc6f3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::Verbose</definition>
        <argsstring>()</argsstring>
        <name>Verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="187" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a2a0f56f8b64e6c0315442033ebd79fac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::SetVerbose</definition>
        <argsstring>(int verbose)</argsstring>
        <name>SetVerbose</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="189" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="189" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ae8cc9df742fa642c6289916de788afa5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1ParticleBufferMap" kindref="compound">ParticleBufferMap</ref> &amp;</type>
        <definition>const ParticleBufferMap&amp; amrex::ParticleContainerBase::BufferMap</definition>
        <argsstring>() const</argsstring>
        <name>BufferMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="191" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a444a7a4f352c7d70ab530e09facc7894" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::ParticleContainerBase::NeighborProcs</definition>
        <argsstring>(int ngrow) const</argsstring>
        <name>NeighborProcs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="193" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a92aa9afcd8adbbb62d06b8c3c293912a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MF</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ParticleContainerBase::OnSameGrids</definition>
        <argsstring>(int level, const MF &amp;mf) const</argsstring>
        <name>OnSameGrids</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="199" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="199" bodyend="199"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a7412df442ee70eda865ad538530acfe8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; ParticleContainerBase::CheckpointVersion</definition>
        <argsstring>()</argsstring>
        <name>CheckpointVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="201" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="105" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ab95e00002c7985b4bc7d425795d72404" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; ParticleContainerBase::PlotfileVersion</definition>
        <argsstring>()</argsstring>
        <name>PlotfileVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="202" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="121" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ac11b2227836fc7582170fbeba06c780a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; ParticleContainerBase::DataPrefix</definition>
        <argsstring>()</argsstring>
        <name>DataPrefix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="203" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="136" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a906decca7ce86c4a87f1874225779d05" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int ParticleContainerBase::MaxReaders</definition>
        <argsstring>()</argsstring>
        <name>MaxReaders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="204" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="146" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a1f3d39dbdae2586a92fdcc799ee9d1ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long ParticleContainerBase::MaxParticlesPerRead</definition>
        <argsstring>()</argsstring>
        <name>MaxParticlesPerRead</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="205" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="168" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ad4184276cc974fbc7a8316a89df2eb25" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; ParticleContainerBase::AggregationType</definition>
        <argsstring>()</argsstring>
        <name>AggregationType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="206" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="193" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a057b501a3b5f73f4c897da8ec8dd26f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int ParticleContainerBase::AggregationBuffer</definition>
        <argsstring>()</argsstring>
        <name>AggregationBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="207" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="213" bodyend="231"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a96b76ab915415e7891655d0910880636" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::BuildRedistributeMask</definition>
        <argsstring>(int lev, int nghost=1) const</argsstring>
        <name>BuildRedistributeMask</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="216" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="233" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a23baa2791b5f62a9dd1e7f6c709d4615" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::defineBufferMap</definition>
        <argsstring>() const</argsstring>
        <name>defineBufferMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="217" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="71" bodyend="79"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="75">
        <label>amrex::BaseFab&lt; int &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="69">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="87">
        <label>std::vector&lt; amrex::BoxArray, std::allocator&lt; amrex::BoxArray &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>amrex::iMultiFab</label>
        <link refid="classamrex_1_1iMultiFab"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="49">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="37" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="55">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="40" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>std::vector&lt; amrex::Box, std::allocator&lt; amrex::Box &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="80">
        <label>amrex::ParGDB</label>
        <link refid="classamrex_1_1ParGDB"/>
        <childnode refid="81" relation="public-inheritance">
        </childnode>
        <childnode refid="82" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="84" relation="usage">
          <edgelabel>m_rr</edgelabel>
        </childnode>
        <childnode refid="86" relation="usage">
          <edgelabel>m_ba</edgelabel>
        </childnode>
        <childnode refid="88" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
      </node>
      <node id="57">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="8" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="76">
        <label>std::unique_ptr&lt; amrex::IFABio &gt;</label>
        <childnode refid="77" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>K</label>
      </node>
      <node id="56">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="8">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="8" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>T</label>
      </node>
      <node id="26">
        <label>amrex::FabArrayBase::CommMetaData</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CommMetaData"/>
        <childnode refid="27" relation="usage">
          <edgelabel>m_RcvTags</edgelabel>
          <edgelabel>m_SndTags</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>m_LocTags</edgelabel>
        </childnode>
      </node>
      <node id="78">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="79" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>std::vector&lt; amrex::ParticleLocator&lt; amrex::DenseBins&lt; amrex::Box &gt; &gt;, std::allocator&lt; amrex::ParticleLocator&lt; amrex::DenseBins&lt; amrex::Box &gt; &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="73">
        <label>std::vector&lt; IArrayBox * &gt;</label>
        <childnode refid="74" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="89">
        <label>std::vector&lt; amrex::Geometry, std::allocator&lt; amrex::Geometry &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="61">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="62" relation="public-inheritance">
        </childnode>
      </node>
      <node id="71">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="72" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="66">
        <label>std::unique_ptr&lt; amrex::FBData&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="67" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="19" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="64">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="15" relation="usage">
          <edgelabel>hp</edgelabel>
          <edgelabel>dp</edgelabel>
        </childnode>
      </node>
      <node id="72">
        <label>amrex::Array4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="16" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="82">
        <label>amrex::Vector&lt; amrex::DistributionMapping &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="83" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="29" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="20" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="44" relation="public-inheritance">
        </childnode>
      </node>
      <node id="58">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="8" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="81">
        <label>amrex::ParGDBBase</label>
        <link refid="classamrex_1_1ParGDBBase"/>
      </node>
      <node id="60">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="53">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="34">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="8" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
        <childnode refid="37" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
      </node>
      <node id="86">
        <label>amrex::Vector&lt; amrex::BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="87" relation="public-inheritance">
        </childnode>
      </node>
      <node id="67">
        <label>amrex::FBData&lt; IArrayBox &gt;</label>
        <link refid="structamrex_1_1FBData"/>
        <childnode refid="23" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>nghost</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>recv_data</edgelabel>
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="68" relation="usage">
          <edgelabel>recv_stat</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>send_reqs</edgelabel>
          <edgelabel>recv_reqs</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
        <childnode refid="70" relation="usage">
          <edgelabel>fb</edgelabel>
        </childnode>
      </node>
      <node id="70">
        <label>amrex::FabArrayBase::FB</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FB"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_ngrow</edgelabel>
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="59">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="60" relation="public-inheritance">
        </childnode>
      </node>
      <node id="50">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="51" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="54">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="8" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="90">
        <label>amrex::ParticleBufferMap</label>
        <link refid="classamrex_1_1ParticleBufferMap"/>
        <childnode refid="91" relation="usage">
          <edgelabel>d_lev_offsets</edgelabel>
          <edgelabel>d_lev_gid_to_bucket</edgelabel>
          <edgelabel>d_bucket_to_pid</edgelabel>
        </childnode>
        <childnode refid="82" relation="usage">
          <edgelabel>m_dm</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>m_lev_offsets</edgelabel>
          <edgelabel>m_proc_box_offsets</edgelabel>
          <edgelabel>m_bucket_to_pid</edgelabel>
          <edgelabel>m_bucket_to_lev</edgelabel>
          <edgelabel>m_bucket_to_gid</edgelabel>
          <edgelabel>m_lev_gid_to_bucket</edgelabel>
          <edgelabel>m_proc_box_counts</edgelabel>
        </childnode>
        <childnode refid="86" relation="usage">
          <edgelabel>m_ba</edgelabel>
        </childnode>
      </node>
      <node id="65">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="3">
        <label>amrex::Vector&lt; amrex::ParticleLocator&lt; amrex::DenseBins&lt; amrex::Box &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="51">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="52" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
        <childnode refid="54" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="56" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>amrex::FabArrayBase::CPC</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CPC"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_srcng</edgelabel>
          <edgelabel>m_dstng</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>m_dstbdk</edgelabel>
          <edgelabel>m_srcbdk</edgelabel>
        </childnode>
        <childnode refid="46" relation="usage">
          <edgelabel>m_srcba</edgelabel>
          <edgelabel>m_dstba</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="83">
        <label>std::vector&lt; amrex::DistributionMapping, std::allocator&lt; amrex::DistributionMapping &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::allocator&lt; amrex::AssignGrid&lt; BinIteratorFactory &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="84">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="85" relation="public-inheritance">
        </childnode>
      </node>
      <node id="79">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::AmrParticleLocator&lt; amrex::DenseBins&lt; amrex::Box &gt; &gt;</label>
        <link refid="classamrex_1_1AmrParticleLocator"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_locators</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_grid_assignors</edgelabel>
        </childnode>
      </node>
      <node id="62">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="44">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="11" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>amrex::FabArray&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="12" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="65" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="66" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="71" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
        <childnode refid="73" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="47" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::ParticleContainerBase</label>
        <link refid="classamrex_1_1ParticleContainerBase"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_particle_locator</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>tile_size</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>redistribute_mask_ptr</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>neighbor_procs</edgelabel>
        </childnode>
        <childnode refid="78" relation="usage">
          <edgelabel>m_dummy_mf</edgelabel>
        </childnode>
        <childnode refid="80" relation="usage">
          <edgelabel>m_gdb_object</edgelabel>
        </childnode>
        <childnode refid="90" relation="usage">
          <edgelabel>m_buffer_map</edgelabel>
        </childnode>
        <childnode refid="81" relation="usage">
          <edgelabel>m_gdb</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>amrex::Array4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="16" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>std::unique_ptr&lt; amrex::iMultiFab &gt;</label>
        <childnode refid="10" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>amrex::PODVector&lt; amrex::AssignGrid&lt; BinIteratorFactory &gt; &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="39">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="8" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="74">
        <label>amrex::IArrayBox</label>
        <link refid="classamrex_1_1IArrayBox"/>
        <childnode refid="75" relation="public-inheritance">
        </childnode>
        <childnode refid="76" relation="usage">
          <edgelabel>ifabio</edgelabel>
        </childnode>
      </node>
      <node id="47">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
        <childnode refid="34" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="42" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="68">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="69" relation="public-inheritance">
        </childnode>
      </node>
      <node id="52">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="8" relation="usage">
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
        <childnode refid="53" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="91">
        <label>amrex::PODVector&lt; int &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="92" relation="public-inheritance">
        </childnode>
      </node>
      <node id="77">
        <label>amrex::IFABio</label>
        <link refid="classamrex_1_1IFABio"/>
      </node>
      <node id="27">
        <label>std::unique_ptr&lt; MapOfCopyComTagContainers &gt;</label>
        <childnode refid="28" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="92">
        <label>std::allocator&lt; int &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="43" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="63">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="64" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>std::unique_ptr&lt; amrex::PCData&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="22" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="33" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="85">
        <label>std::vector&lt; amrex::IntVect, std::allocator&lt; amrex::IntVect &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="48">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
        <childnode refid="49" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>amrex::FabFactory&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="88">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="89" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="24" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="34" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>amrex::Vector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="38" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="22">
        <label>amrex::PCData&lt; IArrayBox &gt;</label>
        <link refid="structamrex_1_1PCData"/>
        <childnode refid="23" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>cpc</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>recv_data</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>src</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>send_reqs</edgelabel>
          <edgelabel>recv_reqs</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>std::unique_ptr&lt; CopyComTagsContainer &gt;</label>
        <childnode refid="31" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="23" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="22" bodyend="229"/>
    <listofallmembers>
      <member refid="classamrex_1_1ParticleContainerBase_1a057b501a3b5f73f4c897da8ec8dd26f9" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>AggregationBuffer</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ad4184276cc974fbc7a8316a89df2eb25" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>AggregationType</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ae8cc9df742fa642c6289916de788afa5" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>BufferMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a96b76ab915415e7891655d0910880636" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>BuildRedistributeMask</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a7412df442ee70eda865ad538530acfe8" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>CheckpointVersion</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ac11b2227836fc7582170fbeba06c780a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>DataPrefix</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a58cb6f59ee8ed859dce4a4c82b148dab" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ab2d7e2f655c0926dc7856544d9626140" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2d2f5b76392326defb14c8adaee1f1a5" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a1784a92d18a97247d05bbaae9ba0135b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a23baa2791b5f62a9dd1e7f6c709d4615" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>defineBufferMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a29311c7fd7f83d43f84951476f9a265d" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>do_tiling</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aa9d1fb8c82d375e2d473e0dd677b3f61" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>finestLevel</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a9ae9a37898b7fb6929b598194c8bca61" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Geom</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a0e42065282e0589082794401db6d2247" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>GetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adafb217d391165d8afaf21b38912e068" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>GetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a0fef888a5370f9723f2ab2df2fe32266" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>isDefined</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2eddb55f0ebdf394ea2ace09e1d0e4a4" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_buffer_map</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adb9b347bff9efa17831af4b1c5cb846a" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_dummy_mf</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2821fc52ed661ccd9e9d821b81476fff" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_gdb</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2377d6db2ff1c36ebbb5424d391ada41" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_gdb_object</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aa9bbd6752d478b3a24e66f2caa11196b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_particle_locator</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a89f6fb84fb7e73fc185ae5d8f45818ab" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_verbose</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adc8bb6ea7e7d8a9596936623bc2e26ed" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MakeMFIter</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a41cb0c34d64f3d1df87d83f3b26f594b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MakeMFIter</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a30a608b14352a5cd5bfed79f69f98011" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MakeMFIter</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ad60ba0c10f19af842fdfbeaccd02b2ed" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>maxLevel</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a1f3d39dbdae2586a92fdcc799ee9d1ea" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MaxParticlesPerRead</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a906decca7ce86c4a87f1874225779d05" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MaxReaders</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a5a0a39b2da4b85ad599ea7fc51fba940" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>memEfficientSort</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a0e1a0dcc5bf3f405f40ad020f18389bc" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>neighbor_procs</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a444a7a4f352c7d70ab530e09facc7894" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>NeighborProcs</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a6ec01a89cd77b4473dc1895e1a2b1ebe" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>numLevels</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a92aa9afcd8adbbb62d06b8c3c293912a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>OnSameGrids</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aa22d7a841e78ebeadb741eb5fedd6473" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleBoxArray</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ab54580a5d1f1373d18b7d8f88a087fec" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a783bf6edc1d9d0bdc5d4e8dd1f98cd5f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a66e036defd5c86431c583bbd8cb91e2d" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a1b59660938f651e5a56bc45bb6bc4d8e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1af60ff4efea559ba4e49dc7178e504e4c" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a7e2ec84758098c59382aba1343bc4a8b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleDistributionMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a00182008cdf9fb0039e82588fb15e67e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleGeom</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ab95e00002c7985b4bc7d425795d72404" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>PlotfileVersion</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a7fc7373a60be7c74a38a17b1711f59fa" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>RedefineDummyMF</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ac6b4b306d8f0399657b3884f51ea569e" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>redistribute_mask_nghost</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a18183e85d5ae22c27721996b3c5bfead" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>redistribute_mask_ptr</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a914a3fd813739f126e92408d194a3752" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>reserveData</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a41c8b5cccfa817dbfa0b005451322817" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>resizeData</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ab9178727a4ce89e1859d0c643d2644e6" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetParticleBoxArray</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a7ef165a3433acfec088cba74cbd71328" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetParticleDistributionMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1afb0d994206e4bfcef5381c0147a476ba" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetParticleGeometry</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2a0f56f8b64e6c0315442033ebd79fac" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetVerbose</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adb03167dec6a952cfa60beb45a514dfa" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>tile_size</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a13f1ba978494a83228cdee6dcbfc6f3b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Verbose</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
