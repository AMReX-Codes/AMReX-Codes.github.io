<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1ParticleContainerBase" kind="class" language="C++" prot="public">
    <compoundname>amrex::ParticleContainerBase</compoundname>
    <derivedcompoundref refid="classamrex_1_1ParticleContainer" prot="public" virt="non-virtual">amrex::ParticleContainer&lt; T_NStructReal, T_NStructInt, T_NArrayReal, T_NArrayInt, Allocator &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1ParticleContainer" prot="public" virt="non-virtual">amrex::ParticleContainer&lt; AMREX_SPACEDIM &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1ParticleContainer" prot="public" virt="non-virtual">amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1ParticleContainer" prot="public" virt="non-virtual">amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt, Allocator &gt;</derivedcompoundref>
    <includes refid="AMReX__ParticleContainerBase_8H" local="no">AMReX_ParticleContainerBase.H</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a29311c7fd7f83d43f84951476f9a265d" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool ParticleContainerBase::do_tiling</definition>
        <argsstring></argsstring>
        <name>do_tiling</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="199" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1adb03167dec6a952cfa60beb45a514dfa" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect ParticleContainerBase::tile_size</definition>
        <argsstring></argsstring>
        <name>tile_size</name>
        <initializer>{ <ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(1024000,8,8) }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="200" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="200" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a89f6fb84fb7e73fc185ae5d8f45818ab" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::m_verbose</definition>
        <argsstring></argsstring>
        <name>m_verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="207" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a2821fc52ed661ccd9e9d821b81476fff" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
        <definition>ParGDBBase* amrex::ParticleContainerBase::m_gdb</definition>
        <argsstring></argsstring>
        <name>m_gdb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="208" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a2377d6db2ff1c36ebbb5424d391ada41" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref></type>
        <definition>ParGDB amrex::ParticleContainerBase::m_gdb_object</definition>
        <argsstring></argsstring>
        <name>m_gdb_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="209" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1adb9b347bff9efa17831af4b1c5cb846a" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;MultiFab&gt; &gt; amrex::ParticleContainerBase::m_dummy_mf</definition>
        <argsstring></argsstring>
        <name>m_dummy_mf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="210" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a18183e85d5ae22c27721996b3c5bfead" prot="protected" static="no" mutable="yes">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt;iMultiFab&gt; amrex::ParticleContainerBase::redistribute_mask_ptr</definition>
        <argsstring></argsstring>
        <name>redistribute_mask_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="212" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1ac6b4b306d8f0399657b3884f51ea569e" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::redistribute_mask_nghost</definition>
        <argsstring></argsstring>
        <name>redistribute_mask_nghost</name>
        <initializer>= std::numeric_limits&lt;<ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>&gt;::<ref refid="namespaceamrex_1a9f149fc5da0cd0b68a9f7fddc8a7461d" kindref="member">min</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="213" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a0e1a0dcc5bf3f405f40ad020f18389bc" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>amrex::Vector&lt;int&gt; amrex::ParticleContainerBase::neighbor_procs</definition>
        <argsstring></argsstring>
        <name>neighbor_procs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="214" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a2eddb55f0ebdf394ea2ace09e1d0e4a4" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1ParticleBufferMap" kindref="compound">ParticleBufferMap</ref></type>
        <definition>ParticleBufferMap amrex::ParticleContainerBase::m_buffer_map</definition>
        <argsstring></argsstring>
        <name>m_buffer_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="215" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="215" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ab54580a5d1f1373d18b7d8f88a087fec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>()</argsstring>
        <name>ParticleContainerBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="25" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="25" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a783bf6edc1d9d0bdc5d4e8dd1f98cd5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(ParGDBBase *gdb)</argsstring>
        <name>ParticleContainerBase</name>
        <param>
          <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
          <declname>gdb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="31" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="31" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a66e036defd5c86431c583bbd8cb91e2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(const Geometry &amp;geom, const DistributionMapping &amp;dmap, const BoxArray &amp;ba)</argsstring>
        <name>ParticleContainerBase</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="37" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="37" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a1b59660938f651e5a56bc45bb6bc4d8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; int &gt; &amp;rr)</argsstring>
        <name>ParticleContainerBase</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="47" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="47" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1af60ff4efea559ba4e49dc7178e504e4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; IntVect &gt; &amp;rr)</argsstring>
        <name>ParticleContainerBase</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="58" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="58" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a58cb6f59ee8ed859dce4a4c82b148dab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::Define</definition>
        <argsstring>(ParGDBBase *gdb)</argsstring>
        <name>Define</name>
        <param>
          <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
          <declname>gdb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="81" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ab2d7e2f655c0926dc7856544d9626140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::Define</definition>
        <argsstring>(const Geometry &amp;geom, const DistributionMapping &amp;dmap, const BoxArray &amp;ba)</argsstring>
        <name>Define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="83" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="13" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a2d2f5b76392326defb14c8adaee1f1a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::Define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; int &gt; &amp;rr)</argsstring>
        <name>Define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="87" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="21" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a914a3fd813739f126e92408d194a3752" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::reserveData</definition>
        <argsstring>()</argsstring>
        <name>reserveData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="92" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a41c8b5cccfa817dbfa0b005451322817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::resizeData</definition>
        <argsstring>()</argsstring>
        <name>resizeData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="93" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="35" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a7fc7373a60be7c74a38a17b1711f59fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::RedefineDummyMF</definition>
        <argsstring>(int lev)</argsstring>
        <name>RedefineDummyMF</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="94" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="44" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1adc8bb6ea7e7d8a9596936623bc2e26ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref></type>
        <definition>MFIter amrex::ParticleContainerBase::MakeMFIter</definition>
        <argsstring>(int lev, const MFItInfo &amp;info) const</argsstring>
        <name>MakeMFIter</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFItInfo" kindref="compound">MFItInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="96" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a41cb0c34d64f3d1df87d83f3b26f594b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref></type>
        <definition>MFIter amrex::ParticleContainerBase::MakeMFIter</definition>
        <argsstring>(int lev) const</argsstring>
        <name>MakeMFIter</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="101" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a30a608b14352a5cd5bfed79f69f98011" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref></type>
        <definition>MFIter amrex::ParticleContainerBase::MakeMFIter</definition>
        <argsstring>(int lev, bool tile) const</argsstring>
        <name>MakeMFIter</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>tile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="106" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ab9178727a4ce89e1859d0c643d2644e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::SetParticleBoxArray</definition>
        <argsstring>(int lev, const BoxArray &amp;new_ba)</argsstring>
        <name>SetParticleBoxArray</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>new_ba</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondence will be broken here. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level on which to set the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_ba</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="118" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="71" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a7ef165a3433acfec088cba74cbd71328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::SetParticleDistributionMap</definition>
        <argsstring>(int lev, const DistributionMapping &amp;new_dmap)</argsstring>
        <name>SetParticleDistributionMap</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>new_dmap</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondence will be broken here. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level on which to set the dm. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_dmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="127" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="79" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1afb0d994206e4bfcef5381c0147a476ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::SetParticleGeometry</definition>
        <argsstring>(int lev, const Geometry &amp;new_geom)</argsstring>
        <name>SetParticleGeometry</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>new_geom</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondence will be broken here. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level on which to set the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_geom</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> to use. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="136" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="87" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1aa22d7a841e78ebeadb741eb5fedd6473" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray&amp; amrex::ParticleContainerBase::ParticleBoxArray</definition>
        <argsstring>(int lev) const</argsstring>
        <name>ParticleBoxArray</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> for a given level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="142" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="142" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a7e2ec84758098c59382aba1343bc4a8b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping&amp; amrex::ParticleContainerBase::ParticleDistributionMap</definition>
        <argsstring>(int lev) const</argsstring>
        <name>ParticleDistributionMap</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> for a given level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="149" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="149" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a9ae9a37898b7fb6929b598194c8bca61" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::ParticleContainerBase::Geom</definition>
        <argsstring>(int lev) const</argsstring>
        <name>Geom</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> for a given level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="156" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a00182008cdf9fb0039e82588fb15e67e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::ParticleContainerBase::ParticleGeom</definition>
        <argsstring>(int lev) const</argsstring>
        <name>ParticleGeom</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Get the particle <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> for a given level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="162" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1aa9d1fb8c82d375e2d473e0dd677b3f61" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::finestLevel</definition>
        <argsstring>() const</argsstring>
        <name>finestLevel</name>
        <briefdescription>
<para>the finest level actually defined for the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="165" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ad60ba0c10f19af842fdfbeaccd02b2ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::maxLevel</definition>
        <argsstring>() const</argsstring>
        <name>maxLevel</name>
        <briefdescription>
<para>the finest allowed level in the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref>, whether it is defined or not. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="168" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a6ec01a89cd77b4473dc1895e1a2b1ebe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::numLevels</definition>
        <argsstring>() const</argsstring>
        <name>numLevels</name>
        <briefdescription>
<para>the number of defined levels in the <ref refid="classamrex_1_1ParticleContainer" kindref="compound">ParticleContainer</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="171" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="171" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a0e42065282e0589082794401db6d2247" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
        <definition>const ParGDBBase* amrex::ParticleContainerBase::GetParGDB</definition>
        <argsstring>() const</argsstring>
        <name>GetParGDB</name>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> object used to define this container (const version) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="174" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1adafb217d391165d8afaf21b38912e068" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
        <definition>ParGDBBase* amrex::ParticleContainerBase::GetParGDB</definition>
        <argsstring>()</argsstring>
        <name>GetParGDB</name>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> object used to define this container. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="177" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a13f1ba978494a83228cdee6dcbfc6f3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::Verbose</definition>
        <argsstring>()</argsstring>
        <name>Verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="179" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="179" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a2a0f56f8b64e6c0315442033ebd79fac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::SetVerbose</definition>
        <argsstring>(int verbose)</argsstring>
        <name>SetVerbose</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="181" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ae8cc9df742fa642c6289916de788afa5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1ParticleBufferMap" kindref="compound">ParticleBufferMap</ref> &amp;</type>
        <definition>const ParticleBufferMap&amp; amrex::ParticleContainerBase::BufferMap</definition>
        <argsstring>() const</argsstring>
        <name>BufferMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="183" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="183" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a444a7a4f352c7d70ab530e09facc7894" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::ParticleContainerBase::NeighborProcs</definition>
        <argsstring>(int ngrow) const</argsstring>
        <name>NeighborProcs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="185" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1af30a1355449494cd1d83d8093b48a063" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleContainerBase::OnSameGrids</definition>
        <argsstring>(int level, const MultiFab &amp;mf) const</argsstring>
        <name>OnSameGrids</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="190" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="190" bodyend="190"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a9d36856eae65ca9abc369ee2a9885bdc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; ParticleContainerBase::Version</definition>
        <argsstring>()</argsstring>
        <name>Version</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="192" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="95" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ac11b2227836fc7582170fbeba06c780a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; ParticleContainerBase::DataPrefix</definition>
        <argsstring>()</argsstring>
        <name>DataPrefix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="193" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="110" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a906decca7ce86c4a87f1874225779d05" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int ParticleContainerBase::MaxReaders</definition>
        <argsstring>()</argsstring>
        <name>MaxReaders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="194" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="120" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a1f3d39dbdae2586a92fdcc799ee9d1ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long ParticleContainerBase::MaxParticlesPerRead</definition>
        <argsstring>()</argsstring>
        <name>MaxParticlesPerRead</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="195" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="142" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ad4184276cc974fbc7a8316a89df2eb25" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; ParticleContainerBase::AggregationType</definition>
        <argsstring>()</argsstring>
        <name>AggregationType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="196" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="167" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a057b501a3b5f73f4c897da8ec8dd26f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int ParticleContainerBase::AggregationBuffer</definition>
        <argsstring>()</argsstring>
        <name>AggregationBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="197" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="187" bodyend="205"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a96b76ab915415e7891655d0910880636" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::BuildRedistributeMask</definition>
        <argsstring>(int lev, int nghost=1) const</argsstring>
        <name>BuildRedistributeMask</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="204" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="207" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a23baa2791b5f62a9dd1e7f6c709d4615" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::defineBufferMap</definition>
        <argsstring>() const</argsstring>
        <name>defineBufferMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="205" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="61" bodyend="69"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5055">
        <label>amrex::ParticleContainer&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1ParticleContainer"/>
        <childnode refid="5053" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5054">
        <label>amrex::ParticleContainer&lt; T_NStructReal, T_NStructInt, T_NArrayReal, T_NArrayInt, Allocator &gt;</label>
        <link refid="classamrex_1_1ParticleContainer"/>
        <childnode refid="5053" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5053">
        <label>amrex::ParticleContainerBase</label>
        <link refid="classamrex_1_1ParticleContainerBase"/>
      </node>
      <node id="5059">
        <label>amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</label>
        <link refid="classamrex_1_1NeighborParticleContainer"/>
        <childnode refid="5058" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5056">
        <label>amrex::TracerParticleContainer</label>
        <link refid="classamrex_1_1TracerParticleContainer"/>
        <childnode refid="5055" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5060">
        <label>amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt, Allocator &gt;</label>
        <link refid="classamrex_1_1ParticleContainer"/>
        <childnode refid="5053" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5057">
        <label>amrex::AmrTracerParticleContainer</label>
        <link refid="classamrex_1_1AmrTracerParticleContainer"/>
        <childnode refid="5056" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5061">
        <label>amrex::AmrParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt, Allocator &gt;</label>
        <link refid="classamrex_1_1AmrParticleContainer"/>
        <childnode refid="5060" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5058">
        <label>amrex::ParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</label>
        <link refid="classamrex_1_1ParticleContainer"/>
        <childnode refid="5053" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5075">
        <label>std::vector&lt; amrex::BoxArray, std::allocator&lt; amrex::BoxArray &gt; &gt;</label>
      </node>
      <node id="5068">
        <label>amrex::ParGDB</label>
        <link refid="classamrex_1_1ParGDB"/>
        <childnode refid="5069" relation="public-inheritance">
        </childnode>
        <childnode refid="5070" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="5072" relation="usage">
          <edgelabel>m_rr</edgelabel>
        </childnode>
        <childnode refid="5074" relation="usage">
          <edgelabel>m_ba</edgelabel>
        </childnode>
        <childnode refid="5076" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
      </node>
      <node id="5063">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="5063" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="5066">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5067" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5077">
        <label>std::vector&lt; amrex::Geometry, std::allocator&lt; amrex::Geometry &gt; &gt;</label>
      </node>
      <node id="5070">
        <label>amrex::Vector&lt; amrex::DistributionMapping &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5071" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5064">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5065" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5069">
        <label>amrex::ParGDBBase</label>
        <link refid="classamrex_1_1ParGDBBase"/>
      </node>
      <node id="5074">
        <label>amrex::Vector&lt; amrex::BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5075" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5078">
        <label>amrex::ParticleBufferMap</label>
        <link refid="classamrex_1_1ParticleBufferMap"/>
        <childnode refid="5079" relation="usage">
          <edgelabel>d_lev_offsets</edgelabel>
          <edgelabel>d_lev_gid_to_bucket</edgelabel>
          <edgelabel>d_bucket_to_pid</edgelabel>
        </childnode>
        <childnode refid="5070" relation="usage">
          <edgelabel>m_dm</edgelabel>
        </childnode>
        <childnode refid="5064" relation="usage">
          <edgelabel>m_lev_offsets</edgelabel>
          <edgelabel>m_proc_box_offsets</edgelabel>
          <edgelabel>m_bucket_to_pid</edgelabel>
          <edgelabel>m_bucket_to_lev</edgelabel>
          <edgelabel>m_bucket_to_gid</edgelabel>
          <edgelabel>m_lev_gid_to_bucket</edgelabel>
          <edgelabel>m_proc_box_counts</edgelabel>
        </childnode>
        <childnode refid="5074" relation="usage">
          <edgelabel>m_ba</edgelabel>
        </childnode>
      </node>
      <node id="5071">
        <label>std::vector&lt; amrex::DistributionMapping, std::allocator&lt; amrex::DistributionMapping &gt; &gt;</label>
      </node>
      <node id="5072">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5073" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5067">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="5065">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="5062">
        <label>amrex::ParticleContainerBase</label>
        <link refid="classamrex_1_1ParticleContainerBase"/>
        <childnode refid="5063" relation="usage">
          <edgelabel>tile_size</edgelabel>
        </childnode>
        <childnode refid="5064" relation="usage">
          <edgelabel>neighbor_procs</edgelabel>
        </childnode>
        <childnode refid="5066" relation="usage">
          <edgelabel>m_dummy_mf</edgelabel>
        </childnode>
        <childnode refid="5068" relation="usage">
          <edgelabel>m_gdb_object</edgelabel>
        </childnode>
        <childnode refid="5078" relation="usage">
          <edgelabel>m_buffer_map</edgelabel>
        </childnode>
        <childnode refid="5069" relation="usage">
          <edgelabel>m_gdb</edgelabel>
        </childnode>
      </node>
      <node id="5079">
        <label>amrex::PODVector&lt; int &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="5080" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5080">
        <label>std::allocator&lt; int &gt;</label>
      </node>
      <node id="5073">
        <label>std::vector&lt; amrex::IntVect, std::allocator&lt; amrex::IntVect &gt; &gt;</label>
      </node>
      <node id="5076">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5077" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="22" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="21" bodyend="219"/>
    <listofallmembers>
      <member refid="classamrex_1_1ParticleContainerBase_1a057b501a3b5f73f4c897da8ec8dd26f9" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>AggregationBuffer</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ad4184276cc974fbc7a8316a89df2eb25" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>AggregationType</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ae8cc9df742fa642c6289916de788afa5" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>BufferMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a96b76ab915415e7891655d0910880636" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>BuildRedistributeMask</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ac11b2227836fc7582170fbeba06c780a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>DataPrefix</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a58cb6f59ee8ed859dce4a4c82b148dab" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ab2d7e2f655c0926dc7856544d9626140" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2d2f5b76392326defb14c8adaee1f1a5" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a23baa2791b5f62a9dd1e7f6c709d4615" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>defineBufferMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a29311c7fd7f83d43f84951476f9a265d" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>do_tiling</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aa9d1fb8c82d375e2d473e0dd677b3f61" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>finestLevel</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a9ae9a37898b7fb6929b598194c8bca61" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Geom</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a0e42065282e0589082794401db6d2247" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>GetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adafb217d391165d8afaf21b38912e068" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>GetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2eddb55f0ebdf394ea2ace09e1d0e4a4" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_buffer_map</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adb9b347bff9efa17831af4b1c5cb846a" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_dummy_mf</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2821fc52ed661ccd9e9d821b81476fff" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_gdb</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2377d6db2ff1c36ebbb5424d391ada41" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_gdb_object</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a89f6fb84fb7e73fc185ae5d8f45818ab" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_verbose</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adc8bb6ea7e7d8a9596936623bc2e26ed" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MakeMFIter</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a41cb0c34d64f3d1df87d83f3b26f594b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MakeMFIter</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a30a608b14352a5cd5bfed79f69f98011" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MakeMFIter</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ad60ba0c10f19af842fdfbeaccd02b2ed" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>maxLevel</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a1f3d39dbdae2586a92fdcc799ee9d1ea" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MaxParticlesPerRead</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a906decca7ce86c4a87f1874225779d05" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MaxReaders</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a0e1a0dcc5bf3f405f40ad020f18389bc" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>neighbor_procs</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a444a7a4f352c7d70ab530e09facc7894" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>NeighborProcs</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a6ec01a89cd77b4473dc1895e1a2b1ebe" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>numLevels</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1af30a1355449494cd1d83d8093b48a063" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>OnSameGrids</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aa22d7a841e78ebeadb741eb5fedd6473" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleBoxArray</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ab54580a5d1f1373d18b7d8f88a087fec" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a783bf6edc1d9d0bdc5d4e8dd1f98cd5f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a66e036defd5c86431c583bbd8cb91e2d" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a1b59660938f651e5a56bc45bb6bc4d8e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1af60ff4efea559ba4e49dc7178e504e4c" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a7e2ec84758098c59382aba1343bc4a8b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleDistributionMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a00182008cdf9fb0039e82588fb15e67e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleGeom</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a7fc7373a60be7c74a38a17b1711f59fa" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>RedefineDummyMF</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ac6b4b306d8f0399657b3884f51ea569e" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>redistribute_mask_nghost</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a18183e85d5ae22c27721996b3c5bfead" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>redistribute_mask_ptr</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a914a3fd813739f126e92408d194a3752" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>reserveData</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a41c8b5cccfa817dbfa0b005451322817" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>resizeData</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ab9178727a4ce89e1859d0c643d2644e6" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetParticleBoxArray</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a7ef165a3433acfec088cba74cbd71328" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetParticleDistributionMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1afb0d994206e4bfcef5381c0147a476ba" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetParticleGeometry</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2a0f56f8b64e6c0315442033ebd79fac" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetVerbose</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adb03167dec6a952cfa60beb45a514dfa" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>tile_size</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a13f1ba978494a83228cdee6dcbfc6f3b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Verbose</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a9d36856eae65ca9abc369ee2a9885bdc" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Version</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
