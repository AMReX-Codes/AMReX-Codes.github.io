<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1ParticleContainerBase" kind="class" language="C++" prot="public">
    <compoundname>amrex::ParticleContainerBase</compoundname>
    <derivedcompoundref refid="classamrex_1_1ParticleContainer__impl" prot="public" virt="non-virtual">amrex::ParticleContainer_impl&lt; T_ParticleType, 0, 0, DefaultAllocator, DefaultAssignor &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1ParticleContainer__impl" prot="public" virt="non-virtual">amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;</derivedcompoundref>
    <includes refid="AMReX__ParticleContainerBase_8H" local="no">AMReX_ParticleContainerBase.H</includes>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1aa218a301fbc9bf494d8dcecf7ee60d6d" prot="public" static="yes" mutable="no">
        <type><ref refid="AMReX__Extension_8H_1ac05fa35b3db13c4599d7ad5fc51bef47" kindref="member">AMREX_EXPORT</ref> bool</type>
        <definition>bool amrex::ParticleContainerBase::do_tiling</definition>
        <argsstring></argsstring>
        <name>do_tiling</name>
        <qualifiedname>amrex::ParticleContainerBase::do_tiling</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="256" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1aef5ac9f0985c8a3170a554969eb375cb" prot="public" static="yes" mutable="no">
        <type><ref refid="AMReX__Extension_8H_1ac05fa35b3db13c4599d7ad5fc51bef47" kindref="member">AMREX_EXPORT</ref> <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::ParticleContainerBase::tile_size</definition>
        <argsstring></argsstring>
        <name>tile_size</name>
        <qualifiedname>amrex::ParticleContainerBase::tile_size</qualifiedname>
        <initializer>{ <ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(1024000,8,8) }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="257" column="33" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a5bc087527efb5c9aec1ca15f3abafc35" prot="public" static="yes" mutable="no">
        <type><ref refid="AMReX__Extension_8H_1ac05fa35b3db13c4599d7ad5fc51bef47" kindref="member">AMREX_EXPORT</ref> bool</type>
        <definition>bool amrex::ParticleContainerBase::memEfficientSort</definition>
        <argsstring></argsstring>
        <name>memEfficientSort</name>
        <qualifiedname>amrex::ParticleContainerBase::memEfficientSort</qualifiedname>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="258" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1adaf8edd2c78ff65581a26e7ce38a5489" prot="public" static="yes" mutable="no">
        <type><ref refid="AMReX__Extension_8H_1ac05fa35b3db13c4599d7ad5fc51bef47" kindref="member">AMREX_EXPORT</ref> bool</type>
        <definition>bool amrex::ParticleContainerBase::use_comms_arena</definition>
        <argsstring></argsstring>
        <name>use_comms_arena</name>
        <qualifiedname>amrex::ParticleContainerBase::use_comms_arena</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="259" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="259" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1aa9bbd6752d478b3a24e66f2caa11196b" prot="public" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1AmrParticleLocator" kindref="compound">AmrParticleLocator</ref>&lt; <ref refid="classamrex_1_1DenseBins" kindref="compound">DenseBins</ref>&lt; <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &gt; &gt;</type>
        <definition>AmrParticleLocator&lt;DenseBins&lt;Box&gt; &gt; amrex::ParticleContainerBase::m_particle_locator</definition>
        <argsstring></argsstring>
        <name>m_particle_locator</name>
        <qualifiedname>amrex::ParticleContainerBase::m_particle_locator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="260" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="260" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a89f6fb84fb7e73fc185ae5d8f45818ab" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::m_verbose</definition>
        <argsstring></argsstring>
        <name>m_verbose</name>
        <qualifiedname>amrex::ParticleContainerBase::m_verbose</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="267" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="267" bodyend="267"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1aed7d0053f45c4e966e5e3e69d6f19d68" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::m_stable_redistribute</definition>
        <argsstring></argsstring>
        <name>m_stable_redistribute</name>
        <qualifiedname>amrex::ParticleContainerBase::m_stable_redistribute</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="268" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a7faac754ff05cf1b841bfe49dad579ba" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> &gt;</type>
        <definition>std::unique_ptr&lt;ParGDB&gt; amrex::ParticleContainerBase::m_gdb_object</definition>
        <argsstring></argsstring>
        <name>m_gdb_object</name>
        <qualifiedname>amrex::ParticleContainerBase::m_gdb_object</qualifiedname>
        <initializer>= std::make_unique&lt;<ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref>&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="269" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a2821fc52ed661ccd9e9d821b81476fff" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
        <definition>ParGDBBase* amrex::ParticleContainerBase::m_gdb</definition>
        <argsstring></argsstring>
        <name>m_gdb</name>
        <qualifiedname>amrex::ParticleContainerBase::m_gdb</qualifiedname>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="270" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="270" bodyend="270"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1adb9b347bff9efa17831af4b1c5cb846a" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;MultiFab&gt; &gt; amrex::ParticleContainerBase::m_dummy_mf</definition>
        <argsstring></argsstring>
        <name>m_dummy_mf</name>
        <qualifiedname>amrex::ParticleContainerBase::m_dummy_mf</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="271" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a18183e85d5ae22c27721996b3c5bfead" prot="protected" static="no" mutable="yes">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt;iMultiFab&gt; amrex::ParticleContainerBase::redistribute_mask_ptr</definition>
        <argsstring></argsstring>
        <name>redistribute_mask_ptr</name>
        <qualifiedname>amrex::ParticleContainerBase::redistribute_mask_ptr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="273" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1ac6b4b306d8f0399657b3884f51ea569e" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::redistribute_mask_nghost</definition>
        <argsstring></argsstring>
        <name>redistribute_mask_nghost</name>
        <qualifiedname>amrex::ParticleContainerBase::redistribute_mask_nghost</qualifiedname>
        <initializer>= std::numeric_limits&lt;<ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>&gt;<ref refid="namespaceamrex_1a4963180ac09020e51a2077bf2ebdb323" kindref="member">::min</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="274" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a0e1a0dcc5bf3f405f40ad020f18389bc" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>amrex::Vector&lt;int&gt; amrex::ParticleContainerBase::neighbor_procs</definition>
        <argsstring></argsstring>
        <name>neighbor_procs</name>
        <qualifiedname>amrex::ParticleContainerBase::neighbor_procs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="275" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a2eddb55f0ebdf394ea2ace09e1d0e4a4" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1ParticleBufferMap" kindref="compound">ParticleBufferMap</ref></type>
        <definition>ParticleBufferMap amrex::ParticleContainerBase::m_buffer_map</definition>
        <argsstring></argsstring>
        <name>m_buffer_map</name>
        <qualifiedname>amrex::ParticleContainerBase::m_buffer_map</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="276" column="31" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="276" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a51bba5cff5a55e3f6ce46c0b56fa1809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>()=default</argsstring>
        <name>ParticleContainerBase</name>
        <qualifiedname>amrex::ParticleContainerBase::ParticleContainerBase</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="26" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a783bf6edc1d9d0bdc5d4e8dd1f98cd5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(ParGDBBase *gdb)</argsstring>
        <name>ParticleContainerBase</name>
        <qualifiedname>amrex::ParticleContainerBase::ParticleContainerBase</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
          <declname>gdb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="28" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a66e036defd5c86431c583bbd8cb91e2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(const Geometry &amp;geom, const DistributionMapping &amp;dmap, const BoxArray &amp;ba)</argsstring>
        <name>ParticleContainerBase</name>
        <qualifiedname>amrex::ParticleContainerBase::ParticleContainerBase</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="33" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="33" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a1b59660938f651e5a56bc45bb6bc4d8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; int &gt; &amp;rr)</argsstring>
        <name>ParticleContainerBase</name>
        <qualifiedname>amrex::ParticleContainerBase::ParticleContainerBase</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="42" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="42" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1af60ff4efea559ba4e49dc7178e504e4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; IntVect &gt; &amp;rr)</argsstring>
        <name>ParticleContainerBase</name>
        <qualifiedname>amrex::ParticleContainerBase::ParticleContainerBase</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="52" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="52" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a9767823a5595f287569a535bb3b8ae59" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual amrex::ParticleContainerBase::~ParticleContainerBase</definition>
        <argsstring>()=default</argsstring>
        <name>~ParticleContainerBase</name>
        <qualifiedname>amrex::ParticleContainerBase::~ParticleContainerBase</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="75" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a5f71ad65c90b78b062f40127d91a3134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(const ParticleContainerBase &amp;)=delete</argsstring>
        <name>ParticleContainerBase</name>
        <qualifiedname>amrex::ParticleContainerBase::ParticleContainerBase</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainerBase" kindref="compound">ParticleContainerBase</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="77" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a05d7cf849b59c815bc33a0f71d68576b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParticleContainerBase" kindref="compound">ParticleContainerBase</ref> &amp;</type>
        <definition>ParticleContainerBase &amp; amrex::ParticleContainerBase::operator=</definition>
        <argsstring>(const ParticleContainerBase &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::ParticleContainerBase::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainerBase" kindref="compound">ParticleContainerBase</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="78" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1af17feaf161d82ae2ef0466b6188cc7b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(ParticleContainerBase &amp;&amp;)=default</argsstring>
        <name>ParticleContainerBase</name>
        <qualifiedname>amrex::ParticleContainerBase::ParticleContainerBase</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainerBase" kindref="compound">ParticleContainerBase</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="80" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ab1ba13d6abacc075b19e6375ec9889f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParticleContainerBase" kindref="compound">ParticleContainerBase</ref> &amp;</type>
        <definition>ParticleContainerBase &amp; amrex::ParticleContainerBase::operator=</definition>
        <argsstring>(ParticleContainerBase &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::ParticleContainerBase::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainerBase" kindref="compound">ParticleContainerBase</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="81" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a58cb6f59ee8ed859dce4a4c82b148dab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::Define</definition>
        <argsstring>(ParGDBBase *gdb)</argsstring>
        <name>Define</name>
        <qualifiedname>amrex::ParticleContainerBase::Define</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
          <declname>gdb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="83" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a5e2317ff9e5de3e76060c231e11da6f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::Define</definition>
        <argsstring>(const Geometry &amp;geom, const DistributionMapping &amp;dmap, const BoxArray &amp;ba)</argsstring>
        <name>Define</name>
        <qualifiedname>amrex::ParticleContainerBase::Define</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="85" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="15" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a9886049870cb6af613dda4e8791ea76f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::Define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; int &gt; &amp;rr)</argsstring>
        <name>Define</name>
        <qualifiedname>amrex::ParticleContainerBase::Define</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="89" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="23" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a5ffe421378d1b06703de250f2cfcf330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::Define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; IntVect &gt; &amp;rr)</argsstring>
        <name>Define</name>
        <qualifiedname>amrex::ParticleContainerBase::Define</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="94" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="32" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a0fef888a5370f9723f2ab2df2fe32266" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleContainerBase::isDefined</definition>
        <argsstring>() const</argsstring>
        <name>isDefined</name>
        <qualifiedname>amrex::ParticleContainerBase::isDefined</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="99" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a2c12c2876534a20504bacf7ab9bdf905" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::reserveData</definition>
        <argsstring>()</argsstring>
        <name>reserveData</name>
        <qualifiedname>amrex::ParticleContainerBase::reserveData</qualifiedname>
        <reimplementedby refid="classamrex_1_1ParticleContainer__impl_1af3cf62158c41dbaee7e1529179f86c84">reserveData</reimplementedby>
        <reimplementedby refid="classamrex_1_1ParticleContainer__impl_1af3cf62158c41dbaee7e1529179f86c84">reserveData</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="101" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1afe479d3bc2102c21f40ac931163088c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::resizeData</definition>
        <argsstring>()</argsstring>
        <name>resizeData</name>
        <qualifiedname>amrex::ParticleContainerBase::resizeData</qualifiedname>
        <reimplementedby refid="classamrex_1_1ParticleContainer__impl_1a907ddeaea4ca42fcb1c485d701013d27">resizeData</reimplementedby>
        <reimplementedby refid="classamrex_1_1ParticleContainer__impl_1a907ddeaea4ca42fcb1c485d701013d27">resizeData</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="102" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="46" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ad5f30ae5a0147ce527c0ba93eba393b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::RedefineDummyMF</definition>
        <argsstring>(int lev)</argsstring>
        <name>RedefineDummyMF</name>
        <qualifiedname>amrex::ParticleContainerBase::RedefineDummyMF</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="103" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="55" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1adc8bb6ea7e7d8a9596936623bc2e26ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref></type>
        <definition>MFIter amrex::ParticleContainerBase::MakeMFIter</definition>
        <argsstring>(int lev, const MFItInfo &amp;info) const</argsstring>
        <name>MakeMFIter</name>
        <qualifiedname>amrex::ParticleContainerBase::MakeMFIter</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFItInfo" kindref="compound">MFItInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="105" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a41cb0c34d64f3d1df87d83f3b26f594b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref></type>
        <definition>MFIter amrex::ParticleContainerBase::MakeMFIter</definition>
        <argsstring>(int lev) const</argsstring>
        <name>MakeMFIter</name>
        <qualifiedname>amrex::ParticleContainerBase::MakeMFIter</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="110" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a30a608b14352a5cd5bfed79f69f98011" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref></type>
        <definition>MFIter amrex::ParticleContainerBase::MakeMFIter</definition>
        <argsstring>(int lev, bool tile) const</argsstring>
        <name>MakeMFIter</name>
        <qualifiedname>amrex::ParticleContainerBase::MakeMFIter</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>tile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="115" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ae4c36450603243012e55a13c30b6f924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::SetParGDB</definition>
        <argsstring>(const Geometry &amp;geom, const DistributionMapping &amp;dmap, const BoxArray &amp;ba)</argsstring>
        <name>SetParGDB</name>
        <qualifiedname>amrex::ParticleContainerBase::SetParGDB</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>, <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondence will be broken here. This is the single-level version. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geom</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ba</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="128" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="83" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1af39ed2aa32a6359b1ab7368a3c1dea13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::SetParGDB</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; IntVect &gt; &amp;rr)</argsstring>
        <name>SetParGDB</name>
        <qualifiedname>amrex::ParticleContainerBase::SetParGDB</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>, <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, ref ratios, and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondence will be broken here. This is the multi-level version. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geom</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector of <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> objects to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector of <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> objects to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ba</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector of <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> objects to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rr</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector of refinement ratios to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="141" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="102" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a4b94090fae113940cbe7af3cf19e724c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::SetParGDB</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; int &gt; &amp;rr)</argsstring>
        <name>SetParGDB</name>
        <qualifiedname>amrex::ParticleContainerBase::SetParGDB</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>, <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, ref ratios, and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondence will be broken here. This is the multi-level version. </para>
        </briefdescription>
        <detaileddescription>
<para>Like the above, except the refinement ratios are expressed as ints</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geom</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector of <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> objects to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector of <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> objects to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ba</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector of <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> objects to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rr</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector of refinement ratios to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="157" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="92" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a9231dc83e842370bb5e91c77eb5a6915" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::SetParticleBoxArray</definition>
        <argsstring>(int lev, BoxArray new_ba)</argsstring>
        <name>SetParticleBoxArray</name>
        <qualifiedname>amrex::ParticleContainerBase::SetParticleBoxArray</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
          <declname>new_ba</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondence will be broken here. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level on which to set the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_ba</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="169" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="112" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ae09bdef9314b42d58a5000ba54298b95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::SetParticleDistributionMap</definition>
        <argsstring>(int lev, DistributionMapping new_dmap)</argsstring>
        <name>SetParticleDistributionMap</name>
        <qualifiedname>amrex::ParticleContainerBase::SetParticleDistributionMap</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
          <declname>new_dmap</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondence will be broken here. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level on which to set the dm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_dmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="178" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="125" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1adf3e361fae56b92d85299fb77fbe111b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::SetParticleGeometry</definition>
        <argsstring>(int lev, Geometry new_geom)</argsstring>
        <name>SetParticleGeometry</name>
        <qualifiedname>amrex::ParticleContainerBase::SetParticleGeometry</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
          <declname>new_geom</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondence will be broken here. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level on which to set the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_geom</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="187" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="138" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a2c0b7f83bf8704d063c57f1e629f4fcb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray &amp; amrex::ParticleContainerBase::ParticleBoxArray</definition>
        <argsstring>(int lev) const</argsstring>
        <name>ParticleBoxArray</name>
        <qualifiedname>amrex::ParticleContainerBase::ParticleBoxArray</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> for a given level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="193" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="193" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a1d3c53a73651fd4d1b30a4b7f92f11b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping &amp; amrex::ParticleContainerBase::ParticleDistributionMap</definition>
        <argsstring>(int lev) const</argsstring>
        <name>ParticleDistributionMap</name>
        <qualifiedname>amrex::ParticleContainerBase::ParticleDistributionMap</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> for a given level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="200" column="31" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="200" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a4d06d65f87feb1bfe8867f86c1de3fd3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry &amp; amrex::ParticleContainerBase::Geom</definition>
        <argsstring>(int lev) const</argsstring>
        <name>Geom</name>
        <qualifiedname>amrex::ParticleContainerBase::Geom</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> for a given level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="207" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="207" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ae2ad71767464fef55467f5b2af2ade3f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry &amp; amrex::ParticleContainerBase::ParticleGeom</definition>
        <argsstring>(int lev) const</argsstring>
        <name>ParticleGeom</name>
        <qualifiedname>amrex::ParticleContainerBase::ParticleGeom</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Get the particle <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> for a given level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="213" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="213" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1aa9d1fb8c82d375e2d473e0dd677b3f61" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::finestLevel</definition>
        <argsstring>() const</argsstring>
        <name>finestLevel</name>
        <qualifiedname>amrex::ParticleContainerBase::finestLevel</qualifiedname>
        <briefdescription>
<para>the finest level actually defined for the ParticleContainer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="216" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="216" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ad60ba0c10f19af842fdfbeaccd02b2ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::maxLevel</definition>
        <argsstring>() const</argsstring>
        <name>maxLevel</name>
        <qualifiedname>amrex::ParticleContainerBase::maxLevel</qualifiedname>
        <briefdescription>
<para>the finest allowed level in the ParticleContainer, whether it is defined or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="219" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="219" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a6ec01a89cd77b4473dc1895e1a2b1ebe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::numLevels</definition>
        <argsstring>() const</argsstring>
        <name>numLevels</name>
        <qualifiedname>amrex::ParticleContainerBase::numLevels</qualifiedname>
        <briefdescription>
<para>the number of defined levels in the ParticleContainer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="222" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="222" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a92778e3dfeb634870d6ae8822fd0d2b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
        <definition>const ParGDBBase * amrex::ParticleContainerBase::GetParGDB</definition>
        <argsstring>() const</argsstring>
        <name>GetParGDB</name>
        <qualifiedname>amrex::ParticleContainerBase::GetParGDB</qualifiedname>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> object used to define this container (const version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="225" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a56f6e04e3321621a6ca9688d6c2a86ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
        <definition>ParGDBBase * amrex::ParticleContainerBase::GetParGDB</definition>
        <argsstring>()</argsstring>
        <name>GetParGDB</name>
        <qualifiedname>amrex::ParticleContainerBase::GetParGDB</qualifiedname>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> object used to define this container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="228" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="228" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1aecfa142bba944fe440b23bd13a79c08e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::Verbose</definition>
        <argsstring>() const</argsstring>
        <name>Verbose</name>
        <qualifiedname>amrex::ParticleContainerBase::Verbose</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="230" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="230" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a2a0f56f8b64e6c0315442033ebd79fac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::SetVerbose</definition>
        <argsstring>(int verbose)</argsstring>
        <name>SetVerbose</name>
        <qualifiedname>amrex::ParticleContainerBase::SetVerbose</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="232" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="232" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a039ae2c7aff1bad803fbb84ca49a79a7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::stableRedistribute</definition>
        <argsstring>() const</argsstring>
        <name>stableRedistribute</name>
        <qualifiedname>amrex::ParticleContainerBase::stableRedistribute</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="234" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="234" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a3a3a7f6cf9b25237e536f06d7db113b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::setStableRedistribute</definition>
        <argsstring>(int stable)</argsstring>
        <name>setStableRedistribute</name>
        <qualifiedname>amrex::ParticleContainerBase::setStableRedistribute</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>stable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="236" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="236" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1adcf30e3dbe2798fa430837cb4b7454c8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1ParticleBufferMap" kindref="compound">ParticleBufferMap</ref> &amp;</type>
        <definition>const ParticleBufferMap &amp; amrex::ParticleContainerBase::BufferMap</definition>
        <argsstring>() const</argsstring>
        <name>BufferMap</name>
        <qualifiedname>amrex::ParticleContainerBase::BufferMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="238" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="238" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a2779b5a388da42483553b8802cf2371f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt; int &gt; amrex::ParticleContainerBase::NeighborProcs</definition>
        <argsstring>(int ngrow) const</argsstring>
        <name>NeighborProcs</name>
        <qualifiedname>amrex::ParticleContainerBase::NeighborProcs</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="240" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a92aa9afcd8adbbb62d06b8c3c293912a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MF</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ParticleContainerBase::OnSameGrids</definition>
        <argsstring>(int level, const MF &amp;mf) const</argsstring>
        <name>OnSameGrids</name>
        <qualifiedname>amrex::ParticleContainerBase::OnSameGrids</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="246" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="246" bodyend="246"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a575c4433c9b8bfec8bd57d5a9bdf7191" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; amrex::ParticleContainerBase::CheckpointVersion</definition>
        <argsstring>()</argsstring>
        <name>CheckpointVersion</name>
        <qualifiedname>amrex::ParticleContainerBase::CheckpointVersion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="248" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="150" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a455c5a8b3e564ebdd8f3008995096057" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; amrex::ParticleContainerBase::PlotfileVersion</definition>
        <argsstring>()</argsstring>
        <name>PlotfileVersion</name>
        <qualifiedname>amrex::ParticleContainerBase::PlotfileVersion</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="249" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="166" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a777b3fdf529e65178ba4be9fd37b75f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; amrex::ParticleContainerBase::DataPrefix</definition>
        <argsstring>()</argsstring>
        <name>DataPrefix</name>
        <qualifiedname>amrex::ParticleContainerBase::DataPrefix</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="250" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="181" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ae385b95f314d4d6691f1c53ba91505c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::MaxReaders</definition>
        <argsstring>()</argsstring>
        <name>MaxReaders</name>
        <qualifiedname>amrex::ParticleContainerBase::MaxReaders</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="251" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="191" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a86efecc15f1b38749fee866a4be234ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::ParticleContainerBase::MaxParticlesPerRead</definition>
        <argsstring>()</argsstring>
        <name>MaxParticlesPerRead</name>
        <qualifiedname>amrex::ParticleContainerBase::MaxParticlesPerRead</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="252" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="213" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a46ea8e4ecb6c6cfc29dcc47675b959bf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; amrex::ParticleContainerBase::AggregationType</definition>
        <argsstring>()</argsstring>
        <name>AggregationType</name>
        <qualifiedname>amrex::ParticleContainerBase::AggregationType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="253" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="238" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1acf979d3c7c577a5197acd056646c9b04" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::AggregationBuffer</definition>
        <argsstring>()</argsstring>
        <name>AggregationBuffer</name>
        <qualifiedname>amrex::ParticleContainerBase::AggregationBuffer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="254" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="258" bodyend="276"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a1720e5ec3b987f6bee57fde2d515012a" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::BuildRedistributeMask</definition>
        <argsstring>(int lev, int nghost=1) const</argsstring>
        <name>BuildRedistributeMask</name>
        <qualifiedname>amrex::ParticleContainerBase::BuildRedistributeMask</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="264" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="278" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1acaa5cea3d2bd6ed396a169f4057f45d3" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::defineBufferMap</definition>
        <argsstring>() const</argsstring>
        <name>defineBufferMap</name>
        <qualifiedname>amrex::ParticleContainerBase::defineBufferMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="265" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="73" bodyend="81"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::ParticleContainer_impl&lt; T_ParticleType, 0, 0, DefaultAllocator, DefaultAssignor &gt;</label>
        <link refid="classamrex_1_1ParticleContainer__impl"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::AmrParticleContainer_impl&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;</label>
        <link refid="classamrex_1_1AmrParticleContainer__impl"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>amrex::AmrTracerParticleContainer</label>
        <link refid="classamrex_1_1AmrTracerParticleContainer"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</label>
        <link refid="classamrex_1_1NeighborParticleContainer"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::ParticleContainerBase</label>
        <link refid="classamrex_1_1ParticleContainerBase"/>
      </node>
      <node id="3">
        <label>amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;</label>
        <link refid="classamrex_1_1ParticleContainer__impl"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>amrex::TracerParticleContainer&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1TracerParticleContainer"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>amrex::AmrParticleLocator&lt; amrex::DenseBins&lt; amrex::BoxND &gt; &gt;</label>
        <link refid="classamrex_1_1AmrParticleLocator"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_locators</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_grid_assignors</edgelabel>
        </childnode>
      </node>
      <node id="89">
        <label>amrex::Array4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="90" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="92">
        <label>amrex::Array4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="90" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="99">
        <label>amrex::Array4CopyTag&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4CopyTag"/>
        <childnode refid="89" relation="usage">
          <edgelabel>dfab</edgelabel>
        </childnode>
        <childnode refid="92" relation="usage">
          <edgelabel>sfab</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>dbox</edgelabel>
        </childnode>
        <childnode refid="90" relation="usage">
          <edgelabel>offset</edgelabel>
        </childnode>
      </node>
      <node id="85">
        <label>amrex::BaseFab&lt; int &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="73" relation="public-inheritance">
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="50">
        <label>amrex::BoxND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1BoxND"/>
      </node>
      <node id="103">
        <label>amrex::CommRecvBufTag&lt; value_type &gt;</label>
        <link refid="structamrex_1_1CommRecvBufTag"/>
        <childnode refid="89" relation="usage">
          <edgelabel>dfab</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>bx</edgelabel>
        </childnode>
      </node>
      <node id="107">
        <label>amrex::CommSendBufTag&lt; value_type &gt;</label>
        <link refid="structamrex_1_1CommSendBufTag"/>
        <childnode refid="92" relation="usage">
          <edgelabel>sfab</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>bx</edgelabel>
        </childnode>
      </node>
      <node id="109">
        <label>amrex::FBData&lt; IArrayBox &gt;</label>
        <link refid="structamrex_1_1FBData"/>
        <childnode refid="110" relation="usage">
          <edgelabel>fb</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="116" relation="usage">
          <edgelabel>recv_data</edgelabel>
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="118" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="120" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
        <childnode refid="122" relation="usage">
          <edgelabel>recv_stat</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>amrex::FabArray&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
        <childnode refid="71" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="73" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="81" relation="usage">
          <edgelabel>m_single_chunk_arena</edgelabel>
        </childnode>
        <childnode refid="83" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="88" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
        <childnode refid="91" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="93" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="95" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="96" relation="usage">
          <edgelabel>m_fb_local_copy_handler</edgelabel>
        </childnode>
        <childnode refid="100" relation="usage">
          <edgelabel>m_recv_copy_handler</edgelabel>
        </childnode>
        <childnode refid="104" relation="usage">
          <edgelabel>m_send_copy_handler</edgelabel>
        </childnode>
        <childnode refid="108" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="124" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="127" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
      </node>
      <node id="72">
        <label>amrex::FabFactory&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="39">
        <label>amrex::IndexTypeND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IndexTypeND"/>
        <childnode refid="40" relation="public-inheritance">
        </childnode>
      </node>
      <node id="42">
        <label>amrex::IntVectND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="27">
        <label>K</label>
      </node>
      <node id="88">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="89" relation="usage">
          <edgelabel>dp</edgelabel>
          <edgelabel>hp</edgelabel>
        </childnode>
      </node>
      <node id="91">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="92" relation="usage">
          <edgelabel>dp</edgelabel>
          <edgelabel>hp</edgelabel>
        </childnode>
      </node>
      <node id="125">
        <label>amrex::PCData&lt; IArrayBox &gt;</label>
        <link refid="structamrex_1_1PCData"/>
        <childnode refid="126" relation="usage">
          <edgelabel>cpc</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>src</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="116" relation="usage">
          <edgelabel>recv_data</edgelabel>
        </childnode>
        <childnode refid="118" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="120" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>amrex::PODVector&lt; amrex::AssignGrid&lt; BinIteratorFactory &gt; &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="129">
        <label>amrex::PODVector&lt; int &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>T</label>
      </node>
      <node id="98">
        <label>amrex::TagVector&lt; amrex::Array4CopyTag&lt; value_type &gt; &gt;</label>
        <link refid="structamrex_1_1TagVector"/>
        <childnode refid="99" relation="usage">
          <edgelabel>d_tags</edgelabel>
        </childnode>
      </node>
      <node id="102">
        <label>amrex::TagVector&lt; amrex::CommRecvBufTag&lt; value_type &gt; &gt;</label>
        <link refid="structamrex_1_1TagVector"/>
        <childnode refid="103" relation="usage">
          <edgelabel>d_tags</edgelabel>
        </childnode>
      </node>
      <node id="106">
        <label>amrex::TagVector&lt; amrex::CommSendBufTag&lt; value_type &gt; &gt;</label>
        <link refid="structamrex_1_1TagVector"/>
        <childnode refid="107" relation="usage">
          <edgelabel>d_tags</edgelabel>
        </childnode>
      </node>
      <node id="120">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="121" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>amrex::Vector&lt; amrex::BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
      <node id="48">
        <label>amrex::Vector&lt; amrex::BoxND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="49" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>amrex::Vector&lt; amrex::DistributionMapping &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>amrex::Vector&lt; amrex::IntVectND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::Vector&lt; amrex::ParticleLocator&lt; amrex::DenseBins&lt; amrex::BoxND &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="122">
        <label>amrex::Vector&lt; amrex::mpidatatypes::MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="123" relation="public-inheritance">
        </childnode>
      </node>
      <node id="116">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="117" relation="public-inheritance">
        </childnode>
      </node>
      <node id="58">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="59" relation="public-inheritance">
        </childnode>
      </node>
      <node id="118">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="119" relation="public-inheritance">
        </childnode>
      </node>
      <node id="93">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="94" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
      </node>
      <node id="74">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="75" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
        <childnode refid="76" relation="usage">
          <edgelabel>m_profiler</edgelabel>
        </childnode>
      </node>
      <node id="76">
        <label>amrex::Arena::ArenaProfiler</label>
        <link refid="structamrex_1_1Arena_1_1ArenaProfiler"/>
        <childnode refid="77" relation="usage">
          <edgelabel>m_arena_profiler_mutex</edgelabel>
        </childnode>
        <childnode refid="78" relation="usage">
          <edgelabel>m_profiling_stats</edgelabel>
        </childnode>
        <childnode refid="80" relation="usage">
          <edgelabel>m_currently_allocated</edgelabel>
        </childnode>
      </node>
      <node id="75">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="47">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="48" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="51" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
      </node>
      <node id="44">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="45" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="42" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="39" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="39" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="35">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="36" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="37" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="35" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
        <childnode refid="46" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="53" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
      </node>
      <node id="62">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="47" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="67">
        <label>amrex::BoxIndexerND&lt; dim &gt;</label>
        <link refid="structamrex_1_1BoxIndexerND"/>
        <childnode refid="68" relation="usage">
          <edgelabel>fdm</edgelabel>
        </childnode>
      </node>
      <node id="54">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="48" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>amrex::CellIndexEnum</label>
        <link refid="structamrex_1_1CellIndexEnum"/>
      </node>
      <node id="73">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="74" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="90">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="55">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
        <childnode refid="56" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
      </node>
      <node id="57">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="58" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="63">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="57" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="95">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="25">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="2" relation="usage">
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>m_TheCPCache</edgelabel>
          <edgelabel>m_TheCrseFineCache</edgelabel>
          <edgelabel>m_TheFBCache</edgelabel>
          <edgelabel>m_TheFillPatchCache</edgelabel>
          <edgelabel>m_ThePolarBCache</edgelabel>
          <edgelabel>m_TheRB180Cache</edgelabel>
          <edgelabel>m_TheRB90Cache</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>m_mem_usage</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>m_region_tag</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>ownership</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="64" relation="usage">
          <edgelabel>m_TheTileArrayCache</edgelabel>
        </childnode>
        <childnode refid="65" relation="usage">
          <edgelabel>m_TheParForCache</edgelabel>
        </childnode>
        <childnode refid="69" relation="usage">
          <edgelabel>m_BD_count</edgelabel>
        </childnode>
        <childnode refid="70" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
      </node>
      <node id="61">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="62" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="126">
        <label>amrex::FabArrayBase::CPC</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CPC"/>
        <childnode refid="111" relation="public-inheritance">
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>m_dstbdk</edgelabel>
          <edgelabel>m_srcbdk</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_dstng</edgelabel>
          <edgelabel>m_srcng</edgelabel>
        </childnode>
        <childnode refid="115" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>m_dstba</edgelabel>
          <edgelabel>m_srcba</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="29" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="111">
        <label>amrex::FabArrayBase::CommMetaData</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CommMetaData"/>
        <childnode refid="112" relation="usage">
          <edgelabel>m_LocTags</edgelabel>
        </childnode>
        <childnode refid="114" relation="usage">
          <edgelabel>m_RcvTags</edgelabel>
          <edgelabel>m_SndTags</edgelabel>
        </childnode>
      </node>
      <node id="110">
        <label>amrex::FabArrayBase::FB</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FB"/>
        <childnode refid="111" relation="public-inheritance">
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_ngrow</edgelabel>
        </childnode>
        <childnode refid="115" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="70">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="66">
        <label>amrex::FabArrayBase::ParForInfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1ParForInfo"/>
        <childnode refid="35" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_ng</edgelabel>
        </childnode>
        <childnode refid="67" relation="usage">
          <edgelabel>m_boxes</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>amrex::FabArrayBase::meminfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1meminfo"/>
      </node>
      <node id="84">
        <label>amrex::IArrayBox</label>
        <link refid="classamrex_1_1IArrayBox"/>
        <childnode refid="85" relation="public-inheritance">
        </childnode>
        <childnode refid="86" relation="usage">
          <edgelabel>ifabio</edgelabel>
        </childnode>
      </node>
      <node id="87">
        <label>amrex::IFABio</label>
        <link refid="classamrex_1_1IFABio"/>
      </node>
      <node id="2">
        <label>amrex::IntVectND&lt; dim &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="68">
        <label>amrex::Math::FastDivmodU64</label>
        <link refid="structamrex_1_1Math_1_1FastDivmodU64"/>
      </node>
      <node id="79">
        <label>amrex::MemStat</label>
        <link refid="structamrex_1_1MemStat"/>
      </node>
      <node id="45">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="10">
        <label>amrex::ParGDB</label>
        <link refid="classamrex_1_1ParGDB"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_ba</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_rr</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>amrex::ParGDBBase</label>
        <link refid="classamrex_1_1ParGDBBase"/>
      </node>
      <node id="128">
        <label>amrex::ParticleBufferMap</label>
        <link refid="classamrex_1_1ParticleBufferMap"/>
        <childnode refid="16" relation="usage">
          <edgelabel>m_ba</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_dm</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>m_bucket_to_gid</edgelabel>
          <edgelabel>m_bucket_to_lev</edgelabel>
          <edgelabel>m_bucket_to_pid</edgelabel>
          <edgelabel>m_lev_gid_to_bucket</edgelabel>
          <edgelabel>m_lev_offsets</edgelabel>
          <edgelabel>m_proc_box_counts</edgelabel>
          <edgelabel>m_proc_box_offsets</edgelabel>
        </childnode>
        <childnode refid="129" relation="usage">
          <edgelabel>d_bucket_to_pid</edgelabel>
          <edgelabel>d_lev_gid_to_bucket</edgelabel>
          <edgelabel>d_lev_offsets</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::ParticleContainerBase</label>
        <link refid="classamrex_1_1ParticleContainerBase"/>
        <childnode refid="2" relation="usage">
          <edgelabel>tile_size</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_particle_locator</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_gdb_object</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_gdb</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_dummy_mf</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>redistribute_mask_ptr</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>neighbor_procs</edgelabel>
        </childnode>
        <childnode refid="128" relation="usage">
          <edgelabel>m_buffer_map</edgelabel>
        </childnode>
      </node>
      <node id="115">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="42" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="82">
        <label>amrex::detail::SingleChunkArena</label>
        <link refid="classamrex_1_1detail_1_1SingleChunkArena"/>
        <childnode refid="74" relation="public-inheritance">
        </childnode>
        <childnode refid="73" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>amrex::iMultiFab</label>
        <link refid="classamrex_1_1iMultiFab"/>
        <childnode refid="24" relation="public-inheritance">
        </childnode>
      </node>
      <node id="100">
        <label>std::map&lt; RecvSendCopyHandlerKey, std::unique_ptr&lt; amrex::TagVector&lt; amrex::CommRecvBufTag&lt; value_type &gt; &gt; &gt; &gt;</label>
        <childnode refid="101" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="104">
        <label>std::map&lt; RecvSendCopyHandlerKey, std::unique_ptr&lt; amrex::TagVector&lt; amrex::CommSendBufTag&lt; value_type &gt; &gt; &gt; &gt;</label>
        <childnode refid="105" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="69">
        <label>std::map&lt; amrex::FabArrayBase::BDKey, int &gt;</label>
        <childnode refid="61" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>std::map&lt; std::string, amrex::FabArrayBase::meminfo &gt;</label>
        <childnode refid="29" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="78">
        <label>std::map&lt; std::string, amrex::MemStat &gt;</label>
        <childnode refid="29" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="79" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="96">
        <label>std::map&lt; std::uint64_t, std::unique_ptr&lt; amrex::TagVector&lt; amrex::Array4CopyTag&lt; value_type &gt; &gt; &gt; &gt;</label>
        <childnode refid="97" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="65">
        <label>std::multimap&lt; amrex::FabArrayBase::BDKey, amrex::FabArrayBase::ParForInfo * &gt;</label>
        <childnode refid="61" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="66" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
        <childnode refid="47" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="53">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
        <childnode refid="54" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="56">
        <label>std::shared_ptr&lt; amrex::DistributionMapping::Ref &gt;</label>
        <childnode refid="57" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::allocator&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="130">
        <label>std::allocator&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="64">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="27" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>std::multimap&lt; K, T &gt;</label>
        <childnode refid="27" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="77">
        <label>std::mutex</label>
      </node>
      <node id="29">
        <label>std::string</label>
        <childnode refid="30" relation="public-inheritance">
        </childnode>
      </node>
      <node id="113">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="121">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="49">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="123">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="117">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="59">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="119">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="94">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="112">
        <label>std::unique_ptr&lt; CopyComTagsContainer &gt;</label>
        <childnode refid="113" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="114">
        <label>std::unique_ptr&lt; MapOfCopyComTagContainers &gt;</label>
        <childnode refid="64" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="108">
        <label>std::unique_ptr&lt; amrex::FBData&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="109" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="127">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="71">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="72" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="86">
        <label>std::unique_ptr&lt; amrex::IFABio &gt;</label>
        <childnode refid="87" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="124">
        <label>std::unique_ptr&lt; amrex::PCData&lt; IArrayBox &gt; &gt;</label>
        <childnode refid="125" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>std::unique_ptr&lt; amrex::ParGDB &gt;</label>
        <childnode refid="10" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="97">
        <label>std::unique_ptr&lt; amrex::TagVector&lt; amrex::Array4CopyTag&lt; value_type &gt; &gt; &gt;</label>
        <childnode refid="98" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="101">
        <label>std::unique_ptr&lt; amrex::TagVector&lt; amrex::CommRecvBufTag&lt; value_type &gt; &gt; &gt;</label>
        <childnode refid="102" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="105">
        <label>std::unique_ptr&lt; amrex::TagVector&lt; amrex::CommSendBufTag&lt; value_type &gt; &gt; &gt;</label>
        <childnode refid="106" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="81">
        <label>std::unique_ptr&lt; amrex::detail::SingleChunkArena &gt;</label>
        <childnode refid="82" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>std::unique_ptr&lt; amrex::iMultiFab &gt;</label>
        <childnode refid="23" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="51">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="2" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="80">
        <label>std::unordered_map&lt; void *, std::pair&lt; amrex::MemStat *, std::size_t &gt; &gt;</label>
      </node>
      <node id="83">
        <label>std::vector&lt; IArrayBox * &gt;</label>
        <childnode refid="84" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="60">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="52">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="33">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="29" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="22" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="23" bodyend="278"/>
    <listofallmembers>
      <member refid="classamrex_1_1ParticleContainerBase_1acf979d3c7c577a5197acd056646c9b04" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>AggregationBuffer</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a46ea8e4ecb6c6cfc29dcc47675b959bf" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>AggregationType</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adcf30e3dbe2798fa430837cb4b7454c8" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>BufferMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a1720e5ec3b987f6bee57fde2d515012a" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>BuildRedistributeMask</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a575c4433c9b8bfec8bd57d5a9bdf7191" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>CheckpointVersion</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a777b3fdf529e65178ba4be9fd37b75f4" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>DataPrefix</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a58cb6f59ee8ed859dce4a4c82b148dab" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a5e2317ff9e5de3e76060c231e11da6f1" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a9886049870cb6af613dda4e8791ea76f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a5ffe421378d1b06703de250f2cfcf330" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1acaa5cea3d2bd6ed396a169f4057f45d3" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>defineBufferMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aa218a301fbc9bf494d8dcecf7ee60d6d" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>do_tiling</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aa9d1fb8c82d375e2d473e0dd677b3f61" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>finestLevel</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a4d06d65f87feb1bfe8867f86c1de3fd3" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Geom</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a92778e3dfeb634870d6ae8822fd0d2b2" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>GetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a56f6e04e3321621a6ca9688d6c2a86ca" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>GetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a0fef888a5370f9723f2ab2df2fe32266" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>isDefined</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2eddb55f0ebdf394ea2ace09e1d0e4a4" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_buffer_map</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adb9b347bff9efa17831af4b1c5cb846a" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_dummy_mf</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2821fc52ed661ccd9e9d821b81476fff" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_gdb</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a7faac754ff05cf1b841bfe49dad579ba" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_gdb_object</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aa9bbd6752d478b3a24e66f2caa11196b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_particle_locator</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aed7d0053f45c4e966e5e3e69d6f19d68" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_stable_redistribute</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a89f6fb84fb7e73fc185ae5d8f45818ab" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_verbose</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adc8bb6ea7e7d8a9596936623bc2e26ed" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MakeMFIter</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a41cb0c34d64f3d1df87d83f3b26f594b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MakeMFIter</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a30a608b14352a5cd5bfed79f69f98011" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MakeMFIter</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ad60ba0c10f19af842fdfbeaccd02b2ed" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>maxLevel</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a86efecc15f1b38749fee866a4be234ea" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MaxParticlesPerRead</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ae385b95f314d4d6691f1c53ba91505c6" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MaxReaders</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a5bc087527efb5c9aec1ca15f3abafc35" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>memEfficientSort</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a0e1a0dcc5bf3f405f40ad020f18389bc" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>neighbor_procs</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2779b5a388da42483553b8802cf2371f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>NeighborProcs</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a6ec01a89cd77b4473dc1895e1a2b1ebe" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>numLevels</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a92aa9afcd8adbbb62d06b8c3c293912a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>OnSameGrids</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a05d7cf849b59c815bc33a0f71d68576b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>operator=</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ab1ba13d6abacc075b19e6375ec9889f8" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>operator=</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2c0b7f83bf8704d063c57f1e629f4fcb" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleBoxArray</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a51bba5cff5a55e3f6ce46c0b56fa1809" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a783bf6edc1d9d0bdc5d4e8dd1f98cd5f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a66e036defd5c86431c583bbd8cb91e2d" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a1b59660938f651e5a56bc45bb6bc4d8e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1af60ff4efea559ba4e49dc7178e504e4c" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a5f71ad65c90b78b062f40127d91a3134" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1af17feaf161d82ae2ef0466b6188cc7b0" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a1d3c53a73651fd4d1b30a4b7f92f11b5" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleDistributionMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ae2ad71767464fef55467f5b2af2ade3f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleGeom</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a455c5a8b3e564ebdd8f3008995096057" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>PlotfileVersion</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ad5f30ae5a0147ce527c0ba93eba393b2" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>RedefineDummyMF</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ac6b4b306d8f0399657b3884f51ea569e" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>redistribute_mask_nghost</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a18183e85d5ae22c27721996b3c5bfead" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>redistribute_mask_ptr</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2c12c2876534a20504bacf7ab9bdf905" prot="public" virt="virtual"><scope>amrex::ParticleContainerBase</scope><name>reserveData</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1afe479d3bc2102c21f40ac931163088c2" prot="public" virt="virtual"><scope>amrex::ParticleContainerBase</scope><name>resizeData</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ae4c36450603243012e55a13c30b6f924" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1af39ed2aa32a6359b1ab7368a3c1dea13" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a4b94090fae113940cbe7af3cf19e724c" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a9231dc83e842370bb5e91c77eb5a6915" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetParticleBoxArray</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ae09bdef9314b42d58a5000ba54298b95" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetParticleDistributionMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adf3e361fae56b92d85299fb77fbe111b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetParticleGeometry</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a3a3a7f6cf9b25237e536f06d7db113b5" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>setStableRedistribute</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2a0f56f8b64e6c0315442033ebd79fac" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetVerbose</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a039ae2c7aff1bad803fbb84ca49a79a7" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>stableRedistribute</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aef5ac9f0985c8a3170a554969eb375cb" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>tile_size</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adaf8edd2c78ff65581a26e7ce38a5489" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>use_comms_arena</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aecfa142bba944fe440b23bd13a79c08e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Verbose</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a9767823a5595f287569a535bb3b8ae59" prot="public" virt="virtual"><scope>amrex::ParticleContainerBase</scope><name>~ParticleContainerBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
