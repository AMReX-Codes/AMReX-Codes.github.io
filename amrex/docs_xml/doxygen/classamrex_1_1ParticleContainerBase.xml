<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1ParticleContainerBase" kind="class" language="C++" prot="public">
    <compoundname>amrex::ParticleContainerBase</compoundname>
    <derivedcompoundref refid="classamrex_1_1ParticleContainer__impl" prot="public" virt="non-virtual">amrex::ParticleContainer_impl&lt; T_ParticleType, 0, 0, DefaultAllocator, DefaultAssignor &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1ParticleContainer__impl" prot="public" virt="non-virtual">amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;</derivedcompoundref>
    <includes refid="AMReX__ParticleContainerBase_8H" local="no">AMReX_ParticleContainerBase.H</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a29311c7fd7f83d43f84951476f9a265d" prot="public" static="yes" mutable="no">
        <type><ref refid="AMReX__Extension_8H_1ac05fa35b3db13c4599d7ad5fc51bef47" kindref="member">AMREX_EXPORT</ref> bool</type>
        <definition>bool ParticleContainerBase::do_tiling</definition>
        <argsstring></argsstring>
        <name>do_tiling</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="252" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1adb03167dec6a952cfa60beb45a514dfa" prot="public" static="yes" mutable="no">
        <type><ref refid="AMReX__Extension_8H_1ac05fa35b3db13c4599d7ad5fc51bef47" kindref="member">AMREX_EXPORT</ref> <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect ParticleContainerBase::tile_size</definition>
        <argsstring></argsstring>
        <name>tile_size</name>
        <initializer>{ AMREX_D_DECL(1024000,8,8) }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="253" column="33" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a5a0a39b2da4b85ad599ea7fc51fba940" prot="public" static="yes" mutable="no">
        <type><ref refid="AMReX__Extension_8H_1ac05fa35b3db13c4599d7ad5fc51bef47" kindref="member">AMREX_EXPORT</ref> bool</type>
        <definition>bool ParticleContainerBase::memEfficientSort</definition>
        <argsstring></argsstring>
        <name>memEfficientSort</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="254" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="254" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1aa9bbd6752d478b3a24e66f2caa11196b" prot="public" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1AmrParticleLocator" kindref="compound">AmrParticleLocator</ref>&lt; <ref refid="classamrex_1_1DenseBins" kindref="compound">DenseBins</ref>&lt; <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &gt; &gt;</type>
        <definition>AmrParticleLocator&lt;DenseBins&lt;Box&gt; &gt; amrex::ParticleContainerBase::m_particle_locator</definition>
        <argsstring></argsstring>
        <name>m_particle_locator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="255" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="255" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a89f6fb84fb7e73fc185ae5d8f45818ab" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::m_verbose</definition>
        <argsstring></argsstring>
        <name>m_verbose</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="262" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a7faac754ff05cf1b841bfe49dad579ba" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> &gt;</type>
        <definition>std::unique_ptr&lt;ParGDB&gt; amrex::ParticleContainerBase::m_gdb_object</definition>
        <argsstring></argsstring>
        <name>m_gdb_object</name>
        <initializer>= std::make_unique&lt;<ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref>&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="263" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a2821fc52ed661ccd9e9d821b81476fff" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
        <definition>ParGDBBase* amrex::ParticleContainerBase::m_gdb</definition>
        <argsstring></argsstring>
        <name>m_gdb</name>
        <initializer>{nullptr}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="264" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1adb9b347bff9efa17831af4b1c5cb846a" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;MultiFab&gt; &gt; amrex::ParticleContainerBase::m_dummy_mf</definition>
        <argsstring></argsstring>
        <name>m_dummy_mf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="265" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a18183e85d5ae22c27721996b3c5bfead" prot="protected" static="no" mutable="yes">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt;iMultiFab&gt; amrex::ParticleContainerBase::redistribute_mask_ptr</definition>
        <argsstring></argsstring>
        <name>redistribute_mask_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="267" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1ac6b4b306d8f0399657b3884f51ea569e" prot="protected" static="no" mutable="yes">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::redistribute_mask_nghost</definition>
        <argsstring></argsstring>
        <name>redistribute_mask_nghost</name>
        <initializer>= std::numeric_limits&lt;<ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>&gt;::<ref refid="namespaceamrex_1a475e2bc71e3ca92b6b016fcb70af95bd" kindref="member">min</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="268" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a0e1a0dcc5bf3f405f40ad020f18389bc" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>amrex::Vector&lt;int&gt; amrex::ParticleContainerBase::neighbor_procs</definition>
        <argsstring></argsstring>
        <name>neighbor_procs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="269" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParticleContainerBase_1a2eddb55f0ebdf394ea2ace09e1d0e4a4" prot="protected" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1ParticleBufferMap" kindref="compound">ParticleBufferMap</ref></type>
        <definition>ParticleBufferMap amrex::ParticleContainerBase::m_buffer_map</definition>
        <argsstring></argsstring>
        <name>m_buffer_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="270" column="31" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="270" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a51bba5cff5a55e3f6ce46c0b56fa1809" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>()=default</argsstring>
        <name>ParticleContainerBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="26" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a783bf6edc1d9d0bdc5d4e8dd1f98cd5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(ParGDBBase *gdb)</argsstring>
        <name>ParticleContainerBase</name>
        <param>
          <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
          <declname>gdb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="28" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a66e036defd5c86431c583bbd8cb91e2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(const Geometry &amp;geom, const DistributionMapping &amp;dmap, const BoxArray &amp;ba)</argsstring>
        <name>ParticleContainerBase</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="33" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="33" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a1b59660938f651e5a56bc45bb6bc4d8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; int &gt; &amp;rr)</argsstring>
        <name>ParticleContainerBase</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="42" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="42" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1af60ff4efea559ba4e49dc7178e504e4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; IntVect &gt; &amp;rr)</argsstring>
        <name>ParticleContainerBase</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="52" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="52" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a9767823a5595f287569a535bb3b8ae59" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual amrex::ParticleContainerBase::~ParticleContainerBase</definition>
        <argsstring>()=default</argsstring>
        <name>~ParticleContainerBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="75" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a5f71ad65c90b78b062f40127d91a3134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(const ParticleContainerBase &amp;)=delete</argsstring>
        <name>ParticleContainerBase</name>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainerBase" kindref="compound">ParticleContainerBase</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="77" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a4d64529e53afd5cccc69ff5a27262411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParticleContainerBase" kindref="compound">ParticleContainerBase</ref> &amp;</type>
        <definition>ParticleContainerBase&amp; amrex::ParticleContainerBase::operator=</definition>
        <argsstring>(const ParticleContainerBase &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1ParticleContainerBase" kindref="compound">ParticleContainerBase</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="78" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1af17feaf161d82ae2ef0466b6188cc7b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParticleContainerBase::ParticleContainerBase</definition>
        <argsstring>(ParticleContainerBase &amp;&amp;)=default</argsstring>
        <name>ParticleContainerBase</name>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainerBase" kindref="compound">ParticleContainerBase</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="80" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a08060e877e41b78ef42581d8a8d7326c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParticleContainerBase" kindref="compound">ParticleContainerBase</ref> &amp;</type>
        <definition>ParticleContainerBase&amp; amrex::ParticleContainerBase::operator=</definition>
        <argsstring>(ParticleContainerBase &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1ParticleContainerBase" kindref="compound">ParticleContainerBase</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="81" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a58cb6f59ee8ed859dce4a4c82b148dab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::Define</definition>
        <argsstring>(ParGDBBase *gdb)</argsstring>
        <name>Define</name>
        <param>
          <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
          <declname>gdb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="83" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ab2d7e2f655c0926dc7856544d9626140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::Define</definition>
        <argsstring>(const Geometry &amp;geom, const DistributionMapping &amp;dmap, const BoxArray &amp;ba)</argsstring>
        <name>Define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="85" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="14" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a2d2f5b76392326defb14c8adaee1f1a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::Define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; int &gt; &amp;rr)</argsstring>
        <name>Define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="89" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="22" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a1784a92d18a97247d05bbaae9ba0135b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::Define</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; IntVect &gt; &amp;rr)</argsstring>
        <name>Define</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="94" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="31" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a0fef888a5370f9723f2ab2df2fe32266" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::ParticleContainerBase::isDefined</definition>
        <argsstring>() const</argsstring>
        <name>isDefined</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="99" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a914a3fd813739f126e92408d194a3752" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::reserveData</definition>
        <argsstring>()</argsstring>
        <name>reserveData</name>
        <reimplementedby refid="classamrex_1_1ParticleContainer__impl_1aa5c8c0fea702cb673995b3f1d87f35f1">reserveData</reimplementedby>
        <reimplementedby refid="classamrex_1_1ParticleContainer__impl_1aa5c8c0fea702cb673995b3f1d87f35f1">reserveData</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="101" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a41c8b5cccfa817dbfa0b005451322817" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::resizeData</definition>
        <argsstring>()</argsstring>
        <name>resizeData</name>
        <reimplementedby refid="classamrex_1_1ParticleContainer__impl_1adeded66adc9a0a73d9ddb8ce759ca476">resizeData</reimplementedby>
        <reimplementedby refid="classamrex_1_1ParticleContainer__impl_1adeded66adc9a0a73d9ddb8ce759ca476">resizeData</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="102" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="45" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a7fc7373a60be7c74a38a17b1711f59fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::RedefineDummyMF</definition>
        <argsstring>(int lev)</argsstring>
        <name>RedefineDummyMF</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="103" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="54" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1adc8bb6ea7e7d8a9596936623bc2e26ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref></type>
        <definition>MFIter amrex::ParticleContainerBase::MakeMFIter</definition>
        <argsstring>(int lev, const MFItInfo &amp;info) const</argsstring>
        <name>MakeMFIter</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1MFItInfo" kindref="compound">MFItInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="105" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a41cb0c34d64f3d1df87d83f3b26f594b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref></type>
        <definition>MFIter amrex::ParticleContainerBase::MakeMFIter</definition>
        <argsstring>(int lev) const</argsstring>
        <name>MakeMFIter</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="110" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="110" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a30a608b14352a5cd5bfed79f69f98011" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref></type>
        <definition>MFIter amrex::ParticleContainerBase::MakeMFIter</definition>
        <argsstring>(int lev, bool tile) const</argsstring>
        <name>MakeMFIter</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>tile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="115" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a2b8152157d1ecf4129a015d2a8ead5ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::SetParGDB</definition>
        <argsstring>(const Geometry &amp;geom, const DistributionMapping &amp;dmap, const BoxArray &amp;ba)</argsstring>
        <name>SetParGDB</name>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>, <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondence will be broken here. This is the single-level version. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geom</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ba</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="128" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="82" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a3a466989f4aa9bba5b055e42d48ee936" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::SetParGDB</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; IntVect &gt; &amp;rr)</argsstring>
        <name>SetParGDB</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>, <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, ref ratios, and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondence will be broken here. This is the multi-level version. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geom</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector of <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> objects to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector of <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> objects to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ba</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector of <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> objects to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rr</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector of refinement ratios to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="141" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="101" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a390bb96be3157bd1a0bf97fe3167e14b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::SetParGDB</definition>
        <argsstring>(const Vector&lt; Geometry &gt; &amp;geom, const Vector&lt; DistributionMapping &gt; &amp;dmap, const Vector&lt; BoxArray &gt; &amp;ba, const Vector&lt; int &gt; &amp;rr)</argsstring>
        <name>SetParGDB</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
          <declname>dmap</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>rr</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>, <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>, ref ratios, and <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondence will be broken here. This is the multi-level version. </para>
        </briefdescription>
        <detaileddescription>
<para>Like the above, except the refinement ratios are expressed as ints</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geom</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector of <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> objects to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector of <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> objects to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ba</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector of <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> objects to use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rr</parametername>
</parameternamelist>
<parameterdescription>
<para>The new vector of refinement ratios to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="157" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="91" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a79aa4f01ee0c767eb5f92c5cfed9485d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::SetParticleBoxArray</definition>
        <argsstring>(int lev, BoxArray new_ba)</argsstring>
        <name>SetParticleBoxArray</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
          <declname>new_ba</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondence will be broken here. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level on which to set the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_ba</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="169" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="111" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a0efe211fbdf5d6759cd3a045622e0250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::SetParticleDistributionMap</definition>
        <argsstring>(int lev, DistributionMapping new_dmap)</argsstring>
        <name>SetParticleDistributionMap</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
          <declname>new_dmap</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondence will be broken here. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level on which to set the dm. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_dmap</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="178" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="124" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a89426801f817c951b25e9748f669d3ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::SetParticleGeometry</definition>
        <argsstring>(int lev, Geometry new_geom)</argsstring>
        <name>SetParticleGeometry</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
          <declname>new_geom</declname>
        </param>
        <briefdescription>
<para>Set the particle <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>. If the container was previously set to to track the AMR hierarchy of an <ref refid="classamrex_1_1AmrCore" kindref="compound">AmrCore</ref> or <ref refid="classamrex_1_1AmrLevel" kindref="compound">AmrLevel</ref> object, that correspondence will be broken here. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level on which to set the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_geom</parametername>
</parameternamelist>
<parameterdescription>
<para>The new <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="187" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="137" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1aa22d7a841e78ebeadb741eb5fedd6473" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray&amp; amrex::ParticleContainerBase::ParticleBoxArray</definition>
        <argsstring>(int lev) const</argsstring>
        <name>ParticleBoxArray</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> for a given level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="193" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="193" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a7e2ec84758098c59382aba1343bc4a8b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping&amp; amrex::ParticleContainerBase::ParticleDistributionMap</definition>
        <argsstring>(int lev) const</argsstring>
        <name>ParticleDistributionMap</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> for a given level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="200" column="31" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="200" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a9ae9a37898b7fb6929b598194c8bca61" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::ParticleContainerBase::Geom</definition>
        <argsstring>(int lev) const</argsstring>
        <name>Geom</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> for a given level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="207" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="207" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a00182008cdf9fb0039e82588fb15e67e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::ParticleContainerBase::ParticleGeom</definition>
        <argsstring>(int lev) const</argsstring>
        <name>ParticleGeom</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Get the particle <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> for a given level. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lev</parametername>
</parameternamelist>
<parameterdescription>
<para>The level. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="213" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="213" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1aa9d1fb8c82d375e2d473e0dd677b3f61" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::finestLevel</definition>
        <argsstring>() const</argsstring>
        <name>finestLevel</name>
        <briefdescription>
<para>the finest level actually defined for the ParticleContainer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="216" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="216" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ad60ba0c10f19af842fdfbeaccd02b2ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::maxLevel</definition>
        <argsstring>() const</argsstring>
        <name>maxLevel</name>
        <briefdescription>
<para>the finest allowed level in the ParticleContainer, whether it is defined or not. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="219" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="219" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a6ec01a89cd77b4473dc1895e1a2b1ebe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::numLevels</definition>
        <argsstring>() const</argsstring>
        <name>numLevels</name>
        <briefdescription>
<para>the number of defined levels in the ParticleContainer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="222" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="222" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a0e42065282e0589082794401db6d2247" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
        <definition>const ParGDBBase* amrex::ParticleContainerBase::GetParGDB</definition>
        <argsstring>() const</argsstring>
        <name>GetParGDB</name>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> object used to define this container (const version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="225" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1adafb217d391165d8afaf21b38912e068" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParGDBBase" kindref="compound">ParGDBBase</ref> *</type>
        <definition>ParGDBBase* amrex::ParticleContainerBase::GetParGDB</definition>
        <argsstring>()</argsstring>
        <name>GetParGDB</name>
        <briefdescription>
<para>Get the <ref refid="classamrex_1_1ParGDB" kindref="compound">ParGDB</ref> object used to define this container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="228" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="228" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1aecfa142bba944fe440b23bd13a79c08e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleContainerBase::Verbose</definition>
        <argsstring>() const</argsstring>
        <name>Verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="230" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="230" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a2a0f56f8b64e6c0315442033ebd79fac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParticleContainerBase::SetVerbose</definition>
        <argsstring>(int verbose)</argsstring>
        <name>SetVerbose</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>verbose</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="232" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="232" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ae8cc9df742fa642c6289916de788afa5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1ParticleBufferMap" kindref="compound">ParticleBufferMap</ref> &amp;</type>
        <definition>const ParticleBufferMap&amp; amrex::ParticleContainerBase::BufferMap</definition>
        <argsstring>() const</argsstring>
        <name>BufferMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="234" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="234" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a444a7a4f352c7d70ab530e09facc7894" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::ParticleContainerBase::NeighborProcs</definition>
        <argsstring>(int ngrow) const</argsstring>
        <name>NeighborProcs</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="236" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="236" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a92aa9afcd8adbbb62d06b8c3c293912a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class MF</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::ParticleContainerBase::OnSameGrids</definition>
        <argsstring>(int level, const MF &amp;mf) const</argsstring>
        <name>OnSameGrids</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const MF &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="242" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="242" bodyend="242"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a7412df442ee70eda865ad538530acfe8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; ParticleContainerBase::CheckpointVersion</definition>
        <argsstring>()</argsstring>
        <name>CheckpointVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="244" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="149" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ab95e00002c7985b4bc7d425795d72404" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; ParticleContainerBase::PlotfileVersion</definition>
        <argsstring>()</argsstring>
        <name>PlotfileVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="245" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="165" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ac11b2227836fc7582170fbeba06c780a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; ParticleContainerBase::DataPrefix</definition>
        <argsstring>()</argsstring>
        <name>DataPrefix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="246" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="180" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a906decca7ce86c4a87f1874225779d05" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int ParticleContainerBase::MaxReaders</definition>
        <argsstring>()</argsstring>
        <name>MaxReaders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="247" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="190" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a1f3d39dbdae2586a92fdcc799ee9d1ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long ParticleContainerBase::MaxParticlesPerRead</definition>
        <argsstring>()</argsstring>
        <name>MaxParticlesPerRead</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="248" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="212" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1ad4184276cc974fbc7a8316a89df2eb25" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; ParticleContainerBase::AggregationType</definition>
        <argsstring>()</argsstring>
        <name>AggregationType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="249" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="237" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a057b501a3b5f73f4c897da8ec8dd26f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int ParticleContainerBase::AggregationBuffer</definition>
        <argsstring>()</argsstring>
        <name>AggregationBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="250" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="257" bodyend="275"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a96b76ab915415e7891655d0910880636" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::BuildRedistributeMask</definition>
        <argsstring>(int lev, int nghost=1) const</argsstring>
        <name>BuildRedistributeMask</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nghost</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="259" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="277" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParticleContainerBase_1a23baa2791b5f62a9dd1e7f6c709d4615" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParticleContainerBase::defineBufferMap</definition>
        <argsstring>() const</argsstring>
        <name>defineBufferMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="260" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.cpp" bodystart="72" bodyend="80"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::ParticleContainerBase</label>
        <link refid="classamrex_1_1ParticleContainerBase"/>
      </node>
      <node id="6">
        <label>amrex::TracerParticleContainer&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1TracerParticleContainer"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::NeighborParticleContainer&lt; NStructReal, NStructInt, NArrayReal, NArrayInt &gt;</label>
        <link refid="classamrex_1_1NeighborParticleContainer"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::ParticleContainer_impl&lt; T_ParticleType, 0, 0, DefaultAllocator, DefaultAssignor &gt;</label>
        <link refid="classamrex_1_1ParticleContainer__impl"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>amrex::AmrTracerParticleContainer</label>
        <link refid="classamrex_1_1AmrTracerParticleContainer"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::AmrParticleContainer_impl&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;</label>
        <link refid="classamrex_1_1AmrParticleContainer__impl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::ParticleContainer_impl&lt; T_ParticleType, T_NArrayReal, T_NArrayInt, Allocator, T_CellAssignor &gt;</label>
        <link refid="classamrex_1_1ParticleContainer__impl"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>amrex::AmrParticleLocator&lt; amrex::DenseBins&lt; amrex::BoxND &gt; &gt;</label>
        <link refid="classamrex_1_1AmrParticleLocator"/>
      </node>
      <node id="6">
        <label>T</label>
      </node>
      <node id="7">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>amrex::Vector&lt; amrex::DistributionMapping &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>amrex::ParGDBBase</label>
        <link refid="classamrex_1_1ParGDBBase"/>
      </node>
      <node id="13">
        <label>amrex::Vector&lt; amrex::BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>amrex::ParticleBufferMap</label>
        <link refid="classamrex_1_1ParticleBufferMap"/>
        <childnode refid="10" relation="usage">
          <edgelabel>d_bucket_to_pid</edgelabel>
          <edgelabel>d_lev_gid_to_bucket</edgelabel>
          <edgelabel>d_lev_offsets</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_dm</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_bucket_to_gid</edgelabel>
          <edgelabel>m_bucket_to_lev</edgelabel>
          <edgelabel>m_bucket_to_pid</edgelabel>
          <edgelabel>m_lev_gid_to_bucket</edgelabel>
          <edgelabel>m_lev_offsets</edgelabel>
          <edgelabel>m_proc_box_counts</edgelabel>
          <edgelabel>m_proc_box_offsets</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_ba</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>std::allocator&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::ParticleContainerBase</label>
        <link refid="classamrex_1_1ParticleContainerBase"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_particle_locator</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>redistribute_mask_ptr</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>neighbor_procs</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_dummy_mf</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_gdb_object</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_buffer_map</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>tile_size</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_gdb</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::unique_ptr&lt; amrex::iMultiFab &gt;</label>
      </node>
      <node id="8">
        <label>std::unique_ptr&lt; amrex::ParGDB &gt;</label>
      </node>
      <node id="10">
        <label>amrex::PODVector&lt; int &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>amrex::IntVectND&lt; dim &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" line="22" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleContainerBase.H" bodystart="23" bodyend="272"/>
    <listofallmembers>
      <member refid="classamrex_1_1ParticleContainerBase_1a057b501a3b5f73f4c897da8ec8dd26f9" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>AggregationBuffer</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ad4184276cc974fbc7a8316a89df2eb25" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>AggregationType</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ae8cc9df742fa642c6289916de788afa5" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>BufferMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a96b76ab915415e7891655d0910880636" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>BuildRedistributeMask</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a7412df442ee70eda865ad538530acfe8" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>CheckpointVersion</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ac11b2227836fc7582170fbeba06c780a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>DataPrefix</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a58cb6f59ee8ed859dce4a4c82b148dab" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ab2d7e2f655c0926dc7856544d9626140" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2d2f5b76392326defb14c8adaee1f1a5" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a1784a92d18a97247d05bbaae9ba0135b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Define</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a23baa2791b5f62a9dd1e7f6c709d4615" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>defineBufferMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a29311c7fd7f83d43f84951476f9a265d" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>do_tiling</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aa9d1fb8c82d375e2d473e0dd677b3f61" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>finestLevel</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a9ae9a37898b7fb6929b598194c8bca61" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Geom</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a0e42065282e0589082794401db6d2247" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>GetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adafb217d391165d8afaf21b38912e068" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>GetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a0fef888a5370f9723f2ab2df2fe32266" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>isDefined</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2eddb55f0ebdf394ea2ace09e1d0e4a4" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_buffer_map</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adb9b347bff9efa17831af4b1c5cb846a" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_dummy_mf</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2821fc52ed661ccd9e9d821b81476fff" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_gdb</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a7faac754ff05cf1b841bfe49dad579ba" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_gdb_object</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aa9bbd6752d478b3a24e66f2caa11196b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_particle_locator</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a89f6fb84fb7e73fc185ae5d8f45818ab" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>m_verbose</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adc8bb6ea7e7d8a9596936623bc2e26ed" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MakeMFIter</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a41cb0c34d64f3d1df87d83f3b26f594b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MakeMFIter</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a30a608b14352a5cd5bfed79f69f98011" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MakeMFIter</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ad60ba0c10f19af842fdfbeaccd02b2ed" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>maxLevel</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a1f3d39dbdae2586a92fdcc799ee9d1ea" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MaxParticlesPerRead</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a906decca7ce86c4a87f1874225779d05" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>MaxReaders</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a5a0a39b2da4b85ad599ea7fc51fba940" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>memEfficientSort</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a0e1a0dcc5bf3f405f40ad020f18389bc" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>neighbor_procs</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a444a7a4f352c7d70ab530e09facc7894" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>NeighborProcs</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a6ec01a89cd77b4473dc1895e1a2b1ebe" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>numLevels</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a92aa9afcd8adbbb62d06b8c3c293912a" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>OnSameGrids</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a4d64529e53afd5cccc69ff5a27262411" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>operator=</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a08060e877e41b78ef42581d8a8d7326c" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>operator=</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aa22d7a841e78ebeadb741eb5fedd6473" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleBoxArray</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a51bba5cff5a55e3f6ce46c0b56fa1809" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a783bf6edc1d9d0bdc5d4e8dd1f98cd5f" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a66e036defd5c86431c583bbd8cb91e2d" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a1b59660938f651e5a56bc45bb6bc4d8e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1af60ff4efea559ba4e49dc7178e504e4c" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a5f71ad65c90b78b062f40127d91a3134" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1af17feaf161d82ae2ef0466b6188cc7b0" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleContainerBase</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a7e2ec84758098c59382aba1343bc4a8b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleDistributionMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a00182008cdf9fb0039e82588fb15e67e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>ParticleGeom</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ab95e00002c7985b4bc7d425795d72404" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>PlotfileVersion</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a7fc7373a60be7c74a38a17b1711f59fa" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>RedefineDummyMF</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1ac6b4b306d8f0399657b3884f51ea569e" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>redistribute_mask_nghost</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a18183e85d5ae22c27721996b3c5bfead" prot="protected" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>redistribute_mask_ptr</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a914a3fd813739f126e92408d194a3752" prot="public" virt="virtual"><scope>amrex::ParticleContainerBase</scope><name>reserveData</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a41c8b5cccfa817dbfa0b005451322817" prot="public" virt="virtual"><scope>amrex::ParticleContainerBase</scope><name>resizeData</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2b8152157d1ecf4129a015d2a8ead5ff" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a3a466989f4aa9bba5b055e42d48ee936" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a390bb96be3157bd1a0bf97fe3167e14b" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetParGDB</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a79aa4f01ee0c767eb5f92c5cfed9485d" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetParticleBoxArray</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a0efe211fbdf5d6759cd3a045622e0250" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetParticleDistributionMap</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a89426801f817c951b25e9748f669d3ce" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetParticleGeometry</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a2a0f56f8b64e6c0315442033ebd79fac" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>SetVerbose</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1adb03167dec6a952cfa60beb45a514dfa" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>tile_size</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1aecfa142bba944fe440b23bd13a79c08e" prot="public" virt="non-virtual"><scope>amrex::ParticleContainerBase</scope><name>Verbose</name></member>
      <member refid="classamrex_1_1ParticleContainerBase_1a9767823a5595f287569a535bb3b8ae59" prot="public" virt="virtual"><scope>amrex::ParticleContainerBase</scope><name>~ParticleContainerBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
