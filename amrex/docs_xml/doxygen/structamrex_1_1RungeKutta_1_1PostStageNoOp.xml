<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structamrex_1_1RungeKutta_1_1PostStageNoOp" kind="struct" language="C++" prot="public">
    <compoundname>amrex::RungeKutta::PostStageNoOp</compoundname>
    <includes refid="AMReX__RungeKutta_8H" local="no">AMReX_RungeKutta.H</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1RungeKutta_1_1PostStageNoOp_1a723eaac830169eba34146a762f245b58" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::RungeKutta::PostStageNoOp::operator()</definition>
        <argsstring>(int, MF &amp;) const</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>MF &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RungeKutta.H" line="54" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RungeKutta.H" bodystart="54" bodyend="54"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions for Runge-Kutta methods. </para>
    </briefdescription>
    <detaileddescription>
<para>This namespace <ref refid="namespaceamrex_1_1RungeKutta" kindref="compound">RungeKutta</ref> has functions for a number RK methods, RK2, RK3 and RK4. Here, RK2 refers to the explicit trapezoid rule, RK3 refers to the SSPRK3 (<ulink url="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods#Third-order_Strong_Stability_Preserving_Runge-Kutta_(SSPRK3)">https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods#Third-order_Strong_Stability_Preserving_Runge-Kutta_(SSPRK3)</ulink>), and RK4 is the classical fourth-order method (<ulink url="https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods#Classic_fourth-order_method">https://en.wikipedia.org/wiki/List_of_Runge%E2%80%93Kutta_methods#Classic_fourth-order_method</ulink>). The function templates take the old data in FabArray/MultiFab as input, and evolve the system for one time step. The result is stored in another FabArray/MultiFab. These two FabArrays must have ghost cells if they are needed for evaluating the right-hand side. The functions take three callable objects for computing the right-hand side, filling ghost cells, and optionally post-processing RK stage results. For RK3 and RK4, they also need a callable object for storing the data needed for filling coarse/fine boundaries in AMR simulations.</para>
<para>The callable object for right-hand side has the signature of <computeroutput>void(int stage, MF&amp; dudt, MF const&amp; u, Real t, Real dt)</computeroutput>, where <computeroutput>stage</computeroutput> is the RK stage number starting from 1, <computeroutput>dudt</computeroutput> is the output, <computeroutput>u</computeroutput> is the input, <computeroutput>t</computeroutput> is the first-order approximate time of the stage, and <computeroutput>dt</computeroutput> is the sub-time step, which can be used for reflux operations in AMR simulations.</para>
<para>The callable object for filling ghost cells has the signature of <computeroutput>void(int stage, MF&amp; u, Real t)</computeroutput>, where <computeroutput>stage</computeroutput> is the RK stage number starting from 1, <computeroutput>u</computeroutput> is a FabArray/MultiFab whose ghost cells need to be filled, and <computeroutput>t</computeroutput> is the first-order approximate time of the data at that stage. The <ref refid="classamrex_1_1FillPatcher" kindref="compound">FillPatcher</ref> class can be useful for implementing such a callable. See <ref refid="classamrex_1_1AmrLevel_1a95aea02fe7abbf3d1e5cd58ee5ff7d41" kindref="member">AmrLevel::RK</ref> for an example.</para>
<para>The callable object for post-processing stage results is optional. It&apos;s no-op by default. Its function signature is <computeroutput>void(int stage, MF&amp; u)</computeroutput>, where <computeroutput>stage</computeroutput> is the RK stage number and <computeroutput>u</computeroutput> is the result of that stage.</para>
<para>For RK3 and RK4, one must also provide a callable object with the signature of <computeroutput>void(Array&lt;MF,order&gt; const&amp; rkk)</computeroutput>, where <computeroutput>order</computeroutput> is the RK order and <computeroutput>rkk</computeroutput> contains the right-hand side at all the RK stages. The <ref refid="classamrex_1_1FillPatcher" kindref="compound">FillPatcher</ref> class can be useful for implementing such a callable. See <ref refid="classamrex_1_1AmrLevel_1a95aea02fe7abbf3d1e5cd58ee5ff7d41" kindref="member">AmrLevel::RK</ref> for an example. </para>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RungeKutta.H" line="52" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RungeKutta.H" bodystart="52" bodyend="55"/>
    <listofallmembers>
      <member refid="structamrex_1_1RungeKutta_1_1PostStageNoOp_1a723eaac830169eba34146a762f245b58" prot="public" virt="non-virtual"><scope>amrex::RungeKutta::PostStageNoOp</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
