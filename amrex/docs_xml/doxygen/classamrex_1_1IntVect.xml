<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1IntVect" kind="class" language="C++" prot="public">
    <compoundname>amrex::IntVect</compoundname>
    <includes refid="AMReX__IntVect_8H" local="no">AMReX_IntVect.H</includes>
    <innerclass refid="classamrex_1_1IntVect_1_1shift__hasher" prot="public">amrex::IntVect::shift_hasher</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1IntVect_1a0da0ad772b267330594cbcc72bb48c5c" prot="public" static="no">
        <type><ref refid="classamrex_1_1IntVect_1_1shift__hasher" kindref="compound">shift_hasher</ref></type>
        <definition>using amrex::IntVect::hasher =  shift_hasher</definition>
        <argsstring></argsstring>
        <name>hasher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="56" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1IntVect_1a5b50f516a319513a10154ef402c2717b" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>const IntVect amrex::IntVect::Zero</definition>
        <argsstring></argsstring>
        <name>Zero</name>
        <initializer>= <ref refid="classamrex_1_1IntVect_1a16fd2692186f9d2a1291058ac5ab0ca0" kindref="member">IntVect::TheZeroVector</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> all of whose components are equal to zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="62" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntVect_1a93df7e94c6d2d07ea3eb7647500bf751" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>const IntVect amrex::IntVect::Unit</definition>
        <argsstring></argsstring>
        <name>Unit</name>
        <initializer>= <ref refid="classamrex_1_1IntVect_1a89b6d1003a1ef2e6c9b79ff2a07241c3" kindref="member">IntVect::TheUnitVector</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> all of whose components are equal to one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="68" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1IntVect_1aa90d26b430997cad2cfb8c21f6fb2e22" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::IntVect::vect[AMREX_SPACEDIM]</definition>
        <argsstring>[AMREX_SPACEDIM]</argsstring>
        <name>vect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="527" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="527" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1IntVect_1adccd37eeac931837d637545e8eba842e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref></type>
        <definition>MPI_Datatype ParallelDescriptor::Mpi_typemap</definition>
        <argsstring>()</argsstring>
        <name>ParallelDescriptor::Mpi_typemap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="35" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1IntVect_1a00108a6b83c8c90366f3aa103fc834cb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const IntVect &amp;iv)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="524" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.cpp" bodystart="16" bodyend="25"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1IntVect_1a1da4bfe27f128e362972e3ed4156e6f1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, IntVect &amp;iv)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="525" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.cpp" bodystart="30" bodyend="69"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1IntVect_1a698ae35b64ba3caefb08666249e6edb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::IntVect::IntVect</definition>
        <argsstring>() noexcept</argsstring>
        <name>IntVect</name>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> whose components are all zero. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="75" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aa22c324e7128b3164d547b0723b4b2d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::IntVect::IntVect</definition>
        <argsstring>(AMREX_D_DECL(int i, int j, int k)) noexcept</argsstring>
        <name>IntVect</name>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(int i, int j, int k)</type>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> given the specific values for its coordinates. AMREX_D_DECL is a macro that sets the constructor to take AMREX_SPACEDIM arguments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="83" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ae9684c0f49b86a16a696f99521290fe9" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::IntVect::IntVect</definition>
        <argsstring>(const int *a) noexcept</argsstring>
        <name>IntVect</name>
        <param>
          <type>const int *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> setting the coordinates to the corresponding values in the integer array a. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="95" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a964cade2a31b2c82990dcb7726dd5d1d" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::IntVect::IntVect</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;a) noexcept</argsstring>
        <name>IntVect</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> from an <ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref>. It is an error if the <ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref> doesn&apos; t have the same dimension as this <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="102" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1addf6e967457cdc48def7f89cdd6e3423" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::IntVect::IntVect</definition>
        <argsstring>(const Array&lt; int, AMREX_SPACEDIM &gt; &amp;a) noexcept</argsstring>
        <name>IntVect</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; int, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> from an Array&lt;int,AMREX_SPACEDIM&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="109" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="109" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ab58021983f7ea091fa42717851af0a3a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::IntVect::dim3</definition>
        <argsstring>() const noexcept</argsstring>
        <name>dim3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="115" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="115" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a6a18613c641ed334208f5e3d6b13aaf7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::IntVect::sum</definition>
        <argsstring>() const noexcept</argsstring>
        <name>sum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sum of all components of this <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="130" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="130" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1afc4d5734d3a85d47e406637bfdc4573d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::IntVect::max</definition>
        <argsstring>() const noexcept</argsstring>
        <name>max</name>
        <briefdescription>
<para>maximum (no absolute values) value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="138" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="138" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ad903f958ca90c11bcf4e67941cb3e66a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::IntVect::min</definition>
        <argsstring>() const noexcept</argsstring>
        <name>min</name>
        <briefdescription>
<para>minimum (no absolute values) value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="152" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="152" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a6c9271bcd290bbbdf484917979863441" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> int</type>
        <definition>AMREX_FORCE_INLINE int amrex::IntVect::maxDir</definition>
        <argsstring>(bool a_doAbsValue) const noexcept</argsstring>
        <name>maxDir</name>
        <param>
          <type>bool</type>
          <declname>a_doAbsValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="166" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="555" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a4bca4c9e58bdc48003b232c3e4684845" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> int &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int&amp; amrex::IntVect::operator[]</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the i&apos;th coordinate of the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="170" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="170" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1af90cb33f3f87b373541ef1599c7f3ba4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const int &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const int&amp; amrex::IntVect::operator[]</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the i&apos;th coordinate of the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="174" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a941066d4e3372a3aad9669251dbd0fc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::setVal</definition>
        <argsstring>(int i, int val) noexcept</argsstring>
        <name>setVal</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set i&apos;th coordinate of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> to val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="178" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a7c75e50dcbb617d2808340334c67fc5c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const int *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const int* amrex::IntVect::getVect</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>getVect</name>
        <briefdescription>
<para>Returns a const pointer to an array of coordinates of the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. Useful for arguments to FORTRAN calls. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="188" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a1382c3bd03f86faeeaf2e177d6ce915f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> int *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int* amrex::IntVect::getVect</definition>
        <argsstring>()&amp;noexcept</argsstring>
        <name>getVect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="190" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="190" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a77db629019eeac0383e74a8007df7512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int *</type>
        <definition>AMREX_GPU_HOST_DEVICE int* amrex::IntVect::getVect</definition>
        <argsstring>()&amp;&amp;=delete</argsstring>
        <name>getVect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ab7c1530f875ef4d020be2040e6c07c5c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::operator==</definition>
        <argsstring>(int val) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Returns true if all components are equal to the argument val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="196" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a5282a49e7747f90f41d61f638a197c0a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::operator!=</definition>
        <argsstring>(int val) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Returns true if any component is not equal to the argument val. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="203" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ae6f6d68fa19fbf49113f1977bcc1b98e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::operator==</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is equivalent to rhs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="210" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1af456adb0c463a65e2fb5485ccbcbfca2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::operator!=</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is different from rhs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="216" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="216" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aee6cf807abcb81028ca896c06bff92c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::operator&lt;</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Return ture if this is lexicographically less than rhs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="222" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="222" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a01bab1122401254b52ca78f8bba2c43b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::operator&lt;=</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Return true if this is lexicographically less than or equal to rhs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="235" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="235" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a691058b18c080153939ece80fd7ec44a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::operator&gt;</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Retrun true if this is lexicographically greater than rhs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="241" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="241" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a97463f6f3f6f5a5b2651925c3583b8cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::operator&gt;=</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Retrun true if this is lexicographically greater than or equal to rhs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="247" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aea27d4db10ac19c7c57b34cd72f362de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::allLT</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>allLT</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is less than argument for all components. NOTE: This is NOT a strict weak ordering usable by STL sorting algorithms. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="256" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="256" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a9bfc5b4da499c3d53789bd0a3ceb2eda" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::allLE</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>allLE</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is less than or equal to argument for all components. NOTE: This is NOT a strict weak ordering usable by STL sorting algorithms. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="265" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="265" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aa2afc8258c47e63ae123d7f2edf12589" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::allGT</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>allGT</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is greater than argument for all components. NOTE: This is NOT a strict weak ordering usable by STL sorting algorithms. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="274" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ae3c7940850b880ae2d83dab12e73434a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::allGE</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>allGE</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is greater than or equal to argument for all components. NOTE: This is NOT a strict weak ordering usable by STL sorting algorithms. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="283" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="283" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a99f31fad06dd4dd675580b21dd5a9cd8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const IntVect amrex::IntVect::operator+</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator+</name>
        <briefdescription>
<para>Unary plus <ndash/> for completeness. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="289" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="289" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ae4e90ec1bd7b7f5ef69ee2a3a61efc24" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::IntVect::operator-</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Unary Minus <ndash/> negates all components. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="292" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="292" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aee6081912d1313168ab5dc48a46820c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::operator+=</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by addition of a scalar to each component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="295" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="295" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a25e6a76158ad529288828684f2f08326" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::operator+=</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by component-wise addition with argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="301" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="301" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a61cb88fb0f17954da04f1b143630cc7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::operator*=</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by multiplication of a scalar to each component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="307" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="307" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ad4dcea7b65c2ffbc69054642188cc6d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::operator*=</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by component-wise multiplication with argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="313" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="313" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a1394b0469bc14cc4ea9aae247e742d96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::operator/=</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by division by a scalar to each component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="319" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="319" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ae9073b4a1e2baf1dff01a67f7d472131" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::operator/=</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by component-wise division with argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="325" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="325" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1abf99b01f250cefa41334b509c1af545a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::operator-=</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by subtraction of a scalar to each component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="331" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="331" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a1d07b509b970f01fd5a8fcfd474d656b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::operator-=</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by component-wise subtraction with argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="337" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="337" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a895e65c4684bcf26f6d944ece959bc2a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::IntVect::operator+</definition>
        <argsstring>(const IntVect &amp;p) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns component-wise sum of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> and argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="343" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a31a96457940bed6a372e7d1daae4b80c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::IntVect::operator+</definition>
        <argsstring>(int s) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Return an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> that is this <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> + s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="349" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="349" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a44fb1336803f74572c5dc2b17d7976c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::IntVect::operator-</definition>
        <argsstring>(const IntVect &amp;p) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns component-wise difference of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> and argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="355" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="355" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a4bca8f73ff093f4cfd07cd515c06ff86" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::IntVect::operator-</definition>
        <argsstring>(int s) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Return an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> that is this <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> - s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="361" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="361" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a866f2ad2b6b43a512a959c7fc7e7888d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::IntVect::operator*</definition>
        <argsstring>(const IntVect &amp;p) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns component-wise product of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> and argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="367" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="367" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a20502531b4272c7267bf17a04b2af638" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::IntVect::operator*</definition>
        <argsstring>(int s) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns component-wise product of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> and s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="373" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="373" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1abc05a4c85a21bdd1b713d42ec71c6df4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::IntVect::operator/</definition>
        <argsstring>(const IntVect &amp;p) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns component-wise division of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="379" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="379" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a79f42b99126b97865433f66505dbaffe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::IntVect::operator/</definition>
        <argsstring>(int s) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns component-wise division of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="385" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="385" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aa105b435548bdacb7a82cb174610a4f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::min</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by taking component-wise min with argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="391" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="391" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1afb31668e3b7bc7ad18ddf7453fe00557" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::max</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by taking component-wise max with argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="400" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="400" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a82c9a8acc01715ed9d6300440f44e1e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::scale</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>scale</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by multiplying each coordinate by s. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="409" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="409" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a6963bd15532e79e6d777945633d46231" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::reflect</definition>
        <argsstring>(int ref_ix, int idir) noexcept</argsstring>
        <name>reflect</name>
        <param>
          <type>int</type>
          <declname>ref_ix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idir</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by reflecting it in the plane defined by the index ref_ix and with normal in the direction of idir. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="415" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="415" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ae98d68677004232836e3588a9e80c4e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::shift</definition>
        <argsstring>(int coord, int s) noexcept</argsstring>
        <name>shift</name>
        <param>
          <type>int</type>
          <declname>coord</declname>
        </param>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by adding s to given coordinate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="423" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="423" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ac5d0c9910220729fed241a66f60fd9cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::shift</definition>
        <argsstring>(const IntVect &amp;iv) noexcept</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Equivalent to shift(0,iv[0]).shift(1,iv[1]) ... </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="429" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="429" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a5db897bb853d9a69ee461f6a7cba1bee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::diagShift</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>diagShift</name>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by adding s to each coordinate. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="432" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="432" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a0cd59d8284e828651b81e9e64bad86d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_FORCE_INLINE IntVect &amp; amrex::IntVect::coarsen</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by component-wise integer projection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="438" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="540" bodyend="551"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ab1ddd7f73bda5f47c59e5eb1f7e73147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_FORCE_INLINE IntVect &amp; amrex::IntVect::coarsen</definition>
        <argsstring>(int p) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by component-wise integer projection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="441" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="532" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1abee8e0e3350e3ed6775a0b99b149dd36" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>AMREX_FORCE_INLINE void amrex::IntVect::linearOut</definition>
        <argsstring>(void *a_buffer) const noexcept</argsstring>
        <name>linearOut</name>
        <param>
          <type>void *</type>
          <declname>a_buffer</declname>
        </param>
        <briefdescription>
<para>for serialization </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="452" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="589" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a47820f636ad7d56cc0804115188ff18f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>AMREX_FORCE_INLINE void amrex::IntVect::linearIn</definition>
        <argsstring>(void *a_buffer) noexcept</argsstring>
        <name>linearIn</name>
        <param>
          <type>void *</type>
          <declname>a_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="453" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="602" bodyend="611"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1IntVect_1ab9fbe9a50481d61c37c539c44da12fdb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref></type>
        <definition>static size_t AMREX_FORCE_INLINE amrex::IntVect::linearSize</definition>
        <argsstring>() noexcept</argsstring>
        <name>linearSize</name>
        <briefdescription>
<para>for serialization </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="445" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="445" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a16fd2692186f9d2a1291058ac5ab0ca0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr IntVect amrex::IntVect::TheZeroVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheZeroVector</name>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> object, all of whose AMREX_SPACEDIM arguments are set to zero (0). Figuratively, it is the zero vector in AMREX_SPACEDIM-dimensional space. It is provided as a convenient way to specify the zero vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="462" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="462" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a89b6d1003a1ef2e6c9b79ff2a07241c3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr IntVect amrex::IntVect::TheUnitVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheUnitVector</name>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> object, all of whose AMREX_SPACEDIM arguments are set to one (1). Figuratively, it is the unit vector in AMREX_SPACEDIM-dimensional space. It is provided as a convenient way to specify the unit vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="472" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="472" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a954f4b14ca735fce3499ea57f0ad7102" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr IntVect amrex::IntVect::TheDimensionVector</definition>
        <argsstring>(int d) noexcept</argsstring>
        <name>TheDimensionVector</name>
        <param>
          <type>int</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> object, all of whose AMREX_SPACEDIM arguments are set to zero except that the d-direction is set to one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="481" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="481" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a6b19244c9780da6977a4d1f647843d5b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr IntVect amrex::IntVect::TheNodeVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheNodeVector</name>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> object, all of whose AMREX_SPACEDIM arguments are set to <ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafcccea410f04417a9413c9d3d862e84300eb05" kindref="member">IndexType::NODE</ref>. It is provided as a convenience to our users when defining Boxes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="492" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="492" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aef6ca971649186448bbd9a575f0a6c41" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr IntVect amrex::IntVect::TheCellVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheCellVector</name>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> object, all of whose AMREX_SPACEDIM arguments are set to <ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafcccea287ace89f7ffd266daab1798b3d48aa1" kindref="member">IndexType::CELL</ref>. It is provided as a convenience to our users when defining Boxes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="501" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="501" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1abf8819994800938564c840d711b5c404" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr IntVect amrex::IntVect::TheMaxVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheMaxVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="506" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="506" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1afe8d49fa4939449ea2da3ee0ae5003eb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr IntVect amrex::IntVect::TheMinVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheMinVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="514" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="514" bodyend="520"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>An Integer <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> in SPACEDIM-Dimensional Space</para><para>The class <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> is an implementation of an integer vector in a SPACEDIM-dimensional space. It represents a point in a discrete space. <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> values are accessed using the operator[] function, as for a normal C++ array. In addition, the basic arithmetic operators have been overloaded to implement scaling and translation operations. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="3537">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="3537" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" line="34" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_IntVect.H" bodystart="33" bodyend="528"/>
    <listofallmembers>
      <member refid="classamrex_1_1IntVect_1ae3c7940850b880ae2d83dab12e73434a" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>allGE</name></member>
      <member refid="classamrex_1_1IntVect_1aa2afc8258c47e63ae123d7f2edf12589" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>allGT</name></member>
      <member refid="classamrex_1_1IntVect_1a9bfc5b4da499c3d53789bd0a3ceb2eda" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>allLE</name></member>
      <member refid="classamrex_1_1IntVect_1aea27d4db10ac19c7c57b34cd72f362de" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>allLT</name></member>
      <member refid="classamrex_1_1IntVect_1a0cd59d8284e828651b81e9e64bad86d7" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1IntVect_1ab1ddd7f73bda5f47c59e5eb1f7e73147" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1IntVect_1a5db897bb853d9a69ee461f6a7cba1bee" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>diagShift</name></member>
      <member refid="classamrex_1_1IntVect_1ab58021983f7ea091fa42717851af0a3a" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>dim3</name></member>
      <member refid="classamrex_1_1IntVect_1a7c75e50dcbb617d2808340334c67fc5c" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>getVect</name></member>
      <member refid="classamrex_1_1IntVect_1a1382c3bd03f86faeeaf2e177d6ce915f" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>getVect</name></member>
      <member refid="classamrex_1_1IntVect_1a77db629019eeac0383e74a8007df7512" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>getVect</name></member>
      <member refid="classamrex_1_1IntVect_1a0da0ad772b267330594cbcc72bb48c5c" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>hasher</name></member>
      <member refid="classamrex_1_1IntVect_1a698ae35b64ba3caefb08666249e6edb3" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>IntVect</name></member>
      <member refid="classamrex_1_1IntVect_1aa22c324e7128b3164d547b0723b4b2d4" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>IntVect</name></member>
      <member refid="classamrex_1_1IntVect_1ae9684c0f49b86a16a696f99521290fe9" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>IntVect</name></member>
      <member refid="classamrex_1_1IntVect_1a964cade2a31b2c82990dcb7726dd5d1d" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>IntVect</name></member>
      <member refid="classamrex_1_1IntVect_1addf6e967457cdc48def7f89cdd6e3423" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>IntVect</name></member>
      <member refid="classamrex_1_1IntVect_1a47820f636ad7d56cc0804115188ff18f" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>linearIn</name></member>
      <member refid="classamrex_1_1IntVect_1abee8e0e3350e3ed6775a0b99b149dd36" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>linearOut</name></member>
      <member refid="classamrex_1_1IntVect_1ab9fbe9a50481d61c37c539c44da12fdb" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>linearSize</name></member>
      <member refid="classamrex_1_1IntVect_1afc4d5734d3a85d47e406637bfdc4573d" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>max</name></member>
      <member refid="classamrex_1_1IntVect_1afb31668e3b7bc7ad18ddf7453fe00557" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>max</name></member>
      <member refid="classamrex_1_1IntVect_1a6c9271bcd290bbbdf484917979863441" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>maxDir</name></member>
      <member refid="classamrex_1_1IntVect_1ad903f958ca90c11bcf4e67941cb3e66a" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>min</name></member>
      <member refid="classamrex_1_1IntVect_1aa105b435548bdacb7a82cb174610a4f9" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>min</name></member>
      <member refid="classamrex_1_1IntVect_1a5282a49e7747f90f41d61f638a197c0a" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1IntVect_1af456adb0c463a65e2fb5485ccbcbfca2" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1IntVect_1a866f2ad2b6b43a512a959c7fc7e7888d" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator*</name></member>
      <member refid="classamrex_1_1IntVect_1a20502531b4272c7267bf17a04b2af638" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator*</name></member>
      <member refid="classamrex_1_1IntVect_1a61cb88fb0f17954da04f1b143630cc7b" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1IntVect_1ad4dcea7b65c2ffbc69054642188cc6d2" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1IntVect_1a99f31fad06dd4dd675580b21dd5a9cd8" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator+</name></member>
      <member refid="classamrex_1_1IntVect_1a895e65c4684bcf26f6d944ece959bc2a" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator+</name></member>
      <member refid="classamrex_1_1IntVect_1a31a96457940bed6a372e7d1daae4b80c" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator+</name></member>
      <member refid="classamrex_1_1IntVect_1aee6081912d1313168ab5dc48a46820c6" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1IntVect_1a25e6a76158ad529288828684f2f08326" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1IntVect_1ae4e90ec1bd7b7f5ef69ee2a3a61efc24" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator-</name></member>
      <member refid="classamrex_1_1IntVect_1a44fb1336803f74572c5dc2b17d7976c3" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator-</name></member>
      <member refid="classamrex_1_1IntVect_1a4bca8f73ff093f4cfd07cd515c06ff86" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator-</name></member>
      <member refid="classamrex_1_1IntVect_1abf99b01f250cefa41334b509c1af545a" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1IntVect_1a1d07b509b970f01fd5a8fcfd474d656b" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1IntVect_1abc05a4c85a21bdd1b713d42ec71c6df4" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator/</name></member>
      <member refid="classamrex_1_1IntVect_1a79f42b99126b97865433f66505dbaffe" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator/</name></member>
      <member refid="classamrex_1_1IntVect_1a1394b0469bc14cc4ea9aae247e742d96" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1IntVect_1ae9073b4a1e2baf1dff01a67f7d472131" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1IntVect_1aee6cf807abcb81028ca896c06bff92c4" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator&lt;</name></member>
      <member refid="classamrex_1_1IntVect_1a00108a6b83c8c90366f3aa103fc834cb" prot="private" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator&lt;&lt;</name></member>
      <member refid="classamrex_1_1IntVect_1a01bab1122401254b52ca78f8bba2c43b" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator&lt;=</name></member>
      <member refid="classamrex_1_1IntVect_1ab7c1530f875ef4d020be2040e6c07c5c" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator==</name></member>
      <member refid="classamrex_1_1IntVect_1ae6f6d68fa19fbf49113f1977bcc1b98e" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator==</name></member>
      <member refid="classamrex_1_1IntVect_1a691058b18c080153939ece80fd7ec44a" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator&gt;</name></member>
      <member refid="classamrex_1_1IntVect_1a97463f6f3f6f5a5b2651925c3583b8cb" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator&gt;=</name></member>
      <member refid="classamrex_1_1IntVect_1a1da4bfe27f128e362972e3ed4156e6f1" prot="private" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator&gt;&gt;</name></member>
      <member refid="classamrex_1_1IntVect_1a4bca4c9e58bdc48003b232c3e4684845" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1IntVect_1af90cb33f3f87b373541ef1599c7f3ba4" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1IntVect_1adccd37eeac931837d637545e8eba842e" prot="private" virt="non-virtual"><scope>amrex::IntVect</scope><name>ParallelDescriptor::Mpi_typemap</name></member>
      <member refid="classamrex_1_1IntVect_1a6963bd15532e79e6d777945633d46231" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>reflect</name></member>
      <member refid="classamrex_1_1IntVect_1a82c9a8acc01715ed9d6300440f44e1e0" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>scale</name></member>
      <member refid="classamrex_1_1IntVect_1a941066d4e3372a3aad9669251dbd0fc9" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>setVal</name></member>
      <member refid="classamrex_1_1IntVect_1ae98d68677004232836e3588a9e80c4e4" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>shift</name></member>
      <member refid="classamrex_1_1IntVect_1ac5d0c9910220729fed241a66f60fd9cf" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>shift</name></member>
      <member refid="classamrex_1_1IntVect_1a6a18613c641ed334208f5e3d6b13aaf7" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>sum</name></member>
      <member refid="classamrex_1_1IntVect_1aef6ca971649186448bbd9a575f0a6c41" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheCellVector</name></member>
      <member refid="classamrex_1_1IntVect_1a954f4b14ca735fce3499ea57f0ad7102" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheDimensionVector</name></member>
      <member refid="classamrex_1_1IntVect_1abf8819994800938564c840d711b5c404" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheMaxVector</name></member>
      <member refid="classamrex_1_1IntVect_1afe8d49fa4939449ea2da3ee0ae5003eb" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheMinVector</name></member>
      <member refid="classamrex_1_1IntVect_1a6b19244c9780da6977a4d1f647843d5b" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheNodeVector</name></member>
      <member refid="classamrex_1_1IntVect_1a89b6d1003a1ef2e6c9b79ff2a07241c3" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheUnitVector</name></member>
      <member refid="classamrex_1_1IntVect_1a16fd2692186f9d2a1291058ac5ab0ca0" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheZeroVector</name></member>
      <member refid="classamrex_1_1IntVect_1a93df7e94c6d2d07ea3eb7647500bf751" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>Unit</name></member>
      <member refid="classamrex_1_1IntVect_1aa90d26b430997cad2cfb8c21f6fb2e22" prot="private" virt="non-virtual"><scope>amrex::IntVect</scope><name>vect</name></member>
      <member refid="classamrex_1_1IntVect_1a5b50f516a319513a10154ef402c2717b" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
