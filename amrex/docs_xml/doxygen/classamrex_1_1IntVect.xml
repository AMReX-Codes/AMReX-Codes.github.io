<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1IntVect" kind="class" language="C++" prot="public">
    <compoundname>amrex::IntVect</compoundname>
    <includes refid="AMReX__IntVect_8H" local="no">AMReX_IntVect.H</includes>
    <innerclass refid="classamrex_1_1IntVect_1_1shift__hasher" prot="public">amrex::IntVect::shift_hasher</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1IntVect_1a0da0ad772b267330594cbcc72bb48c5c" prot="public" static="no">
        <type><ref refid="classamrex_1_1IntVect_1_1shift__hasher" kindref="compound">shift_hasher</ref></type>
        <definition>using amrex::IntVect::hasher =  shift_hasher</definition>
        <argsstring></argsstring>
        <name>hasher</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="68" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1IntVect_1a5b50f516a319513a10154ef402c2717b" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>const IntVect amrex::IntVect::Zero</definition>
        <argsstring></argsstring>
        <name>Zero</name>
        <initializer>= <ref refid="classamrex_1_1IntVect_1ac4331f56298c56a0ff01a011c3702c3a" kindref="member">IntVect::TheZeroVector</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> all of whose components are equal to zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="74" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1IntVect_1a93df7e94c6d2d07ea3eb7647500bf751" prot="public" static="yes" mutable="no">
        <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>const IntVect amrex::IntVect::Unit</definition>
        <argsstring></argsstring>
        <name>Unit</name>
        <initializer>= <ref refid="classamrex_1_1IntVect_1a5b5b7435eef0516b2313ad4894d63b1f" kindref="member">IntVect::TheUnitVector</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> all of whose components are equal to one. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="80" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1IntVect_1aa90d26b430997cad2cfb8c21f6fb2e22" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::IntVect::vect[AMREX_SPACEDIM]</definition>
        <argsstring>[AMREX_SPACEDIM]</argsstring>
        <name>vect</name>
        <initializer>= {AMREX_D_DECL(0,0,0)}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="548" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="548" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1IntVect_1adccd37eeac931837d637545e8eba842e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__ccse-mpi_8H_1adf4ce151c5bdb0d3323d314ab596eab9" kindref="member">MPI_Datatype</ref></type>
        <definition>MPI_Datatype ParallelDescriptor::Mpi_typemap</definition>
        <argsstring>()</argsstring>
        <name>ParallelDescriptor::Mpi_typemap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="47" column="57"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1IntVect_1a00108a6b83c8c90366f3aa103fc834cb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const IntVect &amp;iv)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="545" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.cpp" bodystart="16" bodyend="25"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1IntVect_1a1da4bfe27f128e362972e3ed4156e6f1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; operator&gt;&gt;</definition>
        <argsstring>(std::istream &amp;is, IntVect &amp;iv)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="546" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.cpp" bodystart="30" bodyend="69"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1IntVect_1a97dd31b7aed3d5e3c9d2d6fc0e640230" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr amrex::IntVect::IntVect</definition>
        <argsstring>() noexcept</argsstring>
        <name>IntVect</name>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> whose components are all zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="86" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a9f7286d7950a651fc45c7d51f902fee7" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr <ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>constexpr AMREX_GPU_HOST_DEVICE amrex::IntVect::IntVect</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>IntVect</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> given the specific values for its coordinates. AMREX_D_DECL is a macro that sets the constructor to take AMREX_SPACEDIM arguments. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="99" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ae9684c0f49b86a16a696f99521290fe9" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::IntVect::IntVect</definition>
        <argsstring>(const int *a) noexcept</argsstring>
        <name>IntVect</name>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> setting the coordinates to the corresponding values in the integer array a. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="106" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a964cade2a31b2c82990dcb7726dd5d1d" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::IntVect::IntVect</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;a) noexcept</argsstring>
        <name>IntVect</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> from an <ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref>. It is an error if the <ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref> doesn&apos;t have the same dimension as this <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="113" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1addf6e967457cdc48def7f89cdd6e3423" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::IntVect::IntVect</definition>
        <argsstring>(const Array&lt; int, AMREX_SPACEDIM &gt; &amp;a) noexcept</argsstring>
        <name>IntVect</name>
        <param>
          <type>const <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Construct an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> from an Array&lt;int,AMREX_SPACEDIM&gt;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="120" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="120" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a4385e4ff81935d688556f54cbf9a7112" prot="public" static="no" constexpr="yes" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr amrex::IntVect::IntVect</definition>
        <argsstring>(Dim3 const &amp;a) noexcept</argsstring>
        <name>IntVect</name>
        <param>
          <type><ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref> const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="123" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="123" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ab58021983f7ea091fa42717851af0a3a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::IntVect::dim3</definition>
        <argsstring>() const noexcept</argsstring>
        <name>dim3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="129" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="129" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a6a18613c641ed334208f5e3d6b13aaf7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::IntVect::sum</definition>
        <argsstring>() const noexcept</argsstring>
        <name>sum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sum of all components of this <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="155" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="155" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1afc4d5734d3a85d47e406637bfdc4573d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::IntVect::max</definition>
        <argsstring>() const noexcept</argsstring>
        <name>max</name>
        <briefdescription>
<para>maximum (no absolute values) value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="163" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="163" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ad903f958ca90c11bcf4e67941cb3e66a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::IntVect::min</definition>
        <argsstring>() const noexcept</argsstring>
        <name>min</name>
        <briefdescription>
<para>minimum (no absolute values) value </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="177" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="177" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a8e69f16160adbdf5313e5554fae1f601" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::IntVect::maxDir</definition>
        <argsstring>(bool a_doAbsValue) const noexcept</argsstring>
        <name>maxDir</name>
        <param>
          <type>bool</type>
          <declname>a_doAbsValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="191" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="593" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a4bca4c9e58bdc48003b232c3e4684845" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int&amp; amrex::IntVect::operator[]</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns a reference to the i&apos;th coordinate of the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="195" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="195" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1af90cb33f3f87b373541ef1599c7f3ba4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const int&amp; amrex::IntVect::operator[]</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>operator[]</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Returns the i&apos;th coordinate of the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="199" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="199" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a675b7d98fd18ef18e4b2e9526c022c79" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int* amrex::IntVect::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns a pointer to the first element of the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="203" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="203" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1adb92c5e97096607ae53cc53c45732185" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const int* amrex::IntVect::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns a pointer to the first element of the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="207" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="207" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a989b411c1c9510dc36753f0be697b026" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int* amrex::IntVect::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns a pointer to the (last+1) element of the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="211" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="211" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a766c4e60e3db2b57c2f707e9ffba6a46" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const int* amrex::IntVect::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns a pointer to the (last+1) element of the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="215" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="215" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a941066d4e3372a3aad9669251dbd0fc9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::setVal</definition>
        <argsstring>(int i, int val) noexcept</argsstring>
        <name>setVal</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set i&apos;th coordinate of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> to val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="219" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a7c75e50dcbb617d2808340334c67fc5c" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const int* amrex::IntVect::getVect</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>getVect</name>
        <briefdescription>
<para>Returns a const pointer to an array of coordinates of the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>. Useful for arguments to FORTRAN calls. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="229" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="229" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a8766cb216c129f49021ebc628d0a445a" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int* amrex::IntVect::getVect</definition>
        <argsstring>() &amp;noexcept</argsstring>
        <name>getVect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="231" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="231" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a45b033a1b6e8f6e2049cacb3e729cfbd" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
        <definition>AMREX_GPU_HOST_DEVICE int* amrex::IntVect::getVect</definition>
        <argsstring>() &amp;&amp;=delete</argsstring>
        <name>getVect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="233" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ab7c1530f875ef4d020be2040e6c07c5c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::operator==</definition>
        <argsstring>(int val) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Returns true if all components are equal to the argument val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="237" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="237" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a5282a49e7747f90f41d61f638a197c0a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::operator!=</definition>
        <argsstring>(int val) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Returns true if any component is not equal to the argument val. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="244" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="244" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ae6f6d68fa19fbf49113f1977bcc1b98e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::operator==</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is equivalent to rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="251" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="251" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1af456adb0c463a65e2fb5485ccbcbfca2" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::operator!=</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is different from rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="257" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="257" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aee6cf807abcb81028ca896c06bff92c4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::operator&lt;</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Return true if this is lexicographically less than rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="263" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="263" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a01bab1122401254b52ca78f8bba2c43b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::operator&lt;=</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Return true if this is lexicographically less than or equal to rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="276" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a691058b18c080153939ece80fd7ec44a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::operator&gt;</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Return true if this is lexicographically greater than rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="282" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a97463f6f3f6f5a5b2651925c3583b8cb" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::operator&gt;=</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Return true if this is lexicographically greater than or equal to rhs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="288" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aea27d4db10ac19c7c57b34cd72f362de" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::allLT</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>allLT</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is less than argument for all components. NOTE: This is NOT a strict weak ordering usable by STL sorting algorithms. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="297" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a9bfc5b4da499c3d53789bd0a3ceb2eda" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::allLE</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>allLE</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is less than or equal to argument for all components. NOTE: This is NOT a strict weak ordering usable by STL sorting algorithms. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="306" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aa2afc8258c47e63ae123d7f2edf12589" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::allGT</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>allGT</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is greater than argument for all components. NOTE: This is NOT a strict weak ordering usable by STL sorting algorithms. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="315" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="315" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ae3c7940850b880ae2d83dab12e73434a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::IntVect::allGE</definition>
        <argsstring>(const IntVect &amp;rhs) const noexcept</argsstring>
        <name>allGE</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Returns true if this is greater than or equal to argument for all components. NOTE: This is NOT a strict weak ordering usable by STL sorting algorithms. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="324" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="324" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aeb2a4cced370302b5c53543aa4116d1f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::IntVect::operator+</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator+</name>
        <briefdescription>
<para>Unary plus <ndash/> for completeness. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="330" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="330" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ae4e90ec1bd7b7f5ef69ee2a3a61efc24" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::IntVect::operator-</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>Unary <ref refid="structamrex_1_1Minus" kindref="compound">Minus</ref> <ndash/> negates all components. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="333" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="333" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aee6081912d1313168ab5dc48a46820c6" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::operator+=</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by addition of a scalar to each component. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="336" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a25e6a76158ad529288828684f2f08326" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::operator+=</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by component-wise addition with argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="342" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="342" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a61cb88fb0f17954da04f1b143630cc7b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::operator*=</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by multiplication of a scalar to each component. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="348" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="348" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ad4dcea7b65c2ffbc69054642188cc6d2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::operator*=</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by component-wise multiplication with argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="354" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="354" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a1394b0469bc14cc4ea9aae247e742d96" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::operator/=</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by division by a scalar to each component. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="360" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="360" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ae9073b4a1e2baf1dff01a67f7d472131" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::operator/=</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by component-wise division with argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="366" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1abf99b01f250cefa41334b509c1af545a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::operator-=</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by subtraction of a scalar to each component. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="372" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="372" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a1d07b509b970f01fd5a8fcfd474d656b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::operator-=</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by component-wise subtraction with argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="378" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="378" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a895e65c4684bcf26f6d944ece959bc2a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::IntVect::operator+</definition>
        <argsstring>(const IntVect &amp;p) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns component-wise sum of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> and argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="384" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="384" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a31a96457940bed6a372e7d1daae4b80c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::IntVect::operator+</definition>
        <argsstring>(int s) const noexcept</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Return an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> that is this <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> + s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="390" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="390" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a44fb1336803f74572c5dc2b17d7976c3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::IntVect::operator-</definition>
        <argsstring>(const IntVect &amp;p) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns component-wise difference of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> and argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="396" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="396" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a4bca8f73ff093f4cfd07cd515c06ff86" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::IntVect::operator-</definition>
        <argsstring>(int s) const noexcept</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Return an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> that is this <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> - s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="402" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="402" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a866f2ad2b6b43a512a959c7fc7e7888d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::IntVect::operator*</definition>
        <argsstring>(const IntVect &amp;p) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns component-wise product of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> and argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="408" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="408" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a20502531b4272c7267bf17a04b2af638" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::IntVect::operator*</definition>
        <argsstring>(int s) const noexcept</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns component-wise product of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> and s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="414" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="414" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1abc05a4c85a21bdd1b713d42ec71c6df4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::IntVect::operator/</definition>
        <argsstring>(const IntVect &amp;p) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Returns component-wise division of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="420" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="420" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a79f42b99126b97865433f66505dbaffe" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect amrex::IntVect::operator/</definition>
        <argsstring>(int s) const noexcept</argsstring>
        <name>operator/</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns component-wise division of <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="426" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="426" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aa105b435548bdacb7a82cb174610a4f9" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::min</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>min</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by taking component-wise min with argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="432" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="432" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1afb31668e3b7bc7ad18ddf7453fe00557" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::max</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>max</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modifies <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by taking component-wise max with argument. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="441" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="441" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a82c9a8acc01715ed9d6300440f44e1e0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::scale</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>scale</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by multiplying each coordinate by s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="450" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="450" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a6963bd15532e79e6d777945633d46231" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::reflect</definition>
        <argsstring>(int ref_ix, int idir) noexcept</argsstring>
        <name>reflect</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ref_ix</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>idir</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by reflecting it in the plane defined by the index ref_ix and with normal in the direction of idir. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="456" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="456" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ae98d68677004232836e3588a9e80c4e4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::shift</definition>
        <argsstring>(int coord, int s) noexcept</argsstring>
        <name>shift</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by adding s to given coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="464" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="464" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ac5d0c9910220729fed241a66f60fd9cf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::shift</definition>
        <argsstring>(const IntVect &amp;iv) noexcept</argsstring>
        <name>shift</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>iv</declname>
        </param>
        <briefdescription>
<para>Equivalent to shift(0,iv[0]).shift(1,iv[1]) ... </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="470" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="470" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a5db897bb853d9a69ee461f6a7cba1bee" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect&amp; amrex::IntVect::diagShift</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>diagShift</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by adding s to each coordinate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="473" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="473" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a7586248a0d118ccfd5c7f0c500954adc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect &amp; amrex::IntVect::coarsen</definition>
        <argsstring>(const IntVect &amp;p) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by component-wise integer projection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="479" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="581" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a2dfedf2b48d43dd4763777086ae9d7e0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVect &amp; amrex::IntVect::coarsen</definition>
        <argsstring>(int p) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Modify <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> by component-wise integer projection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="482" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="554" bodyend="576"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1IntVect_1ac4331f56298c56a0ff01a011c3702c3a" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE IntVect amrex::IntVect::TheZeroVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheZeroVector</name>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> object, all of whose AMREX_SPACEDIM arguments are set to zero (0). Figuratively, it is the zero vector in AMREX_SPACEDIM-dimensional space. It is provided as a convenient way to specify the zero vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="491" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="491" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a5b5b7435eef0516b2313ad4894d63b1f" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE IntVect amrex::IntVect::TheUnitVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheUnitVector</name>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> object, all of whose AMREX_SPACEDIM arguments are set to one (1). Figuratively, it is the unit vector in AMREX_SPACEDIM-dimensional space. It is provided as a convenient way to specify the unit vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="501" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="501" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1af53e6b9cce7d60edaaf9a8bf721f0eaa" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE IntVect amrex::IntVect::TheDimensionVector</definition>
        <argsstring>(int d) noexcept</argsstring>
        <name>TheDimensionVector</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> object, all of whose AMREX_SPACEDIM arguments are set to zero except that the d-direction is set to one. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="510" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="510" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a402d1cdd94a75a72ff8e5d490b93f659" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE IntVect amrex::IntVect::TheNodeVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheNodeVector</name>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> object, all of whose AMREX_SPACEDIM arguments are set to <ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafcccea410f04417a9413c9d3d862e84300eb05" kindref="member">IndexType::NODE</ref>. It is provided as a convenience to our users when defining Boxes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="521" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="521" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1a6b3ddb9f833aa31888b89376bc08af8c" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE IntVect amrex::IntVect::TheCellVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheCellVector</name>
        <briefdescription>
<para>This static member function returns a reference to a constant <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> object, all of whose AMREX_SPACEDIM arguments are set to <ref refid="classamrex_1_1IndexType_1a4bbe4fdc07aa019c3a4a6839cdafcccea287ace89f7ffd266daab1798b3d48aa1" kindref="member">IndexType::CELL</ref>. It is provided as a convenience to our users when defining Boxes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="530" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="530" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1aca63f84a8e0d500debe9d4fac447f1e2" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE IntVect amrex::IntVect::TheMaxVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheMaxVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="535" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="535" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1IntVect_1ac01dd3bec82873c66f481e30f2eabcd1" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE IntVect amrex::IntVect::TheMinVector</definition>
        <argsstring>() noexcept</argsstring>
        <name>TheMinVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="539" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="539" bodyend="541"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>An Integer <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref> in SPACEDIM-Dimensional Space</para>
<para>The class <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> is an implementation of an integer vector in a SPACEDIM-dimensional space. It represents a point in a discrete space. <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> values are accessed using the operator[] function, as for a normal C++ array. In addition, the basic arithmetic operators have been overloaded to implement scaling and translation operations. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="1" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" line="45" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntVect.H" bodystart="46" bodyend="549"/>
    <listofallmembers>
      <member refid="classamrex_1_1IntVect_1ae3c7940850b880ae2d83dab12e73434a" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>allGE</name></member>
      <member refid="classamrex_1_1IntVect_1aa2afc8258c47e63ae123d7f2edf12589" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>allGT</name></member>
      <member refid="classamrex_1_1IntVect_1a9bfc5b4da499c3d53789bd0a3ceb2eda" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>allLE</name></member>
      <member refid="classamrex_1_1IntVect_1aea27d4db10ac19c7c57b34cd72f362de" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>allLT</name></member>
      <member refid="classamrex_1_1IntVect_1a675b7d98fd18ef18e4b2e9526c022c79" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>begin</name></member>
      <member refid="classamrex_1_1IntVect_1adb92c5e97096607ae53cc53c45732185" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>begin</name></member>
      <member refid="classamrex_1_1IntVect_1a7586248a0d118ccfd5c7f0c500954adc" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1IntVect_1a2dfedf2b48d43dd4763777086ae9d7e0" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1IntVect_1a5db897bb853d9a69ee461f6a7cba1bee" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>diagShift</name></member>
      <member refid="classamrex_1_1IntVect_1ab58021983f7ea091fa42717851af0a3a" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>dim3</name></member>
      <member refid="classamrex_1_1IntVect_1a989b411c1c9510dc36753f0be697b026" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>end</name></member>
      <member refid="classamrex_1_1IntVect_1a766c4e60e3db2b57c2f707e9ffba6a46" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>end</name></member>
      <member refid="classamrex_1_1IntVect_1a7c75e50dcbb617d2808340334c67fc5c" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>getVect</name></member>
      <member refid="classamrex_1_1IntVect_1a8766cb216c129f49021ebc628d0a445a" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>getVect</name></member>
      <member refid="classamrex_1_1IntVect_1a45b033a1b6e8f6e2049cacb3e729cfbd" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>getVect</name></member>
      <member refid="classamrex_1_1IntVect_1a0da0ad772b267330594cbcc72bb48c5c" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>hasher</name></member>
      <member refid="classamrex_1_1IntVect_1a97dd31b7aed3d5e3c9d2d6fc0e640230" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>IntVect</name></member>
      <member refid="classamrex_1_1IntVect_1a9f7286d7950a651fc45c7d51f902fee7" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>IntVect</name></member>
      <member refid="classamrex_1_1IntVect_1ae9684c0f49b86a16a696f99521290fe9" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>IntVect</name></member>
      <member refid="classamrex_1_1IntVect_1a964cade2a31b2c82990dcb7726dd5d1d" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>IntVect</name></member>
      <member refid="classamrex_1_1IntVect_1addf6e967457cdc48def7f89cdd6e3423" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>IntVect</name></member>
      <member refid="classamrex_1_1IntVect_1a4385e4ff81935d688556f54cbf9a7112" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>IntVect</name></member>
      <member refid="classamrex_1_1IntVect_1afc4d5734d3a85d47e406637bfdc4573d" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>max</name></member>
      <member refid="classamrex_1_1IntVect_1afb31668e3b7bc7ad18ddf7453fe00557" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>max</name></member>
      <member refid="classamrex_1_1IntVect_1a8e69f16160adbdf5313e5554fae1f601" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>maxDir</name></member>
      <member refid="classamrex_1_1IntVect_1ad903f958ca90c11bcf4e67941cb3e66a" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>min</name></member>
      <member refid="classamrex_1_1IntVect_1aa105b435548bdacb7a82cb174610a4f9" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>min</name></member>
      <member refid="classamrex_1_1IntVect_1a5282a49e7747f90f41d61f638a197c0a" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1IntVect_1af456adb0c463a65e2fb5485ccbcbfca2" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1IntVect_1a866f2ad2b6b43a512a959c7fc7e7888d" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator*</name></member>
      <member refid="classamrex_1_1IntVect_1a20502531b4272c7267bf17a04b2af638" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator*</name></member>
      <member refid="classamrex_1_1IntVect_1a61cb88fb0f17954da04f1b143630cc7b" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1IntVect_1ad4dcea7b65c2ffbc69054642188cc6d2" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1IntVect_1aeb2a4cced370302b5c53543aa4116d1f" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator+</name></member>
      <member refid="classamrex_1_1IntVect_1a895e65c4684bcf26f6d944ece959bc2a" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator+</name></member>
      <member refid="classamrex_1_1IntVect_1a31a96457940bed6a372e7d1daae4b80c" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator+</name></member>
      <member refid="classamrex_1_1IntVect_1aee6081912d1313168ab5dc48a46820c6" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1IntVect_1a25e6a76158ad529288828684f2f08326" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1IntVect_1ae4e90ec1bd7b7f5ef69ee2a3a61efc24" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator-</name></member>
      <member refid="classamrex_1_1IntVect_1a44fb1336803f74572c5dc2b17d7976c3" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator-</name></member>
      <member refid="classamrex_1_1IntVect_1a4bca8f73ff093f4cfd07cd515c06ff86" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator-</name></member>
      <member refid="classamrex_1_1IntVect_1abf99b01f250cefa41334b509c1af545a" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1IntVect_1a1d07b509b970f01fd5a8fcfd474d656b" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1IntVect_1abc05a4c85a21bdd1b713d42ec71c6df4" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator/</name></member>
      <member refid="classamrex_1_1IntVect_1a79f42b99126b97865433f66505dbaffe" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator/</name></member>
      <member refid="classamrex_1_1IntVect_1a1394b0469bc14cc4ea9aae247e742d96" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1IntVect_1ae9073b4a1e2baf1dff01a67f7d472131" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1IntVect_1aee6cf807abcb81028ca896c06bff92c4" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator&lt;</name></member>
      <member refid="classamrex_1_1IntVect_1a00108a6b83c8c90366f3aa103fc834cb" prot="private" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator&lt;&lt;</name></member>
      <member refid="classamrex_1_1IntVect_1a01bab1122401254b52ca78f8bba2c43b" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator&lt;=</name></member>
      <member refid="classamrex_1_1IntVect_1ab7c1530f875ef4d020be2040e6c07c5c" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator==</name></member>
      <member refid="classamrex_1_1IntVect_1ae6f6d68fa19fbf49113f1977bcc1b98e" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator==</name></member>
      <member refid="classamrex_1_1IntVect_1a691058b18c080153939ece80fd7ec44a" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator&gt;</name></member>
      <member refid="classamrex_1_1IntVect_1a97463f6f3f6f5a5b2651925c3583b8cb" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator&gt;=</name></member>
      <member refid="classamrex_1_1IntVect_1a1da4bfe27f128e362972e3ed4156e6f1" prot="private" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator&gt;&gt;</name></member>
      <member refid="classamrex_1_1IntVect_1a4bca4c9e58bdc48003b232c3e4684845" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1IntVect_1af90cb33f3f87b373541ef1599c7f3ba4" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1IntVect_1adccd37eeac931837d637545e8eba842e" prot="private" virt="non-virtual"><scope>amrex::IntVect</scope><name>ParallelDescriptor::Mpi_typemap</name></member>
      <member refid="classamrex_1_1IntVect_1a6963bd15532e79e6d777945633d46231" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>reflect</name></member>
      <member refid="classamrex_1_1IntVect_1a82c9a8acc01715ed9d6300440f44e1e0" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>scale</name></member>
      <member refid="classamrex_1_1IntVect_1a941066d4e3372a3aad9669251dbd0fc9" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>setVal</name></member>
      <member refid="classamrex_1_1IntVect_1ae98d68677004232836e3588a9e80c4e4" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>shift</name></member>
      <member refid="classamrex_1_1IntVect_1ac5d0c9910220729fed241a66f60fd9cf" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>shift</name></member>
      <member refid="classamrex_1_1IntVect_1a6a18613c641ed334208f5e3d6b13aaf7" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>sum</name></member>
      <member refid="classamrex_1_1IntVect_1a6b3ddb9f833aa31888b89376bc08af8c" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheCellVector</name></member>
      <member refid="classamrex_1_1IntVect_1af53e6b9cce7d60edaaf9a8bf721f0eaa" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheDimensionVector</name></member>
      <member refid="classamrex_1_1IntVect_1aca63f84a8e0d500debe9d4fac447f1e2" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheMaxVector</name></member>
      <member refid="classamrex_1_1IntVect_1ac01dd3bec82873c66f481e30f2eabcd1" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheMinVector</name></member>
      <member refid="classamrex_1_1IntVect_1a402d1cdd94a75a72ff8e5d490b93f659" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheNodeVector</name></member>
      <member refid="classamrex_1_1IntVect_1a5b5b7435eef0516b2313ad4894d63b1f" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheUnitVector</name></member>
      <member refid="classamrex_1_1IntVect_1ac4331f56298c56a0ff01a011c3702c3a" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>TheZeroVector</name></member>
      <member refid="classamrex_1_1IntVect_1a93df7e94c6d2d07ea3eb7647500bf751" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>Unit</name></member>
      <member refid="classamrex_1_1IntVect_1aa90d26b430997cad2cfb8c21f6fb2e22" prot="private" virt="non-virtual"><scope>amrex::IntVect</scope><name>vect</name></member>
      <member refid="classamrex_1_1IntVect_1a5b50f516a319513a10154ef402c2717b" prot="public" virt="non-virtual"><scope>amrex::IntVect</scope><name>Zero</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
