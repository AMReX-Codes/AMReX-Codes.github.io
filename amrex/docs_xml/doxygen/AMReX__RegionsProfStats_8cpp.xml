<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="AMReX__RegionsProfStats_8cpp" kind="file" language="C++">
    <compoundname>AMReX_RegionsProfStats.cpp</compoundname>
    <includes local="no">cstdio</includes>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">map</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">vector</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">limits</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">set</includes>
    <includes local="no">sys/time.h</includes>
    <includes local="no">unistd.h</includes>
    <includes refid="AMReX__RegionsProfStats_8H" local="no">AMReX_RegionsProfStats.H</includes>
    <includes refid="AMReX__ParallelDescriptor_8H" local="no">AMReX_ParallelDescriptor.H</includes>
    <includes refid="AMReX__Utility_8H" local="no">AMReX_Utility.H</includes>
    <includes refid="AMReX__BLProfUtilities_8H" local="no">AMReX_BLProfUtilities.H</includes>
    <incdepgraph>
      <node id="49460">
        <label>AMReX_ParallelContext.H</label>
        <link refid="AMReX__ParallelContext_8H"/>
        <childnode refid="49423" relation="include">
        </childnode>
        <childnode refid="49397" relation="include">
        </childnode>
        <childnode refid="49432" relation="include">
        </childnode>
        <childnode refid="49420" relation="include">
        </childnode>
      </node>
      <node id="49429">
        <label>functional</label>
      </node>
      <node id="49405">
        <label>iomanip</label>
      </node>
      <node id="49457">
        <label>AMReX_BoxArray.H</label>
        <link refid="AMReX__BoxArray_8H"/>
        <childnode refid="49396" relation="include">
        </childnode>
        <childnode refid="49447" relation="include">
        </childnode>
        <childnode refid="49400" relation="include">
        </childnode>
        <childnode refid="49401" relation="include">
        </childnode>
        <childnode refid="49437" relation="include">
        </childnode>
        <childnode refid="49444" relation="include">
        </childnode>
        <childnode refid="49421" relation="include">
        </childnode>
        <childnode refid="49432" relation="include">
        </childnode>
      </node>
      <node id="49451">
        <label>AMReX_BoxIterator.H</label>
        <link refid="AMReX__BoxIterator_8H"/>
        <childnode refid="49417" relation="include">
        </childnode>
        <childnode refid="49431" relation="include">
        </childnode>
        <childnode refid="49434" relation="include">
        </childnode>
        <childnode refid="49412" relation="include">
        </childnode>
        <childnode refid="49414" relation="include">
        </childnode>
        <childnode refid="49415" relation="include">
        </childnode>
      </node>
      <node id="49404">
        <label>limits</label>
      </node>
      <node id="49411">
        <label>AMReX_BLProfiler.H</label>
        <link refid="AMReX__BLProfiler_8H"/>
        <childnode refid="49398" relation="include">
        </childnode>
        <childnode refid="49412" relation="include">
        </childnode>
      </node>
      <node id="49484">
        <label>AMReX_CudaContainers.H</label>
        <link refid="AMReX__CudaContainers_8H"/>
        <childnode refid="49467" relation="include">
        </childnode>
        <childnode refid="49432" relation="include">
        </childnode>
        <childnode refid="49482" relation="include">
        </childnode>
      </node>
      <node id="49434">
        <label>AMReX_Box.H</label>
        <link refid="AMReX__Box_8H"/>
        <childnode refid="49416" relation="include">
        </childnode>
        <childnode refid="49435" relation="include">
        </childnode>
        <childnode refid="49436" relation="include">
        </childnode>
        <childnode refid="49420" relation="include">
        </childnode>
        <childnode refid="49415" relation="include">
        </childnode>
        <childnode refid="49437" relation="include">
        </childnode>
        <childnode refid="49438" relation="include">
        </childnode>
        <childnode refid="49414" relation="include">
        </childnode>
        <childnode refid="49421" relation="include">
        </childnode>
        <childnode refid="49439" relation="include">
        </childnode>
        <childnode refid="49432" relation="include">
        </childnode>
        <childnode refid="49426" relation="include">
        </childnode>
        <childnode refid="49430" relation="include">
        </childnode>
      </node>
      <node id="49476">
        <label>AMReX_GpuUtility.H</label>
        <link refid="AMReX__GpuUtility_8H"/>
        <childnode refid="49426" relation="include">
        </childnode>
        <childnode refid="49430" relation="include">
        </childnode>
        <childnode refid="49473" relation="include">
        </childnode>
        <childnode refid="49413" relation="include">
        </childnode>
        <childnode refid="49412" relation="include">
        </childnode>
        <childnode refid="49421" relation="include">
        </childnode>
        <childnode refid="49439" relation="include">
        </childnode>
        <childnode refid="49396" relation="include">
        </childnode>
        <childnode refid="49418" relation="include">
        </childnode>
      </node>
      <node id="49488">
        <label>cstdint</label>
      </node>
      <node id="49497">
        <label>AMReX_FabArrayBase.H</label>
        <link refid="AMReX__FabArrayBase_8H"/>
        <childnode refid="49398" relation="include">
        </childnode>
        <childnode refid="49457" relation="include">
        </childnode>
        <childnode refid="49458" relation="include">
        </childnode>
        <childnode refid="49459" relation="include">
        </childnode>
        <childnode refid="49498" relation="include">
        </childnode>
        <childnode refid="49496" relation="include">
        </childnode>
        <childnode refid="49483" relation="include">
        </childnode>
        <childnode refid="49446" relation="include">
        </childnode>
        <childnode refid="49468" relation="include">
        </childnode>
      </node>
      <node id="49458">
        <label>AMReX_DistributionMapping.H</label>
        <link refid="AMReX__DistributionMapping_8H"/>
        <childnode refid="49400" relation="include">
        </childnode>
        <childnode refid="49404" relation="include">
        </childnode>
        <childnode refid="49423" relation="include">
        </childnode>
        <childnode refid="49447" relation="include">
        </childnode>
        <childnode refid="49396" relation="include">
        </childnode>
        <childnode refid="49425" relation="include">
        </childnode>
        <childnode refid="49421" relation="include">
        </childnode>
        <childnode refid="49432" relation="include">
        </childnode>
        <childnode refid="49434" relation="include">
        </childnode>
        <childnode refid="49412" relation="include">
        </childnode>
        <childnode refid="49459" relation="include">
        </childnode>
      </node>
      <node id="49415">
        <label>AMReX_IntVect.H</label>
        <link refid="AMReX__IntVect_8H"/>
        <childnode refid="49416" relation="include">
        </childnode>
        <childnode refid="49417" relation="include">
        </childnode>
        <childnode refid="49418" relation="include">
        </childnode>
        <childnode refid="49404" relation="include">
        </childnode>
        <childnode refid="49419" relation="include">
        </childnode>
        <childnode refid="49403" relation="include">
        </childnode>
        <childnode refid="49420" relation="include">
        </childnode>
        <childnode refid="49414" relation="include">
        </childnode>
        <childnode refid="49421" relation="include">
        </childnode>
        <childnode refid="49432" relation="include">
        </childnode>
        <childnode refid="49433" relation="include">
        </childnode>
        <childnode refid="49431" relation="include">
        </childnode>
        <childnode refid="49413" relation="include">
        </childnode>
        <childnode refid="49426" relation="include">
        </childnode>
      </node>
      <node id="49503">
        <label>stdlib.h</label>
      </node>
      <node id="49425">
        <label>AMReX.H</label>
        <link refid="AMReX_8H"/>
        <childnode refid="49426" relation="include">
        </childnode>
        <childnode refid="49420" relation="include">
        </childnode>
        <childnode refid="49427" relation="include">
        </childnode>
        <childnode refid="49396" relation="include">
        </childnode>
        <childnode refid="49429" relation="include">
        </childnode>
        <childnode refid="49398" relation="include">
        </childnode>
        <childnode refid="49395" relation="include">
        </childnode>
        <childnode refid="49402" relation="include">
        </childnode>
        <childnode refid="49423" relation="include">
        </childnode>
      </node>
      <node id="49452">
        <label>AMReX_MakeType.H</label>
        <link refid="AMReX__MakeType_8H"/>
      </node>
      <node id="49475">
        <label>AMReX_GpuLaunchFunctsC.H</label>
        <link refid="AMReX__GpuLaunchFunctsC_8H"/>
      </node>
      <node id="49470">
        <label>AMReX_GpuError.H</label>
        <link refid="AMReX__GpuError_8H"/>
        <childnode refid="49453" relation="include">
        </childnode>
        <childnode refid="49398" relation="include">
        </childnode>
      </node>
      <node id="49432">
        <label>AMReX_Vector.H</label>
        <link refid="AMReX__Vector_8H"/>
        <childnode refid="49403" relation="include">
        </childnode>
        <childnode refid="49402" relation="include">
        </childnode>
        <childnode refid="49423" relation="include">
        </childnode>
        <childnode refid="49431" relation="include">
        </childnode>
      </node>
      <node id="49483">
        <label>AMReX_Print.H</label>
        <link refid="AMReX__Print_8H"/>
        <childnode refid="49424" relation="include">
        </childnode>
        <childnode refid="49397" relation="include">
        </childnode>
        <childnode refid="49405" relation="include">
        </childnode>
        <childnode refid="49425" relation="include">
        </childnode>
        <childnode refid="49460" relation="include">
        </childnode>
        <childnode refid="49459" relation="include">
        </childnode>
      </node>
      <node id="49418">
        <label>cmath</label>
      </node>
      <node id="49495">
        <label>cassert</label>
      </node>
      <node id="49428">
        <label>stdexcept</label>
      </node>
      <node id="49409">
        <label>AMReX_RegionsProfStats.H</label>
        <link refid="AMReX__RegionsProfStats_8H"/>
        <childnode refid="49410" relation="include">
        </childnode>
        <childnode refid="49411" relation="include">
        </childnode>
        <childnode refid="49412" relation="include">
        </childnode>
        <childnode refid="49414" relation="include">
        </childnode>
        <childnode refid="49421" relation="include">
        </childnode>
        <childnode refid="49432" relation="include">
        </childnode>
        <childnode refid="49415" relation="include">
        </childnode>
        <childnode refid="49434" relation="include">
        </childnode>
        <childnode refid="49440" relation="include">
        </childnode>
        <childnode refid="49395" relation="include">
        </childnode>
        <childnode refid="49396" relation="include">
        </childnode>
        <childnode refid="49397" relation="include">
        </childnode>
        <childnode refid="49398" relation="include">
        </childnode>
        <childnode refid="49400" relation="include">
        </childnode>
        <childnode refid="49401" relation="include">
        </childnode>
        <childnode refid="49402" relation="include">
        </childnode>
        <childnode refid="49462" relation="include">
        </childnode>
        <childnode refid="49424" relation="include">
        </childnode>
        <childnode refid="49503" relation="include">
        </childnode>
      </node>
      <node id="49467">
        <label>numeric</label>
      </node>
      <node id="49444">
        <label>AMReX_BoxList.H</label>
        <link refid="AMReX__BoxList_8H"/>
        <childnode refid="49416" relation="include">
        </childnode>
        <childnode refid="49415" relation="include">
        </childnode>
        <childnode refid="49437" relation="include">
        </childnode>
        <childnode refid="49434" relation="include">
        </childnode>
        <childnode refid="49421" relation="include">
        </childnode>
        <childnode refid="49432" relation="include">
        </childnode>
      </node>
      <node id="49441">
        <label>AMReX_BaseFab.H</label>
        <link refid="AMReX__BaseFab_8H"/>
        <childnode refid="49418" relation="include">
        </childnode>
        <childnode refid="49417" relation="include">
        </childnode>
        <childnode refid="49403" relation="include">
        </childnode>
        <childnode refid="49404" relation="include">
        </childnode>
        <childnode refid="49419" relation="include">
        </childnode>
        <childnode refid="49422" relation="include">
        </childnode>
        <childnode refid="49442" relation="include">
        </childnode>
        <childnode refid="49423" relation="include">
        </childnode>
        <childnode refid="49413" relation="include">
        </childnode>
        <childnode refid="49431" relation="include">
        </childnode>
        <childnode refid="49421" relation="include">
        </childnode>
        <childnode refid="49434" relation="include">
        </childnode>
        <childnode refid="49443" relation="include">
        </childnode>
        <childnode refid="49444" relation="include">
        </childnode>
        <childnode refid="49445" relation="include">
        </childnode>
        <childnode refid="49448" relation="include">
        </childnode>
        <childnode refid="49412" relation="include">
        </childnode>
        <childnode refid="49411" relation="include">
        </childnode>
        <childnode refid="49451" relation="include">
        </childnode>
        <childnode refid="49452" relation="include">
        </childnode>
        <childnode refid="49453" relation="include">
        </childnode>
        <childnode refid="49468" relation="include">
        </childnode>
      </node>
      <node id="49398">
        <label>string</label>
      </node>
      <node id="49482">
        <label>AMReX_CudaAllocators.H</label>
        <link refid="AMReX__CudaAllocators_8H"/>
        <childnode refid="49400" relation="include">
        </childnode>
        <childnode refid="49423" relation="include">
        </childnode>
        <childnode refid="49404" relation="include">
        </childnode>
        <childnode refid="49483" relation="include">
        </childnode>
        <childnode refid="49446" relation="include">
        </childnode>
        <childnode refid="49473" relation="include">
        </childnode>
      </node>
      <node id="49443">
        <label>AMReX_Loop.H</label>
        <link refid="AMReX__Loop_8H"/>
        <childnode refid="49434" relation="include">
        </childnode>
      </node>
      <node id="49400">
        <label>map</label>
      </node>
      <node id="49487">
        <label>AMReX_MultiFab.H</label>
        <link refid="AMReX__MultiFab_8H"/>
        <childnode refid="49488" relation="include">
        </childnode>
        <childnode refid="49431" relation="include">
        </childnode>
        <childnode refid="49440" relation="include">
        </childnode>
        <childnode refid="49489" relation="include">
        </childnode>
        <childnode refid="49502" relation="include">
        </childnode>
        <childnode refid="49496" relation="include">
        </childnode>
      </node>
      <node id="49450">
        <label>unordered_set</label>
      </node>
      <node id="49501">
        <label>AMReX_FabArrayCommI.H</label>
        <link refid="AMReX__FabArrayCommI_8H"/>
      </node>
      <node id="49500">
        <label>AMReX_LayoutData.H</label>
        <link refid="AMReX__LayoutData_8H"/>
        <childnode refid="49497" relation="include">
        </childnode>
        <childnode refid="49499" relation="include">
        </childnode>
      </node>
      <node id="49397">
        <label>fstream</label>
      </node>
      <node id="49491">
        <label>AMReX_Geometry.H</label>
        <link refid="AMReX__Geometry_8H"/>
        <childnode refid="49416" relation="include">
        </childnode>
        <childnode refid="49400" relation="include">
        </childnode>
        <childnode refid="49421" relation="include">
        </childnode>
        <childnode refid="49492" relation="include">
        </childnode>
        <childnode refid="49459" relation="include">
        </childnode>
        <childnode refid="49493" relation="include">
        </childnode>
        <childnode refid="49496" relation="include">
        </childnode>
      </node>
      <node id="49499">
        <label>AMReX_MFIter.H</label>
        <link refid="AMReX__MFIter_8H"/>
        <childnode refid="49423" relation="include">
        </childnode>
        <childnode refid="49446" relation="include">
        </childnode>
        <childnode refid="49497" relation="include">
        </childnode>
        <childnode refid="49415" relation="include">
        </childnode>
        <childnode refid="49440" relation="include">
        </childnode>
        <childnode refid="49493" relation="include">
        </childnode>
        <childnode refid="49468" relation="include">
        </childnode>
      </node>
      <node id="49436">
        <label>AMReX_ArrayLim.H</label>
        <link refid="AMReX__ArrayLim_8H"/>
        <childnode refid="49412" relation="include">
        </childnode>
      </node>
      <node id="49493">
        <label>AMReX_RealBox.H</label>
        <link refid="AMReX__RealBox_8H"/>
        <childnode refid="49416" relation="include">
        </childnode>
        <childnode refid="49422" relation="include">
        </childnode>
        <childnode refid="49421" relation="include">
        </childnode>
        <childnode refid="49432" relation="include">
        </childnode>
        <childnode refid="49412" relation="include">
        </childnode>
        <childnode refid="49434" relation="include">
        </childnode>
        <childnode refid="49494" relation="include">
        </childnode>
      </node>
      <node id="49421">
        <label>AMReX_Array.H</label>
        <link refid="AMReX__Array_8H"/>
        <childnode refid="49422" relation="include">
        </childnode>
        <childnode refid="49423" relation="include">
        </childnode>
        <childnode refid="49399" relation="include">
        </childnode>
        <childnode refid="49398" relation="include">
        </childnode>
        <childnode refid="49396" relation="include">
        </childnode>
        <childnode refid="49424" relation="include">
        </childnode>
        <childnode refid="49395" relation="include">
        </childnode>
        <childnode refid="49425" relation="include">
        </childnode>
        <childnode refid="49426" relation="include">
        </childnode>
        <childnode refid="49430" relation="include">
        </childnode>
        <childnode refid="49431" relation="include">
        </childnode>
        <childnode refid="49414" relation="include">
        </childnode>
        <childnode refid="49412" relation="include">
        </childnode>
      </node>
      <node id="49481">
        <label>AMReX_GpuReduce.H</label>
        <link refid="AMReX__GpuReduce_8H"/>
        <childnode refid="49426" relation="include">
        </childnode>
        <childnode refid="49430" relation="include">
        </childnode>
        <childnode refid="49453" relation="include">
        </childnode>
      </node>
      <node id="49414">
        <label>AMReX_SPACE.H</label>
        <link refid="AMReX__SPACE_8H"/>
      </node>
      <node id="49505">
        <label>AMReX_CommProfStats.H</label>
        <link refid="AMReX__CommProfStats_8H"/>
        <childnode refid="49410" relation="include">
        </childnode>
        <childnode refid="49411" relation="include">
        </childnode>
        <childnode refid="49414" relation="include">
        </childnode>
        <childnode refid="49421" relation="include">
        </childnode>
        <childnode refid="49432" relation="include">
        </childnode>
        <childnode refid="49415" relation="include">
        </childnode>
        <childnode refid="49434" relation="include">
        </childnode>
        <childnode refid="49440" relation="include">
        </childnode>
        <childnode refid="49487" relation="include">
        </childnode>
        <childnode refid="49395" relation="include">
        </childnode>
        <childnode refid="49396" relation="include">
        </childnode>
        <childnode refid="49397" relation="include">
        </childnode>
        <childnode refid="49398" relation="include">
        </childnode>
        <childnode refid="49400" relation="include">
        </childnode>
        <childnode refid="49401" relation="include">
        </childnode>
        <childnode refid="49402" relation="include">
        </childnode>
        <childnode refid="49462" relation="include">
        </childnode>
        <childnode refid="49424" relation="include">
        </childnode>
        <childnode refid="49503" relation="include">
        </childnode>
      </node>
      <node id="49498">
        <label>AMReX_ParallelReduce.H</label>
        <link refid="AMReX__ParallelReduce_8H"/>
        <childnode refid="49425" relation="include">
        </childnode>
        <childnode refid="49459" relation="include">
        </childnode>
        <childnode refid="49483" relation="include">
        </childnode>
        <childnode refid="49432" relation="include">
        </childnode>
        <childnode refid="49442" relation="include">
        </childnode>
      </node>
      <node id="49413">
        <label>AMReX_Extension.H</label>
        <link refid="AMReX__Extension_8H"/>
      </node>
      <node id="49469">
        <label>AMReX_GpuLaunch.H</label>
        <link refid="AMReX__GpuLaunch_8H"/>
        <childnode refid="49426" relation="include">
        </childnode>
        <childnode refid="49430" relation="include">
        </childnode>
        <childnode refid="49470" relation="include">
        </childnode>
        <childnode refid="49471" relation="include">
        </childnode>
        <childnode refid="49473" relation="include">
        </childnode>
        <childnode refid="49434" relation="include">
        </childnode>
        <childnode refid="49443" relation="include">
        </childnode>
        <childnode refid="49413" relation="include">
        </childnode>
        <childnode refid="49431" relation="include">
        </childnode>
        <childnode refid="49472" relation="include">
        </childnode>
        <childnode refid="49447" relation="include">
        </childnode>
        <childnode refid="49404" relation="include">
        </childnode>
        <childnode refid="49403" relation="include">
        </childnode>
        <childnode refid="49474" relation="include">
        </childnode>
        <childnode refid="49475" relation="include">
        </childnode>
      </node>
      <node id="49455">
        <label>sys/types.h</label>
      </node>
      <node id="49496">
        <label>AMReX_Periodicity.H</label>
        <link refid="AMReX__Periodicity_8H"/>
        <childnode refid="49415" relation="include">
        </childnode>
        <childnode refid="49434" relation="include">
        </childnode>
        <childnode refid="49402" relation="include">
        </childnode>
      </node>
      <node id="49466">
        <label>typeinfo</label>
      </node>
      <node id="49395">
        <label>cstdio</label>
      </node>
      <node id="49472">
        <label>AMReX_TypeTraits.H</label>
        <link refid="AMReX__TypeTraits_8H"/>
        <childnode refid="49442" relation="include">
        </childnode>
        <childnode refid="49413" relation="include">
        </childnode>
      </node>
      <node id="49430">
        <label>AMReX_GpuControl.H</label>
        <link refid="AMReX__GpuControl_8H"/>
        <childnode refid="49426" relation="include">
        </childnode>
      </node>
      <node id="49461">
        <label>AMReX_BLBackTrace.H</label>
        <link refid="AMReX__BLBackTrace_8H"/>
        <childnode refid="49462" relation="include">
        </childnode>
        <childnode refid="49398" relation="include">
        </childnode>
        <childnode refid="49399" relation="include">
        </childnode>
        <childnode refid="49424" relation="include">
        </childnode>
        <childnode refid="49395" relation="include">
        </childnode>
        <childnode refid="49417" relation="include">
        </childnode>
        <childnode refid="49463" relation="include">
        </childnode>
        <childnode refid="49464" relation="include">
        </childnode>
        <childnode refid="49465" relation="include">
        </childnode>
      </node>
      <node id="49408">
        <label>unistd.h</label>
      </node>
      <node id="49462">
        <label>stack</label>
      </node>
      <node id="49402">
        <label>vector</label>
      </node>
      <node id="49486">
        <label>AMReX_FabFactory.H</label>
        <link refid="AMReX__FabFactory_8H"/>
        <childnode refid="49434" relation="include">
        </childnode>
        <childnode refid="49483" relation="include">
        </childnode>
        <childnode refid="49452" relation="include">
        </childnode>
        <childnode refid="49432" relation="include">
        </childnode>
        <childnode refid="49446" relation="include">
        </childnode>
      </node>
      <node id="49431">
        <label>AMReX_BLassert.H</label>
        <link refid="AMReX__BLassert_8H"/>
        <childnode refid="49425" relation="include">
        </childnode>
      </node>
      <node id="49426">
        <label>AMReX_GpuQualifiers.H</label>
        <link refid="AMReX__GpuQualifiers_8H"/>
      </node>
      <node id="49399">
        <label>utility</label>
      </node>
      <node id="49422">
        <label>array</label>
      </node>
      <node id="49489">
        <label>AMReX_FabArray.H</label>
        <link refid="AMReX__FabArray_8H"/>
        <childnode refid="49396" relation="include">
        </childnode>
        <childnode refid="49478" relation="include">
        </childnode>
        <childnode refid="49404" relation="include">
        </childnode>
        <childnode refid="49400" relation="include">
        </childnode>
        <childnode refid="49399" relation="include">
        </childnode>
        <childnode refid="49402" relation="include">
        </childnode>
        <childnode refid="49403" relation="include">
        </childnode>
        <childnode refid="49406" relation="include">
        </childnode>
        <childnode refid="49398" relation="include">
        </childnode>
        <childnode refid="49431" relation="include">
        </childnode>
        <childnode refid="49421" relation="include">
        </childnode>
        <childnode refid="49432" relation="include">
        </childnode>
        <childnode refid="49434" relation="include">
        </childnode>
        <childnode refid="49425" relation="include">
        </childnode>
        <childnode refid="49457" relation="include">
        </childnode>
        <childnode refid="49490" relation="include">
        </childnode>
        <childnode refid="49486" relation="include">
        </childnode>
        <childnode refid="49458" relation="include">
        </childnode>
        <childnode refid="49491" relation="include">
        </childnode>
        <childnode refid="49459" relation="include">
        </childnode>
        <childnode refid="49453" relation="include">
        </childnode>
        <childnode refid="49420" relation="include">
        </childnode>
        <childnode refid="49411" relation="include">
        </childnode>
        <childnode refid="49496" relation="include">
        </childnode>
        <childnode refid="49483" relation="include">
        </childnode>
        <childnode refid="49497" relation="include">
        </childnode>
        <childnode refid="49499" relation="include">
        </childnode>
        <childnode refid="49452" relation="include">
        </childnode>
        <childnode refid="49472" relation="include">
        </childnode>
        <childnode refid="49500" relation="include">
        </childnode>
        <childnode refid="49441" relation="include">
        </childnode>
        <childnode refid="49468" relation="include">
        </childnode>
        <childnode refid="49501" relation="include">
        </childnode>
      </node>
      <node id="49440">
        <label>AMReX_FArrayBox.H</label>
        <link refid="AMReX__FArrayBox_8H"/>
        <childnode refid="49434" relation="include">
        </childnode>
        <childnode refid="49441" relation="include">
        </childnode>
        <childnode refid="49412" relation="include">
        </childnode>
        <childnode refid="49414" relation="include">
        </childnode>
        <childnode refid="49486" relation="include">
        </childnode>
        <childnode refid="49418" relation="include">
        </childnode>
      </node>
      <node id="49424">
        <label>sstream</label>
      </node>
      <node id="49502">
        <label>AMReX_FabArrayUtility.H</label>
        <link refid="AMReX__FabArrayUtility_8H"/>
        <childnode refid="49489" relation="include">
        </childnode>
        <childnode refid="49500" relation="include">
        </childnode>
        <childnode refid="49483" relation="include">
        </childnode>
        <childnode refid="49404" relation="include">
        </childnode>
      </node>
      <node id="49427">
        <label>AMReX_Exception.H</label>
        <link refid="AMReX__Exception_8H"/>
        <childnode refid="49428" relation="include">
        </childnode>
      </node>
      <node id="49410">
        <label>AMReX_BLProfStats.H</label>
        <link refid="AMReX__BLProfStats_8H"/>
        <childnode refid="49411" relation="include">
        </childnode>
        <childnode refid="49414" relation="include">
        </childnode>
        <childnode refid="49415" relation="include">
        </childnode>
        <childnode refid="49434" relation="include">
        </childnode>
        <childnode refid="49440" relation="include">
        </childnode>
        <childnode refid="49487" relation="include">
        </childnode>
        <childnode refid="49395" relation="include">
        </childnode>
        <childnode refid="49396" relation="include">
        </childnode>
        <childnode refid="49397" relation="include">
        </childnode>
        <childnode refid="49398" relation="include">
        </childnode>
        <childnode refid="49406" relation="include">
        </childnode>
        <childnode refid="49400" relation="include">
        </childnode>
        <childnode refid="49424" relation="include">
        </childnode>
      </node>
      <node id="49435">
        <label>AMReX_Algorithm.H</label>
        <link refid="AMReX__Algorithm_8H"/>
        <childnode refid="49403" relation="include">
        </childnode>
        <childnode refid="49426" relation="include">
        </childnode>
        <childnode refid="49413" relation="include">
        </childnode>
        <childnode refid="49433" relation="include">
        </childnode>
      </node>
      <node id="49471">
        <label>AMReX_GpuRange.H</label>
        <link refid="AMReX__GpuRange_8H"/>
        <childnode refid="49426" relation="include">
        </childnode>
        <childnode refid="49430" relation="include">
        </childnode>
        <childnode refid="49470" relation="include">
        </childnode>
        <childnode refid="49434" relation="include">
        </childnode>
        <childnode refid="49472" relation="include">
        </childnode>
      </node>
      <node id="49459">
        <label>AMReX_ParallelDescriptor.H</label>
        <link refid="AMReX__ParallelDescriptor_8H"/>
        <childnode refid="49420" relation="include">
        </childnode>
        <childnode refid="49460" relation="include">
        </childnode>
        <childnode refid="49461" relation="include">
        </childnode>
        <childnode refid="49411" relation="include">
        </childnode>
        <childnode refid="49431" relation="include">
        </childnode>
        <childnode refid="49412" relation="include">
        </childnode>
        <childnode refid="49421" relation="include">
        </childnode>
        <childnode refid="49432" relation="include">
        </childnode>
        <childnode refid="49434" relation="include">
        </childnode>
        <childnode refid="49396" relation="include">
        </childnode>
        <childnode refid="49402" relation="include">
        </childnode>
        <childnode refid="49398" relation="include">
        </childnode>
        <childnode refid="49466" relation="include">
        </childnode>
        <childnode refid="49403" relation="include">
        </childnode>
        <childnode refid="49429" relation="include">
        </childnode>
        <childnode refid="49404" relation="include">
        </childnode>
        <childnode refid="49467" relation="include">
        </childnode>
      </node>
      <node id="49453">
        <label>AMReX_Utility.H</label>
        <link refid="AMReX__Utility_8H"/>
        <childnode refid="49417" relation="include">
        </childnode>
        <childnode refid="49396" relation="include">
        </childnode>
        <childnode refid="49398" relation="include">
        </childnode>
        <childnode refid="49400" relation="include">
        </childnode>
        <childnode refid="49454" relation="include">
        </childnode>
        <childnode refid="49442" relation="include">
        </childnode>
        <childnode refid="49455" relation="include">
        </childnode>
        <childnode refid="49408" relation="include">
        </childnode>
        <childnode refid="49456" relation="include">
        </childnode>
        <childnode refid="49431" relation="include">
        </childnode>
        <childnode refid="49412" relation="include">
        </childnode>
        <childnode refid="49421" relation="include">
        </childnode>
        <childnode refid="49432" relation="include">
        </childnode>
        <childnode refid="49434" relation="include">
        </childnode>
        <childnode refid="49457" relation="include">
        </childnode>
        <childnode refid="49458" relation="include">
        </childnode>
        <childnode refid="49459" relation="include">
        </childnode>
      </node>
      <node id="49446">
        <label>AMReX_Arena.H</label>
        <link refid="AMReX__Arena_8H"/>
        <childnode refid="49431" relation="include">
        </childnode>
        <childnode refid="49447" relation="include">
        </childnode>
        <childnode refid="49417" relation="include">
        </childnode>
      </node>
      <node id="49438">
        <label>AMReX_Orientation.H</label>
        <link refid="AMReX__Orientation_8H"/>
        <childnode refid="49416" relation="include">
        </childnode>
        <childnode refid="49431" relation="include">
        </childnode>
        <childnode refid="49414" relation="include">
        </childnode>
        <childnode refid="49426" relation="include">
        </childnode>
      </node>
      <node id="49394">
        <label>/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_RegionsProfStats.cpp</label>
        <link refid="AMReX_RegionsProfStats.cpp"/>
        <childnode refid="49395" relation="include">
        </childnode>
        <childnode refid="49396" relation="include">
        </childnode>
        <childnode refid="49397" relation="include">
        </childnode>
        <childnode refid="49398" relation="include">
        </childnode>
        <childnode refid="49399" relation="include">
        </childnode>
        <childnode refid="49400" relation="include">
        </childnode>
        <childnode refid="49401" relation="include">
        </childnode>
        <childnode refid="49402" relation="include">
        </childnode>
        <childnode refid="49403" relation="include">
        </childnode>
        <childnode refid="49404" relation="include">
        </childnode>
        <childnode refid="49405" relation="include">
        </childnode>
        <childnode refid="49406" relation="include">
        </childnode>
        <childnode refid="49407" relation="include">
        </childnode>
        <childnode refid="49408" relation="include">
        </childnode>
        <childnode refid="49409" relation="include">
        </childnode>
        <childnode refid="49459" relation="include">
        </childnode>
        <childnode refid="49453" relation="include">
        </childnode>
        <childnode refid="49504" relation="include">
        </childnode>
      </node>
      <node id="49433">
        <label>AMReX_Dim3.H</label>
        <link refid="AMReX__Dim3_8H"/>
        <childnode refid="49396" relation="include">
        </childnode>
        <childnode refid="49412" relation="include">
        </childnode>
        <childnode refid="49421" relation="include">
        </childnode>
      </node>
      <node id="49456">
        <label>sys/wait.h</label>
      </node>
      <node id="49416">
        <label>iosfwd</label>
      </node>
      <node id="49417">
        <label>cstdlib</label>
      </node>
      <node id="49465">
        <label>cfenv</label>
      </node>
      <node id="49407">
        <label>sys/time.h</label>
      </node>
      <node id="49396">
        <label>iostream</label>
      </node>
      <node id="49437">
        <label>AMReX_IndexType.H</label>
        <link refid="AMReX__IndexType_8H"/>
        <childnode refid="49416" relation="include">
        </childnode>
        <childnode refid="49420" relation="include">
        </childnode>
        <childnode refid="49415" relation="include">
        </childnode>
        <childnode refid="49414" relation="include">
        </childnode>
      </node>
      <node id="49439">
        <label>AMReX_Array4.H</label>
        <link refid="AMReX__Array4_8H"/>
        <childnode refid="49415" relation="include">
        </childnode>
      </node>
      <node id="49447">
        <label>cstddef</label>
      </node>
      <node id="49401">
        <label>unordered_map</label>
      </node>
      <node id="49490">
        <label>AMReX_BoxDomain.H</label>
        <link refid="AMReX__BoxDomain_8H"/>
        <childnode refid="49416" relation="include">
        </childnode>
        <childnode refid="49437" relation="include">
        </childnode>
        <childnode refid="49434" relation="include">
        </childnode>
        <childnode refid="49415" relation="include">
        </childnode>
        <childnode refid="49444" relation="include">
        </childnode>
      </node>
      <node id="49468">
        <label>AMReX_Gpu.H</label>
        <link refid="AMReX__Gpu_8H"/>
        <childnode refid="49426" relation="include">
        </childnode>
        <childnode refid="49430" relation="include">
        </childnode>
        <childnode refid="49469" relation="include">
        </childnode>
        <childnode refid="49470" relation="include">
        </childnode>
        <childnode refid="49476" relation="include">
        </childnode>
        <childnode refid="49473" relation="include">
        </childnode>
        <childnode refid="49477" relation="include">
        </childnode>
        <childnode refid="49479" relation="include">
        </childnode>
        <childnode refid="49480" relation="include">
        </childnode>
        <childnode refid="49471" relation="include">
        </childnode>
        <childnode refid="49481" relation="include">
        </childnode>
        <childnode refid="49482" relation="include">
        </childnode>
        <childnode refid="49484" relation="include">
        </childnode>
        <childnode refid="49485" relation="include">
        </childnode>
      </node>
      <node id="49419">
        <label>climits</label>
      </node>
      <node id="49485">
        <label>AMReX_CudaGraph.H</label>
        <link refid="AMReX__CudaGraph_8H"/>
      </node>
      <node id="49449">
        <label>mutex</label>
      </node>
      <node id="49454">
        <label>chrono</label>
      </node>
      <node id="49474">
        <label>AMReX_GpuLaunchMacrosC.H</label>
        <link refid="AMReX__GpuLaunchMacrosC_8H"/>
      </node>
      <node id="49464">
        <label>csignal</label>
      </node>
      <node id="49448">
        <label>AMReX_CArena.H</label>
        <link refid="AMReX__CArena_8H"/>
        <childnode refid="49447" relation="include">
        </childnode>
        <childnode refid="49406" relation="include">
        </childnode>
        <childnode refid="49402" relation="include">
        </childnode>
        <childnode refid="49449" relation="include">
        </childnode>
        <childnode refid="49450" relation="include">
        </childnode>
        <childnode refid="49429" relation="include">
        </childnode>
        <childnode refid="49446" relation="include">
        </childnode>
      </node>
      <node id="49442">
        <label>type_traits</label>
      </node>
      <node id="49406">
        <label>set</label>
      </node>
      <node id="49445">
        <label>AMReX_BArena.H</label>
        <link refid="AMReX__BArena_8H"/>
        <childnode refid="49446" relation="include">
        </childnode>
      </node>
      <node id="49420">
        <label>AMReX_ccse-mpi.H</label>
        <link refid="AMReX__ccse-mpi_8H"/>
      </node>
      <node id="49479">
        <label>AMReX_GpuElixir.H</label>
        <link refid="AMReX__GpuElixir_8H"/>
        <childnode refid="49446" relation="include">
        </childnode>
      </node>
      <node id="49403">
        <label>algorithm</label>
      </node>
      <node id="49473">
        <label>AMReX_GpuDevice.H</label>
        <link refid="AMReX__GpuDevice_8H"/>
        <childnode refid="49417" relation="include">
        </childnode>
        <childnode refid="49423" relation="include">
        </childnode>
        <childnode refid="49422" relation="include">
        </childnode>
        <childnode refid="49425" relation="include">
        </childnode>
        <childnode refid="49453" relation="include">
        </childnode>
        <childnode refid="49470" relation="include">
        </childnode>
        <childnode refid="49430" relation="include">
        </childnode>
      </node>
      <node id="49463">
        <label>execinfo.h</label>
      </node>
      <node id="49478">
        <label>cstring</label>
      </node>
      <node id="49504">
        <label>AMReX_BLProfUtilities.H</label>
        <link refid="AMReX__BLProfUtilities_8H"/>
        <childnode refid="49398" relation="include">
        </childnode>
        <childnode refid="49478" relation="include">
        </childnode>
        <childnode refid="49466" relation="include">
        </childnode>
        <childnode refid="49410" relation="include">
        </childnode>
        <childnode refid="49505" relation="include">
        </childnode>
        <childnode refid="49409" relation="include">
        </childnode>
        <childnode refid="49432" relation="include">
        </childnode>
      </node>
      <node id="49494">
        <label>AMReX_RealVect.H</label>
        <link refid="AMReX__RealVect_8H"/>
        <childnode refid="49447" relation="include">
        </childnode>
        <childnode refid="49417" relation="include">
        </childnode>
        <childnode refid="49478" relation="include">
        </childnode>
        <childnode refid="49396" relation="include">
        </childnode>
        <childnode refid="49418" relation="include">
        </childnode>
        <childnode refid="49434" relation="include">
        </childnode>
        <childnode refid="49412" relation="include">
        </childnode>
        <childnode refid="49414" relation="include">
        </childnode>
        <childnode refid="49402" relation="include">
        </childnode>
        <childnode refid="49495" relation="include">
        </childnode>
        <childnode refid="49415" relation="include">
        </childnode>
      </node>
      <node id="49492">
        <label>AMReX_CoordSys.H</label>
        <link refid="AMReX__CoordSys_8H"/>
        <childnode refid="49404" relation="include">
        </childnode>
        <childnode refid="49425" relation="include">
        </childnode>
        <childnode refid="49412" relation="include">
        </childnode>
        <childnode refid="49421" relation="include">
        </childnode>
        <childnode refid="49432" relation="include">
        </childnode>
        <childnode refid="49434" relation="include">
        </childnode>
      </node>
      <node id="49423">
        <label>memory</label>
      </node>
      <node id="49477">
        <label>AMReX_GpuAsyncArray.H</label>
        <link refid="AMReX__GpuAsyncArray_8H"/>
        <childnode refid="49447" relation="include">
        </childnode>
        <childnode refid="49478" relation="include">
        </childnode>
        <childnode refid="49417" relation="include">
        </childnode>
        <childnode refid="49423" relation="include">
        </childnode>
        <childnode refid="49446" relation="include">
        </childnode>
        <childnode refid="49472" relation="include">
        </childnode>
        <childnode refid="49473" relation="include">
        </childnode>
      </node>
      <node id="49480">
        <label>AMReX_GpuMemory.H</label>
        <link refid="AMReX__GpuMemory_8H"/>
        <childnode refid="49426" relation="include">
        </childnode>
        <childnode refid="49430" relation="include">
        </childnode>
        <childnode refid="49473" relation="include">
        </childnode>
        <childnode refid="49472" relation="include">
        </childnode>
        <childnode refid="49446" relation="include">
        </childnode>
        <childnode refid="49417" relation="include">
        </childnode>
      </node>
      <node id="49412">
        <label>AMReX_REAL.H</label>
        <link refid="AMReX__REAL_8H"/>
        <childnode refid="49413" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="AMReX__RegionsProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" prot="public" static="no">
        <name>SHOWVAL</name>
        <param><defname>val</defname></param>
        <initializer>{ cout &lt;&lt; #val &lt;&lt; &quot; = &quot; &lt;&lt; val &lt;&lt; endl; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_RegionsProfStats.cpp" line="43" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_RegionsProfStats.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__RegionsProfStats_8cpp_1a2587ebcf4e0d6a093b8c88db7a83cadf" prot="public" static="no">
        <name>PRINTCS</name>
        <param><defname>CS</defname></param>
        <initializer>CS.csFNameNumber &lt;&lt; &quot; :: &quot; &lt;&lt; fNumberNames[CS.csFNameNumber] &lt;&lt; &quot; :: &quot; \
                 &lt;&lt; CS.totalTime &lt;&lt; &quot; :: &quot; &lt;&lt; CS.stackTime &lt;&lt; &quot; :: &quot; &lt;&lt; \
                 ((CS.totalTime &gt; 0.0) ? (( 1.0 - (CS.stackTime / CS.totalTime)) * 100.0) :  ( 0.0 )) \
		 &lt;&lt; &quot; % :: &quot; \
		 &lt;&lt; CS.nCSCalls  &lt;&lt; &quot; :: &quot; &lt;&lt; CS.callStackDepth &lt;&lt; &quot; :: &quot; \
		 &lt;&lt; CS.callTime</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_RegionsProfStats.cpp" line="72" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_RegionsProfStats.cpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__RegionsProfStats_8cpp_1a2ae7e4605ef004b80257a95621e5cc12" prot="public" static="no">
        <name>PRINTCSNC</name>
        <param><defname>CS</defname></param>
        <initializer>CS.csFNameNumber &lt;&lt; &quot; :: &quot; &lt;&lt; fNumberNames[CS.csFNameNumber] &lt;&lt; &quot; :: &quot; \
                   &lt;&lt; CS.totalTime &lt;&lt; &quot; :: &quot; &lt;&lt; CS.stackTime &lt;&lt; &quot; :: &quot; &lt;&lt; \
                   ((CS.totalTime &gt; 0.0) ? (( 1.0 - (CS.stackTime / CS.totalTime)) * 100.0) :  ( 0.0 )) \
		   &lt;&lt; &quot; % :: &quot; \
		   &lt;&lt; CS.nCSCalls  &lt;&lt; &quot; :: &quot; &lt;&lt; CS.callStackDepth</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_RegionsProfStats.cpp" line="79" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_RegionsProfStats.cpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" prot="public" static="no">
        <name>IcsHTMLFile</name>
        <initializer>csHTMLFile</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_RegionsProfStats.cpp" line="897" column="9"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__RegionsProfStats_8cpp_1ad95a90df3183f801a5e0bac586118388" prot="public" static="no">
        <name>IIcsHTMLFile</name>
        <initializer>csHTMLFile</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_RegionsProfStats.cpp" line="898" column="9"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" prot="public" static="no">
        <name>IcsHTMLFile</name>
        <initializer>csHTMLFile</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_RegionsProfStats.cpp" line="1138" column="9"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__RegionsProfStats_8cpp_1ad95a90df3183f801a5e0bac586118388" prot="public" static="no">
        <name>IIcsHTMLFile</name>
        <initializer>csHTMLFile</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_RegionsProfStats.cpp" line="1139" column="9"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__RegionsProfStats_8cpp_1a253100cadb934fc9292ae389be9b48f3" prot="public" static="no">
        <name>PRINTCSTT</name>
        <param><defname>IOS</defname></param>
        <param><defname>CS</defname></param>
        <param><defname>DEL</defname></param>
        <initializer>for(int indent(0); indent &lt; CS.callStackDepth; ++indent) \
    { IOS &lt;&lt; &quot;---|&quot;; } IOS &lt;&lt; DEL &lt;&lt; CS.csFNameNumber \
    &lt;&lt; DEL &lt;&lt; fNumberNames[CS.csFNameNumber] &lt;&lt; DEL &lt;&lt; CS.totalTime &lt;&lt; DEL &lt;&lt; CS.stackTime \
    &lt;&lt; DEL &lt;&lt; CS.nCSCalls  &lt;&lt; DEL &lt;&lt; CS.callStackDepth &lt;&lt; DEL &lt;&lt; CS.callTime &lt;&lt; &apos;\n&apos;;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_RegionsProfStats.cpp" line="1313" column="9" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_RegionsProfStats.cpp" bodystart="1313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="AMReX__RegionsProfStats_8cpp_1adf40b37aa3d31187890635b3b571403c" prot="public" static="no">
        <name>BL_CYCLEOPENS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_RegionsProfStats.cpp" line="1441" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="AMReX__RegionsProfStats_8cpp_1a0b54508652b2932ee5c008a007ac1b1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int XDIR</definition>
        <argsstring>(0)</argsstring>
        <name>XDIR</name>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_RegionsProfStats.cpp" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__RegionsProfStats_8cpp_1a82ff102a1952ad4ab549505b10f24456" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int YDIR</definition>
        <argsstring>(1)</argsstring>
        <name>YDIR</name>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_RegionsProfStats.cpp" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__RegionsProfStats_8cpp_1a9eaad985fc3700bfc26c0ce411504f81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int ZDIR</definition>
        <argsstring>(2)</argsstring>
        <name>ZDIR</name>
        <param>
          <type>2</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_RegionsProfStats.cpp" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__RegionsProfStats_8cpp_1a02b76a92a17338752cdd29335caaa60d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string SanitizeName</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>SanitizeName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_RegionsProfStats.cpp" line="57" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>RegionsProfStats.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::cout;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::endl;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::flush;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::string;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::ifstream;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::ofstream;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::map;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::unordered_map;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::unordered_multimap;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::vector;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::pair;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__RegionsProfStats_8H" kindref="compound">AMReX_RegionsProfStats.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__ParallelDescriptor_8H" kindref="compound">AMReX_ParallelDescriptor.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Utility_8H" kindref="compound">AMReX_Utility.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__BLProfUtilities_8H" kindref="compound">AMReX_BLProfUtilities.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceamrex" kindref="compound">amrex</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;omp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHOWVAL(val)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/>#val<sp/>&lt;&lt;<sp/>&quot;<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>val<sp/>&lt;&lt;<sp/>endl;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a0b54508652b2932ee5c008a007ac1b1d" kindref="member">XDIR</ref>(0);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a82ff102a1952ad4ab549505b10f24456" kindref="member">YDIR</ref>(1);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a9eaad985fc3700bfc26c0ce411504f81" kindref="member">ZDIR</ref>(2);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1aa495084e5ea8770e445d0055974e79f5" kindref="member">RegionsProfStats::bInitDataBlocks</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1aa1be9f367de08974eeef5231d654d5ad" kindref="member">RegionsProfStats::persistentStreams</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">std::map&lt;Real,<sp/>std::string,<sp/>std::greater&lt;Real&gt;<sp/>&gt;<sp/><ref refid="classRegionsProfStats_1ae7b5e31a9fc2540ebcced76270cd6dbb" kindref="member">RegionsProfStats::mTimersTotalsSorted</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::string&gt;</ref><sp/><ref refid="classRegionsProfStats_1a448bbf6cfc7ccb16b54f9655c943e9dc" kindref="member">RegionsProfStats::regHeaderFileNames</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal">std::map&lt;std::string,<sp/>int&gt;<sp/><ref refid="classRegionsProfStats_1aa4660af1eb41eb5b3afd6ef9187900f3" kindref="member">RegionsProfStats::regDataFileNames</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::ifstream *&gt;</ref><sp/><ref refid="classRegionsProfStats_1a9b1f5e4b1d725777df4ea900e398f0d5" kindref="member">RegionsProfStats::regDataStreams</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespaceamrex_1a41265e28034440c2aaa8fb38d3cd38c5" kindref="member">SanitizeName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aaae16c4ac3245574456ee8dc48c261be" kindref="member">amrex::MakeFuncPctTimesMF</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;BLProfStats::FuncStat&gt;</ref><sp/>&gt;<sp/>&amp;funcStats,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::string&gt;</ref><sp/>&amp;blpFNames,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>BLProfiler::ProfStats&gt;<sp/>&amp;mProfStats,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>runTime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dataNProcs);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1abf61acca5a480f47841ff87d3fc31536" kindref="member">amrex::CollectMProfStats</ref>(std::map&lt;std::string,<sp/>BLProfiler::ProfStats&gt;<sp/>&amp;mProfStats,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;BLProfStats::FuncStat&gt;</ref><sp/>&gt;<sp/>&amp;funcStats,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::string&gt;</ref><sp/>&amp;fNames,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>runTime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whichProc);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a171596246077e8bb3d38d0e3a513c481" kindref="member">amrex::GraphTopPct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>BLProfiler::ProfStats&gt;<sp/>&amp;mProfStats,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;BLProfStats::FuncStat&gt;</ref><sp/>&gt;<sp/>&amp;funcStats,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::string&gt;</ref><sp/>&amp;fNames,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>runTime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dataNProcs,<sp/>Real<sp/>gPercent);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRINTCS(CS)<sp/>CS.csFNameNumber<sp/>&lt;&lt;<sp/>&quot;<sp/>::<sp/>&quot;<sp/>&lt;&lt;<sp/>fNumberNames[CS.csFNameNumber]<sp/>&lt;&lt;<sp/>&quot;<sp/>::<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>CS.totalTime<sp/>&lt;&lt;<sp/>&quot;<sp/>::<sp/>&quot;<sp/>&lt;&lt;<sp/>CS.stackTime<sp/>&lt;&lt;<sp/>&quot;<sp/>::<sp/>&quot;<sp/>&lt;&lt;<sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((CS.totalTime<sp/>&gt;<sp/>0.0)<sp/>?<sp/>((<sp/>1.0<sp/>-<sp/>(CS.stackTime<sp/>/<sp/>CS.totalTime))<sp/>*<sp/>100.0)<sp/>:<sp/><sp/>(<sp/>0.0<sp/>))<sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>%<sp/>::<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>CS.nCSCalls<sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>::<sp/>&quot;<sp/>&lt;&lt;<sp/>CS.callStackDepth<sp/>&lt;&lt;<sp/>&quot;<sp/>::<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>CS.callTime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRINTCSNC(CS)<sp/>CS.csFNameNumber<sp/>&lt;&lt;<sp/>&quot;<sp/>::<sp/>&quot;<sp/>&lt;&lt;<sp/>fNumberNames[CS.csFNameNumber]<sp/>&lt;&lt;<sp/>&quot;<sp/>::<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>CS.totalTime<sp/>&lt;&lt;<sp/>&quot;<sp/>::<sp/>&quot;<sp/>&lt;&lt;<sp/>CS.stackTime<sp/>&lt;&lt;<sp/>&quot;<sp/>::<sp/>&quot;<sp/>&lt;&lt;<sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((CS.totalTime<sp/>&gt;<sp/>0.0)<sp/>?<sp/>((<sp/>1.0<sp/>-<sp/>(CS.stackTime<sp/>/<sp/>CS.totalTime))<sp/>*<sp/>100.0)<sp/>:<sp/><sp/>(<sp/>0.0<sp/>))<sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>%<sp/>::<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>CS.nCSCalls<sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>::<sp/>&quot;<sp/>&lt;&lt;<sp/>CS.callStackDepth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><ref refid="classRegionsProfStats_1a395ae220780e06011681a86a4bd08d98" kindref="member">RegionsProfStats::RegionsProfStats</ref>()</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>:<sp/><sp/>currentDataBlock(0)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>maxFNumber<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="classRegionsProfStats_1afe23b7a85cbdc57134ace7e6e2c99765" kindref="member">RegionsProfStats::~RegionsProfStats</ref>()<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1aae830fffadd0871595b6cb4b2305d15f" kindref="member">RegionsProfStats::AddCStatsHeaderFileName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>&amp;hfn)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(std::find(regHeaderFileNames.begin(),</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>regHeaderFileNames.end(),<sp/>hfn)<sp/>==<sp/>regHeaderFileNames.end())</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>regHeaderFileNames.push_back(hfn);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1a09ab62784a9b4e5a50f3a881fff84824" kindref="member">RegionsProfStats::SyncFNamesAndNumbers</ref>()<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mFNameNumbersPerProc.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>std::set&lt;std::string&gt;<sp/>localNames;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/><ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>;<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>int&gt;::iterator<sp/>mfnnit;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(mfnnit<sp/>=<sp/>mFNameNumbersPerProc[p].<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfnnit<sp/>!=<sp/>mFNameNumbersPerProc[p].end();<sp/>++mfnnit)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>localNames.insert(mfnnit-&gt;first);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::string&gt;</ref><sp/>localStrings,<sp/>syncedStrings;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>alreadySynced;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::set&lt;std::string&gt;::iterator<sp/>lsit<sp/>=<sp/>localNames.begin();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lsit<sp/>!=<sp/>localNames.end();<sp/>++lsit)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>localStrings.push_back(*lsit);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1a09ef310468cc24552cfc73abfc282b72" kindref="member">amrex::SyncStrings</ref>(localStrings,<sp/>syncedStrings,<sp/>alreadySynced);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>fnameRemap.resize(dataNProcs);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/><ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>;<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>fnameRemap[p].resize(syncedStrings.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>(),<sp/>-1);<sp/><sp/></highlight><highlight class="comment">//<sp/>-1<sp/>are<sp/>names<sp/>not<sp/>on<sp/>proc<sp/>p</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>foundStrings(syncedStrings.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>(),<sp/>-1);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>int&gt;::iterator<sp/>mfnnit;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(mfnnit<sp/>=<sp/>mFNameNumbersPerProc[p].<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfnnit<sp/>!=<sp/>mFNameNumbersPerProc[p].end();<sp/>++mfnnit)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;findName<sp/>=<sp/>mfnnit-&gt;first;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>localIndex(mfnnit-&gt;second);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n(0);<sp/>n<sp/>&lt;<sp/>syncedStrings.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(findName<sp/>==<sp/>syncedStrings[n])<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fnameRemap[p][localIndex]<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>foundStrings[n]<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cout<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>fname<sp/>localIndex<sp/>n<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>p<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>findName<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;&lt;<sp/>localIndex<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;<sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n(0);<sp/>n<sp/>&lt;<sp/>foundStrings.size();<sp/>++n)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>fill<sp/>in<sp/>unfound<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(foundStrings[n]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii(0);<sp/>ii<sp/>&lt;<sp/>fnameRemap[p].size();<sp/>++ii)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fnameRemap[p][ii]<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fnameRemap[p][ii]<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>the<sp/>index<sp/>here<sp/>is<sp/>the<sp/>remapped<sp/>one,<sp/>must<sp/>access<sp/>numbersToFName<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>the<sp/>data<sp/>processors<sp/>local<sp/>index<sp/>in<sp/>fnameRemap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>numbersToFName<sp/>=<sp/>syncedStrings;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1a082150afc9266718ad59d318c5fc21e2" kindref="member">RegionsProfStats::AddFunctionName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;fname,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fnumber)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mFNameNumbersPerProc.size()<sp/>!=<sp/><ref refid="classBLProfStats_1ad898feedcdc492a4b06a9b2bc661286c" kindref="member">dataNProcs</ref>)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>mFNameNumbersPerProc.resize(dataNProcs);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>std::size_t<sp/>found;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>std::string<sp/>fnameNQ(fname.substr(1,<sp/>fname.length()<sp/>-<sp/>2));<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>remove<sp/>quotes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((found<sp/>=<sp/>fnameNQ.find(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">))<sp/>!=<sp/>std::string::npos)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>replace<sp/>spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>fnameNQ.replace(found,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>int&gt;::iterator<sp/>mfnnit<sp/>=<sp/>mFNameNumbersPerProc[<ref refid="classBLProfStats_1a59554322d0d460e70099c8eea9729aa1" kindref="member">currentProc</ref>].find(fnameNQ);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mfnnit<sp/>==<sp/>mFNameNumbersPerProc[<ref refid="classBLProfStats_1a59554322d0d460e70099c8eea9729aa1" kindref="member">currentProc</ref>].<ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">end</ref>())<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>mFNameNumbersPerProc[<ref refid="classBLProfStats_1a59554322d0d460e70099c8eea9729aa1" kindref="member">currentProc</ref>].insert(std::pair&lt;std::string,<sp/>int&gt;(fnameNQ,<sp/>fnumber));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mfnnit-&gt;first<sp/>!=<sp/>fnameNQ<sp/>||<sp/>mfnnit-&gt;second<sp/>!=<sp/>fnumber)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;************<sp/>conflict:<sp/><sp/>fname<sp/>fnum<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fnameNQ<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fnumber<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>maxFNumber<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(maxFNumber,<sp/>fnumber);</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1a7f04e8fb6b7f6db8b1e6bd5df15a16b0" kindref="member">RegionsProfStats::AddTimeMinMax</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmin,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmax)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>[<ref refid="classCommProfStats_1adfeb787d05dd96d8297c678948d899fa" kindref="member">currentDataBlock</ref>].timeMin<sp/>=<sp/>tmin;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>[<ref refid="classCommProfStats_1adfeb787d05dd96d8297c678948d899fa" kindref="member">currentDataBlock</ref>].timeMax<sp/>=<sp/>tmax;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><ref refid="structBLProfStats_1_1TimeRange" kindref="compound">BLProfStats::TimeRange</ref><sp/><ref refid="classRegionsProfStats_1a2d638a90467cede3ed5491a52e6a4f62" kindref="member">RegionsProfStats::MakeRegionPlt</ref>(<ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref><sp/>&amp;rFab,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>noregionnumber,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Box&gt;</ref>&gt;<sp/>&amp;regionBoxes)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BL_SPACEDIM<sp/>!=<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error:<sp/><sp/>RegionsProfStats::MakeRegionPlt<sp/>only<sp/>supported<sp/>for<sp/>2D&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TimeRange(0,<sp/>0);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;RegionsProfStats::MakeRegionPlt()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xLength(width),<sp/>yHeight(height);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nRegions(<ref refid="classBLProfStats_1a0a0a7ce2c13259d6280d6f82cb4971f7" kindref="member">maxRNumber</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whichProc(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>());</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>Real<sp/>notInRegionValue(-1.0);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/>b(<ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>(0,<sp/>0),<sp/><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>(xLength<sp/>-<sp/>1,<sp/>(yHeight<sp/>*<sp/>nRegions)<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>rFab.<ref refid="classamrex_1_1FArrayBox_1ae5a4b9b9a64a4c1cfd534bb6eefc6b30" kindref="member">resize</ref>(b,<sp/>1);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>rFab.<ref refid="classamrex_1_1BaseFab_1a5f8ebb9050e7ffd02a957d0bdaca9886" kindref="member">setVal</ref>(notInRegionValue);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>rStartTime(nRegions,<sp/>-1.0);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>regionBoxes.clear();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>regionBoxes.resize(nRegions);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>a<sp/>better<sp/>way<sp/>to<sp/>get<sp/>the<sp/>real<sp/>minmax<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>Real<sp/>timeMax(-<ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::numeric_limits&lt;Real&gt;::max</ref>());</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>[idb];</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>timeMax<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(timeMax,<sp/>dBlock.timeMax);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.proc<sp/>==<sp/>whichProc)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a41c7cecdb09d9a72e30118d78343b48e" kindref="member">ReadBlock</ref>(dBlock,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>dont<sp/>need<sp/>to<sp/>read<sp/>the<sp/>trace<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iss(0);<sp/>iss<sp/>&lt;<sp/>dBlock.rStartStop.size();<sp/>++iss)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::RStartStop<sp/>&amp;rss<sp/>=<sp/>dBlock.rStartStop[iss];</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeMax<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(timeMax,<sp/>rss.rssTime);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a3031f89c0189bd2d8f73b6207e8adfb1" kindref="member">ClearBlock</ref>(dBlock);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>[idb];</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.proc<sp/>!=<sp/>whichProc)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a41c7cecdb09d9a72e30118d78343b48e" kindref="member">ReadBlock</ref>(dBlock,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>dont<sp/>need<sp/>to<sp/>read<sp/>the<sp/>trace<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.rStartStop.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::RStartStop<sp/>&amp;rss<sp/>=<sp/>dBlock.rStartStop[i];</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rss.rssStart)<sp/>{<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rStartTime[rss.rssRNumber]<sp/>&lt;<sp/>0.0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>started<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rStartTime[rss.rssRNumber]<sp/>=<sp/>rss.rssTime;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>started,<sp/>mismatched<sp/>start/stop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rStartTime[rss.rssRNumber]<sp/>&lt;<sp/>0.0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>started<sp/>yet,<sp/>mismatched<sp/>start/stop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stopping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real<sp/>rtStart(rStartTime[rss.rssRNumber]),<sp/>rtStop(rss.rssTime);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rStartTime[rss.rssRNumber]<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xStart(xLength<sp/>*<sp/>rtStart<sp/>/<sp/>timeMax);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xStop(xLength<sp/>*<sp/>rtStop<sp/>/<sp/>timeMax);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xStop<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" kindref="member">std::min</ref>(xStop,<sp/>xLength<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yLo(rss.rssRNumber<sp/>*<sp/>yHeight),<sp/>yHi(((rss.rssRNumber<sp/>+<sp/>1)<sp/>*<sp/><sp/>yHeight)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/>rBox(<ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>(xStart,<sp/>yLo),<sp/><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>(xStop,<sp/>yHi));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>regionBoxes[rss.rssRNumber].push_back(rBox);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rFab.<ref refid="classamrex_1_1BaseFab_1a5f8ebb9050e7ffd02a957d0bdaca9886" kindref="member">setVal</ref>(rss.rssRNumber,<sp/>rBox,<sp/>0);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a3031f89c0189bd2d8f73b6207e8adfb1" kindref="member">ClearBlock</ref>(dBlock);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>Real<sp/>timeMin(0.0);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TimeRange(timeMin,<sp/>timeMax);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1aa4bf6706450f39ee6bf8764a9e6e5912" kindref="member">RegionsProfStats::FillRegionTimeRanges</ref>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;TimeRange&gt;</ref>&gt;<sp/>&amp;rtr,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whichProc)</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nRegions(<ref refid="classBLProfStats_1a0a0a7ce2c13259d6280d6f82cb4971f7" kindref="member">maxRNumber</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>rStartTime(nRegions,<sp/>-1.0);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>rtr.resize(nRegions);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>[idb];</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.proc<sp/>!=<sp/>whichProc)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a41c7cecdb09d9a72e30118d78343b48e" kindref="member">ReadBlock</ref>(dBlock,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dont<sp/>need<sp/>to<sp/>read<sp/>the<sp/>trace<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.rStartStop.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::RStartStop<sp/>&amp;rss<sp/>=<sp/>dBlock.rStartStop[i];</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rss.rssStart)<sp/>{<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rStartTime[rss.rssRNumber]<sp/>&lt;<sp/>0.0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>started<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rStartTime[rss.rssRNumber]<sp/>=<sp/>rss.rssTime;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>started,<sp/>mismatched<sp/>start/stop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rStartTime[rss.rssRNumber]<sp/>&lt;<sp/>0.0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>started<sp/>yet,<sp/>mismatched<sp/>start/stop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stopping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rtr[rss.rssRNumber].push_back(TimeRange(rStartTime[rss.rssRNumber],<sp/>rss.rssTime));</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rStartTime[rss.rssRNumber]<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a3031f89c0189bd2d8f73b6207e8adfb1" kindref="member">ClearBlock</ref>(dBlock);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1a8a1590c491b357676bac273650f527c8" kindref="member">RegionsProfStats::InitRegionTimeRanges</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/>&amp;procBox)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;RegionsProfStats::InitRegionTimeRanges()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nProcs(<ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>());</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myProc(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>());</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smallY(procBox.<ref refid="classamrex_1_1Box_1a04e076a4688ca383aeaccfcb0bceef60" kindref="member">smallEnd</ref>(<ref refid="AMReX__RegionsProfStats_8cpp_1a82ff102a1952ad4ab549505b10f24456" kindref="member">YDIR</ref>)),<sp/>bigY(procBox.<ref refid="classamrex_1_1Box_1aa2ebf79e721706ee01738c9bb1cc13e7" kindref="member">bigEnd</ref>(<ref refid="AMReX__RegionsProfStats_8cpp_1a82ff102a1952ad4ab549505b10f24456" kindref="member">YDIR</ref>));</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>BL_SERIAL_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_SERIAL_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bIOP(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>());</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bIOP)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>serial<sp/>InitRegionTimeRanges.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa23714eb98f31ba71d565390dae2a7d2" kindref="member">BL_PROFILE_VAR</ref>(</highlight><highlight class="stringliteral">&quot;RegionsProfStats::InitRegionTimeRanges_Serial()&quot;</highlight><highlight class="normal">,<sp/>RPSIRTR_S);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Vector&lt;Vector&lt;TimeRange&gt;</ref><sp/>&gt;<sp/>&gt;<sp/>checkRegionTimeRanges;<sp/><sp/></highlight><highlight class="comment">//<sp/>[proc][rnum][range]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>checkRegionTimeRanges.resize(dataNProcs);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/>checkRegionTimeRanges.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>checkRegionTimeRanges[p].resize(<ref refid="classBLProfStats_1a0a0a7ce2c13259d6280d6f82cb4971f7" kindref="member">maxRNumber</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>[idb];</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classCommProfStats_1a176ee76d60863bf10f9b663c21c00a38" kindref="member">persistentStreams</ref>){</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a9689a1779e9f7008ced946ab6ff8fa41" kindref="member">ReadBlockNoOpen</ref>(dBlock,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>dont<sp/>need<sp/>to<sp/>read<sp/>the<sp/>trace<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a41c7cecdb09d9a72e30118d78343b48e" kindref="member">ReadBlock</ref>(dBlock,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>dont<sp/>need<sp/>to<sp/>read<sp/>the<sp/>trace<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.rStartStop.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::RStartStop<sp/>&amp;rss<sp/>=<sp/>dBlock.rStartStop[i];</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rss.rssStart)<sp/>{<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkRegionTimeRanges[dBlock.proc][rss.rssRNumber].push_back(TimeRange(rss.rssTime,<sp/>-1.0));</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkRegionTimeRanges[dBlock.proc][rss.rssRNumber].back().stopTime<sp/>=<sp/>rss.rssTime;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a3031f89c0189bd2d8f73b6207e8adfb1" kindref="member">ClearBlock</ref>(dBlock);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a82c334c787872a6bbacabe9a38389224" kindref="member">BL_PROFILE_VAR_STOP</ref>(RPSIRTR_S);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bIOP)<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Finished<sp/>serial<sp/>InitRegionTimeRanges.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>myProc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>InitRegionTimeRanges<sp/>Box<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>procBox<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa23714eb98f31ba71d565390dae2a7d2" kindref="member">BL_PROFILE_VAR</ref>(</highlight><highlight class="stringliteral">&quot;RegionsProfStats::InitRegionTimeRanges_Parallel()&quot;</highlight><highlight class="normal">,<sp/>RPSIRTR_P);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>.resize(dataNProcs);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>.size();<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p].resize(<ref refid="classBLProfStats_1a0a0a7ce2c13259d6280d6f82cb4971f7" kindref="member">maxRNumber</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>[idb];</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.proc<sp/>&gt;=<sp/>smallY<sp/>&amp;&amp;<sp/>dBlock.proc<sp/>&lt;=<sp/>bigY)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>within<sp/>myproc<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classCommProfStats_1a176ee76d60863bf10f9b663c21c00a38" kindref="member">persistentStreams</ref>){</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a9689a1779e9f7008ced946ab6ff8fa41" kindref="member">ReadBlockNoOpen</ref>(dBlock,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>dont<sp/>need<sp/>to<sp/>read<sp/>the<sp/>trace<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a41c7cecdb09d9a72e30118d78343b48e" kindref="member">ReadBlock</ref>(dBlock,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>dont<sp/>need<sp/>to<sp/>read<sp/>the<sp/>trace<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.rStartStop.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::RStartStop<sp/>&amp;rss<sp/>=<sp/>dBlock.rStartStop[i];</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rss.rssStart)<sp/>{<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rss.rssRNumber<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[dBlock.proc][rss.rssRNumber].push_back(TimeRange(rss.rssTime,<sp/>-1.0));</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rss.rssRNumber<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[dBlock.proc][rss.rssRNumber].back().stopTime<sp/>=<sp/>rss.rssTime;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a3031f89c0189bd2d8f73b6207e8adfb1" kindref="member">ClearBlock</ref>(dBlock);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>nRanges(<ref refid="classBLProfStats_1a0a0a7ce2c13259d6280d6f82cb4971f7" kindref="member">maxRNumber</ref><sp/>+<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>.size();<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r(0);<sp/>r<sp/>&lt;<sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p].size();<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nRanges[r]<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(nRanges[r],<sp/>static_cast&lt;int&gt;<sp/>(<ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p][r].<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1ac0bbdd3b8f64770191201e431e16c723" kindref="member">size</ref>()));</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" kindref="member">ParallelDescriptor::ReduceIntMax</ref>(nRanges.dataPtr(),<sp/>nRanges.size());</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>totalRanges(0);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r(0);<sp/>r<sp/>&lt;<sp/>nRanges.size();<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>totalRanges<sp/>+=<sp/>nRanges[r];</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>gSmallY(nProcs,<sp/>-1);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>gBigY(nProcs,<sp/>-1);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>gSmallY[myProc]<sp/>=<sp/>smallY;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>gBigY[myProc]<sp/><sp/><sp/>=<sp/>bigY;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" kindref="member">ParallelDescriptor::ReduceIntMax</ref>(gSmallY.dataPtr(),<sp/>gSmallY.size());</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" kindref="member">ParallelDescriptor::ReduceIntMax</ref>(gBigY.dataPtr(),<sp/><sp/><sp/>gBigY.size());</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>now<sp/>resize<sp/>ranges<sp/>not<sp/>on<sp/>this<sp/>processor<sp/>and<sp/>collect<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>.size();<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r(0);<sp/>r<sp/>&lt;<sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p].size();<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>(p<sp/>&gt;=<sp/>smallY<sp/>&amp;&amp;<sp/>p<sp/>&lt;=<sp/>bigY))<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>not<sp/>within<sp/>myproc<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(regionTimeRanges[p][r].size()<sp/>&gt;<sp/>0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>amrex::Abort(&quot;regionTimeRanges<sp/>size<sp/>error<sp/>0&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p][r].resize(nRanges[r]);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>allRanges<sp/>=<sp/>totalRanges<sp/>*<sp/>dataNProcs<sp/>*<sp/>(<ref refid="classBLProfStats_1a0a0a7ce2c13259d6280d6f82cb4971f7" kindref="member">maxRNumber</ref><sp/>+<sp/>1)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>gAllRanges(allRanges);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>.size();<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r(0);<sp/>r<sp/>&lt;<sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p].size();<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p<sp/>&gt;=<sp/>smallY<sp/>&amp;&amp;<sp/>p<sp/>&lt;=<sp/>bigY)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>within<sp/>myproc<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t(0);<sp/>t<sp/>&lt;<sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p][r].size();<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/>int<sp/>index((p<sp/>*<sp/>(maxRNumber<sp/>+<sp/>1)<sp/>*<sp/>totalRanges<sp/>*<sp/>2)<sp/>+</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(r<sp/>*<sp/>totalRanges<sp/>*<sp/>2)<sp/>+<sp/>(t<sp/>*<sp/>2));<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>index((r<sp/>*<sp/>totalRanges<sp/>*<sp/>2)<sp/>+<sp/>(t<sp/>*<sp/>2)<sp/>+</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p<sp/>*<sp/>(<ref refid="classBLProfStats_1a0a0a7ce2c13259d6280d6f82cb4971f7" kindref="member">maxRNumber</ref><sp/>+<sp/>1)<sp/>*<sp/>totalRanges<sp/>*<sp/>2));</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gAllRanges[index]<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p][r][t].startTime;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gAllRanges[index<sp/>+<sp/>1]<sp/>=<sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p][r][t].stopTime;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>recvDispl(nProcs,<sp/>0),<sp/>recvCounts(nProcs,<sp/>0);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/>nProcs;<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>recvCounts[p]<sp/>=<sp/>(long(gBigY[p])<sp/>-<sp/>gSmallY[p]<sp/>+<sp/>1)<sp/>*<sp/>(<ref refid="classBLProfStats_1a0a0a7ce2c13259d6280d6f82cb4971f7" kindref="member">maxRNumber</ref><sp/>+<sp/>1)<sp/>*<sp/>totalRanges<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>recvDispl[p]<sp/><sp/>=<sp/>long(gSmallY[p])<sp/>*<sp/>(<ref refid="classBLProfStats_1a0a0a7ce2c13259d6280d6f82cb4971f7" kindref="member">maxRNumber</ref><sp/>+<sp/>1)<sp/>*<sp/>totalRanges<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_USE_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myStartIndex(gSmallY[myProc]<sp/>*<sp/>(<ref refid="classBLProfStats_1a0a0a7ce2c13259d6280d6f82cb4971f7" kindref="member">maxRNumber</ref><sp/>+<sp/>1)<sp/>*<sp/>totalRanges<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sendCount((gBigY[myProc]<sp/>-<sp/>gSmallY[myProc]<sp/>+<sp/>1)<sp/>*<sp/>(<ref refid="classBLProfStats_1a0a0a7ce2c13259d6280d6f82cb4971f7" kindref="member">maxRNumber</ref><sp/>+<sp/>1)<sp/>*<sp/>totalRanges<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>localGAllRanges(sendCount,<sp/>0.0);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>sendCount;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>localGAllRanges[i]<sp/>=<sp/>gAllRanges[myStartIndex<sp/>+<sp/>i];</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>MPI_Allgatherv(localGAllRanges.dataPtr(),<sp/>sendCount,<sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap" kindref="compound">ParallelDescriptor::Mpi_typemap&lt;Real&gt;::type</ref>(),</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gAllRanges.dataPtr(),<sp/>recvCounts.dataPtr(),<sp/>recvDispl.dataPtr(),</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap" kindref="compound">ParallelDescriptor::Mpi_typemap&lt;Real&gt;::type</ref>(),</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">ParallelDescriptor::Communicator</ref>());</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>.size();<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r(0);<sp/>r<sp/>&lt;<sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p].size();<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>(p<sp/>&gt;=<sp/>smallY<sp/>&amp;&amp;<sp/>p<sp/>&lt;=<sp/>bigY))<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>not<sp/>within<sp/>myproc<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t(0);<sp/>t<sp/>&lt;<sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p][r].size();<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>index((p<sp/>*<sp/>(maxRNumber<sp/>+<sp/>1)<sp/>*<sp/>totalRanges<sp/>*<sp/>2)<sp/>+</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(r<sp/>*<sp/>totalRanges<sp/>*<sp/>2)<sp/>+<sp/>(t<sp/>*<sp/>2));<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>index((r<sp/>*<sp/>totalRanges<sp/>*<sp/>2)<sp/>+<sp/>(t<sp/>*<sp/>2)<sp/>+</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p<sp/>*<sp/>(<ref refid="classBLProfStats_1a0a0a7ce2c13259d6280d6f82cb4971f7" kindref="member">maxRNumber</ref><sp/>+<sp/>1)<sp/>*<sp/>totalRanges<sp/>*<sp/>2));</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p][r][t].startTime<sp/>=<sp/>gAllRanges[index];</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p][r][t].stopTime<sp/><sp/>=<sp/>gAllRanges[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a82c334c787872a6bbacabe9a38389224" kindref="member">BL_PROFILE_VAR_STOP</ref>(RPSIRTR_P);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_SERIAL_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>check<sp/>vs<sp/>serial</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>.size();<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r(0);<sp/>r<sp/>&lt;<sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p].size();<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t(0);<sp/>t<sp/>&lt;<sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p][r].size();<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p][r][t].startTime<sp/>!=<sp/>checkRegionTimeRanges[p][r][t].startTime)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>checkRegionTimeRanges<sp/>startTime&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p][r][t].stopTime<sp/>!=<sp/>checkRegionTimeRanges[p][r][t].stopTime)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>checkRegionTimeRanges<sp/>stopTime&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>to<sp/>remove<sp/>the<sp/>last<sp/>noRegion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>.size();<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p][0].<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1ac0bbdd3b8f64770191201e431e16c723" kindref="member">size</ref>()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p][0].back().stopTime<sp/>&lt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>[p][0].pop_back();</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;----::<sp/>regionTimeRanges.size()<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classBLProfStats_1a666b2b4888f161d4346d4a794aba0e31" kindref="member">regionTimeRanges</ref>.size()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(<ref refid="classBLProfStats_1a0a0a7ce2c13259d6280d6f82cb4971f7" kindref="member">maxRNumber</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1a5f25e2c23a4dcf6d5bcadd45d045b619" kindref="member">RegionsProfStats::Include</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FuncStat<sp/>&amp;fs)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>std::set&lt;int&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>binclude(<ref refid="classBLProfStats_1a70374c3c2fee588ba0cdbcdcb80ad103" kindref="member">bDefaultInclude</ref>);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>binclude;</highlight></codeline>
<codeline lineno="512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1a409ca89dc56939d0cbc9155ef274d8dc" kindref="member">RegionsProfStats::AllCallTimesFAB</ref>(<ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref><sp/>&amp;actFab,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;whichFuncName)</highlight></codeline>
<codeline lineno="518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BL_SPACEDIM<sp/>!=<sp/>2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error:<sp/><sp/>RegionsProfStats::AllCallTimesFAB<sp/>only<sp/>supported<sp/>in<sp/>2D.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whichFuncNameInt(-1);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>numbersToFName.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numbersToFName[i]<sp/>==<sp/>whichFuncName)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>whichFuncNameInt<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>whichFuncName<sp/>whichFuncNameInt<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>whichFuncName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><sp/>whichFuncNameInt<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Vector&lt;Real&gt;</ref><sp/>&gt;<sp/>whichFuncAllTimes(dataNProcs);<sp/><sp/></highlight><highlight class="comment">//<sp/>[proc][functime]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>[idb];</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classCommProfStats_1a176ee76d60863bf10f9b663c21c00a38" kindref="member">persistentStreams</ref>){</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a9689a1779e9f7008ced946ab6ff8fa41" kindref="member">ReadBlockNoOpen</ref>(dBlock);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a41c7cecdb09d9a72e30118d78343b48e" kindref="member">ReadBlock</ref>(dBlock);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.vCallStats.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CallStats<sp/>&amp;cs<sp/>=<sp/>dBlock.vCallStats[i];</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.csFNameNumber<sp/>&lt;<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>the<sp/>unused<sp/>cs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1a2232121c4ccb35f8edc71cc8ce1bd244" kindref="member">InTimeRange</ref>(dBlock.proc,<sp/>cs.callTime))<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remappedIndex(fnameRemap[dBlock.proc][cs.csFNameNumber]);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(remappedIndex<sp/>==<sp/>whichFuncNameInt)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numbersToFName[remappedIndex]<sp/>!=<sp/>whichFuncName)<sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(numbersToFName[remappedIndex]);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;****<sp/>Error<sp/>0:<sp/><sp/>fab<sp/>whichFuncName&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>whichFuncAllTimes[dBlock.proc].push_back(cs.stackTime);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a3031f89c0189bd2d8f73b6207e8adfb1" kindref="member">ClearBlock</ref>(dBlock);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>a<sp/>fab<sp/>with<sp/>xdir<sp/>==<sp/>processor<sp/><sp/>ydir<sp/>==<sp/>each<sp/>call<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>needs<sp/>to<sp/>be<sp/>parallelized<sp/>and<sp/>plotfiled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whichFuncNCalls(whichFuncAllTimes[0].<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1ac0bbdd3b8f64770191201e431e16c723" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bSameNCalls(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/>whichFuncAllTimes.size();<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(whichFuncAllTimes[p].<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1ac0bbdd3b8f64770191201e431e16c723" kindref="member">size</ref>()<sp/>!=<sp/>whichFuncNCalls)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;====<sp/>bSameNCalls<sp/>=<sp/>false&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bSameNCalls<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bSameNCalls)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/>actBox(<ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>(0,0),<sp/><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>(dataNProcs<sp/>-<sp/>1,<sp/>whichFuncNCalls<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>actFab.<ref refid="classamrex_1_1FArrayBox_1ae5a4b9b9a64a4c1cfd534bb6eefc6b30" kindref="member">resize</ref>(actBox,<sp/>1);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>actFab.<ref refid="classamrex_1_1BaseFab_1a5f8ebb9050e7ffd02a957d0bdaca9886" kindref="member">setVal</ref>(0.0);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>*dptr<sp/>=<sp/>actFab.<ref refid="classamrex_1_1BaseFab_1ac1817d437a6ca523298e25202dd51705" kindref="member">dataPtr</ref>(0);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nX(actBox.length(<ref refid="AMReX__RegionsProfStats_8cpp_1a0b54508652b2932ee5c008a007ac1b1d" kindref="member">XDIR</ref>)),<sp/>nY(actBox.length(<ref refid="AMReX__RegionsProfStats_8cpp_1a82ff102a1952ad4ab549505b10f24456" kindref="member">YDIR</ref>));</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/>nX;<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnum(0);<sp/>cnum<sp/>&lt;<sp/>nY;<sp/>++cnum)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index((cnum<sp/>*<sp/>nX)<sp/>+<sp/>p);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dptr[index]<sp/>=<sp/>whichFuncAllTimes[p][cnum];</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>actfout(</highlight><highlight class="stringliteral">&quot;whichFuncAllTimes.fab&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>actFab.<ref refid="classamrex_1_1FArrayBox_1abb6e149e86e4063464a54a87b6eb0a98" kindref="member">writeOn</ref>(actfout);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>actfout.close();</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bSameNCalls;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1aa8787ffaa01896a27e94b70384b26071" kindref="member">RegionsProfStats::FillAllCallTimes</ref>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>&gt;<sp/>&amp;allCallTimes,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>whichFuncName,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whichFuncNumber,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/>&amp;procBox)</highlight></codeline>
<codeline lineno="595"><highlight class="normal">{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;RegionsProfStats::FillAllCallTimes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smallY(procBox.<ref refid="classamrex_1_1Box_1a04e076a4688ca383aeaccfcb0bceef60" kindref="member">smallEnd</ref>(<ref refid="AMReX__RegionsProfStats_8cpp_1a82ff102a1952ad4ab549505b10f24456" kindref="member">YDIR</ref>)),<sp/>bigY(procBox.<ref refid="classamrex_1_1Box_1aa2ebf79e721706ee01738c9bb1cc13e7" kindref="member">bigEnd</ref>(<ref refid="AMReX__RegionsProfStats_8cpp_1a82ff102a1952ad4ab549505b10f24456" kindref="member">YDIR</ref>));</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proc;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>[idb];</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>proc<sp/>=<sp/>dBlock.proc;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(proc<sp/>&gt;=<sp/>smallY<sp/>&amp;&amp;<sp/>proc<sp/>&lt;=<sp/>bigY)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>within<sp/>from<sp/>proc<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classCommProfStats_1a176ee76d60863bf10f9b663c21c00a38" kindref="member">persistentStreams</ref>){</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a9689a1779e9f7008ced946ab6ff8fa41" kindref="member">ReadBlockNoOpen</ref>(dBlock,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>only<sp/>read<sp/>trace<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a41c7cecdb09d9a72e30118d78343b48e" kindref="member">ReadBlock</ref>(dBlock,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>------<sp/>only<sp/>read<sp/>trace<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.vCallStats.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CallStats<sp/>&amp;cs<sp/>=<sp/>dBlock.vCallStats[i];</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.csFNameNumber<sp/>&lt;<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>the<sp/>unused<sp/>cs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1a2232121c4ccb35f8edc71cc8ce1bd244" kindref="member">InTimeRange</ref>(dBlock.proc,<sp/>cs.callTime))<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remappedIndex(fnameRemap[dBlock.proc][cs.csFNameNumber]);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(remappedIndex<sp/>==<sp/>whichFuncNumber)<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(numbersToFName[remappedIndex]<sp/>!=<sp/>whichFuncName)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(numbersToFName[remappedIndex]);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;****<sp/>Error<sp/>0:<sp/><sp/>fab<sp/>whichFuncName&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allCallTimes[dBlock.proc].push_back(cs.stackTime);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a3031f89c0189bd2d8f73b6207e8adfb1" kindref="member">ClearBlock</ref>(dBlock);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1aac44ade120289132d039d3301a618e71" kindref="member">RegionsProfStats::CollectFuncStats</ref>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;FuncStat&gt;</ref><sp/>&gt;<sp/>&amp;funcStats)</highlight></codeline>
<codeline lineno="636"><highlight class="normal">{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>funcStats.resize(numbersToFName.size());<sp/><sp/></highlight><highlight class="comment">//<sp/>[fnum][proc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n(0);<sp/>n<sp/>&lt;<sp/>funcStats.size();<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>funcStats[n].resize(dataNProcs);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>[idb];</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a41c7cecdb09d9a72e30118d78343b48e" kindref="member">ReadBlock</ref>(dBlock);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.vCallStats.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CallStats<sp/>&amp;cs<sp/>=<sp/>dBlock.vCallStats[i];</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.csFNameNumber<sp/>&lt;<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>the<sp/>unused<sp/>cs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1a2232121c4ccb35f8edc71cc8ce1bd244" kindref="member">InTimeRange</ref>(dBlock.proc,<sp/>cs.callTime))<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remappedIndex(fnameRemap[dBlock.proc][cs.csFNameNumber]);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcStats[remappedIndex][dBlock.proc].totalTime<sp/>+=<sp/>cs.stackTime;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcStats[remappedIndex][dBlock.proc].nCalls<sp/><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a3031f89c0189bd2d8f73b6207e8adfb1" kindref="member">ClearBlock</ref>(dBlock);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1ad8e5ab01ec36f0207ed5e6efaee602c8" kindref="member">RegionsProfStats::WriteSummary</ref>(std::ostream<sp/>&amp;ios,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bwriteavg,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whichProc,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>graphTopPct)</highlight></codeline>
<codeline lineno="665"><highlight class="normal">{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>Real<sp/>timeMin(<ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::numeric_limits&lt;Real&gt;::max</ref>());</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>Real<sp/>timeMax(-<ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::numeric_limits&lt;Real&gt;::max</ref>());</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::string&gt;</ref><sp/>fNames(numbersToFName.size());</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>fNames.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fNames[i]<sp/>=<sp/>numbersToFName[i];</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;BLProfiler::CallStats&gt;</ref><sp/>vCallStatsAllOneProc;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Vector&lt;FuncStat&gt;</ref><sp/>&gt;<sp/>funcStats(fNames.size());<sp/><sp/></highlight><highlight class="comment">//<sp/>[fnum][proc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n(0);<sp/>n<sp/>&lt;<sp/>funcStats.size();<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>funcStats[n].resize(dataNProcs);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>[idb];</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a41c7cecdb09d9a72e30118d78343b48e" kindref="member">ReadBlock</ref>(dBlock);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.proc<sp/>==<sp/>whichProc)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.vCallStats.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>here<sp/>we<sp/>have<sp/>to<sp/>add<sp/>only<sp/>the<sp/>part<sp/>of<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>callstat<sp/>that<sp/>intersects<sp/>the<sp/>region<sp/>time<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CallStats<sp/>&amp;cs<sp/>=<sp/>dBlock.vCallStats[i];</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>TimeRange<sp/>tRangeFull(cs.callTime,<sp/>cs.callTime<sp/>+<sp/>cs.totalTime);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;TimeRange&gt;<sp/>intersectList<sp/>=</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a286eebba7a2e37000c01614ea347b24c" kindref="member">RegionsProfStats::RangeIntersection</ref>(<ref refid="classBLProfStats_1a280bcf247ab0b852e9e87cb757388f6b" kindref="member">filterTimeRanges</ref>[whichProc],<sp/>tRangeFull);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;TimeRange&gt;::iterator<sp/>tri;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(tri<sp/>=<sp/>intersectList.begin();<sp/>tri<sp/>!=<sp/>intersectList.end();<sp/>++tri)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CallStats<sp/>csis(dBlock.vCallStats[i]);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>csis.callTime<sp/><sp/>=<sp/>tri-&gt;startTime;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>csis.totalTime<sp/>=<sp/>tri-&gt;stopTime<sp/>-<sp/>tri-&gt;startTime;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1a2232121c4ccb35f8edc71cc8ce1bd244" kindref="member">InTimeRange</ref>(dBlock.proc,<sp/>cs.callTime))<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vCallStatsAllOneProc.push_back(csis);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.vCallStats.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CallStats<sp/>&amp;cs<sp/>=<sp/>dBlock.vCallStats[i];</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.csFNameNumber<sp/>&lt;<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>the<sp/>unused<sp/>cs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1a2232121c4ccb35f8edc71cc8ce1bd244" kindref="member">InTimeRange</ref>(dBlock.proc,<sp/>cs.callTime))<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remappedIndex(fnameRemap[dBlock.proc][cs.csFNameNumber]);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcStats[remappedIndex][dBlock.proc].totalTime<sp/>+=<sp/>cs.stackTime;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funcStats[remappedIndex][dBlock.proc].nCalls<sp/><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>timeMin<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" kindref="member">std::min</ref>(timeMin,<sp/>dBlock.timeMin);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>timeMax<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(timeMax,<sp/>dBlock.timeMax);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a3031f89c0189bd2d8f73b6207e8adfb1" kindref="member">ClearBlock</ref>(dBlock);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>Real<sp/>calcRunTime(timeMax<sp/>-<sp/>timeMin);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>Real<sp/>rangeRunTime(0.0);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>BLProfiler::SetRunTime(calcRunTime);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::list&lt;TimeRange&gt;::iterator<sp/>trisum<sp/>=<sp/><ref refid="classBLProfStats_1a280bcf247ab0b852e9e87cb757388f6b" kindref="member">filterTimeRanges</ref>[whichProc].<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trisum<sp/>!=<sp/><ref refid="classBLProfStats_1a280bcf247ab0b852e9e87cb757388f6b" kindref="member">filterTimeRanges</ref>[whichProc].end();<sp/>++trisum)</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>rangeRunTime<sp/>+=<sp/>trisum-&gt;stopTime<sp/>-<sp/>trisum-&gt;startTime;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;+++++++++++++++<sp/>calcRunTime<sp/>rangeRunTime<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>calcRunTime<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>rangeRunTime<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>BLProfiler::ProfStats&gt;<sp/>mProfStats;<sp/><sp/></highlight><highlight class="comment">//<sp/>[fname,<sp/>pstats]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1abf61acca5a480f47841ff87d3fc31536" kindref="member">CollectMProfStats</ref>(mProfStats,<sp/>funcStats,<sp/>fNames,<sp/>calcRunTime,<sp/>whichProc);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(graphTopPct)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a171596246077e8bb3d38d0e3a513c481" kindref="member">GraphTopPct</ref>(mProfStats,<sp/>funcStats,<sp/>fNames,<sp/>rangeRunTime,<sp/>dataNProcs,<sp/><ref refid="classBLProfStats_1aa9cbfb5bc0b3ad413e06060864eed0f8" kindref="member">gPercent</ref>);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_TRACE_PROFILING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1aaae16c4ac3245574456ee8dc48c261be" kindref="member">MakeFuncPctTimesMF</ref>(funcStats,<sp/>fNames,<sp/>mProfStats,<sp/>rangeRunTime,<sp/>dataNProcs);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>writeAvg(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>writeInclusive(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>BLProfilerUtils::WriteStats(ios,<sp/>mProfStats,<sp/>mFNameNumbersPerProc[whichProc],</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vCallStatsAllOneProc,<sp/>writeAvg,<sp/>writeInclusive);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1af2a2ac125d7c17979147665a1e1ee685" kindref="member">RegionsProfStats::CheckRegionsData</ref>()</highlight></codeline>
<codeline lineno="755"><highlight class="normal">{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bIOP(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>());</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myProc(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>());</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>myProc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;----------------------<sp/>checking<sp/>regions<sp/>data.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(dataNProcs);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(<ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>.size());</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a943ee05343b5b1f9139dcc582078b9ef" kindref="member">SHOWVAL</ref>(<ref refid="classBLProfStats_1a0a0a7ce2c13259d6280d6f82cb4971f7" kindref="member">maxRNumber</ref>);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>myProc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;----&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Vector&lt;Vector&lt;TimeRange&gt;</ref><sp/>&gt;<sp/>&gt;<sp/>checkRegionTimeRanges;<sp/><sp/></highlight><highlight class="comment">//<sp/>[proc][rnum][range]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Vector&lt;int&gt;</ref>&gt;<sp/>regionTimeRangesCount;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[region][proc]<sp/>=<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>checkRegionTimeRanges.resize(dataNProcs);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>regionTimeRangesCount.resize(<ref refid="classBLProfStats_1a0a0a7ce2c13259d6280d6f82cb4971f7" kindref="member">maxRNumber</ref>+1);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/>checkRegionTimeRanges.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>checkRegionTimeRanges[p].resize(<ref refid="classBLProfStats_1a0a0a7ce2c13259d6280d6f82cb4971f7" kindref="member">maxRNumber</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p(0);<sp/>p<sp/>&lt;<sp/>regionTimeRangesCount.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++p)<sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>regionTimeRangesCount[p].resize(dataNProcs,<sp/>0);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>[idb];</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classBLProfStats_1acca0fea9f472ea1fdb67cbebe9b93d5c" kindref="member">verbose</ref>)<sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>myProc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;RegionsProfProc<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dBlock.proc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>nTraceStats<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>dBlock.nTraceStats<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>nRSS<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dBlock.nRSS<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>fileName<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>dBlock.fileName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>seekpos<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>dBlock.seekpos<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a41c7cecdb09d9a72e30118d78343b48e" kindref="member">ReadBlock</ref>(dBlock,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>dont<sp/>need<sp/>to<sp/>read<sp/>the<sp/>trace<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.rStartStop.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::RStartStop<sp/>&amp;rss<sp/>=<sp/>dBlock.rStartStop[i];</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rss.rssRNumber<sp/>&gt;<sp/>(<ref refid="classBLProfStats_1a0a0a7ce2c13259d6280d6f82cb4971f7" kindref="member">maxRNumber</ref><sp/>+<sp/>1))</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bIOP)</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;***RegionsProfStats::CheckRegionsData:<sp/>region<sp/>number<sp/>is<sp/>greater<sp/>than<sp/>max<sp/>number:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>rss.rssRNumber<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classBLProfStats_1a0a0a7ce2c13259d6280d6f82cb4971f7" kindref="member">maxRNumber</ref><sp/>+<sp/>1<sp/>&lt;&lt;<sp/>endl;<sp/></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(rss.rssStart)<sp/>{<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regionTimeRangesCount[rss.rssRNumber][dBlock.proc]++;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkRegionTimeRanges[dBlock.proc][rss.rssRNumber].push_back(TimeRange(rss.rssTime,<sp/>-1.0));</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regionTimeRangesCount[rss.rssRNumber][dBlock.proc]++;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkRegionTimeRanges[dBlock.proc][rss.rssRNumber].back().stopTime<sp/>=<sp/>rss.rssTime;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a3031f89c0189bd2d8f73b6207e8adfb1" kindref="member">ClearBlock</ref>(dBlock);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>myProc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;----------------------<sp/>checking<sp/>regions<sp/>consistency.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r(0);<sp/>r&lt;regionTimeRangesCount.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classBLProfStats_1acca0fea9f472ea1fdb67cbebe9b93d5c" kindref="member">verbose</ref>)</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Region<sp/>#<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>r<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>has<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>regionTimeRangesCount[r][0]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>piece(s)<sp/>of<sp/>time<sp/>data.<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n(0);<sp/>n&lt;regionTimeRangesCount[r].<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regionTimeRangesCount[r][0]<sp/>!=<sp/>regionTimeRangesCount[r][n])</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;***Region<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>r<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>was<sp/>called<sp/>a<sp/>different<sp/>number<sp/>of<sp/>times<sp/>on<sp/>processor<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>regionTimeRangesCount[r][0]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>!=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>regionTimeRangesCount[r][n]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/>myProc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;----------------------<sp/>checking<sp/>time<sp/>range<sp/>consistency.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n(0);<sp/>n&lt;checkRegionTimeRanges.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r(0);<sp/>r&lt;checkRegionTimeRanges[n].<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++r)<sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t(0);<sp/>t&lt;checkRegionTimeRanges[n][r].<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>()-1;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="classBLProfStats_1acca0fea9f472ea1fdb67cbebe9b93d5c" kindref="member">verbose</ref>)<sp/>&amp;&amp;<sp/>(n<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;RTR[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;][&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>r<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;][&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>checkRegionTimeRanges[n][r][t]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(checkRegionTimeRanges[n][r][t].startTime<sp/>&gt;<sp/>checkRegionTimeRanges[n][r][t].stopTime)</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;***Start<sp/>time<sp/>for<sp/>RTR[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;][&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>r<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;][&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>t<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>is<sp/>greater<sp/>than<sp/>stop<sp/>time<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>checkRegionTimeRanges[n][r][t]<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1a0fca3e030775e84a7aead8f2c0930e35" kindref="member">RegionsProfStats::WriteHTML</ref>(std::ostream<sp/>&amp;csHTMLFile,</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>simpleCombine,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whichProc)</highlight></codeline>
<codeline lineno="842"><highlight class="normal">{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>BLProfiler::CallStats<sp/>*combCallStats<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::string&gt;</ref><sp/>fNumberNames(mFNameNumbersPerProc[whichProc].<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1ac0bbdd3b8f64770191201e431e16c723" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::map&lt;std::string,<sp/>int&gt;::const_iterator<sp/>it<sp/>=<sp/>mFNameNumbersPerProc[whichProc].<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>mFNameNumbersPerProc[whichProc].end();<sp/>++it)</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>fNumberNames[it-&gt;second]<sp/>=<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>Real<sp/>rangeRunTime(0.0);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::list&lt;TimeRange&gt;::iterator<sp/>trisum<sp/>=<sp/><ref refid="classBLProfStats_1a280bcf247ab0b852e9e87cb757388f6b" kindref="member">filterTimeRanges</ref>[whichProc].<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trisum<sp/>!=<sp/><ref refid="classBLProfStats_1a280bcf247ab0b852e9e87cb757388f6b" kindref="member">filterTimeRanges</ref>[whichProc].end();<sp/>++trisum)</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>rangeRunTime<sp/>+=<sp/>trisum-&gt;stopTime<sp/>-<sp/>trisum-&gt;startTime;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;rangeRunTime<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rangeRunTime<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>Real<sp/>colorLinkPct(0.05),<sp/>colorLinkTime(rangeRunTime);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>std::stack&lt;Real&gt;<sp/>colorLinkTimeStack;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>colorLinkTimeStack.push(rangeRunTime);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>to<sp/>html<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>std::stack&lt;std::string&gt;<sp/>listEnds;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;!DOCTYPE<sp/>html&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;html&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;head&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;title&gt;Call<sp/>Tree&lt;/title&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/head&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;body&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;script<sp/>type=\&quot;text/javascript\&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;function<sp/>collapse(id)<sp/>{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>var<sp/>elem<sp/>=<sp/>document.getElementById(id);&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>if(elem.style.display<sp/>==<sp/>&apos;&apos;)<sp/>{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>elem.style.display<sp/>=<sp/>&apos;none&apos;;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>else<sp/>{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>elem.style.display<sp/>=<sp/>&apos;&apos;;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/script&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;h3&gt;Function<sp/>call<sp/>times<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(function<sp/>number<sp/>::<sp/>function<sp/>name<sp/>::<sp/>inclusive<sp/>time<sp/>::<sp/>exclusive<sp/>time<sp/>::<sp/>1-e/i<sp/>%<sp/>::<sp/>ncalls<sp/>::<sp/>callstackdepth<sp/>::<sp/>call<sp/>time)&lt;/h3&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;ul&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>listEnds.push(</highlight><highlight class="stringliteral">&quot;&lt;/ul&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>next<sp/>two<sp/>lines<sp/>will<sp/>indent<sp/>the<sp/>html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>IcsHTMLFile<sp/>for(int<sp/>id(0);<sp/>id<sp/>&lt;=<sp/>listEnds.size();<sp/>++id)<sp/>csHTMLFile<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;;<sp/>csHTMLFile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>IIcsHTMLFile<sp/>for(int<sp/>id(0);<sp/>id<sp/>&lt;<sp/>listEnds.size();<sp/>++id)<sp/>csHTMLFile<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;;<sp/>csHTMLFile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IcsHTMLFile<sp/>csHTMLFile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IIcsHTMLFile<sp/>csHTMLFile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBlocks(0);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>[idb];</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.proc<sp/>==<sp/>whichProc)<sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++nBlocks;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;************<sp/><sp/>nBlocks<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nBlocks<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bFirstBlock(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>bLastBlock(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeNumber(-1);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>BLProfiler::CallStats<sp/>lastFlushedCS;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>[idb];</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.proc<sp/>==<sp/>whichProc)<sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(--nBlocks<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bLastBlock<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a41c7cecdb09d9a72e30118d78343b48e" kindref="member">ReadBlock</ref>(dBlock,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>only<sp/>the<sp/>traces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;BLProfiler::CallStats&gt;</ref><sp/>&amp;vCallTrace<sp/>=<sp/>dBlock.vCallStats;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;vCallTrace.size()<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vCallTrace.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>bFirstBlock)<sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vCallTrace[0]<sp/>=<sp/>lastFlushedCS;<sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>to<sp/>the<sp/>unused<sp/>cs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iCT(0);<sp/>iCT<sp/>&lt;<sp/>vCallTrace.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++iCT)<sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>++nodeNumber;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CallStats<sp/>&amp;cs<sp/>=<sp/>vCallTrace[iCT];</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.callStackDepth<sp/>&lt;<sp/>0<sp/>||<sp/>cs.csFNameNumber<sp/>&lt;<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>the<sp/>unused<sp/>cs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.nCSCalls<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count(0);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(count++<sp/>&lt;<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;DDDDDDDDDD<sp/>cs.nCalls<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cs.nCSCalls<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fNumberNames[cs.csFNameNumber]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iCT<sp/>==<sp/>vCallTrace.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(combCallStats<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a2587ebcf4e0d6a093b8c88db7a83cadf" kindref="member">PRINTCS</ref>((*combCallStats))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>combCallStats;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bLastBlock)<sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a2587ebcf4e0d6a093b8c88db7a83cadf" kindref="member">PRINTCS</ref>(cs)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n(0);<sp/>n<sp/>&lt;<sp/>cs.callStackDepth;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>listEnds.empty())<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1ad95a90df3183f801a5e0bac586118388" kindref="member">IIcsHTMLFile</ref><sp/>&lt;&lt;<sp/>listEnds.top()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listEnds.pop();</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WriteHTML::0:<sp/><sp/>listEnds.empty():<sp/><sp/>csd<sp/>n<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>cs.callStackDepth<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>listEnds.empty())<sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1ad95a90df3183f801a5e0bac586118388" kindref="member">IIcsHTMLFile</ref><sp/>&lt;&lt;<sp/>listEnds.top()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listEnds.pop();</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WriteHTML::1:<sp/><sp/>listEnds.empty():<sp/><sp/>csd<sp/>n<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>cs.callStackDepth<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>save<sp/>the<sp/>last<sp/>calltrace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastFlushedCS<sp/>=<sp/>cs;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CallStats<sp/>&amp;csNext<sp/>=<sp/>vCallTrace[iCT<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(csNext.callStackDepth<sp/>&gt;<sp/>cs.callStackDepth)<sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(combCallStats<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a2587ebcf4e0d6a093b8c88db7a83cadf" kindref="member">PRINTCS</ref>((*combCallStats))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>combCallStats;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listEnds.push(</highlight><highlight class="stringliteral">&quot;&lt;/li&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorLinkTime<sp/>=<sp/>colorLinkTimeStack.top();</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorLinkTimeStack.push(cs.totalTime);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.totalTime<sp/>&gt;<sp/>colorLinkTime<sp/>*<sp/>colorLinkPct)<sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;a<sp/>style=\&quot;color:#800000\&quot;<sp/>href=\&quot;javascript:void(0)\&quot;<sp/>onclick=\&quot;collapse(&apos;node&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>nodeNumber<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;)\&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a2587ebcf4e0d6a093b8c88db7a83cadf" kindref="member">PRINTCS</ref>(cs)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/a&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;a<sp/>href=\&quot;javascript:void(0)\&quot;<sp/>onclick=\&quot;collapse(&apos;node&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>nodeNumber<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;)\&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a2587ebcf4e0d6a093b8c88db7a83cadf" kindref="member">PRINTCS</ref>(cs)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/a&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.totalTime<sp/>&gt;<sp/>colorLinkTime<sp/>*<sp/>colorLinkPct)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>expand<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;ul<sp/>id=\&quot;node&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nodeNumber<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>style=\&quot;display:\&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;ul<sp/>id=\&quot;node&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nodeNumber<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>style=\&quot;display:none\&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listEnds.push(</highlight><highlight class="stringliteral">&quot;&lt;/ul&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(csNext.callStackDepth<sp/>==<sp/>cs.callStackDepth)<sp/>{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(simpleCombine)<sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iCT<sp/>&lt;<sp/><sp/>vCallTrace.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>()<sp/>-<sp/>2<sp/>&amp;&amp;<sp/>cs.csFNameNumber<sp/>==<sp/>csNext.csFNameNumber)<sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(combCallStats<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>BLProfiler::CallStats(cs);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats-&gt;nCSCalls<sp/><sp/>+=<sp/>cs.nCSCalls;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats-&gt;totalTime<sp/>+=<sp/>cs.totalTime;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats-&gt;stackTime<sp/>+=<sp/>cs.stackTime;</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(combCallStats<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.csFNameNumber<sp/>==<sp/>combCallStats-&gt;csFNameNumber)<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats-&gt;nCSCalls<sp/><sp/>+=<sp/>cs.nCSCalls;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats-&gt;totalTime<sp/>+=<sp/>cs.totalTime;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats-&gt;stackTime<sp/>+=<sp/>cs.stackTime;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a2587ebcf4e0d6a093b8c88db7a83cadf" kindref="member">PRINTCS</ref>((*combCallStats))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>combCallStats;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a2587ebcf4e0d6a093b8c88db7a83cadf" kindref="member">PRINTCS</ref>(cs)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a2587ebcf4e0d6a093b8c88db7a83cadf" kindref="member">PRINTCS</ref>(cs)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(combCallStats<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.csFNameNumber<sp/>==<sp/>combCallStats-&gt;csFNameNumber)<sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats-&gt;nCSCalls<sp/><sp/>+=<sp/>cs.nCSCalls;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats-&gt;totalTime<sp/>+=<sp/>cs.totalTime;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats-&gt;stackTime<sp/>+=<sp/>cs.stackTime;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a2587ebcf4e0d6a093b8c88db7a83cadf" kindref="member">PRINTCS</ref>((*combCallStats))<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>combCallStats;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a2587ebcf4e0d6a093b8c88db7a83cadf" kindref="member">PRINTCS</ref>(cs)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n(0);<sp/>n<sp/>&lt;<sp/>cs.callStackDepth<sp/>-<sp/>csNext.callStackDepth;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1ad95a90df3183f801a5e0bac586118388" kindref="member">IIcsHTMLFile</ref><sp/>&lt;&lt;<sp/>listEnds.top()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listEnds.pop();</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1ad95a90df3183f801a5e0bac586118388" kindref="member">IIcsHTMLFile</ref><sp/>&lt;&lt;<sp/>listEnds.top()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listEnds.pop();</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorLinkTimeStack.pop();</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colorLinkTime<sp/>=<sp/>colorLinkTimeStack.top();</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bFirstBlock<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(listEnds.size()<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error:<sp/><sp/>listEnds.size()<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>listEnds.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/>listEnds.top()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>listEnds.pop();</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/body&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/html&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1a27a90e8d35f18f048f53f6af29caaa92" kindref="member">RegionsProfStats::CreateVCallStats</ref>(CallTreeNode<sp/>&amp;callTree,</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;BLProfiler::CallStats&gt;</ref><sp/>&amp;vCallStatsNC)</highlight></codeline>
<codeline lineno="1062"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>std::map&lt;int,<sp/>CallTreeNode&gt;::iterator<sp/>miter;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(callTree.fnameNumber<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>vCallStatsNC.push_back(BLProfiler::CallStats(callTree.stackDepth,</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callTree.fnameNumber,<sp/>callTree.nCalls,</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callTree.totalTime,<sp/>callTree.stackTime,<sp/>0.0));</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(miter<sp/>=<sp/>callTree.calledFunctions.begin();<sp/>miter<sp/>!=<sp/>callTree.calledFunctions.end();<sp/>++miter)<sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>CreateVCallStats(miter-&gt;second,<sp/>vCallStatsNC);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1a4d91df9b423715cc4ac9b197bcad14ff" kindref="member">RegionsProfStats::PrintCallTreeNode</ref>(CallTreeNode<sp/>&amp;callTree,</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::string&gt;</ref><sp/>&amp;fNumberNames)</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>std::map&lt;int,<sp/>CallTreeNode&gt;::iterator<sp/>miter;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(callTree.fnameNumber<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;PCTN:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>fNumberNames[callTree.fnameNumber]</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>stackDepth<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>callTree.stackDepth</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>nCalls<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>callTree.nCalls<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>stackTime<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>callTree.stackTime<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(miter<sp/>=<sp/>callTree.calledFunctions.begin();<sp/>miter<sp/>!=<sp/>callTree.calledFunctions.end();<sp/>++miter)<sp/>{</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintCallTreeNode(miter-&gt;second,<sp/>fNumberNames);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1a279acba4a2814e23bc08c80031c73401" kindref="member">RegionsProfStats::WriteHTMLNC</ref>(std::ostream<sp/>&amp;csHTMLFile,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whichProc)</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::string&gt;</ref><sp/>fNumberNames(mFNameNumbersPerProc[whichProc].<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1ac0bbdd3b8f64770191201e431e16c723" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::map&lt;std::string,<sp/>int&gt;::const_iterator<sp/>it<sp/>=<sp/>mFNameNumbersPerProc[whichProc].<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>mFNameNumbersPerProc[whichProc].end();<sp/>++it)</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>fNumberNames[it-&gt;second]<sp/>=<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>to<sp/>html<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>std::stack&lt;std::string&gt;<sp/>listEnds;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;!DOCTYPE<sp/>html&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;html&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;head&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;title&gt;Call<sp/>Tree&lt;/title&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/head&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;body&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;script<sp/>type=\&quot;text/javascript\&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;function<sp/>collapse(id)<sp/>{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>var<sp/>elem<sp/>=<sp/>document.getElementById(id);&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>if(elem.style.display<sp/>==<sp/>&apos;&apos;)<sp/>{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>elem.style.display<sp/>=<sp/>&apos;none&apos;;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}<sp/>else<sp/>{&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>elem.style.display<sp/>=<sp/>&apos;&apos;;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>}&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/script&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;h3&gt;Function<sp/>calls<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(function<sp/>number<sp/>::<sp/>function<sp/>name<sp/>::<sp/>inclusive<sp/>time<sp/>::<sp/>exclusive<sp/>time<sp/>::<sp/>1-e/i<sp/>%<sp/>::<sp/>ncalls<sp/>::<sp/>callstackdepth)&lt;/h3&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;ul&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/>listEnds.push(</highlight><highlight class="stringliteral">&quot;&lt;/ul&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>next<sp/>two<sp/>lines<sp/>will<sp/>indent<sp/>the<sp/>html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>IcsHTMLFile<sp/>for(int<sp/>id(0);<sp/>id<sp/>&lt;=<sp/>listEnds.size();<sp/>++id)<sp/>csHTMLFile<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;;<sp/>csHTMLFile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>IIcsHTMLFile<sp/>for(int<sp/>id(0);<sp/>id<sp/>&lt;<sp/>listEnds.size();<sp/>++id)<sp/>csHTMLFile<sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>&quot;;<sp/>csHTMLFile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IcsHTMLFile<sp/>csHTMLFile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IIcsHTMLFile<sp/>csHTMLFile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/>CallTreeNode<sp/>callTree;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/>callTree.stackDepth<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/>CallTreeNode<sp/>*currentCTN(&amp;callTree);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/>std::map&lt;int,<sp/>CallTreeNode&gt;::iterator<sp/>miter;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/>std::stack&lt;CallTreeNode<sp/>*&gt;<sp/>ctStack;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>ctStack.push(currentCTN);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBlocks(0);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>[idb];</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.proc<sp/>==<sp/>whichProc)<sp/>{</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++nBlocks;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;************<sp/><sp/>nBlocks<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nBlocks<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bFirstBlock(</highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>bLastBlock(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>bAddFirstNode(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/>BLProfiler::CallStats<sp/>lastFlushedCS;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalCalls(0);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>[idb];</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.proc<sp/>==<sp/>whichProc)<sp/>{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(--nBlocks<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bLastBlock<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a41c7cecdb09d9a72e30118d78343b48e" kindref="member">ReadBlock</ref>(dBlock,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>only<sp/>the<sp/>traces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;BLProfiler::CallStats&gt;</ref><sp/>&amp;vCallTrace<sp/>=<sp/>dBlock.vCallStats;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;vCallTrace.size()<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>vCallTrace.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>bFirstBlock)<sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>vCallTrace[0]<sp/>=<sp/>lastFlushedCS;<sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>to<sp/>the<sp/>unused<sp/>cs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iCT(0);<sp/>iCT<sp/>&lt;<sp/>vCallTrace.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++iCT)<sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CallStats<sp/>&amp;cs<sp/>=<sp/>vCallTrace[iCT];</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.callStackDepth<sp/>&lt;<sp/>0<sp/>||<sp/>cs.csFNameNumber<sp/>&lt;<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>the<sp/>unused<sp/>cs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bAddFirstNode)<sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>add<sp/>the<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;std::map&lt;int,<sp/>CallTreeNode&gt;::iterator,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;<sp/>retval;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>currentCTN-&gt;calledFunctions.insert(</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;int,<sp/>CallTreeNode&gt;(cs.csFNameNumber,<sp/>CallTreeNode()));</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>miter<sp/>=<sp/>retval.first;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(retval.second)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>value<sp/>inserted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>miter-&gt;second.fnameNumber<sp/>=<sp/>cs.csFNameNumber;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>miter-&gt;second.stackDepth<sp/><sp/>=<sp/>cs.callStackDepth;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>miter-&gt;second.nCalls<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>miter-&gt;second.totalTime<sp/>=<sp/>cs.totalTime;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>miter-&gt;second.stackTime<sp/>=<sp/>cs.stackTime;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>value<sp/>existed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>miter-&gt;second.nCalls<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>miter-&gt;second.totalTime<sp/>+=<sp/>cs.totalTime;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>miter-&gt;second.stackTime<sp/>+=<sp/>cs.stackTime;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>++totalCalls;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>bAddFirstNode<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iCT<sp/>==<sp/>vCallTrace.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bLastBlock)<sp/>{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastFlushedCS<sp/>=<sp/>cs;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bAddFirstNode<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CallStats<sp/>&amp;csNext<sp/>=<sp/>vCallTrace[iCT<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(csNext.callStackDepth<sp/>&gt;<sp/>cs.callStackDepth)<sp/>{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentCTN<sp/>=<sp/>&amp;(miter-&gt;second);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(currentCTN<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctStack.push(currentCTN);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(csNext.callStackDepth<sp/>==<sp/>cs.callStackDepth)<sp/>{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>node<sp/>added<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s(0);<sp/>s<sp/>&lt;<sp/>cs.callStackDepth<sp/><sp/>-<sp/>csNext.callStackDepth;<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctStack.pop();</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentCTN<sp/>=<sp/>ctStack.top();</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bFirstBlock<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;++++++++++<sp/>totalCalls<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>totalCalls<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;BLProfiler::CallStats&gt;</ref><sp/>vCallStatsNC;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/>CreateVCallStats(callTree,<sp/>vCallStatsNC);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;BLProfiler::CallStats&gt;</ref><sp/>&amp;vCallTrace<sp/>=<sp/>vCallStatsNC;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeNumber(-1);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iCT(0);<sp/>iCT<sp/>&lt;<sp/>vCallTrace.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++iCT)<sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>++nodeNumber;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CallStats<sp/>&amp;cs<sp/>=<sp/>vCallTrace[iCT];</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.callStackDepth<sp/>&lt;<sp/>0<sp/>||<sp/>cs.csFNameNumber<sp/>&lt;<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>the<sp/>unused<sp/>cs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(iCT<sp/>==<sp/>vCallTrace.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a2ae7e4605ef004b80257a95621e5cc12" kindref="member">PRINTCSNC</ref>(cs)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n(0);<sp/>n<sp/>&lt;<sp/>cs.callStackDepth;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>listEnds.empty())<sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1ad95a90df3183f801a5e0bac586118388" kindref="member">IIcsHTMLFile</ref><sp/>&lt;&lt;<sp/>listEnds.top()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listEnds.pop();</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WriteHTMLNC::0:<sp/><sp/>listEnds.empty():<sp/><sp/>csd<sp/>n<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>cs.callStackDepth<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>listEnds.empty())<sp/>{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1ad95a90df3183f801a5e0bac586118388" kindref="member">IIcsHTMLFile</ref><sp/>&lt;&lt;<sp/>listEnds.top()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listEnds.pop();</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WriteHTMLNC::1:<sp/><sp/>listEnds.empty():<sp/><sp/>csd<sp/>n<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>cs.callStackDepth<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CallStats<sp/>&amp;csNext<sp/>=<sp/>vCallTrace[iCT<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(csNext.callStackDepth<sp/>&gt;<sp/>cs.callStackDepth)<sp/>{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listEnds.push(</highlight><highlight class="stringliteral">&quot;&lt;/li&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;a<sp/>href=\&quot;javascript:void(0)\&quot;<sp/>onclick=\&quot;collapse(&apos;node&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>nodeNumber<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;)\&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a2ae7e4605ef004b80257a95621e5cc12" kindref="member">PRINTCSNC</ref>(cs)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/a&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.callStackDepth<sp/>&lt;<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;ul<sp/>id=\&quot;node&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nodeNumber<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>style=\&quot;display:\&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;ul<sp/>id=\&quot;node&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nodeNumber<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>style=\&quot;display:none\&quot;&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listEnds.push(</highlight><highlight class="stringliteral">&quot;&lt;/ul&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(csNext.callStackDepth<sp/>==<sp/>cs.callStackDepth)<sp/>{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a2ae7e4605ef004b80257a95621e5cc12" kindref="member">PRINTCSNC</ref>(cs)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a135bd2d9565d0592c998a6457d5c5dc5" kindref="member">IcsHTMLFile</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a2ae7e4605ef004b80257a95621e5cc12" kindref="member">PRINTCSNC</ref>(cs)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/li&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n(0);<sp/>n<sp/>&lt;<sp/>cs.callStackDepth<sp/>-<sp/>csNext.callStackDepth;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>listEnds.empty())<sp/>{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1ad95a90df3183f801a5e0bac586118388" kindref="member">IIcsHTMLFile</ref><sp/>&lt;&lt;<sp/>listEnds.top()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listEnds.pop();</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WriteHTMLNC::2:<sp/><sp/>listEnds.empty():<sp/><sp/>csd<sp/>n<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>cs.callStackDepth<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>listEnds.empty())<sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1ad95a90df3183f801a5e0bac586118388" kindref="member">IIcsHTMLFile</ref><sp/>&lt;&lt;<sp/>listEnds.top()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listEnds.pop();</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WriteHTMLNC::3:<sp/><sp/>listEnds.empty():<sp/><sp/>csd<sp/>n<sp/>=<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>cs.callStackDepth<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(listEnds.size()<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****<sp/>Error:<sp/><sp/>listEnds.size()<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>listEnds.size()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/>listEnds.top()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>listEnds.pop();</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/body&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>csHTMLFile<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/html&gt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRINTCSTT(IOS,<sp/>CS,<sp/>DEL)<sp/>for(int<sp/>indent(0);<sp/>indent<sp/>&lt;<sp/>CS.callStackDepth;<sp/>++indent)<sp/>\</highlight></codeline>
<codeline lineno="1314"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>IOS<sp/>&lt;&lt;<sp/>&quot;---|&quot;;<sp/>}<sp/>IOS<sp/>&lt;&lt;<sp/>DEL<sp/>&lt;&lt;<sp/>CS.csFNameNumber<sp/>\</highlight></codeline>
<codeline lineno="1315"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>DEL<sp/>&lt;&lt;<sp/>fNumberNames[CS.csFNameNumber]<sp/>&lt;&lt;<sp/>DEL<sp/>&lt;&lt;<sp/>CS.totalTime<sp/>&lt;&lt;<sp/>DEL<sp/>&lt;&lt;<sp/>CS.stackTime<sp/>\</highlight></codeline>
<codeline lineno="1316"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>DEL<sp/>&lt;&lt;<sp/>CS.nCSCalls<sp/><sp/>&lt;&lt;<sp/>DEL<sp/>&lt;&lt;<sp/>CS.callStackDepth<sp/>&lt;&lt;<sp/>DEL<sp/>&lt;&lt;<sp/>CS.callTime<sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1ada5474a33c2271c7ad139ccff508399a" kindref="member">RegionsProfStats::WriteTextTrace</ref>(std::ostream<sp/>&amp;ios,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>simpleCombine,</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whichProc,<sp/>std::string<sp/>delimString)</highlight></codeline>
<codeline lineno="1321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::string&gt;</ref><sp/>fNumberNames(mFNameNumbersPerProc[whichProc].<ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1ac0bbdd3b8f64770191201e431e16c723" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::map&lt;std::string,<sp/>int&gt;::const_iterator<sp/>it<sp/>=<sp/>mFNameNumbersPerProc[whichProc].<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">begin</ref>();</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>mFNameNumbersPerProc[whichProc].end();<sp/>++it)</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>fNumberNames[it-&gt;second]<sp/>=<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/>ios<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Text<sp/>Trace<sp/><sp/>(function<sp/>number<sp/>::<sp/>function<sp/>name<sp/>::<sp/>inclusive<sp/>time<sp/>::<sp/>exclusive<sp/>time<sp/>::<sp/>ncalls<sp/>::<sp/>callstackdepth<sp/>::<sp/>call<sp/>time)\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/>ios<sp/>&lt;&lt;<sp/>std::setprecision(16);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(simpleCombine)<sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>BLProfiler::CallStats<sp/>*combCallStats<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>[idb];</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.proc<sp/>==<sp/>whichProc)<sp/>{</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a41c7cecdb09d9a72e30118d78343b48e" kindref="member">ReadBlock</ref>(dBlock,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>only<sp/>the<sp/>traces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;BLProfiler::CallStats&gt;</ref><sp/>&amp;vCallTrace<sp/>=<sp/>dBlock.vCallStats;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>vCallTrace.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CallStats<sp/>&amp;cs<sp/>=<sp/>vCallTrace[i];</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.callStackDepth<sp/>&lt;<sp/>0<sp/>||<sp/>cs.csFNameNumber<sp/>&lt;<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>the<sp/>unused<sp/>cs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(i<sp/>&lt;<sp/>vCallTrace.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>()<sp/>-<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CallStats<sp/>&amp;csNext<sp/>=<sp/>vCallTrace[i<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(csNext.callStackDepth<sp/>==<sp/>cs.callStackDepth<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cs.csFNameNumber<sp/>==<sp/>csNext.csFNameNumber)</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(combCallStats<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>BLProfiler::CallStats(cs);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats-&gt;nCSCalls<sp/><sp/>+=<sp/>cs.nCSCalls;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats-&gt;totalTime<sp/>+=<sp/>cs.totalTime;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats-&gt;stackTime<sp/>+=<sp/>cs.stackTime;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(combCallStats<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a253100cadb934fc9292ae389be9b48f3" kindref="member">PRINTCSTT</ref>(ios,<sp/>cs,<sp/>delimString);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats-&gt;nCSCalls<sp/><sp/>+=<sp/>cs.nCSCalls;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats-&gt;totalTime<sp/>+=<sp/>cs.totalTime;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats-&gt;stackTime<sp/>+=<sp/>cs.stackTime;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a253100cadb934fc9292ae389be9b48f3" kindref="member">PRINTCSTT</ref>(ios,<sp/>(*combCallStats),<sp/>delimString);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>combCallStats;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(combCallStats<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a253100cadb934fc9292ae389be9b48f3" kindref="member">PRINTCSTT</ref>(ios,<sp/>(*combCallStats),<sp/>delimString);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>combCallStats;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combCallStats<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a253100cadb934fc9292ae389be9b48f3" kindref="member">PRINTCSTT</ref>(ios,<sp/>cs,<sp/>delimString);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a3031f89c0189bd2d8f73b6207e8adfb1" kindref="member">ClearBlock</ref>(dBlock);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idb(0);<sp/>idb<sp/>&lt;<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>.size();<sp/>++idb)<sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DataBlock<sp/>&amp;dBlock<sp/>=<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>[idb];</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.proc<sp/>==<sp/>whichProc)<sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a41c7cecdb09d9a72e30118d78343b48e" kindref="member">ReadBlock</ref>(dBlock,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>only<sp/>the<sp/>traces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;BLProfiler::CallStats&gt;</ref><sp/>&amp;vCallTrace<sp/>=<sp/>dBlock.vCallStats;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>vCallTrace.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BLProfiler::CallStats<sp/>&amp;cs<sp/>=<sp/>vCallTrace[i];</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(cs.callStackDepth<sp/>&lt;<sp/>0<sp/>||<sp/>cs.csFNameNumber<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__RegionsProfStats_8cpp_1a253100cadb934fc9292ae389be9b48f3" kindref="member">PRINTCSTT</ref>(ios,<sp/>cs,<sp/>delimString);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a3031f89c0189bd2d8f73b6207e8adfb1" kindref="member">ClearBlock</ref>(dBlock);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1af869e7a8dd76194658b7ce98832993db" kindref="member">RegionsProfStats::InitDataFileNames</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::string&gt;</ref><sp/>&amp;hfn)<sp/>{</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>hfn.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>dFileName(hfn[i]);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>dFileName.replace(dFileName.find(</highlight><highlight class="stringliteral">&quot;_H_&quot;</highlight><highlight class="normal">),<sp/>3,<sp/></highlight><highlight class="stringliteral">&quot;_D_&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>regDataFileNames.insert(std::pair&lt;std::string,<sp/>int&gt;(dFileName,<sp/>i));</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1a52457e96f8c6a0a8cded7b2f40ad1cc1" kindref="member">RegionsProfStats::InitCStatsDataBlock</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>proc,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>nrss,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ntracestats,</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>seekpos)</highlight></codeline>
<codeline lineno="1418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>streamindex;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/>std::map&lt;std::string,<sp/>int&gt;::iterator<sp/>it<sp/>=<sp/><sp/>regDataFileNames.find(filename);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it<sp/>==<sp/>regDataFileNames.end())<sp/>{</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>streamindex<sp/>=<sp/>regDataFileNames.size();</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/>regDataFileNames.insert(std::pair&lt;std::string,<sp/>int&gt;(filename,<sp/>streamindex));</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>streamindex<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classCommProfStats_1a923e282e808775e9fb1578d7f41c1829" kindref="member">bInitDataBlocks</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a59554322d0d460e70099c8eea9729aa1" kindref="member">currentProc</ref><sp/>=<sp/>proc;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>.push_back(DataBlock(proc,<sp/>nrss,<sp/>ntracestats,<sp/>filename,<sp/>seekpos,<sp/>streamindex));</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCommProfStats_1adfeb787d05dd96d8297c678948d899fa" kindref="member">currentDataBlock</ref><sp/>=<sp/><ref refid="classCommProfStats_1aa69e0ea415e1fd371c727d23195558af" kindref="member">dataBlocks</ref>.size()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1a672b909147ac7f7560864750485e55c8" kindref="member">RegionsProfStats::OpenAllStreams</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;dirname)<sp/>{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa23714eb98f31ba71d565390dae2a7d2" kindref="member">BL_PROFILE_VAR</ref>(</highlight><highlight class="stringliteral">&quot;RegionsProfStats::OpenAllStreams&quot;</highlight><highlight class="normal">,<sp/>regsopenallstreams);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/>regDataStreams.resize(regDataFileNames.size());</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dsIndex(0);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BL_CYCLEOPENS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_CYCLEOPENS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>myProc(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>());</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNames(regDataFileNames.size());</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;std::string&gt;</ref><sp/>aFullFileNames(nNames);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::map&lt;std::string,<sp/>int&gt;::iterator<sp/>it<sp/>=<sp/>regDataFileNames.begin();</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>regDataFileNames.end();<sp/>++it)</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>aFullFileNames[dsIndex]<sp/>=<sp/>(dirname<sp/>+<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>+<sp/>it-&gt;first);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>++dsIndex;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s(0);<sp/>s<sp/>&lt;<sp/>nNames;<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>(s<sp/>+<sp/>myProc)<sp/>%<sp/>nNames;</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>regDataStreams[index]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::ifstream(aFullFileNames[index].c_str());</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regDataStreams[index]-&gt;fail())</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****regDataStreams<sp/>failed.<sp/>Continuing<sp/>without<sp/>persistent<sp/>streams.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCommProfStats_1a176ee76d60863bf10f9b663c21c00a38" kindref="member">persistentStreams</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCommProfStats_1a1785f1e8537f2cbb475187b787abf6e1" kindref="member">CloseAllStreams</ref>();</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::map&lt;std::string,<sp/>int&gt;::iterator<sp/>it<sp/>=<sp/>regDataFileNames.begin();</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>regDataFileNames.end();<sp/>++it)</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>fullFileName(dirname<sp/>+<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>+<sp/>it-&gt;first);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>regDataStreams[dsIndex]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::ifstream(fullFileName.c_str());</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regDataStreams[dsIndex]-&gt;fail())</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;****regDataStreams<sp/>failed.<sp/>Continuing<sp/>without<sp/>persistent<sp/>streams.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCommProfStats_1a176ee76d60863bf10f9b663c21c00a38" kindref="member">persistentStreams</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCommProfStats_1a1785f1e8537f2cbb475187b787abf6e1" kindref="member">CloseAllStreams</ref>();</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>++dsIndex;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a82c334c787872a6bbacabe9a38389224" kindref="member">BL_PROFILE_VAR_STOP</ref>(regsopenallstreams);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1a4c22eabfc2a79be0e3f69923b0e82e04" kindref="member">RegionsProfStats::CloseAllStreams</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa23714eb98f31ba71d565390dae2a7d2" kindref="member">BL_PROFILE_VAR</ref>(</highlight><highlight class="stringliteral">&quot;RegionProfStats::CloseAllStreams&quot;</highlight><highlight class="normal">,<sp/>regsclosellstreams);</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>regDataStreams.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regDataStreams[i]<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regDataStreams[i]-&gt;is_open())</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regDataStreams[i]-&gt;close();</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>regDataStreams[i];</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>regDataStreams[i]<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a82c334c787872a6bbacabe9a38389224" kindref="member">BL_PROFILE_VAR_STOP</ref>(regsclosellstreams);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1a0063c7d1c93c6f36bdf068ec89f4c328" kindref="member">RegionsProfStats::ReadBlock</ref>(DataBlock<sp/>&amp;dBlock,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readRSS,</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readTraces)</highlight></codeline>
<codeline lineno="1507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;RegionsProfStats::ReadBlock()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.rStartStop.size()<sp/>!=<sp/>dBlock.nRSS)<sp/>{</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/>dBlock.rStartStop.resize(dBlock.nRSS);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.vCallStats.size()<sp/>!=<sp/>dBlock.nTraceStats)<sp/>{</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>dBlock.vCallStats.resize(dBlock.nTraceStats);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/>std::string<sp/>fullFileName(<ref refid="classBLProfStats_1a599d00f7afc5dc348ba84e2ad4ab3bb2" kindref="member">dirName</ref><sp/>+<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>+<sp/>dBlock.fileName);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa23714eb98f31ba71d565390dae2a7d2" kindref="member">BL_PROFILE_VAR</ref>(</highlight><highlight class="stringliteral">&quot;OpenStream&quot;</highlight><highlight class="normal">,<sp/>openstream);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>instr(fullFileName.c_str());</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a82c334c787872a6bbacabe9a38389224" kindref="member">BL_PROFILE_VAR_STOP</ref>(openstream);</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(readRSS)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>read<sp/>the<sp/>rstarts<sp/>and<sp/>rstops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dataSize(dBlock.rStartStop.size()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(BLProfiler::RStartStop));</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>instr.seekg(dBlock.seekpos);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>instr.read(reinterpret_cast&lt;char<sp/>*&gt;(dBlock.rStartStop.dataPtr()),<sp/>dataSize);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.rStartStop.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1ae1b239768583ca1b1f592d3527e5e36f" kindref="member">minRegionTime</ref><sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" kindref="member">std::min</ref>(<ref refid="classBLProfStats_1ae1b239768583ca1b1f592d3527e5e36f" kindref="member">minRegionTime</ref>,<sp/>dBlock.rStartStop[i].rssTime);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a5aa5a73c572e512532ec0220ff4d4077" kindref="member">maxRegionTime</ref><sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(<ref refid="classBLProfStats_1a5aa5a73c572e512532ec0220ff4d4077" kindref="member">maxRegionTime</ref>,<sp/>dBlock.rStartStop[i].rssTime);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dataSize(dBlock.rStartStop.size()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(BLProfiler::RStartStop));</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>instr.seekg(dBlock.seekpos<sp/>+<sp/>dataSize);</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(readTraces)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>read<sp/>the<sp/>trace<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dataSize(dBlock.vCallStats.size()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(BLProfiler::CallStats));</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dataSize<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>instr.read(reinterpret_cast&lt;char<sp/>*&gt;(dBlock.vCallStats.dataPtr()),<sp/>dataSize);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/>instr.close();</highlight></codeline>
<codeline lineno="1542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1a8c2d460eb4e81905c7a79969eefadad6" kindref="member">RegionsProfStats::ReadBlockNoOpen</ref>(DataBlock<sp/>&amp;dBlock,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readRSS,</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>readTraces)</highlight></codeline>
<codeline lineno="1548"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a548fbd9b2cd72a927f463003f4adb0b1" kindref="member">BL_PROFILE</ref>(</highlight><highlight class="stringliteral">&quot;RegionsProfStats::ReadBlockNoOpen()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.rStartStop.size()<sp/>!=<sp/>dBlock.nRSS)<sp/>{</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>dBlock.rStartStop.resize(dBlock.nRSS);</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dBlock.vCallStats.size()<sp/>!=<sp/>dBlock.nTraceStats)<sp/>{</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>dBlock.vCallStats.resize(dBlock.nTraceStats);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>*instr<sp/>=<sp/>regDataStreams[dBlock.streamIndex];</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(readRSS)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>read<sp/>the<sp/>rstarts<sp/>and<sp/>rstops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dataSize(dBlock.rStartStop.size()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(BLProfiler::RStartStop));</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>instr-&gt;seekg(dBlock.seekpos);</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>instr-&gt;read(reinterpret_cast&lt;char<sp/>*&gt;(dBlock.rStartStop.dataPtr()),<sp/>dataSize);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>dBlock.rStartStop.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1ae1b239768583ca1b1f592d3527e5e36f" kindref="member">minRegionTime</ref><sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" kindref="member">std::min</ref>(<ref refid="classBLProfStats_1ae1b239768583ca1b1f592d3527e5e36f" kindref="member">minRegionTime</ref>,<sp/>dBlock.rStartStop[i].rssTime);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBLProfStats_1a5aa5a73c572e512532ec0220ff4d4077" kindref="member">maxRegionTime</ref><sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da86cadfc48eb8f9dd4a2e4a3980a6b265" kindref="member">std::max</ref>(<ref refid="classBLProfStats_1a5aa5a73c572e512532ec0220ff4d4077" kindref="member">maxRegionTime</ref>,<sp/>dBlock.rStartStop[i].rssTime);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dataSize(dBlock.rStartStop.size()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(BLProfiler::RStartStop));</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>instr-&gt;seekg(dBlock.seekpos<sp/>+<sp/>dataSize);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(readTraces)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>read<sp/>the<sp/>trace<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>dataSize(dBlock.vCallStats.size()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(BLProfiler::CallStats));</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>instr-&gt;read(reinterpret_cast&lt;char<sp/>*&gt;(dBlock.vCallStats.dataPtr()),<sp/>dataSize);</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1a0063c7d1c93c6f36bdf068ec89f4c328" kindref="member">RegionsProfStats::ReadBlock</ref>(DataBlock<sp/>&amp;dBlock,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nmessages)<sp/>{</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;not<sp/>implemented<sp/>yet.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1584"><highlight class="comment"><sp/><sp/>int<sp/>leftToRead(dBlock.size<sp/>-<sp/>dBlock.readoffset);</highlight></codeline>
<codeline lineno="1585"><highlight class="comment"><sp/><sp/>int<sp/>readSize(std::min(leftToRead,<sp/>nmessages));</highlight></codeline>
<codeline lineno="1586"><highlight class="comment"><sp/><sp/>int<sp/>readPos(dBlock.seekpos<sp/>+<sp/>dBlock.readoffset<sp/>*<sp/>csSize);</highlight></codeline>
<codeline lineno="1587"><highlight class="comment"><sp/><sp/>//cout<sp/>&lt;&lt;<sp/>&quot;************&quot;<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1588"><highlight class="comment"><sp/><sp/>if(dBlock.vCommStats.size()<sp/>!=<sp/>readSize)<sp/>{</highlight></codeline>
<codeline lineno="1589"><highlight class="comment"><sp/><sp/><sp/><sp/>dBlock.vCommStats.resize(readSize);</highlight></codeline>
<codeline lineno="1590"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1591"><highlight class="comment"><sp/><sp/>std::string<sp/>fullFileName(dirName<sp/>+<sp/>&apos;/&apos;<sp/>+<sp/>dBlock.fileName);</highlight></codeline>
<codeline lineno="1592"><highlight class="comment"></highlight></codeline>
<codeline lineno="1593"><highlight class="comment"><sp/><sp/>std::ifstream<sp/>instr(fullFileName.c_str());</highlight></codeline>
<codeline lineno="1594"><highlight class="comment"><sp/><sp/>int<sp/>dataSize(readSize<sp/>*<sp/>csSize);</highlight></codeline>
<codeline lineno="1595"><highlight class="comment"><sp/><sp/>instr.seekg(readPos);</highlight></codeline>
<codeline lineno="1596"><highlight class="comment"><sp/><sp/>instr-&gt;read(reinterpret_cast&lt;char<sp/>*&gt;(dBlock.vCommStats.dataPtr()),<sp/>dataSize);</highlight></codeline>
<codeline lineno="1597"><highlight class="comment"><sp/><sp/>instr.close();</highlight></codeline>
<codeline lineno="1598"><highlight class="comment"></highlight></codeline>
<codeline lineno="1599"><highlight class="comment"><sp/><sp/>dBlock.readoffset<sp/>+=<sp/>readSize;</highlight></codeline>
<codeline lineno="1600"><highlight class="comment"><sp/><sp/>//SHOWVAL(dBlock.readoffset);</highlight></codeline>
<codeline lineno="1601"><highlight class="comment"><sp/><sp/>//cout<sp/>&lt;&lt;<sp/>&quot;************&quot;<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1602"><highlight class="comment"><sp/><sp/>return(dBlock.readoffset<sp/>&lt;<sp/>dBlock.size);</highlight></codeline>
<codeline lineno="1603"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classRegionsProfStats_1a0d8d8ad83b18b0e23fa18b9942c0b944" kindref="member">RegionsProfStats::ClearBlock</ref>(DataBlock<sp/>&amp;dBlock)<sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/>dBlock.rStartStop.clear();</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;BLProfiler::RStartStop&gt;</ref>().<ref refid="namespaceamrex_1_1algoim_1_1detail_1a71b582d94d1c5cd614711ec7b7853192" kindref="member">swap</ref>(dBlock.rStartStop);</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/>dBlock.vCallStats.clear();</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;BLProfiler::CallStats&gt;</ref>().<ref refid="namespaceamrex_1_1algoim_1_1detail_1a71b582d94d1c5cd614711ec7b7853192" kindref="member">swap</ref>(dBlock.vCallStats);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Extern/ProfParser/AMReX_RegionsProfStats.cpp"/>
  </compounddef>
</doxygen>
