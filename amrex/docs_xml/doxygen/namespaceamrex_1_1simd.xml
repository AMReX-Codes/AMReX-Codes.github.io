<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1simd" kind="namespace" language="C++">
    <compoundname>amrex::simd</compoundname>
    <innerclass refid="structamrex_1_1simd_1_1Vectorized" prot="public">amrex::simd::Vectorized</innerclass>
    <innernamespace refid="namespaceamrex_1_1simd_1_1detail">amrex::simd::detail</innernamespace>
    <innernamespace refid="namespaceamrex_1_1simd_1_1stdx">amrex::simd::stdx</innernamespace>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceamrex_1_1simd_1add6621fecc25847a2732965c42392d93" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>SIMD_WIDTH</declname>
            <defname>SIMD_WIDTH</defname>
            <defval>native_simd_size_real</defval>
          </param>
        </templateparamlist>
        <type>amrex::Real</type>
        <definition>using amrex::simd::SIMDReal = typedef amrex::Real</definition>
        <argsstring></argsstring>
        <name>SIMDReal</name>
        <qualifiedname>amrex::simd::SIMDReal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SIMD.H" line="62" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SIMD.H" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1simd_1a945cac56e2e229159839e79047422383" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>SIMD_WIDTH</declname>
            <defname>SIMD_WIDTH</defname>
            <defval>native_simd_size_particlereal</defval>
          </param>
        </templateparamlist>
        <type>amrex::ParticleReal</type>
        <definition>using amrex::simd::SIMDParticleReal = typedef amrex::ParticleReal</definition>
        <argsstring></argsstring>
        <name>SIMDParticleReal</name>
        <qualifiedname>amrex::simd::SIMDParticleReal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SIMD.H" line="65" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SIMD.H" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceamrex_1_1simd_1a13bc9efaf58e1af807347f918fff24a9" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T_ParticleReal</type>
            <defval>SIMDParticleReal&lt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::uint64_t</type>
        <definition>using amrex::simd::SIMDIdCpu = typedef std::uint64_t</definition>
        <argsstring></argsstring>
        <name>SIMDIdCpu</name>
        <qualifiedname>amrex::simd::SIMDIdCpu</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SIMD.H" line="69" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SIMD.H" bodystart="69" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceamrex_1_1simd_1a3eedc46ea269765dc7010c48bd8a39d8" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto amrex::simd::native_simd_size_real</definition>
        <argsstring></argsstring>
        <name>native_simd_size_real</name>
        <qualifiedname>amrex::simd::native_simd_size_real</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SIMD.H" line="58" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SIMD.H" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1simd_1acbc41b506c60eca5132aafb04cfbf19f" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr auto</type>
        <definition>constexpr auto amrex::simd::native_simd_size_particlereal</definition>
        <argsstring></argsstring>
        <name>native_simd_size_particlereal</name>
        <qualifiedname>amrex::simd::native_simd_size_particlereal</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SIMD.H" line="59" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SIMD.H" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceamrex_1_1simd_1a54138e232b90d8b36128b4dfd4f90923" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool amrex::simd::is_vectorized</definition>
        <argsstring></argsstring>
        <name>is_vectorized</name>
        <qualifiedname>amrex::simd::is_vectorized</qualifiedname>
        <initializer>= std::is_base_of_v&lt;<ref refid="structamrex_1_1simd_1_1detail_1_1InternalVectorized" kindref="compound">detail::InternalVectorized</ref>, T&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a Functor Class works with <ref refid="namespaceamrex_1a7329f7a3e903d5a9abcd5f8603def1a1" kindref="member">amrex::ParallelForSIMD</ref></para>
<para><simplesect kind="see"><para><ref refid="structamrex_1_1simd_1_1Vectorized" kindref="compound">amrex::simd::Vectorized</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SIMD.H" line="115" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SIMD.H" bodystart="115" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1simd_1a83c898c768cfae013bfd34c9ec548517" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool amrex::simd::is_nth_arg_non_const</definition>
        <argsstring>(R(*)(Args...), int n)</argsstring>
        <name>is_nth_arg_non_const</name>
        <qualifiedname>amrex::simd::is_nth_arg_non_const</qualifiedname>
        <param>
          <type>R(*)(Args...)</type>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a function argument is declared as non-const</para>
<para>Use in conjunction with conditional write-back logic from vector registers, e.g.,</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T_Real&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>compute<sp/>(T_Real<sp/>&amp;<sp/><ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref><sp/><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a9dd4e461268c8034f5c8564e155c67a6" kindref="member">x</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T_Real<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="AMReX__Extension_8H_1a97eafbdde3320b2e8981a1d1d3936f58" kindref="member">AMREX_RESTRICT</ref><sp/><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a415290769594460e2e485922904f345d" kindref="member">y</ref>)<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">part_x.copy_from(&amp;m_part_x[i],<sp/>stdx::element_aligned);</highlight></codeline>
<codeline><highlight class="normal">part_y.copy_from(&amp;m_part_y[i],<sp/>stdx::element_aligned);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">compute(part_x,<sp/>part_y);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1simd_1a83c898c768cfae013bfd34c9ec548517" kindref="member">is_nth_arg_non_const</ref>(compute&lt;double&gt;,<sp/>0))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>part_x.copy_to(&amp;m_part_x[i],<sp/>stdx::element_aligned);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1simd_1a83c898c768cfae013bfd34c9ec548517" kindref="member">is_nth_arg_non_const</ref>(compute&lt;double&gt;,<sp/>1))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>part_y.copy_to(&amp;m_part_y[i],<sp/>stdx::element_aligned);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SIMD.H" line="138" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SIMD.H" bodystart="138" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1simd_1aecb850f4517c5fdfadf86c06506366d8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool amrex::simd::is_nth_arg_non_const</definition>
        <argsstring>(R(C::*)(Args...), int n)</argsstring>
        <name>is_nth_arg_non_const</name>
        <qualifiedname>amrex::simd::is_nth_arg_non_const</qualifiedname>
        <param>
          <type>R(C::*)(Args...)</type>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SIMD.H" line="145" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_SIMD.H" bodystart="145" bodyend="149"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_SIMD.H" line="20" column="1"/>
  </compounddef>
</doxygen>
