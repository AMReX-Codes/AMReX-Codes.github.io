<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1MLMG" kind="class" language="C++" prot="public">
    <compoundname>amrex::MLMG</compoundname>
    <includes refid="AMReX__MLMG_8H" local="no">AMReX_MLMG.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1dd" prot="public" static="no">
        <name>CFStrategy</name>
        <enumvalue id="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1dda334c4a4c42fdb79d7ebc3e73b517e6f8" prot="public">
          <name>none</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1ddabddf1f772a4b8a67379933a3664a17c2" prot="public">
          <name>ghostnodes</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="30" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLMG_1a864ffbd5cc09c630993c949c5d890d0f" prot="public" static="no">
        <type><ref refid="classamrex_1_1MLLinOp_1a5aa01a1ef6b0b3a471f02f65ae4b4884" kindref="member">MLLinOp::BCMode</ref></type>
        <definition>using amrex::MLMG::BCMode =  MLLinOp::BCMode</definition>
        <argsstring></argsstring>
        <name>BCMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="26" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLMG_1a93725420770bf42d532f9ee7dea87c2f" prot="public" static="no">
        <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">MLLinOp::Location</ref></type>
        <definition>using amrex::MLMG::Location =  MLLinOp::Location</definition>
        <argsstring></argsstring>
        <name>Location</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="27" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1MLMG_1a31f80f78e0f4a69ccc3f167e62ae7d51" prot="public" static="no">
        <type><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4" kindref="member">amrex::BottomSolver</ref></type>
        <definition>using amrex::MLMG::BottomSolver =  amrex::BottomSolver</definition>
        <argsstring></argsstring>
        <name>BottomSolver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="29" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="classamrex_1_1MLMG_1ac0602b6cac3018c66c89819127043001" prot="private" static="no">
        <name>timer_types</name>
        <enumvalue id="classamrex_1_1MLMG_1ac0602b6cac3018c66c89819127043001a9806779ed6ebcc94ecd07dbb3ff6acca" prot="private">
          <name>solve_time</name>
          <initializer>=0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1MLMG_1ac0602b6cac3018c66c89819127043001af8c1043cde20f8e1d9d022abb2c9ffad" prot="private">
          <name>iter_time</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1MLMG_1ac0602b6cac3018c66c89819127043001accea4ad3befe3a4c0c996cacbc4b1fb3" prot="private">
          <name>bottom_time</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1MLMG_1ac0602b6cac3018c66c89819127043001ae447a282e35218ac782b215c4a1fccfc" prot="private">
          <name>ntimers</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="263" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="263" bodyend="263"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1MLMG_1a7b344595276c27ed17dacb3ea1fb95aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class MLCGSolver</definition>
        <argsstring></argsstring>
        <name>MLCGSolver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="24" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLMG::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="177" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1ae4f94ee42b8da24efdafd34b023e2457" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLMG::max_iters</definition>
        <argsstring></argsstring>
        <name>max_iters</name>
        <initializer>= 200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="178" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a16a61c9fe1782c8afde4a096b564fb90" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLMG::do_fixed_number_of_iters</definition>
        <argsstring></argsstring>
        <name>do_fixed_number_of_iters</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="179" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a8519bc33f4e84ff1b590cf406c0c9506" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLMG::nu1</definition>
        <argsstring></argsstring>
        <name>nu1</name>
        <initializer>= 2</initializer>
        <briefdescription>
<para>pre </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="181" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a647e21342109e81cc50bc8825bc852ce" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLMG::nu2</definition>
        <argsstring></argsstring>
        <name>nu2</name>
        <initializer>= 2</initializer>
        <briefdescription>
<para>post </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="182" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a4076f55caa5454e91c6ca50f1d2d6c10" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLMG::nuf</definition>
        <argsstring></argsstring>
        <name>nuf</name>
        <initializer>= 8</initializer>
        <briefdescription>
<para>when smoother is used as bottom solver </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="183" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1ae8120b974758c572d1463ee286204e10" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLMG::nub</definition>
        <argsstring></argsstring>
        <name>nub</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>aditional smoothing after bottom cg solver </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="184" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1aefc9d57def6cdc2851da4d26e38e092f" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLMG::max_fmg_iters</definition>
        <argsstring></argsstring>
        <name>max_fmg_iters</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="186" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a1a607f195669be23b48131ae81e35b25" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4" kindref="member">BottomSolver</ref></type>
        <definition>BottomSolver amrex::MLMG::bottom_solver</definition>
        <argsstring></argsstring>
        <name>bottom_solver</name>
        <initializer>= <ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4a7a1920d61156abc05a60135aefe8bc67" kindref="member">BottomSolver::Default</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="188" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1dd" kindref="member">CFStrategy</ref></type>
        <definition>CFStrategy amrex::MLMG::cf_strategy</definition>
        <argsstring></argsstring>
        <name>cf_strategy</name>
        <initializer>= <ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1dda334c4a4c42fdb79d7ebc3e73b517e6f8" kindref="member">CFStrategy::none</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="189" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1ae2f4cd61322f224e598377431f47dde5" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLMG::bottom_verbose</definition>
        <argsstring></argsstring>
        <name>bottom_verbose</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="190" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a37be121e8fe2e8e8341198486fc07d0e" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLMG::bottom_maxiter</definition>
        <argsstring></argsstring>
        <name>bottom_maxiter</name>
        <initializer>= 200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="191" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a20ed3ce546f3fa0f009d66fd9bd1f2bc" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::MLMG::bottom_reltol</definition>
        <argsstring></argsstring>
        <name>bottom_reltol</name>
        <initializer>= 1.e-4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="192" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1aeb5b459a58233233b7546e3cef9e928f" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::MLMG::bottom_abstol</definition>
        <argsstring></argsstring>
        <name>bottom_abstol</name>
        <initializer>= -1.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="193" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a383d3320ac67af7ea304a3fad4c53ff6" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLMG::always_use_bnorm</definition>
        <argsstring></argsstring>
        <name>always_use_bnorm</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="195" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1ac6ee903a66f419d1ed10533cc13bd4e4" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLMG::final_fill_bc</definition>
        <argsstring></argsstring>
        <name>final_fill_bc</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="197" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;</type>
        <definition>MLLinOp&amp; amrex::MLMG::linop</definition>
        <argsstring></argsstring>
        <name>linop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="199" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1abfda726f45d63f473cacf3cab3a5b063" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLMG::namrlevs</definition>
        <argsstring></argsstring>
        <name>namrlevs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="200" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLMG::finest_amr_lev</definition>
        <argsstring></argsstring>
        <name>finest_amr_lev</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="201" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1ad02719958a8fc22e7843935f5ff1e407" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::MLMG::linop_prepared</definition>
        <argsstring></argsstring>
        <name>linop_prepared</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="203" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a9045bb00d9f839c74bf34179c75f1aae" prot="private" static="no" mutable="no">
        <type>Long</type>
        <definition>Long amrex::MLMG::solve_called</definition>
        <argsstring></argsstring>
        <name>solve_called</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="204" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a5de6da3652a1625f6640f4cb80451501" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLMG::do_nsolve</definition>
        <argsstring></argsstring>
        <name>do_nsolve</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>N Solve. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="207" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a8eba5d6f50bda8d65cb4481e57a557a5" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLMG::nsolve_grid_size</definition>
        <argsstring></argsstring>
        <name>nsolve_grid_size</name>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="208" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a51b70e5b31f450b486ff39b013d9440c" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MLLinOp&gt; amrex::MLMG::ns_linop</definition>
        <argsstring></argsstring>
        <name>ns_linop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="209" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1ab20f4feb5164d7f9ee8bcbfaf6b8c497" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MLMG" kindref="compound">MLMG</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MLMG&gt; amrex::MLMG::ns_mlmg</definition>
        <argsstring></argsstring>
        <name>ns_mlmg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="210" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a976935c58886c588cb51f006fd875809" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MultiFab&gt; amrex::MLMG::ns_sol</definition>
        <argsstring></argsstring>
        <name>ns_sol</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="211" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1aed64acecaae43cecb817b689d1da5e54" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MultiFab&gt; amrex::MLMG::ns_rhs</definition>
        <argsstring></argsstring>
        <name>ns_rhs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="212" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a2bb3673229f43eac4c351ce53a287226" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;MultiFab&gt; &gt; amrex::MLMG::sol_raii</definition>
        <argsstring></argsstring>
        <name>sol_raii</name>
        <briefdescription>
<para><ref refid="classamrex_1_1Hypre" kindref="compound">Hypre</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>PETSc To avoid confusion, terms like sol, cor, rhs, res, ... etc. are in the frame of the original equation, not the correction form </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="242" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> * &gt;</type>
        <definition>Vector&lt;MultiFab*&gt; amrex::MLMG::sol</definition>
        <argsstring></argsstring>
        <name>sol</name>
        <briefdescription>
<para>alias to argument a_sol </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="243" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>Vector&lt;MultiFab&gt; amrex::MLMG::rhs</definition>
        <argsstring></argsstring>
        <name>rhs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy of original rhs L(sol) = rhs </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="244" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;MultiFab&gt; &gt; amrex::MLMG::res</definition>
        <argsstring></argsstring>
        <name>res</name>
        <briefdescription>
<para>First <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>: <ref refid="classamrex_1_1Amr" kindref="compound">Amr</ref> levels. 0 is the coarest level Second <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>: MG levels. 0 is the finest level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="251" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;std::unique_ptr&lt;MultiFab&gt; &gt; &gt; amrex::MLMG::cor</definition>
        <argsstring></argsstring>
        <name>cor</name>
        <briefdescription>
<para>= rhs - L(sol) </para>        </briefdescription>
        <detaileddescription>
<para>L(cor) = res </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="252" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1ad74a7a55ad770900e7028fbfea7119ee" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;std::unique_ptr&lt;MultiFab&gt; &gt; &gt; amrex::MLMG::cor_hold</definition>
        <argsstring></argsstring>
        <name>cor_hold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="253" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a265ef6b4e1fa8487d48ee612843c3cd4" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;MultiFab&gt; &gt; amrex::MLMG::rescor</definition>
        <argsstring></argsstring>
        <name>rescor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>= res - L(cor) Residual of the correction form </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="254" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a67cedda5ad0584d823d1d4fa12d57274" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;iMultiFab&gt; &gt; amrex::MLMG::fine_mask</definition>
        <argsstring></argsstring>
        <name>fine_mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="257" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1acbd5fc7b1f0af79ee6eb5daa55b890fb" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;Real&gt; &gt; amrex::MLMG::volinv</definition>
        <argsstring></argsstring>
        <name>volinv</name>
        <briefdescription>
<para>used by makeSolvable </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="259" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1ab013a4dc85f37684f9e65f63b5318fc9" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt; &gt;</type>
        <definition>Vector&lt;std::unique_ptr&lt;MultiFab&gt; &gt; amrex::MLMG::scratch</definition>
        <argsstring></argsstring>
        <name>scratch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="261" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a60c47161b03df19f998710df25c494fd" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt;</type>
        <definition>Vector&lt;Real&gt; amrex::MLMG::timer</definition>
        <argsstring></argsstring>
        <name>timer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="264" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a63559f1a5501e67e6c4d47e443470dc2" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::MLMG::m_rhsnorm0</definition>
        <argsstring></argsstring>
        <name>m_rhsnorm0</name>
        <initializer>= -1.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="266" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a43af172c075ffa6011bfb2e6dc8493b7" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::MLMG::m_init_resnorm0</definition>
        <argsstring></argsstring>
        <name>m_init_resnorm0</name>
        <initializer>= -1.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="267" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1abacb248f6c07b07db294322fb7e1aea7" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::MLMG::m_final_resnorm0</definition>
        <argsstring></argsstring>
        <name>m_final_resnorm0</name>
        <initializer>= -1.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="268" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a6eed69f8495e3c1f27296478ff7417e9" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::MLMG::m_niters_cg</definition>
        <argsstring></argsstring>
        <name>m_niters_cg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="269" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1MLMG_1a0bca266eed8ebba38073150d4a748c74" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt;</type>
        <definition>Vector&lt;Real&gt; amrex::MLMG::m_iter_fine_resnorm0</definition>
        <argsstring></argsstring>
        <name>m_iter_fine_resnorm0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="270" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="270" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1MLMG_1a4d80ba0f675a1b751f35d66d04253dd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLMG::MLMG</definition>
        <argsstring>(MLLinOp &amp;a_lp)</argsstring>
        <name>MLMG</name>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> &amp;</type>
          <declname>a_lp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="32" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a12c3c0793a39356963dd1824588b7593" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::MLMG::~MLMG</definition>
        <argsstring>()</argsstring>
        <name>~MLMG</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="33" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="48" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a9f333ea827975468c405f8767e1f56a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MLMG::solve</definition>
        <argsstring>(const Vector&lt; MultiFab *&gt; &amp;a_sol, const Vector&lt; MultiFab const *&gt; &amp;a_rhs, Real a_tol_rel, Real a_tol_abs, const char *checkpoint_file=nullptr)</argsstring>
        <name>solve</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>a_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *&gt; &amp;</type>
          <declname>a_rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a_tol_rel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a_tol_abs</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>checkpoint_file</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="36" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="52" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a6fcfa52ef82ffa84f1e4358c6b3fd3c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::getGradSolution</definition>
        <argsstring>(const Vector&lt; Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &gt; &amp;a_grad_sol, Location a_loc=Location::FaceCenter)</argsstring>
        <name>getGradSolution</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>a_grad_sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>a_loc</declname>
          <defval><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3ad1a130e88790663b2124d7dbd3e9f81e" kindref="member">Location::FaceCenter</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="39" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1351" bodyend="1358"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a5b6cd8f9dd955924d2f84832cfd5fba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::getFluxes</definition>
        <argsstring>(const Vector&lt; Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &gt; &amp;a_flux, Location a_loc=Location::FaceCenter)</argsstring>
        <name>getFluxes</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>a_flux</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>a_loc</declname>
          <defval><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3ad1a130e88790663b2124d7dbd3e9f81e" kindref="member">Location::FaceCenter</ref></defval>
        </param>
        <briefdescription>
<para>For <computeroutput>(alpha * a - beta * (del dot b grad)) phi = rhs</computeroutput>, flux means <computeroutput>-b grad phi</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a_flux</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a_loc</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="48" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1361" bodyend="1370"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a16ea3ad0b4963514b9ff0f4419456a88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::getFluxes</definition>
        <argsstring>(const Vector&lt; Array&lt; MultiFab *, AMREX_SPACEDIM &gt; &gt; &amp;a_flux, const Vector&lt; MultiFab *&gt; &amp;a_sol, Location a_loc=Location::FaceCenter)</argsstring>
        <name>getFluxes</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *, AMREX_SPACEDIM &gt; &gt; &amp;</type>
          <declname>a_flux</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>a_sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>a_loc</declname>
          <defval><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3ad1a130e88790663b2124d7dbd3e9f81e" kindref="member">Location::FaceCenter</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="50" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1373" bodyend="1384"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a0032f614b4125ab86db37ab91481d8c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::getFluxes</definition>
        <argsstring>(const Vector&lt; MultiFab *&gt; &amp;a_flux, Location a_loc=Location::CellCenter)</argsstring>
        <name>getFluxes</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>a_flux</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>a_loc</declname>
          <defval><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3af5c101b5f19e97166e7531ffa1c706c4" kindref="member">Location::CellCenter</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="53" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1387" bodyend="1391"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a18f756b655f55707cba06813c02a7e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::getFluxes</definition>
        <argsstring>(const Vector&lt; MultiFab *&gt; &amp;a_flux, const Vector&lt; MultiFab *&gt; &amp;a_sol, Location a_loc=Location::CellCenter)</argsstring>
        <name>getFluxes</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>a_flux</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>a_sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3" kindref="member">Location</ref></type>
          <declname>a_loc</declname>
          <defval><ref refid="classamrex_1_1MLLinOp_1a07cd0a7c45d6542e33a5d97aefe5bab3af5c101b5f19e97166e7531ffa1c706c4" kindref="member">Location::CellCenter</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="54" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1394" bodyend="1425"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1ab1c8f11cfd83f75cf94c5f3cd9abcb91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::compResidual</definition>
        <argsstring>(const Vector&lt; MultiFab *&gt; &amp;a_res, const Vector&lt; MultiFab *&gt; &amp;a_sol, const Vector&lt; MultiFab const *&gt; &amp;a_rhs)</argsstring>
        <name>compResidual</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>a_res</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>a_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *&gt; &amp;</type>
          <declname>a_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="55" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1453" bodyend="1529"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1af31448f89352b5c413715761930d929a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::apply</definition>
        <argsstring>(const Vector&lt; MultiFab *&gt; &amp;out, const Vector&lt; MultiFab *&gt; &amp;in)</argsstring>
        <name>apply</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para><computeroutput>out = L(in)</computeroutput>. Note that, if no actual solve is needed, one could turn off multigrid coarsening by constructing a <ref refid="classamrex_1_1MLLinOp" kindref="compound">MLLinOp</ref> object with an appropriate <ref refid="structamrex_1_1LPInfo" kindref="compound">LPInfo</ref> object (e.g., with LPInfo().setMaxCoarseningLevel(0)). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="72" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1532" bodyend="1608"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1ab9b5abebf8372da2df3371dbf1a5931a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::setVerbose</definition>
        <argsstring>(int v) noexcept</argsstring>
        <name>setVerbose</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="74" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1ae41f89e26b156b74d97887f07a53c9ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::setMaxIter</definition>
        <argsstring>(int n) noexcept</argsstring>
        <name>setMaxIter</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="75" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a6bb92c57b7ff4b5c3de6b7e77d22c440" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::setMaxFmgIter</definition>
        <argsstring>(int n) noexcept</argsstring>
        <name>setMaxFmgIter</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="76" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a69b9e5bad723294fcd8b906b1f3241ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::setFixedIter</definition>
        <argsstring>(int nit) noexcept</argsstring>
        <name>setFixedIter</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="77" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a1d4806755bec5fec901412100d74b96d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::setPreSmooth</definition>
        <argsstring>(int n) noexcept</argsstring>
        <name>setPreSmooth</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="79" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a9308e7b4f15a296fd96f1a0c7459216f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::setPostSmooth</definition>
        <argsstring>(int n) noexcept</argsstring>
        <name>setPostSmooth</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="80" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a9e5eab1c9aca3fefa101da8e7a970374" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::setFinalSmooth</definition>
        <argsstring>(int n) noexcept</argsstring>
        <name>setFinalSmooth</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="81" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a2487b16d9a3b08fb224a246e00e8e6a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::setBottomSmooth</definition>
        <argsstring>(int n) noexcept</argsstring>
        <name>setBottomSmooth</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="82" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a8cc0e411d47ee55ab5d23579d5a2ba1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::setBottomSolver</definition>
        <argsstring>(BottomSolver s) noexcept</argsstring>
        <name>setBottomSolver</name>
        <param>
          <type><ref refid="namespaceamrex_1a9303c93b47b7839de8ce552cb7cb21c4" kindref="member">BottomSolver</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="84" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a5bad11a86d148f166c2d32a91c8667cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::setCFStrategy</definition>
        <argsstring>(CFStrategy a_cf_strategy) noexcept</argsstring>
        <name>setCFStrategy</name>
        <param>
          <type><ref refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1dd" kindref="member">CFStrategy</ref></type>
          <declname>a_cf_strategy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="85" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a0977ffa971d33d287df1102f8a3e9dec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::setBottomVerbose</definition>
        <argsstring>(int v) noexcept</argsstring>
        <name>setBottomVerbose</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="86" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a7325bf2f240899515dfe449ed8bd5322" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::setBottomMaxIter</definition>
        <argsstring>(int n) noexcept</argsstring>
        <name>setBottomMaxIter</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="87" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a031ffd7d7be7608b1f3148fefe3ad3ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::setBottomTolerance</definition>
        <argsstring>(Real t) noexcept</argsstring>
        <name>setBottomTolerance</name>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="88" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a6c1efa9ed114908cc3fb0de844c5a439" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::setBottomToleranceAbs</definition>
        <argsstring>(Real t) noexcept</argsstring>
        <name>setBottomToleranceAbs</name>
        <param>
          <type>Real</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="89" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1adfdd4fbc6266509a6c9507244ccbf568" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MLMG::getBottomToleranceAbs</definition>
        <argsstring>() noexcept</argsstring>
        <name>getBottomToleranceAbs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="90" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1ab22ced370b4d9a1bf3d20ce2b4c03ded" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::setAlwaysUseBNorm</definition>
        <argsstring>(int flag) noexcept</argsstring>
        <name>setAlwaysUseBNorm</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="92" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a632992dc5145781c23b3c298c4fb05ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::setFinalFillBC</definition>
        <argsstring>(int flag) noexcept</argsstring>
        <name>setFinalFillBC</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="94" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a9d651a710c7d61305fba697e554ec72b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLMG::numAMRLevels</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numAMRLevels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="96" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1abba64831a87d74bc94be6c0834afcba2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::setNSolve</definition>
        <argsstring>(int flag) noexcept</argsstring>
        <name>setNSolve</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="98" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a53a3e03d937c4e0c5623a8d1f12e535b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::setNSolveGridSize</definition>
        <argsstring>(int s) noexcept</argsstring>
        <name>setNSolveGridSize</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="99" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a69fd986340e50363b58631b3b503bced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::prepareForSolve</definition>
        <argsstring>(const Vector&lt; MultiFab *&gt; &amp;a_sol, const Vector&lt; MultiFab const *&gt; &amp;a_rhs)</argsstring>
        <name>prepareForSolve</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>a_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *&gt; &amp;</type>
          <declname>a_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="122" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1127" bodyend="1318"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a955977f98a355020f4808fd4acefe76f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::prepareForNSolve</definition>
        <argsstring>()</argsstring>
        <name>prepareForNSolve</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="124" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1321" bodyend="1348"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a97f2d0353ab1bbb9e4db171de41e2501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::oneIter</definition>
        <argsstring>(int iter)</argsstring>
        <name>oneIter</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="126" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="225" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a38df331fcb36de71c4af020b2e1117ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::miniCycle</definition>
        <argsstring>(int alev)</argsstring>
        <name>miniCycle</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>alev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="128" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="388" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a6b92f271588ce53fd24d1f7b2c1442a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::mgVcycle</definition>
        <argsstring>(int amrlev, int mglev)</argsstring>
        <name>mgVcycle</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="130" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="417" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a7085d7450d545c1f593954d5e445af02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::mgFcycle</definition>
        <argsstring>()</argsstring>
        <name>mgFcycle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="131" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="535" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a105413ba8fce8beab99c2b7f11f0f028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::bottomSolve</definition>
        <argsstring>()</argsstring>
        <name>bottomSolve</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="133" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="872" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1ac67a9c44825a6f8c44a9ad53020e3109" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::NSolve</definition>
        <argsstring>(MLMG &amp;a_solver, MultiFab &amp;a_sol, MultiFab &amp;a_rhs)</argsstring>
        <name>NSolve</name>
        <param>
          <type><ref refid="classamrex_1_1MLMG" kindref="compound">MLMG</ref> &amp;</type>
          <declname>a_solver</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>a_sol</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>a_rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="134" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="885" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a68fb3d9c54966ec9e5fda98b4b0cf169" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::actualBottomSolve</definition>
        <argsstring>()</argsstring>
        <name>actualBottomSolve</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="135" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="900" bodyend="992"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a6e3b238696c2c79000390a6a98f7b9e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::computeMLResidual</definition>
        <argsstring>(int amrlevmax)</argsstring>
        <name>computeMLResidual</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlevmax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="137" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="292" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1af609ac426f564d969f87201e8189eaf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::computeResidual</definition>
        <argsstring>(int alev)</argsstring>
        <name>computeResidual</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>alev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="138" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="309" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1aa802d8378f3912da5b884fcc07c2351b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::computeResWithCrseSolFineCor</definition>
        <argsstring>(int crse_amr_lev, int fine_amr_lev)</argsstring>
        <name>computeResWithCrseSolFineCor</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>crse_amr_lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_amr_lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="139" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="326" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a97d673162294d25b9b325b636cb9183d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::computeResWithCrseCorFineCor</definition>
        <argsstring>(int fine_amr_lev)</argsstring>
        <name>computeResWithCrseCorFineCor</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>fine_amr_lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="140" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="367" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a884666fcc4158d42a4f01c83e5d454dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::interpCorrection</definition>
        <argsstring>(int alev)</argsstring>
        <name>interpCorrection</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>alev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="141" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="576" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a43e3d241603fb49ce0dbef1058e97118" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::interpCorrection</definition>
        <argsstring>(int alev, int mglev)</argsstring>
        <name>interpCorrection</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>alev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="142" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="715" bodyend="819"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1ae1d69e956c3e0a266b4b2c43c2881e3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::addInterpCorrection</definition>
        <argsstring>(int alev, int mglev)</argsstring>
        <name>addInterpCorrection</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>alev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="143" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="823" bodyend="852"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a725d6dc0cc3c20d8baa48b883805863c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::computeResOfCorrection</definition>
        <argsstring>(int amrlev, int mglev)</argsstring>
        <name>computeResOfCorrection</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="145" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="859" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a3ee68a8bba6178a55d1ca183be3f6fb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MLMG::ResNormInf</definition>
        <argsstring>(int amrlev, bool local=false)</argsstring>
        <name>ResNormInf</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="147" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1013" bodyend="1047"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1aa86c7015c1ee9cfde217cef76c1a55a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MLMG::MLResNormInf</definition>
        <argsstring>(int alevmax, bool local=false)</argsstring>
        <name>MLResNormInf</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>alevmax</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="148" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1051" bodyend="1061"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a2f0fcfb202fff08a11c25408b72dd505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MLMG::MLRhsNormInf</definition>
        <argsstring>(bool local=false)</argsstring>
        <name>MLRhsNormInf</name>
        <param>
          <type>bool</type>
          <declname>local</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="149" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1065" bodyend="1099"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1aa2a89a45fc288f18494a1304ce6fe5e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::buildFineMask</definition>
        <argsstring>()</argsstring>
        <name>buildFineMask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="150" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1102" bodyend="1124"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a92c1d883b63949e33c6acba2c0e19c6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::averageDownAndSync</definition>
        <argsstring>()</argsstring>
        <name>averageDownAndSync</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="152" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1611" bodyend="1645"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a3cd643e6bf9f7e6d9d2b8cb7fa0b7c71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::computeVolInv</definition>
        <argsstring>()</argsstring>
        <name>computeVolInv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="154" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1648" bodyend="1700"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1ae5f98b72769ed94a44f850aa8aa1e1ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::makeSolvable</definition>
        <argsstring>()</argsstring>
        <name>makeSolvable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="155" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1703" bodyend="1756"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a818eb5c5d459af91e960acec44627869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::makeSolvable</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;mf)</argsstring>
        <name>makeSolvable</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="156" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1759" bodyend="1812"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a0a5c73d611e9e8b1fd1995d9bcf79086" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MLMG::getNodalSum</definition>
        <argsstring>(int amrlev, int mglev, MultiFab &amp;mf) const</argsstring>
        <name>getNodalSum</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>amrlev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>mglev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="157" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1815" bodyend="1824"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1aaf664a17642380d701b1b7b08e10fa63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::bottomSolveWithHypre</definition>
        <argsstring>(MultiFab &amp;x, const MultiFab &amp;b)</argsstring>
        <name>bottomSolveWithHypre</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="159" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1827" bodyend="1896"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a1d9aa957bda2ed06061254fb7e187c3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::bottomSolveWithPETSc</definition>
        <argsstring>(MultiFab &amp;x, const MultiFab &amp;b)</argsstring>
        <name>bottomSolveWithPETSc</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="161" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1899" bodyend="1929"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a7449cb19c1e62e14a47d020cb696f0b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLMG::bottomSolveWithCG</definition>
        <argsstring>(MultiFab &amp;x, const MultiFab &amp;b, MLCGSolver::Type type)</argsstring>
        <name>bottomSolveWithCG</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1MLCGSolver_1ac7b947856c5f3a21769938261be5d521" kindref="member">MLCGSolver::Type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="163" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="995" bodyend="1009"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a44fe292771ffd1f946297f72295217c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MLMG::getInitRHS</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getInitRHS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="165" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a38246ba4d9cc99180d23f13eaee31858" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MLMG::getInitResidual</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getInitResidual</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="167" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a3f7c16fa32591e6ca66a72d9b998f071" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::MLMG::getFinalResidual</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getFinalResidual</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="169" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="169" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1a8bdedc7ec262346ed0007f53c3a8d200" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; const  &amp;</type>
        <definition>Vector&lt;Real&gt; const&amp; amrex::MLMG::getResidualHistory</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getResidualHistory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="171" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="171" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1ab7d3085def0c04b487a8cabf898ce039" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::MLMG::getNumIters</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getNumIters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="172" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="172" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1MLMG_1ac3822a91ae7b60ff1c4a691936cf527e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; const  &amp;</type>
        <definition>Vector&lt;int&gt; const&amp; amrex::MLMG::getNumCGIters</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getNumCGIters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="173" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="173" bodyend="173"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1MLMG_1afc89e8e61086b888d38d0542beb6a955" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::MLMG::checkPoint</definition>
        <argsstring>(const Vector&lt; MultiFab *&gt; &amp;a_sol, const Vector&lt; MultiFab const *&gt; &amp;a_rhs, Real a_tol_rel, Real a_tol_abs, const char *a_file_name) const</argsstring>
        <name>checkPoint</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *&gt; &amp;</type>
          <declname>a_sol</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> const *&gt; &amp;</type>
          <declname>a_rhs</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a_tol_rel</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a_tol_abs</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>a_file_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="272" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.cpp" bodystart="1932" bodyend="1984"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="3297">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="3279">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="3280" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="3282">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="3292">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="3275">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="3275" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="3258">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3259" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3274">
        <label>Real</label>
      </node>
      <node id="3298">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3299" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3290">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="3291" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="3253">
        <label>std::vector&lt; amrex::MultiFab *, std::allocator&lt; amrex::MultiFab *&gt; &gt;</label>
      </node>
      <node id="3247">
        <label>amrex::MLMG</label>
        <link refid="classamrex_1_1MLMG"/>
        <childnode refid="3248" relation="usage">
          <edgelabel>rescor</edgelabel>
          <edgelabel>res</edgelabel>
        </childnode>
        <childnode refid="3250" relation="usage">
          <edgelabel>m_iter_fine_resnorm0</edgelabel>
          <edgelabel>timer</edgelabel>
        </childnode>
        <childnode refid="3252" relation="usage">
          <edgelabel>sol</edgelabel>
        </childnode>
        <childnode refid="3254" relation="usage">
          <edgelabel>fine_mask</edgelabel>
        </childnode>
        <childnode refid="3256" relation="usage">
          <edgelabel>m_niters_cg</edgelabel>
        </childnode>
        <childnode refid="3258" relation="usage">
          <edgelabel>scratch</edgelabel>
          <edgelabel>sol_raii</edgelabel>
        </childnode>
        <childnode refid="3260" relation="usage">
          <edgelabel>volinv</edgelabel>
        </childnode>
        <childnode refid="3262" relation="usage">
          <edgelabel>rhs</edgelabel>
        </childnode>
        <childnode refid="3264" relation="usage">
          <edgelabel>cor</edgelabel>
          <edgelabel>cor_hold</edgelabel>
        </childnode>
        <childnode refid="3266" relation="usage">
          <edgelabel>linop</edgelabel>
        </childnode>
        <childnode refid="3274" relation="usage">
          <edgelabel>bottom_reltol</edgelabel>
          <edgelabel>bottom_abstol</edgelabel>
          <edgelabel>m_final_resnorm0</edgelabel>
          <edgelabel>m_rhsnorm0</edgelabel>
          <edgelabel>m_init_resnorm0</edgelabel>
        </childnode>
      </node>
      <node id="3249">
        <label>std::vector&lt; amrex::Vector&lt; amrex::MultiFab &gt;, std::allocator&lt; amrex::Vector&lt; amrex::MultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="3289">
        <label>std::vector&lt; char *, std::allocator&lt; char *&gt; &gt;</label>
      </node>
      <node id="3306">
        <label>std::vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt;, std::allocator&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt; &gt;</label>
      </node>
      <node id="3294">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="3291">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="3292" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="3256">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3257" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3280">
        <label>string</label>
      </node>
      <node id="3300">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="3275" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="3251">
        <label>std::vector&lt; Real, std::allocator&lt; Real &gt; &gt;</label>
      </node>
      <node id="3302">
        <label>std::vector&lt; Array&lt; int, AMREX_SPACEDIM &gt;, std::allocator&lt; Array&lt; int, AMREX_SPACEDIM &gt; &gt; &gt;</label>
      </node>
      <node id="3269">
        <label>amrex::Vector&lt; amrex::Vector&lt; BoxArray &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3270" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3262">
        <label>amrex::Vector&lt; amrex::MultiFab &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3263" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3267">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3268" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3272">
        <label>std::vector&lt; amrex::Vector&lt; amrex::Geometry &gt;, std::allocator&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt; &gt;</label>
      </node>
      <node id="3295">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="3261">
        <label>std::vector&lt; amrex::Vector&lt; Real &gt;, std::allocator&lt; amrex::Vector&lt; Real &gt; &gt; &gt;</label>
      </node>
      <node id="3271">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::Geometry &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3272" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3252">
        <label>amrex::Vector&lt; amrex::MultiFab *&gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3253" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3273">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="3273" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="3274" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="3288">
        <label>amrex::Vector&lt; char *&gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3289" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3264">
        <label>amrex::Vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3265" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3303">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3304" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3307">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3308" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3259">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="3299">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="3257">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="3266">
        <label>amrex::MLLinOp</label>
        <link refid="classamrex_1_1MLLinOp"/>
        <childnode refid="3267" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="3269" relation="usage">
          <edgelabel>m_grids</edgelabel>
        </childnode>
        <childnode refid="3271" relation="usage">
          <edgelabel>m_geom</edgelabel>
        </childnode>
        <childnode refid="3273" relation="usage">
          <edgelabel>m_coarse_bc_loc</edgelabel>
        </childnode>
        <childnode refid="3275" relation="usage">
          <edgelabel>m_ixtype</edgelabel>
        </childnode>
        <childnode refid="3276" relation="usage">
          <edgelabel>m_coarse_data_for_bc</edgelabel>
        </childnode>
        <childnode refid="3256" relation="usage">
          <edgelabel>m_domain_covered</edgelabel>
          <edgelabel>m_amr_ref_ratio</edgelabel>
          <edgelabel>m_num_mg_levels</edgelabel>
        </childnode>
        <childnode refid="3301" relation="usage">
          <edgelabel>m_hi_inhomog_neumann</edgelabel>
          <edgelabel>m_lo_inhomog_neumann</edgelabel>
        </childnode>
        <childnode refid="3303" relation="usage">
          <edgelabel>m_dmap</edgelabel>
        </childnode>
        <childnode refid="3305" relation="usage">
          <edgelabel>m_hibc</edgelabel>
          <edgelabel>m_lobc</edgelabel>
        </childnode>
        <childnode refid="3307" relation="usage">
          <edgelabel>mg_coarsen_ratio_vec</edgelabel>
        </childnode>
        <childnode refid="3266" relation="usage">
          <edgelabel>m_parent</edgelabel>
        </childnode>
        <childnode refid="3309" relation="usage">
          <edgelabel>info</edgelabel>
        </childnode>
      </node>
      <node id="3248">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::MultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3249" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3254">
        <label>amrex::Vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3255" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3305">
        <label>amrex::Vector&lt; Array&lt; BCType, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3306" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3284">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="3285" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="3296">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3297" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3309">
        <label>amrex::LPInfo</label>
        <link refid="structamrex_1_1LPInfo"/>
      </node>
      <node id="3285">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="3256" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="3293">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3294" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3301">
        <label>amrex::Vector&lt; Array&lt; int, AMREX_SPACEDIM &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3302" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3281">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="3283">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="3284" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="3308">
        <label>std::vector&lt; amrex::IntVect, std::allocator&lt; amrex::IntVect &gt; &gt;</label>
      </node>
      <node id="3265">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::MultiFab &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="3250">
        <label>amrex::Vector&lt; Real &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3251" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3276">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="3277" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3255">
        <label>std::vector&lt; std::unique_ptr&lt; amrex::iMultiFab &gt;, std::allocator&lt; std::unique_ptr&lt; amrex::iMultiFab &gt; &gt; &gt;</label>
      </node>
      <node id="3263">
        <label>std::vector&lt; amrex::MultiFab, std::allocator&lt; amrex::MultiFab &gt; &gt;</label>
      </node>
      <node id="3277">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="3278" relation="public-inheritance">
        </childnode>
        <childnode refid="3286" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
        </childnode>
        <childnode refid="3288" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="3275" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="3290" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="3256" relation="usage">
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="3293" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="3295" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="3296" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="3298" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="3300" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="3286">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3287" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3260">
        <label>amrex::Vector&lt; amrex::Vector&lt; Real &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3261" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3278">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="3279" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="3281" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="3275" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="3282" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="3256" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="3283" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
      </node>
      <node id="3287">
        <label>std::vector&lt; std::size_t, std::allocator&lt; std::size_t &gt; &gt;</label>
      </node>
      <node id="3270">
        <label>std::vector&lt; amrex::Vector&lt; BoxArray &gt;, std::allocator&lt; amrex::Vector&lt; BoxArray &gt; &gt; &gt;</label>
      </node>
      <node id="3304">
        <label>std::vector&lt; amrex::Vector&lt; amrex::DistributionMapping &gt;, std::allocator&lt; amrex::Vector&lt; amrex::DistributionMapping &gt; &gt; &gt;</label>
      </node>
      <node id="3268">
        <label>std::vector&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt;, std::allocator&lt; amrex::Vector&lt; std::unique_ptr&lt; amrex::FabFactory&lt; amrex::FArrayBox &gt; &gt; &gt; &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" line="21" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/LinearSolvers/MLMG/AMReX_MLMG.H" bodystart="20" bodyend="274"/>
    <listofallmembers>
      <member refid="classamrex_1_1MLMG_1a68fb3d9c54966ec9e5fda98b4b0cf169" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>actualBottomSolve</name></member>
      <member refid="classamrex_1_1MLMG_1ae1d69e956c3e0a266b4b2c43c2881e3a" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>addInterpCorrection</name></member>
      <member refid="classamrex_1_1MLMG_1a383d3320ac67af7ea304a3fad4c53ff6" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>always_use_bnorm</name></member>
      <member refid="classamrex_1_1MLMG_1af31448f89352b5c413715761930d929a" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>apply</name></member>
      <member refid="classamrex_1_1MLMG_1a92c1d883b63949e33c6acba2c0e19c6b" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>averageDownAndSync</name></member>
      <member refid="classamrex_1_1MLMG_1a864ffbd5cc09c630993c949c5d890d0f" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>BCMode</name></member>
      <member refid="classamrex_1_1MLMG_1aeb5b459a58233233b7546e3cef9e928f" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>bottom_abstol</name></member>
      <member refid="classamrex_1_1MLMG_1a37be121e8fe2e8e8341198486fc07d0e" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>bottom_maxiter</name></member>
      <member refid="classamrex_1_1MLMG_1a20ed3ce546f3fa0f009d66fd9bd1f2bc" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>bottom_reltol</name></member>
      <member refid="classamrex_1_1MLMG_1a1a607f195669be23b48131ae81e35b25" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>bottom_solver</name></member>
      <member refid="classamrex_1_1MLMG_1ac0602b6cac3018c66c89819127043001accea4ad3befe3a4c0c996cacbc4b1fb3" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>bottom_time</name></member>
      <member refid="classamrex_1_1MLMG_1ae2f4cd61322f224e598377431f47dde5" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>bottom_verbose</name></member>
      <member refid="classamrex_1_1MLMG_1a105413ba8fce8beab99c2b7f11f0f028" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>bottomSolve</name></member>
      <member refid="classamrex_1_1MLMG_1a31f80f78e0f4a69ccc3f167e62ae7d51" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>BottomSolver</name></member>
      <member refid="classamrex_1_1MLMG_1a7449cb19c1e62e14a47d020cb696f0b5" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>bottomSolveWithCG</name></member>
      <member refid="classamrex_1_1MLMG_1aaf664a17642380d701b1b7b08e10fa63" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>bottomSolveWithHypre</name></member>
      <member refid="classamrex_1_1MLMG_1a1d9aa957bda2ed06061254fb7e187c3f" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>bottomSolveWithPETSc</name></member>
      <member refid="classamrex_1_1MLMG_1aa2a89a45fc288f18494a1304ce6fe5e2" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>buildFineMask</name></member>
      <member refid="classamrex_1_1MLMG_1a7a45a77d3387850e584e8375b779b33c" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>cf_strategy</name></member>
      <member refid="classamrex_1_1MLMG_1a318536fe822c58660f772ef85c0ef1dd" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>CFStrategy</name></member>
      <member refid="classamrex_1_1MLMG_1afc89e8e61086b888d38d0542beb6a955" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>checkPoint</name></member>
      <member refid="classamrex_1_1MLMG_1ab1c8f11cfd83f75cf94c5f3cd9abcb91" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>compResidual</name></member>
      <member refid="classamrex_1_1MLMG_1a6e3b238696c2c79000390a6a98f7b9e9" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>computeMLResidual</name></member>
      <member refid="classamrex_1_1MLMG_1af609ac426f564d969f87201e8189eaf1" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>computeResidual</name></member>
      <member refid="classamrex_1_1MLMG_1a725d6dc0cc3c20d8baa48b883805863c" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>computeResOfCorrection</name></member>
      <member refid="classamrex_1_1MLMG_1a97d673162294d25b9b325b636cb9183d" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>computeResWithCrseCorFineCor</name></member>
      <member refid="classamrex_1_1MLMG_1aa802d8378f3912da5b884fcc07c2351b" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>computeResWithCrseSolFineCor</name></member>
      <member refid="classamrex_1_1MLMG_1a3cd643e6bf9f7e6d9d2b8cb7fa0b7c71" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>computeVolInv</name></member>
      <member refid="classamrex_1_1MLMG_1aee464af91d358583757fd104da92b407" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>cor</name></member>
      <member refid="classamrex_1_1MLMG_1ad74a7a55ad770900e7028fbfea7119ee" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>cor_hold</name></member>
      <member refid="classamrex_1_1MLMG_1a16a61c9fe1782c8afde4a096b564fb90" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>do_fixed_number_of_iters</name></member>
      <member refid="classamrex_1_1MLMG_1a5de6da3652a1625f6640f4cb80451501" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>do_nsolve</name></member>
      <member refid="classamrex_1_1MLMG_1ac6ee903a66f419d1ed10533cc13bd4e4" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>final_fill_bc</name></member>
      <member refid="classamrex_1_1MLMG_1a67cedda5ad0584d823d1d4fa12d57274" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>fine_mask</name></member>
      <member refid="classamrex_1_1MLMG_1aa10d7e4fe3c243857a5493ca548b0f55" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>finest_amr_lev</name></member>
      <member refid="classamrex_1_1MLMG_1adfdd4fbc6266509a6c9507244ccbf568" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>getBottomToleranceAbs</name></member>
      <member refid="classamrex_1_1MLMG_1a3f7c16fa32591e6ca66a72d9b998f071" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>getFinalResidual</name></member>
      <member refid="classamrex_1_1MLMG_1a5b6cd8f9dd955924d2f84832cfd5fba8" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLMG_1a16ea3ad0b4963514b9ff0f4419456a88" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLMG_1a0032f614b4125ab86db37ab91481d8c9" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLMG_1a18f756b655f55707cba06813c02a7e10" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>getFluxes</name></member>
      <member refid="classamrex_1_1MLMG_1a6fcfa52ef82ffa84f1e4358c6b3fd3c6" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>getGradSolution</name></member>
      <member refid="classamrex_1_1MLMG_1a38246ba4d9cc99180d23f13eaee31858" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>getInitResidual</name></member>
      <member refid="classamrex_1_1MLMG_1a44fe292771ffd1f946297f72295217c1" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>getInitRHS</name></member>
      <member refid="classamrex_1_1MLMG_1a0a5c73d611e9e8b1fd1995d9bcf79086" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>getNodalSum</name></member>
      <member refid="classamrex_1_1MLMG_1ac3822a91ae7b60ff1c4a691936cf527e" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>getNumCGIters</name></member>
      <member refid="classamrex_1_1MLMG_1ab7d3085def0c04b487a8cabf898ce039" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>getNumIters</name></member>
      <member refid="classamrex_1_1MLMG_1a8bdedc7ec262346ed0007f53c3a8d200" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>getResidualHistory</name></member>
      <member refid="classamrex_1_1MLMG_1a884666fcc4158d42a4f01c83e5d454dc" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>interpCorrection</name></member>
      <member refid="classamrex_1_1MLMG_1a43e3d241603fb49ce0dbef1058e97118" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>interpCorrection</name></member>
      <member refid="classamrex_1_1MLMG_1ac0602b6cac3018c66c89819127043001af8c1043cde20f8e1d9d022abb2c9ffad" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>iter_time</name></member>
      <member refid="classamrex_1_1MLMG_1a9bfa9f478ad10977b4c60b176b00250b" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>linop</name></member>
      <member refid="classamrex_1_1MLMG_1ad02719958a8fc22e7843935f5ff1e407" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>linop_prepared</name></member>
      <member refid="classamrex_1_1MLMG_1a93725420770bf42d532f9ee7dea87c2f" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>Location</name></member>
      <member refid="classamrex_1_1MLMG_1abacb248f6c07b07db294322fb7e1aea7" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>m_final_resnorm0</name></member>
      <member refid="classamrex_1_1MLMG_1a43af172c075ffa6011bfb2e6dc8493b7" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>m_init_resnorm0</name></member>
      <member refid="classamrex_1_1MLMG_1a0bca266eed8ebba38073150d4a748c74" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>m_iter_fine_resnorm0</name></member>
      <member refid="classamrex_1_1MLMG_1a6eed69f8495e3c1f27296478ff7417e9" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>m_niters_cg</name></member>
      <member refid="classamrex_1_1MLMG_1a63559f1a5501e67e6c4d47e443470dc2" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>m_rhsnorm0</name></member>
      <member refid="classamrex_1_1MLMG_1ae5f98b72769ed94a44f850aa8aa1e1ba" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>makeSolvable</name></member>
      <member refid="classamrex_1_1MLMG_1a818eb5c5d459af91e960acec44627869" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>makeSolvable</name></member>
      <member refid="classamrex_1_1MLMG_1aefc9d57def6cdc2851da4d26e38e092f" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>max_fmg_iters</name></member>
      <member refid="classamrex_1_1MLMG_1ae4f94ee42b8da24efdafd34b023e2457" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>max_iters</name></member>
      <member refid="classamrex_1_1MLMG_1a7085d7450d545c1f593954d5e445af02" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>mgFcycle</name></member>
      <member refid="classamrex_1_1MLMG_1a6b92f271588ce53fd24d1f7b2c1442a0" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>mgVcycle</name></member>
      <member refid="classamrex_1_1MLMG_1a38df331fcb36de71c4af020b2e1117ed" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>miniCycle</name></member>
      <member refid="classamrex_1_1MLMG_1a7b344595276c27ed17dacb3ea1fb95aa" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>MLCGSolver</name></member>
      <member refid="classamrex_1_1MLMG_1a4d80ba0f675a1b751f35d66d04253dd6" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>MLMG</name></member>
      <member refid="classamrex_1_1MLMG_1aa86c7015c1ee9cfde217cef76c1a55a5" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>MLResNormInf</name></member>
      <member refid="classamrex_1_1MLMG_1a2f0fcfb202fff08a11c25408b72dd505" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>MLRhsNormInf</name></member>
      <member refid="classamrex_1_1MLMG_1abfda726f45d63f473cacf3cab3a5b063" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>namrlevs</name></member>
      <member refid="classamrex_1_1MLMG_1a51b70e5b31f450b486ff39b013d9440c" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>ns_linop</name></member>
      <member refid="classamrex_1_1MLMG_1ab20f4feb5164d7f9ee8bcbfaf6b8c497" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>ns_mlmg</name></member>
      <member refid="classamrex_1_1MLMG_1aed64acecaae43cecb817b689d1da5e54" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>ns_rhs</name></member>
      <member refid="classamrex_1_1MLMG_1a976935c58886c588cb51f006fd875809" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>ns_sol</name></member>
      <member refid="classamrex_1_1MLMG_1ac67a9c44825a6f8c44a9ad53020e3109" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>NSolve</name></member>
      <member refid="classamrex_1_1MLMG_1a8eba5d6f50bda8d65cb4481e57a557a5" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>nsolve_grid_size</name></member>
      <member refid="classamrex_1_1MLMG_1ac0602b6cac3018c66c89819127043001ae447a282e35218ac782b215c4a1fccfc" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>ntimers</name></member>
      <member refid="classamrex_1_1MLMG_1a8519bc33f4e84ff1b590cf406c0c9506" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>nu1</name></member>
      <member refid="classamrex_1_1MLMG_1a647e21342109e81cc50bc8825bc852ce" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>nu2</name></member>
      <member refid="classamrex_1_1MLMG_1ae8120b974758c572d1463ee286204e10" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>nub</name></member>
      <member refid="classamrex_1_1MLMG_1a4076f55caa5454e91c6ca50f1d2d6c10" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>nuf</name></member>
      <member refid="classamrex_1_1MLMG_1a9d651a710c7d61305fba697e554ec72b" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>numAMRLevels</name></member>
      <member refid="classamrex_1_1MLMG_1a97f2d0353ab1bbb9e4db171de41e2501" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>oneIter</name></member>
      <member refid="classamrex_1_1MLMG_1a955977f98a355020f4808fd4acefe76f" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>prepareForNSolve</name></member>
      <member refid="classamrex_1_1MLMG_1a69fd986340e50363b58631b3b503bced" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>prepareForSolve</name></member>
      <member refid="classamrex_1_1MLMG_1a86dd40d4379f5831102e595cecfad692" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>res</name></member>
      <member refid="classamrex_1_1MLMG_1a265ef6b4e1fa8487d48ee612843c3cd4" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>rescor</name></member>
      <member refid="classamrex_1_1MLMG_1a3ee68a8bba6178a55d1ca183be3f6fb3" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>ResNormInf</name></member>
      <member refid="classamrex_1_1MLMG_1abc8a02638fb38ec33c9567569a501317" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>rhs</name></member>
      <member refid="classamrex_1_1MLMG_1ab013a4dc85f37684f9e65f63b5318fc9" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>scratch</name></member>
      <member refid="classamrex_1_1MLMG_1ab22ced370b4d9a1bf3d20ce2b4c03ded" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>setAlwaysUseBNorm</name></member>
      <member refid="classamrex_1_1MLMG_1a7325bf2f240899515dfe449ed8bd5322" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>setBottomMaxIter</name></member>
      <member refid="classamrex_1_1MLMG_1a2487b16d9a3b08fb224a246e00e8e6a3" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>setBottomSmooth</name></member>
      <member refid="classamrex_1_1MLMG_1a8cc0e411d47ee55ab5d23579d5a2ba1d" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>setBottomSolver</name></member>
      <member refid="classamrex_1_1MLMG_1a031ffd7d7be7608b1f3148fefe3ad3ad" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>setBottomTolerance</name></member>
      <member refid="classamrex_1_1MLMG_1a6c1efa9ed114908cc3fb0de844c5a439" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>setBottomToleranceAbs</name></member>
      <member refid="classamrex_1_1MLMG_1a0977ffa971d33d287df1102f8a3e9dec" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>setBottomVerbose</name></member>
      <member refid="classamrex_1_1MLMG_1a5bad11a86d148f166c2d32a91c8667cd" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>setCFStrategy</name></member>
      <member refid="classamrex_1_1MLMG_1a632992dc5145781c23b3c298c4fb05ba" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>setFinalFillBC</name></member>
      <member refid="classamrex_1_1MLMG_1a9e5eab1c9aca3fefa101da8e7a970374" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>setFinalSmooth</name></member>
      <member refid="classamrex_1_1MLMG_1a69b9e5bad723294fcd8b906b1f3241ee" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>setFixedIter</name></member>
      <member refid="classamrex_1_1MLMG_1a6bb92c57b7ff4b5c3de6b7e77d22c440" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>setMaxFmgIter</name></member>
      <member refid="classamrex_1_1MLMG_1ae41f89e26b156b74d97887f07a53c9ca" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>setMaxIter</name></member>
      <member refid="classamrex_1_1MLMG_1abba64831a87d74bc94be6c0834afcba2" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>setNSolve</name></member>
      <member refid="classamrex_1_1MLMG_1a53a3e03d937c4e0c5623a8d1f12e535b" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>setNSolveGridSize</name></member>
      <member refid="classamrex_1_1MLMG_1a9308e7b4f15a296fd96f1a0c7459216f" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>setPostSmooth</name></member>
      <member refid="classamrex_1_1MLMG_1a1d4806755bec5fec901412100d74b96d" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>setPreSmooth</name></member>
      <member refid="classamrex_1_1MLMG_1ab9b5abebf8372da2df3371dbf1a5931a" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>setVerbose</name></member>
      <member refid="classamrex_1_1MLMG_1a45e3c66f8db400e00135eb8a4d97217b" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>sol</name></member>
      <member refid="classamrex_1_1MLMG_1a2bb3673229f43eac4c351ce53a287226" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>sol_raii</name></member>
      <member refid="classamrex_1_1MLMG_1a9f333ea827975468c405f8767e1f56a5" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>solve</name></member>
      <member refid="classamrex_1_1MLMG_1a9045bb00d9f839c74bf34179c75f1aae" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>solve_called</name></member>
      <member refid="classamrex_1_1MLMG_1ac0602b6cac3018c66c89819127043001a9806779ed6ebcc94ecd07dbb3ff6acca" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>solve_time</name></member>
      <member refid="classamrex_1_1MLMG_1a60c47161b03df19f998710df25c494fd" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>timer</name></member>
      <member refid="classamrex_1_1MLMG_1ac0602b6cac3018c66c89819127043001" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>timer_types</name></member>
      <member refid="classamrex_1_1MLMG_1af81888354825d23d402d7787f0fe4dc9" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>verbose</name></member>
      <member refid="classamrex_1_1MLMG_1acbd5fc7b1f0af79ee6eb5daa55b890fb" prot="private" virt="non-virtual"><scope>amrex::MLMG</scope><name>volinv</name></member>
      <member refid="classamrex_1_1MLMG_1a12c3c0793a39356963dd1824588b7593" prot="public" virt="non-virtual"><scope>amrex::MLMG</scope><name>~MLMG</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
