<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1DenseBins" kind="class" language="C++" prot="public">
    <compoundname>amrex::DenseBins</compoundname>
    <includes refid="AMReX__DenseBins_8H" local="no">AMReX_DenseBins.H</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1DenseBins_1ae914634726f075979b5e855a5fda0924" prot="public" static="no">
        <type><ref refid="structamrex_1_1DenseBinIteratorFactory" kindref="compound">DenseBinIteratorFactory</ref>&lt; T &gt;</type>
        <definition>using amrex::DenseBins&lt; T &gt;::BinIteratorFactory =  DenseBinIteratorFactory&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>BinIteratorFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="92" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1DenseBins_1ace91724777a08f267ca7515117ebe620" prot="public" static="no">
        <type>unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>using amrex::DenseBins&lt; T &gt;::index_type =  unsigned int</definition>
        <argsstring></argsstring>
        <name>index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="93" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1DenseBins_1a9bc32ea181687bc997cb145606c436b4" prot="private" static="no" mutable="no">
        <type>const T *</type>
        <definition>const T* amrex::DenseBins&lt; T &gt;::m_items</definition>
        <argsstring></argsstring>
        <name>m_items</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="522" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="522" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DenseBins_1af1561b37e307d49631e3fc2ee1b68212" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; <ref refid="classamrex_1_1DenseBins_1ace91724777a08f267ca7515117ebe620" kindref="member">index_type</ref> &gt;</type>
        <definition>Gpu::DeviceVector&lt;index_type&gt; amrex::DenseBins&lt; T &gt;::m_bins</definition>
        <argsstring></argsstring>
        <name>m_bins</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="524" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DenseBins_1af113e9e077a9aed3c6696adabcefa899" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; <ref refid="classamrex_1_1DenseBins_1ace91724777a08f267ca7515117ebe620" kindref="member">index_type</ref> &gt;</type>
        <definition>Gpu::DeviceVector&lt;index_type&gt; amrex::DenseBins&lt; T &gt;::m_counts</definition>
        <argsstring></argsstring>
        <name>m_counts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="525" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="525" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DenseBins_1a489cbe99cd70050a8d0d5d0de2aa2fe4" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; <ref refid="classamrex_1_1DenseBins_1ace91724777a08f267ca7515117ebe620" kindref="member">index_type</ref> &gt;</type>
        <definition>Gpu::DeviceVector&lt;index_type&gt; amrex::DenseBins&lt; T &gt;::m_local_offsets</definition>
        <argsstring></argsstring>
        <name>m_local_offsets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="526" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DenseBins_1ad70b443fd8e65a368e1fed776614b0e4" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; <ref refid="classamrex_1_1DenseBins_1ace91724777a08f267ca7515117ebe620" kindref="member">index_type</ref> &gt;</type>
        <definition>Gpu::DeviceVector&lt;index_type&gt; amrex::DenseBins&lt; T &gt;::m_offsets</definition>
        <argsstring></argsstring>
        <name>m_offsets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="527" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="527" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1DenseBins_1ad40e15a5e019a0a7afa527c6226e7675" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">Gpu::DeviceVector</ref>&lt; <ref refid="classamrex_1_1DenseBins_1ace91724777a08f267ca7515117ebe620" kindref="member">index_type</ref> &gt;</type>
        <definition>Gpu::DeviceVector&lt;index_type&gt; amrex::DenseBins&lt; T &gt;::m_perm</definition>
        <argsstring></argsstring>
        <name>m_perm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="528" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="528" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1DenseBins_1a5eb07c849d5749bf5aa71d0d2727201d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::DenseBins&lt; T &gt;::build</definition>
        <argsstring>(N nitems, T const *v, const Box &amp;bx, F &amp;&amp;f)</argsstring>
        <name>build</name>
        <param>
          <type>N</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Populate the bins with a set of items. </para>
        </briefdescription>
        <detaileddescription>
<para>The algorithm is similar to a counting sort. First, we count the number of items in each bin. Then, we perform a prefix sum on the resulting counts. Finally, the set of partial sums is incremented in parallel using atomicInc, which results in a permutation array that places the items in bin-sorted order.</para>
<para>This version uses a 3D box to specificy the index space over which the bins are defined.</para>
<para>This overload uses the &quot;default&quot; parallelization strategy. If <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> has been compiled for GPU, it runs on the GPU. Otherwise, it executes in serial.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the &apos;size&apos; type that can enumerate all the items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that maps items to <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> bins</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nitems</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of items to put in the bins </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the start of the items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> that defines the space over which the bins will be defined </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object that maps items to bins </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="118" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="118" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DenseBins_1a4c7d40c3975acb725e9d2b5e76f4d2d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::DenseBins&lt; T &gt;::build</definition>
        <argsstring>(N nitems, T const *v, int nbins, F &amp;&amp;f)</argsstring>
        <name>build</name>
        <param>
          <type>N</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nbins</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Populate the bins with a set of items. </para>
        </briefdescription>
        <detaileddescription>
<para>The algorithm is similar to a counting sort. First, we count the number of items in each bin. Then, we perform a prefix sum on the resulting counts. Finally, the set of partial sums is incremented in parallel using atomicInc, which results in a permutation array that places the items in bin-sorted order.</para>
<para>This version uses a 1D index space for the set of bins.</para>
<para>This overload uses the &quot;default&quot; parallelization strategy. If <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> has been compiled for GPU, it runs on the GPU. Otherwise, it executes in serial.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the &apos;size&apos; type that can enumerate all the items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that maps items to <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> bins</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nitems</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of items to put in the bins </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the start of the items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbins</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bins to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object that maps items to bins </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="145" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DenseBins_1a08beb00572b86651df5290b918b19240" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::DenseBins&lt; T &gt;::build</definition>
        <argsstring>(BinPolicy::GPUBinPolicy, N nitems, T const *v, const Box &amp;bx, F &amp;&amp;f)</argsstring>
        <name>build</name>
        <param>
          <type><ref refid="structamrex_1_1BinPolicy_1_1GPUBinPolicy" kindref="compound">BinPolicy::GPUBinPolicy</ref></type>
        </param>
        <param>
          <type>N</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Populate the bins with a set of items. </para>
        </briefdescription>
        <detaileddescription>
<para>The algorithm is similar to a counting sort. First, we count the number of items in each bin. Then, we perform a prefix sum on the resulting counts. Finally, the set of partial sums is incremented in parallel using atomicInc, which results in a permutation array that places the items in bin-sorted order.</para>
<para>This version uses a 3D box to specificy the index space over which the bins are defined.</para>
<para>This overload uses the &quot;GPU&quot; parallelization strategy. If <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> has been compiled for GPU, it runs on the GPU. Otherwise, it executes in serial.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the &apos;size&apos; type that can enumerate all the items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that maps items to <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> bins</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nitems</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of items to put in the bins </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the start of the items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> that defines the space over which the bins will be defined </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object that maps items to bins </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="173" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="173" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DenseBins_1ab28a3e8f7569e2dfc18a2c69af9afe44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::DenseBins&lt; T &gt;::build</definition>
        <argsstring>(BinPolicy::GPUBinPolicy, N nitems, T const *v, int nbins, F &amp;&amp;f)</argsstring>
        <name>build</name>
        <param>
          <type><ref refid="structamrex_1_1BinPolicy_1_1GPUBinPolicy" kindref="compound">BinPolicy::GPUBinPolicy</ref></type>
        </param>
        <param>
          <type>N</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nbins</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Populate the bins with a set of items. </para>
        </briefdescription>
        <detaileddescription>
<para>The algorithm is similar to a counting sort. First, we count the number of items in each bin. Then, we perform a prefix sum on the resulting counts. Finally, the set of partial sums is incremented in parallel using atomicInc, which results in a permutation array that places the items in bin-sorted order.</para>
<para>This version uses a 1D index space for the set of bins.</para>
<para>This overload uses the &quot;GPU&quot; parallelization strategy. If <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> has been compiled for GPU, it runs on the GPU. Otherwise, it executes in serial.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the &apos;size&apos; type that can enumerate all the items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that maps items to <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> bins</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nitems</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of items to put in the bins </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the start of the items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbins</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bins to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object that maps items to bins </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="214" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="214" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DenseBins_1a9fd4ade6aaa0628cf93d6e86d04d7cd8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::DenseBins&lt; T &gt;::build</definition>
        <argsstring>(BinPolicy::OpenMPBinPolicy, N nitems, T const *v, const Box &amp;bx, F &amp;&amp;f)</argsstring>
        <name>build</name>
        <param>
          <type><ref refid="structamrex_1_1BinPolicy_1_1OpenMPBinPolicy" kindref="compound">BinPolicy::OpenMPBinPolicy</ref></type>
        </param>
        <param>
          <type>N</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Populate the bins with a set of items. </para>
        </briefdescription>
        <detaileddescription>
<para>The algorithm is similar to a counting sort. First, we count the number of items in each bin. Then, we perform a prefix sum on the resulting counts. Finally, the set of partial sums is incremented in parallel using atomicInc, which results in a permutation array that places the items in bin-sorted order.</para>
<para>This version uses a 3D box to specificy the index space over which the bins are defined.</para>
<para>This overload uses the &quot;OpenMP&quot; parallelization strategy and always runs on the host. If <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> has been compiled with <ref refid="namespaceamrex_1_1OpenMP" kindref="compound">OpenMP</ref> support, the executation will be parallelized, otherwise it will be serial.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the &apos;size&apos; type that can enumerate all the items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that maps items to <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> bins</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nitems</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of items to put in the bins </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the start of the items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> that defines the space over which the bins will be defined </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object that maps items to bins </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="277" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="277" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DenseBins_1aa058b5fdee9f062c4a784998e5d0ea93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::DenseBins&lt; T &gt;::build</definition>
        <argsstring>(BinPolicy::OpenMPBinPolicy, N nitems, T const *v, int nbins, F &amp;&amp;f)</argsstring>
        <name>build</name>
        <param>
          <type><ref refid="structamrex_1_1BinPolicy_1_1OpenMPBinPolicy" kindref="compound">BinPolicy::OpenMPBinPolicy</ref></type>
        </param>
        <param>
          <type>N</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nbins</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Populate the bins with a set of items. </para>
        </briefdescription>
        <detaileddescription>
<para>The algorithm is similar to a counting sort. First, we count the number of items in each bin. Then, we perform a prefix sum on the resulting counts. Finally, the set of partial sums is incremented in parallel using atomicInc, which results in a permutation array that places the items in bin-sorted order.</para>
<para>This version uses a 1D index space for the set of bins.</para>
<para>This overload uses the &quot;OpenMP&quot; parallelization strategy and always runs on the host. If <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> has been compiled with <ref refid="namespaceamrex_1_1OpenMP" kindref="compound">OpenMP</ref> support, the executation will be parallelized, otherwise it will be serial.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the &apos;size&apos; type that can enumerate all the items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that maps items to <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> bins</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nitems</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of items to put in the bins </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the start of the items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbins</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bins to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object that maps items to bins </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="319" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="319" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DenseBins_1a89b1078bcd237f29a2eca69b27fddf1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::DenseBins&lt; T &gt;::build</definition>
        <argsstring>(BinPolicy::SerialBinPolicy, N nitems, T const *v, const Box &amp;bx, F &amp;&amp;f)</argsstring>
        <name>build</name>
        <param>
          <type><ref refid="structamrex_1_1BinPolicy_1_1SerialBinPolicy" kindref="compound">BinPolicy::SerialBinPolicy</ref></type>
        </param>
        <param>
          <type>N</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Populate the bins with a set of items. </para>
        </briefdescription>
        <detaileddescription>
<para>The algorithm is similar to a counting sort. First, we count the number of items in each bin. Then, we perform a prefix sum on the resulting counts. Finally, the set of partial sums is incremented in parallel using atomicInc, which results in a permutation array that places the items in bin-sorted order.</para>
<para>This version uses a 3D box to specificy the index space over which the bins are defined.</para>
<para>This overload uses the &quot;Serial&quot; parallelization strategy. It always runs in serial on the host, regardless of whether AMREX_USE_GPU or AMREX_USE_OMP has been defined.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the &apos;size&apos; type that can enumerate all the items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that maps items to <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> bins</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nitems</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of items to put in the bins </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the start of the items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> that defines the space over which the bins will be defined </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object that maps items to bins </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="416" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="416" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DenseBins_1ae22149562ebf6d21084204d8baf90711" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::DenseBins&lt; T &gt;::build</definition>
        <argsstring>(BinPolicy::SerialBinPolicy, N nitems, T const *v, int nbins, F &amp;&amp;f)</argsstring>
        <name>build</name>
        <param>
          <type><ref refid="structamrex_1_1BinPolicy_1_1SerialBinPolicy" kindref="compound">BinPolicy::SerialBinPolicy</ref></type>
        </param>
        <param>
          <type>N</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nbins</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Populate the bins with a set of items. </para>
        </briefdescription>
        <detaileddescription>
<para>The algorithm is similar to a counting sort. First, we count the number of items in each bin. Then, we perform a prefix sum on the resulting counts. Finally, the set of partial sums is incremented in parallel using atomicInc, which results in a permutation array that places the items in bin-sorted order.</para>
<para>This version uses a 1D index space for the set of bins.</para>
<para>This overload uses the &quot;Serial&quot; parallelization strategy. It always runs in serial on the host, regardless of whether AMREX_USE_GPU or AMREX_USE_OMP has been defined.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>the &apos;size&apos; type that can enumerate all the items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a function that maps items to <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> bins</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nitems</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of items to put in the bins </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the start of the items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbins</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bins to use </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a function object that maps items to bins </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="458" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="458" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DenseBins_1ad79436d29055a095ee8a8ffab36475d3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::DenseBins&lt; T &gt;::numItems</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numItems</name>
        <briefdescription>
<para>the number of items in the container </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="491" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="491" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DenseBins_1af98199a3fd0f724083761ddea28e4606" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::DenseBins&lt; T &gt;::numBins</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numBins</name>
        <briefdescription>
<para>the number of bins in the container </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="494" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="494" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DenseBins_1ab50df3946feebe789f41c7d01762a30b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1DenseBins_1ace91724777a08f267ca7515117ebe620" kindref="member">index_type</ref> *</type>
        <definition>index_type* amrex::DenseBins&lt; T &gt;::permutationPtr</definition>
        <argsstring>() noexcept</argsstring>
        <name>permutationPtr</name>
        <briefdescription>
<para>returns the pointer to the permutation array </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="497" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="497" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DenseBins_1a3448e9a533b211d486f42f06f9736218" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1DenseBins_1ace91724777a08f267ca7515117ebe620" kindref="member">index_type</ref> *</type>
        <definition>index_type* amrex::DenseBins&lt; T &gt;::offsetsPtr</definition>
        <argsstring>() noexcept</argsstring>
        <name>offsetsPtr</name>
        <briefdescription>
<para>returns the pointer to the offsets array </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="500" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="500" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DenseBins_1a1c13238822cee328b27603d0a467f981" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1DenseBins_1ace91724777a08f267ca7515117ebe620" kindref="member">index_type</ref> *</type>
        <definition>index_type* amrex::DenseBins&lt; T &gt;::binsPtr</definition>
        <argsstring>() noexcept</argsstring>
        <name>binsPtr</name>
        <briefdescription>
<para>returns the pointer to the bins array </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="503" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="503" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DenseBins_1a8f49f54a25549e053bb63d0e72d751e1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DenseBins_1ace91724777a08f267ca7515117ebe620" kindref="member">index_type</ref> *</type>
        <definition>const index_type* amrex::DenseBins&lt; T &gt;::permutationPtr</definition>
        <argsstring>() const noexcept</argsstring>
        <name>permutationPtr</name>
        <briefdescription>
<para>returns const pointer to the permutation array </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="506" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="506" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DenseBins_1a594a9ba943cde14aeec576817d575b6a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DenseBins_1ace91724777a08f267ca7515117ebe620" kindref="member">index_type</ref> *</type>
        <definition>const index_type* amrex::DenseBins&lt; T &gt;::offsetsPtr</definition>
        <argsstring>() const noexcept</argsstring>
        <name>offsetsPtr</name>
        <briefdescription>
<para>returns const pointer to the offsets array </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="509" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="509" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DenseBins_1abf1111e33d2e88edb6bb0654024b33df" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DenseBins_1ace91724777a08f267ca7515117ebe620" kindref="member">index_type</ref> *</type>
        <definition>const index_type* amrex::DenseBins&lt; T &gt;::binsPtr</definition>
        <argsstring>() const noexcept</argsstring>
        <name>binsPtr</name>
        <briefdescription>
<para>returns the const pointer to the bins array </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="512" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="512" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DenseBins_1a8c1a462b3aaa2193672c14d26a56601a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1DenseBinIteratorFactory" kindref="compound">DenseBinIteratorFactory</ref>&lt; T &gt;</type>
        <definition>DenseBinIteratorFactory&lt;T&gt; amrex::DenseBins&lt; T &gt;::getBinIteratorFactory</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getBinIteratorFactory</name>
        <briefdescription>
<para>returns a GPU-capable object that can create iterators over the items in a bin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="515" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="515" bodyend="518"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A container for storing items in a set of bins. </para>
    </briefdescription>
    <detaileddescription>
<para>The underlying data structure is an array of size nitems defining a permutation of the items in the container that puts them in bin-sorted order, plus an array of size nbins+1 that stores the offsets into the permutation array where each bin starts.</para>
<para>The storage for the bins is &quot;dense&quot; in the sense that users pass in either a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> or an integer that defines the space over which the bins will be defined, and empty bins will still take up space.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>type of items we hold </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="4">
        <label>T</label>
      </node>
      <node id="3">
        <label>std::allocator&lt; T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::PODVector&lt; index_type &gt;</label>
        <link refid="classamrex_1_1PODVector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::DenseBins&lt; T &gt;</label>
        <link refid="classamrex_1_1DenseBins"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_bins</edgelabel>
          <edgelabel>m_counts</edgelabel>
          <edgelabel>m_local_offsets</edgelabel>
          <edgelabel>m_offsets</edgelabel>
          <edgelabel>m_perm</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" line="88" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_DenseBins.H" bodystart="89" bodyend="529"/>
    <listofallmembers>
      <member refid="classamrex_1_1DenseBins_1ae914634726f075979b5e855a5fda0924" prot="public" virt="non-virtual"><scope>amrex::DenseBins</scope><name>BinIteratorFactory</name></member>
      <member refid="classamrex_1_1DenseBins_1a1c13238822cee328b27603d0a467f981" prot="public" virt="non-virtual"><scope>amrex::DenseBins</scope><name>binsPtr</name></member>
      <member refid="classamrex_1_1DenseBins_1abf1111e33d2e88edb6bb0654024b33df" prot="public" virt="non-virtual"><scope>amrex::DenseBins</scope><name>binsPtr</name></member>
      <member refid="classamrex_1_1DenseBins_1a5eb07c849d5749bf5aa71d0d2727201d" prot="public" virt="non-virtual"><scope>amrex::DenseBins</scope><name>build</name></member>
      <member refid="classamrex_1_1DenseBins_1a4c7d40c3975acb725e9d2b5e76f4d2d1" prot="public" virt="non-virtual"><scope>amrex::DenseBins</scope><name>build</name></member>
      <member refid="classamrex_1_1DenseBins_1a08beb00572b86651df5290b918b19240" prot="public" virt="non-virtual"><scope>amrex::DenseBins</scope><name>build</name></member>
      <member refid="classamrex_1_1DenseBins_1ab28a3e8f7569e2dfc18a2c69af9afe44" prot="public" virt="non-virtual"><scope>amrex::DenseBins</scope><name>build</name></member>
      <member refid="classamrex_1_1DenseBins_1a9fd4ade6aaa0628cf93d6e86d04d7cd8" prot="public" virt="non-virtual"><scope>amrex::DenseBins</scope><name>build</name></member>
      <member refid="classamrex_1_1DenseBins_1aa058b5fdee9f062c4a784998e5d0ea93" prot="public" virt="non-virtual"><scope>amrex::DenseBins</scope><name>build</name></member>
      <member refid="classamrex_1_1DenseBins_1a89b1078bcd237f29a2eca69b27fddf1c" prot="public" virt="non-virtual"><scope>amrex::DenseBins</scope><name>build</name></member>
      <member refid="classamrex_1_1DenseBins_1ae22149562ebf6d21084204d8baf90711" prot="public" virt="non-virtual"><scope>amrex::DenseBins</scope><name>build</name></member>
      <member refid="classamrex_1_1DenseBins_1a8c1a462b3aaa2193672c14d26a56601a" prot="public" virt="non-virtual"><scope>amrex::DenseBins</scope><name>getBinIteratorFactory</name></member>
      <member refid="classamrex_1_1DenseBins_1ace91724777a08f267ca7515117ebe620" prot="public" virt="non-virtual"><scope>amrex::DenseBins</scope><name>index_type</name></member>
      <member refid="classamrex_1_1DenseBins_1af1561b37e307d49631e3fc2ee1b68212" prot="private" virt="non-virtual"><scope>amrex::DenseBins</scope><name>m_bins</name></member>
      <member refid="classamrex_1_1DenseBins_1af113e9e077a9aed3c6696adabcefa899" prot="private" virt="non-virtual"><scope>amrex::DenseBins</scope><name>m_counts</name></member>
      <member refid="classamrex_1_1DenseBins_1a9bc32ea181687bc997cb145606c436b4" prot="private" virt="non-virtual"><scope>amrex::DenseBins</scope><name>m_items</name></member>
      <member refid="classamrex_1_1DenseBins_1a489cbe99cd70050a8d0d5d0de2aa2fe4" prot="private" virt="non-virtual"><scope>amrex::DenseBins</scope><name>m_local_offsets</name></member>
      <member refid="classamrex_1_1DenseBins_1ad70b443fd8e65a368e1fed776614b0e4" prot="private" virt="non-virtual"><scope>amrex::DenseBins</scope><name>m_offsets</name></member>
      <member refid="classamrex_1_1DenseBins_1ad40e15a5e019a0a7afa527c6226e7675" prot="private" virt="non-virtual"><scope>amrex::DenseBins</scope><name>m_perm</name></member>
      <member refid="classamrex_1_1DenseBins_1af98199a3fd0f724083761ddea28e4606" prot="public" virt="non-virtual"><scope>amrex::DenseBins</scope><name>numBins</name></member>
      <member refid="classamrex_1_1DenseBins_1ad79436d29055a095ee8a8ffab36475d3" prot="public" virt="non-virtual"><scope>amrex::DenseBins</scope><name>numItems</name></member>
      <member refid="classamrex_1_1DenseBins_1a3448e9a533b211d486f42f06f9736218" prot="public" virt="non-virtual"><scope>amrex::DenseBins</scope><name>offsetsPtr</name></member>
      <member refid="classamrex_1_1DenseBins_1a594a9ba943cde14aeec576817d575b6a" prot="public" virt="non-virtual"><scope>amrex::DenseBins</scope><name>offsetsPtr</name></member>
      <member refid="classamrex_1_1DenseBins_1ab50df3946feebe789f41c7d01762a30b" prot="public" virt="non-virtual"><scope>amrex::DenseBins</scope><name>permutationPtr</name></member>
      <member refid="classamrex_1_1DenseBins_1a8f49f54a25549e053bb63d0e72d751e1" prot="public" virt="non-virtual"><scope>amrex::DenseBins</scope><name>permutationPtr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
