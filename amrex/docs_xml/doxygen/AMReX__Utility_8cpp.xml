<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="AMReX__Utility_8cpp" kind="file" language="C++">
    <compoundname>AMReX_Utility.cpp</compoundname>
    <includes local="no">cstdlib</includes>
    <includes local="no">cstring</includes>
    <includes local="no">cctype</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">ctime</includes>
    <includes local="no">iostream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">set</includes>
    <includes local="no">random</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">errno.h</includes>
    <includes refid="AMReX__BLFort_8H" local="no">AMReX_BLFort.H</includes>
    <includes refid="AMReX__REAL_8H" local="no">AMReX_REAL.H</includes>
    <includes refid="AMReX_8H" local="no">AMReX.H</includes>
    <includes refid="AMReX__Utility_8H" local="no">AMReX_Utility.H</includes>
    <includes refid="AMReX__BLassert_8H" local="no">AMReX_BLassert.H</includes>
    <includes refid="AMReX__BLProfiler_8H" local="no">AMReX_BLProfiler.H</includes>
    <includes refid="AMReX__ParallelDescriptor_8H" local="no">AMReX_ParallelDescriptor.H</includes>
    <includes refid="AMReX__BoxArray_8H" local="no">AMReX_BoxArray.H</includes>
    <includes refid="AMReX__Print_8H" local="no">AMReX_Print.H</includes>
    <includes local="no">sys/times.h</includes>
    <includes local="no">sys/time.h</includes>
    <includes local="no">sys/param.h</includes>
    <includes local="no">unistd.h</includes>
    <incdepgraph>
      <node id="34917">
        <label>sys/stat.h</label>
      </node>
      <node id="34963">
        <label>AMReX_ParallelContext.H</label>
        <link refid="AMReX__ParallelContext_8H"/>
        <childnode refid="34933" relation="include">
        </childnode>
        <childnode refid="34964" relation="include">
        </childnode>
        <childnode refid="34945" relation="include">
        </childnode>
        <childnode refid="34927" relation="include">
        </childnode>
      </node>
      <node id="34930">
        <label>functional</label>
      </node>
      <node id="34914">
        <label>iomanip</label>
      </node>
      <node id="34957">
        <label>AMReX_BoxArray.H</label>
        <link refid="AMReX__BoxArray_8H"/>
        <childnode refid="34912" relation="include">
        </childnode>
        <childnode refid="34958" relation="include">
        </childnode>
        <childnode refid="34935" relation="include">
        </childnode>
        <childnode refid="34959" relation="include">
        </childnode>
        <childnode refid="34954" relation="include">
        </childnode>
        <childnode refid="34960" relation="include">
        </childnode>
        <childnode refid="34941" relation="include">
        </childnode>
        <childnode refid="34945" relation="include">
        </childnode>
      </node>
      <node id="34952">
        <label>limits</label>
      </node>
      <node id="34974">
        <label>sys/times.h</label>
      </node>
      <node id="34970">
        <label>AMReX_BLProfiler.H</label>
        <link refid="AMReX__BLProfiler_8H"/>
        <childnode refid="34931" relation="include">
        </childnode>
        <childnode refid="34922" relation="include">
        </childnode>
      </node>
      <node id="34947">
        <label>AMReX_Box.H</label>
        <link refid="AMReX__Box_8H"/>
        <childnode refid="34948" relation="include">
        </childnode>
        <childnode refid="34949" relation="include">
        </childnode>
        <childnode refid="34921" relation="include">
        </childnode>
        <childnode refid="34927" relation="include">
        </childnode>
        <childnode refid="34951" relation="include">
        </childnode>
        <childnode refid="34954" relation="include">
        </childnode>
        <childnode refid="34955" relation="include">
        </childnode>
        <childnode refid="34924" relation="include">
        </childnode>
        <childnode refid="34941" relation="include">
        </childnode>
        <childnode refid="34956" relation="include">
        </childnode>
        <childnode refid="34945" relation="include">
        </childnode>
        <childnode refid="34926" relation="include">
        </childnode>
        <childnode refid="34944" relation="include">
        </childnode>
      </node>
      <node id="34961">
        <label>AMReX_DistributionMapping.H</label>
        <link refid="AMReX__DistributionMapping_8H"/>
        <childnode refid="34935" relation="include">
        </childnode>
        <childnode refid="34952" relation="include">
        </childnode>
        <childnode refid="34933" relation="include">
        </childnode>
        <childnode refid="34958" relation="include">
        </childnode>
        <childnode refid="34912" relation="include">
        </childnode>
        <childnode refid="34925" relation="include">
        </childnode>
        <childnode refid="34941" relation="include">
        </childnode>
        <childnode refid="34945" relation="include">
        </childnode>
        <childnode refid="34947" relation="include">
        </childnode>
        <childnode refid="34922" relation="include">
        </childnode>
        <childnode refid="34962" relation="include">
        </childnode>
      </node>
      <node id="34951">
        <label>AMReX_IntVect.H</label>
        <link refid="AMReX__IntVect_8H"/>
        <childnode refid="34948" relation="include">
        </childnode>
        <childnode refid="34906" relation="include">
        </childnode>
        <childnode refid="34909" relation="include">
        </childnode>
        <childnode refid="34952" relation="include">
        </childnode>
        <childnode refid="34953" relation="include">
        </childnode>
        <childnode refid="34946" relation="include">
        </childnode>
        <childnode refid="34927" relation="include">
        </childnode>
        <childnode refid="34924" relation="include">
        </childnode>
        <childnode refid="34941" relation="include">
        </childnode>
        <childnode refid="34945" relation="include">
        </childnode>
        <childnode refid="34950" relation="include">
        </childnode>
        <childnode refid="34940" relation="include">
        </childnode>
        <childnode refid="34923" relation="include">
        </childnode>
        <childnode refid="34926" relation="include">
        </childnode>
      </node>
      <node id="34925">
        <label>AMReX.H</label>
        <link refid="AMReX_8H"/>
        <childnode refid="34926" relation="include">
        </childnode>
        <childnode refid="34927" relation="include">
        </childnode>
        <childnode refid="34928" relation="include">
        </childnode>
        <childnode refid="34912" relation="include">
        </childnode>
        <childnode refid="34930" relation="include">
        </childnode>
        <childnode refid="34931" relation="include">
        </childnode>
        <childnode refid="34910" relation="include">
        </childnode>
        <childnode refid="34932" relation="include">
        </childnode>
        <childnode refid="34933" relation="include">
        </childnode>
      </node>
      <node id="34945">
        <label>AMReX_Vector.H</label>
        <link refid="AMReX__Vector_8H"/>
        <childnode refid="34946" relation="include">
        </childnode>
        <childnode refid="34932" relation="include">
        </childnode>
        <childnode refid="34933" relation="include">
        </childnode>
        <childnode refid="34940" relation="include">
        </childnode>
      </node>
      <node id="34973">
        <label>AMReX_Print.H</label>
        <link refid="AMReX__Print_8H"/>
        <childnode refid="34913" relation="include">
        </childnode>
        <childnode refid="34964" relation="include">
        </childnode>
        <childnode refid="34914" relation="include">
        </childnode>
        <childnode refid="34925" relation="include">
        </childnode>
        <childnode refid="34963" relation="include">
        </childnode>
        <childnode refid="34962" relation="include">
        </childnode>
      </node>
      <node id="34909">
        <label>cmath</label>
      </node>
      <node id="34919">
        <label>errno.h</label>
      </node>
      <node id="34929">
        <label>stdexcept</label>
      </node>
      <node id="34972">
        <label>numeric</label>
      </node>
      <node id="34920">
        <label>AMReX_BLFort.H</label>
        <link refid="AMReX__BLFort_8H"/>
        <childnode refid="34921" relation="include">
        </childnode>
        <childnode refid="34922" relation="include">
        </childnode>
        <childnode refid="34924" relation="include">
        </childnode>
      </node>
      <node id="34960">
        <label>AMReX_BoxList.H</label>
        <link refid="AMReX__BoxList_8H"/>
        <childnode refid="34948" relation="include">
        </childnode>
        <childnode refid="34951" relation="include">
        </childnode>
        <childnode refid="34954" relation="include">
        </childnode>
        <childnode refid="34947" relation="include">
        </childnode>
        <childnode refid="34941" relation="include">
        </childnode>
        <childnode refid="34945" relation="include">
        </childnode>
      </node>
      <node id="34931">
        <label>string</label>
      </node>
      <node id="34935">
        <label>map</label>
      </node>
      <node id="34964">
        <label>fstream</label>
      </node>
      <node id="34921">
        <label>AMReX_ArrayLim.H</label>
        <link refid="AMReX__ArrayLim_8H"/>
        <childnode refid="34922" relation="include">
        </childnode>
      </node>
      <node id="34941">
        <label>AMReX_Array.H</label>
        <link refid="AMReX__Array_8H"/>
        <childnode refid="34942" relation="include">
        </childnode>
        <childnode refid="34933" relation="include">
        </childnode>
        <childnode refid="34943" relation="include">
        </childnode>
        <childnode refid="34931" relation="include">
        </childnode>
        <childnode refid="34912" relation="include">
        </childnode>
        <childnode refid="34913" relation="include">
        </childnode>
        <childnode refid="34910" relation="include">
        </childnode>
        <childnode refid="34925" relation="include">
        </childnode>
        <childnode refid="34926" relation="include">
        </childnode>
        <childnode refid="34944" relation="include">
        </childnode>
        <childnode refid="34940" relation="include">
        </childnode>
        <childnode refid="34924" relation="include">
        </childnode>
        <childnode refid="34922" relation="include">
        </childnode>
      </node>
      <node id="34924">
        <label>AMReX_SPACE.H</label>
        <link refid="AMReX__SPACE_8H"/>
      </node>
      <node id="34923">
        <label>AMReX_Extension.H</label>
        <link refid="AMReX__Extension_8H"/>
      </node>
      <node id="34916">
        <label>random</label>
      </node>
      <node id="34918">
        <label>sys/types.h</label>
      </node>
      <node id="34971">
        <label>typeinfo</label>
      </node>
      <node id="34910">
        <label>cstdio</label>
      </node>
      <node id="34944">
        <label>AMReX_GpuControl.H</label>
        <link refid="AMReX__GpuControl_8H"/>
        <childnode refid="34926" relation="include">
        </childnode>
      </node>
      <node id="34911">
        <label>ctime</label>
      </node>
      <node id="34965">
        <label>AMReX_BLBackTrace.H</label>
        <link refid="AMReX__BLBackTrace_8H"/>
        <childnode refid="34966" relation="include">
        </childnode>
        <childnode refid="34931" relation="include">
        </childnode>
        <childnode refid="34943" relation="include">
        </childnode>
        <childnode refid="34913" relation="include">
        </childnode>
        <childnode refid="34910" relation="include">
        </childnode>
        <childnode refid="34906" relation="include">
        </childnode>
        <childnode refid="34967" relation="include">
        </childnode>
        <childnode refid="34968" relation="include">
        </childnode>
        <childnode refid="34969" relation="include">
        </childnode>
      </node>
      <node id="34938">
        <label>unistd.h</label>
      </node>
      <node id="34976">
        <label>sys/param.h</label>
      </node>
      <node id="34966">
        <label>stack</label>
      </node>
      <node id="34932">
        <label>vector</label>
      </node>
      <node id="34940">
        <label>AMReX_BLassert.H</label>
        <link refid="AMReX__BLassert_8H"/>
        <childnode refid="34925" relation="include">
        </childnode>
      </node>
      <node id="34926">
        <label>AMReX_GpuQualifiers.H</label>
        <link refid="AMReX__GpuQualifiers_8H"/>
      </node>
      <node id="34943">
        <label>utility</label>
      </node>
      <node id="34942">
        <label>array</label>
      </node>
      <node id="34913">
        <label>sstream</label>
      </node>
      <node id="34928">
        <label>AMReX_Exception.H</label>
        <link refid="AMReX__Exception_8H"/>
        <childnode refid="34929" relation="include">
        </childnode>
      </node>
      <node id="34949">
        <label>AMReX_Algorithm.H</label>
        <link refid="AMReX__Algorithm_8H"/>
        <childnode refid="34946" relation="include">
        </childnode>
        <childnode refid="34926" relation="include">
        </childnode>
        <childnode refid="34923" relation="include">
        </childnode>
        <childnode refid="34950" relation="include">
        </childnode>
      </node>
      <node id="34962">
        <label>AMReX_ParallelDescriptor.H</label>
        <link refid="AMReX__ParallelDescriptor_8H"/>
        <childnode refid="34927" relation="include">
        </childnode>
        <childnode refid="34963" relation="include">
        </childnode>
        <childnode refid="34965" relation="include">
        </childnode>
        <childnode refid="34970" relation="include">
        </childnode>
        <childnode refid="34940" relation="include">
        </childnode>
        <childnode refid="34922" relation="include">
        </childnode>
        <childnode refid="34941" relation="include">
        </childnode>
        <childnode refid="34945" relation="include">
        </childnode>
        <childnode refid="34947" relation="include">
        </childnode>
        <childnode refid="34912" relation="include">
        </childnode>
        <childnode refid="34932" relation="include">
        </childnode>
        <childnode refid="34931" relation="include">
        </childnode>
        <childnode refid="34971" relation="include">
        </childnode>
        <childnode refid="34946" relation="include">
        </childnode>
        <childnode refid="34930" relation="include">
        </childnode>
        <childnode refid="34952" relation="include">
        </childnode>
        <childnode refid="34972" relation="include">
        </childnode>
      </node>
      <node id="34934">
        <label>AMReX_Utility.H</label>
        <link refid="AMReX__Utility_8H"/>
        <childnode refid="34906" relation="include">
        </childnode>
        <childnode refid="34912" relation="include">
        </childnode>
        <childnode refid="34931" relation="include">
        </childnode>
        <childnode refid="34935" relation="include">
        </childnode>
        <childnode refid="34936" relation="include">
        </childnode>
        <childnode refid="34937" relation="include">
        </childnode>
        <childnode refid="34918" relation="include">
        </childnode>
        <childnode refid="34938" relation="include">
        </childnode>
        <childnode refid="34939" relation="include">
        </childnode>
        <childnode refid="34940" relation="include">
        </childnode>
        <childnode refid="34922" relation="include">
        </childnode>
        <childnode refid="34941" relation="include">
        </childnode>
        <childnode refid="34945" relation="include">
        </childnode>
        <childnode refid="34947" relation="include">
        </childnode>
        <childnode refid="34957" relation="include">
        </childnode>
        <childnode refid="34961" relation="include">
        </childnode>
        <childnode refid="34962" relation="include">
        </childnode>
      </node>
      <node id="34955">
        <label>AMReX_Orientation.H</label>
        <link refid="AMReX__Orientation_8H"/>
        <childnode refid="34948" relation="include">
        </childnode>
        <childnode refid="34940" relation="include">
        </childnode>
        <childnode refid="34924" relation="include">
        </childnode>
        <childnode refid="34926" relation="include">
        </childnode>
      </node>
      <node id="34950">
        <label>AMReX_Dim3.H</label>
        <link refid="AMReX__Dim3_8H"/>
        <childnode refid="34912" relation="include">
        </childnode>
        <childnode refid="34922" relation="include">
        </childnode>
        <childnode refid="34941" relation="include">
        </childnode>
      </node>
      <node id="34948">
        <label>iosfwd</label>
      </node>
      <node id="34939">
        <label>sys/wait.h</label>
      </node>
      <node id="34906">
        <label>cstdlib</label>
      </node>
      <node id="34908">
        <label>cctype</label>
      </node>
      <node id="34969">
        <label>cfenv</label>
      </node>
      <node id="34975">
        <label>sys/time.h</label>
      </node>
      <node id="34912">
        <label>iostream</label>
      </node>
      <node id="34954">
        <label>AMReX_IndexType.H</label>
        <link refid="AMReX__IndexType_8H"/>
        <childnode refid="34948" relation="include">
        </childnode>
        <childnode refid="34927" relation="include">
        </childnode>
        <childnode refid="34951" relation="include">
        </childnode>
        <childnode refid="34924" relation="include">
        </childnode>
      </node>
      <node id="34956">
        <label>AMReX_Array4.H</label>
        <link refid="AMReX__Array4_8H"/>
        <childnode refid="34951" relation="include">
        </childnode>
      </node>
      <node id="34958">
        <label>cstddef</label>
      </node>
      <node id="34905">
        <label>/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp</label>
        <link refid="AMReX_Utility.cpp"/>
        <childnode refid="34906" relation="include">
        </childnode>
        <childnode refid="34907" relation="include">
        </childnode>
        <childnode refid="34908" relation="include">
        </childnode>
        <childnode refid="34909" relation="include">
        </childnode>
        <childnode refid="34910" relation="include">
        </childnode>
        <childnode refid="34911" relation="include">
        </childnode>
        <childnode refid="34912" relation="include">
        </childnode>
        <childnode refid="34913" relation="include">
        </childnode>
        <childnode refid="34914" relation="include">
        </childnode>
        <childnode refid="34915" relation="include">
        </childnode>
        <childnode refid="34916" relation="include">
        </childnode>
        <childnode refid="34917" relation="include">
        </childnode>
        <childnode refid="34918" relation="include">
        </childnode>
        <childnode refid="34919" relation="include">
        </childnode>
        <childnode refid="34920" relation="include">
        </childnode>
        <childnode refid="34922" relation="include">
        </childnode>
        <childnode refid="34925" relation="include">
        </childnode>
        <childnode refid="34934" relation="include">
        </childnode>
        <childnode refid="34940" relation="include">
        </childnode>
        <childnode refid="34970" relation="include">
        </childnode>
        <childnode refid="34962" relation="include">
        </childnode>
        <childnode refid="34957" relation="include">
        </childnode>
        <childnode refid="34973" relation="include">
        </childnode>
        <childnode refid="34974" relation="include">
        </childnode>
        <childnode refid="34975" relation="include">
        </childnode>
        <childnode refid="34976" relation="include">
        </childnode>
        <childnode refid="34938" relation="include">
        </childnode>
      </node>
      <node id="34959">
        <label>unordered_map</label>
      </node>
      <node id="34953">
        <label>climits</label>
      </node>
      <node id="34936">
        <label>chrono</label>
      </node>
      <node id="34968">
        <label>csignal</label>
      </node>
      <node id="34937">
        <label>type_traits</label>
      </node>
      <node id="34915">
        <label>set</label>
      </node>
      <node id="34927">
        <label>AMReX_ccse-mpi.H</label>
        <link refid="AMReX__ccse-mpi_8H"/>
      </node>
      <node id="34946">
        <label>algorithm</label>
      </node>
      <node id="34967">
        <label>execinfo.h</label>
      </node>
      <node id="34907">
        <label>cstring</label>
      </node>
      <node id="34933">
        <label>memory</label>
      </node>
      <node id="34922">
        <label>AMReX_REAL.H</label>
        <link refid="AMReX__REAL_8H"/>
        <childnode refid="34923" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="AMReX__Utility_8cpp_1a7149b75200fd1c2399da882ca3a148bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BL_FORT_PROC_DECL</definition>
        <argsstring>(BLUTILINITRAND, blutilinitrand)(const int *sd)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BLUTILINITRAND</type>
        </param>
        <param>
          <type>blutilinitrand</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" line="660" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="660" bodyend="664"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__Utility_8cpp_1a5eda724d6b6a9ddba6328fc28698964c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BL_FORT_PROC_DECL</definition>
        <argsstring>(BLINITRAND, blinitrand)(const int *sd)</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BLINITRAND</type>
        </param>
        <param>
          <type>blinitrand</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" line="666" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="666" bodyend="670"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__Utility_8cpp_1a12c16cae3c80d3004856c006d2a4a2a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BL_FORT_PROC_DECL</definition>
        <argsstring>(BLUTILRAND, blutilrand)(amrex</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BLUTILRAND</type>
        </param>
        <param>
          <type>blutilrand</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" line="672" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="672" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__Utility_8cpp_1a00c5ae3039d43ec3e8bc0c77aeef0667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BL_FORT_PROC_DECL</definition>
        <argsstring>(BLINVNORMDIST, blinvnormdist)(amrex</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BLINVNORMDIST</type>
        </param>
        <param>
          <type>blinvnormdist</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" line="781" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="781" bodyend="792"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__Utility_8cpp_1ae298a81455ebb43d67bc2a625e4bca76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BL_FORT_PROC_DECL</definition>
        <argsstring>(BLINVNORMDISTBEST, blinvnormdistbest)(amrex</argsstring>
        <name>BL_FORT_PROC_DECL</name>
        <param>
          <type>BLINVNORMDISTBEST</type>
        </param>
        <param>
          <type>blinvnormdistbest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" line="950" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="950" bodyend="961"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__Utility_8cpp_1ab6136b169776e667910d5505dca32259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* amrex_malloc</definition>
        <argsstring>(std::size_t size)</argsstring>
        <name>amrex_malloc</name>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" line="1385" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="1385" bodyend="1388"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__Utility_8cpp_1a2341d68b47f82cd117da58195ac02101" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_free</definition>
        <argsstring>(void *p)</argsstring>
        <name>amrex_free</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" line="1391" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="1391" bodyend="1394"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__Utility_8cpp_1af7786727a4dfac68a7b0bcf67f62f61e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double amrex_random</definition>
        <argsstring>()</argsstring>
        <name>amrex_random</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" line="1396" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="1396" bodyend="1399"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__Utility_8cpp_1ad7f95c4a9f94b65f593a48aedc1bdb25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex_random_int</definition>
        <argsstring>(long n)</argsstring>
        <name>amrex_random_int</name>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" line="1401" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp" bodystart="1401" bodyend="1404"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__BLFort_8H" kindref="compound">AMReX_BLFort.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__REAL_8H" kindref="compound">AMReX_REAL.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX_8H" kindref="compound">AMReX.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Utility_8H" kindref="compound">AMReX_Utility.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__BLassert_8H" kindref="compound">AMReX_BLassert.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__BLProfiler_8H" kindref="compound">AMReX_BLProfiler.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__ParallelDescriptor_8H" kindref="compound">AMReX_ParallelDescriptor.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__BoxArray_8H" kindref="compound">AMReX_BoxArray.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Print_8H" kindref="compound">AMReX_Print.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;omp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/times.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/param.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::ostringstream;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path_sep_str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>true<sp/>if<sp/>argument<sp/>is<sp/>a<sp/>non-zero<sp/>length<sp/>string<sp/>of<sp/>digits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="namespaceamrex_1a107cab62d5043f039671cf5b68068ddc" kindref="member">amrex::is_integer</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/>0<sp/>||<sp/>(len<sp/>=<sp/>strlen(str))<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isdigit(str[i]))</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tokenize_initialized<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>line<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CleanupTokenizeStatics<sp/>()</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>line;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><ref refid="namespaceamrex_1a6ba24cf7211301279ca446ff282a0f8a" kindref="member">amrex::Tokenize</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>instr,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>separators)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tokenize_initialized)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aec8ceac1148bd8331f3a51572068f8a0" kindref="member">amrex::ExecOnFinalize</ref>(CleanupTokenizeStatics);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenize_initialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;char*&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>tokens;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linelen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>copy<sp/>of<sp/>line<sp/>that<sp/>we<sp/>can<sp/>modify.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>instr.size()<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>linelen)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>line;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[len];</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linelen<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>std::strcpy(line,<sp/>instr.c_str());</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>token<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!((token<sp/>=<sp/>std::strtok(line,<sp/>separators.c_str()))<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr.push_back(token);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!((token<sp/>=<sp/>strtok(0,<sp/>separators.c_str()))<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr.push_back(token);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>tokens.resize(ptr.size());</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1,<sp/>N<sp/>=<sp/>ptr.size();<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>ptr[i];</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(strchr(separators.c_str(),<sp/>*(p-1))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*--p<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>N<sp/>=<sp/>ptr.size();<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokens[i]<sp/>=<sp/>ptr[i];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr.clear();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tokens;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><ref refid="namespaceamrex_1a67bf98d88c814ab458018afd16e64aa8" kindref="member">amrex::toLower</ref><sp/>(std::string<sp/>s)</highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(s.begin(),<sp/>s.end(),<sp/>s.begin(),</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::tolower(c);<sp/>});</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><ref refid="namespaceamrex_1afb53573f5330e4753ad1b562e5dd95ce" kindref="member">amrex::toUpper</ref><sp/>(std::string<sp/>s)</highlight></codeline>
<codeline lineno="136"><highlight class="normal">{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(s.begin(),<sp/>s.end(),<sp/>s.begin(),</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::toupper(c);<sp/>});</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><ref refid="namespaceamrex_1a6e3a82e54e91d8c7543596b2c2476250" kindref="member">amrex::Concatenate</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>root,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mindigits)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(mindigits<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>result;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>&lt;&lt;<sp/>root<sp/>&lt;&lt;<sp/>std::setfill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>std::setw(mindigits)<sp/>&lt;&lt;<sp/>num;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result.str();</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><ref refid="namespaceamrex_1a913fd7ccf7cab45bc7d8e2a09ddd2824" kindref="member">amrex::UtilCreateDirectory</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode_t<sp/>mode,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1system_1aba644ca5c4d0bf30d567a08a6dc0ebd1" kindref="member">verbose</ref>)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>retVal(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector&lt;std::pair&lt;std::string,<sp/>int&gt;<sp/>&gt;<sp/>pathError;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(path.length()<sp/>==<sp/>0<sp/>||<sp/>path<sp/>==<sp/>path_sep_str)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strchr(path.c_str(),<sp/>*path_sep_str)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>slashes<sp/>in<sp/>the<sp/>path.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mkdir(path.c_str(),<sp/>mode)<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>errno<sp/>!=<sp/>EEXIST)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>pathError.push_back(std::make_pair(path,<sp/>errno));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>copy<sp/>of<sp/>the<sp/>directory<sp/>pathname<sp/>so<sp/>we<sp/>can<sp/>write<sp/>to<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dir<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[path.length()<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)<sp/>strcpy(dir,<sp/>path.c_str());</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*slash<sp/>=<sp/>strchr(dir,<sp/>*path_sep_str);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(dir[0]<sp/>==<sp/>*path_sep_str)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>full<sp/>pathname.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(*(slash+1)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((slash<sp/>=<sp/>strchr(slash+1,<sp/>*path_sep_str))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*slash<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mkdir(dir,<sp/>mode)<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>errno<sp/>!=<sp/>EEXIST)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pathError.push_back(std::make_pair(dir,<sp/>errno));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(slash)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*slash<sp/>=<sp/>*path_sep_str;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(slash);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>relative<sp/>pathname.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*slash<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mkdir(dir,<sp/>mode)<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>errno<sp/>!=<sp/>EEXIST)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pathError.push_back(std::make_pair(dir,<sp/>errno));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*slash<sp/>=<sp/>*path_sep_str;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((slash<sp/>=<sp/>strchr(slash+1,<sp/>*path_sep_str))<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mkdir(dir,<sp/>mode)<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>errno<sp/>!=<sp/>EEXIST)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pathError.push_back(std::make_pair(dir,<sp/>errno));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>dir;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(retVal<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/><sp/>||<sp/>verbose<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>pathError.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1AllPrint" kindref="compound">amrex::AllPrint</ref>()&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;amrex::UtilCreateDirectory::<sp/>path<sp/>errno:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>pathError[i].first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>strerror(pathError[i].<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">second</ref>)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><ref refid="namespaceamrex_1a894a812531d6362ce4ac5065c3224699" kindref="member">amrex::CreateDirectoryFailed</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dir)</highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>msg(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>create<sp/>directory:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/>dir;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ac0e2e23df625040ded95611ceae98352" kindref="member">amrex::Error</ref>(msg.c_str());</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><ref refid="namespaceamrex_1ac40a8be1926370de761ddd49c765d971" kindref="member">amrex::FileOpenFailed</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>file)</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>msg(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>open<sp/>file:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>+=<sp/>file;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ac0e2e23df625040ded95611ceae98352" kindref="member">amrex::Error</ref>(msg.c_str());</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><ref refid="namespaceamrex_1a8cc0b90b2ed3e37910db70d81484fee8" kindref="member">amrex::UnlinkFile</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>file)</highlight></codeline>
<codeline lineno="264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>unlink(file.c_str());</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><ref refid="namespaceamrex_1a51791a9a04ee140c71cee50d3615ed35" kindref="member">amrex::FileExists</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename)</highlight></codeline>
<codeline lineno="270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stat<sp/>statbuff;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(::lstat(filename.c_str(),<sp/>&amp;statbuff)<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">std::string</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><ref refid="namespaceamrex_1aebee05e08302fb03e29f4270e933239c" kindref="member">amrex::UniqueString</ref>()</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>tempstring;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>tempstring<sp/>&lt;&lt;<sp/>std::setprecision(11)<sp/>&lt;&lt;<sp/>std::fixed<sp/>&lt;&lt;<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">ParallelDescriptor::second</ref>();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tsl(tempstring.str().length());</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(tempstring.str().substr(tsl/2,<sp/>tsl));</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><ref refid="namespaceamrex_1a832f4ad883cbc470d76cde70a099e912" kindref="member">amrex::UtilCreateCleanDirectory</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>callbarrier)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1ParallelContext_1af766eba670e3bba30b2b8db7f20e8885" kindref="member">ParallelContext::IOProcessorSub</ref>())<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1a51791a9a04ee140c71cee50d3615ed35" kindref="member">amrex::FileExists</ref>(path))<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>newoldname(path<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.old.&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespaceamrex_1aebee05e08302fb03e29f4270e933239c" kindref="member">amrex::UniqueString</ref>());</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1system_1aba644ca5c4d0bf30d567a08a6dc0ebd1" kindref="member">amrex::system::verbose</ref><sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;amrex::UtilCreateCleanDirectory():<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>path</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>exists.<sp/><sp/>Renaming<sp/>to:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>newoldname<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::rename(path.c_str(),<sp/>newoldname.c_str());</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/><ref refid="namespaceamrex_1a913fd7ccf7cab45bc7d8e2a09ddd2824" kindref="member">amrex::UtilCreateDirectory</ref>(path,<sp/>0755))<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a894a812531d6362ce4ac5065c3224699" kindref="member">amrex::CreateDirectoryFailed</ref>(path);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(callbarrier)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Force<sp/>other<sp/>processors<sp/>to<sp/>wait<sp/>until<sp/>directory<sp/>is<sp/>built.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a732a4be5017987f2d6edc0fcd2329301" kindref="member">ParallelDescriptor::Barrier</ref>(</highlight><highlight class="stringliteral">&quot;amrex::UtilCreateCleanDirectory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><ref refid="namespaceamrex_1aebce007d4152715af0cf44f3ab94d1fe" kindref="member">amrex::UtilCreateDirectoryDestructive</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>callbarrier)</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1ParallelContext_1af766eba670e3bba30b2b8db7f20e8885" kindref="member">ParallelContext::IOProcessorSub</ref>())<sp/></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1a51791a9a04ee140c71cee50d3615ed35" kindref="member">amrex::FileExists</ref>(path))<sp/></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1acafd26c0f64d958aed9ee56043c4f10e" kindref="member">amrex::Verbose</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;amrex::UtilCreateCleanDirectoryDestructive():<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>path</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>exists.<sp/><sp/>I<sp/>am<sp/>destroying<sp/>it.<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>command[2000];</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(command,<sp/></highlight><highlight class="stringliteral">&quot;\\rm<sp/>-rf<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>path.c_str());;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/>std::system(command);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(retVal<sp/>==<sp/>-1<sp/>||<sp/>WEXITSTATUS(retVal)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ac0e2e23df625040ded95611ceae98352" kindref="member">amrex::Error</ref>(</highlight><highlight class="stringliteral">&quot;Removing<sp/>old<sp/>directory<sp/>failed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/><ref refid="namespaceamrex_1a913fd7ccf7cab45bc7d8e2a09ddd2824" kindref="member">amrex::UtilCreateDirectory</ref>(path,<sp/>0755))<sp/></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a894a812531d6362ce4ac5065c3224699" kindref="member">amrex::CreateDirectoryFailed</ref>(path);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(callbarrier)<sp/></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Force<sp/>other<sp/>processors<sp/>to<sp/>wait<sp/>until<sp/>directory<sp/>is<sp/>built.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a732a4be5017987f2d6edc0fcd2329301" kindref="member">ParallelDescriptor::Barrier</ref>(</highlight><highlight class="stringliteral">&quot;amrex::UtilCreateCleanDirectoryDestructive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><ref refid="namespaceamrex_1ae2d0c6a2a5153df0d38d7cde07a89c73" kindref="member">amrex::UtilRenameDirectoryToOld</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>callbarrier)</highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1ParallelContext_1af766eba670e3bba30b2b8db7f20e8885" kindref="member">ParallelContext::IOProcessorSub</ref>())<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1a51791a9a04ee140c71cee50d3615ed35" kindref="member">amrex::FileExists</ref>(path))<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>newoldname(path<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.old.&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="namespaceamrex_1aebee05e08302fb03e29f4270e933239c" kindref="member">amrex::UniqueString</ref>());</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1acafd26c0f64d958aed9ee56043c4f10e" kindref="member">amrex::Verbose</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;amrex::UtilRenameDirectoryToOld():<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>path</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>exists.<sp/><sp/>Renaming<sp/>to:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>newoldname<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::rename(path.c_str(),<sp/>newoldname.c_str());</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(callbarrier)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Force<sp/>other<sp/>processors<sp/>to<sp/>wait<sp/>until<sp/>directory<sp/>is<sp/>renamed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a732a4be5017987f2d6edc0fcd2329301" kindref="member">ParallelDescriptor::Barrier</ref>(</highlight><highlight class="stringliteral">&quot;amrex::UtilRenameDirectoryToOld&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><ref refid="namespaceamrex_1a60941081c34a5d500140c8577e11625a" kindref="member">amrex::OutOfMemory</ref><sp/>()</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ac0e2e23df625040ded95611ceae98352" kindref="member">amrex::Error</ref>(</highlight><highlight class="stringliteral">&quot;Sorry,<sp/>out<sp/>of<sp/>memory,<sp/>bye<sp/>...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nthreads;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector&lt;std::mt19937&gt;</ref><sp/>generators;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_CUDA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>__device__<sp/>curandState_t<sp/>*glo_RandStates;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>curandState_t*<sp/>dev_RandStates_Seed;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nstates;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><ref refid="namespaceamrex_1a063e0c5d4ce2c053f2ed607639481832" kindref="member">amrex::InitRandom</ref><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>seed,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nprocs)</highlight></codeline>
<codeline lineno="383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>nthreads<sp/>=<sp/><ref refid="namespaceamrex__omp__module_1a88c4536a09e2cc9d9edff5cd040814db" kindref="member">omp_get_max_threads</ref>();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>nthreads<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>generators.resize(nthreads);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>omp<sp/>parallel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/><ref refid="namespaceamrex__omp__module_1a1f5881f02905de2162615538e3989e36" kindref="member">omp_get_thread_num</ref>();</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>init_seed<sp/>=<sp/>seed<sp/>+<sp/>tid*nprocs;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generators[tid].seed(init_seed);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>generators[0].seed(seed);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_CUDA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dev_RandStates_Seed<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaFree(dev_RandStates_Seed);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev_RandStates_Seed<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>nstates<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a916b42a59d03ab2bbefddf68e90be0e3" kindref="member">amrex::ResetRandomSeed</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>seed)</highlight></codeline>
<codeline lineno="414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a063e0c5d4ce2c053f2ed607639481832" kindref="member">InitRandom</ref>(seed);</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><ref refid="namespaceamrex_1ac40f959448ebf03cd4801e88489c81fa" kindref="member">amrex::RandomNormal</ref><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mean,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>stddev)</highlight></codeline>
<codeline lineno="420"><highlight class="normal">{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rand;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__CUDA_ARCH__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blockId<sp/>=<sp/>blockIdx.x<sp/>+<sp/>blockIdx.y<sp/>*<sp/>gridDim.x<sp/>+<sp/>gridDim.x<sp/>*<sp/>gridDim.y<sp/>*<sp/>blockIdx.z;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>blockId<sp/>*<sp/>(blockDim.x<sp/>*<sp/>blockDim.y<sp/>*<sp/>blockDim.z)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(threadIdx.z<sp/>*<sp/>(blockDim.x<sp/>*<sp/>blockDim.y))<sp/></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(threadIdx.y<sp/>*<sp/>blockDim.x)<sp/>+<sp/>threadIdx.x<sp/>;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>rand<sp/>=<sp/>stddev<sp/>*<sp/>curand_normal_double(&amp;glo_RandStates[tid])<sp/>+<sp/>mean;<sp/></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/><ref refid="namespaceamrex__omp__module_1a1f5881f02905de2162615538e3989e36" kindref="member">omp_get_thread_num</ref>();</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>std::normal_distribution&lt;double&gt;<sp/>distribution(mean,<sp/>stddev);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>rand<sp/>=<sp/>distribution(generators[tid]);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rand;</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><ref refid="namespaceamrex_1af7e3ca9c2455e95a21d765123c8d287e" kindref="member">amrex::Random</ref><sp/>()</highlight></codeline>
<codeline lineno="451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rand;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__CUDA_ARCH__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blockId<sp/>=<sp/>blockIdx.x<sp/>+<sp/>blockIdx.y<sp/>*<sp/>gridDim.x<sp/>+<sp/>gridDim.x<sp/>*<sp/>gridDim.y<sp/>*<sp/>blockIdx.z;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>blockId<sp/>*<sp/>(blockDim.x<sp/>*<sp/>blockDim.y<sp/>*<sp/>blockDim.z)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(threadIdx.z<sp/>*<sp/>(blockDim.x<sp/>*<sp/>blockDim.y))<sp/></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(threadIdx.y<sp/>*<sp/>blockDim.x)<sp/>+<sp/>threadIdx.x<sp/>;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>rand<sp/>=<sp/>curand_uniform_double(&amp;glo_RandStates[tid]);<sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/><ref refid="namespaceamrex__omp__module_1a1f5881f02905de2162615538e3989e36" kindref="member">omp_get_thread_num</ref>();</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uniform_real_distribution&lt;double&gt;<sp/>distribution(0.0,<sp/>1.0);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>rand<sp/>=<sp/>distribution(generators[tid]);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rand;</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><ref refid="namespaceamrex_1a7916c1f3adf571c67baaf478cf139bff" kindref="member">amrex::Random_int</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/><ref refid="namespaceamrex__omp__module_1a1f5881f02905de2162615538e3989e36" kindref="member">omp_get_thread_num</ref>();</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;unsigned<sp/>long&gt;<sp/>distribution(0,<sp/>n-1);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>distribution(generators[tid]);</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><ref refid="namespaceamrex_1ad1b283df95b292f478597bc503170459" kindref="member">amrex::SaveRandomState</ref>(std::ostream&amp;<sp/>os)</highlight></codeline>
<codeline lineno="495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nthreads;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>generators[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><ref refid="namespaceamrex_1ae45a9a3a96e46d7b15173894b25134fc" kindref="member">amrex::RestoreRandomState</ref>(std::istream&amp;<sp/>is,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nthreads_old,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nstep_old)</highlight></codeline>
<codeline lineno="503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/><ref refid="namespaceamrex_1_1detail_1a05ef6e98eba987410d73df1617fa569da39de58104accdcd761fe01946da9a4a0" kindref="member">std::min</ref>(nthreads,<sp/>nthreads_old);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>&gt;&gt;<sp/>generators[i];</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nthreads<sp/>&gt;<sp/>nthreads_old)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">NProcs</ref><sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>();</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">MyProc</ref><sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>();</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>nthreads_old;<sp/>i<sp/>&lt;<sp/>nthreads;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>MyProc+1<sp/>+<sp/>i*<ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">NProcs</ref>;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ULONG_MAX/(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)(nstep_old+1)<sp/>&gt;static_cast&lt;unsigned<sp/>long&gt;(nthreads*NProcs))<sp/>{<sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>+=<sp/>nstep_old*nthreads*<ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">NProcs</ref>;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generators[i].seed(seed);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><ref refid="namespaceamrex_1aa2c1209819cd8dd79499c2b9f088120e" kindref="member">amrex::UniqueRandomSubset</ref><sp/>(Vector&lt;int&gt;<sp/>&amp;uSet,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>setSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>poolSize,</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>printSet)</highlight></codeline>
<codeline lineno="524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(setSize<sp/>&gt;<sp/>poolSize)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;****<sp/>Error<sp/>in<sp/>UniqueRandomSubset:<sp/><sp/>setSize<sp/>&gt;<sp/>poolSize.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>std::set&lt;int&gt;<sp/>copySet;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>Vector&lt;int&gt;<sp/>uSetTemp;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(static_cast&lt;int&gt;(copySet.size())<sp/>&lt;<sp/>setSize)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r(<ref refid="namespaceamrex_1a7916c1f3adf571c67baaf478cf139bff" kindref="member">amrex::Random_int</ref>(poolSize));</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(copySet.find(r)<sp/>==<sp/>copySet.end())<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copySet.insert(r);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uSetTemp.push_back(r);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>uSet<sp/>=<sp/>uSetTemp;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(printSet)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>uSet.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1AllPrint" kindref="compound">amrex::AllPrint</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;uSet[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/><sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>uSet[i]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><ref refid="namespaceamrex_1a4125d429c379e2c09dd742aa6acc1e0e" kindref="member">amrex::InitRandSeedOnDevice</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N)</highlight></codeline>
<codeline lineno="548"><highlight class="normal">{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1a404b0ad92acc3684ad1e12ef7746d0bc" kindref="member">ResizeRandomSeed</ref>(N);</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><ref refid="namespaceamrex_1a27218ac967d5f2b670c49d3d55e9738d" kindref="member">amrex::CheckSeedArraySizeAndResize</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N)</highlight></codeline>
<codeline lineno="554"><highlight class="normal">{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_CUDA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>nstates<sp/>&lt;<sp/>N)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a404b0ad92acc3684ad1e12ef7746d0bc" kindref="member">ResizeRandomSeed</ref>(N);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><ref refid="namespaceamrex_1a404b0ad92acc3684ad1e12ef7746d0bc" kindref="member">amrex::ResizeRandomSeed</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N)</highlight></codeline>
<codeline lineno="564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_CUDA<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N<sp/>&lt;=<sp/>nstates)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PrevSize<sp/>=<sp/>nstates;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SizeDiff<sp/>=<sp/>N<sp/>-<sp/>PrevSize;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>curandState_t<sp/>*<sp/>new_data;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>AMREX_CUDA_SAFE_CALL(cudaMalloc(&amp;new_data,<sp/>N*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(curandState_t)));<sp/></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dev_RandStates_Seed<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_CUDA_SAFE_CALL(cudaMemcpy(new_data,<sp/>dev_RandStates_Seed,<sp/></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrevSize*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(curandState_t),<sp/></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaMemcpyDeviceToDevice));</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AMREX_CUDA_SAFE_CALL(cudaFree(dev_RandStates_Seed));</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>dev_RandStates_Seed<sp/>=<sp/>new_data;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>AMREX_CUDA_SAFE_CALL(cudaMemcpyToSymbol(glo_RandStates,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;dev_RandStates_Seed,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(curandState_t<sp/>*)));</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MyProc<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">amrex::ParallelDescriptor::MyProc</ref>();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__GpuLaunch_8H_1a775a21da7a0872eb04e5d779d8c3e579" kindref="member">AMREX_PARALLEL_FOR_1D</ref><sp/>(SizeDiff,<sp/>idx,</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>MyProc*1234567UL<sp/>+<sp/>12345UL<sp/>;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seqstart<sp/>=<sp/>idx<sp/>+<sp/>10<sp/>*<sp/>idx<sp/>;<sp/></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>loc<sp/>=<sp/>idx<sp/>+<sp/>PrevSize;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curand_init(seed,<sp/>seqstart,<sp/>0,<sp/>&amp;glo_RandStates[loc]);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>});<sp/></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><ref refid="namespaceamrex_1abce0125a244f443854b1c4a2709c5990" kindref="member">amrex::DeallocateRandomSeedDevArray</ref>()</highlight></codeline>
<codeline lineno="602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_CUDA<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dev_RandStates_Seed<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cudaFree(dev_RandStates_Seed);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev_RandStates_Seed<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nstates<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><ref refid="namespaceamrex_1aaf97cdbc0db387b57d9641d57cce591e" kindref="member">amrex::NItemsPerBin</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalItems,<sp/>Vector&lt;int&gt;<sp/>&amp;binCounts)</highlight></codeline>
<codeline lineno="617"><highlight class="normal">{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(binCounts.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1system_1aba644ca5c4d0bf30d567a08a6dc0ebd1" kindref="member">verbose</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>countForAll(totalItems<sp/>/<sp/>binCounts.size());</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remainder(totalItems<sp/>%<sp/>binCounts.size());</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(verbose)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;amrex::NItemsPerBin:<sp/><sp/>countForAll<sp/>remainder<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>countForAll</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>remainder<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>binCounts.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>binCounts[i]<sp/>=<sp/>countForAll;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>remainder;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>++binCounts[i];</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>binCounts.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(verbose)<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;amrex::NItemsPerBin::<sp/><sp/>binCounts[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>binCounts[i]<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a15ea4e09dbb2ff1919ec42ea7702d5aa" kindref="member">amrex::CRRBetweenLevels</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fromlevel,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tolevel,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;int&gt;<sp/>&amp;refratios)</highlight></codeline>
<codeline lineno="644"><highlight class="normal">{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(fromlevel<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(tolevel<sp/>&gt;=<sp/>fromlevel);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(tolevel<sp/>&lt;=<sp/>refratios.size());</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/>rr<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(level<sp/>=<sp/>fromlevel;<sp/>level<sp/>&lt;<sp/>tolevel;<sp/>++level)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>rr<sp/>*=<sp/>refratios[level];</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rr;</highlight></codeline>
<codeline lineno="653"><highlight class="normal">}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Fortran<sp/>entry<sp/>points<sp/>for<sp/>amrex::Random().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>AMREX_XSDK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><ref refid="AMReX__Utility_8cpp_1a7149b75200fd1c2399da882ca3a148bb" kindref="member">BL_FORT_PROC_DECL</ref>(BLUTILINITRAND,blutilinitrand)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>sd)</highlight></codeline>
<codeline lineno="661"><highlight class="normal">{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>*sd;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a063e0c5d4ce2c053f2ed607639481832" kindref="member">amrex::InitRandom</ref>(seed);</highlight></codeline>
<codeline lineno="664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><ref refid="AMReX__Utility_8cpp_1a7149b75200fd1c2399da882ca3a148bb" kindref="member">BL_FORT_PROC_DECL</ref>(BLINITRAND,blinitrand)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>sd)</highlight></codeline>
<codeline lineno="667"><highlight class="normal">{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>*sd;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a063e0c5d4ce2c053f2ed607639481832" kindref="member">amrex::InitRandom</ref>(seed);</highlight></codeline>
<codeline lineno="670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><ref refid="AMReX__Utility_8cpp_1a7149b75200fd1c2399da882ca3a148bb" kindref="member">BL_FORT_PROC_DECL</ref>(BLUTILRAND,blutilrand)(amrex::Real*<sp/>rn)</highlight></codeline>
<codeline lineno="673"><highlight class="normal">{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>*rn<sp/>=<sp/><ref refid="namespaceamrex_1af7e3ca9c2455e95a21d765123c8d287e" kindref="member">amrex::Random</ref>();</highlight></codeline>
<codeline lineno="675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Lower<sp/>tail<sp/>quantile<sp/>for<sp/>standard<sp/>normal<sp/>distribution<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>returns<sp/>an<sp/>approximation<sp/>of<sp/>the<sp/>inverse<sp/>cumulative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="comment">//<sp/>standard<sp/>normal<sp/>distribution<sp/>function.<sp/><sp/>I.e.,<sp/>given<sp/>P,<sp/>it<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">//<sp/>an<sp/>approximation<sp/>to<sp/>the<sp/>X<sp/>satisfying<sp/>P<sp/>=<sp/>Pr{Z<sp/>&lt;=<sp/>X}<sp/>where<sp/>Z<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="comment">//<sp/>random<sp/>variable<sp/>from<sp/>the<sp/>standard<sp/>normal<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>algorithm<sp/>uses<sp/>a<sp/>minimax<sp/>approximation<sp/>by<sp/>rational<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>result<sp/>has<sp/>a<sp/>relative<sp/>error<sp/>whose<sp/>absolute<sp/>value<sp/>is<sp/>less</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>than<sp/>1.15e-9.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/><sp/><sp/><sp/><sp/><sp/>Peter<sp/>J.<sp/>Acklam</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Time-stamp:<sp/><sp/>2002-06-09<sp/>18:45:44<sp/>+0200</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">//<sp/>E-mail:<sp/><sp/><sp/><sp/><sp/><sp/>jacklam@math.uio.no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WWW<sp/>URL:<sp/><sp/><sp/><sp/><sp/>http://www.math.uio.no/~jacklam</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>implementation<sp/>adapted<sp/>from<sp/>Peter&apos;s<sp/>Perl<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><ref refid="namespaceamrex_1aeb571560dc9f12004d96e105ab1137e9" kindref="member">amrex::InvNormDist</ref><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p)</highlight></codeline>
<codeline lineno="700"><highlight class="normal">{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&lt;=<sp/>0<sp/>||<sp/>p<sp/>&gt;=<sp/>1)</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ac0e2e23df625040ded95611ceae98352" kindref="member">amrex::Error</ref>(</highlight><highlight class="stringliteral">&quot;amrex::InvNormDist():<sp/>p<sp/>MUST<sp/>be<sp/>in<sp/>(0,1)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Coefficients<sp/>in<sp/>rational<sp/>approximations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a[6]<sp/>=</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>-3.969683028665376e+01,</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.209460984245205e+02,</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>-2.759285104469687e+02,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.383577518672690e+02,</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>-3.066479806614716e+01,</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.506628277459239e+00</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b[5]<sp/>=</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>-5.447609879822406e+01,</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.615858368580409e+02,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>-1.556989798598866e+02,</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6.680131188771972e+01,</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>-1.328068155288572e+01</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c[6]<sp/>=</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>-7.784894002430293e-03,</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>-3.223964580411365e-01,</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>-2.400758277161838e+00,</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>-2.549732539343734e+00,</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.374664141464968e+00,</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.938163982698783e+00</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d[4]<sp/>=</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>7.784695709041462e-03,</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>3.224671290700398e-01,</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>2.445134137142996e+00,</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>3.754408661907416e+00</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lo<sp/>=<sp/>0.02425;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/>0.97575;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&lt;<sp/>lo)</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rational<sp/>approximation<sp/>for<sp/>lower<sp/>region.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>std::sqrt(-2*std::log(p));</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(((((c[0]*q+c[1])*q+c[2])*q+c[3])*q+c[4])*q+c[5])<sp/>/</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((((d[0]*q+d[1])*q+d[2])*q+d[3])*q+1);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&gt;<sp/>hi)</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rational<sp/>approximation<sp/>for<sp/>upper<sp/>region.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>std::sqrt(-2*std::log(1-p));</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>-(((((c[0]*q+c[1])*q+c[2])*q+c[3])*q+c[4])*q+c[5])<sp/>/</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((((d[0]*q+d[1])*q+d[2])*q+d[3])*q+1);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rational<sp/>approximation<sp/>for<sp/>central<sp/>region.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>p<sp/>-<sp/>0.5;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>q*q;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(((((a[0]*r+a[1])*r+a[2])*r+a[3])*r+a[4])*r+a[5])*q<sp/>/</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((((b[0]*r+b[1])*r+b[2])*r+b[3])*r+b[4])*r+1);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>AMREX_XSDK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><ref refid="AMReX__Utility_8cpp_1a7149b75200fd1c2399da882ca3a148bb" kindref="member">BL_FORT_PROC_DECL</ref>(BLINVNORMDIST,blinvnormdist)(amrex::Real*<sp/>result)</highlight></codeline>
<codeline lineno="782"><highlight class="normal">{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>from<sp/>[0,<sp/>1)<sp/>to<sp/>(0,1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(val<sp/>==<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/><ref refid="namespaceamrex_1af7e3ca9c2455e95a21d765123c8d287e" kindref="member">amrex::Random</ref>();</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>*result<sp/>=<sp/><ref refid="namespaceamrex_1aeb571560dc9f12004d96e105ab1137e9" kindref="member">amrex::InvNormDist</ref>(val);</highlight></codeline>
<codeline lineno="792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="comment">//****************************************************************************80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Purpose:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>InvNormDistBest<sp/>inverts<sp/>the<sp/>standard<sp/>normal<sp/>CDF.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Discussion:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>The<sp/>result<sp/>is<sp/>accurate<sp/>to<sp/>about<sp/>1<sp/>part<sp/>in<sp/>10**16.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Modified:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>27<sp/>December<sp/>2004</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Author:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Original<sp/>FORTRAN77<sp/>version<sp/>by<sp/>Michael<sp/>Wichura.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>C++<sp/>version<sp/>by<sp/>John<sp/>Burkardt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Reference:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Michael<sp/>Wichura,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>The<sp/>Percentage<sp/>Points<sp/>of<sp/>the<sp/>Normal<sp/>Distribution,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Algorithm<sp/>AS<sp/>241,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Applied<sp/>Statistics,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Volume<sp/>37,<sp/>Number<sp/>3,<sp/>pages<sp/>477-484,<sp/>1988.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Parameters:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Input,<sp/>double<sp/>P,<sp/>the<sp/>value<sp/>of<sp/>the<sp/>cumulative<sp/>probability<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>densitity<sp/>function.<sp/><sp/>0<sp/>&lt;<sp/>P<sp/>&lt;<sp/>1.<sp/><sp/>Fails<sp/>if<sp/>P<sp/>is<sp/>outside<sp/>this<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Output,<sp/>the<sp/>normal<sp/>deviate<sp/>value<sp/>with<sp/>the<sp/>property<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>probability<sp/>of<sp/>a<sp/>standard<sp/>normal<sp/>deviate<sp/>being<sp/>less<sp/>than<sp/>or<sp/>equal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>to<sp/>this<sp/>value<sp/>is<sp/>P.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><ref refid="namespaceamrex_1a0dace3a79fc48a8b02686c10363b70a9" kindref="member">amrex::InvNormDistBest</ref><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p)</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal">{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a[8]<sp/>=</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>3.3871328727963666080,<sp/><sp/><sp/><sp/><sp/>1.3314166789178437745e+2,</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1.9715909503065514427e+3,<sp/><sp/>1.3731693765509461125e+4,</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>4.5921953931549871457e+4,<sp/><sp/>6.7265770927008700853e+4,</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>3.3430575583588128105e+4,<sp/><sp/>2.5090809287301226727e+3</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b[8]<sp/>=</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1.0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.2313330701600911252e+1,</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>6.8718700749205790830e+2,<sp/><sp/>5.3941960214247511077e+3,</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>2.1213794301586595867e+4,<sp/><sp/>3.9307895800092710610e+4,</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>2.8729085735721942674e+4,<sp/><sp/>5.2264952788528545610e+3</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c[8]<sp/>=</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1.42343711074968357734,<sp/><sp/><sp/><sp/><sp/>4.63033784615654529590,</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>5.76949722146069140550,<sp/><sp/><sp/><sp/><sp/>3.64784832476320460504,</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1.27045825245236838258,<sp/><sp/><sp/><sp/><sp/>2.41780725177450611770e-1,</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>2.27238449892691845833e-2,<sp/><sp/>7.74545014278341407640e-4</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d[8]<sp/>=</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1.0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.05319162663775882187,</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1.67638483018380384940,<sp/><sp/><sp/><sp/><sp/>6.89767334985100004550e-1,</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1.48103976427480074590e-1,<sp/><sp/>1.51986665636164571966e-2,</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>5.47593808499534494600e-4,<sp/><sp/>1.05075007164441684324e-9</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e[8]<sp/>=</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>6.65790464350110377720,<sp/><sp/><sp/><sp/><sp/>5.46378491116411436990,</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1.78482653991729133580,<sp/><sp/><sp/><sp/><sp/>2.96560571828504891230e-1,</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>2.65321895265761230930e-2,<sp/><sp/>1.24266094738807843860e-3,</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>2.71155556874348757815e-5,<sp/><sp/>2.01033439929228813265e-7</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f[8]<sp/>=</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1.0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5.99832206555887937690e-1,</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1.36929880922735805310e-1,<sp/><sp/>1.48753612908506148525e-2,</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>7.86869131145613259100e-4,<sp/><sp/>1.84631831751005468180e-5,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>1.42151175831644588870e-7,<sp/><sp/>2.04426310338993978564e-15</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>CONST1<sp/>=<sp/>0.180625;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>CONST2<sp/>=<sp/>1.6;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SPLIT1<sp/>=<sp/>0.425;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SPLIT2<sp/>=<sp/>5.0;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r,<sp/>value;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&lt;=<sp/>0<sp/>||<sp/>p<sp/>&gt;=<sp/>1)</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ac0e2e23df625040ded95611ceae98352" kindref="member">amrex::Error</ref>(</highlight><highlight class="stringliteral">&quot;InvNormDistBest():<sp/>p<sp/>MUST<sp/>be<sp/>in<sp/>(0,1)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>p<sp/>-<sp/>0.5;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>std::fabs<sp/>(<sp/>q<sp/>)<sp/>&lt;=<sp/>SPLIT1<sp/>)</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>CONST1<sp/>-<sp/>q<sp/>*<sp/>q;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>0.0,<sp/>den<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>7;<sp/>0<sp/>&lt;=<sp/>i;<sp/>i--<sp/>)</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>num<sp/>*<sp/>r<sp/>+<sp/>a[i];</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>den<sp/>=<sp/>den<sp/>*<sp/>r<sp/>+<sp/>b[i];</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>q<sp/>*<sp/>num<sp/>/<sp/>den;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>(<sp/>(<sp/>q<sp/>&lt;<sp/>0.0<sp/>)<sp/>?<sp/>p<sp/>:<sp/>(1.0<sp/>-<sp/>p)<sp/>);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>std::sqrt<sp/>(<sp/>-std::log<sp/>(<sp/>r<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r<sp/>&lt;=<sp/>SPLIT2<sp/>)</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>r<sp/>-<sp/>CONST2;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>0.0,<sp/>den<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>7;<sp/>0<sp/>&lt;=<sp/>i;<sp/>i--<sp/>)</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>num<sp/>*<sp/>r<sp/>+<sp/>c[i];</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>den<sp/>=<sp/>den<sp/>*<sp/>r<sp/>+<sp/>d[i];</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>num<sp/>/<sp/>den;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>r<sp/>-<sp/>SPLIT2;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>0.0,<sp/>den<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>7;<sp/>0<sp/>&lt;=<sp/>i;<sp/>i--<sp/>)</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>=<sp/>num<sp/>*<sp/>r<sp/>+<sp/>e[i];</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>den<sp/>=<sp/>den<sp/>*<sp/>r<sp/>+<sp/>f[i];</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>=<sp/>num<sp/>/<sp/>den;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>q<sp/>&lt;<sp/>0.0<sp/>)<sp/>value<sp/>=<sp/>-value;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="947"><highlight class="normal">}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>AMREX_XSDK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><ref refid="AMReX__Utility_8cpp_1a7149b75200fd1c2399da882ca3a148bb" kindref="member">BL_FORT_PROC_DECL</ref>(BLINVNORMDISTBEST,blinvnormdistbest)(amrex::Real*<sp/>result)</highlight></codeline>
<codeline lineno="951"><highlight class="normal">{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>from<sp/>[0,<sp/>1)<sp/>to<sp/>(0,1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(val<sp/>==<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/><ref refid="namespaceamrex_1af7e3ca9c2455e95a21d765123c8d287e" kindref="member">amrex::Random</ref>();</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>*result<sp/>=<sp/><ref refid="namespaceamrex_1a0dace3a79fc48a8b02686c10363b70a9" kindref="member">amrex::InvNormDistBest</ref>(val);</highlight></codeline>
<codeline lineno="961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Sugar<sp/>for<sp/>parsing<sp/>IO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal">std::istream&amp;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><ref refid="namespaceamrex_1aac7b44499bc56506bcf5ed89ec42bc09" kindref="member">amrex::operator&gt;&gt;</ref>(std::istream&amp;<sp/>is,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>expect&amp;<sp/>exp)</highlight></codeline>
<codeline lineno="970"><highlight class="normal">{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>exp.istr.size();</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>n<sp/>&lt;<sp/>len<sp/>)</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>is<sp/>&gt;&gt;<sp/>c;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!is<sp/>)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>c<sp/>!=<sp/>exp.istr[n++]<sp/>)</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is.putback(c);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>n<sp/>!=<sp/>len<sp/>)</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>is.clear(std::ios::badbit|is.rdstate());</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;expect<sp/>fails<sp/>to<sp/>find<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>exp.the_string()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ac0e2e23df625040ded95611ceae98352" kindref="member">amrex::Error</ref>(msg.c_str());</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is;</highlight></codeline>
<codeline lineno="991"><highlight class="normal">}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><ref refid="classamrex_1_1expect_1a2136ece586212ef73074aaab29247505" kindref="member">amrex::expect::expect</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>istr_)</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespaceamrex_1af16cddc474435bd51df456e9cf7a2ba3" kindref="member">istr</ref>(istr_)</highlight></codeline>
<codeline lineno="995"><highlight class="normal">{</highlight></codeline>
<codeline lineno="996"><highlight class="normal">}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><ref refid="classamrex_1_1expect_1a2136ece586212ef73074aaab29247505" kindref="member">amrex::expect::expect</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str_)</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="namespaceamrex_1af16cddc474435bd51df456e9cf7a2ba3" kindref="member">istr</ref>(str_)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><ref refid="classamrex_1_1expect_1a2136ece586212ef73074aaab29247505" kindref="member">amrex::expect::expect</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)</highlight></codeline>
<codeline lineno="1004"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1af16cddc474435bd51df456e9cf7a2ba3" kindref="member">istr</ref><sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><ref refid="classamrex_1_1expect_1a359e5d36c316ae13a0107192ff1b36fe" kindref="member">amrex::expect::the_string</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1010"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1af16cddc474435bd51df456e9cf7a2ba3" kindref="member">istr</ref>;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="comment">//<sp/>StreamRetry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1StreamRetry_1a56fbf590918f701816c5567f4869c6de" kindref="member">amrex::StreamRetry::nStreamErrors</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><ref refid="classamrex_1_1StreamRetry_1ab3c0df58a9da073e05c4e35073ab1706" kindref="member">amrex::StreamRetry::StreamRetry</ref>(std::ostream<sp/>&amp;a_os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;a_suffix,</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a_maxtries)</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>tries(0),<sp/>maxTries(a_maxtries),<sp/>sros(a_os),<sp/>spos(a_os.tellp()),<sp/>suffix(a_suffix)</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><ref refid="classamrex_1_1StreamRetry_1ab3c0df58a9da073e05c4e35073ab1706" kindref="member">amrex::StreamRetry::StreamRetry</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename,</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>abortonretryfailure,</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxtries)</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>tries(0),<sp/>maxTries(maxtries),</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>abortOnRetryFailure(abortonretryfailure),</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fileName(filename),</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sros(<ref refid="namespaceamrex" kindref="compound">amrex</ref>::<ref refid="namespaceamrex_1a1e213ab52cdac41e691ab49370b30a34" kindref="member">ErrorStream</ref>())<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unused<sp/>here,<sp/>just<sp/>to<sp/>make<sp/>the<sp/>compiler<sp/>happy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/>nStreamErrors<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1StreamRetry_1ae3b5909bdd9d104025eb427395c84356" kindref="member">amrex::StreamRetry::TryOutput</ref>()</highlight></codeline>
<codeline lineno="1039"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tries<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>++tries;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sros.fail())<sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++nStreamErrors;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myProc(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>());</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tries<sp/>&lt;=<sp/>maxTries)<sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1acafd26c0f64d958aed9ee56043c4f10e" kindref="member">amrex::Verbose</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1AllPrint" kindref="compound">amrex::AllPrint</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;PROC:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>myProc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>STREAMRETRY_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>suffix<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>#<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>tries<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>gbfe:<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>sros.good()<sp/>&lt;&lt;<sp/>sros.bad()<sp/>&lt;&lt;<sp/>sros.fail()<sp/>&lt;&lt;<sp/>sros.eof()</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>sec<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">ParallelDescriptor::second</ref>()</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>os.tellp()<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sros.tellp()</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>rewind<sp/>spos<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>spos</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sros.clear();<sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>bad<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1acafd26c0f64d958aed9ee56043c4f10e" kindref="member">amrex::Verbose</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1AllPrint" kindref="compound">amrex::AllPrint</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;After<sp/>os.clear()<sp/>:<sp/>gbfe:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sros.good()<sp/>&lt;&lt;<sp/>sros.bad()</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>sros.fail()<sp/>&lt;&lt;<sp/>sros.eof()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sros.seekp(spos,<sp/>std::ios::beg);<sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>stream<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++tries;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1acafd26c0f64d958aed9ee56043c4f10e" kindref="member">amrex::Verbose</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1AllPrint" kindref="compound">amrex::AllPrint</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;PROC:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>myProc<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>STREAMFAILED_&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>suffix<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>#<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>tries<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>File<sp/>may<sp/>be<sp/>corrupt.<sp/><sp/>::<sp/>gbfe:<sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>sros.good()<sp/>&lt;&lt;<sp/>sros.bad()<sp/>&lt;&lt;<sp/>sros.fail()<sp/>&lt;&lt;<sp/>sros.eof()</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>sec<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">ParallelDescriptor::second</ref>()</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>os.tellp()<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sros.tellp()</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>::<sp/>rewind<sp/>spos<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>spos</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sros.clear();<sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>bad<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1acafd26c0f64d958aed9ee56043c4f10e" kindref="member">amrex::Verbose</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1AllPrint" kindref="compound">amrex::AllPrint</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;After<sp/>os.clear()<sp/>:<sp/>gbfe:<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sros.good()<sp/>&lt;&lt;<sp/>sros.bad()</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>sros.fail()<sp/>&lt;&lt;<sp/>sros.eof()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1StreamRetry_1a16a4e702e1fd890046aa8d80a2fe2a82" kindref="member">amrex::StreamRetry::TryFileOutput</ref>()</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bTryOutput(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tries<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bTryOutput<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nWriteErrors(nStreamErrors);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a132abb9498b1ed2f491583c1f7719afb" kindref="member">ParallelDescriptor::ReduceIntSum</ref>(nWriteErrors);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nWriteErrors<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>wrote<sp/>a<sp/>good<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bTryOutput<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wrote<sp/>a<sp/>bad<sp/>file,<sp/>rename<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>badFileName<sp/>=<sp/><ref refid="namespaceamrex_1a6e3a82e54e91d8c7543596b2c2476250" kindref="member">amrex::Concatenate</ref>(fileName<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.bad&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tries<sp/>-<sp/>1,<sp/>2);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1acafd26c0f64d958aed9ee56043c4f10e" kindref="member">amrex::Verbose</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/>nWriteErrors<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>STREAMERRORS<sp/>:<sp/>Renaming<sp/>file<sp/>from<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>fileName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>to<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>badFileName<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::rename(fileName.c_str(),<sp/>badFileName.c_str());</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a732a4be5017987f2d6edc0fcd2329301" kindref="member">ParallelDescriptor::Barrier</ref>(</highlight><highlight class="stringliteral">&quot;StreamRetry::TryFileOutput&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>wait<sp/>for<sp/>file<sp/>rename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>for<sp/>maxtries<sp/>and<sp/>abort<sp/>pref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(tries<sp/>&lt;<sp/>maxTries)<sp/>{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bTryOutput<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(abortOnRetryFailure)<sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;STREAMERROR<sp/>:<sp/>StreamRetry::maxTries<sp/>exceeded.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bTryOutput<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>++tries;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>nStreamErrors<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bTryOutput;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a09ef310468cc24552cfc73abfc282b72" kindref="member">amrex::SyncStrings</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::string&gt;<sp/>&amp;localStrings,</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector&lt;std::string&gt;<sp/>&amp;syncedStrings,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;alreadySynced)</highlight></codeline>
<codeline lineno="1134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_USE_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nProcs(<ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>());</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ioProcNumber(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>());</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nUnmatched(0);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/>Vector&lt;std::string&gt;<sp/>localStringsCopy<sp/>=<sp/>localStrings;</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>broadcast<sp/>ioproc<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pfStringsSize(0);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>pfStrings;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>localStringsCopy.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pfStrings<sp/>&lt;&lt;<sp/>localStringsCopy[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>pfStringsSize<sp/>=<sp/>pfStrings.str().size();</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a20157f27c3bf88a426b0f44bd6bbf135" kindref="member">ParallelDescriptor::Bcast</ref>(&amp;pfStringsSize,<sp/>1);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>Vector&lt;char&gt;<sp/>pfCharArray(pfStringsSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>std::strcpy(pfCharArray.dataPtr(),<sp/>pfStrings.str().c_str());<sp/><sp/></highlight><highlight class="comment">//<sp/>null<sp/>terminated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a20157f27c3bf88a426b0f44bd6bbf135" kindref="member">ParallelDescriptor::Bcast</ref>(pfCharArray.dataPtr(),<sp/>pfCharArray.size());</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>extract<sp/>the<sp/>ioproc<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/>Vector&lt;std::string&gt;<sp/>ioprocStrings,<sp/>sendStrings;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/>std::istringstream<sp/>pfIn(pfCharArray.dataPtr());</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>pfName;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>!<sp/>pfIn.eof())<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::getline(pfIn,<sp/>pfName,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>pfIn.eof())<sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>ioprocStrings.push_back(pfName);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>now<sp/>check<sp/>if<sp/>they<sp/>match<sp/>on<sp/>non<sp/>ioprocs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n(0);<sp/>n<sp/>&lt;<sp/>ioprocStrings.size();<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matched(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>localStringsCopy.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ioprocStrings[n]<sp/>==<sp/>localStringsCopy[i])<sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matched<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>matched)<sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nUnmatched;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localStringsCopy.push_back(ioprocStrings[n]);<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>add<sp/>to<sp/>local<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n(0);<sp/>n<sp/>&lt;<sp/>localStringsCopy.size();<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matched(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>ioprocStrings.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(localStringsCopy[n]<sp/>==<sp/>ioprocStrings[i])<sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matched<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>matched)<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nUnmatched;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sendStrings.push_back(localStringsCopy[n]);<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>send<sp/>these<sp/>to<sp/>the<sp/>ioproc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" kindref="member">ParallelDescriptor::ReduceIntMax</ref>(nUnmatched);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nUnmatched<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>alreadySynced<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>syncedStrings<sp/>=<sp/>localStrings;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/>alreadySynced<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sendStringsSize(0);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>ossSendStrings;</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/>Vector&lt;char&gt;<sp/>sendCharArray(1);<sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>be<sp/>zero<sp/>for<sp/>gather<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>sendStrings.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ossSendStrings<sp/>&lt;&lt;<sp/>sendStrings[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>sendStringsSize<sp/>=<sp/>ossSendStrings.str().size();</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>sendCharArray.resize(sendStringsSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>std::strcpy(sendCharArray.dataPtr(),<sp/>ossSendStrings.str().c_str());<sp/><sp/></highlight><highlight class="comment">//<sp/>null<sp/>terminated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>Vector&lt;int&gt;<sp/>nChars(nProcs,<sp/>0);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a5e16712b9f4c3f14537cd0b561758aa5" kindref="member">ParallelDescriptor::Gather</ref>(&amp;sendStringsSize,<sp/>1,<sp/>nChars.dataPtr(),<sp/>1,<sp/>ioProcNumber);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalChars(0);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/>Vector&lt;char&gt;<sp/>recvStrings(1);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/>Vector&lt;int&gt;<sp/>offset(nProcs,<sp/>0);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>nChars.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>totalChars<sp/>+=<sp/>nChars[i];</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>recvStrings.resize(totalChars<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iOffset(0);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(1);<sp/>i<sp/>&lt;<sp/>nChars.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iOffset<sp/>+=<sp/>nChars[i-1];</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>offset[i]<sp/>=<sp/>iOffset;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Gatherv(sendCharArray.dataPtr(),</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sendStringsSize,<sp/></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">ParallelDescriptor::Mpi_typemap&lt;char&gt;::type</ref>(),</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recvStrings.dataPtr(),</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nChars.dataPtr(),</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset.dataPtr(),</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">ParallelDescriptor::Mpi_typemap&lt;char&gt;::type</ref>(),</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ioProcNumber,</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">ParallelDescriptor::Communicator</ref>())<sp/>);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/>std::istringstream<sp/>pfIn(recvStrings.dataPtr());</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>pfName;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>syncedStrings<sp/>=<sp/>localStrings;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>!<sp/>pfIn.eof())<sp/>{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::getline(pfIn,<sp/>pfName,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>pfIn.eof())<sp/>{</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>syncedStrings.push_back(pfName);<sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>add<sp/>the<sp/>gathered<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>broadcast<sp/>synced<sp/>ioproc<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>syncedStringsSize(0);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>syncedStrStr;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>syncedStrings.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>syncedStrStr<sp/>&lt;&lt;<sp/>syncedStrings[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>syncedStringsSize<sp/>=<sp/>syncedStrStr.str().size();</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a20157f27c3bf88a426b0f44bd6bbf135" kindref="member">ParallelDescriptor::Bcast</ref>(&amp;syncedStringsSize,<sp/>1);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>Vector&lt;char&gt;<sp/>syncedCharArray(syncedStringsSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/>std::strcpy(syncedCharArray.dataPtr(),<sp/>syncedStrStr.str().c_str());<sp/><sp/></highlight><highlight class="comment">//<sp/>null<sp/>terminated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a20157f27c3bf88a426b0f44bd6bbf135" kindref="member">ParallelDescriptor::Bcast</ref>(syncedCharArray.dataPtr(),<sp/>syncedCharArray.size());</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>std::istringstream<sp/>syncedIn(syncedCharArray.dataPtr());</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>syncedName;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>!<sp/>syncedIn.eof())<sp/>{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::getline(syncedIn,<sp/>syncedName,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>syncedIn.eof())<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>syncedStrings.push_back(syncedName);</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>alreadySynced<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>syncedStrings<sp/>=<sp/>localStrings;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector&lt;char&gt;</ref><sp/><ref refid="namespaceamrex_1ac55f6d6246ea70d74588e5f06fd92e99" kindref="member">amrex::SerializeStringArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;std::string&gt;<sp/>&amp;stringArray)</highlight></codeline>
<codeline lineno="1295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/>std::ostringstream<sp/>stringStream;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i(0);<sp/>i<sp/>&lt;<sp/>stringArray.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>stringStream<sp/>&lt;&lt;<sp/>stringArray[i]<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/>Vector&lt;char&gt;<sp/>charArray(stringStream.str().size()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>std::strcpy(charArray.dataPtr(),<sp/>stringStream.str().c_str());<sp/><sp/></highlight><highlight class="comment">//<sp/>null<sp/>terminated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>charArray;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector&lt;std::string&gt;</ref><sp/><ref refid="namespaceamrex_1a23045f55caabc0bec388518c4c4adecb" kindref="member">amrex::UnSerializeStringArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Vector&lt;char&gt;<sp/>&amp;charArray)</highlight></codeline>
<codeline lineno="1308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>Vector&lt;std::string&gt;<sp/>stringArray;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/>std::istringstream<sp/>stringStream(charArray.dataPtr());</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/>std::string<sp/>sTemp;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>!<sp/>stringStream.eof())<sp/>{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>std::getline(stringStream,<sp/>sTemp,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<sp/>stringStream.eof())<sp/>{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stringArray.push_back(sTemp);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stringArray;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1af0fd43716fb89a13154ed4c037ebe6e6" kindref="member">amrex::BroadcastBool</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;bBool,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myLocalId,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rootId,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref><sp/>&amp;localComm)</highlight></codeline>
<codeline lineno="1323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numBool;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(myLocalId<sp/>==<sp/>rootId)<sp/>{</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>numBool<sp/>=<sp/>bBool;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a20157f27c3bf88a426b0f44bd6bbf135" kindref="member">amrex::ParallelDescriptor::Bcast</ref>(&amp;numBool,<sp/>1,<sp/>rootId,<sp/>localComm);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(myLocalId<sp/>!=<sp/>rootId)<sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>bBool<sp/>=<sp/>numBool;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aa60205e03d594df934b5b3afd723c764" kindref="member">amrex::BroadcastString</ref>(std::string<sp/>&amp;bStr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myLocalId,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rootId,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref><sp/>&amp;localComm)</highlight></codeline>
<codeline lineno="1338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/>Vector&lt;std::string&gt;<sp/>vecString(1,<sp/>bStr);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>Vector&lt;char&gt;<sp/>serialString;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(myLocalId<sp/>==<sp/>rootId)<sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>serialString<sp/>=<sp/><ref refid="namespaceamrex_1ac55f6d6246ea70d74588e5f06fd92e99" kindref="member">amrex::SerializeStringArray</ref>(vecString);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1a8cf9dce7670dcc62897405af53fafcff" kindref="member">amrex::BroadcastArray</ref>(serialString,<sp/>myLocalId,<sp/>rootId,<sp/>localComm);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(myLocalId<sp/>!=<sp/>rootId)<sp/>{</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>vecString<sp/>=<sp/><ref refid="namespaceamrex_1a23045f55caabc0bec388518c4c4adecb" kindref="member">amrex::UnSerializeStringArray</ref>(serialString);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>bStr<sp/>=<sp/>vecString[0];</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a1bfd620fc96f18d04313d70ccca85bfb" kindref="member">amrex::BroadcastStringArray</ref>(Vector&lt;std::string&gt;<sp/>&amp;bSA,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>myLocalId,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rootId,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref><sp/>&amp;localComm)</highlight></codeline>
<codeline lineno="1354"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/>Vector&lt;char&gt;<sp/>serialStringArray;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(myLocalId<sp/>==<sp/>rootId)<sp/>{</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>serialStringArray<sp/>=<sp/><ref refid="namespaceamrex_1ac55f6d6246ea70d74588e5f06fd92e99" kindref="member">amrex::SerializeStringArray</ref>(bSA);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><ref refid="namespaceamrex_1a8cf9dce7670dcc62897405af53fafcff" kindref="member">amrex::BroadcastArray</ref>(serialStringArray,<sp/>myLocalId,<sp/>rootId,<sp/>localComm);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(myLocalId<sp/>!=<sp/>rootId)<sp/>{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>bSA<sp/>=<sp/><ref refid="namespaceamrex_1a23045f55caabc0bec388518c4c4adecb" kindref="member">amrex::UnSerializeStringArray</ref>(serialStringArray);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1af353083e449d736188c80257c096f518" kindref="member">amrex::USleep</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sleepsec)<sp/>{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msps<sp/>=<sp/>1000000;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/>usleep(sleepsec<sp/>*<sp/>msps);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>clock_time_begin<sp/>=<sp/>amrex::MaxResSteadyClock::now();</highlight></codeline>
<codeline lineno="1375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a6f975f843338c8eada684f0e8e2c0cb7" kindref="member">amrex::second</ref><sp/>()<sp/>noexcept</highlight></codeline>
<codeline lineno="1378"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::duration_cast&lt;std::chrono::duration&lt;double&gt;<sp/>&gt;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(amrex::MaxResSteadyClock::now()<sp/>-<sp/>clock_time_begin).count();</highlight></codeline>
<codeline lineno="1381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="AMReX__Utility_8cpp_1ab6136b169776e667910d5505dca32259" kindref="member">amrex_malloc</ref><sp/>(std::size_t<sp/><ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1ac0bbdd3b8f64770191201e431e16c723" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc(size);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="AMReX__Utility_8cpp_1a2341d68b47f82cd117da58195ac02101" kindref="member">amrex_free</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p)</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::free(p);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="AMReX__Utility_8cpp_1af7786727a4dfac68a7b0bcf67f62f61e" kindref="member">amrex_random</ref><sp/>()</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1af7e3ca9c2455e95a21d765123c8d287e" kindref="member">amrex::Random</ref>();</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="AMReX__Utility_8cpp_1ad7f95c4a9f94b65f593a48aedc1bdb25" kindref="member">amrex_random_int</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>n)<sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>for<sp/>Fortran,<sp/>which<sp/>doesn&apos;t<sp/>have<sp/>unsigned<sp/>long.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespaceamrex_1a7916c1f3adf571c67baaf478cf139bff" kindref="member">amrex::Random_int</ref>(static_cast&lt;unsigned<sp/>long&gt;(n)));</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Utility.cpp"/>
  </compounddef>
</doxygen>
