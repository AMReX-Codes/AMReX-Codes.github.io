<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1EB2_1_1PolynomialIF" kind="class" language="C++" prot="public">
    <compoundname>amrex::EB2::PolynomialIF</compoundname>
    <includes refid="AMReX__EB2__IF__Polynomial_8H" local="no">AMReX_EB2_IF_Polynomial.H</includes>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1PolynomialIF_1ab7dabb0bff8ee7a62ab1b97108429374" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1EB2_1_1PolyTerm" kindref="compound">PolyTerm</ref> &gt;</type>
        <definition>Vector&lt;PolyTerm&gt; amrex::EB2::PolynomialIF::m_polynomial</definition>
        <argsstring></argsstring>
        <name>m_polynomial</name>
        <qualifiedname>amrex::EB2::PolynomialIF::m_polynomial</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="101" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1PolynomialIF_1adb20f13a740421e91b3b1eb3e95672b1" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::EB2::PolynomialIF::m_inside</definition>
        <argsstring></argsstring>
        <name>m_inside</name>
        <qualifiedname>amrex::EB2::PolynomialIF::m_inside</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="102" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1PolynomialIF_1ad957f17b324e9e51370e72b065d6684c" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::EB2::PolynomialIF::m_sign</definition>
        <argsstring></argsstring>
        <name>m_sign</name>
        <qualifiedname>amrex::EB2::PolynomialIF::m_sign</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="103" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1PolynomialIF_1a1a226866e5efa7580c4f117e1c45e386" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::EB2::PolynomialIF::m_size</definition>
        <argsstring></argsstring>
        <name>m_size</name>
        <qualifiedname>amrex::EB2::PolynomialIF::m_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="104" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="104" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolynomialIF_1aded08a08d53e73aa84431822f8b76374" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::PolynomialIF::PolynomialIF</definition>
        <argsstring>(const Vector&lt; PolyTerm &gt; &amp;a_polynomial, bool a_inside=true)</argsstring>
        <name>PolynomialIF</name>
        <qualifiedname>amrex::EB2::PolynomialIF::PolynomialIF</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1EB2_1_1PolyTerm" kindref="compound">PolyTerm</ref> &gt; &amp;</type>
          <declname>a_polynomial</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>a_inside</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>inside: is the fluid inside the ellipsoid? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="71" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="71" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolynomialIF_1a38e787076c1c09ba8ea35d1815d97ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::PolynomialIF::~PolynomialIF</definition>
        <argsstring>()=default</argsstring>
        <name>~PolynomialIF</name>
        <qualifiedname>amrex::EB2::PolynomialIF::~PolynomialIF</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="78" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolynomialIF_1a3ee4eff332df3bbfcff89267a7c9bf62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::PolynomialIF::PolynomialIF</definition>
        <argsstring>(const PolynomialIF &amp;rhs)=default</argsstring>
        <name>PolynomialIF</name>
        <qualifiedname>amrex::EB2::PolynomialIF::PolynomialIF</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1EB2_1_1PolynomialIF" kindref="compound">PolynomialIF</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="79" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolynomialIF_1a18f10f3de6a91418664b73f1c86d7461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::PolynomialIF::PolynomialIF</definition>
        <argsstring>(PolynomialIF &amp;&amp;rhs)=default</argsstring>
        <name>PolynomialIF</name>
        <qualifiedname>amrex::EB2::PolynomialIF::PolynomialIF</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1PolynomialIF" kindref="compound">PolynomialIF</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="80" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolynomialIF_1adfa5b118569f29ddc11d0f8a6a0a13e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1EB2_1_1PolynomialIF" kindref="compound">PolynomialIF</ref> &amp;</type>
        <definition>PolynomialIF &amp; amrex::EB2::PolynomialIF::operator=</definition>
        <argsstring>(const PolynomialIF &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::EB2::PolynomialIF::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1EB2_1_1PolynomialIF" kindref="compound">PolynomialIF</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="81" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolynomialIF_1a86d8d62011bcfef4363a4279529c8065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1EB2_1_1PolynomialIF" kindref="compound">PolynomialIF</ref> &amp;</type>
        <definition>PolynomialIF &amp; amrex::EB2::PolynomialIF::operator=</definition>
        <argsstring>(PolynomialIF &amp;&amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::EB2::PolynomialIF::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1PolynomialIF" kindref="compound">PolynomialIF</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="82" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolynomialIF_1aeec171e7efa0610db01608c992e52291" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::EB2::PolynomialIF::operator()</definition>
        <argsstring>(Real x, Real y, Real z) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::EB2::PolynomialIF::operator()</qualifiedname>
        <param>
          <type>Real</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="85" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="85" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolynomialIF_1a2e3ae065305b661cde39900314db8a26" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::EB2::PolynomialIF::operator()</definition>
        <argsstring>(const RealArray &amp;p) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::EB2::PolynomialIF::operator()</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1aeb06fab72f85728954130adbe25c5397" kindref="member">RealArray</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="96" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="96" bodyend="98"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="4">
        <label>T</label>
      </node>
      <node id="2">
        <label>amrex::Vector&lt; amrex::EB2::PolyTerm &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::EB2::PolynomialIF</label>
        <link refid="classamrex_1_1EB2_1_1PolynomialIF"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_polynomial</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="66" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="67" bodyend="105"/>
    <listofallmembers>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1adb20f13a740421e91b3b1eb3e95672b1" prot="protected" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>m_inside</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1ab7dabb0bff8ee7a62ab1b97108429374" prot="protected" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>m_polynomial</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1ad957f17b324e9e51370e72b065d6684c" prot="protected" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>m_sign</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1a1a226866e5efa7580c4f117e1c45e386" prot="protected" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>m_size</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1aeec171e7efa0610db01608c992e52291" prot="public" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>operator()</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1a2e3ae065305b661cde39900314db8a26" prot="public" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>operator()</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1adfa5b118569f29ddc11d0f8a6a0a13e9" prot="public" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1a86d8d62011bcfef4363a4279529c8065" prot="public" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1aded08a08d53e73aa84431822f8b76374" prot="public" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>PolynomialIF</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1a3ee4eff332df3bbfcff89267a7c9bf62" prot="public" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>PolynomialIF</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1a18f10f3de6a91418664b73f1c86d7461" prot="public" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>PolynomialIF</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1a38e787076c1c09ba8ea35d1815d97ea4" prot="public" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>~PolynomialIF</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
