<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1EB2_1_1PolynomialIF" kind="class" language="C++" prot="public">
    <compoundname>amrex::EB2::PolynomialIF</compoundname>
    <basecompoundref refid="structamrex_1_1GPUable" prot="public" virt="non-virtual">amrex::GPUable</basecompoundref>
    <includes refid="AMReX__EB2__IF__Polynomial_8H" local="no">AMReX_EB2_IF_Polynomial.H</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1PolynomialIF_1ab7dabb0bff8ee7a62ab1b97108429374" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1EB2_1_1PolyTerm" kindref="compound">PolyTerm</ref> &gt;</type>
        <definition>Vector&lt;PolyTerm&gt; amrex::EB2::PolynomialIF::m_polynomial</definition>
        <argsstring></argsstring>
        <name>m_polynomial</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="82" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1PolynomialIF_1adb20f13a740421e91b3b1eb3e95672b1" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::EB2::PolynomialIF::m_inside</definition>
        <argsstring></argsstring>
        <name>m_inside</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="83" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1PolynomialIF_1ad957f17b324e9e51370e72b065d6684c" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::EB2::PolynomialIF::m_sign</definition>
        <argsstring></argsstring>
        <name>m_sign</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="84" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1PolynomialIF_1a1a226866e5efa7580c4f117e1c45e386" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::EB2::PolynomialIF::m_size</definition>
        <argsstring></argsstring>
        <name>m_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="85" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1PolynomialIF_1aff4d6b80d715cfdf87cba8fe8f471856" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1EB2_1_1PolyTerm" kindref="compound">PolyTerm</ref> *</type>
        <definition>PolyTerm* amrex::EB2::PolynomialIF::m_dp</definition>
        <argsstring></argsstring>
        <name>m_dp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="86" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1EB2_1_1PolynomialIF_1ab7dac861670797e84f760de37d4cafa8" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classamrex_1_1EB2_1_1PolyTerm" kindref="compound">PolyTerm</ref> &gt;</type>
        <definition>std::shared_ptr&lt;PolyTerm&gt; amrex::EB2::PolynomialIF::m_sp</definition>
        <argsstring></argsstring>
        <name>m_sp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="87" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolynomialIF_1aded08a08d53e73aa84431822f8b76374" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::PolynomialIF::PolynomialIF</definition>
        <argsstring>(const Vector&lt; PolyTerm &gt; &amp;a_polynomial, bool a_inside=true)</argsstring>
        <name>PolynomialIF</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1EB2_1_1PolyTerm" kindref="compound">PolyTerm</ref> &gt; &amp;</type>
          <declname>a_polynomial</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>a_inside</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>inside: is the fluid inside the ellipsoid? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="41" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="41" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolynomialIF_1a3ee4eff332df3bbfcff89267a7c9bf62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::PolynomialIF::PolynomialIF</definition>
        <argsstring>(const PolynomialIF &amp;rhs)=default</argsstring>
        <name>PolynomialIF</name>
        <param>
          <type>const <ref refid="classamrex_1_1EB2_1_1PolynomialIF" kindref="compound">PolynomialIF</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolynomialIF_1a18f10f3de6a91418664b73f1c86d7461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::EB2::PolynomialIF::PolynomialIF</definition>
        <argsstring>(PolynomialIF &amp;&amp;rhs)=default</argsstring>
        <name>PolynomialIF</name>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1PolynomialIF" kindref="compound">PolynomialIF</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolynomialIF_1a600f1123f1d043690d51b722060dca71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1EB2_1_1PolynomialIF" kindref="compound">PolynomialIF</ref> &amp;</type>
        <definition>PolynomialIF&amp; amrex::EB2::PolynomialIF::operator=</definition>
        <argsstring>(const PolynomialIF &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1EB2_1_1PolynomialIF" kindref="compound">PolynomialIF</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolynomialIF_1ae8b070201e27ab25f01a5378a671e4aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1EB2_1_1PolynomialIF" kindref="compound">PolynomialIF</ref> &amp;</type>
        <definition>PolynomialIF&amp; amrex::EB2::PolynomialIF::operator=</definition>
        <argsstring>(PolynomialIF &amp;&amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1EB2_1_1PolynomialIF" kindref="compound">PolynomialIF</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolynomialIF_1a93bee57a1ae3e73d72732f3c427357a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::EB2::PolynomialIF::operator()</definition>
        <argsstring>(AMREX_D_DECL(Real x, Real y, Real z)) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>AMREX_D_DECL(Real x, Real y, Real z)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="61" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="61" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1EB2_1_1PolynomialIF_1a2e3ae065305b661cde39900314db8a26" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::EB2::PolynomialIF::operator()</definition>
        <argsstring>(const RealArray &amp;p) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="namespaceamrex_1a9de48c04056551924746c42f9eda3c8f" kindref="member">RealArray</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="77" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="77" bodyend="79"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4332">
        <label>amrex::EB2::PolynomialIF</label>
        <link refid="classamrex_1_1EB2_1_1PolynomialIF"/>
        <childnode refid="4333" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4333">
        <label>amrex::GPUable</label>
        <link refid="structamrex_1_1GPUable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4337">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="4337" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="4338">
        <label>Real</label>
      </node>
      <node id="4340">
        <label>std::vector&lt; amrex::EB2::PolyTerm, std::allocator&lt; amrex::EB2::PolyTerm &gt; &gt;</label>
      </node>
      <node id="4339">
        <label>amrex::Vector&lt; amrex::EB2::PolyTerm &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4340" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4336">
        <label>amrex::EB2::PolyTerm</label>
        <link refid="classamrex_1_1EB2_1_1PolyTerm"/>
        <childnode refid="4337" relation="usage">
          <edgelabel>powers</edgelabel>
        </childnode>
        <childnode refid="4338" relation="usage">
          <edgelabel>coef</edgelabel>
        </childnode>
      </node>
      <node id="4334">
        <label>amrex::EB2::PolynomialIF</label>
        <link refid="classamrex_1_1EB2_1_1PolynomialIF"/>
        <childnode refid="4335" relation="public-inheritance">
        </childnode>
        <childnode refid="4336" relation="usage">
          <edgelabel>m_dp</edgelabel>
        </childnode>
        <childnode refid="4339" relation="usage">
          <edgelabel>m_polynomial</edgelabel>
        </childnode>
        <childnode refid="4338" relation="usage">
          <edgelabel>m_sign</edgelabel>
        </childnode>
      </node>
      <node id="4335">
        <label>amrex::GPUable</label>
        <link refid="structamrex_1_1GPUable"/>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" line="37" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB2_IF_Polynomial.H" bodystart="33" bodyend="88"/>
    <listofallmembers>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1aff4d6b80d715cfdf87cba8fe8f471856" prot="protected" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>m_dp</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1adb20f13a740421e91b3b1eb3e95672b1" prot="protected" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>m_inside</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1ab7dabb0bff8ee7a62ab1b97108429374" prot="protected" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>m_polynomial</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1ad957f17b324e9e51370e72b065d6684c" prot="protected" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>m_sign</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1a1a226866e5efa7580c4f117e1c45e386" prot="protected" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>m_size</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1ab7dac861670797e84f760de37d4cafa8" prot="protected" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>m_sp</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1a93bee57a1ae3e73d72732f3c427357a0" prot="public" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>operator()</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1a2e3ae065305b661cde39900314db8a26" prot="public" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>operator()</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1a600f1123f1d043690d51b722060dca71" prot="public" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1ae8b070201e27ab25f01a5378a671e4aa" prot="public" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>operator=</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1aded08a08d53e73aa84431822f8b76374" prot="public" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>PolynomialIF</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1a3ee4eff332df3bbfcff89267a7c9bf62" prot="public" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>PolynomialIF</name></member>
      <member refid="classamrex_1_1EB2_1_1PolynomialIF_1a18f10f3de6a91418664b73f1c86d7461" prot="public" virt="non-virtual"><scope>amrex::EB2::PolynomialIF</scope><name>PolynomialIF</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
