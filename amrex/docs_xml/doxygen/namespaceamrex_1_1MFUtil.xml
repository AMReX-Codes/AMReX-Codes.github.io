<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespaceamrex_1_1MFUtil" kind="namespace" language="C++">
    <compoundname>amrex::MFUtil</compoundname>
    <innerclass refid="structamrex_1_1MFUtil_1_1AsymmetricGhost" prot="public">amrex::MFUtil::AsymmetricGhost</innerclass>
    <innerclass refid="structamrex_1_1MFUtil_1_1SymmetricGhost" prot="public">amrex::MFUtil::SymmetricGhost</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1MFUtil_1a9b34553675e4bbe3e7e6108780d34975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>template&lt; typename &gt; class</type>
            <declname>Cpy</declname>
            <defname>Cpy</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::MFUtil::duplicate</definition>
        <argsstring>(const BoxArray &amp;ba, const DistributionMapping &amp;dm, const T &amp;mf_in)</argsstring>
        <name>duplicate</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>mf_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Duplicate class T (which must be either of type <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> or <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>) using a new <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. Data from the source (mf_in) is copied using a ParallelCopy (ghost cells are treated based on the Cpy class (which is either <ref refid="structamrex_1_1MFUtil_1_1SymmetricGhost" kindref="compound">SymmetricGhost</ref> or <ref refid="structamrex_1_1MFUtil_1_1AsymmetricGhost" kindref="compound">AsymmetricGhost</ref>)). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.H" line="211" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="211" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1MFUtil_1a69b29ecaacdc25da8869a005da585ef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>template&lt; typename &gt; class</type>
            <declname>Cpy</declname>
            <defname>Cpy</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::MFUtil::duplicate</definition>
        <argsstring>(const BoxArray &amp;ba, const DistributionMapping &amp;dm, const T &amp;mf_in, const Periodicity &amp;periodicity)</argsstring>
        <name>duplicate</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>mf_in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>periodicity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Duplicate class T (which must be either of type <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> or <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>) using a new <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. Data from the source (mf_in) is copied using a ParallelCopy (ghost cells are treated based on the Cpy class (which is either <ref refid="structamrex_1_1MFUtil_1_1SymmetricGhost" kindref="compound">SymmetricGhost</ref> or <ref refid="structamrex_1_1MFUtil_1_1AsymmetricGhost" kindref="compound">AsymmetricGhost</ref>)). Following the copy operation, a FillBoundary operation is called. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.H" line="231" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="231" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1MFUtil_1afe644ed72607173bbcef31867f6a0c36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::MFUtil::regrid</definition>
        <argsstring>(const BoxArray &amp;ba, const DistributionMapping &amp;dm, const T &amp;mf_in, bool regrid_ghost=false)</argsstring>
        <name>regrid</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>mf_in</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>regrid_ghost</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Regrid (by duplication) class T (which must be either of type <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> or <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>) usign the new <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. The boolean flag <computeroutput>regrid_ghost</computeroutput> switched between the <ref refid="structamrex_1_1MFUtil_1_1SymmetricGhost" kindref="compound">SymmetricGhost</ref> and <ref refid="structamrex_1_1MFUtil_1_1AsymmetricGhost" kindref="compound">AsymmetricGhost</ref> copy functions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.H" line="246" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="246" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1MFUtil_1a9c04768eaa499d2b837f0732d1316e6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::MFUtil::regrid</definition>
        <argsstring>(T &amp;mf_out, const BoxArray &amp;ba, const DistributionMapping &amp;dm, const T &amp;mf_in, bool regrid_ghost=false)</argsstring>
        <name>regrid</name>
        <param>
          <type>T &amp;</type>
          <declname>mf_out</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>mf_in</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>regrid_ghost</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Regrid (by duplication) class T (which must be either of type <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> or <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>) using the new <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. The T-object at the end of the pointer <computeroutput>mf_out</computeroutput> is re-defined. The boolean flag <computeroutput>regrid_ghost</computeroutput> switched between the <ref refid="structamrex_1_1MFUtil_1_1SymmetricGhost" kindref="compound">SymmetricGhost</ref> and <ref refid="structamrex_1_1MFUtil_1_1AsymmetricGhost" kindref="compound">AsymmetricGhost</ref> copy functions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.H" line="265" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="265" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1MFUtil_1a0d2b028d5b4be5e38a0e4f8fc778c523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::MFUtil::regrid</definition>
        <argsstring>(T &amp;mf_out, const BoxArray &amp;ba, const DistributionMapping &amp;dm, const FabFactory&lt; FArrayBox &gt; &amp;eb_factory, const T &amp;mf_in, bool regrid_ghost=false)</argsstring>
        <name>regrid</name>
        <param>
          <type>T &amp;</type>
          <declname>mf_out</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabFactory" kindref="compound">FabFactory</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &gt; &amp;</type>
          <declname>eb_factory</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>mf_in</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>regrid_ghost</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Regrid (by duplication) class T. The T-object at the end of the reference <computeroutput>mf_out</computeroutput> is re-defined using the <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> provided by <computeroutput>eb_factory</computeroutput>. The boolean flag <computeroutput>regrid_ghost</computeroutput> switched between the <ref refid="structamrex_1_1MFUtil_1_1SymmetricGhost" kindref="compound">SymmetricGhost</ref> and <ref refid="structamrex_1_1MFUtil_1_1AsymmetricGhost" kindref="compound">AsymmetricGhost</ref> copy functions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.H" line="282" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="282" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1MFUtil_1a47ebced535794ff0eeb79e799ca59761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_src</type>
          </param>
          <param>
            <type>typename T_dest</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; T_dest &gt;</type>
        <definition>std::unique_ptr&lt;T_dest&gt; amrex::MFUtil::convert</definition>
        <argsstring>(const T_src &amp;mf_in)</argsstring>
        <name>convert</name>
        <param>
          <type>const T_src &amp;</type>
          <declname>mf_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert class T_src (which must either be of type <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> or <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>) to type T_dest (which must also be of type <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> or <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>). This function is useful for convering <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> or vice-versa. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.H" line="300" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.H" bodystart="300" bodyend="325"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>General collection of <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> utilities. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_MultiFabUtil.H" line="181" column="1"/>
  </compounddef>
</doxygen>
