<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="AMReX__VectorIO_8cpp" kind="file" language="C++">
    <compoundname>AMReX_VectorIO.cpp</compoundname>
    <includes refid="AMReX__VectorIO_8H" local="yes">AMReX_VectorIO.H</includes>
    <incdepgraph>
      <node id="50575">
        <label>AMReX_Algorithm.H</label>
        <link refid="AMReX__Algorithm_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50554" relation="include">
        </childnode>
        <childnode refid="50561" relation="include">
        </childnode>
        <childnode refid="50576" relation="include">
        </childnode>
        <childnode refid="50573" relation="include">
        </childnode>
        <childnode refid="50566" relation="include">
        </childnode>
        <childnode refid="50577" relation="include">
        </childnode>
        <childnode refid="50578" relation="include">
        </childnode>
        <childnode refid="50552" relation="include">
        </childnode>
      </node>
      <node id="50574">
        <label>AMReX_SPACE.H</label>
        <link refid="AMReX__SPACE_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
      </node>
      <node id="50569">
        <label>functional</label>
      </node>
      <node id="50578">
        <label>limits</label>
      </node>
      <node id="50565">
        <label>float.h</label>
      </node>
      <node id="50573">
        <label>AMReX_BLassert.H</label>
        <link refid="AMReX__BLassert_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50553" relation="include">
        </childnode>
      </node>
      <node id="50556">
        <label>AMReX_GpuAssert.H</label>
        <link refid="AMReX__GpuAssert_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50557" relation="include">
        </childnode>
      </node>
      <node id="50582">
        <label>cstdint</label>
      </node>
      <node id="50579">
        <label>AMReX_Vector.H</label>
        <link refid="AMReX__Vector_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50577" relation="include">
        </childnode>
        <childnode refid="50570" relation="include">
        </childnode>
        <childnode refid="50547" relation="include">
        </childnode>
        <childnode refid="50573" relation="include">
        </childnode>
        <childnode refid="50561" relation="include">
        </childnode>
        <childnode refid="50562" relation="include">
        </childnode>
      </node>
      <node id="50572">
        <label>AMReX_GpuTypes.H</label>
        <link refid="AMReX__GpuTypes_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50561" relation="include">
        </childnode>
      </node>
      <node id="50567">
        <label>cmath</label>
      </node>
      <node id="50557">
        <label>cassert</label>
      </node>
      <node id="50564">
        <label>AMReX_REAL.H</label>
        <link refid="AMReX__REAL_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50561" relation="include">
        </childnode>
        <childnode refid="50565" relation="include">
        </childnode>
      </node>
      <node id="50560">
        <label>stdexcept</label>
      </node>
      <node id="50558">
        <label>AMReX_ccse-mpi.H</label>
        <link refid="AMReX__ccse-mpi_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
      </node>
      <node id="50549">
        <label>string</label>
      </node>
      <node id="50554">
        <label>AMReX_GpuQualifiers.H</label>
        <link refid="AMReX__GpuQualifiers_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
      </node>
      <node id="50576">
        <label>AMReX_Dim3.H</label>
        <link refid="AMReX__Dim3_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50541" relation="include">
        </childnode>
        <childnode refid="50564" relation="include">
        </childnode>
        <childnode refid="50554" relation="include">
        </childnode>
      </node>
      <node id="50571">
        <label>AMReX_GpuControl.H</label>
        <link refid="AMReX__GpuControl_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50554" relation="include">
        </childnode>
        <childnode refid="50572" relation="include">
        </childnode>
      </node>
      <node id="50553">
        <label>AMReX.H</label>
        <link refid="AMReX_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50554" relation="include">
        </childnode>
        <childnode refid="50555" relation="include">
        </childnode>
        <childnode refid="50556" relation="include">
        </childnode>
        <childnode refid="50558" relation="include">
        </childnode>
        <childnode refid="50559" relation="include">
        </childnode>
        <childnode refid="50561" relation="include">
        </childnode>
        <childnode refid="50562" relation="include">
        </childnode>
        <childnode refid="50564" relation="include">
        </childnode>
        <childnode refid="50566" relation="include">
        </childnode>
        <childnode refid="50541" relation="include">
        </childnode>
        <childnode refid="50569" relation="include">
        </childnode>
        <childnode refid="50549" relation="include">
        </childnode>
        <childnode refid="50551" relation="include">
        </childnode>
        <childnode refid="50570" relation="include">
        </childnode>
        <childnode refid="50547" relation="include">
        </childnode>
      </node>
      <node id="50561">
        <label>AMReX_Extension.H</label>
        <link refid="AMReX__Extension_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
      </node>
      <node id="50555">
        <label>AMReX_GpuPrint.H</label>
        <link refid="AMReX__GpuPrint_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50551" relation="include">
        </childnode>
      </node>
      <node id="50540">
        <label>AMReX_Config.H</label>
      </node>
      <node id="50551">
        <label>cstdio</label>
      </node>
      <node id="50542">
        <label>AMReX_FPC.H</label>
        <link refid="AMReX__FPC_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50543" relation="include">
        </childnode>
      </node>
      <node id="50570">
        <label>vector</label>
      </node>
      <node id="50548">
        <label>utility</label>
      </node>
      <node id="50546">
        <label>array</label>
      </node>
      <node id="50550">
        <label>sstream</label>
      </node>
      <node id="50562">
        <label>AMReX_INT.H</label>
        <link refid="AMReX__INT_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50563" relation="include">
        </childnode>
      </node>
      <node id="50538">
        <label>/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp</label>
        <link refid="AMReX__VectorIO_8cpp"/>
        <childnode refid="50539" relation="include">
        </childnode>
      </node>
      <node id="50544">
        <label>iosfwd</label>
      </node>
      <node id="50568">
        <label>cstdlib</label>
      </node>
      <node id="50580">
        <label>AMReX_IntConv.H</label>
        <link refid="AMReX__IntConv_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50541" relation="include">
        </childnode>
        <childnode refid="50581" relation="include">
        </childnode>
        <childnode refid="50582" relation="include">
        </childnode>
        <childnode refid="50542" relation="include">
        </childnode>
        <childnode refid="50543" relation="include">
        </childnode>
      </node>
      <node id="50541">
        <label>iostream</label>
      </node>
      <node id="50545">
        <label>AMReX_Array.H</label>
        <link refid="AMReX__Array_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50546" relation="include">
        </childnode>
        <childnode refid="50547" relation="include">
        </childnode>
        <childnode refid="50548" relation="include">
        </childnode>
        <childnode refid="50549" relation="include">
        </childnode>
        <childnode refid="50541" relation="include">
        </childnode>
        <childnode refid="50550" relation="include">
        </childnode>
        <childnode refid="50551" relation="include">
        </childnode>
        <childnode refid="50552" relation="include">
        </childnode>
        <childnode refid="50553" relation="include">
        </childnode>
        <childnode refid="50554" relation="include">
        </childnode>
        <childnode refid="50571" relation="include">
        </childnode>
        <childnode refid="50573" relation="include">
        </childnode>
        <childnode refid="50574" relation="include">
        </childnode>
        <childnode refid="50564" relation="include">
        </childnode>
        <childnode refid="50575" relation="include">
        </childnode>
        <childnode refid="50576" relation="include">
        </childnode>
      </node>
      <node id="50539">
        <label>AMReX_VectorIO.H</label>
        <link refid="AMReX__VectorIO_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50541" relation="include">
        </childnode>
        <childnode refid="50542" relation="include">
        </childnode>
        <childnode refid="50543" relation="include">
        </childnode>
        <childnode refid="50580" relation="include">
        </childnode>
      </node>
      <node id="50543">
        <label>AMReX_FabConv.H</label>
        <link refid="AMReX__FabConv_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50544" relation="include">
        </childnode>
        <childnode refid="50545" relation="include">
        </childnode>
        <childnode refid="50579" relation="include">
        </childnode>
        <childnode refid="50573" relation="include">
        </childnode>
        <childnode refid="50564" relation="include">
        </childnode>
        <childnode refid="50562" relation="include">
        </childnode>
      </node>
      <node id="50566">
        <label>AMReX_Math.H</label>
        <link refid="AMReX__Math_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50554" relation="include">
        </childnode>
        <childnode refid="50561" relation="include">
        </childnode>
        <childnode refid="50567" relation="include">
        </childnode>
        <childnode refid="50568" relation="include">
        </childnode>
      </node>
      <node id="50559">
        <label>AMReX_Exception.H</label>
        <link refid="AMReX__Exception_8H"/>
        <childnode refid="50540" relation="include">
        </childnode>
        <childnode refid="50560" relation="include">
        </childnode>
      </node>
      <node id="50552">
        <label>type_traits</label>
      </node>
      <node id="50577">
        <label>algorithm</label>
      </node>
      <node id="50581">
        <label>cstring</label>
      </node>
      <node id="50547">
        <label>memory</label>
      </node>
      <node id="50563">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="AMReX__VectorIO_8H" kindref="compound">AMReX_VectorIO.H</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceamrex" kindref="compound">amrex</ref>;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a0718da697f64bda3be2152538b70d4c5" kindref="member">amrex::writeIntData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>data,<sp/>std::size_t<sp/><ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1a57949ca6008ad4fe7edb4e00741b1906" kindref="member">size</ref>,<sp/>std::ostream&amp;<sp/>os,</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref>&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/><ref refid="classamrex_1_1FPC_1a9cad45e259106beaa8e4dc56f613bd06" kindref="member">FPC::NativeIntDescriptor</ref>())</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.write((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>data,<sp/>size*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.numBytes()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeIntData&lt;std::int16_t,<sp/>int&gt;(data,<sp/><ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1a57949ca6008ad4fe7edb4e00741b1906" kindref="member">size</ref>,<sp/>os,<sp/>id);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.numBytes()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeIntData&lt;std::int32_t,<sp/>int&gt;(data,<sp/><ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1a57949ca6008ad4fe7edb4e00741b1906" kindref="member">size</ref>,<sp/>os,<sp/>id);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.numBytes()<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeIntData&lt;std::int64_t,<sp/>int&gt;(data,<sp/><ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1a57949ca6008ad4fe7edb4e00741b1906" kindref="member">size</ref>,<sp/>os,<sp/>id);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aaa5d048f7bf7386b6976b10001a5f8b4" kindref="member">amrex::Error</ref>(</highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>know<sp/>how<sp/>to<sp/>work<sp/>with<sp/>this<sp/>integer<sp/>type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1af8ec915a2cffc7c342e1f15e52cbd697" kindref="member">amrex::readIntData</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>data,<sp/>std::size_t<sp/>size,<sp/>std::istream&amp;<sp/>is,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref>&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/><ref refid="classamrex_1_1FPC_1a9cad45e259106beaa8e4dc56f613bd06" kindref="member">FPC::NativeIntDescriptor</ref>())<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is.read((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>data,<sp/>size<sp/>*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.numBytes());</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.numBytes()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readIntData&lt;int,<sp/>std::int16_t&gt;(data,<sp/><ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1a57949ca6008ad4fe7edb4e00741b1906" kindref="member">size</ref>,<sp/>is,<sp/>id);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.numBytes()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readIntData&lt;int,<sp/>std::int32_t&gt;(data,<sp/><ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1a57949ca6008ad4fe7edb4e00741b1906" kindref="member">size</ref>,<sp/>is,<sp/>id);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.numBytes()<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readIntData&lt;int,<sp/>std::int64_t&gt;(data,<sp/><ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1a57949ca6008ad4fe7edb4e00741b1906" kindref="member">size</ref>,<sp/>is,<sp/>id);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aaa5d048f7bf7386b6976b10001a5f8b4" kindref="member">amrex::Error</ref>(</highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>know<sp/>how<sp/>to<sp/>work<sp/>with<sp/>this<sp/>integer<sp/>type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a601aaf049a30edfae3541b7f8ae1e0fc" kindref="member">amrex::writeLongData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Long*<sp/>data,<sp/>std::size_t<sp/>size,<sp/>std::ostream&amp;<sp/>os,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref>&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/><ref refid="classamrex_1_1FPC_1a6f67a43bd516bcc9547cb3b76424b2b8" kindref="member">FPC::NativeLongDescriptor</ref>())</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.write((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>data,<sp/>size*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Long));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.numBytes()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeIntData&lt;std::int16_t,<sp/>Long&gt;(data,<sp/><ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1a57949ca6008ad4fe7edb4e00741b1906" kindref="member">size</ref>,<sp/>os,<sp/>id);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.numBytes()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeIntData&lt;std::int32_t,<sp/>Long&gt;(data,<sp/><ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1a57949ca6008ad4fe7edb4e00741b1906" kindref="member">size</ref>,<sp/>os,<sp/>id);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.numBytes()<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeIntData&lt;std::int64_t,<sp/>Long&gt;(data,<sp/><ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1a57949ca6008ad4fe7edb4e00741b1906" kindref="member">size</ref>,<sp/>os,<sp/>id);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aaa5d048f7bf7386b6976b10001a5f8b4" kindref="member">amrex::Error</ref>(</highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>know<sp/>how<sp/>to<sp/>work<sp/>with<sp/>this<sp/>long<sp/>type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aa5a1f4f1c5cbe7672f12c62b9db96746" kindref="member">amrex::readLongData</ref>(Long*<sp/>data,<sp/>std::size_t<sp/>size,<sp/>std::istream&amp;<sp/>is,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref>&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/><ref refid="classamrex_1_1FPC_1a6f67a43bd516bcc9547cb3b76424b2b8" kindref="member">FPC::NativeLongDescriptor</ref>())<sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is.read((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>data,<sp/>size<sp/>*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.numBytes());</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.numBytes()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readIntData&lt;Long,<sp/>std::int16_t&gt;(data,<sp/><ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1a57949ca6008ad4fe7edb4e00741b1906" kindref="member">size</ref>,<sp/>is,<sp/>id);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.numBytes()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readIntData&lt;Long,<sp/>std::int32_t&gt;(data,<sp/><ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1a57949ca6008ad4fe7edb4e00741b1906" kindref="member">size</ref>,<sp/>is,<sp/>id);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">.numBytes()<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>readIntData&lt;Long,<sp/>std::int64_t&gt;(data,<sp/><ref refid="namespaceamrex_1_1Gpu_1_1range__detail_1a57949ca6008ad4fe7edb4e00741b1906" kindref="member">size</ref>,<sp/>is,<sp/>id);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aaa5d048f7bf7386b6976b10001a5f8b4" kindref="member">amrex::Error</ref>(</highlight><highlight class="stringliteral">&quot;Don&apos;t<sp/>know<sp/>how<sp/>to<sp/>work<sp/>with<sp/>this<sp/>long<sp/>type.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1af9790d1f61a6d21ce4e9f92c58ac0600" kindref="member">amrex::writeRealData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Real*<sp/>data,<sp/>std::size_t<sp/>size,<sp/>std::ostream&amp;<sp/>os,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref>&amp;<sp/>rd)</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1RealDescriptor_1a91dde50b590073ce6c8154df86c9c281" kindref="member">RealDescriptor::convertFromNativeFormat</ref>(os,<sp/>static_cast&lt;Long&gt;(size),<sp/>data,<sp/>rd);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1aa6f624229959bee80f1444371bb5babc" kindref="member">amrex::readRealData</ref>(Real*<sp/>data,<sp/>std::size_t<sp/>size,<sp/>std::istream&amp;<sp/>is,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref>&amp;<sp/>rd)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1RealDescriptor_1a0f94f4f743da5876bbf8afa6ab1fd613" kindref="member">RealDescriptor::convertToNativeFormat</ref>(data,<sp/>static_cast&lt;Long&gt;(size),<sp/>is,<sp/>rd);</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a4f9c3dd444d301063e6190234413bda4" kindref="member">amrex::writeFloatData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>data,<sp/>std::size_t<sp/>size,<sp/>std::ostream&amp;<sp/>os,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref>&amp;<sp/>rd)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1RealDescriptor_1aa5b07184bf42f9d39fcaccf6e9ca0fc6" kindref="member">RealDescriptor::convertFromNativeFloatFormat</ref>(os,<sp/>static_cast&lt;Long&gt;(size),<sp/>data,<sp/>rd);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a4c085d3b27d107f62bdb36f5ecc0f326" kindref="member">amrex::readFloatData</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>data,<sp/>std::size_t<sp/>size,<sp/>std::istream&amp;<sp/>is,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref>&amp;<sp/>rd)</highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1RealDescriptor_1af34959841955d956473b14feca1209cb" kindref="member">RealDescriptor::convertToNativeFloatFormat</ref>(data,<sp/>static_cast&lt;Long&gt;(size),<sp/>is,<sp/>rd);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a9cb2d187853bfabaaf7d74de8c950c25" kindref="member">amrex::writeDoubleData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>data,<sp/>std::size_t<sp/>size,<sp/>std::ostream&amp;<sp/>os,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref>&amp;<sp/>rd)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1RealDescriptor_1a8d3e02daedf046920036514587034b2e" kindref="member">RealDescriptor::convertFromNativeDoubleFormat</ref>(os,<sp/>static_cast&lt;Long&gt;(size),<sp/>data,<sp/>rd);</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1ac590394599f7ea721cf8999331d0436e" kindref="member">amrex::readDoubleData</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>data,<sp/>std::size_t<sp/>size,<sp/>std::istream&amp;<sp/>is,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref>&amp;<sp/>rd)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1RealDescriptor_1aa83674a91e2dcc69c8fd93d4009b3276" kindref="member">RealDescriptor::convertToNativeDoubleFormat</ref>(data,<sp/>static_cast&lt;Long&gt;(size),<sp/>is,<sp/>rd);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_VectorIO.cpp"/>
  </compounddef>
</doxygen>
