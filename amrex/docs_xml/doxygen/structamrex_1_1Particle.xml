<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1Particle" kind="struct" language="C++" prot="public">
    <compoundname>amrex::Particle</compoundname>
    <basecompoundref refid="structamrex_1_1ParticleBase" prot="public" virt="non-virtual">amrex::ParticleBase&lt; ParticleReal, T_NReal, 0 &gt;</basecompoundref>
    <includes refid="AMReX__Particle_8H" local="no">AMReX_Particle.H</includes>
    <templateparamlist>
      <param>
        <type>int</type>
        <declname>T_NReal</declname>
        <defname>T_NReal</defname>
      </param>
      <param>
        <type>int</type>
        <declname>T_NInt</declname>
        <defname>T_NInt</defname>
        <defval>0</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structamrex_1_1Particle_1a60efba6078d3acb0c2911e1a91a67a7b" prot="public" static="no">
        <type><ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref></type>
        <definition>using amrex::Particle&lt; T_NReal, T_NInt &gt;::StorageParticleType =  Particle</definition>
        <argsstring></argsstring>
        <name>StorageParticleType</name>
        <qualifiedname>amrex::Particle::StorageParticleType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="404" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1Particle_1af636a99b3002811b638a300d34333028" prot="public" static="no">
        <type><ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref> const</type>
        <definition>using amrex::Particle&lt; T_NReal, T_NInt &gt;::ConstType =  Particle const</definition>
        <argsstring></argsstring>
        <name>ConstType</name>
        <qualifiedname>amrex::Particle::ConstType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="405" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" prot="public" static="no">
        <type>ParticleReal</type>
        <definition>using amrex::Particle&lt; T_NReal, T_NInt &gt;::RealType =  ParticleReal</definition>
        <argsstring></argsstring>
        <name>RealType</name>
        <qualifiedname>amrex::Particle::RealType</qualifiedname>
        <briefdescription>
<para>The floating point type used for the particles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="414" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1Particle_1a18f4133e3109299ffc775040d3638069" prot="public" static="no">
        <type>int</type>
        <definition>using amrex::Particle&lt; T_NReal, T_NInt &gt;::IntType =  int</definition>
        <argsstring></argsstring>
        <name>IntType</name>
        <qualifiedname>amrex::Particle::IntType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="415" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="415" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structamrex_1_1Particle_1a36d180f8a098909299fe912363cd096f" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool amrex::Particle&lt; T_NReal, T_NInt &gt;::is_soa_particle</definition>
        <argsstring></argsstring>
        <name>is_soa_particle</name>
        <qualifiedname>amrex::Particle::is_soa_particle</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="403" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Particle_1aae7d12b94a847462c64456654db316e7" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::Particle&lt; T_NReal, T_NInt &gt;::NReal</definition>
        <argsstring></argsstring>
        <name>NReal</name>
        <qualifiedname>amrex::Particle::NReal</qualifiedname>
        <initializer>= T_NReal</initializer>
        <briefdescription>
<para>number of extra Real components in the particle struct </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="408" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Particle_1ad437c33b5c87125048830cee2775b50c" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int amrex::Particle&lt; T_NReal, T_NInt &gt;::NInt</definition>
        <argsstring></argsstring>
        <name>NInt</name>
        <qualifiedname>amrex::Particle::NInt</qualifiedname>
        <initializer>= T_NInt</initializer>
        <briefdescription>
<para>number of extra integer components in the particle struct </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="411" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Particle_1a46b64285f66ebd66e86258462b440c51" prot="public" static="yes" mutable="no">
        <type>Long</type>
        <definition>Long amrex::Particle&lt; NReal, NInt &gt;::the_next_id</definition>
        <argsstring></argsstring>
        <name>the_next_id</name>
        <qualifiedname>amrex::Particle::the_next_id</qualifiedname>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="417" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="417" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1Particle_1a59d236e855037fa9f795dd2406c30578" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>__host__ __device__ <ref refid="structamrex_1_1ParticleCPUWrapper" kindref="compound">ParticleCPUWrapper</ref></type>
        <definition>__host__ __device__ ParticleCPUWrapper amrex::Particle&lt; T_NReal, T_NInt &gt;::cpu</definition>
        <argsstring>() &amp;</argsstring>
        <name>cpu</name>
        <qualifiedname>amrex::Particle::cpu</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="420" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="420" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1ac5c536e7e23d1e91ee80020c347bd63b" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>__host__ __device__ <ref refid="structamrex_1_1ParticleIDWrapper" kindref="compound">ParticleIDWrapper</ref></type>
        <definition>__host__ __device__ ParticleIDWrapper amrex::Particle&lt; T_NReal, T_NInt &gt;::id</definition>
        <argsstring>() &amp;</argsstring>
        <name>id</name>
        <qualifiedname>amrex::Particle::id</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="423" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="423" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a515b007072ba7e4ccae4aae3fe3bc040" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>__host__ __device__ <ref refid="structamrex_1_1ConstParticleCPUWrapper" kindref="compound">ConstParticleCPUWrapper</ref></type>
        <definition>__host__ __device__ ConstParticleCPUWrapper amrex::Particle&lt; T_NReal, T_NInt &gt;::cpu</definition>
        <argsstring>() const &amp;</argsstring>
        <name>cpu</name>
        <qualifiedname>amrex::Particle::cpu</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="426" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="426" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a0aa3ff4aeede46bbedd77cff51cd8873" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>__host__ __device__ <ref refid="structamrex_1_1ConstParticleIDWrapper" kindref="compound">ConstParticleIDWrapper</ref></type>
        <definition>__host__ __device__ ConstParticleIDWrapper amrex::Particle&lt; T_NReal, T_NInt &gt;::id</definition>
        <argsstring>() const &amp;</argsstring>
        <name>id</name>
        <qualifiedname>amrex::Particle::id</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="429" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="429" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a7654e6ef69fdfc5107a226d4c096a676" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::Particle&lt; T_NReal, T_NInt &gt;::atomicSetID</definition>
        <argsstring>(const Long id)</argsstring>
        <name>atomicSetID</name>
        <qualifiedname>amrex::Particle::atomicSetID</qualifiedname>
        <param>
          <type>const Long</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="432" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="432" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a09f26ac84d7de0ed6b48c661955e2e1f" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>__host__ __device__ uint64_t &amp;</type>
        <definition>__host__ __device__ uint64_t &amp; amrex::Particle&lt; T_NReal, T_NInt &gt;::idcpu</definition>
        <argsstring>() &amp;</argsstring>
        <name>idcpu</name>
        <qualifiedname>amrex::Particle::idcpu</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="446" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="446" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a0b97e171ff2ed427611d670bae122517" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>__host__ __device__ const uint64_t &amp;</type>
        <definition>__host__ __device__ const uint64_t &amp; amrex::Particle&lt; T_NReal, T_NInt &gt;::idcpu</definition>
        <argsstring>() const &amp;</argsstring>
        <name>idcpu</name>
        <qualifiedname>amrex::Particle::idcpu</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="449" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="449" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a15d57506e22cf26b4611743446e695e0" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>__host__ __device__ <ref refid="namespaceamrex_1a9a66cb310efdbc12b9b4d5f170470726" kindref="member">RealVect</ref></type>
        <definition>__host__ __device__ RealVect amrex::Particle&lt; T_NReal, T_NInt &gt;::pos</definition>
        <argsstring>() const &amp;</argsstring>
        <name>pos</name>
        <qualifiedname>amrex::Particle::pos</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="452" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="452" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1acfb456fb0839783f918b4063a65bf757" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>__host__ __device__ <ref refid="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" kindref="member">RealType</ref> &amp;</type>
        <definition>__host__ __device__ RealType &amp; amrex::Particle&lt; T_NReal, T_NInt &gt;::pos</definition>
        <argsstring>(int index) &amp;</argsstring>
        <name>pos</name>
        <qualifiedname>amrex::Particle::pos</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="455" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="455" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1af556da3099397049cdf596d091193c94" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>__host__ __device__ <ref refid="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" kindref="member">RealType</ref></type>
        <definition>__host__ __device__ RealType amrex::Particle&lt; T_NReal, T_NInt &gt;::pos</definition>
        <argsstring>(int index) const &amp;</argsstring>
        <name>pos</name>
        <qualifiedname>amrex::Particle::pos</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="462" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="462" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1ac76245538f27b71c6261b64aa8606126" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NReal</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; U !=0, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" kindref="member">RealType</ref> &amp;</type>
        <definition>__host__ __device__ RealType &amp; amrex::Particle&lt; T_NReal, T_NInt &gt;::rdata</definition>
        <argsstring>(int index) &amp;</argsstring>
        <name>rdata</name>
        <qualifiedname>amrex::Particle::rdata</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="470" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="470" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a869755cdfbe407491909f3695cfa567f" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NReal</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; U==0, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" kindref="member">RealType</ref> &amp;</type>
        <definition>__host__ __device__ RealType &amp; amrex::Particle&lt; T_NReal, T_NInt &gt;::rdata</definition>
        <argsstring>(int) &amp;</argsstring>
        <name>rdata</name>
        <qualifiedname>amrex::Particle::rdata</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="478" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="478" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1acd2a7c92aa8aeef0fb6dee5812cb2b91" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NReal</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; U !=0, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ const <ref refid="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" kindref="member">RealType</ref> &amp;</type>
        <definition>__host__ __device__ const RealType &amp; amrex::Particle&lt; T_NReal, T_NInt &gt;::rdata</definition>
        <argsstring>(int index) const &amp;</argsstring>
        <name>rdata</name>
        <qualifiedname>amrex::Particle::rdata</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="486" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="486" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a1bff6d8f236d221022e7c9a9d2c2cdba" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NReal</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; U==0, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" kindref="member">RealType</ref></type>
        <definition>__host__ __device__ RealType amrex::Particle&lt; T_NReal, T_NInt &gt;::rdata</definition>
        <argsstring>(int) const &amp;</argsstring>
        <name>rdata</name>
        <qualifiedname>amrex::Particle::rdata</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="494" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="494" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a2e552aa74e575ce5c3424a94fdb80870" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type>__host__ __device__ <ref refid="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" kindref="member">RealType</ref></type>
        <definition>__host__ __device__ RealType amrex::Particle&lt; T_NReal, T_NInt &gt;::rdata</definition>
        <argsstring>(int) &amp;&amp;=delete</argsstring>
        <name>rdata</name>
        <qualifiedname>amrex::Particle::rdata</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="501" column="14"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1ab413718c26a241a929f83b7692afbcdf" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NReal</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; U !=0, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="namespaceamrex_1a9a66cb310efdbc12b9b4d5f170470726" kindref="member">RealVect</ref></type>
        <definition>__host__ __device__ RealVect amrex::Particle&lt; T_NReal, T_NInt &gt;::rvec</definition>
        <argsstring>(int indx, int indy, int indz) const &amp;</argsstring>
        <name>rvec</name>
        <qualifiedname>amrex::Particle::rvec</qualifiedname>
        <param>
          <type>int</type>
          <declname>indx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="505" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="505" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1adcaeb24697c9d1289e9db32c9c77f54e" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NReal</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; U==0, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="namespaceamrex_1a9a66cb310efdbc12b9b4d5f170470726" kindref="member">RealVect</ref></type>
        <definition>__host__ __device__ RealVect amrex::Particle&lt; T_NReal, T_NInt &gt;::rvec</definition>
        <argsstring>(int, int, int) const &amp;</argsstring>
        <name>rvec</name>
        <qualifiedname>amrex::Particle::rvec</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="515" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="515" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a5fa0ac5c446d7f011bd348a9196dd78c" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NReal</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; U !=0, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="namespaceamrex_1a9a66cb310efdbc12b9b4d5f170470726" kindref="member">RealVect</ref></type>
        <definition>__host__ __device__ RealVect amrex::Particle&lt; T_NReal, T_NInt &gt;::rvec</definition>
        <argsstring>(const IntVect &amp;indices) const &amp;</argsstring>
        <name>rvec</name>
        <qualifiedname>amrex::Particle::rvec</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="523" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="523" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a5dc7e26de27a5d4e8d000102803a2367" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NReal</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; U==0, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="namespaceamrex_1a9a66cb310efdbc12b9b4d5f170470726" kindref="member">RealVect</ref></type>
        <definition>__host__ __device__ RealVect amrex::Particle&lt; T_NReal, T_NInt &gt;::rvec</definition>
        <argsstring>(const IntVect &amp;) const &amp;</argsstring>
        <name>rvec</name>
        <qualifiedname>amrex::Particle::rvec</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="533" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="533" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a212e1b228fa4c411064d4037c9728fc5" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NInt</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; U !=0, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ int &amp;</type>
        <definition>__host__ __device__ int &amp; amrex::Particle&lt; T_NReal, T_NInt &gt;::idata</definition>
        <argsstring>(int index) &amp;</argsstring>
        <name>idata</name>
        <qualifiedname>amrex::Particle::idata</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="541" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="541" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a0de620fb611f025b3d16a07ad371d554" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NInt</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; U==0, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ uint64_t &amp;</type>
        <definition>__host__ __device__ uint64_t &amp; amrex::Particle&lt; T_NReal, T_NInt &gt;::idata</definition>
        <argsstring>(int) &amp;</argsstring>
        <name>idata</name>
        <qualifiedname>amrex::Particle::idata</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="549" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="549" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1af246bb0fc1ebe3ca45511a4ff109b29c" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NInt</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; U !=0, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ const int &amp;</type>
        <definition>__host__ __device__ const int &amp; amrex::Particle&lt; T_NReal, T_NInt &gt;::idata</definition>
        <argsstring>(int index) const &amp;</argsstring>
        <name>idata</name>
        <qualifiedname>amrex::Particle::idata</qualifiedname>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="557" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="557" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a910bf7b75b475cd45d79720993cb52bc" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NInt</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; U==0, int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__host__ __device__ int</type>
        <definition>__host__ __device__ int amrex::Particle&lt; T_NReal, T_NInt &gt;::idata</definition>
        <argsstring>(int) const &amp;</argsstring>
        <name>idata</name>
        <qualifiedname>amrex::Particle::idata</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="565" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="565" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a7454f70d35743e376ac5316eba117f4d" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type>__host__ __device__ <ref refid="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" kindref="member">RealType</ref></type>
        <definition>__host__ __device__ RealType amrex::Particle&lt; T_NReal, T_NInt &gt;::idata</definition>
        <argsstring>(int) &amp;&amp;=delete</argsstring>
        <name>idata</name>
        <qualifiedname>amrex::Particle::idata</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="572" column="14"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1Particle_1a2fcbaec8aac910c864f4a210d48d9c93" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::Particle&lt; NReal, NInt &gt;::NextID</definition>
        <argsstring>()</argsstring>
        <name>NextID</name>
        <qualifiedname>amrex::Particle::NextID</qualifiedname>
        <briefdescription>
<para>Returns the next particle ID for this processor. <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref> IDs start at 1 and are never reused. The pair, consisting of the ID and the CPU on which the particle is &quot;born&quot;, is a globally unique identifier for a particle. The maximum of this value across all processors must be checkpointed and then restored on restart so that we don&apos;t reuse particle IDs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="582" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="601" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a90b34785c758b4423ca560d3796fcd7a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::Particle&lt; NReal, NInt &gt;::UnprotectedNextID</definition>
        <argsstring>()</argsstring>
        <name>UnprotectedNextID</name>
        <qualifiedname>amrex::Particle::UnprotectedNextID</qualifiedname>
        <briefdescription>
<para>This version can only be used inside omp critical. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="587" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="622" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1acfec109fc6821c1e45db900b4adc6779" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Particle&lt; NReal, NInt &gt;::NextID</definition>
        <argsstring>(Long nextid)</argsstring>
        <name>NextID</name>
        <qualifiedname>amrex::Particle::NextID</qualifiedname>
        <param>
          <type>Long</type>
          <declname>nextid</declname>
        </param>
        <briefdescription>
<para>Reset on restart. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nextid</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="594" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="633" bodyend="636"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>The struct used to store particles. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_NReal</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of extra Real components </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_NInt</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of extra integer components </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::Particle&lt; T_NReal, T_NInt &gt;</label>
        <link refid="structamrex_1_1Particle"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::ParticleBase&lt; T, NReal, NInt &gt;</label>
        <link refid="structamrex_1_1ParticleBase"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>T</label>
      </node>
      <node id="1">
        <label>amrex::Particle&lt; T_NReal, T_NInt &gt;</label>
        <link refid="structamrex_1_1Particle"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::ParticleBase&lt; T, NReal, NInt &gt;</label>
        <link refid="structamrex_1_1ParticleBase"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_pos</edgelabel>
          <edgelabel>m_rdata</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="400" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="402" bodyend="595"/>
    <listofallmembers>
      <member refid="structamrex_1_1Particle_1a7654e6ef69fdfc5107a226d4c096a676" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>atomicSetID</name></member>
      <member refid="structamrex_1_1Particle_1af636a99b3002811b638a300d34333028" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>ConstType</name></member>
      <member refid="structamrex_1_1Particle_1a59d236e855037fa9f795dd2406c30578" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>cpu</name></member>
      <member refid="structamrex_1_1Particle_1a515b007072ba7e4ccae4aae3fe3bc040" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>cpu</name></member>
      <member refid="structamrex_1_1Particle_1ac5c536e7e23d1e91ee80020c347bd63b" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>id</name></member>
      <member refid="structamrex_1_1Particle_1a0aa3ff4aeede46bbedd77cff51cd8873" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>id</name></member>
      <member refid="structamrex_1_1Particle_1a212e1b228fa4c411064d4037c9728fc5" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>idata</name></member>
      <member refid="structamrex_1_1Particle_1a0de620fb611f025b3d16a07ad371d554" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>idata</name></member>
      <member refid="structamrex_1_1Particle_1af246bb0fc1ebe3ca45511a4ff109b29c" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>idata</name></member>
      <member refid="structamrex_1_1Particle_1a910bf7b75b475cd45d79720993cb52bc" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>idata</name></member>
      <member refid="structamrex_1_1Particle_1a7454f70d35743e376ac5316eba117f4d" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>idata</name></member>
      <member refid="structamrex_1_1Particle_1a09f26ac84d7de0ed6b48c661955e2e1f" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>idcpu</name></member>
      <member refid="structamrex_1_1Particle_1a0b97e171ff2ed427611d670bae122517" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>idcpu</name></member>
      <member refid="structamrex_1_1Particle_1a18f4133e3109299ffc775040d3638069" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>IntType</name></member>
      <member refid="structamrex_1_1Particle_1a36d180f8a098909299fe912363cd096f" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>is_soa_particle</name></member>
      <member refid="structamrex_1_1ParticleBase_1a5f5d3842528f32c5c7551b84d0b14374" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>m_idata</name></member>
      <member refid="structamrex_1_1ParticleBase_1a4b5338d7a319166690ec546dd547869e" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>m_idcpu</name></member>
      <member refid="structamrex_1_1ParticleBase_1a830dfecebfa4e8d239a0daf64a51ef78" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>m_pos</name></member>
      <member refid="structamrex_1_1ParticleBase_1a366f10b761dd77036582e32b7bdb2c77" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>m_rdata</name></member>
      <member refid="structamrex_1_1Particle_1a2fcbaec8aac910c864f4a210d48d9c93" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>NextID</name></member>
      <member refid="structamrex_1_1Particle_1acfec109fc6821c1e45db900b4adc6779" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>NextID</name></member>
      <member refid="structamrex_1_1Particle_1ad437c33b5c87125048830cee2775b50c" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>NInt</name></member>
      <member refid="structamrex_1_1Particle_1aae7d12b94a847462c64456654db316e7" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>NReal</name></member>
      <member refid="structamrex_1_1Particle_1a15d57506e22cf26b4611743446e695e0" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>pos</name></member>
      <member refid="structamrex_1_1Particle_1acfb456fb0839783f918b4063a65bf757" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>pos</name></member>
      <member refid="structamrex_1_1Particle_1af556da3099397049cdf596d091193c94" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>pos</name></member>
      <member refid="structamrex_1_1Particle_1ac76245538f27b71c6261b64aa8606126" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rdata</name></member>
      <member refid="structamrex_1_1Particle_1a869755cdfbe407491909f3695cfa567f" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rdata</name></member>
      <member refid="structamrex_1_1Particle_1acd2a7c92aa8aeef0fb6dee5812cb2b91" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rdata</name></member>
      <member refid="structamrex_1_1Particle_1a1bff6d8f236d221022e7c9a9d2c2cdba" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rdata</name></member>
      <member refid="structamrex_1_1Particle_1a2e552aa74e575ce5c3424a94fdb80870" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rdata</name></member>
      <member refid="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>RealType</name></member>
      <member refid="structamrex_1_1Particle_1ab413718c26a241a929f83b7692afbcdf" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rvec</name></member>
      <member refid="structamrex_1_1Particle_1adcaeb24697c9d1289e9db32c9c77f54e" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rvec</name></member>
      <member refid="structamrex_1_1Particle_1a5fa0ac5c446d7f011bd348a9196dd78c" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rvec</name></member>
      <member refid="structamrex_1_1Particle_1a5dc7e26de27a5d4e8d000102803a2367" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rvec</name></member>
      <member refid="structamrex_1_1Particle_1a60efba6078d3acb0c2911e1a91a67a7b" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>StorageParticleType</name></member>
      <member refid="structamrex_1_1Particle_1a46b64285f66ebd66e86258462b440c51" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>the_next_id</name></member>
      <member refid="structamrex_1_1Particle_1a90b34785c758b4423ca560d3796fcd7a" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>UnprotectedNextID</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
