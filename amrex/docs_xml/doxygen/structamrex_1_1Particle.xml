<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="structamrex_1_1Particle" kind="struct" language="C++" prot="public">
    <compoundname>amrex::Particle</compoundname>
    <includes refid="AMReX__Particle_8H" local="no">AMReX_Particle.H</includes>
    <innerclass refid="unionamrex_1_1Particle_1_1im__t" prot="public">amrex::Particle::im_t</innerclass>
    <innerclass refid="unionamrex_1_1Particle_1_1rm__t" prot="public">amrex::Particle::rm_t</innerclass>
    <templateparamlist>
      <param>
        <type>int</type>
        <declname>NReal</declname>
        <defname>NReal</defname>
      </param>
      <param>
        <type>int</type>
        <declname>NInt</declname>
        <defname>NInt</defname>
        <defval>0</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structamrex_1_1Particle_1a57e2e923cf77341e715f8cf41b15fcac" prot="public" static="no">
        <type>double</type>
        <definition>typedef double amrex::Particle&lt; NReal, NInt &gt;::RealType</definition>
        <argsstring></argsstring>
        <name>RealType</name>
        <briefdescription>
<para>The floating point type used for the particles. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="33" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1Particle_1a83a0b10e55acc252c8fa642aa4c240ba" prot="public" static="no" mutable="no">
        <type><ref refid="unionamrex_1_1Particle_1_1rm__t" kindref="compound">rm_t</ref></type>
        <definition>rm_t amrex::Particle&lt; NReal, NInt &gt;::m_rdata</definition>
        <argsstring></argsstring>
        <name>m_rdata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="56" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Particle_1aac22bc4db0fe2a8316c05447255c7329" prot="public" static="no" mutable="no">
        <type><ref refid="unionamrex_1_1Particle_1_1im__t" kindref="compound">im_t</ref></type>
        <definition>im_t amrex::Particle&lt; NReal, NInt &gt;::m_idata</definition>
        <argsstring></argsstring>
        <name>m_idata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="57" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structamrex_1_1Particle_1ae909feb048707e5f29a42c253dc32f21" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::Particle&lt; NReal, NInt &gt;::the_next_id</definition>
        <argsstring></argsstring>
        <name>the_next_id</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="59" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1Particle_1ae812a19384a39a315a1f241f934855fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE int&amp; amrex::Particle&lt; NReal, NInt &gt;::id</definition>
        <argsstring>()&amp;</argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="61" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a3bce26c8a6245bbf4cd9438bcee681e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Particle&lt; NReal, NInt &gt;::id</definition>
        <argsstring>() const &amp;</argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="62" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a0d22671c3a926cc8eae70a386d0f8019" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE int&amp; amrex::Particle&lt; NReal, NInt &gt;::cpu</definition>
        <argsstring>()&amp;</argsstring>
        <name>cpu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="63" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1aa96d91cb099ee0ffdfd8a4551c348e32" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Particle&lt; NReal, NInt &gt;::cpu</definition>
        <argsstring>() const &amp;</argsstring>
        <name>cpu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="64" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a248ad4f26b1a8ce67a032a7697b75e6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="structamrex_1_1Particle_1a57e2e923cf77341e715f8cf41b15fcac" kindref="member">RealType</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE RealType&amp; amrex::Particle&lt; NReal, NInt &gt;::pos</definition>
        <argsstring>(int index)&amp;</argsstring>
        <name>pos</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="66" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1add5fb9dcdce32134be68b0d57392b2d8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="structamrex_1_1Particle_1a57e2e923cf77341e715f8cf41b15fcac" kindref="member">RealType</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealType amrex::Particle&lt; NReal, NInt &gt;::pos</definition>
        <argsstring>(int index) const &amp;</argsstring>
        <name>pos</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="67" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a64b72580a1ef8c39822e731181e1c913" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="structamrex_1_1Particle_1a57e2e923cf77341e715f8cf41b15fcac" kindref="member">RealType</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE RealType&amp; amrex::Particle&lt; NReal, NInt &gt;::rdata</definition>
        <argsstring>(int index)&amp;</argsstring>
        <name>rdata</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="69" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a4230e74dede00461e09091236c29c47f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="structamrex_1_1Particle_1a57e2e923cf77341e715f8cf41b15fcac" kindref="member">RealType</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE RealType amrex::Particle&lt; NReal, NInt &gt;::rdata</definition>
        <argsstring>(int index) const &amp;</argsstring>
        <name>rdata</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="70" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a2ea331478f44220b7b07882fdda9a6ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE int&amp; amrex::Particle&lt; NReal, NInt &gt;::idata</definition>
        <argsstring>(int index)&amp;</argsstring>
        <name>idata</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="72" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1ade6594e266ec10cb641e83cce81a6293" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> int</type>
        <definition>AMREX_GPU_HOST_DEVICE int amrex::Particle&lt; NReal, NInt &gt;::idata</definition>
        <argsstring>(int index) const &amp;</argsstring>
        <name>idata</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="73" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="73" bodyend="73"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1Particle_1a978fa793824d54757dac33400fb43e87" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::Particle&lt; NReal, NInt &gt;::InterpDoit</definition>
        <argsstring>(const FArrayBox &amp;fab, const Real *fracs, const IntVect *cells, int comp)</argsstring>
        <name>InterpDoit</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>fracs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> *</type>
          <declname>cells</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="75" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="575" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a9f0503bbdca2d87308b8eb9a5d002ca3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::Particle&lt; NReal, NInt &gt;::InterpDoit</definition>
        <argsstring>(const FArrayBox &amp;fab, const IntVect &amp;hi, const Real *frac, int comp)</argsstring>
        <name>InterpDoit</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>hi</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>frac</declname>
        </param>
        <param>
          <type>int</type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="77" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="554" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a40e74ab5b2a9313b1ec1b2f30230f879" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Particle&lt; NReal, NInt &gt;::Interp</definition>
        <argsstring>(const Particle&lt; NReal, NInt &gt; &amp;prt, const Geometry &amp;geom, const FArrayBox &amp;fab, const int *idx, Real *val, int cnt)</argsstring>
        <name>Interp</name>
        <param>
          <type>const <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; NReal, NInt &gt; &amp;</type>
          <declname>prt</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fab</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="79" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="595" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1abe858dc473078ebe14aaad1231e671a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; amrex::Particle&lt; NReal, NInt &gt;::Version</definition>
        <argsstring>()</argsstring>
        <name>Version</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="81" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="500" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1afe760b4bd9a5592257a33394fe9f3fa2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; amrex::Particle&lt; NReal, NInt &gt;::DataPrefix</definition>
        <argsstring>()</argsstring>
        <name>DataPrefix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="83" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="488" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a92d50a0cfc06c857c16d7d072bf77e95" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Particle&lt; NReal, NInt &gt;::GetGravity</definition>
        <argsstring>(const FArrayBox &amp;gfab, const Geometry &amp;geom, const Particle&lt; NReal, NInt &gt; &amp;p, Real *grav)</argsstring>
        <name>GetGravity</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>gfab</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; NReal, NInt &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>grav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="85" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="627" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1aad16dc8f295a9f057509d7c72b5e33c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::Particle&lt; NReal, NInt &gt;::MaxReaders</definition>
        <argsstring>()</argsstring>
        <name>MaxReaders</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="87" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="427" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1ac4dced848c643cb539768dc506a80e8b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::Particle&lt; NReal, NInt &gt;::MaxParticlesPerRead</definition>
        <argsstring>()</argsstring>
        <name>MaxParticlesPerRead</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="89" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="456" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a3a8d988966904ac3cfc8be4c71b950af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::Particle&lt; NReal, NInt &gt;::NextID</definition>
        <argsstring>()</argsstring>
        <name>NextID</name>
        <briefdescription>
<para>Returns the next particle ID for this processor. <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref> IDs start at 1 and are never reused. The pair, consisting of the ID and the CPU on which the particle is &quot;born&quot;, is a globally unique identifier for a particle. The maximum of this value across all processors must be checkpointed and then restored on restart so that we don&apos;t reuse particle IDs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="100" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="517" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a008787d04da5113188a90a704f8f066a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::Particle&lt; NReal, NInt &gt;::UnprotectedNextID</definition>
        <argsstring>()</argsstring>
        <name>UnprotectedNextID</name>
        <briefdescription>
<para>This version can only be used inside omp critical. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="106" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="537" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a4b87ccd982d25100ecae8f60f8f290f8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Particle&lt; NReal, NInt &gt;::NextID</definition>
        <argsstring>(int nextid)</argsstring>
        <name>NextID</name>
        <param>
          <type>int</type>
          <declname>nextid</declname>
        </param>
        <briefdescription>
<para>Reset on restart. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nextid</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="114" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="547" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a85c36134c6d1455fd5d4c2ff8be5c696" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Particle&lt; NReal, NInt &gt;::CIC_Fracs</definition>
        <argsstring>(const Real *frac, Real *fracs)</argsstring>
        <name>CIC_Fracs</name>
        <param>
          <type>const Real *</type>
          <declname>frac</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>fracs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="116" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="174" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1aa60b356e158e411342c612691f687692" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Particle&lt; NReal, NInt &gt;::CIC_Cells</definition>
        <argsstring>(const IntVect &amp;hicell, IntVect *cells)</argsstring>
        <name>CIC_Cells</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>hicell</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> *</type>
          <declname>cells</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&quot;cells&quot; should be dimensioned: <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> cells[AMREX_D_TERM(2,+2,+4)] </para>        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="118" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="234" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1ac9042a452011340705ddd5e55c986cc6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Particle&lt; NReal, NInt &gt;::CIC_Cells_Fracs_Basic</definition>
        <argsstring>(const Particle&lt; NReal, NInt &gt; &amp;p, const Real *plo, const Real *dx, Real *fracs, IntVect *cells)</argsstring>
        <name>CIC_Cells_Fracs_Basic</name>
        <param>
          <type>const <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; NReal, NInt &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>plo</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real *</type>
          <declname>fracs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> *</type>
          <declname>cells</declname>
        </param>
        <briefdescription>
<para>Old, *-based CIC for use in Interp. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fracs</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cells</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="130" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="317" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a7b8ffd010e11d3cc3920c4ea19dd7a0a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::Particle&lt; NReal, NInt &gt;::CIC_Cells_Fracs</definition>
        <argsstring>(const Particle&lt; NReal, NInt &gt; &amp;p, const Real *plo, const Real *dx, Vector&lt; Real &gt; &amp;fracs, Vector&lt; IntVect &gt; &amp;cells)</argsstring>
        <name>CIC_Cells_Fracs</name>
        <param>
          <type>const <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; NReal, NInt &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>plo</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>fracs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>cells</declname>
        </param>
        <briefdescription>
<para>Wraps the arbitrary dx function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fracs</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cells</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="146" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="306" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a45ed240539a5cfa83c7142a882ebb3f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::Particle&lt; NReal, NInt &gt;::CIC_Cells_Fracs</definition>
        <argsstring>(const Particle&lt; NReal, NInt &gt; &amp;p, const Real *plo, const Real *dx_geom, const Real *dx_part, Vector&lt; Real &gt; &amp;fracs, Vector&lt; IntVect &gt; &amp;cells)</argsstring>
        <name>CIC_Cells_Fracs</name>
        <param>
          <type>const <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref>&lt; NReal, NInt &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>plo</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx_geom</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx_part</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>fracs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>cells</declname>
        </param>
        <briefdescription>
<para>Does CIC computations for arbitrary particle/grid dx&apos;s. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plo</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx_geom</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dx_part</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fracs</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cells</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
<para>This portion might be slightly inefficient. Feel free to redo it if need be. </para>        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="162" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="343" bodyend="423"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The struct used to store particles. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="5620">
        <label>amrex::Particle&lt; NReal, NInt &gt;::rm_t</label>
        <link refid="unionamrex_1_1Particle_1_1rm__t"/>
      </node>
      <node id="5619">
        <label>amrex::Particle&lt; NReal, NInt &gt;::im_t</label>
        <link refid="unionamrex_1_1Particle_1_1im__t"/>
      </node>
      <node id="5618">
        <label>amrex::Particle&lt; NReal, NInt &gt;</label>
        <link refid="structamrex_1_1Particle"/>
        <childnode refid="5619" relation="usage">
          <edgelabel>m_idata</edgelabel>
        </childnode>
        <childnode refid="5620" relation="usage">
          <edgelabel>m_rdata</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" line="27" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Particle/AMReX_Particle.H" bodystart="26" bodyend="168"/>
    <listofallmembers>
      <member refid="structamrex_1_1Particle_1aa60b356e158e411342c612691f687692" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>CIC_Cells</name></member>
      <member refid="structamrex_1_1Particle_1a7b8ffd010e11d3cc3920c4ea19dd7a0a" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>CIC_Cells_Fracs</name></member>
      <member refid="structamrex_1_1Particle_1a45ed240539a5cfa83c7142a882ebb3f9" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>CIC_Cells_Fracs</name></member>
      <member refid="structamrex_1_1Particle_1ac9042a452011340705ddd5e55c986cc6" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>CIC_Cells_Fracs_Basic</name></member>
      <member refid="structamrex_1_1Particle_1a85c36134c6d1455fd5d4c2ff8be5c696" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>CIC_Fracs</name></member>
      <member refid="structamrex_1_1Particle_1a0d22671c3a926cc8eae70a386d0f8019" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>cpu</name></member>
      <member refid="structamrex_1_1Particle_1aa96d91cb099ee0ffdfd8a4551c348e32" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>cpu</name></member>
      <member refid="structamrex_1_1Particle_1afe760b4bd9a5592257a33394fe9f3fa2" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>DataPrefix</name></member>
      <member refid="structamrex_1_1Particle_1a92d50a0cfc06c857c16d7d072bf77e95" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>GetGravity</name></member>
      <member refid="structamrex_1_1Particle_1ae812a19384a39a315a1f241f934855fb" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>id</name></member>
      <member refid="structamrex_1_1Particle_1a3bce26c8a6245bbf4cd9438bcee681e5" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>id</name></member>
      <member refid="structamrex_1_1Particle_1a2ea331478f44220b7b07882fdda9a6ff" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>idata</name></member>
      <member refid="structamrex_1_1Particle_1ade6594e266ec10cb641e83cce81a6293" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>idata</name></member>
      <member refid="structamrex_1_1Particle_1a40e74ab5b2a9313b1ec1b2f30230f879" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>Interp</name></member>
      <member refid="structamrex_1_1Particle_1a978fa793824d54757dac33400fb43e87" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>InterpDoit</name></member>
      <member refid="structamrex_1_1Particle_1a9f0503bbdca2d87308b8eb9a5d002ca3" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>InterpDoit</name></member>
      <member refid="structamrex_1_1Particle_1aac22bc4db0fe2a8316c05447255c7329" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>m_idata</name></member>
      <member refid="structamrex_1_1Particle_1a83a0b10e55acc252c8fa642aa4c240ba" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>m_rdata</name></member>
      <member refid="structamrex_1_1Particle_1ac4dced848c643cb539768dc506a80e8b" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>MaxParticlesPerRead</name></member>
      <member refid="structamrex_1_1Particle_1aad16dc8f295a9f057509d7c72b5e33c0" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>MaxReaders</name></member>
      <member refid="structamrex_1_1Particle_1a3a8d988966904ac3cfc8be4c71b950af" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>NextID</name></member>
      <member refid="structamrex_1_1Particle_1a4b87ccd982d25100ecae8f60f8f290f8" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>NextID</name></member>
      <member refid="structamrex_1_1Particle_1a248ad4f26b1a8ce67a032a7697b75e6a" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>pos</name></member>
      <member refid="structamrex_1_1Particle_1add5fb9dcdce32134be68b0d57392b2d8" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>pos</name></member>
      <member refid="structamrex_1_1Particle_1a64b72580a1ef8c39822e731181e1c913" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rdata</name></member>
      <member refid="structamrex_1_1Particle_1a4230e74dede00461e09091236c29c47f" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rdata</name></member>
      <member refid="structamrex_1_1Particle_1a57e2e923cf77341e715f8cf41b15fcac" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>RealType</name></member>
      <member refid="structamrex_1_1Particle_1ae909feb048707e5f29a42c253dc32f21" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>the_next_id</name></member>
      <member refid="structamrex_1_1Particle_1a008787d04da5113188a90a704f8f066a" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>UnprotectedNextID</name></member>
      <member refid="structamrex_1_1Particle_1abe858dc473078ebe14aaad1231e671a2" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>Version</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
