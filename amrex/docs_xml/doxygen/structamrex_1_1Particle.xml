<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structamrex_1_1Particle" kind="struct" language="C++" prot="public">
    <compoundname>amrex::Particle</compoundname>
    <basecompoundref refid="structamrex_1_1ParticleBase" prot="public" virt="non-virtual">amrex::ParticleBase&lt; ParticleReal, T_NReal, 0 &gt;</basecompoundref>
    <includes refid="AMReX__Particle_8H" local="no">AMReX_Particle.H</includes>
    <templateparamlist>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>T_NReal</declname>
        <defname>T_NReal</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>T_NInt</declname>
        <defname>T_NInt</defname>
        <defval>0</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" prot="public" static="no">
        <type>ParticleReal</type>
        <definition>using amrex::Particle&lt; T_NReal, T_NInt &gt;::RealType =  ParticleReal</definition>
        <argsstring></argsstring>
        <name>RealType</name>
        <briefdescription>
<para>The floating point type used for the particles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="207" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="207" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structamrex_1_1Particle_1aae7d12b94a847462c64456654db316e7" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::Particle&lt; T_NReal, T_NInt &gt;::NReal</definition>
        <argsstring></argsstring>
        <name>NReal</name>
        <initializer>= T_NReal</initializer>
        <briefdescription>
<para>number of extra Real components in the particle struct </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="201" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Particle_1ad437c33b5c87125048830cee2775b50c" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::Particle&lt; T_NReal, T_NInt &gt;::NInt</definition>
        <argsstring></argsstring>
        <name>NInt</name>
        <initializer>= T_NInt</initializer>
        <briefdescription>
<para>number of extra integer components in the particle struct </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="204" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1Particle_1a46b64285f66ebd66e86258462b440c51" prot="public" static="yes" mutable="no">
        <type>Long</type>
        <definition>Long amrex::Particle&lt; NReal, NInt &gt;::the_next_id</definition>
        <argsstring></argsstring>
        <name>the_next_id</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="209" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="209" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1Particle_1ae42faee1dffc3e271f04bebfd70235ce" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1ParticleCPUWrapper" kindref="compound">ParticleCPUWrapper</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE ParticleCPUWrapper amrex::Particle&lt; T_NReal, T_NInt &gt;::cpu</definition>
        <argsstring>() &amp;</argsstring>
        <name>cpu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="212" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="212" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a1b1f1b307acf1e1762ee8aa31a1a6938" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1ParticleIDWrapper" kindref="compound">ParticleIDWrapper</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE ParticleIDWrapper amrex::Particle&lt; T_NReal, T_NInt &gt;::id</definition>
        <argsstring>() &amp;</argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="215" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="215" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1ab0e3d47b1fe618f1438aaa2167875b9b" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1ConstParticleCPUWrapper" kindref="compound">ConstParticleCPUWrapper</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE ConstParticleCPUWrapper amrex::Particle&lt; T_NReal, T_NInt &gt;::cpu</definition>
        <argsstring>() const &amp;</argsstring>
        <name>cpu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="218" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="218" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a6e26882024ecf05f93701fac523ff9db" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1ConstParticleIDWrapper" kindref="compound">ConstParticleIDWrapper</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE ConstParticleIDWrapper amrex::Particle&lt; T_NReal, T_NInt &gt;::id</definition>
        <argsstring>() const &amp;</argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="221" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="221" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a6974466bbe1639c042ea8079b1ee163c" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE RealVect amrex::Particle&lt; T_NReal, T_NInt &gt;::pos</definition>
        <argsstring>() const &amp;</argsstring>
        <name>pos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="224" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="224" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1ac2b984a4de5d43ab39afba8bac4dc2a3" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" kindref="member">RealType</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE RealType&amp; amrex::Particle&lt; T_NReal, T_NInt &gt;::pos</definition>
        <argsstring>(int index) &amp;</argsstring>
        <name>pos</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="227" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="227" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a102ae1d7ef52914d8c93baa331169016" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" kindref="member">RealType</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE RealType amrex::Particle&lt; T_NReal, T_NInt &gt;::pos</definition>
        <argsstring>(int index) const &amp;</argsstring>
        <name>pos</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="234" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="234" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a7000ae4ed79c3c7b0c4cb9d73588ed17" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NReal</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; U !=0, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" kindref="member">RealType</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE RealType&amp; amrex::Particle&lt; T_NReal, T_NInt &gt;::rdata</definition>
        <argsstring>(int index) &amp;</argsstring>
        <name>rdata</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="242" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="242" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a5b427f85a35cad6a54cb8ee01b424ccb" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NReal</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; U==0, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" kindref="member">RealType</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE RealType&amp; amrex::Particle&lt; T_NReal, T_NInt &gt;::rdata</definition>
        <argsstring>(int) &amp;</argsstring>
        <name>rdata</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="250" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="250" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a692a0badd05b4c328d61795789187c8e" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NReal</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; U !=0, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" kindref="member">RealType</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE const AMREX_FORCE_INLINE RealType&amp; amrex::Particle&lt; T_NReal, T_NInt &gt;::rdata</definition>
        <argsstring>(int index) const &amp;</argsstring>
        <name>rdata</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="258" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="258" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a41ad580e96804381c814a85f64767caa" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NReal</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; U==0, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" kindref="member">RealType</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE RealType amrex::Particle&lt; T_NReal, T_NInt &gt;::rdata</definition>
        <argsstring>(int) const &amp;</argsstring>
        <name>rdata</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="266" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="266" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a77c773768e4a002b2788a6009ab0c048" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" kindref="member">RealType</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE RealType amrex::Particle&lt; T_NReal, T_NInt &gt;::rdata</definition>
        <argsstring>(int) &amp;&amp;=delete</argsstring>
        <name>rdata</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="273" column="14"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a7532d647d3775739b3078195c85f25ec" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NReal</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; U !=0, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE RealVect amrex::Particle&lt; T_NReal, T_NInt &gt;::rvec</definition>
        <argsstring>(AMREX_D_DECL(int indx, int indy, int indz)) const &amp;</argsstring>
        <name>rvec</name>
        <param>
          <type>AMREX_D_DECL(<ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> indx, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> indy, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> indz)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="277" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="277" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a3db7403027a6374a5fbc4c90ed0362cf" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NReal</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; U==0, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE RealVect amrex::Particle&lt; T_NReal, T_NInt &gt;::rvec</definition>
        <argsstring>(AMREX_D_DECL(int, int, int)) const &amp;</argsstring>
        <name>rvec</name>
        <param>
          <type>AMREX_D_DECL(<ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="287" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="287" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a729d8ca45fc82f0f14064c9600778865" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NReal</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; U !=0, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE RealVect amrex::Particle&lt; T_NReal, T_NInt &gt;::rvec</definition>
        <argsstring>(const IntVect &amp;indices) const &amp;</argsstring>
        <name>rvec</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="295" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="295" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a9480daac8e7f5482e3330f610d04ad7a" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NReal</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; U==0, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE RealVect amrex::Particle&lt; T_NReal, T_NInt &gt;::rvec</definition>
        <argsstring>(const IntVect &amp;) const &amp;</argsstring>
        <name>rvec</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="305" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="305" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1ae04a2682e4044868102276af6ea94561" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NInt</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; U !=0, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int&amp; amrex::Particle&lt; T_NReal, T_NInt &gt;::idata</definition>
        <argsstring>(int index) &amp;</argsstring>
        <name>idata</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="313" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="313" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1afdb056dd5e330dc36305dc897876f772" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NInt</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; U==0, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> uint64_t &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE uint64_t&amp; amrex::Particle&lt; T_NReal, T_NInt &gt;::idata</definition>
        <argsstring>(int) &amp;</argsstring>
        <name>idata</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="321" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="321" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a49c9c0ccb9accc818484516e86aa907a" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NInt</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; U !=0, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE const AMREX_FORCE_INLINE int&amp; amrex::Particle&lt; T_NReal, T_NInt &gt;::idata</definition>
        <argsstring>(int index) const &amp;</argsstring>
        <name>idata</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="329" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="329" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a9a8d50011397207e3683329bb018aed6" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>U</declname>
            <defname>U</defname>
            <defval>T_NInt</defval>
          </param>
          <param>
            <type>typename std::enable_if&lt; U==0, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::Particle&lt; T_NReal, T_NInt &gt;::idata</definition>
        <argsstring>(int) const &amp;</argsstring>
        <name>idata</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="337" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="337" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1adffa348400a2c770707376c0040d4596" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" kindref="member">RealType</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE RealType amrex::Particle&lt; T_NReal, T_NInt &gt;::idata</definition>
        <argsstring>(int) &amp;&amp;=delete</argsstring>
        <name>idata</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="344" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1Particle_1a2fcbaec8aac910c864f4a210d48d9c93" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::Particle&lt; NReal, NInt &gt;::NextID</definition>
        <argsstring>()</argsstring>
        <name>NextID</name>
        <briefdescription>
<para>Returns the next particle ID for this processor. <ref refid="structamrex_1_1Particle" kindref="compound">Particle</ref> IDs start at 1 and are never reused. The pair, consisting of the ID and the CPU on which the particle is &quot;born&quot;, is a globally unique identifier for a particle. The maximum of this value across all processors must be checkpointed and then restored on restart so that we don&apos;t reuse particle IDs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="354" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="373" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1a90b34785c758b4423ca560d3796fcd7a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::Particle&lt; NReal, NInt &gt;::UnprotectedNextID</definition>
        <argsstring>()</argsstring>
        <name>UnprotectedNextID</name>
        <briefdescription>
<para>This version can only be used inside omp critical. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="359" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="393" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Particle_1acfec109fc6821c1e45db900b4adc6779" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Particle&lt; NReal, NInt &gt;::NextID</definition>
        <argsstring>(Long nextid)</argsstring>
        <name>NextID</name>
        <param>
          <type>Long</type>
          <declname>nextid</declname>
        </param>
        <briefdescription>
<para>Reset on restart. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nextid</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="366" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="403" bodyend="406"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The struct used to store particles. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_NReal</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of extra Real components </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_NInt</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of extra integer components </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>amrex::Particle&lt; T_NReal, T_NInt &gt;</label>
        <link refid="structamrex_1_1Particle"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::ParticleBase&lt; ParticleReal, T_NReal, 0 &gt;</label>
        <link refid="structamrex_1_1ParticleBase"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>amrex::Particle&lt; T_NReal, T_NInt &gt;</label>
        <link refid="structamrex_1_1Particle"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::ParticleBase&lt; ParticleReal, T_NReal, 0 &gt;</label>
        <link refid="structamrex_1_1ParticleBase"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="199" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="197" bodyend="367"/>
    <listofallmembers>
      <member refid="structamrex_1_1Particle_1ae42faee1dffc3e271f04bebfd70235ce" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>cpu</name></member>
      <member refid="structamrex_1_1Particle_1ab0e3d47b1fe618f1438aaa2167875b9b" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>cpu</name></member>
      <member refid="structamrex_1_1Particle_1a1b1f1b307acf1e1762ee8aa31a1a6938" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>id</name></member>
      <member refid="structamrex_1_1Particle_1a6e26882024ecf05f93701fac523ff9db" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>id</name></member>
      <member refid="structamrex_1_1Particle_1ae04a2682e4044868102276af6ea94561" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>idata</name></member>
      <member refid="structamrex_1_1Particle_1afdb056dd5e330dc36305dc897876f772" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>idata</name></member>
      <member refid="structamrex_1_1Particle_1a49c9c0ccb9accc818484516e86aa907a" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>idata</name></member>
      <member refid="structamrex_1_1Particle_1a9a8d50011397207e3683329bb018aed6" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>idata</name></member>
      <member refid="structamrex_1_1Particle_1adffa348400a2c770707376c0040d4596" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>idata</name></member>
      <member refid="structamrex_1_1ParticleBase_1a5f5d3842528f32c5c7551b84d0b14374" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>m_idata</name></member>
      <member refid="structamrex_1_1ParticleBase_1a4b5338d7a319166690ec546dd547869e" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>m_idcpu</name></member>
      <member refid="structamrex_1_1ParticleBase_1a93ebe9c4ff3729d52843f9d48eed9a53" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>m_pos</name></member>
      <member refid="structamrex_1_1ParticleBase_1a366f10b761dd77036582e32b7bdb2c77" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>m_rdata</name></member>
      <member refid="structamrex_1_1Particle_1a2fcbaec8aac910c864f4a210d48d9c93" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>NextID</name></member>
      <member refid="structamrex_1_1Particle_1acfec109fc6821c1e45db900b4adc6779" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>NextID</name></member>
      <member refid="structamrex_1_1Particle_1ad437c33b5c87125048830cee2775b50c" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>NInt</name></member>
      <member refid="structamrex_1_1Particle_1aae7d12b94a847462c64456654db316e7" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>NReal</name></member>
      <member refid="structamrex_1_1Particle_1a6974466bbe1639c042ea8079b1ee163c" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>pos</name></member>
      <member refid="structamrex_1_1Particle_1ac2b984a4de5d43ab39afba8bac4dc2a3" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>pos</name></member>
      <member refid="structamrex_1_1Particle_1a102ae1d7ef52914d8c93baa331169016" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>pos</name></member>
      <member refid="structamrex_1_1Particle_1a7000ae4ed79c3c7b0c4cb9d73588ed17" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rdata</name></member>
      <member refid="structamrex_1_1Particle_1a5b427f85a35cad6a54cb8ee01b424ccb" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rdata</name></member>
      <member refid="structamrex_1_1Particle_1a692a0badd05b4c328d61795789187c8e" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rdata</name></member>
      <member refid="structamrex_1_1Particle_1a41ad580e96804381c814a85f64767caa" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rdata</name></member>
      <member refid="structamrex_1_1Particle_1a77c773768e4a002b2788a6009ab0c048" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rdata</name></member>
      <member refid="structamrex_1_1Particle_1a1741c5c21aaba8fd767c2f86e911ad26" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>RealType</name></member>
      <member refid="structamrex_1_1Particle_1a7532d647d3775739b3078195c85f25ec" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rvec</name></member>
      <member refid="structamrex_1_1Particle_1a3db7403027a6374a5fbc4c90ed0362cf" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rvec</name></member>
      <member refid="structamrex_1_1Particle_1a729d8ca45fc82f0f14064c9600778865" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rvec</name></member>
      <member refid="structamrex_1_1Particle_1a9480daac8e7f5482e3330f610d04ad7a" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>rvec</name></member>
      <member refid="structamrex_1_1Particle_1a46b64285f66ebd66e86258462b440c51" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>the_next_id</name></member>
      <member refid="structamrex_1_1Particle_1a90b34785c758b4423ca560d3796fcd7a" prot="public" virt="non-virtual"><scope>amrex::Particle</scope><name>UnprotectedNextID</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
