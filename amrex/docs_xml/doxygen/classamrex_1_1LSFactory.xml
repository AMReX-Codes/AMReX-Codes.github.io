<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1LSFactory" kind="class" language="C++" prot="public">
    <compoundname>amrex::LSFactory</compoundname>
    <includes refid="AMReX__EB__levelset_8H" local="no">AMReX_EB_levelset.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1LSFactory_1abf257d1da9d0d205ef15f12dc51338c4" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MultiFab&gt; amrex::LSFactory::ls_grid</definition>
        <argsstring></argsstring>
        <name>ls_grid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> pointers storing level-set data -&gt; ls_grid: nodal <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> storing signed distance function to the nearest wall -&gt; ls_valid: cell-centered <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> storing integer flags assuming the following values: -1 : not all nodes around cell have been initialized 0 : none of the cell&apos;s neighbours contain negative vlaues of ls_phi on its nodes 1 : the cell is in the neighbourhood of phi &lt; 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="32" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LSFactory_1a06091e66f3ac5659b68ba15e6f71992b" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt;iMultiFab&gt; amrex::LSFactory::ls_valid</definition>
        <argsstring></argsstring>
        <name>ls_valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="33" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LSFactory_1a6295aa12f7875f614467b1f349b52a9a" prot="private" static="no" mutable="no">
        <type>const int</type>
        <definition>const int amrex::LSFactory::amr_lev</definition>
        <argsstring></argsstring>
        <name>amr_lev</name>
        <briefdescription>
<para>AMR information (needed for EBISLevel) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="36" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LSFactory_1aa1f324014ab0b366a03051fafb2035dc" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::LSFactory::ls_dm</definition>
        <argsstring></argsstring>
        <name>ls_dm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="38" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LSFactory_1aac702d5404b3c220d7ae24fe8e5fe05f" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::LSFactory::ls_ba</definition>
        <argsstring></argsstring>
        <name>ls_ba</name>
        <briefdescription>
<para>Refined box array (over which the level-set <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> is constructed) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="41" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LSFactory_1aaad4bde7983e413f2e82d677fb2b3774" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::LSFactory::cc_ba</definition>
        <argsstring></argsstring>
        <name>cc_ba</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="41" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LSFactory_1a01911d8bf081d4fa9a0030deaf8bc338" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::LSFactory::eb_ba</definition>
        <argsstring></argsstring>
        <name>eb_ba</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="41" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LSFactory_1a6177b2179dadab7809177582f73a34b9" prot="private" static="no" mutable="no">
        <type>const int</type>
        <definition>const int amrex::LSFactory::ls_grid_ref</definition>
        <argsstring></argsstring>
        <name>ls_grid_ref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="42" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LSFactory_1a0d2d5d8ffed0405b7abdfb571f91a0e7" prot="private" static="no" mutable="no">
        <type>const int</type>
        <definition>const int amrex::LSFactory::eb_grid_ref</definition>
        <argsstring></argsstring>
        <name>eb_grid_ref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="42" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LSFactory_1ab097c14695dfd7fef1b968e695754bc3" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MultiFab&gt; amrex::LSFactory::eb_grid</definition>
        <argsstring></argsstring>
        <name>eb_grid</name>
        <briefdescription>
<para>Data structures encloding (padded) EB index space. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="44" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LSFactory_1abaf73ecda23b186c3a73278fa316c8d3" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::LSFactory::geom_ls</definition>
        <argsstring></argsstring>
        <name>geom_ls</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> objects reflecting refined (and padded) BoxArrays. This is required to prevent PeriodicFill operations from &quot;spilling&quot; refined indices over periodic boundaries </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="49" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LSFactory_1a0509b5a4b9f43e4bbd27447f90904db2" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::LSFactory::geom_eb</definition>
        <argsstring></argsstring>
        <name>geom_eb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="49" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LSFactory_1ac967f340aea2740d70f37342edc06655" prot="private" static="no" mutable="no">
        <type>const int</type>
        <definition>const int amrex::LSFactory::ls_grid_pad</definition>
        <argsstring></argsstring>
        <name>ls_grid_pad</name>
        <briefdescription>
<para>Padding of the leve-set and EB grids: </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="52" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LSFactory_1a852fbe2bb5f08ab53d5d2af207cf0248" prot="private" static="no" mutable="no">
        <type>const int</type>
        <definition>const int amrex::LSFactory::eb_grid_pad</definition>
        <argsstring></argsstring>
        <name>eb_grid_pad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="52" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LSFactory_1ad7b23ceba1016dddb262f6d436a1aa60" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::LSFactory::eb_tile_size</definition>
        <argsstring></argsstring>
        <name>eb_tile_size</name>
        <briefdescription>
<para>Tiling for local level-set filling. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="55" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LSFactory_1a3fea9b214cba1612a9493f024383fbed" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::LSFactory::base_ba</definition>
        <argsstring></argsstring>
        <name>base_ba</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Baseline <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> from which refined quantities are derived. These are mainly kept around for the copy constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="59" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LSFactory_1a24c966f4561ccc355dcf70701ba974f3" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::LSFactory::base_geom</definition>
        <argsstring></argsstring>
        <name>base_geom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="60" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LSFactory_1a69e5d562871b930a2647501d187f41ed" prot="private" static="no" mutable="no">
        <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>const RealVect amrex::LSFactory::dx_vect</definition>
        <argsstring></argsstring>
        <name>dx_vect</name>
        <briefdescription>
<para>Cell size of the refined grids. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="63" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1LSFactory_1a8509ec2056ef885bfd65e615f91be200" prot="private" static="no" mutable="no">
        <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref></type>
        <definition>const RealVect amrex::LSFactory::dx_eb_vect</definition>
        <argsstring></argsstring>
        <name>dx_eb_vect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="63" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1LSFactory_1ae3c5fe1181cb6fc2c5ccd8b57155e3e9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LSFactory::update_ba</definition>
        <argsstring>(const BoxArray &amp;new_ba, const DistributionMapping &amp;dm)</argsstring>
        <name>update_ba</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>new_ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Updates internal <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> given a &quot;reference&quot; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> at a coarser level. Uses <computeroutput>ls_grid_ref</computeroutput> and <computeroutput>eb_grid_ref</computeroutput> to construct refined versions of <computeroutput>ba</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="68" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="108" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1ad5592ead970d4cce99cf029a052625be" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LSFactory::init_geom</definition>
        <argsstring>(const BoxArray &amp;ba, const Geometry &amp;geom, const DistributionMapping &amp;dm)</argsstring>
        <name>init_geom</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize internal <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>, and <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> objects given reference <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> (at a coarser level of refinement) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="72" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="131" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a3ae0bab3e7f80b78a028fd6af1d67e4a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LSFactory::fill_valid_kernel</definition>
        <argsstring>()</argsstring>
        <name>fill_valid_kernel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="74" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="150" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a5946bb43dfde1903e66e585a8bade67b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LSFactory::fill_valid</definition>
        <argsstring>(int n)</argsstring>
        <name>fill_valid</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="75" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="177" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a411e286869cbfdeeb3bc2c985a26295a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LSFactory::fill_valid</definition>
        <argsstring>()</argsstring>
        <name>fill_valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="76" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="189" bodyend="230"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1LSFactory_1abdd30fe9dc57e254aebe61ee6fc2c0f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::LSFactory::LSFactory</definition>
        <argsstring>(int lev, int ls_ref, int eb_ref, int ls_pad, int eb_pad, const BoxArray &amp;ba, const Geometry &amp;geom, const DistributionMapping &amp;dm, int eb_tile_size=32)</argsstring>
        <name>LSFactory</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ls_ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>eb_ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ls_pad</declname>
        </param>
        <param>
          <type>int</type>
          <declname>eb_pad</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>eb_tile_size</declname>
          <defval>32</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="79" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="21" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1ad9ad3dc591ddac2f290c4d86a906edd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::LSFactory::LSFactory</definition>
        <argsstring>(const LSFactory &amp;other)</argsstring>
        <name>LSFactory</name>
        <param>
          <type>const <ref refid="classamrex_1_1LSFactory" kindref="compound">LSFactory</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="82" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="81" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1ad13a040aa276a564826241c2df6206fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::LSFactory::~LSFactory</definition>
        <argsstring>()</argsstring>
        <name>~LSFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="83" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="97" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1ae8d22f198f00a8d49281b9770e8fa72a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LSFactory::regrid</definition>
        <argsstring>(const BoxArray &amp;ba, const DistributionMapping &amp;dm)</argsstring>
        <name>regrid</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="85" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="472" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1aae253d3313c3fc34000dd7922ba14611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LSFactory::invert</definition>
        <argsstring>()</argsstring>
        <name>invert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="87" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="502" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a75efbdbb67c5c2e544bb5e8525072a97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LSFactory::set_data</definition>
        <argsstring>(const MultiFab &amp;mf_ls)</argsstring>
        <name>set_data</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf_ls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="89" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="520" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a2fa18d780574ab5f4e5326fcd0962836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; iMultiFab &gt; amrex::LSFactory::Fill</definition>
        <argsstring>(const EBFArrayBoxFactory &amp;eb_factory, const MultiFab &amp;mf_impfunc)</argsstring>
        <name>Fill</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
          <declname>eb_factory</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf_impfunc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills (overwrites) level-set data locally. The local EB search radius is managed by <ref refid="classamrex_1_1LSFactory" kindref="compound">LSFactory</ref>. EB search box is defaulted to <computeroutput><ref refid="classamrex_1_1LSFactory_1ad7b23ceba1016dddb262f6d436a1aa60" kindref="member">LSFactory::eb_tile_size</ref></computeroutput>. Level-set values are guaranteed to be accurate up to <computeroutput><ref refid="classamrex_1_1LSFactory_1a852fbe2bb5f08ab53d5d2af207cf0248" kindref="member">LSFactory::eb_grid_pad</ref></computeroutput> cells. Returns: <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> indicating region that has been filled by a valid level-set function (i.e. the value of the level-set was informed by nearby EB facets) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="186" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="873" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1ae2eca4dadea507de1dbe0a91a629865a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; iMultiFab &gt; amrex::LSFactory::Fill</definition>
        <argsstring>(const EBFArrayBoxFactory &amp;eb_factory, const MultiFab &amp;mf_impfunc, int ebt_size)</argsstring>
        <name>Fill</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
          <declname>eb_factory</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf_impfunc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ebt_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills (overwrites) level-set data locally. The local EB search radius is specified by the user corresponding to a cube with edge-length = <computeroutput>ebt_size</computeroutput>. Level-set values are guaranteed to be accurate up to <computeroutput><ref refid="classamrex_1_1LSFactory_1a852fbe2bb5f08ab53d5d2af207cf0248" kindref="member">LSFactory::eb_grid_pad</ref></computeroutput> cells. Returns: <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> indicating region that has been filled by a valid level-set function (i.e. the value of the level-set was informed by nearby EB facets) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="195" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="880" bodyend="885"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1ac0b7c4c017090829c321cbc987b4e833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; iMultiFab &gt; amrex::LSFactory::Fill</definition>
        <argsstring>(const EBFArrayBoxFactory &amp;eb_factory, const MultiFab &amp;mf_impfunc, const IntVect &amp;ebt_size)</argsstring>
        <name>Fill</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
          <declname>eb_factory</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf_impfunc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ebt_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills (overwrites) level-set data locally. The local EB search radius is specified by the user corresponding to a box with edge lengths given by the <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> <computeroutput>ebt_size</computeroutput>. Level-set values are guaranteed to be accurate up to <computeroutput><ref refid="classamrex_1_1LSFactory_1a852fbe2bb5f08ab53d5d2af207cf0248" kindref="member">LSFactory::eb_grid_pad</ref></computeroutput> cells. Returns: <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> indicating region that has been filled by a valid level-set function (i.e. the value of the level-set was informed by nearby EB facets) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="206" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="889" bodyend="913"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a421bc3ea0585b35f53fed8a3b2d007c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; iMultiFab &gt; amrex::LSFactory::Fill</definition>
        <argsstring>(const MultiFab &amp;mf_impfunc, bool apply_threshold=false)</argsstring>
        <name>Fill</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf_impfunc</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>apply_threshold</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills (overwrites) level-set data locally. The level-set is given by an implicit function which is defined on a <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> <computeroutput>mf_impfunc</computeroutput>, which has the same resolution, and at least as many ghost-cells, as the <ref refid="classamrex_1_1LSFactory" kindref="compound">LSFactory</ref>. This can be guaranteed using the LSUtility::GShopLSFactory. Requires that the implicit function is a signed distance function. If <computeroutput>apply_threshold = true</computeroutput> level-set is truncated to to a length scale corresponding to <computeroutput>eb_grid_pad</computeroutput> cells (making it compatible with the <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> version). Returns: <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> indicating region that has been filled by a valid level-set function (i.e. the value of the level-set was informed by nearby EB facets) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="221" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="917" bodyend="944"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a6f7277c1c79415ed8984ddec7e77654d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; iMultiFab &gt; amrex::LSFactory::Intersect</definition>
        <argsstring>(const EBFArrayBoxFactory &amp;eb_factory, const MultiFab &amp;mf_impfunc)</argsstring>
        <name>Intersect</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
          <declname>eb_factory</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf_impfunc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs intersection operation with the level-set representation of <computeroutput>eb_factory</computeroutput>. The implicit function (mf_impfunc) is needed to select the inside/outside edge-cases where the level-set cannot be determined by projection onto EB facets. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="228" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="948" bodyend="953"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a144c94d12c47be4eb9bc86dc0217765e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; iMultiFab &gt; amrex::LSFactory::Intersect</definition>
        <argsstring>(const EBFArrayBoxFactory &amp;eb_factory, const MultiFab &amp;mf_impfunc, int ebt_size)</argsstring>
        <name>Intersect</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
          <declname>eb_factory</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf_impfunc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ebt_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs intersection operation with the level-set representation of <computeroutput>eb_factory</computeroutput>. The integer <computeroutput>ebt_size</computeroutput> specifies the (cubic) tile size used to search of EB facets. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="234" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="957" bodyend="962"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a3fabf34250a83089d60daf9d5c132038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; iMultiFab &gt; amrex::LSFactory::Intersect</definition>
        <argsstring>(const EBFArrayBoxFactory &amp;eb_factory, const MultiFab &amp;mf_impfunc, const IntVect &amp;ebt_size)</argsstring>
        <name>Intersect</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
          <declname>eb_factory</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf_impfunc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ebt_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs intersection operation with the level-set representation of <computeroutput>eb_factory</computeroutput>. The <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> <computeroutput>ebt_size</computeroutput> specifies the tile size used to search of EB facets. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="241" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="966" bodyend="996"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1afabca9b42e37cce9be22d16d55edffed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; iMultiFab &gt; amrex::LSFactory::Intersect</definition>
        <argsstring>(const MultiFab &amp;mf_impfunc, bool apply_threshold=false)</argsstring>
        <name>Intersect</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf_impfunc</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>apply_threshold</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs intersection operation with the level-set given in the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> <computeroutput>mf_impfunc</computeroutput>. If the flag <computeroutput>apply_threshold == true</computeroutput>, then the level-set in <computeroutput>mf_impfunc</computeroutput> will be thresholded. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="248" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="1000" bodyend="1031"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a7d434880721e515d6458e198ba579219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; iMultiFab &gt; amrex::LSFactory::Union</definition>
        <argsstring>(const EBFArrayBoxFactory &amp;eb_factory, const MultiFab &amp;mf_impfunc)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
          <declname>eb_factory</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf_impfunc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs union operation with the level-set representation of <computeroutput>eb_factory</computeroutput>. The implicit function (mf_impfunc) is needed to select the inside/outside edge-cases where the level-set cannot be determined by projection onto EB facets. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="255" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="1035" bodyend="1040"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a350082120b504041512983b0960bcb8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; iMultiFab &gt; amrex::LSFactory::Union</definition>
        <argsstring>(const EBFArrayBoxFactory &amp;eb_factory, const MultiFab &amp;mf_impfunc, int ebt_size)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
          <declname>eb_factory</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf_impfunc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ebt_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs union operation with the level-set representation of <computeroutput>eb_factory</computeroutput>. The integer <computeroutput>ebt_size</computeroutput> specifies the (cubic) tile size used to search of EB facets. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="261" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="1044" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a37f562a76e4efdb4a4eab2495910fd1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; iMultiFab &gt; amrex::LSFactory::Union</definition>
        <argsstring>(const EBFArrayBoxFactory &amp;eb_factory, const MultiFab &amp;mf_impfunc, const IntVect &amp;ebt_size)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
          <declname>eb_factory</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf_impfunc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ebt_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs union operation with the level-set representation of <computeroutput>eb_factory</computeroutput>. The <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> <computeroutput>ebt_size</computeroutput> specifies the tile size used to search of EB facets. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="268" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="1053" bodyend="1083"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1aacb082130197d26c131f91f9c12e281d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; iMultiFab &gt; amrex::LSFactory::Union</definition>
        <argsstring>(const MultiFab &amp;mf_impfunc, bool apply_threshold=false)</argsstring>
        <name>Union</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf_impfunc</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>apply_threshold</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs union operation with the level-set given in the <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> <computeroutput>mf_impfunc</computeroutput>. If the flag <computeroutput>apply_threshold == true</computeroutput>, then the level-set in <computeroutput>mf_impfunc</computeroutput> will be thresholded. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="275" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="1086" bodyend="1117"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1ad3b2e8d4113b8f53401740f699392bc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LSFactory::update_intersection</definition>
        <argsstring>(const MultiFab &amp;ls_in, const iMultiFab &amp;valid_in)</argsstring>
        <name>update_intersection</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>ls_in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>valid_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update internal <computeroutput>ls_grid</computeroutput><computeroutput>and</computeroutput>ls_valid<computeroutput>taking the min of </computeroutput>ls_grid<computeroutput>and</computeroutput>ls_in` </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="280" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="273" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a56a3c53cd24fb95f428b3d0fd497bbc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LSFactory::update_union</definition>
        <argsstring>(const MultiFab &amp;ls_in, const iMultiFab &amp;valid_in)</argsstring>
        <name>update_union</name>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>ls_in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>valid_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update internal <computeroutput>ls_grid</computeroutput><computeroutput>and</computeroutput>ls_valid<computeroutput>taking the max of </computeroutput>ls_grid<computeroutput>and</computeroutput>ls_in` </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="284" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="342" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a9b140ec1200d220b01566334c485b114" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
        <definition>MultiFab* amrex::LSFactory::get_data</definition>
        <argsstring>()</argsstring>
        <name>get_data</name>
        <briefdescription>
<para>Return mutable pointer to level-set data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="287" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="287" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a648e99521904e0c659048596643fe867" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> *</type>
        <definition>const MultiFab* amrex::LSFactory::get_data</definition>
        <argsstring>() const </argsstring>
        <name>get_data</name>
        <briefdescription>
<para>Return constant pointer to level-set data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="289" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="289" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a31bad106aa075551325226e56beb2325" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> *</type>
        <definition>const iMultiFab* amrex::LSFactory::get_valid</definition>
        <argsstring>() const </argsstring>
        <name>get_valid</name>
        <briefdescription>
<para>Return constant pointer to level-set data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="291" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="291" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a6dee767855e2204e0a848f7bafcb5521" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; MultiFab &gt; amrex::LSFactory::copy_data</definition>
        <argsstring>(const DistributionMapping &amp;dm) const </argsstring>
        <name>copy_data</name>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy level-set data into a new <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> with <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> matching the <ref refid="classamrex_1_1LSFactory" kindref="compound">LSFactory</ref> <computeroutput>ls_ba</computeroutput>, and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> <computeroutput>dm</computeroutput>. Returns a unique_ptr to the new <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="296" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="410" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1ade85f291aa5bfba93ca4374dc2199efa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; iMultiFab &gt; amrex::LSFactory::copy_valid</definition>
        <argsstring>(const DistributionMapping &amp;dm) const </argsstring>
        <name>copy_valid</name>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy level-set valid tags into a new <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> with <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> matching the <ref refid="classamrex_1_1LSFactory" kindref="compound">LSFactory</ref> <computeroutput>ls_ba</computeroutput>, and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> <computeroutput>dm</computeroutput>. Returns a unique_ptr to the new <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="301" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="426" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a6ca511b2f477b8094a39a991c49b67b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &gt;</type>
        <definition>std::unique_ptr&lt; MultiFab &gt; amrex::LSFactory::coarsen_data</definition>
        <argsstring>() const </argsstring>
        <name>coarsen_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Coarsen level-set data by a coarsening ration of <computeroutput>ls_grid_ref</computeroutput>. The coarsened data is saved into a new <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> with coarsened version of the <ref refid="classamrex_1_1LSFactory" kindref="compound">LSFactory</ref> <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> <computeroutput>ls_ba</computeroutput>, and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> <computeroutput>dm_ls</computeroutput>. Returns a unique_ptr to the new <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="307" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="441" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1aed4f792a64a7f8851ae7c751ac27b9f4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::LSFactory::get_ls_ref</definition>
        <argsstring>() const </argsstring>
        <name>get_ls_ref</name>
        <briefdescription>
<para>Return level-set refinement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="310" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="310" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a9eba38610d05f4932a4e5cbb181633c0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::LSFactory::get_ls_pad</definition>
        <argsstring>() const </argsstring>
        <name>get_ls_pad</name>
        <briefdescription>
<para>Return level-set ghost cells (in units of the refined grid) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="312" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="312" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a0df5623470396bdf17f7258c03e2f73c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::LSFactory::get_eb_ref</definition>
        <argsstring>() const </argsstring>
        <name>get_eb_ref</name>
        <briefdescription>
<para>Return EB grid refinement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="314" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="314" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1ae87f21da6db57ac2c9419c6e09a53e61" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::LSFactory::get_eb_pad</definition>
        <argsstring>() const </argsstring>
        <name>get_eb_pad</name>
        <briefdescription>
<para>Return EB-grid ghost cells (in units of the refined eb-grid) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="316" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="316" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a90e9a39b2b27bd562fd966020dcda848" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::LSFactory::get_amr_level</definition>
        <argsstring>() const </argsstring>
        <name>get_amr_level</name>
        <briefdescription>
<para>Return AMR level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="319" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="319" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a653226a5a158e5e103a901fa64d0408e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray&amp; amrex::LSFactory::get_ls_ba</definition>
        <argsstring>() const </argsstring>
        <name>get_ls_ba</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return BoxArrays: -&gt; ls: levelset (nodal) -&gt; cc: cell-centered (dual to ls) used by valid -&gt; eb: <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> used by EBIS (cell-centered) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="326" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="326" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a8be35b09b5a4d7be20bcabe1af21667d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray&amp; amrex::LSFactory::get_cc_ba</definition>
        <argsstring>() const </argsstring>
        <name>get_cc_ba</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="327" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="327" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1ad102d5b1954bd1eb6d6f69800dc61717" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray&amp; amrex::LSFactory::get_eb_ba</definition>
        <argsstring>() const </argsstring>
        <name>get_eb_ba</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="328" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="328" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a6ce6c8e85cb6fadbb34cfa578c142767" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray&amp; amrex::LSFactory::get_ba</definition>
        <argsstring>() const </argsstring>
        <name>get_ba</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="329" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="329" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a7245e65e7cba937f5d0948799449a830" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::LSFactory::get_geom</definition>
        <argsstring>() const </argsstring>
        <name>get_geom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="331" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="331" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a4113c12ec1531bc8279fd9aeae0cd2b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::LSFactory::get_ls_geom</definition>
        <argsstring>() const </argsstring>
        <name>get_ls_geom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="332" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="332" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a58a7b28aad71494c0f427ae7275e7d64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::LSFactory::get_eb_geom</definition>
        <argsstring>() const </argsstring>
        <name>get_eb_geom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="333" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="333" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1ad40e0a02aa852ec5ed0b8e1ea53fbd1f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping&amp; amrex::LSFactory::get_dm</definition>
        <argsstring>() const </argsstring>
        <name>get_dm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="334" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="334" bodyend="334"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a759778d9d0f34a472bcd7d7d0de24a63" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &gt;</type>
        <definition>std::unique_ptr&lt; Vector&lt; Real &gt; &gt; amrex::LSFactory::eb_facets</definition>
        <argsstring>(const FArrayBox &amp;norm_tile, const CutFab &amp;bcent_tile, const EBCellFlagFab &amp;flag_tile, const RealVect &amp;eb_dx, const Box &amp;eb_search)</argsstring>
        <name>eb_facets</name>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>norm_tile</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1CutFab" kindref="compound">CutFab</ref> &amp;</type>
          <declname>bcent_tile</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1EBCellFlagFab" kindref="compound">EBCellFlagFab</ref> &amp;</type>
          <declname>flag_tile</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>eb_dx</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>eb_search</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct eb_facets list from eb_factory. The facet list is a 1-D list of facet bcent positions, followed by normals =&gt; N facets would be stored in a <ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref> of length 6*N. Only facets that fall within the <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> <computeroutput>eb_search</computeroutput> are included in the list. The <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> <computeroutput>eb_dx</computeroutput> provides the discretization of the EB data. NOTE: <computeroutput>be_search</computeroutput> must be contained in the <computeroutput>norm_tile</computeroutput>, <computeroutput>bcent_tile</computeroutput> and <computeroutput>flag_tile</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="105" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="234" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a47ebc5c598359fc29a4413629d5989bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LSFactory::fill_data</definition>
        <argsstring>(MultiFab &amp;data, iMultiFab &amp;valid, const EBFArrayBoxFactory &amp;eb_factory, const MultiFab &amp;eb_impfunc, int ebt_size, int ls_ref, int eb_ref, const Geometry &amp;geom, const Geometry &amp;geom_eb)</argsstring>
        <name>fill_data</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>valid</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
          <declname>eb_factory</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>eb_impfunc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ebt_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ls_ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>eb_ref</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom_eb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills level-set <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> <computeroutput>data</computeroutput> locally from <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> <computeroutput>eb_factory</computeroutput>. Same as <computeroutput>fill_data</computeroutput> but with cubic EB search box. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="121" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="532" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a81ad55c19b62f22353c3f2058191d015" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LSFactory::fill_data</definition>
        <argsstring>(MultiFab &amp;data, iMultiFab &amp;valid, const EBFArrayBoxFactory &amp;eb_factory, const MultiFab &amp;eb_impfunc, const IntVect &amp;ebt_size, int ls_ref, int eb_ref, const Geometry &amp;geom, const Geometry &amp;geom_eb)</argsstring>
        <name>fill_data</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>valid</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> &amp;</type>
          <declname>eb_factory</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>eb_impfunc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ebt_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ls_ref</declname>
        </param>
        <param>
          <type>int</type>
          <declname>eb_ref</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom_eb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills level-set <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> <computeroutput>data</computeroutput> locally from <ref refid="classamrex_1_1EBFArrayBoxFactory" kindref="compound">EBFArrayBoxFactory</ref> <computeroutput>eb_factory</computeroutput>. Also fills <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> tagging cells which are nearby to EB surface. Only EB facets in a box size of <computeroutput>ebt_size</computeroutput> are considered. Any EB facets that are outside this box are ignored =&gt; the min/max value of the level-set are +/- <computeroutput>eb_pad * min(geom_eb.CellSize(:))</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="133" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="547" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a8395a097ce8af9ef7b1d4df5754b6191" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LSFactory::fill_data</definition>
        <argsstring>(MultiFab &amp;data, iMultiFab &amp;valid, const MultiFab &amp;mf_impfunc, int eb_pad, const Geometry &amp;eb_geom)</argsstring>
        <name>fill_data</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>valid</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>mf_impfunc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>eb_pad</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>eb_geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fills level-set <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> <computeroutput>data</computeroutput> from implicit function <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> <computeroutput>mf_impfunc</computeroutput>. Also fills <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> tagging cells whose values are informed by nearby EB surfaces (in the case of implicit-function filling without threshold, this covers the whole domain). This works as long as the implicit function is a signed distance function. The int <computeroutput>eb_pad</computeroutput> and <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> object <computeroutput>geom_eb</computeroutput> can be used to specify a level-set threshold (<computeroutput>eb_pad*min(geom_eb.CellSize(:))</computeroutput>) to make the result compatible with Intersections and Unions with EB-filled level-sets. No threshold is applied with <computeroutput>eb_pad &lt; 0</computeroutput> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="148" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="733" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a767b448e7ba924cbe591535579a724b3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LSFactory::intersect_data</definition>
        <argsstring>(MultiFab &amp;data, iMultiFab &amp;valid, const MultiFab &amp;data_in, const iMultiFab &amp;valid_in, const Geometry &amp;geom_ls)</argsstring>
        <name>intersect_data</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>valid</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>data_in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>valid_in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom_ls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Updates the level-set <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> <computeroutput>data</computeroutput> with the result of intersection operation between <computeroutput>data</computeroutput> and another level-set <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> <computeroutput>data_in</computeroutput>, for all cells where <computeroutput>valid_in == 1</computeroutput>. The <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> <computeroutput>valid</computeroutput> is also updated with the new valid flags corresponding to the intersection level-set. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="158" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="819" bodyend="842"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1LSFactory_1a1520aa876881287222f18ada1f73f826" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::LSFactory::union_data</definition>
        <argsstring>(MultiFab &amp;data, iMultiFab &amp;valid, const MultiFab &amp;data_in, const iMultiFab &amp;valid_in, const Geometry &amp;geom_ls)</argsstring>
        <name>union_data</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>valid</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>data_in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> &amp;</type>
          <declname>valid_in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom_ls</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Updates the level-set <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> <computeroutput>data</computeroutput> with the result of union operation between <computeroutput>data</computeroutput> and another level-set <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> <computeroutput>data_in</computeroutput>, for all cells where <computeroutput>valid_in == 1</computeroutput>. The <ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref> <computeroutput>valid</computeroutput> is also updated with the new valid flags corresponding to the intersection level-set. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="168" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.cpp" bodystart="846" bodyend="869"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="3886">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="3886" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="3883">
        <label>Real</label>
      </node>
      <node id="3880">
        <label>amrex::LSFactory</label>
        <link refid="classamrex_1_1LSFactory"/>
        <childnode refid="3881" relation="usage">
          <edgelabel>geom_ls</edgelabel>
          <edgelabel>base_geom</edgelabel>
          <edgelabel>geom_eb</edgelabel>
        </childnode>
        <childnode refid="3888" relation="usage">
          <edgelabel>dx_eb_vect</edgelabel>
          <edgelabel>dx_vect</edgelabel>
        </childnode>
        <childnode refid="3889" relation="usage">
          <edgelabel>ls_dm</edgelabel>
        </childnode>
        <childnode refid="3890" relation="usage">
          <edgelabel>ls_ba</edgelabel>
          <edgelabel>base_ba</edgelabel>
          <edgelabel>cc_ba</edgelabel>
          <edgelabel>eb_ba</edgelabel>
        </childnode>
      </node>
      <node id="3888">
        <label>amrex::RealVect</label>
        <link refid="classamrex_1_1RealVect"/>
        <childnode refid="3888" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
        <childnode refid="3883" relation="usage">
          <edgelabel>vect</edgelabel>
        </childnode>
      </node>
      <node id="3890">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="3886" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="3887" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="3884">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="3883" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
      <node id="3885">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="3886" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="3887" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="3882">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
        <childnode refid="3883" relation="usage">
          <edgelabel>inv_dx</edgelabel>
          <edgelabel>offset</edgelabel>
          <edgelabel>dx</edgelabel>
        </childnode>
      </node>
      <node id="3887">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="3889">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="3881">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="3882" relation="public-inheritance">
        </childnode>
        <childnode refid="3884" relation="usage">
          <edgelabel>prob_domain</edgelabel>
        </childnode>
        <childnode refid="3885" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" line="20" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/EB/AMReX_EB_levelset.H" bodystart="20" bodyend="335"/>
    <listofallmembers>
      <member refid="classamrex_1_1LSFactory_1a6295aa12f7875f614467b1f349b52a9a" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>amr_lev</name></member>
      <member refid="classamrex_1_1LSFactory_1a3fea9b214cba1612a9493f024383fbed" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>base_ba</name></member>
      <member refid="classamrex_1_1LSFactory_1a24c966f4561ccc355dcf70701ba974f3" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>base_geom</name></member>
      <member refid="classamrex_1_1LSFactory_1aaad4bde7983e413f2e82d677fb2b3774" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>cc_ba</name></member>
      <member refid="classamrex_1_1LSFactory_1a6ca511b2f477b8094a39a991c49b67b8" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>coarsen_data</name></member>
      <member refid="classamrex_1_1LSFactory_1a6dee767855e2204e0a848f7bafcb5521" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>copy_data</name></member>
      <member refid="classamrex_1_1LSFactory_1ade85f291aa5bfba93ca4374dc2199efa" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>copy_valid</name></member>
      <member refid="classamrex_1_1LSFactory_1a8509ec2056ef885bfd65e615f91be200" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>dx_eb_vect</name></member>
      <member refid="classamrex_1_1LSFactory_1a69e5d562871b930a2647501d187f41ed" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>dx_vect</name></member>
      <member refid="classamrex_1_1LSFactory_1a01911d8bf081d4fa9a0030deaf8bc338" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>eb_ba</name></member>
      <member refid="classamrex_1_1LSFactory_1a759778d9d0f34a472bcd7d7d0de24a63" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>eb_facets</name></member>
      <member refid="classamrex_1_1LSFactory_1ab097c14695dfd7fef1b968e695754bc3" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>eb_grid</name></member>
      <member refid="classamrex_1_1LSFactory_1a852fbe2bb5f08ab53d5d2af207cf0248" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>eb_grid_pad</name></member>
      <member refid="classamrex_1_1LSFactory_1a0d2d5d8ffed0405b7abdfb571f91a0e7" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>eb_grid_ref</name></member>
      <member refid="classamrex_1_1LSFactory_1ad7b23ceba1016dddb262f6d436a1aa60" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>eb_tile_size</name></member>
      <member refid="classamrex_1_1LSFactory_1a2fa18d780574ab5f4e5326fcd0962836" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>Fill</name></member>
      <member refid="classamrex_1_1LSFactory_1ae2eca4dadea507de1dbe0a91a629865a" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>Fill</name></member>
      <member refid="classamrex_1_1LSFactory_1ac0b7c4c017090829c321cbc987b4e833" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>Fill</name></member>
      <member refid="classamrex_1_1LSFactory_1a421bc3ea0585b35f53fed8a3b2d007c4" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>Fill</name></member>
      <member refid="classamrex_1_1LSFactory_1a47ebc5c598359fc29a4413629d5989bc" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>fill_data</name></member>
      <member refid="classamrex_1_1LSFactory_1a81ad55c19b62f22353c3f2058191d015" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>fill_data</name></member>
      <member refid="classamrex_1_1LSFactory_1a8395a097ce8af9ef7b1d4df5754b6191" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>fill_data</name></member>
      <member refid="classamrex_1_1LSFactory_1a5946bb43dfde1903e66e585a8bade67b" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>fill_valid</name></member>
      <member refid="classamrex_1_1LSFactory_1a411e286869cbfdeeb3bc2c985a26295a" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>fill_valid</name></member>
      <member refid="classamrex_1_1LSFactory_1a3ae0bab3e7f80b78a028fd6af1d67e4a" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>fill_valid_kernel</name></member>
      <member refid="classamrex_1_1LSFactory_1a0509b5a4b9f43e4bbd27447f90904db2" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>geom_eb</name></member>
      <member refid="classamrex_1_1LSFactory_1abaf73ecda23b186c3a73278fa316c8d3" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>geom_ls</name></member>
      <member refid="classamrex_1_1LSFactory_1a90e9a39b2b27bd562fd966020dcda848" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>get_amr_level</name></member>
      <member refid="classamrex_1_1LSFactory_1a6ce6c8e85cb6fadbb34cfa578c142767" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>get_ba</name></member>
      <member refid="classamrex_1_1LSFactory_1a8be35b09b5a4d7be20bcabe1af21667d" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>get_cc_ba</name></member>
      <member refid="classamrex_1_1LSFactory_1a9b140ec1200d220b01566334c485b114" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>get_data</name></member>
      <member refid="classamrex_1_1LSFactory_1a648e99521904e0c659048596643fe867" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>get_data</name></member>
      <member refid="classamrex_1_1LSFactory_1ad40e0a02aa852ec5ed0b8e1ea53fbd1f" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>get_dm</name></member>
      <member refid="classamrex_1_1LSFactory_1ad102d5b1954bd1eb6d6f69800dc61717" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>get_eb_ba</name></member>
      <member refid="classamrex_1_1LSFactory_1a58a7b28aad71494c0f427ae7275e7d64" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>get_eb_geom</name></member>
      <member refid="classamrex_1_1LSFactory_1ae87f21da6db57ac2c9419c6e09a53e61" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>get_eb_pad</name></member>
      <member refid="classamrex_1_1LSFactory_1a0df5623470396bdf17f7258c03e2f73c" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>get_eb_ref</name></member>
      <member refid="classamrex_1_1LSFactory_1a7245e65e7cba937f5d0948799449a830" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>get_geom</name></member>
      <member refid="classamrex_1_1LSFactory_1a653226a5a158e5e103a901fa64d0408e" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>get_ls_ba</name></member>
      <member refid="classamrex_1_1LSFactory_1a4113c12ec1531bc8279fd9aeae0cd2b8" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>get_ls_geom</name></member>
      <member refid="classamrex_1_1LSFactory_1a9eba38610d05f4932a4e5cbb181633c0" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>get_ls_pad</name></member>
      <member refid="classamrex_1_1LSFactory_1aed4f792a64a7f8851ae7c751ac27b9f4" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>get_ls_ref</name></member>
      <member refid="classamrex_1_1LSFactory_1a31bad106aa075551325226e56beb2325" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>get_valid</name></member>
      <member refid="classamrex_1_1LSFactory_1ad5592ead970d4cce99cf029a052625be" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>init_geom</name></member>
      <member refid="classamrex_1_1LSFactory_1a6f7277c1c79415ed8984ddec7e77654d" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>Intersect</name></member>
      <member refid="classamrex_1_1LSFactory_1a144c94d12c47be4eb9bc86dc0217765e" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>Intersect</name></member>
      <member refid="classamrex_1_1LSFactory_1a3fabf34250a83089d60daf9d5c132038" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>Intersect</name></member>
      <member refid="classamrex_1_1LSFactory_1afabca9b42e37cce9be22d16d55edffed" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>Intersect</name></member>
      <member refid="classamrex_1_1LSFactory_1a767b448e7ba924cbe591535579a724b3" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>intersect_data</name></member>
      <member refid="classamrex_1_1LSFactory_1aae253d3313c3fc34000dd7922ba14611" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>invert</name></member>
      <member refid="classamrex_1_1LSFactory_1aac702d5404b3c220d7ae24fe8e5fe05f" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>ls_ba</name></member>
      <member refid="classamrex_1_1LSFactory_1aa1f324014ab0b366a03051fafb2035dc" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>ls_dm</name></member>
      <member refid="classamrex_1_1LSFactory_1abf257d1da9d0d205ef15f12dc51338c4" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>ls_grid</name></member>
      <member refid="classamrex_1_1LSFactory_1ac967f340aea2740d70f37342edc06655" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>ls_grid_pad</name></member>
      <member refid="classamrex_1_1LSFactory_1a6177b2179dadab7809177582f73a34b9" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>ls_grid_ref</name></member>
      <member refid="classamrex_1_1LSFactory_1a06091e66f3ac5659b68ba15e6f71992b" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>ls_valid</name></member>
      <member refid="classamrex_1_1LSFactory_1abdd30fe9dc57e254aebe61ee6fc2c0f5" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>LSFactory</name></member>
      <member refid="classamrex_1_1LSFactory_1ad9ad3dc591ddac2f290c4d86a906edd2" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>LSFactory</name></member>
      <member refid="classamrex_1_1LSFactory_1ae8d22f198f00a8d49281b9770e8fa72a" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>regrid</name></member>
      <member refid="classamrex_1_1LSFactory_1a75efbdbb67c5c2e544bb5e8525072a97" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>set_data</name></member>
      <member refid="classamrex_1_1LSFactory_1a7d434880721e515d6458e198ba579219" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>Union</name></member>
      <member refid="classamrex_1_1LSFactory_1a350082120b504041512983b0960bcb8b" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>Union</name></member>
      <member refid="classamrex_1_1LSFactory_1a37f562a76e4efdb4a4eab2495910fd1f" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>Union</name></member>
      <member refid="classamrex_1_1LSFactory_1aacb082130197d26c131f91f9c12e281d" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>Union</name></member>
      <member refid="classamrex_1_1LSFactory_1a1520aa876881287222f18ada1f73f826" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>union_data</name></member>
      <member refid="classamrex_1_1LSFactory_1ae3c5fe1181cb6fc2c5ccd8b57155e3e9" prot="private" virt="non-virtual"><scope>amrex::LSFactory</scope><name>update_ba</name></member>
      <member refid="classamrex_1_1LSFactory_1ad3b2e8d4113b8f53401740f699392bc8" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>update_intersection</name></member>
      <member refid="classamrex_1_1LSFactory_1a56a3c53cd24fb95f428b3d0fd497bbc3" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>update_union</name></member>
      <member refid="classamrex_1_1LSFactory_1ad13a040aa276a564826241c2df6206fe" prot="public" virt="non-virtual"><scope>amrex::LSFactory</scope><name>~LSFactory</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
