<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceamrex_1_1Gpu_1_1Atomic" kind="namespace" language="C++">
    <compoundname>amrex::Gpu::Atomic</compoundname>
    <innernamespace refid="namespaceamrex_1_1Gpu_1_1Atomic_1_1detail">amrex::Gpu::Atomic::detail</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1aa2cd0bf29a9ed71679b41a3e54765d39" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE T amrex::Gpu::Atomic::Add_device</definition>
        <argsstring>(T *const sum, T const value) noexcept</argsstring>
        <name>Add_device</name>
        <param>
          <type>T *const</type>
          <declname>sum</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="130" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="130" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a629c38eebdf637b06b26049acae626c8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Long</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Long amrex::Gpu::Atomic::Add_device</definition>
        <argsstring>(Long *const sum, Long const value) noexcept</argsstring>
        <name>Add_device</name>
        <param>
          <type>Long *const</type>
          <declname>sum</declname>
        </param>
        <param>
          <type>Long const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="185" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a871db6df623d9b7cb89aee1f961af275" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> double</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE double amrex::Gpu::Atomic::Add_device</definition>
        <argsstring>(double *const sum, double const value) noexcept</argsstring>
        <name>Add_device</name>
        <param>
          <type>double *const</type>
          <declname>sum</declname>
        </param>
        <param>
          <type>double const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="195" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="195" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a381dae009311cca3b100d29d0417f83e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::Gpu::Atomic::Add</definition>
        <argsstring>(T *const sum, T const value) noexcept</argsstring>
        <name>Add</name>
        <param>
          <type>T *const</type>
          <declname>sum</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="206" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="206" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a36a87ab5fbe799714dcc825134aa6027" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Op</type>
          </param>
          <param>
            <type>typename Cond</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; sizeof(T)==sizeof(unsigned int), int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE bool amrex::Gpu::Atomic::If_device</definition>
        <argsstring>(T *const sum, T const value, Op &amp;&amp;op, Cond &amp;&amp;cond) noexcept</argsstring>
        <name>If_device</name>
        <param>
          <type>T *const</type>
          <declname>sum</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Op &amp;&amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Cond &amp;&amp;</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="225" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="225" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1ac8138a7c3dfae65f72813c07b8e5e856" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Op</type>
          </param>
          <param>
            <type>class Cond</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::Gpu::Atomic::If</definition>
        <argsstring>(T *const add, T const value, Op &amp;&amp;op, Cond &amp;&amp;cond) noexcept</argsstring>
        <name>If</name>
        <param>
          <type>T *const</type>
          <declname>add</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Op &amp;&amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Cond &amp;&amp;</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Conditionally perform an atomic operation. </para>
        </briefdescription>
        <detaileddescription>
<para>Atomically updates the result at &quot;add&quot; with &quot;value&quot; using &quot;op&quot;, but only if &quot;cond&quot; is true.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the type pointed to by add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Op</parametername>
</parameternamelist>
<parameterdescription>
<para>callable that takes two T argument and combines them </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Cond</parametername>
</parameternamelist>
<parameterdescription>
<para>callable that takes a &quot;T&quot; a returns whether to do the update</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>add</parametername>
</parameternamelist>
<parameterdescription>
<para>address to atomically update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to combine </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>callable specifying the operation to use to combine *add and value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>callable specifying the condition to test on first. The value passed in to the cond function is the would-be combined value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="259" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="259" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1aafa3ecc838e7a17251520a2ef125c963" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::Gpu::Atomic::AddNoRet</definition>
        <argsstring>(T *const sum, T const value) noexcept</argsstring>
        <name>AddNoRet</name>
        <param>
          <type>T *const</type>
          <declname>sum</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="281" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="281" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1ad60dc3c4771055fc434211d284769767" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE T amrex::Gpu::Atomic::Min_device</definition>
        <argsstring>(T *const m, T const value) noexcept</argsstring>
        <name>Min_device</name>
        <param>
          <type>T *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="313" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="313" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1aa1ce598721adb1e2dcc9986951186d0b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> float</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE float amrex::Gpu::Atomic::Min_device</definition>
        <argsstring>(float *const m, float const value) noexcept</argsstring>
        <name>Min_device</name>
        <param>
          <type>float *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>float const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="330" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a53c8ca8f4c92a40ec4eee06b385f6ef7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> double</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE double amrex::Gpu::Atomic::Min_device</definition>
        <argsstring>(double *const m, double const value) noexcept</argsstring>
        <name>Min_device</name>
        <param>
          <type>double *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="336" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a1ca14857c9072d782f6e4a98592ba2b6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Long</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Long amrex::Gpu::Atomic::Min_device</definition>
        <argsstring>(Long *const m, Long const value) noexcept</argsstring>
        <name>Min_device</name>
        <param>
          <type>Long *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>Long const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="344" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a775473b1fa3e7d661e3ac6cde59b6018" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::Gpu::Atomic::Min</definition>
        <argsstring>(T *const m, T const value) noexcept</argsstring>
        <name>Min</name>
        <param>
          <type>T *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="355" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="355" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1addcea6e4721751a5f9eb8b8889c24061" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE T amrex::Gpu::Atomic::Max_device</definition>
        <argsstring>(T *const m, T const value) noexcept</argsstring>
        <name>Max_device</name>
        <param>
          <type>T *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="374" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="374" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a97d664f2938116a8c47acd140dfb9547" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> float</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE float amrex::Gpu::Atomic::Max_device</definition>
        <argsstring>(float *const m, float const value) noexcept</argsstring>
        <name>Max_device</name>
        <param>
          <type>float *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>float const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="391" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="391" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a76e8971f5869a60aac1462e720fead2b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> double</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE double amrex::Gpu::Atomic::Max_device</definition>
        <argsstring>(double *const m, double const value) noexcept</argsstring>
        <name>Max_device</name>
        <param>
          <type>double *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="397" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="397" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a5c122d7c55e6fa6cf6ab6a45a4cf87e5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Long</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE Long amrex::Gpu::Atomic::Max_device</definition>
        <argsstring>(Long *const m, Long const value) noexcept</argsstring>
        <name>Max_device</name>
        <param>
          <type>Long *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>Long const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="405" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="405" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a4a6e235c6fc2013e52d7f1b59bc71bb0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::Gpu::Atomic::Max</definition>
        <argsstring>(T *const m, T const value) noexcept</argsstring>
        <name>Max</name>
        <param>
          <type>T *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="416" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="416" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a53a66f5fe06e3b8839cb0f79f0d0ea3d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::Gpu::Atomic::LogicalOr</definition>
        <argsstring>(int *const m, int const value) noexcept</argsstring>
        <name>LogicalOr</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="432" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="432" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a766ff7e5ed9d78fb3a0d5eaffec9c2ea" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::Gpu::Atomic::LogicalAnd</definition>
        <argsstring>(int *const m, int const value) noexcept</argsstring>
        <name>LogicalAnd</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="454" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="454" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1ac87e449691a622f1f9175c75cb79892a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE unsigned int amrex::Gpu::Atomic::Inc</definition>
        <argsstring>(unsigned int *const m, unsigned int const value) noexcept</argsstring>
        <name>Inc</name>
        <param>
          <type>unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="497" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="497" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1af95f0a9b1d17eef9d886163f84bb20cd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE unsigned int amrex::Gpu::Atomic::Dec</definition>
        <argsstring>(unsigned int *const m, unsigned int const value) noexcept</argsstring>
        <name>Dec</name>
        <param>
          <type>unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="514" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="514" bodyend="533"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1aead1011333d0e8605985cd0ab8c163bf" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::Gpu::Atomic::Exch</definition>
        <argsstring>(T *const address, T const val) noexcept</argsstring>
        <name>Exch</name>
        <param>
          <type>T *const</type>
          <declname>address</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="541" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="541" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a3794cd96c4a2f4b00db9cc1e5d66af87" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::Gpu::Atomic::CAS</definition>
        <argsstring>(T *const address, T compare, T const val) noexcept</argsstring>
        <name>CAS</name>
        <param>
          <type>T *const</type>
          <declname>address</declname>
        </param>
        <param>
          <type>T</type>
          <declname>compare</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="564" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="564" bodyend="580"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="13" column="28"/>
  </compounddef>
</doxygen>
