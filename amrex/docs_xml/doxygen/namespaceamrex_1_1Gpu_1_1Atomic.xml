<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1Gpu_1_1Atomic" kind="namespace" language="C++">
    <compoundname>amrex::Gpu::Atomic</compoundname>
    <innernamespace refid="namespaceamrex_1_1Gpu_1_1Atomic_1_1detail">amrex::Gpu::Atomic::detail</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1ac5c9109594061b3a1d85e3ab239a4729" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>__device__ AMREX_FORCE_INLINE T amrex::Gpu::Atomic::Add_device</definition>
        <argsstring>(T *const sum, T const value) noexcept</argsstring>
        <name>Add_device</name>
        <qualifiedname>amrex::Gpu::Atomic::Add_device</qualifiedname>
        <param>
          <type>T *const</type>
          <declname>sum</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="135" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="135" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1adddd995150221a23eda726c163b1938e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>__device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Long</type>
        <definition>__device__ AMREX_FORCE_INLINE Long amrex::Gpu::Atomic::Add_device</definition>
        <argsstring>(Long *const sum, Long const value) noexcept</argsstring>
        <name>Add_device</name>
        <qualifiedname>amrex::Gpu::Atomic::Add_device</qualifiedname>
        <param>
          <type>Long *const</type>
          <declname>sum</declname>
        </param>
        <param>
          <type>Long const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="173" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1ab8aadbde6a1a136b84a5b69cf01da607" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>__host__ __device__ AMREX_FORCE_INLINE T amrex::Gpu::Atomic::Add</definition>
        <argsstring>(T *sum, T value) noexcept</argsstring>
        <name>Add</name>
        <qualifiedname>amrex::Gpu::Atomic::Add</qualifiedname>
        <param>
          <type>T *</type>
          <declname>sum</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="198" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="198" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a1fadb2b30805417ff8e2dfb0ec569945" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Op</type>
          </param>
          <param>
            <type>typename Cond</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; sizeof(T)==sizeof(unsigned int), int &gt;</type>
            <declname>foo</declname>
            <defname>foo</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>__device__ AMREX_FORCE_INLINE bool amrex::Gpu::Atomic::If_device</definition>
        <argsstring>(T *const sum, T const value, Op &amp;&amp;op, Cond &amp;&amp;cond) noexcept</argsstring>
        <name>If_device</name>
        <qualifiedname>amrex::Gpu::Atomic::If_device</qualifiedname>
        <param>
          <type>T *const</type>
          <declname>sum</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Op &amp;&amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Cond &amp;&amp;</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="220" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="220" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a54472d6cb90e23b6479dc667f7e02669" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Op</type>
          </param>
          <param>
            <type>class Cond</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>__host__ __device__ AMREX_FORCE_INLINE bool amrex::Gpu::Atomic::If</definition>
        <argsstring>(T *const add, T const value, Op &amp;&amp;op, Cond &amp;&amp;cond) noexcept</argsstring>
        <name>If</name>
        <qualifiedname>amrex::Gpu::Atomic::If</qualifiedname>
        <param>
          <type>T *const</type>
          <declname>add</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Op &amp;&amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>Cond &amp;&amp;</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Conditionally perform an atomic operation. </para>
        </briefdescription>
        <detaileddescription>
<para>Atomically updates the result at &quot;add&quot; with &quot;value&quot; using &quot;op&quot;, but only if &quot;cond&quot; is true.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the type pointed to by add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Op</parametername>
</parameternamelist>
<parameterdescription>
<para>callable that takes two T argument and combines them </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Cond</parametername>
</parameternamelist>
<parameterdescription>
<para>callable that takes a &quot;T&quot; a returns whether to do the update</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>add</parametername>
</parameternamelist>
<parameterdescription>
<para>address to atomically update </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to combine </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>callable specifying the operation to use to combine *add and value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cond</parametername>
</parameternamelist>
<parameterdescription>
<para>callable specifying the condition to test on first. The value passed in to the cond function is the would-be combined value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="254" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="254" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a5e61fa764ee1ff23e40f4c350f041e7e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>__host__ __device__ AMREX_FORCE_INLINE void amrex::Gpu::Atomic::AddNoRet</definition>
        <argsstring>(T *sum, T value) noexcept</argsstring>
        <name>AddNoRet</name>
        <qualifiedname>amrex::Gpu::Atomic::AddNoRet</qualifiedname>
        <param>
          <type>T *</type>
          <declname>sum</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="281" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="281" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1aa899e48feb19c785b40e9d1fcfa47116" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>__device__ AMREX_FORCE_INLINE T amrex::Gpu::Atomic::Min_device</definition>
        <argsstring>(T *const m, T const value) noexcept</argsstring>
        <name>Min_device</name>
        <qualifiedname>amrex::Gpu::Atomic::Min_device</qualifiedname>
        <param>
          <type>T *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="311" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="311" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1ab6e4353ea8ffb40a65e16f36fe65e741" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>__device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> float</type>
        <definition>__device__ AMREX_FORCE_INLINE float amrex::Gpu::Atomic::Min_device</definition>
        <argsstring>(float *const m, float const value) noexcept</argsstring>
        <name>Min_device</name>
        <qualifiedname>amrex::Gpu::Atomic::Min_device</qualifiedname>
        <param>
          <type>float *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>float const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="329" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="329" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a32d4ac0977b3c0670435dc04c2000fd6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>__device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> double</type>
        <definition>__device__ AMREX_FORCE_INLINE double amrex::Gpu::Atomic::Min_device</definition>
        <argsstring>(double *const m, double const value) noexcept</argsstring>
        <name>Min_device</name>
        <qualifiedname>amrex::Gpu::Atomic::Min_device</qualifiedname>
        <param>
          <type>double *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="335" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="335" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1ae0abf670fcdf0640cb994bf185767e98" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>__device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Long</type>
        <definition>__device__ AMREX_FORCE_INLINE Long amrex::Gpu::Atomic::Min_device</definition>
        <argsstring>(Long *const m, Long const value) noexcept</argsstring>
        <name>Min_device</name>
        <qualifiedname>amrex::Gpu::Atomic::Min_device</qualifiedname>
        <param>
          <type>Long *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>Long const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="343" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1ae84b6f5f4e912474ddea2e6957e7eff5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>__host__ __device__ AMREX_FORCE_INLINE T amrex::Gpu::Atomic::Min</definition>
        <argsstring>(T *const m, T const value) noexcept</argsstring>
        <name>Min</name>
        <qualifiedname>amrex::Gpu::Atomic::Min</qualifiedname>
        <param>
          <type>T *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="354" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="354" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a5b753d592b4db5f2e4ff302bcc5325db" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>__device__ AMREX_FORCE_INLINE T amrex::Gpu::Atomic::Max_device</definition>
        <argsstring>(T *const m, T const value) noexcept</argsstring>
        <name>Max_device</name>
        <qualifiedname>amrex::Gpu::Atomic::Max_device</qualifiedname>
        <param>
          <type>T *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="374" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="374" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1ac0dd894a84e639438ae6a385ca6b0090" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>__device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> float</type>
        <definition>__device__ AMREX_FORCE_INLINE float amrex::Gpu::Atomic::Max_device</definition>
        <argsstring>(float *const m, float const value) noexcept</argsstring>
        <name>Max_device</name>
        <qualifiedname>amrex::Gpu::Atomic::Max_device</qualifiedname>
        <param>
          <type>float *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>float const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="392" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="392" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a590506e0f167ec914c47b0e56c0fcdc4" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>__device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> double</type>
        <definition>__device__ AMREX_FORCE_INLINE double amrex::Gpu::Atomic::Max_device</definition>
        <argsstring>(double *const m, double const value) noexcept</argsstring>
        <name>Max_device</name>
        <qualifiedname>amrex::Gpu::Atomic::Max_device</qualifiedname>
        <param>
          <type>double *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="398" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="398" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1abd3a0e8ffa9b3a350bafb7fe34e5f5fe" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>__device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Long</type>
        <definition>__device__ AMREX_FORCE_INLINE Long amrex::Gpu::Atomic::Max_device</definition>
        <argsstring>(Long *const m, Long const value) noexcept</argsstring>
        <name>Max_device</name>
        <qualifiedname>amrex::Gpu::Atomic::Max_device</qualifiedname>
        <param>
          <type>Long *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>Long const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="406" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="406" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1adb909da17c74d800eb3e15ca85d5efeb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>__host__ __device__ AMREX_FORCE_INLINE T amrex::Gpu::Atomic::Max</definition>
        <argsstring>(T *const m, T const value) noexcept</argsstring>
        <name>Max</name>
        <qualifiedname>amrex::Gpu::Atomic::Max</qualifiedname>
        <param>
          <type>T *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="417" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="417" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a473df6809f21486d8c6fe79606fbb82e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> int</type>
        <definition>__host__ __device__ AMREX_FORCE_INLINE int amrex::Gpu::Atomic::LogicalOr</definition>
        <argsstring>(int *const m, int const value) noexcept</argsstring>
        <name>LogicalOr</name>
        <qualifiedname>amrex::Gpu::Atomic::LogicalOr</qualifiedname>
        <param>
          <type>int *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="434" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="434" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a38348c8bda2f16dccc6de7fc8b659b2b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> int</type>
        <definition>__host__ __device__ AMREX_FORCE_INLINE int amrex::Gpu::Atomic::LogicalAnd</definition>
        <argsstring>(int *const m, int const value) noexcept</argsstring>
        <name>LogicalAnd</name>
        <qualifiedname>amrex::Gpu::Atomic::LogicalAnd</qualifiedname>
        <param>
          <type>int *const</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="459" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="459" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a036b6d508731d9a30a2c2c8ade0caa39" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>__host__ __device__ AMREX_FORCE_INLINE T amrex::Gpu::Atomic::Exch</definition>
        <argsstring>(T *address, T val) noexcept</argsstring>
        <name>Exch</name>
        <qualifiedname>amrex::Gpu::Atomic::Exch</qualifiedname>
        <param>
          <type>T *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="485" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="485" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a3ce888fd227e6f79d3e3fd829b218207" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>__host__ __device__ AMREX_FORCE_INLINE T amrex::Gpu::Atomic::CAS</definition>
        <argsstring>(T *const address, T compare, T const val) noexcept</argsstring>
        <name>CAS</name>
        <qualifiedname>amrex::Gpu::Atomic::CAS</qualifiedname>
        <param>
          <type>T *const</type>
          <declname>address</declname>
        </param>
        <param>
          <type>T</type>
          <declname>compare</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="511" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="511" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a4ff71b0678874e55f6485c8983b9572c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; sizeof(T)==sizeof(int), int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>__device__ AMREX_FORCE_INLINE T amrex::Gpu::Atomic::Multiply_device</definition>
        <argsstring>(T *const prod, T const value) noexcept</argsstring>
        <name>Multiply_device</name>
        <qualifiedname>amrex::Gpu::Atomic::Multiply_device</qualifiedname>
        <param>
          <type>T *const</type>
          <declname>prod</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="540" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="540" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a3d3f6fdf85315bc77bcb05a3705bf3bb" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>__host__ __device__ AMREX_FORCE_INLINE T amrex::Gpu::Atomic::Multiply</definition>
        <argsstring>(T *const prod, T const value) noexcept</argsstring>
        <name>Multiply</name>
        <qualifiedname>amrex::Gpu::Atomic::Multiply</qualifiedname>
        <param>
          <type>T *const</type>
          <declname>prod</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="556" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="556" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1a2c0f72bc179319a7b7f23a61eff19ccd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; sizeof(T)==sizeof(int), int &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>__device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>__device__ AMREX_FORCE_INLINE T amrex::Gpu::Atomic::Divide_device</definition>
        <argsstring>(T *const quot, T const value) noexcept</argsstring>
        <name>Divide_device</name>
        <qualifiedname>amrex::Gpu::Atomic::Divide_device</qualifiedname>
        <param>
          <type>T *const</type>
          <declname>quot</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="576" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="576" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Gpu_1_1Atomic_1afdca16aa5ab3f498bbe2e219862d9b1f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>__host__ __device__ AMREX_FORCE_INLINE T amrex::Gpu::Atomic::Divide</definition>
        <argsstring>(T *const quot, T const value) noexcept</argsstring>
        <name>Divide</name>
        <qualifiedname>amrex::Gpu::Atomic::Divide</qualifiedname>
        <param>
          <type>T *const</type>
          <declname>quot</declname>
        </param>
        <param>
          <type>T const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="592" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" bodystart="592" bodyend="602"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuAtomic.H" line="13" column="1"/>
  </compounddef>
</doxygen>
