<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1FABio__binary" kind="class" language="C++" prot="public">
    <compoundname>amrex::FABio_binary</compoundname>
    <basecompoundref refid="classamrex_1_1FABio" prot="public" virt="non-virtual">amrex::FABio</basecompoundref>
    <includes refid="AMReX__FArrayBox_8H" local="no">AMReX_FArrayBox.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1FABio__binary_1a6b8a0d2090a56d369c01cabc715edb27" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &gt;</type>
        <definition>std::unique_ptr&lt;RealDescriptor&gt; amrex::FABio_binary::realDesc</definition>
        <argsstring></argsstring>
        <name>realDesc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="193" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="193" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1FABio__binary_1aee3c27ce2964611aa91c4744d7cc9406" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FABio_binary::FABio_binary</definition>
        <argsstring>(RealDescriptor *rd_)</argsstring>
        <name>FABio_binary</name>
        <param>
          <type><ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> *</type>
          <declname>rd_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="171" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="861" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FABio__binary_1a9d1f49ee565f0d188ed763f55f6d6ae9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::FABio_binary::read</definition>
        <argsstring>(std::istream &amp;is, FArrayBox &amp;fb) const override</argsstring>
        <name>read</name>
        <reimplements refid="classamrex_1_1FABio_1a3d35f09a87700e22092fb5e943c82163">read</reimplements>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fb</declname>
        </param>
        <briefdescription>
<para>Pure virtual function. Derived classes MUST override this function to read an <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> from the istream, under the assumption that the header has alread been read. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="173" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="878" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FABio__binary_1afd41640c47c96b51a2a82f9a5e357eb2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::FABio_binary::write</definition>
        <argsstring>(std::ostream &amp;os, const FArrayBox &amp;fb, int comp, int num_comp) const override</argsstring>
        <name>write</name>
        <reimplements refid="classamrex_1_1FABio_1a9ecb5c9d864f0eb7cb8c54ba08a148c9">write</reimplements>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>fb</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comp</declname>
        </param>
        <briefdescription>
<para>Pure virtual function. Derived classes MUST override this function to write the <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> to the ostream, under the assumption that the header for the FAB has already been written. Write it out as if it only had num_comp components with component comp being the first one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="176" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="892" bodyend="909"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FABio__binary_1ae6ab7789b241f47be47b36df4a7289ee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::FABio_binary::skip</definition>
        <argsstring>(std::istream &amp;is, FArrayBox &amp;f) const override</argsstring>
        <name>skip</name>
        <reimplements refid="classamrex_1_1FABio_1a3209c1c8fd600cbd8cd62912efa69d89">skip</reimplements>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Pure virtual function. Derived classes MUST override this function to skip over the next FAB f in the istream, under the assumption that the header for the FAB f has already been skpped over. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="181" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="912" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FABio__binary_1ac15404e86dd5cc0c0f3092192cbd9567" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::FABio_binary::skip</definition>
        <argsstring>(std::istream &amp;is, FArrayBox &amp;f, int nCompToSkip) const override</argsstring>
        <name>skip</name>
        <reimplements refid="classamrex_1_1FABio_1a58b0e6f163ed56a2d5af572f78728b50">skip</reimplements>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nCompToSkip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="184" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="925" bodyend="936"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1FABio__binary_1ad0a86d6929c2694a6303184dba73f2c2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void amrex::FABio_binary::write_header</definition>
        <argsstring>(std::ostream &amp;os, const FArrayBox &amp;f, int nvar) const override</argsstring>
        <name>write_header</name>
        <reimplements refid="classamrex_1_1FABio_1af1cf8858b1a0e49ea7f62461d42f453e">write_header</reimplements>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <briefdescription>
<para>Write out a header describing <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> f that contains nvar components. It must be the case that nvar &lt;= f.nComp(). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="189" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.cpp" bodystart="868" bodyend="875"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1343">
        <label>amrex::FABio_binary</label>
        <link refid="classamrex_1_1FABio__binary"/>
        <childnode refid="1344" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1344">
        <label>amrex::FABio</label>
        <link refid="classamrex_1_1FABio"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1345">
        <label>amrex::FABio_binary</label>
        <link refid="classamrex_1_1FABio__binary"/>
        <childnode refid="1346" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1346">
        <label>amrex::FABio</label>
        <link refid="classamrex_1_1FABio"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" line="169" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FArrayBox.H" bodystart="166" bodyend="194"/>
    <listofallmembers>
      <member refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9fabe3ed4b63ca8c92041feb17a512161f2" prot="public" virt="non-virtual"><scope>amrex::FABio_binary</scope><name>FAB_8BIT</name></member>
      <member refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9fa9712023aa78e143b76acec0dc9e519fb" prot="public" virt="non-virtual"><scope>amrex::FABio_binary</scope><name>FAB_ASCII</name></member>
      <member refid="classamrex_1_1FABio_1a3b1ca82feb278c4a975a46229f229660a6f8d36037f0ae14ae3b2ffd648cb77e7" prot="public" virt="non-virtual"><scope>amrex::FABio_binary</scope><name>FAB_DOUBLE</name></member>
      <member refid="classamrex_1_1FABio_1a3b1ca82feb278c4a975a46229f229660a7ff56f0b5643ef3c51e6503e30f23346" prot="public" virt="non-virtual"><scope>amrex::FABio_binary</scope><name>FAB_FLOAT</name></member>
      <member refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9fa240d58a50ffcc6d51f0b771099168d88" prot="public" virt="non-virtual"><scope>amrex::FABio_binary</scope><name>FAB_IEEE</name></member>
      <member refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9fabedb5f568966bfc42da59ffb65eb3b55" prot="public" virt="non-virtual"><scope>amrex::FABio_binary</scope><name>FAB_IEEE_32</name></member>
      <member refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9fab0d0613c5d24142abfc947d29d074e0c" prot="public" virt="non-virtual"><scope>amrex::FABio_binary</scope><name>FAB_NATIVE</name></member>
      <member refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9fa3622542334cc06301ae11275e2eaf4ee" prot="public" virt="non-virtual"><scope>amrex::FABio_binary</scope><name>FAB_NATIVE_32</name></member>
      <member refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39a8db2674dc83889b0c41bf7a2de656e0b" prot="public" virt="non-virtual"><scope>amrex::FABio_binary</scope><name>FAB_NORMAL_ORDER</name></member>
      <member refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39a0a373e16d57bf0778632d93de56c7bb3" prot="public" virt="non-virtual"><scope>amrex::FABio_binary</scope><name>FAB_REVERSE_ORDER</name></member>
      <member refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39aa3be82b329f78e16b9f23ba2b26116a3" prot="public" virt="non-virtual"><scope>amrex::FABio_binary</scope><name>FAB_REVERSE_ORDER_2</name></member>
      <member refid="classamrex_1_1FABio__binary_1aee3c27ce2964611aa91c4744d7cc9406" prot="public" virt="non-virtual"><scope>amrex::FABio_binary</scope><name>FABio_binary</name></member>
      <member refid="classamrex_1_1FABio_1a0b27140f46fecbc14d58f1a754300e9f" prot="public" virt="non-virtual"><scope>amrex::FABio_binary</scope><name>Format</name></member>
      <member refid="classamrex_1_1FABio_1adbdc54b2ed6a4fa2d0cfd19076e5cc39" prot="public" virt="non-virtual"><scope>amrex::FABio_binary</scope><name>Ordering</name></member>
      <member refid="classamrex_1_1FABio_1a3b1ca82feb278c4a975a46229f229660" prot="public" virt="non-virtual"><scope>amrex::FABio_binary</scope><name>Precision</name></member>
      <member refid="classamrex_1_1FABio__binary_1a9d1f49ee565f0d188ed763f55f6d6ae9" prot="public" virt="virtual"><scope>amrex::FABio_binary</scope><name>read</name></member>
      <member refid="classamrex_1_1FABio_1a5f0e9754f27698eb89c86433c6cc3fc5" prot="public" virt="non-virtual"><scope>amrex::FABio_binary</scope><name>read_header</name></member>
      <member refid="classamrex_1_1FABio_1afb78d32e7b4d8ef3e4e430c3c7b8598a" prot="public" virt="non-virtual"><scope>amrex::FABio_binary</scope><name>read_header</name></member>
      <member refid="classamrex_1_1FABio__binary_1a6b8a0d2090a56d369c01cabc715edb27" prot="private" virt="non-virtual"><scope>amrex::FABio_binary</scope><name>realDesc</name></member>
      <member refid="classamrex_1_1FABio__binary_1ae6ab7789b241f47be47b36df4a7289ee" prot="public" virt="virtual"><scope>amrex::FABio_binary</scope><name>skip</name></member>
      <member refid="classamrex_1_1FABio__binary_1ac15404e86dd5cc0c0f3092192cbd9567" prot="public" virt="virtual"><scope>amrex::FABio_binary</scope><name>skip</name></member>
      <member refid="classamrex_1_1FABio__binary_1afd41640c47c96b51a2a82f9a5e357eb2" prot="public" virt="virtual"><scope>amrex::FABio_binary</scope><name>write</name></member>
      <member refid="classamrex_1_1FABio__binary_1ad0a86d6929c2694a6303184dba73f2c2" prot="private" virt="virtual"><scope>amrex::FABio_binary</scope><name>write_header</name></member>
      <member refid="classamrex_1_1FABio_1a083e8bc68fa9f61b921f6aec21ea3f95" prot="public" virt="virtual"><scope>amrex::FABio_binary</scope><name>~FABio</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
