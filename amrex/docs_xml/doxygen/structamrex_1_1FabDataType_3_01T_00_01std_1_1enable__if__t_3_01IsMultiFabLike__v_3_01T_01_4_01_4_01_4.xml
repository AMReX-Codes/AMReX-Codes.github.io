<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1FabDataType_3_01T_00_01std_1_1enable__if__t_3_01IsMultiFabLike__v_3_01T_01_4_01_4_01_4" kind="struct" language="C++" prot="public">
    <compoundname>amrex::FabDataType&lt; T, std::enable_if_t&lt; IsMultiFabLike_v&lt; T &gt; &gt; &gt;</compoundname>
    <includes refid="AMReX__FabDataType_8H" local="no">AMReX_FabDataType.H</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structamrex_1_1FabDataType_3_01T_00_01std_1_1enable__if__t_3_01IsMultiFabLike__v_3_01T_01_4_01_4_01_4_1a2ba7d2b780a3d216cfaf1fde7fd13e3b" prot="public" static="no">
        <type>typename T::fab_type</type>
        <definition>using amrex::FabDataType&lt; T, std::enable_if_t&lt; IsMultiFabLike_v&lt; T &gt; &gt; &gt;::fab_type =  typename T::fab_type</definition>
        <argsstring></argsstring>
        <name>fab_type</name>
        <qualifiedname>amrex::FabDataType&lt; T, std::enable_if_t&lt; IsMultiFabLike_v&lt; T &gt; &gt; &gt;::fab_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabDataType.H" line="14" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabDataType.H" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1FabDataType_3_01T_00_01std_1_1enable__if__t_3_01IsMultiFabLike__v_3_01T_01_4_01_4_01_4_1aa3d626c31226662da6f99c9732d5d273" prot="public" static="no">
        <type>typename T::value_type</type>
        <definition>using amrex::FabDataType&lt; T, std::enable_if_t&lt; IsMultiFabLike_v&lt; T &gt; &gt; &gt;::value_type =  typename T::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>amrex::FabDataType&lt; T, std::enable_if_t&lt; IsMultiFabLike_v&lt; T &gt; &gt; &gt;::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabDataType.H" line="15" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabDataType.H" bodystart="15" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabDataType.H" line="12" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabDataType.H" bodystart="13" bodyend="16"/>
    <listofallmembers>
      <member refid="structamrex_1_1FabDataType_3_01T_00_01std_1_1enable__if__t_3_01IsMultiFabLike__v_3_01T_01_4_01_4_01_4_1a2ba7d2b780a3d216cfaf1fde7fd13e3b" prot="public" virt="non-virtual"><scope>amrex::FabDataType&lt; T, std::enable_if_t&lt; IsMultiFabLike_v&lt; T &gt; &gt; &gt;</scope><name>fab_type</name></member>
      <member refid="structamrex_1_1FabDataType_3_01T_00_01std_1_1enable__if__t_3_01IsMultiFabLike__v_3_01T_01_4_01_4_01_4_1aa3d626c31226662da6f99c9732d5d273" prot="public" virt="non-virtual"><scope>amrex::FabDataType&lt; T, std::enable_if_t&lt; IsMultiFabLike_v&lt; T &gt; &gt; &gt;</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
