<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1FFT_1_1R2C" kind="class" language="C++" prot="public">
    <compoundname>amrex::FFT::R2C</compoundname>
    <includes refid="AMReX__FFT_8H" local="no">AMReX_FFT.H</includes>
    <innerclass refid="structamrex_1_1FFT_1_1R2C_1_1Plan" prot="private">amrex::FFT::R2C::Plan</innerclass>
    <innerclass refid="structamrex_1_1FFT_1_1R2C_1_1Plan2" prot="private">amrex::FFT::R2C::Plan2</innerclass>
    <innerclass refid="structamrex_1_1FFT_1_1R2C_1_1RotateBwd" prot="public">amrex::FFT::R2C::RotateBwd</innerclass>
    <innerclass refid="structamrex_1_1FFT_1_1R2C_1_1RotateFwd" prot="public">amrex::FFT::R2C::RotateFwd</innerclass>
    <innerclass refid="structamrex_1_1FFT_1_1R2C_1_1Swap01" prot="public">amrex::FFT::R2C::Swap01</innerclass>
    <innerclass refid="structamrex_1_1FFT_1_1R2C_1_1Swap02" prot="public">amrex::FFT::R2C::Swap02</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
        <defval>Real</defval>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0" kindref="member">FFT::Direction</ref></type>
        <declname>D</declname>
        <defname>D</defname>
        <defval><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0af6cb3e816496528d4187db53bc66567f" kindref="member">FFT::Direction::both</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1FFT_1_1R2C_1a1b7762ef1efa97491ef9805677ce9818" prot="public" static="no">
        <type>std::conditional_t&lt; std::is_same_v&lt; T, Real &gt;, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &gt; &gt;</type>
        <definition>using amrex::FFT::R2C&lt; T, D &gt;::MF =  std::conditional_t&lt;std::is_same_v&lt;T,Real&gt;, MultiFab, FabArray&lt;BaseFab&lt;T&gt; &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>MF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="48" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FFT_1_1R2C_1aa7c7335d76c9a949714e5b10ca90c3dc" prot="public" static="no">
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &gt; &gt;</type>
        <definition>using amrex::FFT::R2C&lt; T, D &gt;::cMF =  FabArray&lt;BaseFab&lt;GpuComplex&lt;T&gt; &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>cMF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="50" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classamrex_1_1FFT_1_1R2C_1a0bd436a5c7ef586650852b44223752b3" prot="private" static="no">
        <type>cufftHandle</type>
        <definition>using amrex::FFT::R2C&lt; T, D &gt;::VendorPlan =  cufftHandle</definition>
        <argsstring></argsstring>
        <name>VendorPlan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="261" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FFT_1_1R2C_1a9777281071a3af0473a025b8ad76fa71" prot="private" static="no">
        <type><ref refid="classamrex_1_1FFT_1_1R2C_1a0bd436a5c7ef586650852b44223752b3" kindref="member">VendorPlan</ref></type>
        <definition>using amrex::FFT::R2C&lt; T, D &gt;::VendorPlan2 =  VendorPlan</definition>
        <argsstring></argsstring>
        <name>VendorPlan2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="262" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FFT_1_1R2C_1a6d9a4c54157093a3d22dd13ef30b8d6b" prot="private" static="no">
        <type>std::conditional_t&lt; std::is_same_v&lt; float, T &gt;, cuComplex, cuDoubleComplex &gt;</type>
        <definition>using amrex::FFT::R2C&lt; T, D &gt;::FFTComplex =  std::conditional_t&lt;std::is_same_v&lt;float,T&gt;, cuComplex, cuDoubleComplex&gt;</definition>
        <argsstring></argsstring>
        <name>FFTComplex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="263" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="264" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a04e70f5fb5c97c0297ecf1e2d77dfd08" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1R2C_1_1Plan" kindref="compound">Plan</ref></type>
        <definition>Plan amrex::FFT::R2C&lt; T, D &gt;::m_fft_fwd_x</definition>
        <argsstring></argsstring>
        <name>m_fft_fwd_x</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="320" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1ab32bd2842a5ea4e0b1b82923866e822d" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1R2C_1_1Plan" kindref="compound">Plan</ref></type>
        <definition>Plan amrex::FFT::R2C&lt; T, D &gt;::m_fft_bwd_x</definition>
        <argsstring></argsstring>
        <name>m_fft_bwd_x</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="321" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1ab27c8ced332e24bb45171abbc0902f4a" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1R2C_1_1Plan2" kindref="compound">Plan2</ref></type>
        <definition>Plan2 amrex::FFT::R2C&lt; T, D &gt;::m_fft_fwd_y</definition>
        <argsstring></argsstring>
        <name>m_fft_fwd_y</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="322" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1ac9c5ea94acb20d8f5131e857376a4fda" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1R2C_1_1Plan2" kindref="compound">Plan2</ref></type>
        <definition>Plan2 amrex::FFT::R2C&lt; T, D &gt;::m_fft_bwd_y</definition>
        <argsstring></argsstring>
        <name>m_fft_bwd_y</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="323" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a82b94ba065c1da3446b016d2fcbb5bf5" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1R2C_1_1Plan2" kindref="compound">Plan2</ref></type>
        <definition>Plan2 amrex::FFT::R2C&lt; T, D &gt;::m_fft_fwd_z</definition>
        <argsstring></argsstring>
        <name>m_fft_fwd_z</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="324" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a778e03de9cff31aa71f8b5977fda5f7b" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1R2C_1_1Plan2" kindref="compound">Plan2</ref></type>
        <definition>Plan2 amrex::FFT::R2C&lt; T, D &gt;::m_fft_bwd_z</definition>
        <argsstring></argsstring>
        <name>m_fft_bwd_z</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="325" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a918477cde28824f702acc29c93426141" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1NonLocalBC_1_1MultiBlockCommMetaData" kindref="compound">MultiBlockCommMetaData</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MultiBlockCommMetaData&gt; amrex::FFT::R2C&lt; T, D &gt;::m_cmd_x2y</definition>
        <argsstring></argsstring>
        <name>m_cmd_x2y</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="330" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1ad3a1611b1ca933d17e99ac17cf88ea62" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1NonLocalBC_1_1MultiBlockCommMetaData" kindref="compound">MultiBlockCommMetaData</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MultiBlockCommMetaData&gt; amrex::FFT::R2C&lt; T, D &gt;::m_cmd_y2x</definition>
        <argsstring></argsstring>
        <name>m_cmd_y2x</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="331" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1ab75dc0f07a97bcf1aa07bf867036d7c6" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1NonLocalBC_1_1MultiBlockCommMetaData" kindref="compound">MultiBlockCommMetaData</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MultiBlockCommMetaData&gt; amrex::FFT::R2C&lt; T, D &gt;::m_cmd_y2z</definition>
        <argsstring></argsstring>
        <name>m_cmd_y2z</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="332" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a82bc17cf6f48651e7cbdedb5d828c5af" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1NonLocalBC_1_1MultiBlockCommMetaData" kindref="compound">MultiBlockCommMetaData</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MultiBlockCommMetaData&gt; amrex::FFT::R2C&lt; T, D &gt;::m_cmd_z2y</definition>
        <argsstring></argsstring>
        <name>m_cmd_z2y</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="333" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1ae171b394ef7e5387eb9f7ae417bba2f4" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1R2C_1_1Swap01" kindref="compound">Swap01</ref></type>
        <definition>Swap01 amrex::FFT::R2C&lt; T, D &gt;::m_dtos_x2y</definition>
        <argsstring></argsstring>
        <name>m_dtos_x2y</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="334" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a9c2aab94da1f64fb53a37dfc80efc592" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1R2C_1_1Swap01" kindref="compound">Swap01</ref></type>
        <definition>Swap01 amrex::FFT::R2C&lt; T, D &gt;::m_dtos_y2x</definition>
        <argsstring></argsstring>
        <name>m_dtos_y2x</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="335" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a04530da756c11fca01063d574565cd69" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1R2C_1_1Swap02" kindref="compound">Swap02</ref></type>
        <definition>Swap02 amrex::FFT::R2C&lt; T, D &gt;::m_dtos_y2z</definition>
        <argsstring></argsstring>
        <name>m_dtos_y2z</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="336" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a0b83890e9dcc1a178bc7efddbda05595" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1R2C_1_1Swap02" kindref="compound">Swap02</ref></type>
        <definition>Swap02 amrex::FFT::R2C&lt; T, D &gt;::m_dtos_z2y</definition>
        <argsstring></argsstring>
        <name>m_dtos_z2y</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="337" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a550a73dbe3b3401569be56cbe7fb1366" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1FFT_1_1R2C_1a1b7762ef1efa97491ef9805677ce9818" kindref="member">MF</ref></type>
        <definition>MF amrex::FFT::R2C&lt; T, D &gt;::m_rx</definition>
        <argsstring></argsstring>
        <name>m_rx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="339" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a432916244b0cdaf0faaf4a9307373551" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1FFT_1_1R2C_1aa7c7335d76c9a949714e5b10ca90c3dc" kindref="member">cMF</ref></type>
        <definition>cMF amrex::FFT::R2C&lt; T, D &gt;::m_cx</definition>
        <argsstring></argsstring>
        <name>m_cx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="340" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="340" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a142653e23cb3ff5a6d6b78ce9fabbc11" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1FFT_1_1R2C_1aa7c7335d76c9a949714e5b10ca90c3dc" kindref="member">cMF</ref></type>
        <definition>cMF amrex::FFT::R2C&lt; T, D &gt;::m_cy</definition>
        <argsstring></argsstring>
        <name>m_cy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="341" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1aa5b77ddebb8cd7ca2198aa74a752171d" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1FFT_1_1R2C_1aa7c7335d76c9a949714e5b10ca90c3dc" kindref="member">cMF</ref></type>
        <definition>cMF amrex::FFT::R2C&lt; T, D &gt;::m_cz</definition>
        <argsstring></argsstring>
        <name>m_cz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="342" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1ab61c759c9b1dc4f010f36c3ea5f52a1f" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::FFT::R2C&lt; T, D &gt;::m_real_domain</definition>
        <argsstring></argsstring>
        <name>m_real_domain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="344" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a08e5528a477e63f9bd0d29d5bf27a989" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::FFT::R2C&lt; T, D &gt;::m_spectral_domain_x</definition>
        <argsstring></argsstring>
        <name>m_spectral_domain_x</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="345" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a5858e781b78f84455eb1ee4bc4a8d1cc" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::FFT::R2C&lt; T, D &gt;::m_spectral_domain_y</definition>
        <argsstring></argsstring>
        <name>m_spectral_domain_y</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="346" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a0feaf7887ae84686028a8eed6ceb0625" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::FFT::R2C&lt; T, D &gt;::m_spectral_domain_z</definition>
        <argsstring></argsstring>
        <name>m_spectral_domain_z</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="347" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a66718d5c702b86a495b1355b4800a234" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1Info" kindref="compound">Info</ref></type>
        <definition>Info amrex::FFT::R2C&lt; T, D &gt;::m_info</definition>
        <argsstring></argsstring>
        <name>m_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="349" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="349" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1aedae67822f8809e38b2a7c5378efb8bf" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FFT::R2C&lt; T, D &gt;::R2C</definition>
        <argsstring>(Box const &amp;domain, Info const &amp;info=Info{})</argsstring>
        <name>R2C</name>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1FFT_1_1Info" kindref="compound">Info</ref> const &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1FFT_1_1Info" kindref="compound">Info</ref>{}</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>domain</parametername>
</parameternamelist>
<parameterdescription>
<para>the forward domain (i.e., the domain of the real data) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>optional information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="58" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="353" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1ad45dde36a7f97978a78fc37119b6f4a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FFT::R2C&lt; T, D &gt;::~R2C&lt; T, D &gt;</definition>
        <argsstring>()</argsstring>
        <name>~R2C</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="60" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="574" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a7a7c7479e45148841ed112fa7bd246d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FFT::R2C&lt; T, D &gt;::R2C</definition>
        <argsstring>(R2C const &amp;)=delete</argsstring>
        <name>R2C</name>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C" kindref="compound">R2C</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="62" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1aa7b45fd640aae7eb89f38cd3516052f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FFT::R2C&lt; T, D &gt;::R2C</definition>
        <argsstring>(R2C &amp;&amp;)=delete</argsstring>
        <name>R2C</name>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C" kindref="compound">R2C</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="63" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a63f4e11b4c00677537f4baf17bf75c61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FFT_1_1R2C" kindref="compound">R2C</ref> &amp;</type>
        <definition>R2C&amp; amrex::FFT::R2C&lt; T, D &gt;::operator=</definition>
        <argsstring>(R2C const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C" kindref="compound">R2C</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="64" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a9f1023c20a7778b3ffa972c1198a6b91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FFT_1_1R2C" kindref="compound">R2C</ref> &amp;</type>
        <definition>R2C&amp; amrex::FFT::R2C&lt; T, D &gt;::operator=</definition>
        <argsstring>(R2C &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C" kindref="compound">R2C</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="65" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1aed8fb73920e06ef16ab6423d94095e3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0" kindref="member">Direction</ref></type>
            <declname>DIR</declname>
            <defname>DIR</defname>
            <defval>D</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0af6cb3e816496528d4187db53bc66567f" kindref="member">Direction::both</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D &gt;::forwardThenBackward</definition>
        <argsstring>(MF const &amp;inmf, MF &amp;outmf, F const &amp;post_forward)</argsstring>
        <name>forwardThenBackward</name>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1a1b7762ef1efa97491ef9805677ce9818" kindref="member">MF</ref> const &amp;</type>
          <declname>inmf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1a1b7762ef1efa97491ef9805677ce9818" kindref="member">MF</ref> &amp;</type>
          <declname>outmf</declname>
        </param>
        <param>
          <type>F const &amp;</type>
          <declname>post_forward</declname>
        </param>
        <briefdescription>
<para>Forward and then backward transform. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is available only when this class template is instantiated for transforms in both directions. It&apos;s more efficient than calling the forward function that stores the spectral data in a caller provided container followed by the backward function, because this can avoid parallel communication between the internal data and the caller&apos;s data container.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inmf</parametername>
</parameternamelist>
<parameterdescription>
<para>input data in <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> or <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt;BaseFab&lt;float&gt;&gt; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outmf</parametername>
</parameternamelist>
<parameterdescription>
<para>output data in <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> or <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt;BaseFab&lt;float&gt;&gt; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>post_forward</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object for processing the post-forward data before the backward transform. Its interface is <computeroutput>(int,int,int,<ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt;T&gt;&amp;)</computeroutput>, where the integers are indices in the spectral space, and the reference to the complex number allows for the modification of the spectral data at that location. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="88" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="88" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1aaf3df431ab47c82b617db0bbaa3df065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0" kindref="member">Direction</ref></type>
            <declname>DIR</declname>
            <defname>DIR</defname>
            <defval>D</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0a965dbaac085fc891bfbbd4f9d145bbc8" kindref="member">Direction::forward</ref>||DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0af6cb3e816496528d4187db53bc66567f" kindref="member">Direction::both</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D &gt;::forward</definition>
        <argsstring>(MF const &amp;inmf)</argsstring>
        <name>forward</name>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1a1b7762ef1efa97491ef9805677ce9818" kindref="member">MF</ref> const &amp;</type>
          <declname>inmf</declname>
        </param>
        <briefdescription>
<para>Forward transform. </para>
        </briefdescription>
        <detaileddescription>
<para>The output is stored in this object&apos;s internal data. This function is not available when this class template is instantiated for backward-only transform.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inmf</parametername>
</parameternamelist>
<parameterdescription>
<para>input data in <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> or <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt;BaseFab&lt;float&gt;&gt; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="106" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="730" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a4480edfaddeb5887f3f342cf7dbc4ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0" kindref="member">Direction</ref></type>
            <declname>DIR</declname>
            <defname>DIR</defname>
            <defval>D</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0a965dbaac085fc891bfbbd4f9d145bbc8" kindref="member">Direction::forward</ref>||DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0af6cb3e816496528d4187db53bc66567f" kindref="member">Direction::both</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D &gt;::forward</definition>
        <argsstring>(MF const &amp;inmf, cMF &amp;outmf)</argsstring>
        <name>forward</name>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1a1b7762ef1efa97491ef9805677ce9818" kindref="member">MF</ref> const &amp;</type>
          <declname>inmf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1aa7c7335d76c9a949714e5b10ca90c3dc" kindref="member">cMF</ref> &amp;</type>
          <declname>outmf</declname>
        </param>
        <briefdescription>
<para>Forward transform. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is not available when this class template is instantiated for backward-only transform.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inmf</parametername>
</parameternamelist>
<parameterdescription>
<para>input data in <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> or <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt;BaseFab&lt;float&gt;&gt; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outmf</parametername>
</parameternamelist>
<parameterdescription>
<para>output data in <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt;<ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt;GpuComplex&lt;T&gt;&gt;&gt; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="119" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="930" bodyend="945"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1af6207a324a63a3fb280fd7cd92654608" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0" kindref="member">Direction</ref></type>
            <declname>DIR</declname>
            <defname>DIR</defname>
            <defval>D</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0af6cb3e816496528d4187db53bc66567f" kindref="member">Direction::both</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D &gt;::backward</definition>
        <argsstring>(MF &amp;outmf)</argsstring>
        <name>backward</name>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1a1b7762ef1efa97491ef9805677ce9818" kindref="member">MF</ref> &amp;</type>
          <declname>outmf</declname>
        </param>
        <briefdescription>
<para>Backward transform. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is available only when this class template is instantiated for transforms in both directions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outmf</parametername>
</parameternamelist>
<parameterdescription>
<para>output data in <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> or <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt;BaseFab&lt;float&gt;&gt; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="130" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="748" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1ad18a94fe497cd36ca1a79664087b1137" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0" kindref="member">Direction</ref></type>
            <declname>DIR</declname>
            <defname>DIR</defname>
            <defval>D</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0a195fe59b6f103787a914aead0f3db502" kindref="member">Direction::backward</ref>||DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0af6cb3e816496528d4187db53bc66567f" kindref="member">Direction::both</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D &gt;::backward</definition>
        <argsstring>(cMF const &amp;inmf, MF &amp;outmf)</argsstring>
        <name>backward</name>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1aa7c7335d76c9a949714e5b10ca90c3dc" kindref="member">cMF</ref> const &amp;</type>
          <declname>inmf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1a1b7762ef1efa97491ef9805677ce9818" kindref="member">MF</ref> &amp;</type>
          <declname>outmf</declname>
        </param>
        <briefdescription>
<para>Backward transform. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is not available when this class template is instantiated for forward-only transform.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inmf</parametername>
</parameternamelist>
<parameterdescription>
<para>input data in <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt;<ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt;GpuComplex&lt;T&gt;&gt;&gt; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outmf</parametername>
</parameternamelist>
<parameterdescription>
<para>output data in <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> or <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt;BaseFab&lt;float&gt;&gt; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="143" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="950" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1ab005c3b824df79da71c729d1d068f6e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0" kindref="member">Direction</ref></type>
            <declname>DIR</declname>
            <defname>DIR</defname>
            <defval>D</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0a965dbaac085fc891bfbbd4f9d145bbc8" kindref="member">Direction::forward</ref>||DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0af6cb3e816496528d4187db53bc66567f" kindref="member">Direction::both</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; <ref refid="classamrex_1_1FFT_1_1R2C_1aa7c7335d76c9a949714e5b10ca90c3dc" kindref="member">cMF</ref> *, <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt;</type>
        <definition>std::pair&lt;cMF*,IntVect&gt; amrex::FFT::R2C&lt; T, D &gt;::getSpectralData</definition>
        <argsstring>()</argsstring>
        <name>getSpectralData</name>
        <briefdescription>
<para>Get the internal spectral data. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is not available when this class template is instantiated for backward-only transform. For performance reasons, the returned data array does not have the usual ordering of <computeroutput>(x,y,z)</computeroutput>. The order is specified in the second part of the return value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="156" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a8474794974265fa33e66cc7f6a964fcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D &gt;::post_forward_doit</definition>
        <argsstring>(F const &amp;post_forward)</argsstring>
        <name>post_forward_doit</name>
        <param>
          <type>F const &amp;</type>
          <declname>post_forward</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="256" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="873" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a7fa4d604aa9263da0656e2e516c71c6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0" kindref="member">Direction</ref></type>
            <declname>DIR</declname>
            <defname>DIR</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt; DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0a965dbaac085fc891bfbbd4f9d145bbc8" kindref="member">Direction::forward</ref>||DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0af6cb3e816496528d4187db53bc66567f" kindref="member">Direction::both</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; typename <ref refid="classamrex_1_1FFT_1_1R2C" kindref="compound">R2C</ref>&lt; T, D &gt;::<ref refid="classamrex_1_1FFT_1_1R2C_1aa7c7335d76c9a949714e5b10ca90c3dc" kindref="member">cMF</ref> *, <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt;</type>
        <definition>std::pair&lt;typename R2C&lt;T,D&gt;::cMF *, IntVect&gt; amrex::FFT::R2C&lt; T, D &gt;::getSpectralData</definition>
        <argsstring>()</argsstring>
        <name>getSpectralData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="916" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="916" bodyend="925"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a9ffa3ca57820e79a0e5a778c2329baab" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FA</type>
          </param>
        </templateparamlist>
        <type>FA::FABType::value_type *</type>
        <definition>static FA::FABType::value_type* amrex::FFT::R2C&lt; T, D &gt;::get_fab</definition>
        <argsstring>(FA &amp;fa)</argsstring>
        <name>get_fab</name>
        <param>
          <type>FA &amp;</type>
          <declname>fa</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="300" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="300" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a73e5fe98b673a18e8c468d40794fa149" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D &gt;::exec_r2c</definition>
        <argsstring>(Plan plan, MF &amp;in, cMF &amp;out)</argsstring>
        <name>exec_r2c</name>
        <param>
          <type><ref refid="structamrex_1_1FFT_1_1R2C_1_1Plan" kindref="compound">Plan</ref></type>
          <declname>plan</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1a1b7762ef1efa97491ef9805677ce9818" kindref="member">MF</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1aa7c7335d76c9a949714e5b10ca90c3dc" kindref="member">cMF</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="309" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="633" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1aa7c1e3bd536c1b4af80bbcfc7dee971b" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D &gt;::exec_c2r</definition>
        <argsstring>(Plan plan, cMF &amp;in, MF &amp;out)</argsstring>
        <name>exec_c2r</name>
        <param>
          <type><ref refid="structamrex_1_1FFT_1_1R2C_1_1Plan" kindref="compound">Plan</ref></type>
          <declname>plan</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1aa7c7335d76c9a949714e5b10ca90c3dc" kindref="member">cMF</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1a1b7762ef1efa97491ef9805677ce9818" kindref="member">MF</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="310" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="664" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a4fe82bc467752c727dea31f0e69c592a" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0" kindref="member">Direction</ref></type>
            <declname>direction</declname>
            <defname>direction</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D &gt;::exec_c2c</definition>
        <argsstring>(Plan2 plan, cMF &amp;inout)</argsstring>
        <name>exec_c2c</name>
        <param>
          <type><ref refid="structamrex_1_1FFT_1_1R2C_1_1Plan2" kindref="compound">Plan2</ref></type>
          <declname>plan</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1aa7c7335d76c9a949714e5b10ca90c3dc" kindref="member">cMF</ref> &amp;</type>
          <declname>inout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="312" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="696" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a5e49d612455497f4fc45e0164f9df47b" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D &gt;::destroy_plan</definition>
        <argsstring>(P plan)</argsstring>
        <name>destroy_plan</name>
        <param>
          <type>P</type>
          <declname>plan</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="315" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="552" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a73e78cb5865d5a5d2574a4bae30b7560" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="structamrex_1_1FFT_1_1R2C_1_1Plan2" kindref="compound">Plan2</ref>, <ref refid="structamrex_1_1FFT_1_1R2C_1_1Plan2" kindref="compound">Plan2</ref> &gt;</type>
        <definition>std::pair&lt; typename R2C&lt; T, D &gt;::Plan2, typename R2C&lt; T, D &gt;::Plan2 &gt; amrex::FFT::R2C&lt; T, D &gt;::make_c2c_plans</definition>
        <argsstring>(cMF &amp;inout)</argsstring>
        <name>make_c2c_plans</name>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1aa7c7335d76c9a949714e5b10ca90c3dc" kindref="member">cMF</ref> &amp;</type>
          <declname>inout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="316" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="772" bodyend="869"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a3ef20715b15ca5135a035af78547af69" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D &gt;::backward_doit</definition>
        <argsstring>(MF &amp;outmf)</argsstring>
        <name>backward_doit</name>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1a1b7762ef1efa97491ef9805677ce9818" kindref="member">MF</ref> &amp;</type>
          <declname>outmf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="318" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="754" bodyend="768"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Discrete Fourier Transform. </para>
    </briefdescription>
    <detaileddescription>
<para>This class supports Fourier transforms between real and complex data. The name <ref refid="classamrex_1_1FFT_1_1R2C" kindref="compound">R2C</ref> indicates that the forward transform converts real data to complex data, while the backward transform converts complex data to real data. It should be noted that both directions of transformation are supported, not just from real to complex. The scaling follows the FFTW convention, where applying the forward transform followed by the backward transform scales the original data by the size of the input array.</para>
<para>For more details, we refer the users to <ulink url="https://amrex-codes.github.io/amrex/docs_html/FFT_Chapter.html">https://amrex-codes.github.io/amrex/docs_html/FFT_Chapter.html</ulink>. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="35">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="36" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="58">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="19">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="16" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>std::map&lt; amrex::FabArrayBase::BDKey, int &gt;</label>
        <childnode refid="22" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>K</label>
      </node>
      <node id="20">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="6">
        <label>T</label>
      </node>
      <node id="1">
        <label>amrex::FFT::R2C&lt; T, D &gt;</label>
        <link refid="classamrex_1_1FFT_1_1R2C"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_cx</edgelabel>
          <edgelabel>m_cy</edgelabel>
          <edgelabel>m_cz</edgelabel>
        </childnode>
        <childnode refid="68" relation="usage">
          <edgelabel>m_cmd_x2y</edgelabel>
          <edgelabel>m_cmd_y2x</edgelabel>
          <edgelabel>m_cmd_y2z</edgelabel>
          <edgelabel>m_cmd_z2y</edgelabel>
        </childnode>
        <childnode refid="69" relation="usage">
          <edgelabel>m_fft_bwd_x</edgelabel>
          <edgelabel>m_fft_fwd_x</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>m_real_domain</edgelabel>
          <edgelabel>m_spectral_domain_x</edgelabel>
          <edgelabel>m_spectral_domain_y</edgelabel>
          <edgelabel>m_spectral_domain_z</edgelabel>
        </childnode>
        <childnode refid="70" relation="usage">
          <edgelabel>m_info</edgelabel>
        </childnode>
        <childnode refid="71" relation="usage">
          <edgelabel>m_dtos_x2y</edgelabel>
          <edgelabel>m_dtos_y2x</edgelabel>
        </childnode>
        <childnode refid="72" relation="usage">
          <edgelabel>m_dtos_y2z</edgelabel>
          <edgelabel>m_dtos_z2y</edgelabel>
        </childnode>
        <childnode refid="73" relation="usage">
          <edgelabel>m_fft_bwd_y</edgelabel>
          <edgelabel>m_fft_bwd_z</edgelabel>
          <edgelabel>m_fft_fwd_y</edgelabel>
          <edgelabel>m_fft_fwd_z</edgelabel>
        </childnode>
      </node>
      <node id="67">
        <label>std::unique_ptr&lt; amrex::PCData&lt; BaseFab&lt; GpuComplex&lt; Real &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="11">
        <label>amrex::Math::FastDivmodU64</label>
        <link refid="structamrex_1_1Math_1_1FastDivmodU64"/>
      </node>
      <node id="71">
        <label>amrex::FFT::R2C&lt; T, D &gt;::Swap01</label>
        <link refid="structamrex_1_1FFT_1_1R2C_1_1Swap01"/>
      </node>
      <node id="68">
        <label>std::unique_ptr&lt; amrex::NonLocalBC::MultiBlockCommMetaData &gt;</label>
      </node>
      <node id="72">
        <label>amrex::FFT::R2C&lt; T, D &gt;::Swap02</label>
        <link refid="structamrex_1_1FFT_1_1R2C_1_1Swap02"/>
      </node>
      <node id="16">
        <label>amrex::IndexTypeND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IndexTypeND"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="66">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
      </node>
      <node id="51">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="52" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="29" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="59">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
      </node>
      <node id="4">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="52">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="53" relation="usage">
          <edgelabel>m_profiler</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="33">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
      </node>
      <node id="40">
        <label>std::map&lt; std::string, amrex::FabArrayBase::meminfo &gt;</label>
        <childnode refid="41" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="69">
        <label>amrex::FFT::R2C&lt; T, D &gt;::Plan</label>
        <link refid="structamrex_1_1FFT_1_1R2C_1_1Plan"/>
      </node>
      <node id="15">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="24">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="9" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
      </node>
      <node id="49">
        <label>std::vector&lt; BaseFab&lt; GpuComplex&lt; Real &gt; &gt; * &gt;</label>
        <childnode refid="50" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="12">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="13" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="27">
        <label>amrex::BoxND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1BoxND"/>
      </node>
      <node id="18">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="65">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="13">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="14" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
      </node>
      <node id="53">
        <label>amrex::Arena::ArenaProfiler</label>
        <link refid="structamrex_1_1Arena_1_1ArenaProfiler"/>
        <childnode refid="54" relation="usage">
          <edgelabel>m_currently_allocated</edgelabel>
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>m_arena_profiler_mutex</edgelabel>
        </childnode>
        <childnode refid="56" relation="usage">
          <edgelabel>m_profiling_stats</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::FabArray&lt; BaseFab&lt; GpuComplex&lt; Real &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="49" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="59" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="51" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="62" relation="usage">
          <edgelabel>m_single_chunk_arena</edgelabel>
        </childnode>
        <childnode refid="63" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
        <childnode refid="64" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="65" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="66" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
        <childnode refid="67" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
      </node>
      <node id="54">
        <label>std::unordered_map&lt; void *, std::pair&lt; amrex::MemStat *, std::size_t &gt; &gt;</label>
      </node>
      <node id="61">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; BaseFab&lt; GpuComplex&lt; Real &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="44">
        <label>std::multimap&lt; K, T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="47" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="55">
        <label>std::mutex</label>
      </node>
      <node id="63">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; BaseFab&lt; GpuComplex&lt; Real &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="45">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="36" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="62">
        <label>std::unique_ptr&lt; amrex::detail::SingleChunkArena &gt;</label>
      </node>
      <node id="47">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
      </node>
      <node id="31">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="32" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>std::shared_ptr&lt; amrex::DistributionMapping::Ref &gt;</label>
      </node>
      <node id="14">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::FabArrayBase::ParForInfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1ParForInfo"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_ng</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_boxes</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="50">
        <label>amrex::BaseFab&lt; GpuComplex&lt; Real &gt; &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="51" relation="public-inheritance">
        </childnode>
      </node>
      <node id="70">
        <label>amrex::FFT::Info</label>
        <link refid="structamrex_1_1FFT_1_1Info"/>
      </node>
      <node id="32">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="33" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>amrex::Vector&lt; amrex::BoxND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
      </node>
      <node id="64">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="26" relation="public-inheritance">
        </childnode>
      </node>
      <node id="57">
        <label>amrex::MemStat</label>
        <link refid="structamrex_1_1MemStat"/>
      </node>
      <node id="30">
        <label>amrex::IntVectND&lt; dim &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="41">
        <label>amrex::FabArrayBase::meminfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1meminfo"/>
      </node>
      <node id="73">
        <label>amrex::FFT::R2C&lt; T, D &gt;::Plan2</label>
        <link refid="structamrex_1_1FFT_1_1R2C_1_1Plan2"/>
      </node>
      <node id="38">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
        <childnode refid="39" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="23" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="17">
        <label>amrex::CellIndexEnum</label>
        <link refid="structamrex_1_1CellIndexEnum"/>
      </node>
      <node id="48">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
      </node>
      <node id="10">
        <label>amrex::BoxIndexerND&lt; dim &gt;</label>
        <link refid="structamrex_1_1BoxIndexerND"/>
        <childnode refid="11" relation="usage">
          <edgelabel>fdm</edgelabel>
        </childnode>
      </node>
      <node id="60">
        <label>std::unique_ptr&lt; amrex::FBData&lt; BaseFab&lt; GpuComplex&lt; Real &gt; &gt; &gt; &gt;</label>
      </node>
      <node id="23">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="24" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::multimap&lt; amrex::FabArrayBase::BDKey, amrex::FabArrayBase::ParForInfo * &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_TheTileArrayCache</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_TheParForCache</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>m_mem_usage</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>m_BD_count</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>m_TheCPCache</edgelabel>
          <edgelabel>m_TheCrseFineCache</edgelabel>
          <edgelabel>m_TheFBCache</edgelabel>
          <edgelabel>m_TheFillPatchCache</edgelabel>
          <edgelabel>m_ThePolarBCache</edgelabel>
          <edgelabel>m_TheRB180Cache</edgelabel>
          <edgelabel>m_TheRB90Cache</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>ownership</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_region_tag</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="46" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="36">
        <label>std::string</label>
        <childnode refid="37" relation="public-inheritance">
        </childnode>
      </node>
      <node id="56">
        <label>std::map&lt; std::string, amrex::MemStat &gt;</label>
        <childnode refid="57" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>amrex::IntVectND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" line="45" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT.H" bodystart="46" bodyend="350"/>
    <listofallmembers>
      <member refid="classamrex_1_1FFT_1_1R2C_1af6207a324a63a3fb280fd7cd92654608" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>backward</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ad18a94fe497cd36ca1a79664087b1137" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>backward</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a3ef20715b15ca5135a035af78547af69" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>backward_doit</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1aa7c7335d76c9a949714e5b10ca90c3dc" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>cMF</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a5e49d612455497f4fc45e0164f9df47b" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>destroy_plan</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a4fe82bc467752c727dea31f0e69c592a" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>exec_c2c</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1aa7c1e3bd536c1b4af80bbcfc7dee971b" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>exec_c2r</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a73e5fe98b673a18e8c468d40794fa149" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>exec_r2c</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a6d9a4c54157093a3d22dd13ef30b8d6b" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>FFTComplex</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1aaf3df431ab47c82b617db0bbaa3df065" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>forward</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a4480edfaddeb5887f3f342cf7dbc4ab0" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>forward</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1aed8fb73920e06ef16ab6423d94095e3d" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>forwardThenBackward</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a9ffa3ca57820e79a0e5a778c2329baab" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>get_fab</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ab005c3b824df79da71c729d1d068f6e3" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>getSpectralData</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a7fa4d604aa9263da0656e2e516c71c6f" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>getSpectralData</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a918477cde28824f702acc29c93426141" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_cmd_x2y</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ad3a1611b1ca933d17e99ac17cf88ea62" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_cmd_y2x</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ab75dc0f07a97bcf1aa07bf867036d7c6" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_cmd_y2z</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a82bc17cf6f48651e7cbdedb5d828c5af" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_cmd_z2y</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a432916244b0cdaf0faaf4a9307373551" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_cx</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a142653e23cb3ff5a6d6b78ce9fabbc11" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_cy</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1aa5b77ddebb8cd7ca2198aa74a752171d" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_cz</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ae171b394ef7e5387eb9f7ae417bba2f4" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_dtos_x2y</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a9c2aab94da1f64fb53a37dfc80efc592" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_dtos_y2x</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a04530da756c11fca01063d574565cd69" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_dtos_y2z</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a0b83890e9dcc1a178bc7efddbda05595" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_dtos_z2y</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ab32bd2842a5ea4e0b1b82923866e822d" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_fft_bwd_x</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ac9c5ea94acb20d8f5131e857376a4fda" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_fft_bwd_y</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a778e03de9cff31aa71f8b5977fda5f7b" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_fft_bwd_z</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a04e70f5fb5c97c0297ecf1e2d77dfd08" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_fft_fwd_x</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ab27c8ced332e24bb45171abbc0902f4a" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_fft_fwd_y</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a82b94ba065c1da3446b016d2fcbb5bf5" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_fft_fwd_z</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a66718d5c702b86a495b1355b4800a234" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_info</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ab61c759c9b1dc4f010f36c3ea5f52a1f" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_real_domain</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a550a73dbe3b3401569be56cbe7fb1366" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_rx</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a08e5528a477e63f9bd0d29d5bf27a989" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_spectral_domain_x</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a5858e781b78f84455eb1ee4bc4a8d1cc" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_spectral_domain_y</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a0feaf7887ae84686028a8eed6ceb0625" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_spectral_domain_z</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a73e78cb5865d5a5d2574a4bae30b7560" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>make_c2c_plans</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a1b7762ef1efa97491ef9805677ce9818" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>MF</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a63f4e11b4c00677537f4baf17bf75c61" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a9f1023c20a7778b3ffa972c1198a6b91" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a8474794974265fa33e66cc7f6a964fcb" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>post_forward_doit</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1aedae67822f8809e38b2a7c5378efb8bf" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>R2C</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a7a7c7479e45148841ed112fa7bd246d5" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>R2C</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1aa7b45fd640aae7eb89f38cd3516052f4" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>R2C</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a0bd436a5c7ef586650852b44223752b3" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>VendorPlan</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a9777281071a3af0473a025b8ad76fa71" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>VendorPlan2</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ad45dde36a7f97978a78fc37119b6f4a4" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>~R2C</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
