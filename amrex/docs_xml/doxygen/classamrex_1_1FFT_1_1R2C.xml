<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1FFT_1_1R2C" kind="class" language="C++" prot="public">
    <compoundname>amrex::FFT::R2C</compoundname>
    <includes refid="AMReX__FFT__R2C_8H" local="no">AMReX_FFT_R2C.H</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
        <defval>Real</defval>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0" kindref="member">FFT::Direction</ref></type>
        <declname>D</declname>
        <defname>D</defname>
        <defval><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0af6cb3e816496528d4187db53bc66567f" kindref="member">FFT::Direction::both</ref></defval>
      </param>
      <param>
        <type>bool</type>
        <declname>C</declname>
        <defname>C</defname>
        <defval>false</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1FFT_1_1R2C_1ae7d1731672767514ef3909438c19ad24" prot="public" static="no">
        <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; <ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt; T &gt; &gt; &gt;</type>
        <definition>using amrex::FFT::R2C&lt; T, D, C &gt;::cMF =  FabArray&lt;BaseFab&lt;GpuComplex&lt;T&gt; &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>cMF</name>
        <qualifiedname>amrex::FFT::R2C::cMF</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="42" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FFT_1_1R2C_1a07c18ab14d0df660208544c3ce8c0a94" prot="public" static="no">
        <type>std::conditional_t&lt; <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref>, <ref refid="classamrex_1_1FFT_1_1R2C_1ae7d1731672767514ef3909438c19ad24" kindref="member">cMF</ref>, std::conditional_t&lt; std::is_same_v&lt; T, Real &gt;, <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref>, <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt; T &gt; &gt; &gt; &gt;</type>
        <definition>using amrex::FFT::R2C&lt; T, D, C &gt;::MF =  std::conditional_t &lt;C, cMF, std::conditional_t&lt;std::is_same_v&lt;T,Real&gt;, MultiFab, FabArray&lt;BaseFab&lt;T&gt; &gt; &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>MF</name>
        <qualifiedname>amrex::FFT::R2C::MF</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="43" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="45" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1FFT_1_1R2C_1afd3d509858e88e5f3a1efe7cb494baf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class OpenBCSolver</definition>
        <argsstring></argsstring>
        <name>OpenBCSolver</name>
        <qualifiedname>amrex::FFT::R2C::OpenBCSolver</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1OpenBCSolver" kindref="compound">OpenBCSolver</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="47" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1FFT_1_1R2C_1a1be460f58e5e6b3d1fc4ddecc08e522b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class Poisson</definition>
        <argsstring></argsstring>
        <name>Poisson</name>
        <qualifiedname>amrex::FFT::R2C::Poisson</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1Poisson" kindref="compound">Poisson</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="48" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1FFT_1_1R2C_1abf6a97cc1f486d7ad995037461ecb49a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class PoissonHybrid</definition>
        <argsstring></argsstring>
        <name>PoissonHybrid</name>
        <qualifiedname>amrex::FFT::R2C::PoissonHybrid</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1PoissonHybrid" kindref="compound">PoissonHybrid</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="49" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="49" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1af4b15671810f5a84ab6715bbd56f7b58" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1Plan" kindref="compound">Plan</ref>&lt; T &gt;</type>
        <definition>Plan&lt;T&gt; amrex::FFT::R2C&lt; T, D, C &gt;::m_fft_fwd_x</definition>
        <argsstring></argsstring>
        <name>m_fft_fwd_x</name>
        <qualifiedname>amrex::FFT::R2C::m_fft_fwd_x</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="391" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="391" bodyend="391"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a4a6a9395c021e96d1e17832b40f8841b" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1Plan" kindref="compound">Plan</ref>&lt; T &gt;</type>
        <definition>Plan&lt;T&gt; amrex::FFT::R2C&lt; T, D, C &gt;::m_fft_bwd_x</definition>
        <argsstring></argsstring>
        <name>m_fft_bwd_x</name>
        <qualifiedname>amrex::FFT::R2C::m_fft_bwd_x</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="392" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="392" bodyend="392"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a1cf1e47a956e17a2a921406ac14162c6" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1Plan" kindref="compound">Plan</ref>&lt; T &gt;</type>
        <definition>Plan&lt;T&gt; amrex::FFT::R2C&lt; T, D, C &gt;::m_fft_fwd_y</definition>
        <argsstring></argsstring>
        <name>m_fft_fwd_y</name>
        <qualifiedname>amrex::FFT::R2C::m_fft_fwd_y</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="393" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="393" bodyend="393"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1af1a6e36c635a82881b800c971ab48e3f" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1Plan" kindref="compound">Plan</ref>&lt; T &gt;</type>
        <definition>Plan&lt;T&gt; amrex::FFT::R2C&lt; T, D, C &gt;::m_fft_bwd_y</definition>
        <argsstring></argsstring>
        <name>m_fft_bwd_y</name>
        <qualifiedname>amrex::FFT::R2C::m_fft_bwd_y</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="394" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="394" bodyend="394"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a210fd009cc8ceee6b10715f51a6b6d7b" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1Plan" kindref="compound">Plan</ref>&lt; T &gt;</type>
        <definition>Plan&lt;T&gt; amrex::FFT::R2C&lt; T, D, C &gt;::m_fft_fwd_z</definition>
        <argsstring></argsstring>
        <name>m_fft_fwd_z</name>
        <qualifiedname>amrex::FFT::R2C::m_fft_fwd_z</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="395" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="395" bodyend="395"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1ac9c5dfc35d226c7f855ffc3c1442359b" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1Plan" kindref="compound">Plan</ref>&lt; T &gt;</type>
        <definition>Plan&lt;T&gt; amrex::FFT::R2C&lt; T, D, C &gt;::m_fft_bwd_z</definition>
        <argsstring></argsstring>
        <name>m_fft_bwd_z</name>
        <qualifiedname>amrex::FFT::R2C::m_fft_bwd_z</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="396" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="396" bodyend="396"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1ac9ee1ebd7b1be12422791eba4a9a1846" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1Plan" kindref="compound">Plan</ref>&lt; T &gt;</type>
        <definition>Plan&lt;T&gt; amrex::FFT::R2C&lt; T, D, C &gt;::m_fft_fwd_x_half</definition>
        <argsstring></argsstring>
        <name>m_fft_fwd_x_half</name>
        <qualifiedname>amrex::FFT::R2C::m_fft_fwd_x_half</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="397" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="397" bodyend="397"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a7824471971d16b9e694be9096a26d8a5" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1Plan" kindref="compound">Plan</ref>&lt; T &gt;</type>
        <definition>Plan&lt;T&gt; amrex::FFT::R2C&lt; T, D, C &gt;::m_fft_bwd_x_half</definition>
        <argsstring></argsstring>
        <name>m_fft_bwd_x_half</name>
        <qualifiedname>amrex::FFT::R2C::m_fft_bwd_x_half</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="398" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="398" bodyend="398"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a39be847a73cc6b5bf68f2def672ae6e6" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1NonLocalBC_1_1MultiBlockCommMetaData" kindref="compound">MultiBlockCommMetaData</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MultiBlockCommMetaData&gt; amrex::FFT::R2C&lt; T, D, C &gt;::m_cmd_x2y</definition>
        <argsstring></argsstring>
        <name>m_cmd_x2y</name>
        <qualifiedname>amrex::FFT::R2C::m_cmd_x2y</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="403" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1ae957062e754bcadaf0991957af0841a9" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1NonLocalBC_1_1MultiBlockCommMetaData" kindref="compound">MultiBlockCommMetaData</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MultiBlockCommMetaData&gt; amrex::FFT::R2C&lt; T, D, C &gt;::m_cmd_y2x</definition>
        <argsstring></argsstring>
        <name>m_cmd_y2x</name>
        <qualifiedname>amrex::FFT::R2C::m_cmd_y2x</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="404" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a766a6f52cfa383cbd406ad24c64e32a8" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1NonLocalBC_1_1MultiBlockCommMetaData" kindref="compound">MultiBlockCommMetaData</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MultiBlockCommMetaData&gt; amrex::FFT::R2C&lt; T, D, C &gt;::m_cmd_y2z</definition>
        <argsstring></argsstring>
        <name>m_cmd_y2z</name>
        <qualifiedname>amrex::FFT::R2C::m_cmd_y2z</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="405" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a8cdcf8557e057ee155e8d2bb728328d4" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1NonLocalBC_1_1MultiBlockCommMetaData" kindref="compound">MultiBlockCommMetaData</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MultiBlockCommMetaData&gt; amrex::FFT::R2C&lt; T, D, C &gt;::m_cmd_z2y</definition>
        <argsstring></argsstring>
        <name>m_cmd_z2y</name>
        <qualifiedname>amrex::FFT::R2C::m_cmd_z2y</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="406" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a7187c1efc4385db3d5585bc96f8b3f98" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1NonLocalBC_1_1MultiBlockCommMetaData" kindref="compound">MultiBlockCommMetaData</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MultiBlockCommMetaData&gt; amrex::FFT::R2C&lt; T, D, C &gt;::m_cmd_x2z</definition>
        <argsstring></argsstring>
        <name>m_cmd_x2z</name>
        <qualifiedname>amrex::FFT::R2C::m_cmd_x2z</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="407" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1acbdc1e4e80e70872762588bd61d26b05" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1NonLocalBC_1_1MultiBlockCommMetaData" kindref="compound">MultiBlockCommMetaData</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MultiBlockCommMetaData&gt; amrex::FFT::R2C&lt; T, D, C &gt;::m_cmd_z2x</definition>
        <argsstring></argsstring>
        <name>m_cmd_z2x</name>
        <qualifiedname>amrex::FFT::R2C::m_cmd_z2x</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="408" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a0043e0489b5a6bff456bb0b5127514d5" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1NonLocalBC_1_1MultiBlockCommMetaData" kindref="compound">MultiBlockCommMetaData</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MultiBlockCommMetaData&gt; amrex::FFT::R2C&lt; T, D, C &gt;::m_cmd_x2z_half</definition>
        <argsstring></argsstring>
        <name>m_cmd_x2z_half</name>
        <qualifiedname>amrex::FFT::R2C::m_cmd_x2z_half</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="409" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a34a80ebcde2dfacb2c257baa399e3607" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structamrex_1_1NonLocalBC_1_1MultiBlockCommMetaData" kindref="compound">MultiBlockCommMetaData</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MultiBlockCommMetaData&gt; amrex::FFT::R2C&lt; T, D, C &gt;::m_cmd_z2x_half</definition>
        <argsstring></argsstring>
        <name>m_cmd_z2x_half</name>
        <qualifiedname>amrex::FFT::R2C::m_cmd_z2x_half</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="410" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a70799a81ad2650ed880b2a6d371f51a5" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1Swap01" kindref="compound">Swap01</ref></type>
        <definition>Swap01 amrex::FFT::R2C&lt; T, D, C &gt;::m_dtos_x2y</definition>
        <argsstring></argsstring>
        <name>m_dtos_x2y</name>
        <qualifiedname>amrex::FFT::R2C::m_dtos_x2y</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="411" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="411" bodyend="411"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a9fa340233592c6f0f95dee9a45ac127b" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1Swap01" kindref="compound">Swap01</ref></type>
        <definition>Swap01 amrex::FFT::R2C&lt; T, D, C &gt;::m_dtos_y2x</definition>
        <argsstring></argsstring>
        <name>m_dtos_y2x</name>
        <qualifiedname>amrex::FFT::R2C::m_dtos_y2x</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="412" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="412" bodyend="412"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a5f20208891d3fba8faf0a6e2c56852ea" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1Swap02" kindref="compound">Swap02</ref></type>
        <definition>Swap02 amrex::FFT::R2C&lt; T, D, C &gt;::m_dtos_y2z</definition>
        <argsstring></argsstring>
        <name>m_dtos_y2z</name>
        <qualifiedname>amrex::FFT::R2C::m_dtos_y2z</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="413" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="413" bodyend="413"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1afcd87a98af06bb71eef53b52a8d77400" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1Swap02" kindref="compound">Swap02</ref></type>
        <definition>Swap02 amrex::FFT::R2C&lt; T, D, C &gt;::m_dtos_z2y</definition>
        <argsstring></argsstring>
        <name>m_dtos_z2y</name>
        <qualifiedname>amrex::FFT::R2C::m_dtos_z2y</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="414" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="414" bodyend="414"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a733dfe4be995af1d172e89ca392c519c" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1RotateFwd" kindref="compound">RotateFwd</ref></type>
        <definition>RotateFwd amrex::FFT::R2C&lt; T, D, C &gt;::m_dtos_x2z</definition>
        <argsstring></argsstring>
        <name>m_dtos_x2z</name>
        <qualifiedname>amrex::FFT::R2C::m_dtos_x2z</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="415" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="415" bodyend="415"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1af868711216f1ed131c9257ac14bd9156" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1RotateBwd" kindref="compound">RotateBwd</ref></type>
        <definition>RotateBwd amrex::FFT::R2C&lt; T, D, C &gt;::m_dtos_z2x</definition>
        <argsstring></argsstring>
        <name>m_dtos_z2x</name>
        <qualifiedname>amrex::FFT::R2C::m_dtos_z2x</qualifiedname>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="416" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="416" bodyend="416"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1aebe08a2844357de336689cdba54a9804" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1FFT_1_1R2C_1a07c18ab14d0df660208544c3ce8c0a94" kindref="member">MF</ref></type>
        <definition>MF amrex::FFT::R2C&lt; T, D, C &gt;::m_rx</definition>
        <argsstring></argsstring>
        <name>m_rx</name>
        <qualifiedname>amrex::FFT::R2C::m_rx</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="418" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a49201032c814a83b504752d388ec846e" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1FFT_1_1R2C_1ae7d1731672767514ef3909438c19ad24" kindref="member">cMF</ref></type>
        <definition>cMF amrex::FFT::R2C&lt; T, D, C &gt;::m_cx</definition>
        <argsstring></argsstring>
        <name>m_cx</name>
        <qualifiedname>amrex::FFT::R2C::m_cx</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="419" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a1487a1cb3c9c99eb2c97e2be25f9a85e" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1FFT_1_1R2C_1ae7d1731672767514ef3909438c19ad24" kindref="member">cMF</ref></type>
        <definition>cMF amrex::FFT::R2C&lt; T, D, C &gt;::m_cy</definition>
        <argsstring></argsstring>
        <name>m_cy</name>
        <qualifiedname>amrex::FFT::R2C::m_cy</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="420" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a87ec1eefd998a8351288407362b87a50" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1FFT_1_1R2C_1ae7d1731672767514ef3909438c19ad24" kindref="member">cMF</ref></type>
        <definition>cMF amrex::FFT::R2C&lt; T, D, C &gt;::m_cz</definition>
        <argsstring></argsstring>
        <name>m_cz</name>
        <qualifiedname>amrex::FFT::R2C::m_cz</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="421" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a1f441cc6fe413997b17347171ef13ef8" prot="private" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1FFT_1_1R2C_1a07c18ab14d0df660208544c3ce8c0a94" kindref="member">MF</ref></type>
        <definition>MF amrex::FFT::R2C&lt; T, D, C &gt;::m_raw_mf</definition>
        <argsstring></argsstring>
        <name>m_raw_mf</name>
        <qualifiedname>amrex::FFT::R2C::m_raw_mf</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="423" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1aec454e7195395e4b2b0f8c5f208598bd" prot="private" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1FFT_1_1R2C_1ae7d1731672767514ef3909438c19ad24" kindref="member">cMF</ref></type>
        <definition>cMF amrex::FFT::R2C&lt; T, D, C &gt;::m_raw_cmf</definition>
        <argsstring></argsstring>
        <name>m_raw_cmf</name>
        <qualifiedname>amrex::FFT::R2C::m_raw_cmf</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="424" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1af2a37855637a647e63430415af0a709f" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; char, <ref refid="structamrex_1_1DataDeleter" kindref="compound">DataDeleter</ref> &gt;</type>
        <definition>std::unique_ptr&lt;char,DataDeleter&gt; amrex::FFT::R2C&lt; T, D, C &gt;::m_data_1</definition>
        <argsstring></argsstring>
        <name>m_data_1</name>
        <qualifiedname>amrex::FFT::R2C::m_data_1</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="426" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a4aec372e4342615252409bc4c50ba954" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; char, <ref refid="structamrex_1_1DataDeleter" kindref="compound">DataDeleter</ref> &gt;</type>
        <definition>std::unique_ptr&lt;char,DataDeleter&gt; amrex::FFT::R2C&lt; T, D, C &gt;::m_data_2</definition>
        <argsstring></argsstring>
        <name>m_data_2</name>
        <qualifiedname>amrex::FFT::R2C::m_data_2</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="427" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1ae96748bea1d4af0ec1f04bef5c96f6c8" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::FFT::R2C&lt; T, D, C &gt;::m_real_domain</definition>
        <argsstring></argsstring>
        <name>m_real_domain</name>
        <qualifiedname>amrex::FFT::R2C::m_real_domain</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="429" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a40052f2e65b465812d23393edbf35054" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::FFT::R2C&lt; T, D, C &gt;::m_spectral_domain_x</definition>
        <argsstring></argsstring>
        <name>m_spectral_domain_x</name>
        <qualifiedname>amrex::FFT::R2C::m_spectral_domain_x</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="430" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a1149c63ebb5db402f30556b717950a16" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::FFT::R2C&lt; T, D, C &gt;::m_spectral_domain_y</definition>
        <argsstring></argsstring>
        <name>m_spectral_domain_y</name>
        <qualifiedname>amrex::FFT::R2C::m_spectral_domain_y</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="431" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a8386420723e4c174f28488a46e30e2fa" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>Box amrex::FFT::R2C&lt; T, D, C &gt;::m_spectral_domain_z</definition>
        <argsstring></argsstring>
        <name>m_spectral_domain_z</name>
        <qualifiedname>amrex::FFT::R2C::m_spectral_domain_z</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="432" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a8f47a085db0bac9c450d889095ee3397" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classamrex_1_1FFT_1_1R2C" kindref="compound">R2C</ref>&lt; T, D, <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt; &gt;</type>
        <definition>std::unique_ptr&lt;R2C&lt;T,D,C&gt; &gt; amrex::FFT::R2C&lt; T, D, C &gt;::m_r2c_sub</definition>
        <argsstring></argsstring>
        <name>m_r2c_sub</name>
        <qualifiedname>amrex::FFT::R2C::m_r2c_sub</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="434" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a91b067400729a46cd9cc2c37438c5eab" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1detail_1_1SubHelper" kindref="compound">detail::SubHelper</ref></type>
        <definition>detail::SubHelper amrex::FFT::R2C&lt; T, D, C &gt;::m_sub_helper</definition>
        <argsstring></argsstring>
        <name>m_sub_helper</name>
        <qualifiedname>amrex::FFT::R2C::m_sub_helper</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="435" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a06d2cb67911c4b941cbcff8b1c313c64" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1FFT_1_1Info" kindref="compound">Info</ref></type>
        <definition>Info amrex::FFT::R2C&lt; T, D, C &gt;::m_info</definition>
        <argsstring></argsstring>
        <name>m_info</name>
        <qualifiedname>amrex::FFT::R2C::m_info</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="437" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1a67918f091c9254deb019ad8a07cbb09b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FFT::R2C&lt; T, D, C &gt;::m_do_alld_fft</definition>
        <argsstring></argsstring>
        <name>m_do_alld_fft</name>
        <qualifiedname>amrex::FFT::R2C::m_do_alld_fft</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="439" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1aea7a8880fa0cfd0c9fd69de239e5aee5" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FFT::R2C&lt; T, D, C &gt;::m_slab_decomp</definition>
        <argsstring></argsstring>
        <name>m_slab_decomp</name>
        <qualifiedname>amrex::FFT::R2C::m_slab_decomp</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="440" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FFT_1_1R2C_1ace1a9f4f8e0f19d0ff099520c43aa90f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FFT::R2C&lt; T, D, C &gt;::m_openbc_half</definition>
        <argsstring></argsstring>
        <name>m_openbc_half</name>
        <qualifiedname>amrex::FFT::R2C::m_openbc_half</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="441" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="441" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a422c9f9cd4adb3ca93c97b94a8440e9c" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FFT::R2C&lt; T, D, C &gt;::R2C</definition>
        <argsstring>(Box const &amp;domain, Info const &amp;info=Info{})</argsstring>
        <name>R2C</name>
        <qualifiedname>amrex::FFT::R2C::R2C</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1FFT_1_1Info" kindref="compound">Info</ref> const &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1FFT_1_1Info" kindref="compound">Info</ref>{}</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>domain</parametername>
</parameternamelist>
<parameterdescription>
<para>the forward domain (i.e., the domain of the real data) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>optional information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="57" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="445" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a98c45021de1bdb32013c8d0c5664f9de" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FFT::R2C&lt; T, D, C &gt;::R2C</definition>
        <argsstring>(std::array&lt; int, AMREX_SPACEDIM &gt; const &amp;domain_size, Info const &amp;info=Info{})</argsstring>
        <name>R2C</name>
        <qualifiedname>amrex::FFT::R2C::R2C</qualifiedname>
        <param>
          <type>std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>domain_size</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1FFT_1_1Info" kindref="compound">Info</ref> const &amp;</type>
          <declname>info</declname>
          <defval><ref refid="structamrex_1_1FFT_1_1Info" kindref="compound">Info</ref>{}</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>If AMREX_SPACEDIM is 3 and you want to do 2D <ref refid="namespaceamrex_1_1FFT" kindref="compound">FFT</ref>, you just need to set the size of one of the dimensions to 1.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>domain_size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the forward domain (i.e., the real data domain) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>info</parametername>
</parameternamelist>
<parameterdescription>
<para>optional information </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="68" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="693" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a307bbe24b6ccf594a090292ece7378ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FFT::R2C&lt; T, D, C &gt;::~R2C</definition>
        <argsstring>()</argsstring>
        <name>~R2C</name>
        <qualifiedname>amrex::FFT::R2C::~R2C</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="71" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="698" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1ac024841c9f9848b7e7a85c810468a1a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FFT::R2C&lt; T, D, C &gt;::R2C</definition>
        <argsstring>(R2C const &amp;)=delete</argsstring>
        <name>R2C</name>
        <qualifiedname>amrex::FFT::R2C::R2C</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C" kindref="compound">R2C</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="73" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a625754f142ffaf7cc8661e8917e94153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FFT::R2C&lt; T, D, C &gt;::R2C</definition>
        <argsstring>(R2C &amp;&amp;)=delete</argsstring>
        <name>R2C</name>
        <qualifiedname>amrex::FFT::R2C::R2C</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C" kindref="compound">R2C</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="74" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a0965fb062a67ff26a2349a9c44b06da6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FFT_1_1R2C" kindref="compound">R2C</ref> &amp;</type>
        <definition>R2C &amp; amrex::FFT::R2C&lt; T, D, C &gt;::operator=</definition>
        <argsstring>(R2C const &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::FFT::R2C::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C" kindref="compound">R2C</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="75" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a399f7d54d1870e370908f77501355181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FFT_1_1R2C" kindref="compound">R2C</ref> &amp;</type>
        <definition>R2C &amp; amrex::FFT::R2C&lt; T, D, C &gt;::operator=</definition>
        <argsstring>(R2C &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::FFT::R2C::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C" kindref="compound">R2C</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="76" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1af7978c75e944ef0de524c802ba18ff6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D, C &gt;::setLocalDomain</definition>
        <argsstring>(std::array&lt; int, AMREX_SPACEDIM &gt; const &amp;local_start, std::array&lt; int, AMREX_SPACEDIM &gt; const &amp;local_size)</argsstring>
        <name>setLocalDomain</name>
        <qualifiedname>amrex::FFT::R2C::setLocalDomain</qualifiedname>
        <param>
          <type>std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>local_start</declname>
        </param>
        <param>
          <type>std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>local_size</declname>
        </param>
        <briefdescription>
<para>Set local domain. </para>
        </briefdescription>
        <detaileddescription>
<para>This is needed, only if one uses the raw pointer interfaces, not the amrex::MulitFab interfaces. This may contain collective MPI calls. So all processes even if their local size is zero should call. This function informs <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> the domain decomposition chosen by the user for the forward domain (i.e., real data domain). There is no constraint on the domain decomposition strategy. One can do 1D, 2D or 3D domain decomposition. Alternatively, one could also let <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> choose for you by calling getLocalDomain. The latter could potentially reduce data communication.</para>
<para>Again, this is needed, only if one uses the raw pointer interfaces. Only one of the functions, setLocalDomain and getLocalDomain, should be called.</para>
<para>This should only be called once unless the domain decomposition changes.</para>
<para>local_start starting indices of the local domain local_size size of the local domain </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="101" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="749" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a29a4086586998f2314820c95807fc329" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt;, std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; &gt;</type>
        <definition>std::pair&lt; std::array&lt; int, AMREX_SPACEDIM &gt;, std::array&lt; int, AMREX_SPACEDIM &gt; &gt; amrex::FFT::R2C&lt; T, D, C &gt;::getLocalDomain</definition>
        <argsstring>() const</argsstring>
        <name>getLocalDomain</name>
        <qualifiedname>amrex::FFT::R2C::getLocalDomain</qualifiedname>
        <briefdescription>
<para>Get local domain. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the domain decomposition chosen by <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref>. The first part of the pair is the local starting indices, and the second part is the local domain size.</para>
<para>This is needed, only if one uses the raw pointer interfaces, not the amrex::MulitFab interfaces. Only one of the functions, setLocalDomain and getLocalDomain, should be called. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="116" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="758" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a68694b2d828feda97211f5ce5c9e9705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D, C &gt;::setLocalSpectralDomain</definition>
        <argsstring>(std::array&lt; int, AMREX_SPACEDIM &gt; const &amp;local_start, std::array&lt; int, AMREX_SPACEDIM &gt; const &amp;local_size)</argsstring>
        <name>setLocalSpectralDomain</name>
        <qualifiedname>amrex::FFT::R2C::setLocalSpectralDomain</qualifiedname>
        <param>
          <type>std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>local_start</declname>
        </param>
        <param>
          <type>std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>local_size</declname>
        </param>
        <briefdescription>
<para>Set local spectral domain. </para>
        </briefdescription>
        <detaileddescription>
<para>This is needed, only if one uses the raw pointer interfaces, not the amrex::MulitFab interfaces. This may contain collective MPI calls. So all processes even if their local size is zero should call. This function informs <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> the domain decomposition chosen by the user for the complex data domain. There is no constraint on the domain decomposition strategy. One can do 1D, 2D or 3D domain decomposition. Alternatively, one could also let <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> choose for you by calling getLocalSpectralDomain. The latter could potentially reduce data communication.</para>
<para>Again, this is needed, only if one uses the raw pointer interfaces. Only one of the functions, setLocalSpectralDomain and getLocalSpectralDomain, should be called. Note that one could use this function together with getLocalDomain. That is the user is allowed to choose their own spectral domain decomposition, while let <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> choose the real data domain decomposition. Also note that the entire spectral domain has the size of (nx+1)/2 * ny * nz, if the real domain is nx * ny * nz.</para>
<para>This should only be called once unless the domain decomposition changes.</para>
<para>local_start starting indices of the local domain local_size size of the local domain </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="146" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="775" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a2432e6d1fb8f45a48af5ee54dc7c124b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt;, std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; &gt;</type>
        <definition>std::pair&lt; std::array&lt; int, AMREX_SPACEDIM &gt;, std::array&lt; int, AMREX_SPACEDIM &gt; &gt; amrex::FFT::R2C&lt; T, D, C &gt;::getLocalSpectralDomain</definition>
        <argsstring>() const</argsstring>
        <name>getLocalSpectralDomain</name>
        <qualifiedname>amrex::FFT::R2C::getLocalSpectralDomain</qualifiedname>
        <briefdescription>
<para>Get local spectral domain. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns the domain decomposition chosen by <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> for the complex data spectral domain. The returned pair contains the local starting indices and the local domain size.</para>
<para>This is needed, only if one uses the raw pointer interfaces, not the amrex::MulitFab interfaces. Only one of the functions, setLocalSpectralDomain and getLocalSpectralDomain, should be called. Note that one could use this function together with setLocalDomain. That is the user is allowed to choose their own real domain decomposition, while let <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> choose the spectral data domain decomposition. Also note that the entire spectral domain has the size of (nx+1)/2 * ny * nz, if the real domain is nx * ny * nz. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="167" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="784" bodyend="799"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1aea9a934a1486a1e79988b2ef96e8d24f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref></type>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0" kindref="member">Direction</ref></type>
            <declname>DIR</declname>
            <defname>DIR</defname>
            <defval>D</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0af6cb3e816496528d4187db53bc66567f" kindref="member">Direction::both</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D, C &gt;::forwardThenBackward</definition>
        <argsstring>(MF const &amp;inmf, MF &amp;outmf, F const &amp;post_forward, int incomp=0, int outcomp=0)</argsstring>
        <name>forwardThenBackward</name>
        <qualifiedname>amrex::FFT::R2C::forwardThenBackward</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1a07c18ab14d0df660208544c3ce8c0a94" kindref="member">MF</ref> const &amp;</type>
          <declname>inmf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1a07c18ab14d0df660208544c3ce8c0a94" kindref="member">MF</ref> &amp;</type>
          <declname>outmf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>post_forward</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>incomp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>outcomp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Forward and then backward transform. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is available only when this class template is instantiated for transforms in both directions. It&apos;s more efficient than calling the forward function that stores the spectral data in a caller provided container followed by the backward function, because this can avoid parallel communication between the internal data and the caller&apos;s data container.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inmf</parametername>
</parameternamelist>
<parameterdescription>
<para>input data in <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> or FabArray&lt;BaseFab&lt;float&gt;&gt; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outmf</parametername>
</parameternamelist>
<parameterdescription>
<para>output data in <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> or FabArray&lt;BaseFab&lt;float&gt;&gt; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>post_forward</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object for processing the post-forward data before the backward transform. Its interface is <computeroutput>(int,int,int,<ref refid="structamrex_1_1GpuComplex" kindref="compound">GpuComplex</ref>&lt;T&gt;&amp;)</computeroutput>, where the integers are indices in the spectral space, and the reference to the complex number allows for the modification of the spectral data at that location. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="190" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="190" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1af97b9a2fd2cf2de2944f51c53659a9e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0" kindref="member">Direction</ref></type>
            <declname>DIR</declname>
            <defname>DIR</defname>
            <defval>D</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0a965dbaac085fc891bfbbd4f9d145bbc8" kindref="member">Direction::forward</ref>||DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0af6cb3e816496528d4187db53bc66567f" kindref="member">Direction::both</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D, C &gt;::forward</definition>
        <argsstring>(MF const &amp;inmf, int incomp=0)</argsstring>
        <name>forward</name>
        <qualifiedname>amrex::FFT::R2C::forward</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1a07c18ab14d0df660208544c3ce8c0a94" kindref="member">MF</ref> const &amp;</type>
          <declname>inmf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>incomp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Forward transform. </para>
        </briefdescription>
        <detaileddescription>
<para>The output is stored in this object&apos;s internal data. This function is not available when this class template is instantiated for backward-only transform.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inmf</parametername>
</parameternamelist>
<parameterdescription>
<para>input data in <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> or FabArray&lt;BaseFab&lt;float&gt;&gt; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="210" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="860" bodyend="927"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a2448d0524dc824afa2496c4b91360391" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0" kindref="member">Direction</ref></type>
            <declname>DIR</declname>
            <defname>DIR</defname>
            <defval>D</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0a965dbaac085fc891bfbbd4f9d145bbc8" kindref="member">Direction::forward</ref>||DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0af6cb3e816496528d4187db53bc66567f" kindref="member">Direction::both</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D, C &gt;::forward</definition>
        <argsstring>(MF const &amp;inmf, cMF &amp;outmf, int incomp=0, int outcomp=0)</argsstring>
        <name>forward</name>
        <qualifiedname>amrex::FFT::R2C::forward</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1a07c18ab14d0df660208544c3ce8c0a94" kindref="member">MF</ref> const &amp;</type>
          <declname>inmf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1ae7d1731672767514ef3909438c19ad24" kindref="member">cMF</ref> &amp;</type>
          <declname>outmf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>incomp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>outcomp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Forward transform. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is not available when this class template is instantiated for backward-only transform.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inmf</parametername>
</parameternamelist>
<parameterdescription>
<para>input data in <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> or FabArray&lt;BaseFab&lt;float&gt;&gt; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outmf</parametername>
</parameternamelist>
<parameterdescription>
<para>output data in <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray&lt;BaseFab&lt;GpuComplex&lt;T&gt;&gt;&gt;</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="223" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="1268" bodyend="1323"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1abe6ec3521f529f783dcde530812cb05d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RT</type>
          </param>
          <param>
            <type>typename CT</type>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0" kindref="member">Direction</ref></type>
            <declname>DIR</declname>
            <defname>DIR</defname>
            <defval>D</defval>
          </param>
          <param>
            <type>bool</type>
            <declname>CP</declname>
            <defname>CP</defname>
            <defval><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref></defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0a965dbaac085fc891bfbbd4f9d145bbc8" kindref="member">Direction::forward</ref>||DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0af6cb3e816496528d4187db53bc66567f" kindref="member">Direction::both</ref>) &amp;&amp;((sizeof(RT) *2==sizeof(CT) &amp;&amp;!CP)||(sizeof(RT)==sizeof(CT) &amp;&amp;CP)), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D, C &gt;::forward</definition>
        <argsstring>(RT const *in, CT *out)</argsstring>
        <name>forward</name>
        <qualifiedname>amrex::FFT::R2C::forward</qualifiedname>
        <param>
          <type>RT const *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>CT *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Forward transform. </para>
        </briefdescription>
        <detaileddescription>
<para>This raw pointer version of forward requires setLocalDomain/getLocalDomain and setLocalSpectralDomain/getLocalSpectralDomain have been called already. Note that one is allowed to call this function multiple times after the set/get domain functions are called only once, unless the domain decomposition changes. In fact, that is the preferred way because it has better performance. All processes need to call this function even if their local size is zero. If the local size is zero, one can pass nullptrs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="243" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="973" bodyend="997"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a6572617625277fe8da80e09e44d75fc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0" kindref="member">Direction</ref></type>
            <declname>DIR</declname>
            <defname>DIR</defname>
            <defval>D</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0af6cb3e816496528d4187db53bc66567f" kindref="member">Direction::both</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D, C &gt;::backward</definition>
        <argsstring>(MF &amp;outmf, int outcomp=0)</argsstring>
        <name>backward</name>
        <qualifiedname>amrex::FFT::R2C::backward</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1a07c18ab14d0df660208544c3ce8c0a94" kindref="member">MF</ref> &amp;</type>
          <declname>outmf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>outcomp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Backward transform. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is available only when this class template is instantiated for transforms in both directions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outmf</parametername>
</parameternamelist>
<parameterdescription>
<para>output data in <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> or FabArray&lt;BaseFab&lt;float&gt;&gt; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="254" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="1001" bodyend="1004"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a575c11f8c0c8babd332068696ebf7739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0" kindref="member">Direction</ref></type>
            <declname>DIR</declname>
            <defname>DIR</defname>
            <defval>D</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0a195fe59b6f103787a914aead0f3db502" kindref="member">Direction::backward</ref>||DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0af6cb3e816496528d4187db53bc66567f" kindref="member">Direction::both</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D, C &gt;::backward</definition>
        <argsstring>(cMF const &amp;inmf, MF &amp;outmf, int incomp=0, int outcomp=0)</argsstring>
        <name>backward</name>
        <qualifiedname>amrex::FFT::R2C::backward</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1ae7d1731672767514ef3909438c19ad24" kindref="member">cMF</ref> const &amp;</type>
          <declname>inmf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1a07c18ab14d0df660208544c3ce8c0a94" kindref="member">MF</ref> &amp;</type>
          <declname>outmf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>incomp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>outcomp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Backward transform. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is not available when this class template is instantiated for forward-only transform.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inmf</parametername>
</parameternamelist>
<parameterdescription>
<para>input data in <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray&lt;BaseFab&lt;GpuComplex&lt;T&gt;&gt;&gt;</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outmf</parametername>
</parameternamelist>
<parameterdescription>
<para>output data in <ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> or FabArray&lt;BaseFab&lt;float&gt;&gt; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="267" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="1328" bodyend="1331"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1af1e94ef998b45e50e2e4e83b141e2ff8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CT</type>
          </param>
          <param>
            <type>typename RT</type>
          </param>
          <param>
            <type><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0" kindref="member">Direction</ref></type>
            <declname>DIR</declname>
            <defname>DIR</defname>
            <defval>D</defval>
          </param>
          <param>
            <type>bool</type>
            <declname>CP</declname>
            <defname>CP</defname>
            <defval><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref></defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0a195fe59b6f103787a914aead0f3db502" kindref="member">Direction::backward</ref>||DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0af6cb3e816496528d4187db53bc66567f" kindref="member">Direction::both</ref>) &amp;&amp;((sizeof(RT) *2==sizeof(CT) &amp;&amp;!CP)||(sizeof(RT)==sizeof(CT) &amp;&amp;CP)), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D, C &gt;::backward</definition>
        <argsstring>(CT const *in, RT *out)</argsstring>
        <name>backward</name>
        <qualifiedname>amrex::FFT::R2C::backward</qualifiedname>
        <param>
          <type>CT const *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>RT *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Backward transform. </para>
        </briefdescription>
        <detaileddescription>
<para>This raw pointer version of backward requires setLocalDomain/getLocalDomain and setLocalSpectralDomain/getLocalSpectralDomain have been called already. Note that one is allowed to call this function multiple times after the set/get domain functions are called only once unless the domain decomposition changes. In fact, that is the preferred way because it has better performance. All processes need to call this function even if their local size is zero. If the local size is zero, one can pass nullptrs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="287" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="1072" bodyend="1096"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a837e3afdc0aacbf658df5685dccd8e5a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T amrex::FFT::R2C&lt; T, D, C &gt;::scalingFactor</definition>
        <argsstring>() const</argsstring>
        <name>scalingFactor</name>
        <qualifiedname>amrex::FFT::R2C::scalingFactor</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scaling factor. If the data goes through forward and then backward, the result multiplied by the scaling factor is equal to the original data. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="292" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="1227" bodyend="1242"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1ad9f115305c4ffabe4e876a9114e5be32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0" kindref="member">Direction</ref></type>
            <declname>DIR</declname>
            <defname>DIR</defname>
            <defval>D</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt; DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0a965dbaac085fc891bfbbd4f9d145bbc8" kindref="member">Direction::forward</ref>||DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0af6cb3e816496528d4187db53bc66567f" kindref="member">Direction::both</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; <ref refid="classamrex_1_1FFT_1_1R2C_1ae7d1731672767514ef3909438c19ad24" kindref="member">cMF</ref> *, <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt;</type>
        <definition>std::pair&lt; cMF *, IntVect &gt; amrex::FFT::R2C&lt; T, D, C &gt;::getSpectralData</definition>
        <argsstring>() const</argsstring>
        <name>getSpectralData</name>
        <qualifiedname>amrex::FFT::R2C::getSpectralData</qualifiedname>
        <briefdescription>
<para>Get the internal spectral data. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is not available when this class template is instantiated for backward-only transform. For performance reasons, the returned data array does not have the usual ordering of <computeroutput>(x,y,z)</computeroutput>. The order is specified in the second part of the return value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="305" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1ad0b77ce345115cbc6ffca2ca73f98241" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>, <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt;</type>
        <definition>std::pair&lt; BoxArray, DistributionMapping &gt; amrex::FFT::R2C&lt; T, D, C &gt;::getSpectralDataLayout</definition>
        <argsstring>() const</argsstring>
        <name>getSpectralDataLayout</name>
        <qualifiedname>amrex::FFT::R2C::getSpectralDataLayout</qualifiedname>
        <briefdescription>
<para>Get <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> for spectral data. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> can be used to build <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray&lt;BaseFab&lt;GpuComplex&lt;T&gt;&gt;&gt;</ref> for spectral data. The returned <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> has the usual order of <computeroutput>(x,y,z)</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="314" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="1397" bodyend="1439"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a8fc9c3d04bec4a578ed7ae1fd529e808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D, C &gt;::post_forward_doit_0</definition>
        <argsstring>(F const &amp;post_forward)</argsstring>
        <name>post_forward_doit_0</name>
        <qualifiedname>amrex::FFT::R2C::post_forward_doit_0</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>post_forward</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="318" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="1130" bodyend="1181"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a6f49bf61ee718c334d9e2656058df55a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D, C &gt;::post_forward_doit_1</definition>
        <argsstring>(F const &amp;post_forward)</argsstring>
        <name>post_forward_doit_1</name>
        <qualifiedname>amrex::FFT::R2C::post_forward_doit_1</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>post_forward</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="321" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="1185" bodyend="1224"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a2060e664330fdfcc3866ea75051da540" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0" kindref="member">Direction</ref></type>
            <declname>DIR</declname>
            <defname>DIR</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt; DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0a965dbaac085fc891bfbbd4f9d145bbc8" kindref="member">Direction::forward</ref>||DIR==<ref refid="namespaceamrex_1_1FFT_1a28c4d0ce41c89d0d14f83d98b45375c0af6cb3e816496528d4187db53bc66567f" kindref="member">Direction::both</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; typename <ref refid="classamrex_1_1FFT_1_1R2C" kindref="compound">R2C</ref>&lt; T, D, <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &gt;<ref refid="classamrex_1_1FFT_1_1R2C_1ae7d1731672767514ef3909438c19ad24" kindref="member">::cMF</ref> *, <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt;</type>
        <definition>std::pair&lt; typename R2C&lt; T, D, C &gt;::cMF *, IntVect &gt; amrex::FFT::R2C&lt; T, D, C &gt;::getSpectralData</definition>
        <argsstring>() const</argsstring>
        <name>getSpectralData</name>
        <qualifiedname>amrex::FFT::R2C::getSpectralData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="1248" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="1248" bodyend="1263"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1ad2112657be6a534f9e99505aa79c13c0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D, C &gt;::prepare_openbc</definition>
        <argsstring>()</argsstring>
        <name>prepare_openbc</name>
        <qualifiedname>amrex::FFT::R2C::prepare_openbc</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="325" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="802" bodyend="855"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a0e1ffeb02696282e50971b27ab3e623c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D, C &gt;::backward_doit</definition>
        <argsstring>(MF &amp;outmf, IntVect const &amp;ngout=IntVect(0), Periodicity const &amp;period=Periodicity::NonPeriodic(), int outcomp=0)</argsstring>
        <name>backward_doit</name>
        <qualifiedname>amrex::FFT::R2C::backward_doit</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1a07c18ab14d0df660208544c3ce8c0a94" kindref="member">MF</ref> &amp;</type>
          <declname>outmf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>ngout</declname>
          <defval><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref>(0)</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> const &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>outcomp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="327" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="1007" bodyend="1064"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a0d46065f4394c1d47235d89a5c1e2eef" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FFT::R2C&lt; T, D, C &gt;::backward_doit</definition>
        <argsstring>(cMF const &amp;inmf, MF &amp;outmf, IntVect const &amp;ngout=IntVect(0), Periodicity const &amp;period=Periodicity::NonPeriodic(), int incomp=0, int outcomp=0)</argsstring>
        <name>backward_doit</name>
        <qualifiedname>amrex::FFT::R2C::backward_doit</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1ae7d1731672767514ef3909438c19ad24" kindref="member">cMF</ref> const &amp;</type>
          <declname>inmf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1a07c18ab14d0df660208544c3ce8c0a94" kindref="member">MF</ref> &amp;</type>
          <declname>outmf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>ngout</declname>
          <defval><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref>(0)</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> const &amp;</type>
          <declname>period</declname>
          <defval><ref refid="classamrex_1_1Periodicity_1a194e779bf59d1700830a35cecb5271a5" kindref="member">Periodicity::NonPeriodic</ref>()</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>incomp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>outcomp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="331" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="1334" bodyend="1393"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1ab6520b1c01a70c834ae691084595e75c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="structamrex_1_1FFT_1_1Plan" kindref="compound">Plan</ref>&lt; T &gt;, <ref refid="structamrex_1_1FFT_1_1Plan" kindref="compound">Plan</ref>&lt; T &gt; &gt;</type>
        <definition>std::pair&lt; Plan&lt; T &gt;, Plan&lt; T &gt; &gt; amrex::FFT::R2C&lt; T, D, C &gt;::make_c2c_plans</definition>
        <argsstring>(cMF &amp;inout, int ndims) const</argsstring>
        <name>make_c2c_plans</name>
        <qualifiedname>amrex::FFT::R2C::make_c2c_plans</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FFT_1_1R2C_1ae7d1731672767514ef3909438c19ad24" kindref="member">cMF</ref> &amp;</type>
          <declname>inout</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ndims</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="336" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="1100" bodyend="1126"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1abdd55fc070980fabf74f6ade73e67527" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FA</type>
          </param>
          <param>
            <type>typename RT</type>
          </param>
        </templateparamlist>
        <type>std::pair&lt; std::unique_ptr&lt; char, <ref refid="structamrex_1_1DataDeleter" kindref="compound">DataDeleter</ref> &gt;, std::size_t &gt;</type>
        <definition>std::pair&lt; std::unique_ptr&lt; char, DataDeleter &gt;, std::size_t &gt; amrex::FFT::R2C&lt; T, D, C &gt;::install_raw_ptr</definition>
        <argsstring>(FA &amp;fa, RT const *p)</argsstring>
        <name>install_raw_ptr</name>
        <qualifiedname>amrex::FFT::R2C::install_raw_ptr</qualifiedname>
        <param>
          <type>FA &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type>RT const *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="389" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="932" bodyend="964"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a3dda94c7d3d03313c61a4dfe10a26e5c" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>static Box amrex::FFT::R2C&lt; T, D, C &gt;::make_domain_x</definition>
        <argsstring>(Box const &amp;domain)</argsstring>
        <name>make_domain_x</name>
        <qualifiedname>amrex::FFT::R2C::make_domain_x</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="338" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="338" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1a4d46a932e7302bd4d0474b11a8a2d314" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>static Box amrex::FFT::R2C&lt; T, D, C &gt;::make_domain_y</definition>
        <argsstring>(Box const &amp;domain)</argsstring>
        <name>make_domain_y</name>
        <qualifiedname>amrex::FFT::R2C::make_domain_y</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="353" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="353" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1ad83c111348d4c308ace236e5f5e9dfac" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref></type>
        <definition>static Box amrex::FFT::R2C&lt; T, D, C &gt;::make_domain_z</definition>
        <argsstring>(Box const &amp;domain)</argsstring>
        <name>make_domain_z</name>
        <qualifiedname>amrex::FFT::R2C::make_domain_z</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="368" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="368" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FFT_1_1R2C_1aef9b8deb0a3978351081c63e0b51525d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>, <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt;</type>
        <definition>std::pair&lt; BoxArray, DistributionMapping &gt; amrex::FFT::R2C&lt; T, D, C &gt;::make_layout_from_local_domain</definition>
        <argsstring>(std::array&lt; int, AMREX_SPACEDIM &gt; const &amp;local_start, std::array&lt; int, AMREX_SPACEDIM &gt; const &amp;local_size)</argsstring>
        <name>make_layout_from_local_domain</name>
        <qualifiedname>amrex::FFT::R2C::make_layout_from_local_domain</qualifiedname>
        <param>
          <type>std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>local_start</declname>
        </param>
        <param>
          <type>std::array&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>local_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="384" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="720" bodyend="746"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Parallel Discrete Fourier Transform. </para>
    </briefdescription>
    <detaileddescription>
<para>This class supports Fourier transforms between real and complex data. The name <ref refid="classamrex_1_1FFT_1_1R2C" kindref="compound">R2C</ref> indicates that the forward transform converts real data to complex data, while the backward transform converts complex data to real data. It should be noted that both directions of transformation are supported, not just from real to complex. The scaling follows the FFTW convention, where applying the forward transform followed by the backward transform scales the original data by the size of the input array.</para>
<para>The arrays are assumed to be in column-major, which is different from FFTW&apos;s row-major layout. Because the complex domain data have the Hermitian symmetry, only half of the data in the complex domain are stored. If the real domain size is nx * ny * nz, the complex domain&apos;s size will be (nx/2+1) * ny * nz.</para>
<para>For more details, we refer the users to <ulink url="https://amrex-codes.github.io/amrex/docs_html/FFT_Chapter.html">https://amrex-codes.github.io/amrex/docs_html/FFT_Chapter.html</ulink>. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="79">
        <label>amrex::Array4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="80" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="82">
        <label>amrex::Array4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1Array4"/>
        <childnode refid="80" relation="usage">
          <edgelabel>begin</edgelabel>
          <edgelabel>end</edgelabel>
        </childnode>
      </node>
      <node id="75">
        <label>amrex::BaseFab&lt; GpuComplex&lt; Real &gt; &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="64" relation="public-inheritance">
        </childnode>
        <childnode refid="76" relation="usage">
          <edgelabel>dptr</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>amrex::BoxND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1BoxND"/>
      </node>
      <node id="87">
        <label>amrex::FBData&lt; BaseFab&lt; GpuComplex&lt; Real &gt; &gt; &gt;</label>
        <link refid="structamrex_1_1FBData"/>
        <childnode refid="88" relation="usage">
          <edgelabel>fb</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="90" relation="usage">
          <edgelabel>recv_data</edgelabel>
          <edgelabel>send_data</edgelabel>
        </childnode>
        <childnode refid="92" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="94" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
        <childnode refid="96" relation="usage">
          <edgelabel>recv_stat</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>amrex::FabArray&lt; BaseFab&lt; GpuComplex&lt; Real &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
        <childnode refid="62" relation="usage">
          <edgelabel>m_factory</edgelabel>
        </childnode>
        <childnode refid="64" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
        <childnode refid="72" relation="usage">
          <edgelabel>m_single_chunk_arena</edgelabel>
        </childnode>
        <childnode refid="74" relation="usage">
          <edgelabel>m_fabs_v</edgelabel>
        </childnode>
        <childnode refid="78" relation="usage">
          <edgelabel>m_arrays</edgelabel>
        </childnode>
        <childnode refid="81" relation="usage">
          <edgelabel>m_const_arrays</edgelabel>
        </childnode>
        <childnode refid="83" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="85" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="86" relation="usage">
          <edgelabel>fbd</edgelabel>
        </childnode>
        <childnode refid="98" relation="usage">
          <edgelabel>pcd</edgelabel>
        </childnode>
        <childnode refid="101" relation="usage">
          <edgelabel>os_temp</edgelabel>
        </childnode>
      </node>
      <node id="63">
        <label>amrex::FabFactory&lt; BaseFab&lt; GpuComplex&lt; Real &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1FabFactory"/>
      </node>
      <node id="76">
        <label>amrex::GpuComplex&lt; Real &gt;</label>
        <link refid="structamrex_1_1GpuComplex"/>
        <childnode refid="77" relation="usage">
          <edgelabel>m_imag</edgelabel>
          <edgelabel>m_real</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>amrex::IndexTypeND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IndexTypeND"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="34">
        <label>amrex::IntVectND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="11">
        <label>K</label>
      </node>
      <node id="78">
        <label>amrex::MultiArray4&lt; value_type &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="79" relation="usage">
          <edgelabel>dp</edgelabel>
          <edgelabel>hp</edgelabel>
        </childnode>
      </node>
      <node id="81">
        <label>amrex::MultiArray4&lt; value_type const &gt;</label>
        <link refid="structamrex_1_1MultiArray4"/>
        <childnode refid="82" relation="usage">
          <edgelabel>dp</edgelabel>
          <edgelabel>hp</edgelabel>
        </childnode>
      </node>
      <node id="99">
        <label>amrex::PCData&lt; BaseFab&lt; GpuComplex&lt; Real &gt; &gt; &gt;</label>
        <link refid="structamrex_1_1PCData"/>
        <childnode refid="100" relation="usage">
          <edgelabel>cpc</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>src</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>recv_from</edgelabel>
        </childnode>
        <childnode refid="90" relation="usage">
          <edgelabel>recv_data</edgelabel>
        </childnode>
        <childnode refid="92" relation="usage">
          <edgelabel>recv_size</edgelabel>
        </childnode>
        <childnode refid="94" relation="usage">
          <edgelabel>recv_reqs</edgelabel>
          <edgelabel>send_reqs</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::FFT::Plan&lt; Real &gt;</label>
        <link refid="structamrex_1_1FFT_1_1Plan"/>
      </node>
      <node id="106">
        <label>amrex::FFT::R2C&lt; Real, D, C &gt;</label>
        <link refid="classamrex_1_1FFT_1_1R2C"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_fft_bwd_x</edgelabel>
          <edgelabel>m_fft_bwd_x_half</edgelabel>
          <edgelabel>m_fft_bwd_y</edgelabel>
          <edgelabel>m_fft_bwd_z</edgelabel>
          <edgelabel>m_fft_fwd_x</edgelabel>
          <edgelabel>m_fft_fwd_x_half</edgelabel>
          <edgelabel>m_fft_fwd_y</edgelabel>
          <edgelabel>m_fft_fwd_z</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_cmd_x2y</edgelabel>
          <edgelabel>m_cmd_x2z</edgelabel>
          <edgelabel>m_cmd_x2z_half</edgelabel>
          <edgelabel>m_cmd_y2x</edgelabel>
          <edgelabel>m_cmd_y2z</edgelabel>
          <edgelabel>m_cmd_z2x</edgelabel>
          <edgelabel>m_cmd_z2x_half</edgelabel>
          <edgelabel>m_cmd_z2y</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_dtos_x2y</edgelabel>
          <edgelabel>m_dtos_y2x</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_dtos_y2z</edgelabel>
          <edgelabel>m_dtos_z2y</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_dtos_x2z</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_dtos_z2x</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_cx</edgelabel>
          <edgelabel>m_cy</edgelabel>
          <edgelabel>m_cz</edgelabel>
          <edgelabel>m_raw_cmf</edgelabel>
        </childnode>
        <childnode refid="102" relation="usage">
          <edgelabel>m_data_1</edgelabel>
          <edgelabel>m_data_2</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_real_domain</edgelabel>
          <edgelabel>m_spectral_domain_x</edgelabel>
          <edgelabel>m_spectral_domain_y</edgelabel>
          <edgelabel>m_spectral_domain_z</edgelabel>
        </childnode>
        <childnode refid="105" relation="usage">
          <edgelabel>m_r2c_sub</edgelabel>
        </childnode>
        <childnode refid="107" relation="usage">
          <edgelabel>m_sub_helper</edgelabel>
        </childnode>
        <childnode refid="108" relation="usage">
          <edgelabel>m_info</edgelabel>
        </childnode>
      </node>
      <node id="104">
        <label>amrex::FFT::R2C&lt; Real, FFT::Direction::both, false &gt;</label>
        <link refid="classamrex_1_1FFT_1_1R2C"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_fft_bwd_x</edgelabel>
          <edgelabel>m_fft_bwd_x_half</edgelabel>
          <edgelabel>m_fft_bwd_y</edgelabel>
          <edgelabel>m_fft_bwd_z</edgelabel>
          <edgelabel>m_fft_fwd_x</edgelabel>
          <edgelabel>m_fft_fwd_x_half</edgelabel>
          <edgelabel>m_fft_fwd_y</edgelabel>
          <edgelabel>m_fft_fwd_z</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_cmd_x2y</edgelabel>
          <edgelabel>m_cmd_x2z</edgelabel>
          <edgelabel>m_cmd_x2z_half</edgelabel>
          <edgelabel>m_cmd_y2x</edgelabel>
          <edgelabel>m_cmd_y2z</edgelabel>
          <edgelabel>m_cmd_z2x</edgelabel>
          <edgelabel>m_cmd_z2x_half</edgelabel>
          <edgelabel>m_cmd_z2y</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_dtos_x2y</edgelabel>
          <edgelabel>m_dtos_y2x</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_dtos_y2z</edgelabel>
          <edgelabel>m_dtos_z2y</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_dtos_x2z</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_dtos_z2x</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_cx</edgelabel>
          <edgelabel>m_cy</edgelabel>
          <edgelabel>m_cz</edgelabel>
          <edgelabel>m_raw_cmf</edgelabel>
        </childnode>
        <childnode refid="102" relation="usage">
          <edgelabel>m_data_1</edgelabel>
          <edgelabel>m_data_2</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_real_domain</edgelabel>
          <edgelabel>m_spectral_domain_x</edgelabel>
          <edgelabel>m_spectral_domain_y</edgelabel>
          <edgelabel>m_spectral_domain_z</edgelabel>
        </childnode>
        <childnode refid="105" relation="usage">
          <edgelabel>m_r2c_sub</edgelabel>
        </childnode>
        <childnode refid="107" relation="usage">
          <edgelabel>m_sub_helper</edgelabel>
        </childnode>
        <childnode refid="108" relation="usage">
          <edgelabel>m_info</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>T</label>
      </node>
      <node id="94">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="95" relation="public-inheritance">
        </childnode>
      </node>
      <node id="96">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="97" relation="public-inheritance">
        </childnode>
      </node>
      <node id="40">
        <label>amrex::Vector&lt; amrex::BoxND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="41" relation="public-inheritance">
        </childnode>
      </node>
      <node id="90">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="91" relation="public-inheritance">
        </childnode>
      </node>
      <node id="50">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="51" relation="public-inheritance">
        </childnode>
      </node>
      <node id="92">
        <label>amrex::Vector&lt; std::size_t &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="93" relation="public-inheritance">
        </childnode>
      </node>
      <node id="83">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="84" relation="public-inheritance">
        </childnode>
      </node>
      <node id="65">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="66" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
        <childnode refid="67" relation="usage">
          <edgelabel>m_profiler</edgelabel>
        </childnode>
      </node>
      <node id="67">
        <label>amrex::Arena::ArenaProfiler</label>
        <link refid="structamrex_1_1Arena_1_1ArenaProfiler"/>
        <childnode refid="68" relation="usage">
          <edgelabel>m_arena_profiler_mutex</edgelabel>
        </childnode>
        <childnode refid="69" relation="usage">
          <edgelabel>m_profiling_stats</edgelabel>
        </childnode>
        <childnode refid="71" relation="usage">
          <edgelabel>m_currently_allocated</edgelabel>
        </childnode>
      </node>
      <node id="66">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="39">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="40" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
      </node>
      <node id="36">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="37" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
      </node>
      <node id="33">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="34" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="30">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="31" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="31" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="27">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="28" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="29" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="35" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="27" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
      </node>
      <node id="54">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="39" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="58">
        <label>amrex::BoxIndexerND&lt; dim &gt;</label>
        <link refid="structamrex_1_1BoxIndexerND"/>
        <childnode refid="59" relation="usage">
          <edgelabel>fdm</edgelabel>
        </childnode>
      </node>
      <node id="46">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="40" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>amrex::CellIndexEnum</label>
        <link refid="structamrex_1_1CellIndexEnum"/>
      </node>
      <node id="64">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="65" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="80">
        <label>amrex::Dim3</label>
        <link refid="structamrex_1_1Dim3"/>
      </node>
      <node id="47">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
        <childnode refid="48" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
      </node>
      <node id="49">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="50" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="55">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="49" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="108">
        <label>amrex::FFT::Info</label>
        <link refid="structamrex_1_1FFT_1_1Info"/>
      </node>
      <node id="1">
        <label>amrex::FFT::R2C&lt; T, D, C &gt;</label>
        <link refid="classamrex_1_1FFT_1_1R2C"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_fft_bwd_x</edgelabel>
          <edgelabel>m_fft_bwd_x_half</edgelabel>
          <edgelabel>m_fft_bwd_y</edgelabel>
          <edgelabel>m_fft_bwd_z</edgelabel>
          <edgelabel>m_fft_fwd_x</edgelabel>
          <edgelabel>m_fft_fwd_x_half</edgelabel>
          <edgelabel>m_fft_fwd_y</edgelabel>
          <edgelabel>m_fft_fwd_z</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_cmd_x2y</edgelabel>
          <edgelabel>m_cmd_x2z</edgelabel>
          <edgelabel>m_cmd_x2z_half</edgelabel>
          <edgelabel>m_cmd_y2x</edgelabel>
          <edgelabel>m_cmd_y2z</edgelabel>
          <edgelabel>m_cmd_z2x</edgelabel>
          <edgelabel>m_cmd_z2x_half</edgelabel>
          <edgelabel>m_cmd_z2y</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_dtos_x2y</edgelabel>
          <edgelabel>m_dtos_y2x</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>m_dtos_y2z</edgelabel>
          <edgelabel>m_dtos_z2y</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_dtos_x2z</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_dtos_z2x</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_cx</edgelabel>
          <edgelabel>m_cy</edgelabel>
          <edgelabel>m_cz</edgelabel>
          <edgelabel>m_raw_cmf</edgelabel>
        </childnode>
        <childnode refid="102" relation="usage">
          <edgelabel>m_data_1</edgelabel>
          <edgelabel>m_data_2</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_real_domain</edgelabel>
          <edgelabel>m_spectral_domain_x</edgelabel>
          <edgelabel>m_spectral_domain_y</edgelabel>
          <edgelabel>m_spectral_domain_z</edgelabel>
        </childnode>
        <childnode refid="103" relation="usage">
          <edgelabel>m_r2c_sub</edgelabel>
        </childnode>
        <childnode refid="107" relation="usage">
          <edgelabel>m_sub_helper</edgelabel>
        </childnode>
        <childnode refid="108" relation="usage">
          <edgelabel>m_info</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>amrex::FFT::RotateBwd</label>
        <link refid="structamrex_1_1FFT_1_1RotateBwd"/>
      </node>
      <node id="14">
        <label>amrex::FFT::RotateFwd</label>
        <link refid="structamrex_1_1FFT_1_1RotateFwd"/>
      </node>
      <node id="12">
        <label>amrex::FFT::Swap01</label>
        <link refid="structamrex_1_1FFT_1_1Swap01"/>
      </node>
      <node id="13">
        <label>amrex::FFT::Swap02</label>
        <link refid="structamrex_1_1FFT_1_1Swap02"/>
      </node>
      <node id="107">
        <label>amrex::FFT::detail::SubHelper</label>
        <link refid="structamrex_1_1FFT_1_1detail_1_1SubHelper"/>
      </node>
      <node id="85">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="17">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="18" relation="usage">
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_TheCPCache</edgelabel>
          <edgelabel>m_TheCrseFineCache</edgelabel>
          <edgelabel>m_TheFBCache</edgelabel>
          <edgelabel>m_TheFillPatchCache</edgelabel>
          <edgelabel>m_ThePolarBCache</edgelabel>
          <edgelabel>m_TheRB180Cache</edgelabel>
          <edgelabel>m_TheRB90Cache</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>m_mem_usage</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>m_region_tag</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="50" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="52" relation="usage">
          <edgelabel>ownership</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
        </childnode>
        <childnode refid="53" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_TheTileArrayCache</edgelabel>
        </childnode>
        <childnode refid="56" relation="usage">
          <edgelabel>m_TheParForCache</edgelabel>
        </childnode>
        <childnode refid="60" relation="usage">
          <edgelabel>m_BD_count</edgelabel>
        </childnode>
        <childnode refid="61" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
      </node>
      <node id="53">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="54" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="55" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="100">
        <label>amrex::FabArrayBase::CPC</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CPC"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="53" relation="usage">
          <edgelabel>m_dstbdk</edgelabel>
          <edgelabel>m_srcbdk</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>m_dstng</edgelabel>
          <edgelabel>m_srcng</edgelabel>
        </childnode>
        <childnode refid="89" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>m_dstba</edgelabel>
          <edgelabel>m_srcba</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="21" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>amrex::FabArrayBase::CommMetaData</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CommMetaData"/>
        <childnode refid="6" relation="usage">
          <edgelabel>m_LocTags</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_RcvTags</edgelabel>
          <edgelabel>m_SndTags</edgelabel>
        </childnode>
      </node>
      <node id="88">
        <label>amrex::FabArrayBase::FB</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FB"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_ngrow</edgelabel>
        </childnode>
        <childnode refid="89" relation="usage">
          <edgelabel>m_period</edgelabel>
        </childnode>
      </node>
      <node id="61">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="57">
        <label>amrex::FabArrayBase::ParForInfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1ParForInfo"/>
        <childnode refid="27" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>m_ng</edgelabel>
        </childnode>
        <childnode refid="58" relation="usage">
          <edgelabel>m_boxes</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>amrex::FabArrayBase::meminfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1meminfo"/>
      </node>
      <node id="18">
        <label>amrex::IntVectND&lt; dim &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="59">
        <label>amrex::Math::FastDivmodU64</label>
        <link refid="structamrex_1_1Math_1_1FastDivmodU64"/>
      </node>
      <node id="70">
        <label>amrex::MemStat</label>
        <link refid="structamrex_1_1MemStat"/>
      </node>
      <node id="4">
        <label>amrex::NonLocalBC::MultiBlockCommMetaData</label>
        <link refid="structamrex_1_1NonLocalBC_1_1MultiBlockCommMetaData"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="37">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="89">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="34" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="77">
        <label>Real</label>
      </node>
      <node id="73">
        <label>amrex::detail::SingleChunkArena</label>
        <link refid="classamrex_1_1detail_1_1SingleChunkArena"/>
        <childnode refid="65" relation="public-inheritance">
        </childnode>
        <childnode refid="64" relation="usage">
          <edgelabel>m_dallocator</edgelabel>
        </childnode>
      </node>
      <node id="60">
        <label>std::map&lt; amrex::FabArrayBase::BDKey, int &gt;</label>
        <childnode refid="53" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>std::map&lt; std::string, amrex::FabArrayBase::meminfo &gt;</label>
        <childnode refid="21" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="69">
        <label>std::map&lt; std::string, amrex::MemStat &gt;</label>
        <childnode refid="21" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="70" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="56">
        <label>std::multimap&lt; amrex::FabArrayBase::BDKey, amrex::FabArrayBase::ParForInfo * &gt;</label>
        <childnode refid="53" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="57" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
        <childnode refid="39" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
        <childnode refid="46" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>std::shared_ptr&lt; amrex::DistributionMapping::Ref &gt;</label>
        <childnode refid="49" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="10">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="11" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>std::multimap&lt; K, T &gt;</label>
        <childnode refid="11" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="68">
        <label>std::mutex</label>
      </node>
      <node id="21">
        <label>std::string</label>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="95">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="97">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="91">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="51">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="93">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="84">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>std::unique_ptr&lt; CopyComTagsContainer &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>std::unique_ptr&lt; MapOfCopyComTagContainers &gt;</label>
        <childnode refid="10" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="86">
        <label>std::unique_ptr&lt; amrex::FBData&lt; BaseFab&lt; GpuComplex&lt; Real &gt; &gt; &gt; &gt;</label>
        <childnode refid="87" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="105">
        <label>std::unique_ptr&lt; amrex::FFT::R2C&lt; Real, D, C &gt; &gt;</label>
        <childnode refid="106" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="103">
        <label>std::unique_ptr&lt; amrex::FFT::R2C&lt; Real, FFT::Direction::both, false &gt; &gt;</label>
        <childnode refid="104" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="101">
        <label>std::unique_ptr&lt; amrex::FabArray&lt; BaseFab&lt; GpuComplex&lt; Real &gt; &gt; &gt; &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="62">
        <label>std::unique_ptr&lt; amrex::FabFactory&lt; BaseFab&lt; GpuComplex&lt; Real &gt; &gt; &gt; &gt;</label>
        <childnode refid="63" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::unique_ptr&lt; amrex::NonLocalBC::MultiBlockCommMetaData &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="98">
        <label>std::unique_ptr&lt; amrex::PCData&lt; BaseFab&lt; GpuComplex&lt; Real &gt; &gt; &gt; &gt;</label>
        <childnode refid="99" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="72">
        <label>std::unique_ptr&lt; amrex::detail::SingleChunkArena &gt;</label>
        <childnode refid="73" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="102">
        <label>std::unique_ptr&lt; char, amrex::DataDeleter &gt;</label>
      </node>
      <node id="43">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="18" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="71">
        <label>std::unordered_map&lt; void *, std::pair&lt; amrex::MemStat *, std::size_t &gt; &gt;</label>
      </node>
      <node id="74">
        <label>std::vector&lt; BaseFab&lt; GpuComplex&lt; Real &gt; &gt; * &gt;</label>
        <childnode refid="75" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="52">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="44">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="25">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="21" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" line="39" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/FFT/AMReX_FFT_R2C.H" bodystart="40" bodyend="442"/>
    <listofallmembers>
      <member refid="classamrex_1_1FFT_1_1R2C_1a6572617625277fe8da80e09e44d75fc1" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>backward</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a575c11f8c0c8babd332068696ebf7739" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>backward</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1af1e94ef998b45e50e2e4e83b141e2ff8" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>backward</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a0e1ffeb02696282e50971b27ab3e623c" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>backward_doit</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a0d46065f4394c1d47235d89a5c1e2eef" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>backward_doit</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ae7d1731672767514ef3909438c19ad24" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>cMF</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1af97b9a2fd2cf2de2944f51c53659a9e1" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>forward</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a2448d0524dc824afa2496c4b91360391" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>forward</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1abe6ec3521f529f783dcde530812cb05d" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>forward</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1aea9a934a1486a1e79988b2ef96e8d24f" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>forwardThenBackward</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a29a4086586998f2314820c95807fc329" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>getLocalDomain</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a2432e6d1fb8f45a48af5ee54dc7c124b" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>getLocalSpectralDomain</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ad9f115305c4ffabe4e876a9114e5be32" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>getSpectralData</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a2060e664330fdfcc3866ea75051da540" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>getSpectralData</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ad0b77ce345115cbc6ffca2ca73f98241" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>getSpectralDataLayout</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1abdd55fc070980fabf74f6ade73e67527" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>install_raw_ptr</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a39be847a73cc6b5bf68f2def672ae6e6" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_cmd_x2y</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a7187c1efc4385db3d5585bc96f8b3f98" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_cmd_x2z</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a0043e0489b5a6bff456bb0b5127514d5" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_cmd_x2z_half</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ae957062e754bcadaf0991957af0841a9" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_cmd_y2x</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a766a6f52cfa383cbd406ad24c64e32a8" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_cmd_y2z</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1acbdc1e4e80e70872762588bd61d26b05" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_cmd_z2x</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a34a80ebcde2dfacb2c257baa399e3607" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_cmd_z2x_half</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a8cdcf8557e057ee155e8d2bb728328d4" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_cmd_z2y</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a49201032c814a83b504752d388ec846e" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_cx</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a1487a1cb3c9c99eb2c97e2be25f9a85e" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_cy</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a87ec1eefd998a8351288407362b87a50" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_cz</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1af2a37855637a647e63430415af0a709f" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_data_1</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a4aec372e4342615252409bc4c50ba954" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_data_2</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a67918f091c9254deb019ad8a07cbb09b" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_do_alld_fft</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a70799a81ad2650ed880b2a6d371f51a5" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_dtos_x2y</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a733dfe4be995af1d172e89ca392c519c" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_dtos_x2z</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a9fa340233592c6f0f95dee9a45ac127b" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_dtos_y2x</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a5f20208891d3fba8faf0a6e2c56852ea" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_dtos_y2z</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1af868711216f1ed131c9257ac14bd9156" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_dtos_z2x</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1afcd87a98af06bb71eef53b52a8d77400" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_dtos_z2y</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a4a6a9395c021e96d1e17832b40f8841b" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_fft_bwd_x</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a7824471971d16b9e694be9096a26d8a5" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_fft_bwd_x_half</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1af1a6e36c635a82881b800c971ab48e3f" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_fft_bwd_y</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ac9c5dfc35d226c7f855ffc3c1442359b" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_fft_bwd_z</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1af4b15671810f5a84ab6715bbd56f7b58" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_fft_fwd_x</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ac9ee1ebd7b1be12422791eba4a9a1846" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_fft_fwd_x_half</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a1cf1e47a956e17a2a921406ac14162c6" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_fft_fwd_y</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a210fd009cc8ceee6b10715f51a6b6d7b" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_fft_fwd_z</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a06d2cb67911c4b941cbcff8b1c313c64" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_info</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ace1a9f4f8e0f19d0ff099520c43aa90f" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_openbc_half</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a8f47a085db0bac9c450d889095ee3397" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_r2c_sub</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1aec454e7195395e4b2b0f8c5f208598bd" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_raw_cmf</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a1f441cc6fe413997b17347171ef13ef8" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_raw_mf</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ae96748bea1d4af0ec1f04bef5c96f6c8" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_real_domain</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1aebe08a2844357de336689cdba54a9804" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_rx</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1aea7a8880fa0cfd0c9fd69de239e5aee5" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_slab_decomp</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a40052f2e65b465812d23393edbf35054" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_spectral_domain_x</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a1149c63ebb5db402f30556b717950a16" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_spectral_domain_y</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a8386420723e4c174f28488a46e30e2fa" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_spectral_domain_z</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a91b067400729a46cd9cc2c37438c5eab" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>m_sub_helper</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ab6520b1c01a70c834ae691084595e75c" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>make_c2c_plans</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a3dda94c7d3d03313c61a4dfe10a26e5c" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>make_domain_x</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a4d46a932e7302bd4d0474b11a8a2d314" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>make_domain_y</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ad83c111348d4c308ace236e5f5e9dfac" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>make_domain_z</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1aef9b8deb0a3978351081c63e0b51525d" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>make_layout_from_local_domain</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a07c18ab14d0df660208544c3ce8c0a94" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>MF</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1afd3d509858e88e5f3a1efe7cb494baf4" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>OpenBCSolver</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a0965fb062a67ff26a2349a9c44b06da6" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a399f7d54d1870e370908f77501355181" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a1be460f58e5e6b3d1fc4ddecc08e522b" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>Poisson</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1abf6a97cc1f486d7ad995037461ecb49a" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>PoissonHybrid</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a8fc9c3d04bec4a578ed7ae1fd529e808" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>post_forward_doit_0</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a6f49bf61ee718c334d9e2656058df55a" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>post_forward_doit_1</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ad2112657be6a534f9e99505aa79c13c0" prot="private" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>prepare_openbc</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a422c9f9cd4adb3ca93c97b94a8440e9c" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>R2C</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a98c45021de1bdb32013c8d0c5664f9de" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>R2C</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1ac024841c9f9848b7e7a85c810468a1a3" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>R2C</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a625754f142ffaf7cc8661e8917e94153" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>R2C</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a837e3afdc0aacbf658df5685dccd8e5a" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>scalingFactor</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1af7978c75e944ef0de524c802ba18ff6c" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>setLocalDomain</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a68694b2d828feda97211f5ce5c9e9705" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>setLocalSpectralDomain</name></member>
      <member refid="classamrex_1_1FFT_1_1R2C_1a307bbe24b6ccf594a090292ece7378ad" prot="public" virt="non-virtual"><scope>amrex::FFT::R2C</scope><name>~R2C</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
