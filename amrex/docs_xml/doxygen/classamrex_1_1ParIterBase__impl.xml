<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1ParIterBase__impl" kind="class" language="C++" prot="public">
    <compoundname>amrex::ParIterBase_impl</compoundname>
    <basecompoundref refid="classamrex_1_1MFIter" prot="public" virt="non-virtual">amrex::MFIter</basecompoundref>
    <includes refid="AMReX__ParIter_8H" local="no">AMReX_ParIter.H</includes>
    <templateparamlist>
      <param>
        <type>bool</type>
        <declname>is_const</declname>
        <defname>is_const</defname>
      </param>
      <param>
        <type>typename T_ParticleType</type>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>NArrayReal</declname>
        <defname>NArrayReal</defname>
        <defval>0</defval>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>NArrayInt</declname>
        <defname>NArrayInt</defname>
        <defval>0</defval>
      </param>
      <param>
        <type>template&lt; class &gt; class</type>
        <declname>Allocator</declname>
        <defname>Allocator</defname>
        <defval><ref refid="namespaceamrex_1a179fafc569924202b166896b608cd5c2" kindref="member">DefaultAllocator</ref></defval>
      </param>
      <param>
        <type>class CellAssignor</type>
        <defval><ref refid="structamrex_1_1DefaultAssignor" kindref="compound">DefaultAssignor</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classamrex_1_1ParIterBase__impl_1a40d448c9de4fde0c1a475780ebc33ea7" prot="private" static="no">
        <type><ref refid="classamrex_1_1ParticleContainer__impl" kindref="compound">ParticleContainer_impl</ref>&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;</type>
        <definition>using amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::PCType =  ParticleContainer_impl&lt;T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor&gt;</definition>
        <argsstring></argsstring>
        <name>PCType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="36" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParIterBase__impl_1a2f563176894b5abc02f1aab9e609627c" prot="private" static="no">
        <type>std::conditional_t&lt; is_const, <ref refid="classamrex_1_1ParIterBase__impl_1a40d448c9de4fde0c1a475780ebc33ea7" kindref="member">PCType</ref> const  &amp;, <ref refid="classamrex_1_1ParIterBase__impl_1a40d448c9de4fde0c1a475780ebc33ea7" kindref="member">PCType</ref> &amp; &gt;</type>
        <definition>using amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::ContainerRef =  std::conditional_t&lt;is_const, PCType const&amp;, PCType&amp;&gt;</definition>
        <argsstring></argsstring>
        <name>ContainerRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="37" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParIterBase__impl_1a151fe17c32149faa3e0c7a5d94ba7311" prot="private" static="no">
        <type>std::conditional_t&lt; is_const, <ref refid="classamrex_1_1ParIterBase__impl_1a40d448c9de4fde0c1a475780ebc33ea7" kindref="member">PCType</ref> const  *, <ref refid="classamrex_1_1ParIterBase__impl_1a40d448c9de4fde0c1a475780ebc33ea7" kindref="member">PCType</ref> * &gt;</type>
        <definition>using amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::ContainerPtr =  std::conditional_t&lt;is_const, PCType const*, PCType*&gt;</definition>
        <argsstring></argsstring>
        <name>ContainerPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="38" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParIterBase__impl_1a6f5dade75fdc279347334eaf3d39dae4" prot="private" static="no">
        <type>std::conditional_t&lt; is_const, typename <ref refid="classamrex_1_1ParticleContainer__impl_1aad727cb5c9b392a0ec2c7bbabdf22576" kindref="member">PCType::ParticleTileType</ref> const  &amp;, typename <ref refid="classamrex_1_1ParticleContainer__impl_1aad727cb5c9b392a0ec2c7bbabdf22576" kindref="member">PCType::ParticleTileType</ref> &amp; &gt;</type>
        <definition>using amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::ParticleTileRef =  std::conditional_t &lt;is_const, typename PCType::ParticleTileType const&amp;, typename PCType::ParticleTileType &amp;&gt;</definition>
        <argsstring></argsstring>
        <name>ParticleTileRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="39" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParIterBase__impl_1af9e7daf85f061eb283287567b459aade" prot="private" static="no">
        <type>std::conditional_t&lt; is_const, typename <ref refid="classamrex_1_1ParticleContainer__impl_1aad727cb5c9b392a0ec2c7bbabdf22576" kindref="member">PCType::ParticleTileType</ref> const  *, typename <ref refid="classamrex_1_1ParticleContainer__impl_1aad727cb5c9b392a0ec2c7bbabdf22576" kindref="member">PCType::ParticleTileType</ref> * &gt;</type>
        <definition>using amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::ParticleTilePtr =  std::conditional_t &lt;is_const, typename PCType::ParticleTileType const*, typename PCType::ParticleTileType *&gt;</definition>
        <argsstring></argsstring>
        <name>ParticleTilePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="41" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParIterBase__impl_1a3bb5988d03d102257b72a7937d55e0ac" prot="private" static="no">
        <type>std::conditional_t&lt; is_const, typename <ref refid="classamrex_1_1ParticleContainer__impl_1a3995a8f437ce88e5a973f4f2f97501bf" kindref="member">PCType::AoS</ref> const  &amp;, typename <ref refid="classamrex_1_1ParticleContainer__impl_1a3995a8f437ce88e5a973f4f2f97501bf" kindref="member">PCType::AoS</ref> &amp; &gt;</type>
        <definition>using amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::AoSRef =  std::conditional_t &lt;is_const, typename PCType::AoS const&amp;, typename PCType::AoS&amp;&gt;</definition>
        <argsstring></argsstring>
        <name>AoSRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="43" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParIterBase__impl_1a064fd9ec04dc771d3749d2ce27281ea9" prot="private" static="no">
        <type>std::conditional_t&lt; is_const, typename <ref refid="classamrex_1_1ParticleContainer__impl_1a69ff052875e307b7cb9ca774912b4003" kindref="member">PCType::SoA</ref> const  &amp;, typename <ref refid="classamrex_1_1ParticleContainer__impl_1a69ff052875e307b7cb9ca774912b4003" kindref="member">PCType::SoA</ref> &amp; &gt;</type>
        <definition>using amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::SoARef =  std::conditional_t &lt;is_const, typename PCType::SoA const&amp;, typename PCType::SoA&amp;&gt;</definition>
        <argsstring></argsstring>
        <name>SoARef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="45" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classamrex_1_1ParIterBase__impl_1aef96becd474fbf31dfd139c15e793c91" prot="public" static="no">
        <type><ref refid="classamrex_1_1ParticleContainer__impl" kindref="compound">ParticleContainer_impl</ref>&lt; T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;</type>
        <definition>using amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::ContainerType =  ParticleContainer_impl&lt;T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor&gt;</definition>
        <argsstring></argsstring>
        <name>ContainerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="50" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParIterBase__impl_1ac2f8c395b361cb48d2ba6daaf7873149" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1ParticleContainer__impl_1aad727cb5c9b392a0ec2c7bbabdf22576" kindref="member">ContainerType::ParticleTileType</ref></type>
        <definition>using amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::ParticleTileType =  typename ContainerType::ParticleTileType</definition>
        <argsstring></argsstring>
        <name>ParticleTileType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="51" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParIterBase__impl_1abe3648d60d09f07210ff0fa5efef4ea0" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1ParticleContainer__impl_1a3995a8f437ce88e5a973f4f2f97501bf" kindref="member">ContainerType::AoS</ref></type>
        <definition>using amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::AoS =  typename ContainerType::AoS</definition>
        <argsstring></argsstring>
        <name>AoS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="52" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParIterBase__impl_1a96e44e978a98c0c67291b8271061c94f" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1ParticleContainer__impl_1a69ff052875e307b7cb9ca774912b4003" kindref="member">ContainerType::SoA</ref></type>
        <definition>using amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::SoA =  typename ContainerType::SoA</definition>
        <argsstring></argsstring>
        <name>SoA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="53" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParIterBase__impl_1a39540f149f469767e4dd7333f194e1a4" prot="public" static="no">
        <type>T_ParticleType</type>
        <definition>using amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::ParticleType =  T_ParticleType</definition>
        <argsstring></argsstring>
        <name>ParticleType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="54" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParIterBase__impl_1a7baf75176f06182c85c9bc71b02f7bf1" prot="public" static="no">
        <type>typename SoA::RealVector</type>
        <definition>using amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::RealVector =  typename SoA::RealVector</definition>
        <argsstring></argsstring>
        <name>RealVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="55" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParIterBase__impl_1af511bb0ba2cf4fa1b60188914ec13cb7" prot="public" static="no">
        <type>typename SoA::IntVector</type>
        <definition>using amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::IntVector =  typename SoA::IntVector</definition>
        <argsstring></argsstring>
        <name>IntVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="56" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1ParIterBase__impl_1a9eb90934f537a8f10811e014520cc116" prot="public" static="no">
        <type>typename <ref refid="classamrex_1_1ParticleContainer__impl_1a54e7d39c60aed23dded20dfdea50f7de" kindref="member">ContainerType::ParticleVector</ref></type>
        <definition>using amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::ParticleVector =  typename ContainerType::ParticleVector</definition>
        <argsstring></argsstring>
        <name>ParticleVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="57" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParIterBase__impl_1a3d4602354f3ccaa1ad78ebd1c4921d1b" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::NStructReal</definition>
        <argsstring></argsstring>
        <name>NStructReal</name>
        <initializer>= ParticleType::NReal</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="58" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParIterBase__impl_1a609d37238c417b72763dad7069d494a1" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>constexpr int amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::NStructInt</definition>
        <argsstring></argsstring>
        <name>NStructInt</name>
        <initializer>= ParticleType::NInt</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="59" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1ParIterBase__impl_1aa75db5075753c9accd5e3445b474bad0" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::m_level</definition>
        <argsstring></argsstring>
        <name>m_level</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="104" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParIterBase__impl_1abedcbfd256a529f1b411014efb0dfd31" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1ParIterBase__impl_1af9e7daf85f061eb283287567b459aade" kindref="member">ParticleTilePtr</ref></type>
        <definition>ParticleTilePtr amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::m_particle_current_tile</definition>
        <argsstring></argsstring>
        <name>m_particle_current_tile</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="105" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1ParIterBase__impl_1a1161bc07e1265c1be89ccc12e7a11221" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1ParIterBase__impl_1a151fe17c32149faa3e0c7a5d94ba7311" kindref="member">ContainerPtr</ref></type>
        <definition>ContainerPtr amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::m_pc</definition>
        <argsstring></argsstring>
        <name>m_pc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="106" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1ParIterBase__impl_1afaf6edbba5eee7ad8ec59e92e4971efc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::ParIterBase_impl</definition>
        <argsstring>(ContainerRef pc, int level)</argsstring>
        <name>ParIterBase_impl</name>
        <param>
          <type><ref refid="classamrex_1_1ParIterBase__impl_1a2f563176894b5abc02f1aab9e609627c" kindref="member">ContainerRef</ref></type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="61" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="190" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParIterBase__impl_1ac21aae96f4f5422d636525b0572777b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::ParIterBase_impl&lt; is_const, ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::ParIterBase_impl</definition>
        <argsstring>(ContainerRef pc, int level, MFItInfo &amp;info)</argsstring>
        <name>ParIterBase_impl</name>
        <param>
          <type><ref refid="classamrex_1_1ParIterBase__impl_1a2f563176894b5abc02f1aab9e609627c" kindref="member">ContainerRef</ref></type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1MFItInfo" kindref="compound">MFItInfo</ref> &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="63" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="166" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParIterBase__impl_1a30d5373e2129c7e4b5a63b992ca91d97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="65" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="65" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParIterBase__impl_1ac8030fe8f3e62e3da8671dde568acac4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParIterBase__impl_1a6f5dade75fdc279347334eaf3d39dae4" kindref="member">ParticleTileRef</ref></type>
        <definition>ParticleTileRef amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::GetParticleTile</definition>
        <argsstring>() const</argsstring>
        <name>GetParticleTile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="84" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParIterBase__impl_1a71c746f6d3c895885b57ee891b828959" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParIterBase__impl_1a3bb5988d03d102257b72a7937d55e0ac" kindref="member">AoSRef</ref></type>
        <definition>AoSRef amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::GetArrayOfStructs</definition>
        <argsstring>() const</argsstring>
        <name>GetArrayOfStructs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="86" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParIterBase__impl_1af710895ae98e8f6a993c0fd79fceaddf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1ParIterBase__impl_1a064fd9ec04dc771d3749d2ce27281ea9" kindref="member">SoARef</ref></type>
        <definition>SoARef amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::GetStructOfArrays</definition>
        <argsstring>() const</argsstring>
        <name>GetStructOfArrays</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="88" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParIterBase__impl_1a4a33d9c17eacf3ad38a63d467e74ba3f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::numParticles</definition>
        <argsstring>() const</argsstring>
        <name>numParticles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="90" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParIterBase__impl_1a75904e997d78e7e39e52dfc84e291f51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::numRealParticles</definition>
        <argsstring>() const</argsstring>
        <name>numRealParticles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="92" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParIterBase__impl_1a7751ad25437f923c0ed69c2f8923d454" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::numNeighborParticles</definition>
        <argsstring>() const</argsstring>
        <name>numNeighborParticles</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="94" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParIterBase__impl_1afadb79a7a8d207c7218311f08c07e16e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::GetLevel</definition>
        <argsstring>() const</argsstring>
        <name>GetLevel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="96" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParIterBase__impl_1a834ac60b04b724999383f3b28253b90c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>std::pair&lt;int, int&gt; amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::GetPairIndex</definition>
        <argsstring>() const</argsstring>
        <name>GetPairIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="98" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1ParIterBase__impl_1ac06fddccd637c54fe5f86c83ac4e310f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;::Geom</definition>
        <argsstring>(int lev) const</argsstring>
        <name>Geom</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="100" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="100" bodyend="100"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>amrex::MFIter</label>
        <link refid="classamrex_1_1MFIter"/>
      </node>
      <node id="1">
        <label>amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;</label>
        <link refid="classamrex_1_1ParIterBase__impl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>amrex::MFIter</label>
        <link refid="classamrex_1_1MFIter"/>
        <childnode refid="3" relation="usage">
          <edgelabel>fabArray</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>tile_size</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>index_map</edgelabel>
          <edgelabel>local_index_map</edgelabel>
          <edgelabel>local_tile_index_map</edgelabel>
          <edgelabel>num_local_tiles</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>tile_array</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_fa</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>device_sync</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>typ</edgelabel>
        </childnode>
      </node>
      <node id="33">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="34" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="17">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="15" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>std::map&lt; amrex::FabArrayBase::BDKey, int &gt;</label>
        <childnode refid="20" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>K</label>
      </node>
      <node id="18">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="6">
        <label>T</label>
      </node>
      <node id="47">
        <label>std::unique_ptr&lt; amrex::FabArrayBase &gt;</label>
      </node>
      <node id="27">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="24" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="27" relation="public-inheritance">
        </childnode>
      </node>
      <node id="38">
        <label>std::map&lt; std::string, amrex::FabArrayBase::meminfo &gt;</label>
        <childnode refid="39" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="34" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::ParIterBase_impl&lt; is_const, T_ParticleType, NArrayReal, NArrayInt, Allocator, CellAssignor &gt;</label>
        <link refid="classamrex_1_1ParIterBase__impl"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="22">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="9" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="11">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="12" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="13" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
      </node>
      <node id="42">
        <label>std::multimap&lt; K, T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="44">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="45" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="46" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="34" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="28">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="9" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
      </node>
      <node id="29">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="30" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>std::shared_ptr&lt; amrex::DistributionMapping::Ref &gt;</label>
      </node>
      <node id="13">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::FabArrayBase::ParForInfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1ParForInfo"/>
        <childnode refid="9" relation="usage">
          <edgelabel>m_ng</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_boxes</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="30">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="31" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="25">
        <label>amrex::IntVectND&lt; dim &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="39">
        <label>amrex::FabArrayBase::meminfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1meminfo"/>
      </node>
      <node id="36">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
        <childnode refid="37" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="21" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="46">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
      </node>
      <node id="10">
        <label>amrex::BoxIndexer</label>
        <link refid="structamrex_1_1BoxIndexer"/>
      </node>
      <node id="21">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="22" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::multimap&lt; amrex::FabArrayBase::BDKey, amrex::FabArrayBase::ParForInfo * &gt;</label>
        <childnode refid="8" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>amrex::Vector&lt; amrex::Box &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="27" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_TheTileArrayCache</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>m_TheParForCache</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>m_mem_usage</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
        </childnode>
        <childnode refid="40" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>m_BD_count</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_TheCPCache</edgelabel>
          <edgelabel>m_TheCrseFineCache</edgelabel>
          <edgelabel>m_TheFBCache</edgelabel>
          <edgelabel>m_TheFillPatchCache</edgelabel>
          <edgelabel>m_ThePolarBCache</edgelabel>
          <edgelabel>m_TheRB180Cache</edgelabel>
          <edgelabel>m_TheRB90Cache</edgelabel>
        </childnode>
        <childnode refid="32" relation="usage">
          <edgelabel>ownership</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>m_region_tag</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="48">
        <label>amrex::MFIter::DeviceSync</label>
        <link refid="structamrex_1_1MFIter_1_1DeviceSync"/>
      </node>
      <node id="34">
        <label>std::string</label>
        <childnode refid="35" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>amrex::IntVectND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" line="30" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParIter.H" bodystart="32" bodyend="107"/>
    <listofallmembers>
      <member refid="classamrex_1_1MFIter_1af5cf94bce73f6da744dd94acc46cdf38a96650cf6d7f0f21d0f4b118ae897d008" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>AllBoxes</name></member>
      <member refid="classamrex_1_1MFIter_1ab2fc387b6146040c8efcef278b258f78" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>allow_multiple_mfiters</name></member>
      <member refid="classamrex_1_1MFIter_1a3a8a7a77b913c5ddc8b352f2610e9cd1" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>allowMultipleMFIters</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1abe3648d60d09f07210ff0fa5efef4ea0" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>AoS</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1a3bb5988d03d102257b72a7937d55e0ac" prot="private" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>AoSRef</name></member>
      <member refid="classamrex_1_1MFIter_1a65b335b52bc54d9eaf7030a4fce20cf8" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>beginIndex</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1a151fe17c32149faa3e0c7a5d94ba7311" prot="private" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>ContainerPtr</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1a2f563176894b5abc02f1aab9e609627c" prot="private" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>ContainerRef</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1aef96becd474fbf31dfd139c15e793c91" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>ContainerType</name></member>
      <member refid="classamrex_1_1MFIter_1abfba09b9f27138141e9758d1a8ea2e4b" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>currentIndex</name></member>
      <member refid="classamrex_1_1MFIter_1a46b0a938c3d5f41c379d0adc7bf19c0d" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>depth</name></member>
      <member refid="classamrex_1_1MFIter_1a55734d57f0abbb384833f35c1a5422ef" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>device_sync</name></member>
      <member refid="classamrex_1_1MFIter_1a47d2e159ed2d66cd78498ea5bea35a17" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1MFIter_1a16fa2d144bcc71d665056de5938c4b32" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>dynamic</name></member>
      <member refid="classamrex_1_1MFIter_1a427faab13c7d1f9d72b476452df519e1" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>endIndex</name></member>
      <member refid="classamrex_1_1MFIter_1afd2ce3907fa6c9f7aa4773ea39a65cd2" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>fabArray</name></member>
      <member refid="classamrex_1_1MFIter_1a3290eb14472377e0118842344967a44c" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>fabbox</name></member>
      <member refid="classamrex_1_1MFIter_1a7f8343c78da4a5d341aae1e5aea752aa" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1MFIter_1a371e17b5bdd1d743dd9ac0a8bb1bced9" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>finalized</name></member>
      <member refid="classamrex_1_1MFIter_1a1184620f493f560be355cf02e5a0e619" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>flags</name></member>
      <member refid="classamrex_1_1MFIter_1af5cf94bce73f6da744dd94acc46cdf38" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>Flags</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1ac06fddccd637c54fe5f86c83ac4e310f" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>Geom</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1a71c746f6d3c895885b57ee891b828959" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>GetArrayOfStructs</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1afadb79a7a8d207c7218311f08c07e16e" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>GetLevel</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1a834ac60b04b724999383f3b28253b90c" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>GetPairIndex</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1ac8030fe8f3e62e3da8671dde568acac4" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>GetParticleTile</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1af710895ae98e8f6a993c0fd79fceaddf" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>GetStructOfArrays</name></member>
      <member refid="classamrex_1_1MFIter_1ae59e3e67c7b94d6b15158d177dd8cdc8" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>grownnodaltilebox</name></member>
      <member refid="classamrex_1_1MFIter_1a972ba6223b0f4ccca81791b9510b3002" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>grownnodaltilebox</name></member>
      <member refid="classamrex_1_1MFIter_1a1e344ffd39d3dba95d582a7d93c1ad97" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>growntilebox</name></member>
      <member refid="classamrex_1_1MFIter_1ac9653cce066f73c95c3ec89f46f38ba1" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>growntilebox</name></member>
      <member refid="classamrex_1_1MFIter_1aa69f73dbf7931e2d0a3889de2db4a42b" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>index</name></member>
      <member refid="classamrex_1_1MFIter_1ac482cbbf5ecee6f2593a3e4437623082" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>index_map</name></member>
      <member refid="classamrex_1_1MFIter_1addaa9305a4ee5dda972e835164b70e29" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1af511bb0ba2cf4fa1b60188914ec13cb7" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>IntVector</name></member>
      <member refid="classamrex_1_1MFIter_1a61b9a1d5eda39765d1db9b9b936558c7" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>isValid</name></member>
      <member refid="classamrex_1_1MFIter_1a3658deeec368fbc6be8f9555ac37bab5" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>length</name></member>
      <member refid="classamrex_1_1MFIter_1a8a8cdb1fbae0dace9fcc0dc622c3409d" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>local_index_map</name></member>
      <member refid="classamrex_1_1MFIter_1a72828c9a333be0dfff3e89e350fd0e11" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>local_tile_index_map</name></member>
      <member refid="classamrex_1_1MFIter_1ab9afc4ebb6b729bcecdba6b22a317e88" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>LocalIndex</name></member>
      <member refid="classamrex_1_1MFIter_1a02c0b04b49bf0116bc21ee53e3593225" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>LocalTileIndex</name></member>
      <member refid="classamrex_1_1MFIter_1ae0aa4364654842ee9aaba3d573fb6b01" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>m_fa</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1aa75db5075753c9accd5e3445b474bad0" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>m_level</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1abedcbfd256a529f1b411014efb0dfd31" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>m_particle_current_tile</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1a1161bc07e1265c1be89ccc12e7a11221" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>m_pc</name></member>
      <member refid="classamrex_1_1MFIter_1aac055187a5b4d7200fc77827dc28a76c" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1ae7623281ac9e772db1fc5085a64aeeca" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1a1d9668de99635aa50096d0f091d8b9b0" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1a830e42aee76ec9fe8dae8bdd262e0b2d" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1ad7a19e95ba128febb94b27d2a9d97ef1" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1a970e636bf6a2d744068483806ddb7944" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1a2c0a016e1d5d69073f2cab81e7c6a095" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1aecfd3f3ef12e8703caad5794968ff06a" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1a66b92b6dbfbe1a498ba614df28817709" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1a4c3f600ec834db18aba9266638ac436e" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1MFIter_1a07296b12634219c4a15337435852a67b" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>nextDynamicIndex</name></member>
      <member refid="classamrex_1_1MFIter_1a7a17b4a775ec84d2987cb480c38ed271" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>nodaltilebox</name></member>
      <member refid="classamrex_1_1MFIter_1af5cf94bce73f6da744dd94acc46cdf38af1e51da50b24860035a3665786fe9d14" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>NoTeamBarrier</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1a609d37238c417b72763dad7069d494a1" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>NStructInt</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1a3d4602354f3ccaa1ad78ebd1c4921d1b" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>NStructReal</name></member>
      <member refid="classamrex_1_1MFIter_1a967c3c48ccb4f316911d06fcaccb29fa" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>num_local_tiles</name></member>
      <member refid="classamrex_1_1MFIter_1afbbd9093cd125af3cebbc8f8231bb142" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>numLocalTiles</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1a7751ad25437f923c0ed69c2f8923d454" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>numNeighborParticles</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1a4a33d9c17eacf3ad38a63d467e74ba3f" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>numParticles</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1a75904e997d78e7e39e52dfc84e291f51" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>numRealParticles</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1a30d5373e2129c7e4b5a63b992ca91d97" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>operator++</name></member>
      <member refid="classamrex_1_1MFIter_1ab35d3c7298d61ba3c7d2844c402dd6fc" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>operator=</name></member>
      <member refid="classamrex_1_1MFIter_1a61f66e0c8dd6b23c672213d1393f59da" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>operator=</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1afaf6edbba5eee7ad8ec59e92e4971efc" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>ParIterBase_impl</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1ac21aae96f4f5422d636525b0572777b6" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>ParIterBase_impl</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1af9e7daf85f061eb283287567b459aade" prot="private" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>ParticleTilePtr</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1a6f5dade75fdc279347334eaf3d39dae4" prot="private" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>ParticleTileRef</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1ac2f8c395b361cb48d2ba6daaf7873149" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>ParticleTileType</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1a39540f149f469767e4dd7333f194e1a4" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>ParticleType</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1a9eb90934f537a8f10811e014520cc116" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>ParticleVector</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1a40d448c9de4fde0c1a475780ebc33ea7" prot="private" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>PCType</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1a7baf75176f06182c85c9bc71b02f7bf1" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>RealVector</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1a96e44e978a98c0c67291b8271061c94f" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>SoA</name></member>
      <member refid="classamrex_1_1ParIterBase__impl_1a064fd9ec04dc771d3749d2ce27281ea9" prot="private" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>SoARef</name></member>
      <member refid="classamrex_1_1MFIter_1a6387ff79e8fcfbfdcfbc7dd8d8e78621" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>streams</name></member>
      <member refid="classamrex_1_1MFIter_1a8a7f84508a19797af16e5f3f6b13523c" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>theFabArrayBase</name></member>
      <member refid="classamrex_1_1MFIter_1a10b2f0f6900d23295fe25fd526153f43" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>tile_array</name></member>
      <member refid="classamrex_1_1MFIter_1ae64d80e0b2d14e9209c426a0654e8a1f" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>tile_size</name></member>
      <member refid="classamrex_1_1MFIter_1a4633394eac1ff3355fe082b815ed7413" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>tilebox</name></member>
      <member refid="classamrex_1_1MFIter_1aade25ad6c9b6b92a5dbe2e022fc77912" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>tilebox</name></member>
      <member refid="classamrex_1_1MFIter_1a3563f863ba15b874a9abd0dc338c0c72" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>tilebox</name></member>
      <member refid="classamrex_1_1MFIter_1a3d73098e8ef5205fc2bce58d5ed0f21b" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>tileIndex</name></member>
      <member refid="classamrex_1_1MFIter_1af5cf94bce73f6da744dd94acc46cdf38a1db74b1bbdeb756077e4bc33e25a2740" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>Tiling</name></member>
      <member refid="classamrex_1_1MFIter_1a1406cbb9152b357a39e877b78eb8ff0d" prot="protected" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>typ</name></member>
      <member refid="classamrex_1_1MFIter_1a77ae102619461dabde09c7801390b841" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>validbox</name></member>
      <member refid="classamrex_1_1MFIter_1aac3223d243bff8f86cbd227b8f1af866" prot="public" virt="non-virtual"><scope>amrex::ParIterBase_impl</scope><name>~MFIter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
