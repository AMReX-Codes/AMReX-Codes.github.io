<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1Gpu_1_1Buffer" kind="class" language="C++" prot="public">
    <compoundname>amrex::Gpu::Buffer</compoundname>
    <includes refid="AMReX__GpuBuffer_8H" local="no">AMReX_GpuBuffer.H</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>std::enable_if< AMREX_IS_TRIVIALLY_COPYABLE(T), int >::type</declname>
        <defname>std::enable_if< AMREX_IS_TRIVIALLY_COPYABLE(T), int >::type</defname>
        <defval>0</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1Gpu_1_1Buffer_1aa1b86e5a64e3ffc3edfc33f6537a4a40" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t amrex::Gpu::Buffer&lt; T, type &gt;::m_size</definition>
        <argsstring></argsstring>
        <name>m_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="105" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Gpu_1_1Buffer_1aeacd56724049c42730ee14018ded7919" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* amrex::Gpu::Buffer&lt; T, type &gt;::d_data</definition>
        <argsstring></argsstring>
        <name>d_data</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="106" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Gpu_1_1Buffer_1a4c3ae2310639d3ddf9641e7534f463c2" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* amrex::Gpu::Buffer&lt; T, type &gt;::h_data</definition>
        <argsstring></argsstring>
        <name>h_data</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="107" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1ac2319bfe71098ce35e97a0f8edb8b168" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::Buffer&lt; T, type &gt;::Buffer</definition>
        <argsstring>(std::initializer_list&lt; T &gt; init)</argsstring>
        <name>Buffer</name>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="21" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="21" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1ac651eb1dc21979f3b07788e908c07f0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::Buffer&lt; T, type &gt;::Buffer</definition>
        <argsstring>(T const *h_p, const std::size_t n)</argsstring>
        <name>Buffer</name>
        <param>
          <type>T const *</type>
          <declname>h_p</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="43" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="43" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1afffe7f8feead000efce9976e422ac931" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::Buffer&lt; T, type &gt;::~Buffer</definition>
        <argsstring>()</argsstring>
        <name>~Buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="65" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1adc4eb6f13725bb197f71d95912a4a61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::Buffer&lt; T, type &gt;::Buffer</definition>
        <argsstring>(Buffer const &amp;)=delete</argsstring>
        <name>Buffer</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1Buffer" kindref="compound">Buffer</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1ab6fdb43604d534c06247f11550f43465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::Buffer&lt; T, type &gt;::Buffer</definition>
        <argsstring>(Buffer &amp;&amp;)=delete</argsstring>
        <name>Buffer</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1Buffer" kindref="compound">Buffer</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1abb69f8c6e1a1367c4a6fc39496bb3f8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::Buffer&lt; T, type &gt;::operator=</definition>
        <argsstring>(Buffer const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1Buffer" kindref="compound">Buffer</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a3f44e2dce1d1ef2496ef124f52735ff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::Buffer&lt; T, type &gt;::operator=</definition>
        <argsstring>(Buffer &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1Buffer" kindref="compound">Buffer</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a4db0cd99e1634cea2e7a115b0d4669f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T const  *</type>
        <definition>T const* amrex::Gpu::Buffer&lt; T, type &gt;::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="72" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a7b941ec4273e86459b0226ee05b3c771" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* amrex::Gpu::Buffer&lt; T, type &gt;::data</definition>
        <argsstring>() noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="73" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1ac79ca30059ed5e9647e5c6701433a671" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T const  *</type>
        <definition>T const* amrex::Gpu::Buffer&lt; T, type &gt;::hostData</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hostData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="75" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1ac337dd149aaf1496d1f899ec6c163444" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* amrex::Gpu::Buffer&lt; T, type &gt;::hostDatat</definition>
        <argsstring>() noexcept</argsstring>
        <name>hostDatat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="76" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1af1c592d2b797d41d743e014a84980040" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::Gpu::Buffer&lt; T, type &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="78" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a767ec592869267bb2a9315f94737f011" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::Buffer&lt; T, type &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="80" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="80" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1acca6e756f5c24529437a33696ad78280" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* amrex::Gpu::Buffer&lt; T, type &gt;::copyToHost</definition>
        <argsstring>()</argsstring>
        <name>copyToHost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="92" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="92" bodyend="102"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="18" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="17" bodyend="108"/>
    <listofallmembers>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1ac2319bfe71098ce35e97a0f8edb8b168" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>Buffer</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1ac651eb1dc21979f3b07788e908c07f0d" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>Buffer</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1adc4eb6f13725bb197f71d95912a4a61a" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>Buffer</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1ab6fdb43604d534c06247f11550f43465" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>Buffer</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a767ec592869267bb2a9315f94737f011" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>clear</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1acca6e756f5c24529437a33696ad78280" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>copyToHost</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1aeacd56724049c42730ee14018ded7919" prot="private" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>d_data</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a4db0cd99e1634cea2e7a115b0d4669f9" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>data</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a7b941ec4273e86459b0226ee05b3c771" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>data</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a4c3ae2310639d3ddf9641e7534f463c2" prot="private" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>h_data</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1ac79ca30059ed5e9647e5c6701433a671" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>hostData</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1ac337dd149aaf1496d1f899ec6c163444" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>hostDatat</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1aa1b86e5a64e3ffc3edfc33f6537a4a40" prot="private" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>m_size</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1abb69f8c6e1a1367c4a6fc39496bb3f8b" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a3f44e2dce1d1ef2496ef124f52735ff1" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1af1c592d2b797d41d743e014a84980040" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>size</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1afffe7f8feead000efce9976e422ac931" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>~Buffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
