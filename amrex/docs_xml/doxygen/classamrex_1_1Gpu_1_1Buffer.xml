<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1Gpu_1_1Buffer" kind="class" language="C++" prot="public">
    <compoundname>amrex::Gpu::Buffer</compoundname>
    <includes refid="AMReX__GpuBuffer_8H" local="no">AMReX_GpuBuffer.H</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>std::enable_if_t&lt; std::is_trivially_copyable_v&lt; T &gt;, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <defval>0</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1Gpu_1_1Buffer_1aeec4be8fd894735d9acaa7de8c62d63a" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t amrex::Gpu::Buffer&lt; T, &gt;::m_size</definition>
        <argsstring></argsstring>
        <name>m_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="98" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Gpu_1_1Buffer_1a6c0016dc5cea22d25e6d9946f88c40d2" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* amrex::Gpu::Buffer&lt; T, &gt;::d_data</definition>
        <argsstring></argsstring>
        <name>d_data</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="99" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Gpu_1_1Buffer_1af613bc8ff56b5c8e598e90cd8c61f6b0" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* amrex::Gpu::Buffer&lt; T, &gt;::h_data</definition>
        <argsstring></argsstring>
        <name>h_data</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="100" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a3f55c45f384966160f9b9538d732593d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::Buffer&lt; T, &gt;::Buffer</definition>
        <argsstring>(std::initializer_list&lt; T &gt; init)</argsstring>
        <name>Buffer</name>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="20" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="20" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a77b4ab537b9786fb353beb7dc77a0620" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::Buffer&lt; T, &gt;::Buffer</definition>
        <argsstring>(T const *h_p, const std::size_t n)</argsstring>
        <name>Buffer</name>
        <param>
          <type>T const *</type>
          <declname>h_p</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="39" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="39" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a3388e4bd09fa27a3a03274acfa8be487" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::Buffer&lt; T, &gt;::~Buffer</definition>
        <argsstring>()</argsstring>
        <name>~Buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="58" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a4a67356e6f7cf6772d47b81ec7b91e60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::Buffer&lt; T, &gt;::Buffer</definition>
        <argsstring>(Buffer const &amp;)=delete</argsstring>
        <name>Buffer</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1Buffer" kindref="compound">Buffer</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="60" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a8da30f072b1f36168523d0db2e1f8330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::Buffer&lt; T, &gt;::Buffer</definition>
        <argsstring>(Buffer &amp;&amp;)=delete</argsstring>
        <name>Buffer</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1Buffer" kindref="compound">Buffer</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="61" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a08731a4a086f5a19ce8b0303d73b38f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::Buffer&lt; T, &gt;::operator=</definition>
        <argsstring>(Buffer const &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1Buffer" kindref="compound">Buffer</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="62" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1abca1f758989aa579fa68900a014619fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::Buffer&lt; T, &gt;::operator=</definition>
        <argsstring>(Buffer &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1Gpu_1_1Buffer" kindref="compound">Buffer</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="63" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a3c1a6f7fdd37b0efeabc75f9f2375a1f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T const  *</type>
        <definition>T const* amrex::Gpu::Buffer&lt; T, &gt;::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="65" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1ab2a42ebf52c9f805e2936c17ffb8297a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* amrex::Gpu::Buffer&lt; T, &gt;::data</definition>
        <argsstring>() noexcept</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="66" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a9efbbaef8b00982c3e56b0e557d4f739" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T const  *</type>
        <definition>T const* amrex::Gpu::Buffer&lt; T, &gt;::hostData</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hostData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="68" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a3619c31c38650efcce3486506434cd08" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* amrex::Gpu::Buffer&lt; T, &gt;::hostData</definition>
        <argsstring>() noexcept</argsstring>
        <name>hostData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="69" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1aca5acc3051c0c94e3668e5e5b5f17c17" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::Gpu::Buffer&lt; T, &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="71" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a0c2925413d162cb501be4a6270a94754" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::Buffer&lt; T, &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="73" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="73" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a7b869239107727018d22a622ed29161d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* amrex::Gpu::Buffer&lt; T, &gt;::copyToHost</definition>
        <argsstring>()</argsstring>
        <name>copyToHost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="85" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="85" bodyend="95"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="16" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="17" bodyend="101"/>
    <listofallmembers>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a3f55c45f384966160f9b9538d732593d" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>Buffer</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a77b4ab537b9786fb353beb7dc77a0620" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>Buffer</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a4a67356e6f7cf6772d47b81ec7b91e60" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>Buffer</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a8da30f072b1f36168523d0db2e1f8330" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>Buffer</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a0c2925413d162cb501be4a6270a94754" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>clear</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a7b869239107727018d22a622ed29161d" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>copyToHost</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a6c0016dc5cea22d25e6d9946f88c40d2" prot="private" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>d_data</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a3c1a6f7fdd37b0efeabc75f9f2375a1f" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>data</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1ab2a42ebf52c9f805e2936c17ffb8297a" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>data</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1af613bc8ff56b5c8e598e90cd8c61f6b0" prot="private" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>h_data</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a9efbbaef8b00982c3e56b0e557d4f739" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>hostData</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a3619c31c38650efcce3486506434cd08" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>hostData</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1aeec4be8fd894735d9acaa7de8c62d63a" prot="private" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>m_size</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a08731a4a086f5a19ce8b0303d73b38f5" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1abca1f758989aa579fa68900a014619fe" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>operator=</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1aca5acc3051c0c94e3668e5e5b5f17c17" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>size</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a3388e4bd09fa27a3a03274acfa8be487" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>~Buffer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
