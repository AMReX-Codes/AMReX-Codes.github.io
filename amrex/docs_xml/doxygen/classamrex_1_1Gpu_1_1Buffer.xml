<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1Gpu_1_1Buffer" kind="class" language="C++" prot="public">
    <compoundname>amrex::Gpu::Buffer</compoundname>
    <includes refid="AMReX__GpuBuffer_8H" local="no">AMReX_GpuBuffer.H</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>std::enable_if_t&lt; std::is_trivially_copyable_v&lt; T &gt;, int &gt;</type>
        <defval>0</defval>
      </param>
    </templateparamlist>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1Gpu_1_1Buffer_1a46a07020c127909f75b18f1964d752b1" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a99e1f048890efc1c275606cb9bdc41c7" kindref="member">DeviceVector</ref>&lt; T &gt;</type>
        <definition>DeviceVector&lt;T&gt; amrex::Gpu::Buffer&lt; T, &gt;::d_vect</definition>
        <argsstring></argsstring>
        <name>d_vect</name>
        <qualifiedname>amrex::Gpu::Buffer::d_vect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="163" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1Gpu_1_1Buffer_1a8fb05e0773a44936080b5083c4a5dc65" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1_1Gpu_1a6e76d121ad2e1030d86ccbc9a47f6fde" kindref="member">PinnedVector</ref>&lt; T &gt;</type>
        <definition>PinnedVector&lt;T&gt; amrex::Gpu::Buffer&lt; T, &gt;::h_vect</definition>
        <argsstring></argsstring>
        <name>h_vect</name>
        <qualifiedname>amrex::Gpu::Buffer::h_vect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="164" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="164" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a3f55c45f384966160f9b9538d732593d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::Buffer&lt; T, &gt;::Buffer</definition>
        <argsstring>(std::initializer_list&lt; T &gt; init)</argsstring>
        <name>Buffer</name>
        <qualifiedname>amrex::Gpu::Buffer::Buffer</qualifiedname>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>init</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="21" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="21" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a77b4ab537b9786fb353beb7dc77a0620" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::Buffer&lt; T, &gt;::Buffer</definition>
        <argsstring>(T const *h_p, const std::size_t n)</argsstring>
        <name>Buffer</name>
        <qualifiedname>amrex::Gpu::Buffer::Buffer</qualifiedname>
        <param>
          <type>T const *</type>
          <declname>h_p</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="30" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="30" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1ae9664de2a6df4eda96d2281ba0f2e1f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::Buffer&lt; T, &gt;::Buffer</definition>
        <argsstring>(const std::size_t n)</argsstring>
        <name>Buffer</name>
        <qualifiedname>amrex::Gpu::Buffer::Buffer</qualifiedname>
        <param>
          <type>const std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="39" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="39" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1aefdebad606513094532022f6d91fc330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Gpu::Buffer&lt; T, &gt;::Buffer</definition>
        <argsstring>()=default</argsstring>
        <name>Buffer</name>
        <qualifiedname>amrex::Gpu::Buffer::Buffer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="43" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a2a802687649d1ba35ba51969252f00f0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T const *</type>
        <definition>T const  * amrex::Gpu::Buffer&lt; T, &gt;::data</definition>
        <argsstring>() const noexcept</argsstring>
        <name>data</name>
        <qualifiedname>amrex::Gpu::Buffer::data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="45" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="45" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a55c42a21af9dc3a0890cc5ce3d6cbb61" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * amrex::Gpu::Buffer&lt; T, &gt;::data</definition>
        <argsstring>() noexcept</argsstring>
        <name>data</name>
        <qualifiedname>amrex::Gpu::Buffer::data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="48" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a4e3bf3e1ab489768d77b3b121c835368" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T const *</type>
        <definition>T const  * amrex::Gpu::Buffer&lt; T, &gt;::hostData</definition>
        <argsstring>() const noexcept</argsstring>
        <name>hostData</name>
        <qualifiedname>amrex::Gpu::Buffer::hostData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="52" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1afe6a9fbe215652160ab263fc45b2b8bd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * amrex::Gpu::Buffer&lt; T, &gt;::hostData</definition>
        <argsstring>() noexcept</argsstring>
        <name>hostData</name>
        <qualifiedname>amrex::Gpu::Buffer::hostData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="53" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a7c447cc27c0f48f8625f07562072da37" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; amrex::Gpu::Buffer&lt; T, &gt;::operator[]</definition>
        <argsstring>(const std::size_t i) noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::Gpu::Buffer::operator[]</qualifiedname>
        <param>
          <type>const std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Changes the value of an element of the host (CPU) vector. Does not update the device (GPU) vector, so <ref refid="classamrex_1_1Gpu_1_1Buffer_1acc8283b2ebe85a8dc6666c6a3061508d" kindref="member">copyToDeviceAsync()</ref> needs to be called before accessing the data on the GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classamrex_1_1Gpu_1_1Buffer" kindref="compound">amrex::Gpu::Buffer&lt;int&gt;</ref><sp/>buf;</highlight></codeline>
<codeline><highlight class="normal">buf.<ref refid="classamrex_1_1Gpu_1_1Buffer_1ac59285902ac00703d262ba4121b949b0" kindref="member">resize</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>buf[i]<sp/>=<sp/>i*i;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">buf.<ref refid="classamrex_1_1Gpu_1_1Buffer_1acc8283b2ebe85a8dc6666c6a3061508d" kindref="member">copyToDeviceAsync</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>ptr<sp/>=<sp/>buf.<ref refid="classamrex_1_1Gpu_1_1Buffer_1a2a802687649d1ba35ba51969252f00f0" kindref="member">data</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>ptr<sp/>inside<sp/>ParallelFor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>optional:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Change<sp/>values<sp/>of<sp/>ptr<sp/>inside<sp/>ParallelFor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">buf.<ref refid="classamrex_1_1Gpu_1_1Buffer_1aa4d1688b85ebda041a2873ff48594232" kindref="member">copyToHost</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>buf.hostData()<sp/>or<sp/>buf[]<sp/>on<sp/>the<sp/>CPU</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="74" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="74" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a55a842c0de51fe71438a798bcb6c67ad" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; amrex::Gpu::Buffer&lt; T, &gt;::operator[]</definition>
        <argsstring>(const std::size_t i) const noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>amrex::Gpu::Buffer::operator[]</qualifiedname>
        <param>
          <type>const std::size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="78" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1aca5acc3051c0c94e3668e5e5b5f17c17" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::Gpu::Buffer&lt; T, &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <qualifiedname>amrex::Gpu::Buffer::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="82" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1aabedcd98bccbccc156a4345fc37dbb98" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::Buffer&lt; T, &gt;::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <qualifiedname>amrex::Gpu::Buffer::empty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="84" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1ac59285902ac00703d262ba4121b949b0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::Buffer&lt; T, &gt;::resize</definition>
        <argsstring>(const std::size_t n) noexcept</argsstring>
        <name>resize</name>
        <qualifiedname>amrex::Gpu::Buffer::resize</qualifiedname>
        <param>
          <type>const std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="86" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="86" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1adcef9d4e3b11d97d9d53fab5f44e917e" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::Buffer&lt; T, &gt;::clear</definition>
        <argsstring>() noexcept</argsstring>
        <name>clear</name>
        <qualifiedname>amrex::Gpu::Buffer::clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="93" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a8e5586f1fadc97c2d419ba0754b2099c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::Buffer&lt; T, &gt;::shrink_to_fit</definition>
        <argsstring>() noexcept</argsstring>
        <name>shrink_to_fit</name>
        <qualifiedname>amrex::Gpu::Buffer::shrink_to_fit</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="98" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a36318c0fcffb655c81557cf28124aafb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::Buffer&lt; T, &gt;::reserve</definition>
        <argsstring>(const std::size_t n) noexcept</argsstring>
        <name>reserve</name>
        <qualifiedname>amrex::Gpu::Buffer::reserve</qualifiedname>
        <param>
          <type>const std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="103" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="103" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1a3f1c0e00575a3963efe2ab48688794c1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::Gpu::Buffer&lt; T, &gt;::push_back</definition>
        <argsstring>(const T &amp;value) noexcept</argsstring>
        <name>push_back</name>
        <qualifiedname>amrex::Gpu::Buffer::push_back</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Adds an element to the back of the host (CPU) vector. Does not update the device (GPU) vector, so <ref refid="classamrex_1_1Gpu_1_1Buffer_1acc8283b2ebe85a8dc6666c6a3061508d" kindref="member">copyToDeviceAsync()</ref> needs to be called before accessing the data on the GPU. </para>
        </briefdescription>
        <detaileddescription>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classamrex_1_1Gpu_1_1Buffer" kindref="compound">amrex::Gpu::Buffer&lt;int&gt;</ref><sp/>buf;</highlight></codeline>
<codeline><highlight class="normal">buf.<ref refid="classamrex_1_1Gpu_1_1Buffer_1a36318c0fcffb655c81557cf28124aafb" kindref="member">reserve</ref>(n);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;n;<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>buf.<ref refid="classamrex_1_1Gpu_1_1Buffer_1a3f1c0e00575a3963efe2ab48688794c1" kindref="member">push_back</ref>(i*i);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">buf.<ref refid="classamrex_1_1Gpu_1_1Buffer_1acc8283b2ebe85a8dc6666c6a3061508d" kindref="member">copyToDeviceAsync</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>ptr<sp/>=<sp/>buf.<ref refid="classamrex_1_1Gpu_1_1Buffer_1a2a802687649d1ba35ba51969252f00f0" kindref="member">data</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>ptr<sp/>inside<sp/>ParallelFor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>optional:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Change<sp/>values<sp/>of<sp/>ptr<sp/>inside<sp/>ParallelFor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">buf.<ref refid="classamrex_1_1Gpu_1_1Buffer_1aa4d1688b85ebda041a2873ff48594232" kindref="member">copyToHost</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>buf.hostData()<sp/>or<sp/>buf[]<sp/>on<sp/>the<sp/>CPU</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="129" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="129" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1acc8283b2ebe85a8dc6666c6a3061508d" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * amrex::Gpu::Buffer&lt; T, &gt;::copyToDeviceAsync</definition>
        <argsstring>() noexcept</argsstring>
        <name>copyToDeviceAsync</name>
        <qualifiedname>amrex::Gpu::Buffer::copyToDeviceAsync</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="133" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="133" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1aa4d1688b85ebda041a2873ff48594232" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T * amrex::Gpu::Buffer&lt; T, &gt;::copyToHost</definition>
        <argsstring>() noexcept</argsstring>
        <name>copyToHost</name>
        <qualifiedname>amrex::Gpu::Buffer::copyToHost</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="145" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="145" bodyend="155"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1Gpu_1_1Buffer_1ab19291501765ae52f49d238b703fd7a8" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::Gpu::Buffer&lt; T, &gt;::useDVect</definition>
        <argsstring>() const noexcept</argsstring>
        <name>useDVect</name>
        <qualifiedname>amrex::Gpu::Buffer::useDVect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="159" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="159" bodyend="161"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" line="17" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_GpuBuffer.H" bodystart="18" bodyend="165"/>
    <listofallmembers>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a3f55c45f384966160f9b9538d732593d" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>Buffer</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a77b4ab537b9786fb353beb7dc77a0620" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>Buffer</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1ae9664de2a6df4eda96d2281ba0f2e1f4" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>Buffer</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1aefdebad606513094532022f6d91fc330" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>Buffer</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1adcef9d4e3b11d97d9d53fab5f44e917e" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>clear</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1acc8283b2ebe85a8dc6666c6a3061508d" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>copyToDeviceAsync</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1aa4d1688b85ebda041a2873ff48594232" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>copyToHost</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a46a07020c127909f75b18f1964d752b1" prot="private" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>d_vect</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a2a802687649d1ba35ba51969252f00f0" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>data</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a55c42a21af9dc3a0890cc5ce3d6cbb61" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>data</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1aabedcd98bccbccc156a4345fc37dbb98" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>empty</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a8fb05e0773a44936080b5083c4a5dc65" prot="private" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>h_vect</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a4e3bf3e1ab489768d77b3b121c835368" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>hostData</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1afe6a9fbe215652160ab263fc45b2b8bd" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>hostData</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a7c447cc27c0f48f8625f07562072da37" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a55a842c0de51fe71438a798bcb6c67ad" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>operator[]</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a3f1c0e00575a3963efe2ab48688794c1" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>push_back</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a36318c0fcffb655c81557cf28124aafb" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>reserve</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1ac59285902ac00703d262ba4121b949b0" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>resize</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1a8e5586f1fadc97c2d419ba0754b2099c" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>shrink_to_fit</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1aca5acc3051c0c94e3668e5e5b5f17c17" prot="public" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>size</name></member>
      <member refid="classamrex_1_1Gpu_1_1Buffer_1ab19291501765ae52f49d238b703fd7a8" prot="private" virt="non-virtual"><scope>amrex::Gpu::Buffer</scope><name>useDVect</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
