<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1Reduce" kind="namespace" language="C++">
    <compoundname>amrex::Reduce</compoundname>
    <innernamespace refid="namespaceamrex_1_1Reduce_1_1detail">amrex::Reduce::detail</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1afac1250d786b98bab8d8d2cf5c06411e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::Reduce::Sum</definition>
        <argsstring>(N n, T const *v, T init_val=0)</argsstring>
        <name>Sum</name>
        <qualifiedname>amrex::Reduce::Sum</qualifiedname>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init_val</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="754" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="754" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1ae179b14741cc532f08816fceabea24f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::Reduce::Sum</definition>
        <argsstring>(N n, F const &amp;f, T init_val=0)</argsstring>
        <name>Sum</name>
        <qualifiedname>amrex::Reduce::Sum</qualifiedname>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init_val</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="766" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="766" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1a07365bcdfaa9fe246330e8d91f71ecc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::Reduce::Min</definition>
        <argsstring>(N n, T const *v, T init_val=std::numeric_limits&lt; T &gt;::max())</argsstring>
        <name>Min</name>
        <qualifiedname>amrex::Reduce::Min</qualifiedname>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init_val</declname>
          <defval>std::numeric_limits&lt; T &gt;<ref refid="namespaceamrex_1ac96e89dbbf05063f32d1ef7860f6a4ea" kindref="member">::max</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="777" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="777" bodyend="785"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1a8e8a5dd1862e4f8c8eb70e4601edd281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::Reduce::Min</definition>
        <argsstring>(N n, F const &amp;f, T init_val=std::numeric_limits&lt; T &gt;::max())</argsstring>
        <name>Min</name>
        <qualifiedname>amrex::Reduce::Min</qualifiedname>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init_val</declname>
          <defval>std::numeric_limits&lt; T &gt;<ref refid="namespaceamrex_1ac96e89dbbf05063f32d1ef7860f6a4ea" kindref="member">::max</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="789" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="789" bodyend="797"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1a7ac8075282193aef5024b3a7092a0f3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::Reduce::Max</definition>
        <argsstring>(N n, T const *v, T init_val=std::numeric_limits&lt; T &gt;::lowest())</argsstring>
        <name>Max</name>
        <qualifiedname>amrex::Reduce::Max</qualifiedname>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init_val</declname>
          <defval>std::numeric_limits&lt; T &gt;::lowest()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="800" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="800" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1abb357d8fcc6dd0426249ee962166fdd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::Reduce::Max</definition>
        <argsstring>(N n, F const &amp;f, T init_val=std::numeric_limits&lt; T &gt;::lowest())</argsstring>
        <name>Max</name>
        <qualifiedname>amrex::Reduce::Max</qualifiedname>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init_val</declname>
          <defval>std::numeric_limits&lt; T &gt;::lowest()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="812" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="812" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1adae163b6d167d018ba6ec7cf821b97a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; T, T &gt;</type>
        <definition>std::pair&lt; T, T &gt; amrex::Reduce::MinMax</definition>
        <argsstring>(N n, T const *v)</argsstring>
        <name>MinMax</name>
        <qualifiedname>amrex::Reduce::MinMax</qualifiedname>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="823" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="823" bodyend="833"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1ac1dab3efd41294be3534dceac0c145b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; T, T &gt;</type>
        <definition>std::pair&lt; T, T &gt; amrex::Reduce::MinMax</definition>
        <argsstring>(N n, F const &amp;f)</argsstring>
        <name>MinMax</name>
        <qualifiedname>amrex::Reduce::MinMax</qualifiedname>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="837" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="837" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1af362eac7caa17fd8a2f7ee3831236367" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::Reduce::AnyOf</definition>
        <argsstring>(N n, T const *v, P const &amp;pred)</argsstring>
        <name>AnyOf</name>
        <qualifiedname>amrex::Reduce::AnyOf</qualifiedname>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>P const &amp;</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="851" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="851" bodyend="904"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1a14f4ad196e92e318437fba27909ea581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::Reduce::AnyOf</definition>
        <argsstring>(Box const &amp;box, P const &amp;pred)</argsstring>
        <name>AnyOf</name>
        <qualifiedname>amrex::Reduce::AnyOf</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>P const &amp;</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="907" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="907" bodyend="975"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="17" column="1"/>
  </compounddef>
</doxygen>
