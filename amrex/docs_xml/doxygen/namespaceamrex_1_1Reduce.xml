<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespaceamrex_1_1Reduce" kind="namespace" language="C++">
    <compoundname>amrex::Reduce</compoundname>
    <innernamespace refid="namespaceamrex_1_1Reduce_1_1detail">amrex::Reduce::detail</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1a3a1bf2418459469b609d213560f4a8da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename BOP</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::Reduce::Sum</definition>
        <argsstring>(N n, U const *v, T init_val, BOP bop)</argsstring>
        <name>Sum</name>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>U const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init_val</declname>
        </param>
        <param>
          <type>BOP</type>
          <declname>bop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Reduce.H" line="517" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Reduce.H" bodystart="517" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1afac1250d786b98bab8d8d2cf5c06411e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::Reduce::Sum</definition>
        <argsstring>(N n, T const *v, T init_val=0)</argsstring>
        <name>Sum</name>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init_val</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Reduce.H" line="534" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Reduce.H" bodystart="534" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1aa9002a6dc16f2e87ac519151c6d8a7df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename BOP</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::Reduce::Min</definition>
        <argsstring>(N n, U const *v, T init_val, BOP bop)</argsstring>
        <name>Min</name>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>U const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init_val</declname>
        </param>
        <param>
          <type>BOP</type>
          <declname>bop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Reduce.H" line="540" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Reduce.H" bodystart="540" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1a07365bcdfaa9fe246330e8d91f71ecc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::Reduce::Min</definition>
        <argsstring>(N n, T const *v, T init_val=std::numeric_limits&lt; T &gt;::max())</argsstring>
        <name>Min</name>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init_val</declname>
          <defval>std::numeric_limits&lt; T &gt;::<ref refid="namespaceamrex_1aaadb66ad08e0a33ec413e2ce8b687414" kindref="member">max</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Reduce.H" line="557" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Reduce.H" bodystart="557" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1ab3af21594fb654c6c051cdc49536bf35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename BOP</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::Reduce::Max</definition>
        <argsstring>(N n, U const *v, T init_val, BOP bop)</argsstring>
        <name>Max</name>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>U const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init_val</declname>
        </param>
        <param>
          <type>BOP</type>
          <declname>bop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Reduce.H" line="563" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Reduce.H" bodystart="563" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1a7ac8075282193aef5024b3a7092a0f3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::Reduce::Max</definition>
        <argsstring>(N n, T const *v, T init_val=std::numeric_limits&lt; T &gt;::lowest())</argsstring>
        <name>Max</name>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init_val</declname>
          <defval>std::numeric_limits&lt; T &gt;::lowest()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Reduce.H" line="580" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Reduce.H" bodystart="580" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1a407e04992fad29e568b551872b7343f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename MINOP</type>
          </param>
          <param>
            <type>typename MAXOP</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; T, T &gt;</type>
        <definition>std::pair&lt;T,T&gt; amrex::Reduce::MinMax</definition>
        <argsstring>(N n, U const *v, MINOP minop, MAXOP maxop)</argsstring>
        <name>MinMax</name>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>U const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>MINOP</type>
          <declname>minop</declname>
        </param>
        <param>
          <type>MAXOP</type>
          <declname>maxop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Reduce.H" line="586" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Reduce.H" bodystart="586" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1a17b6d6ef1df2c2803c3f460b51ddd012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename M</type>
            <defval><ref refid="namespaceamrex_1a8690d4c6386d001b328b07257fe628a0" kindref="member">amrex::EnableIf_t</ref>&lt;std::is_integral&lt;N&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; T, T &gt;</type>
        <definition>std::pair&lt;T,T&gt; amrex::Reduce::MinMax</definition>
        <argsstring>(N n, T const *v)</argsstring>
        <name>MinMax</name>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Reduce.H" line="606" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Reduce.H" bodystart="606" bodyend="609"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Reduce.H" line="9" column="1"/>
  </compounddef>
</doxygen>
