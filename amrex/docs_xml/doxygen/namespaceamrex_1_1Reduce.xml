<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1Reduce" kind="namespace" language="C++">
    <compoundname>amrex::Reduce</compoundname>
    <innernamespace refid="namespaceamrex_1_1Reduce_1_1detail">amrex::Reduce::detail</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1afac1250d786b98bab8d8d2cf5c06411e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral_v&lt;N&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::Reduce::Sum</definition>
        <argsstring>(N n, T const *v, T init_val=0)</argsstring>
        <name>Sum</name>
        <qualifiedname>amrex::Reduce::Sum</qualifiedname>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init_val</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="746" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="746" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1ae179b14741cc532f08816fceabea24f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral_v&lt;N&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::Reduce::Sum</definition>
        <argsstring>(N n, F const &amp;f, T init_val=0)</argsstring>
        <name>Sum</name>
        <qualifiedname>amrex::Reduce::Sum</qualifiedname>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init_val</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="758" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="758" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1a07365bcdfaa9fe246330e8d91f71ecc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral_v&lt;N&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::Reduce::Min</definition>
        <argsstring>(N n, T const *v, T init_val=std::numeric_limits&lt; T &gt;::max())</argsstring>
        <name>Min</name>
        <qualifiedname>amrex::Reduce::Min</qualifiedname>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init_val</declname>
          <defval>std::numeric_limits&lt; T &gt;<ref refid="namespaceamrex_1a9d99cb1523b9f336dad742f6a15bdf59" kindref="member">::max</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="769" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="769" bodyend="777"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1a8e8a5dd1862e4f8c8eb70e4601edd281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral_v&lt;N&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::Reduce::Min</definition>
        <argsstring>(N n, F const &amp;f, T init_val=std::numeric_limits&lt; T &gt;::max())</argsstring>
        <name>Min</name>
        <qualifiedname>amrex::Reduce::Min</qualifiedname>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init_val</declname>
          <defval>std::numeric_limits&lt; T &gt;<ref refid="namespaceamrex_1a9d99cb1523b9f336dad742f6a15bdf59" kindref="member">::max</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="781" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="781" bodyend="789"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1a7ac8075282193aef5024b3a7092a0f3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral_v&lt;N&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::Reduce::Max</definition>
        <argsstring>(N n, T const *v, T init_val=std::numeric_limits&lt; T &gt;::lowest())</argsstring>
        <name>Max</name>
        <qualifiedname>amrex::Reduce::Max</qualifiedname>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init_val</declname>
          <defval>std::numeric_limits&lt; T &gt;::lowest()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="792" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="792" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1abb357d8fcc6dd0426249ee962166fdd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral_v&lt;N&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T amrex::Reduce::Max</definition>
        <argsstring>(N n, F const &amp;f, T init_val=std::numeric_limits&lt; T &gt;::lowest())</argsstring>
        <name>Max</name>
        <qualifiedname>amrex::Reduce::Max</qualifiedname>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init_val</declname>
          <defval>std::numeric_limits&lt; T &gt;::lowest()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="804" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="804" bodyend="812"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1adae163b6d167d018ba6ec7cf821b97a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral_v&lt;N&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; T, T &gt;</type>
        <definition>std::pair&lt; T, T &gt; amrex::Reduce::MinMax</definition>
        <argsstring>(N n, T const *v)</argsstring>
        <name>MinMax</name>
        <qualifiedname>amrex::Reduce::MinMax</qualifiedname>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="815" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="815" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1ac1dab3efd41294be3534dceac0c145b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral_v&lt;N&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::pair&lt; T, T &gt;</type>
        <definition>std::pair&lt; T, T &gt; amrex::Reduce::MinMax</definition>
        <argsstring>(N n, F const &amp;f)</argsstring>
        <name>MinMax</name>
        <qualifiedname>amrex::Reduce::MinMax</qualifiedname>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="829" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="829" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1af362eac7caa17fd8a2f7ee3831236367" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename M</type>
            <defval>std::enable_if_t&lt;std::is_integral_v&lt;N&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::Reduce::AnyOf</definition>
        <argsstring>(N n, T const *v, P const &amp;pred)</argsstring>
        <name>AnyOf</name>
        <qualifiedname>amrex::Reduce::AnyOf</qualifiedname>
        <param>
          <type>N</type>
          <declname>n</declname>
        </param>
        <param>
          <type>T const *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>P const &amp;</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="843" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="843" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Reduce_1a14f4ad196e92e318437fba27909ea581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::Reduce::AnyOf</definition>
        <argsstring>(Box const &amp;box, P const &amp;pred)</argsstring>
        <name>AnyOf</name>
        <qualifiedname>amrex::Reduce::AnyOf</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> const &amp;</type>
          <declname>box</declname>
        </param>
        <param>
          <type>P const &amp;</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="899" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" bodystart="899" bodyend="967"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Reduce.H" line="17" column="1"/>
  </compounddef>
</doxygen>
