<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structamrex_1_1Array1D" kind="struct" language="C++" prot="public">
    <compoundname>amrex::Array1D</compoundname>
    <includes refid="AMReX__Array_8H" local="no">AMReX_Array.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>XLO</declname>
        <defname>XLO</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>XHI</declname>
        <defname>XHI</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1Array1D_1a3fbb7068c4f65f7830c903a57e3df5a7" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T amrex::Array1D&lt; T, XLO, XHI &gt;::arr[(XHI-XLO+1)]</definition>
        <argsstring>[(XHI-XLO+1)]</argsstring>
        <name>arr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> is implemented as a fixed-size array. Hence, no constructor or destructor is given. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="268" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="268" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1Array1D_1adde36e9756eb2859617a63cc2513b08b" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE unsigned int amrex::Array1D&lt; T, XLO, XHI &gt;::size</definition>
        <argsstring>() noexcept</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements in the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object as an unsigned integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="170" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="170" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1a3f19e3370115f627c98dd50500dcbae9" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE int amrex::Array1D&lt; T, XLO, XHI &gt;::lo</definition>
        <argsstring>() noexcept</argsstring>
        <name>lo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the lower bound of the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object. Can be other than 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="177" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1ac6077168c97aa136885181c663a772ac" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE int amrex::Array1D&lt; T, XLO, XHI &gt;::hi</definition>
        <argsstring>() noexcept</argsstring>
        <name>hi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the upper bound of the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="183" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="183" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1adc6a1c42a02a07645636a297b6b28a6b" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static constexpr AMREX_FORCE_INLINE unsigned int amrex::Array1D&lt; T, XLO, XHI &gt;::len</definition>
        <argsstring>() noexcept</argsstring>
        <name>len</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements in the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object as an unsigned integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="190" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="190" bodyend="190"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1Array1D_1ac35072464969edaf7b563aca50af76f3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T* amrex::Array1D&lt; T, XLO, XHI &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address to the first element of the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="197" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="197" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1afa1c2333b561137170efd8d6a1c7594a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T* amrex::Array1D&lt; T, XLO, XHI &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address right after the last element of the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="204" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="204" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1ac2653ef503290a436683a62d0a13235f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::Array1D&lt; T, XLO, XHI &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address to the first element of the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="211" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="211" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1a248a4a97275ccc2c644ccebb5327c688" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T* amrex::Array1D&lt; T, XLO, XHI &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address right after the last element of the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="218" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="218" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1a263c5b9749515ac5d9b59782e99bbd85" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T&amp; amrex::Array1D&lt; T, XLO, XHI &gt;::operator()</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object are accessed using parentheses, e.g. <computeroutput>array(i)</computeroutput>, instead of using square brackets. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="225" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="225" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1ae9cf5dcb6f1457ab4fd18d97efd91be2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T&amp; amrex::Array1D&lt; T, XLO, XHI &gt;::operator()</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object are accessed using parentheses, e.g. array(i), instead of using square brackets. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="235" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="235" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1ad937d10f88d93f07604c7c9c2daae3ec" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE T amrex::Array1D&lt; T, XLO, XHI &gt;::sum</definition>
        <argsstring>() const noexcept</argsstring>
        <name>sum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the sum of all elements in the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="244" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="244" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1afd1c8361929cdf3d8d4f928263113fac" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr AMREX_FORCE_INLINE T amrex::Array1D&lt; T, XLO, XHI &gt;::product</definition>
        <argsstring>() const noexcept</argsstring>
        <name>product</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the product of all elements in the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="255" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="255" bodyend="262"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A GPU-compatible one-dimensional array.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>XLO</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for lower bound. Can be other than 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>XHI</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for upper bound. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>T</label>
      </node>
      <node id="1">
        <label>amrex::Array1D&lt; T, XLO, XHI &gt;</label>
        <link refid="structamrex_1_1Array1D"/>
        <childnode refid="2" relation="usage">
          <edgelabel>arr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="163" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="164" bodyend="269"/>
    <listofallmembers>
      <member refid="structamrex_1_1Array1D_1a3fbb7068c4f65f7830c903a57e3df5a7" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>arr</name></member>
      <member refid="structamrex_1_1Array1D_1ac35072464969edaf7b563aca50af76f3" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>begin</name></member>
      <member refid="structamrex_1_1Array1D_1ac2653ef503290a436683a62d0a13235f" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>begin</name></member>
      <member refid="structamrex_1_1Array1D_1afa1c2333b561137170efd8d6a1c7594a" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>end</name></member>
      <member refid="structamrex_1_1Array1D_1a248a4a97275ccc2c644ccebb5327c688" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>end</name></member>
      <member refid="structamrex_1_1Array1D_1ac6077168c97aa136885181c663a772ac" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>hi</name></member>
      <member refid="structamrex_1_1Array1D_1adc6a1c42a02a07645636a297b6b28a6b" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>len</name></member>
      <member refid="structamrex_1_1Array1D_1a3f19e3370115f627c98dd50500dcbae9" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>lo</name></member>
      <member refid="structamrex_1_1Array1D_1a263c5b9749515ac5d9b59782e99bbd85" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array1D_1ae9cf5dcb6f1457ab4fd18d97efd91be2" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array1D_1afd1c8361929cdf3d8d4f928263113fac" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>product</name></member>
      <member refid="structamrex_1_1Array1D_1adde36e9756eb2859617a63cc2513b08b" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>size</name></member>
      <member refid="structamrex_1_1Array1D_1ad937d10f88d93f07604c7c9c2daae3ec" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>sum</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
