<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1Array1D" kind="struct" language="C++" prot="public">
    <compoundname>amrex::Array1D</compoundname>
    <includes refid="AMReX__Array_8H" local="no">AMReX_Array.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>XLO</declname>
        <defname>XLO</defname>
      </param>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>XHI</declname>
        <defname>XHI</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1Array1D_1a3fbb7068c4f65f7830c903a57e3df5a7" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T amrex::Array1D&lt; T, XLO, XHI &gt;::arr[(XHI-XLO+1)]</definition>
        <argsstring>[(XHI-XLO+1)]</argsstring>
        <name>arr</name>
        <qualifiedname>amrex::Array1D::arr</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> is implemented as a fixed-size array. Hence, no constructor or destructor is given. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="316" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="316" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1Array1D_1a7c47e15b453d214da4aee011b7d53089" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr unsigned int amrex::Array1D&lt; T, XLO, XHI &gt;::size</definition>
        <argsstring>() noexcept</argsstring>
        <name>size</name>
        <qualifiedname>amrex::Array1D::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements in the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object as an unsigned integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="195" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="195" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1a7782662eea34822705092cbfe974daac" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr int amrex::Array1D&lt; T, XLO, XHI &gt;::lo</definition>
        <argsstring>() noexcept</argsstring>
        <name>lo</name>
        <qualifiedname>amrex::Array1D::lo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the lower bound of the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object. Can be other than 0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="202" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="202" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1aa6776d7b043a49750e56fd2432cf0812" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr int amrex::Array1D&lt; T, XLO, XHI &gt;::hi</definition>
        <argsstring>() noexcept</argsstring>
        <name>hi</name>
        <qualifiedname>amrex::Array1D::hi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index of the upper bound of the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="208" column="30" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="208" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1ae85bf7493cc6f4ddf010a3ae1a1b0922" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> static <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE static AMREX_FORCE_INLINE constexpr unsigned int amrex::Array1D&lt; T, XLO, XHI &gt;::len</definition>
        <argsstring>() noexcept</argsstring>
        <name>len</name>
        <qualifiedname>amrex::Array1D::len</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of elements in the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object as an unsigned integer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="215" column="39" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="215" bodyend="215"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1Array1D_1aa865600a46d770c1e2729b795d4b2da7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T * amrex::Array1D&lt; T, XLO, XHI &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::Array1D::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address to the first element of the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="222" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="222" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1ae39c828d7080cf26897bc3f9f2a64033" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T * amrex::Array1D&lt; T, XLO, XHI &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::Array1D::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a <computeroutput>const</computeroutput> pointer address right after the last element of the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="229" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="229" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1abf0fc6543950a16ca1757eacd4eba6d4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T * amrex::Array1D&lt; T, XLO, XHI &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>amrex::Array1D::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address to the first element of the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="236" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="236" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1a3200dd3ab730593f4fe58653e3b8199c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T *</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T * amrex::Array1D&lt; T, XLO, XHI &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <qualifiedname>amrex::Array1D::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a pointer address right after the last element of the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="243" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="243" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1ae46d82adabf07a9358984c4edd6f8c1b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> const T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE const T &amp; amrex::Array1D&lt; T, XLO, XHI &gt;::operator()</definition>
        <argsstring>(int i) const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array1D::operator()</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object are accessed using parentheses, e.g. <computeroutput>array(i)</computeroutput>, instead of using square brackets. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="250" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="250" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1af261daf3142d2ff54319c13bb281dec1" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T &amp; amrex::Array1D&lt; T, XLO, XHI &gt;::operator()</definition>
        <argsstring>(int i) noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Array1D::operator()</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The elements of an <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object are accessed using parentheses, e.g. array(i), instead of using square brackets. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="262" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="262" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1acb1abe97f2cae8e811f842ebfe81c75a" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr T amrex::Array1D&lt; T, XLO, XHI &gt;::sum</definition>
        <argsstring>() const noexcept</argsstring>
        <name>sum</name>
        <qualifiedname>amrex::Array1D::sum</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the sum of all elements in the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="273" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="273" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Array1D_1a7356b160344b1aeadfe7aa0b9523299b" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE constexpr T amrex::Array1D&lt; T, XLO, XHI &gt;::product</definition>
        <argsstring>() const noexcept</argsstring>
        <name>product</name>
        <qualifiedname>amrex::Array1D::product</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the product of all elements in the <ref refid="structamrex_1_1Array1D" kindref="compound">Array1D</ref> object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="284" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="284" bodyend="291"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="structamrex_1_1Array2D" kindref="compound">Array2D</ref> and <ref refid="structamrex_1_1Array3D" kindref="compound">Array3D</ref> objects can be indexed according to Fortran column-major order (first index moving fastest) or C/C++ row-major order (last index moving fastest). If not specified, Fortran order is assumed. A GPU-compatible one-dimensional array.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>XLO</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for lower bound. Can be other than 0. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>XHI</parametername>
</parameternamelist>
<parameterdescription>
<para>Index for upper bound. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>T</label>
      </node>
      <node id="1">
        <label>amrex::Array1D&lt; T, XLO, XHI &gt;</label>
        <link refid="structamrex_1_1Array1D"/>
        <childnode refid="2" relation="usage">
          <edgelabel>arr</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" line="188" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Array.H" bodystart="189" bodyend="317"/>
    <listofallmembers>
      <member refid="structamrex_1_1Array1D_1a3fbb7068c4f65f7830c903a57e3df5a7" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>arr</name></member>
      <member refid="structamrex_1_1Array1D_1aa865600a46d770c1e2729b795d4b2da7" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>begin</name></member>
      <member refid="structamrex_1_1Array1D_1abf0fc6543950a16ca1757eacd4eba6d4" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>begin</name></member>
      <member refid="structamrex_1_1Array1D_1ae39c828d7080cf26897bc3f9f2a64033" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>end</name></member>
      <member refid="structamrex_1_1Array1D_1a3200dd3ab730593f4fe58653e3b8199c" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>end</name></member>
      <member refid="structamrex_1_1Array1D_1aa6776d7b043a49750e56fd2432cf0812" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>hi</name></member>
      <member refid="structamrex_1_1Array1D_1ae85bf7493cc6f4ddf010a3ae1a1b0922" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>len</name></member>
      <member refid="structamrex_1_1Array1D_1a7782662eea34822705092cbfe974daac" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>lo</name></member>
      <member refid="structamrex_1_1Array1D_1ae46d82adabf07a9358984c4edd6f8c1b" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array1D_1af261daf3142d2ff54319c13bb281dec1" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>operator()</name></member>
      <member refid="structamrex_1_1Array1D_1a7356b160344b1aeadfe7aa0b9523299b" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>product</name></member>
      <member refid="structamrex_1_1Array1D_1a7c47e15b453d214da4aee011b7d53089" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>size</name></member>
      <member refid="structamrex_1_1Array1D_1acb1abe97f2cae8e811f842ebfe81c75a" prot="public" virt="non-virtual"><scope>amrex::Array1D</scope><name>sum</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
