<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="AMReX__parstream_8cpp" kind="file" language="C++">
    <compoundname>AMReX_parstream.cpp</compoundname>
    <includes local="no">cstdio</includes>
    <includes local="no">fstream</includes>
    <includes refid="AMReX__parstream_8H" local="no">AMReX_parstream.H</includes>
    <includes refid="AMReX__ParmParse_8H" local="no">AMReX_ParmParse.H</includes>
    <includes refid="AMReX__ParallelDescriptor_8H" local="no">AMReX_ParallelDescriptor.H</includes>
    <incdepgraph>
      <node id="31589">
        <label>list</label>
      </node>
      <node id="31600">
        <label>AMReX_ParallelContext.H</label>
        <link refid="AMReX__ParallelContext_8H"/>
        <childnode refid="31598" relation="include">
        </childnode>
        <childnode refid="31581" relation="include">
        </childnode>
        <childnode refid="31601" relation="include">
        </childnode>
        <childnode refid="31594" relation="include">
        </childnode>
      </node>
      <node id="31597">
        <label>functional</label>
      </node>
      <node id="31622">
        <label>limits</label>
      </node>
      <node id="31610">
        <label>AMReX_BLProfiler.H</label>
        <link refid="AMReX__BLProfiler_8H"/>
        <childnode refid="31584" relation="include">
        </childnode>
        <childnode refid="31611" relation="include">
        </childnode>
      </node>
      <node id="31616">
        <label>AMReX_Box.H</label>
        <link refid="AMReX__Box_8H"/>
        <childnode refid="31587" relation="include">
        </childnode>
        <childnode refid="31617" relation="include">
        </childnode>
        <childnode refid="31619" relation="include">
        </childnode>
        <childnode refid="31594" relation="include">
        </childnode>
        <childnode refid="31620" relation="include">
        </childnode>
        <childnode refid="31624" relation="include">
        </childnode>
        <childnode refid="31625" relation="include">
        </childnode>
        <childnode refid="31615" relation="include">
        </childnode>
        <childnode refid="31613" relation="include">
        </childnode>
        <childnode refid="31626" relation="include">
        </childnode>
        <childnode refid="31601" relation="include">
        </childnode>
        <childnode refid="31593" relation="include">
        </childnode>
        <childnode refid="31614" relation="include">
        </childnode>
      </node>
      <node id="31620">
        <label>AMReX_IntVect.H</label>
        <link refid="AMReX__IntVect_8H"/>
        <childnode refid="31587" relation="include">
        </childnode>
        <childnode refid="31606" relation="include">
        </childnode>
        <childnode refid="31621" relation="include">
        </childnode>
        <childnode refid="31622" relation="include">
        </childnode>
        <childnode refid="31623" relation="include">
        </childnode>
        <childnode refid="31602" relation="include">
        </childnode>
        <childnode refid="31594" relation="include">
        </childnode>
        <childnode refid="31615" relation="include">
        </childnode>
        <childnode refid="31613" relation="include">
        </childnode>
        <childnode refid="31601" relation="include">
        </childnode>
        <childnode refid="31618" relation="include">
        </childnode>
        <childnode refid="31591" relation="include">
        </childnode>
        <childnode refid="31612" relation="include">
        </childnode>
        <childnode refid="31593" relation="include">
        </childnode>
      </node>
      <node id="31592">
        <label>AMReX.H</label>
        <link refid="AMReX_8H"/>
        <childnode refid="31593" relation="include">
        </childnode>
        <childnode refid="31594" relation="include">
        </childnode>
        <childnode refid="31595" relation="include">
        </childnode>
        <childnode refid="31583" relation="include">
        </childnode>
        <childnode refid="31597" relation="include">
        </childnode>
        <childnode refid="31584" relation="include">
        </childnode>
        <childnode refid="31580" relation="include">
        </childnode>
        <childnode refid="31588" relation="include">
        </childnode>
        <childnode refid="31598" relation="include">
        </childnode>
      </node>
      <node id="31601">
        <label>AMReX_Vector.H</label>
        <link refid="AMReX__Vector_8H"/>
        <childnode refid="31602" relation="include">
        </childnode>
        <childnode refid="31588" relation="include">
        </childnode>
        <childnode refid="31598" relation="include">
        </childnode>
        <childnode refid="31591" relation="include">
        </childnode>
      </node>
      <node id="31621">
        <label>cmath</label>
      </node>
      <node id="31596">
        <label>stdexcept</label>
      </node>
      <node id="31628">
        <label>numeric</label>
      </node>
      <node id="31584">
        <label>string</label>
      </node>
      <node id="31581">
        <label>fstream</label>
      </node>
      <node id="31619">
        <label>AMReX_ArrayLim.H</label>
        <link refid="AMReX__ArrayLim_8H"/>
        <childnode refid="31611" relation="include">
        </childnode>
      </node>
      <node id="31613">
        <label>AMReX_Array.H</label>
        <link refid="AMReX__Array_8H"/>
        <childnode refid="31590" relation="include">
        </childnode>
        <childnode refid="31598" relation="include">
        </childnode>
        <childnode refid="31604" relation="include">
        </childnode>
        <childnode refid="31584" relation="include">
        </childnode>
        <childnode refid="31583" relation="include">
        </childnode>
        <childnode refid="31605" relation="include">
        </childnode>
        <childnode refid="31580" relation="include">
        </childnode>
        <childnode refid="31592" relation="include">
        </childnode>
        <childnode refid="31593" relation="include">
        </childnode>
        <childnode refid="31614" relation="include">
        </childnode>
        <childnode refid="31591" relation="include">
        </childnode>
        <childnode refid="31615" relation="include">
        </childnode>
        <childnode refid="31611" relation="include">
        </childnode>
      </node>
      <node id="31615">
        <label>AMReX_SPACE.H</label>
        <link refid="AMReX__SPACE_8H"/>
      </node>
      <node id="31612">
        <label>AMReX_Extension.H</label>
        <link refid="AMReX__Extension_8H"/>
      </node>
      <node id="31627">
        <label>typeinfo</label>
      </node>
      <node id="31580">
        <label>cstdio</label>
      </node>
      <node id="31614">
        <label>AMReX_GpuControl.H</label>
        <link refid="AMReX__GpuControl_8H"/>
        <childnode refid="31593" relation="include">
        </childnode>
      </node>
      <node id="31603">
        <label>AMReX_BLBackTrace.H</label>
        <link refid="AMReX__BLBackTrace_8H"/>
        <childnode refid="31586" relation="include">
        </childnode>
        <childnode refid="31584" relation="include">
        </childnode>
        <childnode refid="31604" relation="include">
        </childnode>
        <childnode refid="31605" relation="include">
        </childnode>
        <childnode refid="31580" relation="include">
        </childnode>
        <childnode refid="31606" relation="include">
        </childnode>
        <childnode refid="31607" relation="include">
        </childnode>
        <childnode refid="31608" relation="include">
        </childnode>
        <childnode refid="31609" relation="include">
        </childnode>
      </node>
      <node id="31588">
        <label>vector</label>
      </node>
      <node id="31586">
        <label>stack</label>
      </node>
      <node id="31591">
        <label>AMReX_BLassert.H</label>
        <link refid="AMReX__BLassert_8H"/>
        <childnode refid="31592" relation="include">
        </childnode>
      </node>
      <node id="31593">
        <label>AMReX_GpuQualifiers.H</label>
        <link refid="AMReX__GpuQualifiers_8H"/>
      </node>
      <node id="31604">
        <label>utility</label>
      </node>
      <node id="31590">
        <label>array</label>
      </node>
      <node id="31605">
        <label>sstream</label>
      </node>
      <node id="31595">
        <label>AMReX_Exception.H</label>
        <link refid="AMReX__Exception_8H"/>
        <childnode refid="31596" relation="include">
        </childnode>
      </node>
      <node id="31617">
        <label>AMReX_Algorithm.H</label>
        <link refid="AMReX__Algorithm_8H"/>
        <childnode refid="31602" relation="include">
        </childnode>
        <childnode refid="31593" relation="include">
        </childnode>
        <childnode refid="31612" relation="include">
        </childnode>
        <childnode refid="31618" relation="include">
        </childnode>
      </node>
      <node id="31599">
        <label>AMReX_ParallelDescriptor.H</label>
        <link refid="AMReX__ParallelDescriptor_8H"/>
        <childnode refid="31594" relation="include">
        </childnode>
        <childnode refid="31600" relation="include">
        </childnode>
        <childnode refid="31603" relation="include">
        </childnode>
        <childnode refid="31610" relation="include">
        </childnode>
        <childnode refid="31591" relation="include">
        </childnode>
        <childnode refid="31611" relation="include">
        </childnode>
        <childnode refid="31613" relation="include">
        </childnode>
        <childnode refid="31601" relation="include">
        </childnode>
        <childnode refid="31616" relation="include">
        </childnode>
        <childnode refid="31583" relation="include">
        </childnode>
        <childnode refid="31588" relation="include">
        </childnode>
        <childnode refid="31584" relation="include">
        </childnode>
        <childnode refid="31627" relation="include">
        </childnode>
        <childnode refid="31602" relation="include">
        </childnode>
        <childnode refid="31597" relation="include">
        </childnode>
        <childnode refid="31622" relation="include">
        </childnode>
        <childnode refid="31628" relation="include">
        </childnode>
      </node>
      <node id="31625">
        <label>AMReX_Orientation.H</label>
        <link refid="AMReX__Orientation_8H"/>
        <childnode refid="31587" relation="include">
        </childnode>
        <childnode refid="31591" relation="include">
        </childnode>
        <childnode refid="31615" relation="include">
        </childnode>
        <childnode refid="31593" relation="include">
        </childnode>
      </node>
      <node id="31618">
        <label>AMReX_Dim3.H</label>
        <link refid="AMReX__Dim3_8H"/>
        <childnode refid="31583" relation="include">
        </childnode>
        <childnode refid="31611" relation="include">
        </childnode>
        <childnode refid="31613" relation="include">
        </childnode>
      </node>
      <node id="31587">
        <label>iosfwd</label>
      </node>
      <node id="31606">
        <label>cstdlib</label>
      </node>
      <node id="31609">
        <label>cfenv</label>
      </node>
      <node id="31583">
        <label>iostream</label>
      </node>
      <node id="31624">
        <label>AMReX_IndexType.H</label>
        <link refid="AMReX__IndexType_8H"/>
        <childnode refid="31587" relation="include">
        </childnode>
        <childnode refid="31594" relation="include">
        </childnode>
        <childnode refid="31620" relation="include">
        </childnode>
        <childnode refid="31615" relation="include">
        </childnode>
      </node>
      <node id="31626">
        <label>AMReX_Array4.H</label>
        <link refid="AMReX__Array4_8H"/>
        <childnode refid="31620" relation="include">
        </childnode>
      </node>
      <node id="31623">
        <label>climits</label>
      </node>
      <node id="31608">
        <label>csignal</label>
      </node>
      <node id="31579">
        <label>/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp</label>
        <link refid="AMReX_parstream.cpp"/>
        <childnode refid="31580" relation="include">
        </childnode>
        <childnode refid="31581" relation="include">
        </childnode>
        <childnode refid="31582" relation="include">
        </childnode>
        <childnode refid="31585" relation="include">
        </childnode>
        <childnode refid="31599" relation="include">
        </childnode>
      </node>
      <node id="31582">
        <label>AMReX_parstream.H</label>
        <link refid="AMReX__parstream_8H"/>
        <childnode refid="31583" relation="include">
        </childnode>
        <childnode refid="31584" relation="include">
        </childnode>
      </node>
      <node id="31594">
        <label>AMReX_ccse-mpi.H</label>
        <link refid="AMReX__ccse-mpi_8H"/>
      </node>
      <node id="31585">
        <label>AMReX_ParmParse.H</label>
        <link refid="AMReX__ParmParse_8H"/>
        <childnode refid="31586" relation="include">
        </childnode>
        <childnode refid="31584" relation="include">
        </childnode>
        <childnode refid="31587" relation="include">
        </childnode>
        <childnode refid="31588" relation="include">
        </childnode>
        <childnode refid="31589" relation="include">
        </childnode>
        <childnode refid="31590" relation="include">
        </childnode>
        <childnode refid="31591" relation="include">
        </childnode>
      </node>
      <node id="31602">
        <label>algorithm</label>
      </node>
      <node id="31607">
        <label>execinfo.h</label>
      </node>
      <node id="31598">
        <label>memory</label>
      </node>
      <node id="31611">
        <label>AMReX_REAL.H</label>
        <link refid="AMReX__REAL_8H"/>
        <childnode refid="31612" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceamrex">amrex</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__parstream_8H" kindref="compound">AMReX_parstream.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__ParmParse_8H" kindref="compound">AMReX_ParmParse.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__ParallelDescriptor_8H" kindref="compound">AMReX_ParallelDescriptor.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceamrex" kindref="compound">amrex</ref></highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pout()<sp/>returns<sp/>a<sp/>standard<sp/>output<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>parallel,<sp/>each<sp/>proc<sp/>sends<sp/>the<sp/>stream<sp/>to<sp/>a<sp/>separate<sp/>file,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>distinguished<sp/>by<sp/>having<sp/>the<sp/>proc<sp/>num<sp/>in<sp/>the<sp/>filename.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>serial,<sp/>the<sp/>stream<sp/>goes<sp/>to<sp/>std::cout.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>the<sp/>pout()<sp/>function<sp/>gets<sp/>used<sp/>a<sp/>lot,<sp/>it<sp/>should<sp/>be<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>streamlined<sp/>as<sp/>possible,<sp/>hence<sp/>the<sp/>use<sp/>of<sp/>shared<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>other<sp/>feature<sp/>is<sp/>that<sp/>the<sp/>application<sp/>can<sp/>choose<sp/>the<sp/>base<sp/>filename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>parallel<sp/>output<sp/>files<sp/>(the<sp/>proc<sp/>num<sp/>is<sp/>always<sp/>appended).<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>application<sp/>is<sp/>allowed<sp/>to<sp/>change<sp/>the<sp/>base<sp/>name<sp/>after<sp/>pout()<sp/>has<sp/>been<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>first<sp/>time,<sp/>which<sp/>closes<sp/>the<sp/>previously<sp/>open<sp/>file,<sp/>if<sp/>any,<sp/>and<sp/>opens<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>new<sp/>one.<sp/><sp/>The<sp/>output<sp/>files<sp/>are<sp/>_always_<sp/>truncated<sp/>on<sp/>open<sp/>--<sp/>append<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Special<sp/>notes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>If<sp/>running<sp/>in<sp/>parallel,<sp/>and<sp/>pout()<sp/>is<sp/>called<sp/>before<sp/>MPI_Initialize(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>it<sp/>will<sp/>return<sp/>std::cout.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>If<sp/>poutFilename()<sp/>is<sp/>called<sp/>before<sp/>MPI_Initialize(),<sp/>it<sp/>fails<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>the<sp/>filename<sp/>cannot<sp/>be<sp/>computed<sp/>before<sp/>the<sp/>proc<sp/>number<sp/>is<sp/>known.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Method:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Serial<sp/>is<sp/>easy;<sp/>pout()<sp/>always<sp/>returns<sp/>std::cout<sp/>and<sp/>poutFilename()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>always<sp/>returns<sp/>&quot;cout&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Parallel<sp/>is<sp/>hard<sp/>because<sp/>the<sp/>app<sp/>can<sp/>call<sp/>setPoutBaseName()<sp/>multiple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>times.<sp/><sp/>Since<sp/>nothing<sp/>matters<sp/>except<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>shared<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ae58ed08a7ada5774ab9f0a1cc892113c" kindref="member">s_pout_filename</ref><sp/>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a2728e462d28f66dc62edc4974850d0e2" kindref="member">s_pout_basename</ref><sp/>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::ofstream<sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1acfcde804095e39e72c044334abee8044" kindref="member">s_pout</ref><sp/>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ad8d02f5dc33b592a116f7d00f0e9f603" kindref="member">s_pout_init</ref><sp/>=<sp/>false<sp/>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a1541ad04792c78b4f6b342ce289c6afe" kindref="member">s_pout_open</ref><sp/>=<sp/>false<sp/>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>private<sp/>functions:<sp/>setFileName(),<sp/>openFile().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_USE_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>parallel,<sp/>compute<sp/>the<sp/>filename<sp/>give<sp/>the<sp/>basename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//[NOTE:<sp/>dont<sp/>call<sp/>this<sp/>before<sp/>MPI<sp/>is<sp/>initialized.]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a0035099661e1f92bc5de9ca2b58c0384" kindref="member">setFileName</ref>()</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outInterv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>ParmParse<sp/>pp(</highlight><highlight class="stringliteral">&quot;amrex&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>pp.query(</highlight><highlight class="stringliteral">&quot;pout_int&quot;</highlight><highlight class="normal">,<sp/>outInterv);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outInterv<sp/>==<sp/>0)<sp/>outInterv=<ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thisProc<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((thisProc<sp/>%<sp/>outInterv)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s_pout_filename<sp/>=<sp/>std::string(</highlight><highlight class="stringliteral">&quot;/dev/null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ProcnumSize<sp/>=<sp/>1<sp/>+<sp/>10<sp/>+<sp/>1<sp/>;<sp/><sp/></highlight><highlight class="comment">//&apos;.&apos;<sp/>+<sp/>10digits<sp/>+<sp/>&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>procnum[ProcnumSize]<sp/>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(<sp/>procnum<sp/>,ProcnumSize<sp/>,</highlight><highlight class="stringliteral">&quot;.%d&quot;</highlight><highlight class="normal"><sp/>,<ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>()<sp/>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s_pout_filename<sp/>=<sp/>s_pout_basename<sp/>+<sp/>procnum<sp/>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>parallel,<sp/>close<sp/>the<sp/>file<sp/>if<sp/>nec.,<sp/>open<sp/>it<sp/>and<sp/>check<sp/>for<sp/>success</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a4355fba810ff159e931e6b35e3d0dd59" kindref="member">openFile</ref>()</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>s_pout_open<sp/>)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s_pout.close();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>s_pout.open(<sp/>s_pout_filename.c_str()<sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>open()<sp/>fails,<sp/>we<sp/>have<sp/>problems,<sp/>but<sp/>it&apos;s<sp/>better</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>try<sp/>again<sp/>later<sp/>than<sp/>to<sp/>make<sp/>believe<sp/>it<sp/>succeeded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>s_pout_open<sp/>=<sp/>(bool)s_pout<sp/>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>serial,<sp/>filename<sp/>is<sp/>always<sp/>cout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a0035099661e1f92bc5de9ca2b58c0384" kindref="member">setFileName</ref>()</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>s_pout_filename<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cout&quot;</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>serial,<sp/>this<sp/>does<sp/>absolutely<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a4355fba810ff159e931e6b35e3d0dd59" kindref="member">openFile</ref>()</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"></codeline>
<codeline lineno="106"></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>std::ostream&amp;<sp/><ref refid="namespaceamrex_1a45701cae6632ec65a5eebdecc587c780" kindref="member">pout</ref>()</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_USE_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>common<sp/>case<sp/>is<sp/>_open<sp/>==<sp/>true,<sp/>which<sp/>just<sp/>returns<sp/>s_pout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>s_pout_open<sp/>)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>uncommon<sp/>cae:<sp/>the<sp/>file<sp/>isn&apos;t<sp/>opened,<sp/>MPI<sp/>may<sp/>not<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialized,<sp/>and<sp/>the<sp/>basename<sp/>may<sp/>not<sp/>have<sp/>been<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag_i,<sp/>flag_f;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Initialized(&amp;flag_i);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Finalized(&amp;flag_f);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>app<sp/>hasn&apos;t<sp/>set<sp/>a<sp/>basename<sp/>yet,<sp/>so<sp/>set<sp/>the<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>s_pout_init<sp/>)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_pout_basename<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;amrex_pout&quot;</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_pout_init<sp/>=<sp/>true<sp/>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>MPI<sp/>not<sp/>initialized,<sp/>we<sp/>cant<sp/>open<sp/>the<sp/>file<sp/>so<sp/>return<sp/>cout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>flag_i<sp/>||<sp/>flag_f)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::cout;<sp/></highlight><highlight class="comment">//<sp/>MPI<sp/>hasn&apos;t<sp/>been<sp/>started<sp/>yet,<sp/>or<sp/>has<sp/>ended....</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MPI<sp/>is<sp/>initialized,<sp/>so<sp/>file<sp/>must<sp/>not<sp/>be,<sp/>so<sp/>open<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0035099661e1f92bc5de9ca2b58c0384" kindref="member">setFileName</ref>()<sp/>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a4355fba810ff159e931e6b35e3d0dd59" kindref="member">openFile</ref>()<sp/>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>finally,<sp/>in<sp/>case<sp/>the<sp/>open<sp/>failed,<sp/>return<sp/>cout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>s_pout_open<sp/>)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::cout<sp/>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1acfcde804095e39e72c044334abee8044" kindref="member">s_pout</ref><sp/>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::cout;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"></codeline>
<codeline lineno="154"><highlight class="comment">//[NOTE:<sp/>in<sp/>serial,<sp/>this<sp/>is<sp/>irrelevant<sp/>because<sp/>s_pout_basename<sp/>is<sp/>not<sp/>used.]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a76884405b2dc4cd3167652aa79be5606" kindref="member">setPoutBaseName</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/>a_Name<sp/>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_new_name<sp/>=<sp/>a_Name<sp/>!=<sp/><ref refid="namespaceamrex_1a2728e462d28f66dc62edc4974850d0e2" kindref="member">s_pout_basename</ref><sp/>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>s_pout_basename<sp/>=<sp/>a_Name<sp/>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>s_pout_init<sp/>&amp;&amp;<sp/>s_pout_open<sp/>&amp;&amp;<sp/>is_new_name<sp/>)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>open<sp/>a<sp/>new<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//[NOTE:<sp/>this<sp/>is<sp/>safe<sp/>to<sp/>do<sp/>now<sp/>because<sp/>it&apos;s<sp/>already<sp/>been<sp/>done<sp/>once.]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0035099661e1f92bc5de9ca2b58c0384" kindref="member">setFileName</ref>()<sp/>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a4355fba810ff159e931e6b35e3d0dd59" kindref="member">openFile</ref>()<sp/>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>s_pout_init<sp/>=<sp/>true<sp/>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"></codeline>
<codeline lineno="176"><highlight class="comment">//[NOTE:<sp/>to<sp/>be<sp/>static-initialization-safe,<sp/>only<sp/>app.<sp/>code<sp/>should<sp/>call<sp/>this<sp/>function.]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;<sp/><ref refid="namespaceamrex_1a0b6b28892d1b7c4a6845bcf08ba7a461" kindref="member">poutFileName</ref>()</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_USE_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Initialized(&amp;flag);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flag)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>s_pout_open<sp/>)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>s_pout_init<sp/>)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_pout_basename<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;amrex_pout&quot;</highlight><highlight class="normal"><sp/>;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_pout_init<sp/>=<sp/>true<sp/>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0035099661e1f92bc5de9ca2b58c0384" kindref="member">setFileName</ref>()<sp/>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//[NOTE:<sp/>could<sp/>open<sp/>the<sp/>file<sp/>here,<sp/>but<sp/>we<sp/>would<sp/>still<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>in<sp/>pout()<sp/>to<sp/>handle<sp/>the<sp/>case<sp/>where<sp/>the<sp/>file<sp/>isn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>open,<sp/>so<sp/>there&apos;s<sp/>no<sp/>point<sp/>duplicating<sp/>the<sp/>code<sp/>here.<sp/>&lt;dbs&gt;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There&apos;s<sp/>really<sp/>nothing<sp/>reasonable<sp/>to<sp/>do<sp/>in<sp/>this<sp/>case,<sp/>since<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>filename<sp/>cannot<sp/>be<sp/>computed<sp/>until<sp/>after<sp/>MPI<sp/>is<sp/>initialized<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>proc<sp/>number<sp/>is<sp/>known.<sp/><sp/>So<sp/>treat<sp/>it<sp/>as<sp/>a<sp/>programming<sp/>bug.<sp/><sp/>Since<sp/>MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>isn&apos;t<sp/>initialized,<sp/>all<sp/>procs<sp/>must<sp/>be<sp/>running<sp/>this<sp/>code,<sp/>so<sp/>all<sp/>procs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;error:<sp/>poutFileName()<sp/>cannot<sp/>be<sp/>called<sp/>before<sp/>MPI_Initialize().&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl<sp/>;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(<sp/>111<sp/>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>serial,<sp/>set<sp/>the<sp/>filename<sp/>to<sp/>&quot;cout&quot;<sp/>and<sp/>return<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//[NOTE:<sp/>yes,<sp/>this<sp/>resets<sp/>the<sp/>filename<sp/>redundantly<sp/>ever<sp/>time.<sp/>&lt;dbs&gt;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1a0035099661e1f92bc5de9ca2b58c0384" kindref="member">setFileName</ref>();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1ae58ed08a7ada5774ab9f0a1cc892113c" kindref="member">s_pout_filename</ref><sp/>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_parstream.cpp"/>
  </compounddef>
</doxygen>
