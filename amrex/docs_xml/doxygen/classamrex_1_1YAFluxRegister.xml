<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1YAFluxRegister" kind="class" language="C++" prot="public">
    <compoundname>amrex::YAFluxRegister</compoundname>
    <derivedcompoundref refid="classamrex_1_1EBFluxRegister" prot="public" virt="non-virtual">amrex::EBFluxRegister</derivedcompoundref>
    <includes refid="AMReX__YAFluxRegister_8H" local="no">AMReX_YAFluxRegister.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1YAFluxRegister_1a793217326d57a18d473ad802963c1a39" prot="public" static="no">
        <name>CellType</name>
        <enumvalue id="classamrex_1_1YAFluxRegister_1a793217326d57a18d473ad802963c1a39ad0f71b4da95e7cb4ed06cb9fc1be19a0" prot="public">
          <name>crse_cell</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1YAFluxRegister_1a793217326d57a18d473ad802963c1a39ac5c1292509aea6d15b097b266dc73151" prot="public">
          <name>crse_fine_boundary_cell</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1YAFluxRegister_1a793217326d57a18d473ad802963c1a39af227036442400df4bcf1b730c2eb4774" prot="public">
          <name>fine_cell</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="58" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="58" bodyend="61"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegister_1ad10fb234e2fec5e6486d114884150a2b" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref></type>
        <definition>MultiFab amrex::YAFluxRegister::m_crse_data</definition>
        <argsstring></argsstring>
        <name>m_crse_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="65" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegister_1a3e49048433f266d6f9e1c1f79dc0b395" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1iMultiFab" kindref="compound">iMultiFab</ref></type>
        <definition>iMultiFab amrex::YAFluxRegister::m_crse_flag</definition>
        <argsstring></argsstring>
        <name>m_crse_flag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="66" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegister_1a6f45ea054c1b1838346dd1b746a756ac" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::YAFluxRegister::m_crse_fab_flag</definition>
        <argsstring></argsstring>
        <name>m_crse_fab_flag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="67" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegister_1a3f868dbecc624c8d0735356953e6911a" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref></type>
        <definition>MultiFab amrex::YAFluxRegister::m_cfpatch</definition>
        <argsstring></argsstring>
        <name>m_cfpatch</name>
        <briefdescription>
<para>This is built on crse/fine patches. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="69" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegister_1a31991246a5f75c0de9fbdfaf784db4d9" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref></type>
        <definition>MultiFab amrex::YAFluxRegister::m_cfp_mask</definition>
        <argsstring></argsstring>
        <name>m_cfp_mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="70" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegister_1ae5fdcdbe4998bb8636e686763cebc949" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> * &gt; &gt;</type>
        <definition>Vector&lt;Vector&lt;FArrayBox*&gt; &gt; amrex::YAFluxRegister::m_cfp_fab</definition>
        <argsstring></argsstring>
        <name>m_cfp_fab</name>
        <briefdescription>
<para>The size of this is (# of local fine grids (# of crse/fine patches for that grid)) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="71" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegister_1a1de636a21ef7f808042c3ad6ebefd84e" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::YAFluxRegister::m_cfp_localindex</definition>
        <argsstring></argsstring>
        <name>m_cfp_localindex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="72" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegister_1a4abd839a10e74024737f9adf7e72ca2d" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::YAFluxRegister::m_fine_geom</definition>
        <argsstring></argsstring>
        <name>m_fine_geom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="74" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegister_1a6170429b80c9c95fc90120a72cf7d2b6" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref></type>
        <definition>Geometry amrex::YAFluxRegister::m_crse_geom</definition>
        <argsstring></argsstring>
        <name>m_crse_geom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="75" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegister_1aba05eb1f76e3659a6aadac0e2c1011bb" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::YAFluxRegister::m_ratio</definition>
        <argsstring></argsstring>
        <name>m_ratio</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="77" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegister_1a6fcbf17c79baf4ec382a3a2124ecdfed" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::YAFluxRegister::m_fine_level</definition>
        <argsstring></argsstring>
        <name>m_fine_level</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="78" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1YAFluxRegister_1aa6fb273e1e2d183bb7e5a15b4df5fa2e" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::YAFluxRegister::m_ncomp</definition>
        <argsstring></argsstring>
        <name>m_ncomp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="79" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1YAFluxRegister_1abfac49b8daf5d0b0303aaa24a4f7751a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::YAFluxRegister::YAFluxRegister</definition>
        <argsstring>()=default</argsstring>
        <name>YAFluxRegister</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="26" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegister_1a4cb85ba705d31548325bd3f09c6f17ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::YAFluxRegister::YAFluxRegister</definition>
        <argsstring>(const BoxArray &amp;fba, const BoxArray &amp;cba, const DistributionMapping &amp;fdm, const DistributionMapping &amp;cdm, const Geometry &amp;fgeom, const Geometry &amp;cgeom, const IntVect &amp;ref_ratio, int fine_lev, int nvar)</argsstring>
        <name>YAFluxRegister</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>cba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>fdm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>cdm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fine_lev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="28" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.cpp" bodystart="11" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegister_1a1c455cac046d9c693f48cd2b84533d17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::YAFluxRegister::define</definition>
        <argsstring>(const BoxArray &amp;fba, const BoxArray &amp;cba, const DistributionMapping &amp;fdm, const DistributionMapping &amp;cdm, const Geometry &amp;fgeom, const Geometry &amp;cgeom, const IntVect &amp;ref_ratio, int fine_lev, int nvar)</argsstring>
        <name>define</name>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>fba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>cba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>fdm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>cdm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ref_ratio</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fine_lev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="33" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.cpp" bodystart="20" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegister_1a9f4e5bbfcfe4bd2de5e3487a80e8cc0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::YAFluxRegister::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="38" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.cpp" bodystart="233" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegister_1a24d221d7e5538a09512389d71386e9bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::YAFluxRegister::CrseAdd</definition>
        <argsstring>(const MFIter &amp;mfi, const std::array&lt; FArrayBox const *, AMREX_SPACEDIM &gt; &amp;flux, const Real *dx, Real dt, RunOn gpu_or_cpu) noexcept</argsstring>
        <name>CrseAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>const std::array&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
          <declname>gpu_or_cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="40" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.cpp" bodystart="241" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegister_1a16e46b300ff340a7ff39d65aa572d3cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::YAFluxRegister::FineAdd</definition>
        <argsstring>(const MFIter &amp;mfi, const std::array&lt; FArrayBox const *, AMREX_SPACEDIM &gt; &amp;flux, const Real *dx, Real dt, RunOn gpu_or_cpu) noexcept</argsstring>
        <name>FineAdd</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>const std::array&lt; <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> const *, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>flux</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>dt</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a33bef6ea796972dbf046ba79277795d2" kindref="member">RunOn</ref></type>
          <declname>gpu_or_cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="44" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.cpp" bodystart="286" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegister_1a710ed45f31383818bc39e92010e63cb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::YAFluxRegister::Reflux</definition>
        <argsstring>(MultiFab &amp;state, int dc=0)</argsstring>
        <name>Reflux</name>
        <param>
          <type><ref refid="classamrex_1_1MultiFab" kindref="compound">MultiFab</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dc</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="48" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.cpp" bodystart="374" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegister_1af466fe21e95a36341e6a099dcf9c5a97" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::YAFluxRegister::CrseHasWork</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>CrseHasWork</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="50" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1YAFluxRegister_1aac0df8bf308e353e01a5477f2c3fe458" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::YAFluxRegister::FineHasWork</definition>
        <argsstring>(const MFIter &amp;mfi) const noexcept</argsstring>
        <name>FineHasWork</name>
        <param>
          <type>const <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> &amp;</type>
          <declname>mfi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="54" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="54" bodyend="56"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classamrex_1_1YAFluxRegister" kindref="compound">YAFluxRegister</ref> is yet another Flux Register for refluxing.</para><para>At the beginning of a coarse step, <computeroutput><ref refid="classamrex_1_1YAFluxRegister_1a9f4e5bbfcfe4bd2de5e3487a80e8cc0c" kindref="member">reset()</ref></computeroutput> is called. In <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> for the coarse level advance, <computeroutput>CrseAdd</computeroutput> is called with coarse flux. The flux is not scaled. In <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref> for the fine level advance, <computeroutput>FineAdd</computeroutput> is called. After the fine level finished its time steps, <computeroutput>Reflux</computeroutput> is called to update the coarse cells next to the coarse/fine boundary. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="6179">
        <label>amrex::EBFluxRegister</label>
        <link refid="classamrex_1_1EBFluxRegister"/>
        <childnode refid="6178" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6178">
        <label>amrex::YAFluxRegister</label>
        <link refid="classamrex_1_1YAFluxRegister"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6210">
        <label>std::vector&lt; MPI_Status, std::allocator&lt; MPI_Status &gt; &gt;</label>
      </node>
      <node id="6214">
        <label>amrex::iMultiFab</label>
        <link refid="classamrex_1_1iMultiFab"/>
        <childnode refid="6215" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6193">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="6194" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="6196">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="6186">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="6186" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="6183">
        <label>Real</label>
      </node>
      <node id="6211">
        <label>amrex::Vector&lt; MPI_Request &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6212" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6205">
        <label>std::vector&lt; std::string, std::allocator&lt; std::string &gt; &gt;</label>
      </node>
      <node id="6197">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6198" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6194">
        <label>string</label>
      </node>
      <node id="6213">
        <label>amrex::Periodicity</label>
        <link refid="classamrex_1_1Periodicity"/>
        <childnode refid="6186" relation="usage">
          <edgelabel>period</edgelabel>
        </childnode>
      </node>
      <node id="6207">
        <label>std::vector&lt; char *, std::allocator&lt; char * &gt; &gt;</label>
      </node>
      <node id="6188">
        <label>amrex::Vector&lt; amrex::Vector&lt; amrex::FArrayBox * &gt; &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6189" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6189">
        <label>std::vector&lt; amrex::Vector&lt; amrex::FArrayBox * &gt;, std::allocator&lt; amrex::Vector&lt; amrex::FArrayBox * &gt; &gt; &gt;</label>
      </node>
      <node id="6206">
        <label>amrex::Vector&lt; char * &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6207" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6208">
        <label>amrex::FabArray&lt; FAB &gt;::ShMem</label>
        <link refid="structamrex_1_1FabArray_1_1ShMem"/>
      </node>
      <node id="6212">
        <label>std::vector&lt; MPI_Request, std::allocator&lt; MPI_Request &gt; &gt;</label>
      </node>
      <node id="6198">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="6215">
        <label>amrex::FabArray&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="6192" relation="public-inheritance">
        </childnode>
        <childnode refid="6186" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="6197" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="6204" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="6206" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="6208" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="6209" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="6211" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="6213" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="6203">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="6186" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
        <childnode refid="6187" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="6184">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="6183" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
      <node id="6185">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="6186" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="6187" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="6201">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="6202" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="6209">
        <label>amrex::Vector&lt; MPI_Status &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6210" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6182">
        <label>amrex::CoordSys</label>
        <link refid="classamrex_1_1CoordSys"/>
        <childnode refid="6183" relation="usage">
          <edgelabel>inv_dx</edgelabel>
          <edgelabel>offset</edgelabel>
          <edgelabel>dx</edgelabel>
        </childnode>
      </node>
      <node id="6187">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="6202">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="6197" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="6204">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6205" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6195">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="6199">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="6200" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="6201" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="6190">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="6191" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6181">
        <label>amrex::Geometry</label>
        <link refid="classamrex_1_1Geometry"/>
        <childnode refid="6182" relation="public-inheritance">
        </childnode>
        <childnode refid="6184" relation="usage">
          <edgelabel>prob_domain</edgelabel>
        </childnode>
        <childnode refid="6185" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
      <node id="6191">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="6192" relation="public-inheritance">
        </childnode>
        <childnode refid="6186" relation="usage">
          <edgelabel>fb_nghost</edgelabel>
        </childnode>
        <childnode refid="6197" relation="usage">
          <edgelabel>fb_recv_size</edgelabel>
          <edgelabel>fb_recv_from</edgelabel>
        </childnode>
        <childnode refid="6204" relation="usage">
          <edgelabel>m_tags</edgelabel>
        </childnode>
        <childnode refid="6206" relation="usage">
          <edgelabel>fb_recv_data</edgelabel>
          <edgelabel>fb_send_data</edgelabel>
        </childnode>
        <childnode refid="6208" relation="usage">
          <edgelabel>shmem</edgelabel>
        </childnode>
        <childnode refid="6209" relation="usage">
          <edgelabel>fb_recv_stat</edgelabel>
        </childnode>
        <childnode refid="6211" relation="usage">
          <edgelabel>fb_send_reqs</edgelabel>
          <edgelabel>fb_recv_reqs</edgelabel>
        </childnode>
        <childnode refid="6213" relation="usage">
          <edgelabel>fb_period</edgelabel>
        </childnode>
      </node>
      <node id="6180">
        <label>amrex::YAFluxRegister</label>
        <link refid="classamrex_1_1YAFluxRegister"/>
        <childnode refid="6181" relation="usage">
          <edgelabel>m_fine_geom</edgelabel>
          <edgelabel>m_crse_geom</edgelabel>
        </childnode>
        <childnode refid="6188" relation="usage">
          <edgelabel>m_cfp_fab</edgelabel>
        </childnode>
        <childnode refid="6186" relation="usage">
          <edgelabel>m_ratio</edgelabel>
        </childnode>
        <childnode refid="6190" relation="usage">
          <edgelabel>m_cfp_mask</edgelabel>
          <edgelabel>m_crse_data</edgelabel>
          <edgelabel>m_cfpatch</edgelabel>
        </childnode>
        <childnode refid="6197" relation="usage">
          <edgelabel>m_cfp_localindex</edgelabel>
          <edgelabel>m_crse_fab_flag</edgelabel>
        </childnode>
        <childnode refid="6214" relation="usage">
          <edgelabel>m_crse_flag</edgelabel>
        </childnode>
      </node>
      <node id="6200">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
      </node>
      <node id="6192">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="6193" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="6195" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="6186" relation="usage">
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="6196" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="6197" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="6199" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="6203" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" line="23" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Boundary/AMReX_YAFluxRegister.H" bodystart="22" bodyend="80"/>
    <listofallmembers>
      <member refid="classamrex_1_1YAFluxRegister_1a793217326d57a18d473ad802963c1a39" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>CellType</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a793217326d57a18d473ad802963c1a39ad0f71b4da95e7cb4ed06cb9fc1be19a0" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>crse_cell</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a793217326d57a18d473ad802963c1a39ac5c1292509aea6d15b097b266dc73151" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>crse_fine_boundary_cell</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a24d221d7e5538a09512389d71386e9bd" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>CrseAdd</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1af466fe21e95a36341e6a099dcf9c5a97" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>CrseHasWork</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a1c455cac046d9c693f48cd2b84533d17" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>define</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a793217326d57a18d473ad802963c1a39af227036442400df4bcf1b730c2eb4774" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>fine_cell</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a16e46b300ff340a7ff39d65aa572d3cf" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>FineAdd</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1aac0df8bf308e353e01a5477f2c3fe458" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>FineHasWork</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1ae5fdcdbe4998bb8636e686763cebc949" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>m_cfp_fab</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a1de636a21ef7f808042c3ad6ebefd84e" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>m_cfp_localindex</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a31991246a5f75c0de9fbdfaf784db4d9" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>m_cfp_mask</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a3f868dbecc624c8d0735356953e6911a" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>m_cfpatch</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1ad10fb234e2fec5e6486d114884150a2b" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>m_crse_data</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a6f45ea054c1b1838346dd1b746a756ac" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>m_crse_fab_flag</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a3e49048433f266d6f9e1c1f79dc0b395" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>m_crse_flag</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a6170429b80c9c95fc90120a72cf7d2b6" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>m_crse_geom</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a4abd839a10e74024737f9adf7e72ca2d" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>m_fine_geom</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a6fcbf17c79baf4ec382a3a2124ecdfed" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>m_fine_level</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1aa6fb273e1e2d183bb7e5a15b4df5fa2e" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>m_ncomp</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1aba05eb1f76e3659a6aadac0e2c1011bb" prot="protected" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>m_ratio</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a710ed45f31383818bc39e92010e63cb6" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>Reflux</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a9f4e5bbfcfe4bd2de5e3487a80e8cc0c" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>reset</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1abfac49b8daf5d0b0303aaa24a4f7751a" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>YAFluxRegister</name></member>
      <member refid="classamrex_1_1YAFluxRegister_1a4cb85ba705d31548325bd3f09c6f17ff" prot="public" virt="non-virtual"><scope>amrex::YAFluxRegister</scope><name>YAFluxRegister</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
