<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1RealBox" kind="class" language="C++" prot="public">
    <compoundname>amrex::RealBox</compoundname>
    <includes refid="AMReX__RealBox_8H" local="no">AMReX_RealBox.H</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1RealBox_1a4f9c8d6e2a72c25360195de819831fd0" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::RealBox::xlo[3]</definition>
        <argsstring>[3]</argsstring>
        <name>xlo</name>
        <qualifiedname>amrex::RealBox::xlo</qualifiedname>
        <initializer>= { Real(0.) , Real(0.) , Real(0.) }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="141" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1RealBox_1a2a8beb0d249fef26ad726aa32563b823" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::RealBox::xhi[3]</definition>
        <argsstring>[3]</argsstring>
        <name>xhi</name>
        <qualifiedname>amrex::RealBox::xhi</qualifiedname>
        <initializer>= { Real(-1.) , Real(-1.) , Real(-1.) }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="142" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="142" bodyend="142"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1RealBox_1a0c94da578ae78f612f3c7a1295edb272" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr amrex::RealBox::RealBox</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>RealBox</name>
        <qualifiedname>amrex::RealBox::RealBox</qualifiedname>
        <briefdescription>
<para>The default constructor. Builds invalid <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="24" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a1e665340f31c0bd0f3e133ea81277718" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__</type>
        <definition>__host__ __device__ amrex::RealBox::RealBox</definition>
        <argsstring>(const Real *a_lo, const Real *a_hi) noexcept</argsstring>
        <name>RealBox</name>
        <qualifiedname>amrex::RealBox::RealBox</qualifiedname>
        <param>
          <type>const Real *</type>
          <declname>a_lo</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>a_hi</declname>
        </param>
        <briefdescription>
<para>Construct region given diagonal points. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="28" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="28" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a6f8e3f9da25574d7f1e0865c686762d2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::RealBox::RealBox</definition>
        <argsstring>(const std::array&lt; Real, 3 &gt; &amp;a_lo, const std::array&lt; Real, 3 &gt; &amp;a_hi) noexcept</argsstring>
        <name>RealBox</name>
        <qualifiedname>amrex::RealBox::RealBox</qualifiedname>
        <param>
          <type>const std::array&lt; Real, 3 &gt; &amp;</type>
          <declname>a_lo</declname>
        </param>
        <param>
          <type>const std::array&lt; Real, 3 &gt; &amp;</type>
          <declname>a_hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="31" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.cpp" bodystart="24" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1ac0a2462c4b6cf7119c7946140d4ba979" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::RealBox::RealBox</definition>
        <argsstring>(const Box &amp;bx, const Real *dx, const Real *base) noexcept</argsstring>
        <name>RealBox</name>
        <qualifiedname>amrex::RealBox::RealBox</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Construct region given index box, cell spacing and physical location of index (0,0,0). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="38" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.cpp" bodystart="10" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1ad108897eec5d7b96f3175a62999a58aa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__</type>
        <definition>__host__ __device__ amrex::RealBox::RealBox</definition>
        <argsstring>(Real x0, Real y0, Real z0, Real x1, Real y1, Real z1) noexcept</argsstring>
        <name>RealBox</name>
        <qualifiedname>amrex::RealBox::RealBox</qualifiedname>
        <param>
          <type>Real</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>z0</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>z1</declname>
        </param>
        <briefdescription>
<para>Explicit dimension specific constructors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="41" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a9bf22d3afecd440bb1f5490f1ca15db7" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ const Real *</type>
        <definition>__host__ __device__ const Real * amrex::RealBox::lo</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>lo</name>
        <qualifiedname>amrex::RealBox::lo</qualifiedname>
        <briefdescription>
<para>Returns lo side. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="46" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a850140adde4f5a359b7d4322c4db44d2" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type>__host__ __device__ const Real *</type>
        <definition>__host__ __device__ const Real * amrex::RealBox::lo</definition>
        <argsstring>() &amp;&amp;=delete</argsstring>
        <name>lo</name>
        <qualifiedname>amrex::RealBox::lo</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="48" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1ac52a368075c89685c1abcc3ddbd00ff3" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ const Real *</type>
        <definition>__host__ __device__ const Real * amrex::RealBox::hi</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>hi</name>
        <qualifiedname>amrex::RealBox::hi</qualifiedname>
        <briefdescription>
<para>Returns hide side. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="51" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a9774ef8de85a107e434e3f5614216fb6" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type>__host__ __device__ const Real *</type>
        <definition>__host__ __device__ const Real * amrex::RealBox::hi</definition>
        <argsstring>() &amp;&amp;=delete</argsstring>
        <name>hi</name>
        <qualifiedname>amrex::RealBox::hi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="53" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a3b5e7b04e5a12a033d5fa51b90181e3c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ Real</type>
        <definition>__host__ __device__ Real amrex::RealBox::lo</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>lo</name>
        <qualifiedname>amrex::RealBox::lo</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns length in specified direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="56" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1aca85ccb07a26611a51808c4704579de5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ Real</type>
        <definition>__host__ __device__ Real amrex::RealBox::hi</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>hi</name>
        <qualifiedname>amrex::RealBox::hi</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns hi side in specified direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="59" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1ac92ea1ab251e81661d23f8c12a34c860" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ Real</type>
        <definition>__host__ __device__ Real amrex::RealBox::length</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>length</name>
        <qualifiedname>amrex::RealBox::length</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns length in specified direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="62" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a1130b16abd9291592ada32965f8d3201" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setLo</definition>
        <argsstring>(const Real *a_lo) noexcept</argsstring>
        <name>setLo</name>
        <qualifiedname>amrex::RealBox::setLo</qualifiedname>
        <param>
          <type>const Real *</type>
          <declname>a_lo</declname>
        </param>
        <briefdescription>
<para>Sets lo side. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="64" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1ad513c995fcf5ff2ca68ea4a1ca78a9f7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setLo</definition>
        <argsstring>(const Vector&lt; Real &gt; &amp;a_lo) noexcept</argsstring>
        <name>setLo</name>
        <qualifiedname>amrex::RealBox::setLo</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>a_lo</declname>
        </param>
        <briefdescription>
<para>Sets lo side. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="66" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1ad17a084669ca15c44ee367f21a9ffc68" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setLo</definition>
        <argsstring>(const RealVect &amp;a_lo) noexcept</argsstring>
        <name>setLo</name>
        <qualifiedname>amrex::RealBox::setLo</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a9a66cb310efdbc12b9b4d5f170470726" kindref="member">RealVect</ref> &amp;</type>
          <declname>a_lo</declname>
        </param>
        <briefdescription>
<para>Sets lo side. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="68" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a06a08fc2ff5eb243e5b56ad66734fd55" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setLo</definition>
        <argsstring>(int dir, Real a_lo) noexcept</argsstring>
        <name>setLo</name>
        <qualifiedname>amrex::RealBox::setLo</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a_lo</declname>
        </param>
        <briefdescription>
<para>Sets lo side in specified direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="70" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1adfe0a1636b666203a0fc32be47c5bedb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setHi</definition>
        <argsstring>(const Real *a_hi) noexcept</argsstring>
        <name>setHi</name>
        <qualifiedname>amrex::RealBox::setHi</qualifiedname>
        <param>
          <type>const Real *</type>
          <declname>a_hi</declname>
        </param>
        <briefdescription>
<para>Sets hi side. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="72" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a48f67e7be6f62e4e0ac416af2ca860fa" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setHi</definition>
        <argsstring>(const Vector&lt; Real &gt; &amp;a_hi) noexcept</argsstring>
        <name>setHi</name>
        <qualifiedname>amrex::RealBox::setHi</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>a_hi</declname>
        </param>
        <briefdescription>
<para>Sets hi side. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="74" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a94d83eb3cb499791bd998169535994d8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setHi</definition>
        <argsstring>(const RealVect &amp;a_hi) noexcept</argsstring>
        <name>setHi</name>
        <qualifiedname>amrex::RealBox::setHi</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a9a66cb310efdbc12b9b4d5f170470726" kindref="member">RealVect</ref> &amp;</type>
          <declname>a_hi</declname>
        </param>
        <briefdescription>
<para>Sets hi side. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="76" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a5cc6185da0581780aa6e6411a60795e4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setHi</definition>
        <argsstring>(int dir, Real a_hi) noexcept</argsstring>
        <name>setHi</name>
        <qualifiedname>amrex::RealBox::setHi</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a_hi</declname>
        </param>
        <briefdescription>
<para>Sets hi side in specified direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="78" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1ae82e3ad67dc6b874eceb8cf81028e218" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::RealBox::ok</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ok</name>
        <qualifiedname>amrex::RealBox::ok</qualifiedname>
        <briefdescription>
<para>Is the <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> OK; i.e. does it have non-negative volume? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="81" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="81" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a93db6fe21fbffe66f89ca56e42197175" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ Real</type>
        <definition>__host__ __device__ Real amrex::RealBox::volume</definition>
        <argsstring>() const noexcept</argsstring>
        <name>volume</name>
        <qualifiedname>amrex::RealBox::volume</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the volume of the <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>. If this <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> is invalid, it&apos;s volume is considered to be zero. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="95" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a05442764978cacf90a1c15dbb5fafa17" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::RealBox::contains</definition>
        <argsstring>(const Real *point, Real eps=0.0) const noexcept</argsstring>
        <name>contains</name>
        <qualifiedname>amrex::RealBox::contains</qualifiedname>
        <param>
          <type>const Real *</type>
          <declname>point</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Is the specified point contained in the <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="102" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="102" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a9f25f3c66cba1912e9885e7439914cc7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::RealBox::contains</definition>
        <argsstring>(XDim3 point, Real eps=0.0) const noexcept</argsstring>
        <name>contains</name>
        <qualifiedname>amrex::RealBox::contains</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1XDim3" kindref="compound">XDim3</ref></type>
          <declname>point</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Is the specified point contained in the <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="111" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="111" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1af84db0be938e0e45cef84387eaca6aee" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::RealBox::contains</definition>
        <argsstring>(const RealVect &amp;rv, Real eps=0.0) const noexcept</argsstring>
        <name>contains</name>
        <qualifiedname>amrex::RealBox::contains</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a9a66cb310efdbc12b9b4d5f170470726" kindref="member">RealVect</ref> &amp;</type>
          <declname>rv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Is the specified RealVect contained in this <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="119" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="119" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a35e4fe3ce6318e500ab0cd1411351ee7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::RealBox::contains</definition>
        <argsstring>(const RealBox &amp;rb, Real eps=0.0) const noexcept</argsstring>
        <name>contains</name>
        <qualifiedname>amrex::RealBox::contains</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>rb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Is the specified <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> contained in this <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="124" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a87cf86c67d2fd71644e93cf097b35d0c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::RealBox::intersects</definition>
        <argsstring>(const RealBox &amp;bx) const noexcept</argsstring>
        <name>intersects</name>
        <qualifiedname>amrex::RealBox::intersects</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>Does the specified <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> intersect with this <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="131" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="131" bodyend="135"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A Box with real dimensions. A <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> is OK iff volume &gt;= 0. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="20" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="21" bodyend="143"/>
    <listofallmembers>
      <member refid="classamrex_1_1RealBox_1a05442764978cacf90a1c15dbb5fafa17" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>contains</name></member>
      <member refid="classamrex_1_1RealBox_1a9f25f3c66cba1912e9885e7439914cc7" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>contains</name></member>
      <member refid="classamrex_1_1RealBox_1af84db0be938e0e45cef84387eaca6aee" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>contains</name></member>
      <member refid="classamrex_1_1RealBox_1a35e4fe3ce6318e500ab0cd1411351ee7" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>contains</name></member>
      <member refid="classamrex_1_1RealBox_1ac52a368075c89685c1abcc3ddbd00ff3" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>hi</name></member>
      <member refid="classamrex_1_1RealBox_1a9774ef8de85a107e434e3f5614216fb6" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>hi</name></member>
      <member refid="classamrex_1_1RealBox_1aca85ccb07a26611a51808c4704579de5" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>hi</name></member>
      <member refid="classamrex_1_1RealBox_1a87cf86c67d2fd71644e93cf097b35d0c" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>intersects</name></member>
      <member refid="classamrex_1_1RealBox_1ac92ea1ab251e81661d23f8c12a34c860" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>length</name></member>
      <member refid="classamrex_1_1RealBox_1a9bf22d3afecd440bb1f5490f1ca15db7" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>lo</name></member>
      <member refid="classamrex_1_1RealBox_1a850140adde4f5a359b7d4322c4db44d2" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>lo</name></member>
      <member refid="classamrex_1_1RealBox_1a3b5e7b04e5a12a033d5fa51b90181e3c" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>lo</name></member>
      <member refid="classamrex_1_1RealBox_1ae82e3ad67dc6b874eceb8cf81028e218" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>ok</name></member>
      <member refid="classamrex_1_1RealBox_1a0c94da578ae78f612f3c7a1295edb272" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>RealBox</name></member>
      <member refid="classamrex_1_1RealBox_1a1e665340f31c0bd0f3e133ea81277718" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>RealBox</name></member>
      <member refid="classamrex_1_1RealBox_1a6f8e3f9da25574d7f1e0865c686762d2" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>RealBox</name></member>
      <member refid="classamrex_1_1RealBox_1ac0a2462c4b6cf7119c7946140d4ba979" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>RealBox</name></member>
      <member refid="classamrex_1_1RealBox_1ad108897eec5d7b96f3175a62999a58aa" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>RealBox</name></member>
      <member refid="classamrex_1_1RealBox_1adfe0a1636b666203a0fc32be47c5bedb" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setHi</name></member>
      <member refid="classamrex_1_1RealBox_1a48f67e7be6f62e4e0ac416af2ca860fa" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setHi</name></member>
      <member refid="classamrex_1_1RealBox_1a94d83eb3cb499791bd998169535994d8" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setHi</name></member>
      <member refid="classamrex_1_1RealBox_1a5cc6185da0581780aa6e6411a60795e4" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setHi</name></member>
      <member refid="classamrex_1_1RealBox_1a1130b16abd9291592ada32965f8d3201" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setLo</name></member>
      <member refid="classamrex_1_1RealBox_1ad513c995fcf5ff2ca68ea4a1ca78a9f7" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setLo</name></member>
      <member refid="classamrex_1_1RealBox_1ad17a084669ca15c44ee367f21a9ffc68" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setLo</name></member>
      <member refid="classamrex_1_1RealBox_1a06a08fc2ff5eb243e5b56ad66734fd55" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setLo</name></member>
      <member refid="classamrex_1_1RealBox_1a93db6fe21fbffe66f89ca56e42197175" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>volume</name></member>
      <member refid="classamrex_1_1RealBox_1a2a8beb0d249fef26ad726aa32563b823" prot="private" virt="non-virtual"><scope>amrex::RealBox</scope><name>xhi</name></member>
      <member refid="classamrex_1_1RealBox_1a4f9c8d6e2a72c25360195de819831fd0" prot="private" virt="non-virtual"><scope>amrex::RealBox</scope><name>xlo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
