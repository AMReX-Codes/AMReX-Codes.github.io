<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1RealBox" kind="class" language="C++" prot="public">
    <compoundname>amrex::RealBox</compoundname>
    <includes refid="AMReX__RealBox_8H" local="no">AMReX_RealBox.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1RealBox_1ae4725fce5cb9ab4e306e9cb7a9c37f3c" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::RealBox::xlo[AMREX_SPACEDIM]</definition>
        <argsstring>[AMREX_SPACEDIM]</argsstring>
        <name>xlo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="136" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1RealBox_1af7c8319947a6017a36027bc15c3ad065" prot="private" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::RealBox::xhi[AMREX_SPACEDIM]</definition>
        <argsstring>[AMREX_SPACEDIM]</argsstring>
        <name>xhi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="137" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="137" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1RealBox_1a8f5a0e24053950affc6b030fb4333402" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::RealBox::RealBox</definition>
        <argsstring>() noexcept</argsstring>
        <name>RealBox</name>
        <briefdescription>
<para>The default constructor. Builds invalid <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="24" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a08455d95f7a26778ba42b5d023d16eec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::RealBox::RealBox</definition>
        <argsstring>(const Real *a_lo, const Real *a_hi) noexcept</argsstring>
        <name>RealBox</name>
        <param>
          <type>const Real *</type>
          <declname>a_lo</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>a_hi</declname>
        </param>
        <briefdescription>
<para>Construct region given diagonal points. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="28" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="28" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a4fad8ad2d3ec608a2c1f2fb205ddda86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::RealBox::RealBox</definition>
        <argsstring>(const std::array&lt; Real, AMREX_SPACEDIM &gt; &amp;a_lo, const std::array&lt; Real, AMREX_SPACEDIM &gt; &amp;a_hi) noexcept</argsstring>
        <name>RealBox</name>
        <param>
          <type>const std::array&lt; Real, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a_lo</declname>
        </param>
        <param>
          <type>const std::array&lt; Real, AMREX_SPACEDIM &gt; &amp;</type>
          <declname>a_hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="31" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.cpp" bodystart="23" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1ac0a2462c4b6cf7119c7946140d4ba979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::RealBox::RealBox</definition>
        <argsstring>(const Box &amp;bx, const Real *dx, const Real *base) noexcept</argsstring>
        <name>RealBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>dx</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Construct region given index box, cell spacing and physical location of index (0,0,0). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="38" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.cpp" bodystart="9" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a0133f0708ca052eb1eb7a7753169bb75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::RealBox::RealBox</definition>
        <argsstring>(AMREX_D_DECL(Real x0, Real y0, Real z0), AMREX_D_DECL(Real x1, Real y1, Real z1)) noexcept</argsstring>
        <name>RealBox</name>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(Real x0, Real y0, Real z0)</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8de829410ed15dbc56e4dafc9bc6ea69a68b0c60ae4f5670ee8d0ad5dda84d0fd" kindref="member">AMREX_D_DECL</ref>(Real x1, Real y1, Real z1)</type>
        </param>
        <briefdescription>
<para>Explicit dimension specific constructors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="41" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1aded9c5a0cac5cfd5a320c32a26144dcc" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const Real *</type>
        <definition>AMREX_GPU_HOST_DEVICE const Real* amrex::RealBox::lo</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>lo</name>
        <briefdescription>
<para>Returns lo side. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="46" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1af47f7f7299a40c820515f9eeb983d14b" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const Real *</type>
        <definition>AMREX_GPU_HOST_DEVICE const Real* amrex::RealBox::lo</definition>
        <argsstring>() &amp;&amp;=delete</argsstring>
        <name>lo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a819f29403d4806d7b13baffe25b5ceb8" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const Real *</type>
        <definition>AMREX_GPU_HOST_DEVICE const Real* amrex::RealBox::hi</definition>
        <argsstring>() const &amp;noexcept</argsstring>
        <name>hi</name>
        <briefdescription>
<para>Returns hide side. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="51" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a43318ab06cd6678b822c612803739144" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> const Real *</type>
        <definition>AMREX_GPU_HOST_DEVICE const Real* amrex::RealBox::hi</definition>
        <argsstring>() &amp;&amp;=delete</argsstring>
        <name>hi</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1aeb9332bd9350ab5d7fd3a32afa888659" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::RealBox::lo</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>lo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns length in specified direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="56" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a853070bf06ced25f07f7c02a5cd9293f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::RealBox::hi</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>hi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns hi side in specified direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="59" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1aee1bde14bdd1fa4a02c2f340c5611b85" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::RealBox::length</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>length</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>Returns length in specified direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="62" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a1130b16abd9291592ada32965f8d3201" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setLo</definition>
        <argsstring>(const Real *a_lo) noexcept</argsstring>
        <name>setLo</name>
        <param>
          <type>const Real *</type>
          <declname>a_lo</declname>
        </param>
        <briefdescription>
<para>Sets lo side. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="64" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1ad513c995fcf5ff2ca68ea4a1ca78a9f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setLo</definition>
        <argsstring>(const Vector&lt; Real &gt; &amp;a_lo) noexcept</argsstring>
        <name>setLo</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>a_lo</declname>
        </param>
        <briefdescription>
<para>Sets lo side. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="66" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a06a08fc2ff5eb243e5b56ad66734fd55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setLo</definition>
        <argsstring>(int dir, Real a_lo) noexcept</argsstring>
        <name>setLo</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a_lo</declname>
        </param>
        <briefdescription>
<para>Sets lo side in specified direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="68" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1adfe0a1636b666203a0fc32be47c5bedb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setHi</definition>
        <argsstring>(const Real *a_hi) noexcept</argsstring>
        <name>setHi</name>
        <param>
          <type>const Real *</type>
          <declname>a_hi</declname>
        </param>
        <briefdescription>
<para>Sets hi side. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="70" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a48f67e7be6f62e4e0ac416af2ca860fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setHi</definition>
        <argsstring>(const Vector&lt; Real &gt; &amp;a_hi) noexcept</argsstring>
        <name>setHi</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Real &gt; &amp;</type>
          <declname>a_hi</declname>
        </param>
        <briefdescription>
<para>Sets hi side. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="72" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a5cc6185da0581780aa6e6411a60795e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealBox::setHi</definition>
        <argsstring>(int dir, Real a_hi) noexcept</argsstring>
        <name>setHi</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>a_hi</declname>
        </param>
        <briefdescription>
<para>Sets hi side in specified direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="74" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a0ef0d1567b79fabf1c2ac051a78b3f95" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::RealBox::ok</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ok</name>
        <briefdescription>
<para>Is the <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> OK; i.e. does it have non-negative volume? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="77" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="77" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a098e1f2357e21072c37d33fff98d9cb7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> Real</type>
        <definition>AMREX_GPU_HOST_DEVICE Real amrex::RealBox::volume</definition>
        <argsstring>() const noexcept</argsstring>
        <name>volume</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the volume of the <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>. If this <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> is invalid, it&apos;s volume is considered to be zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="91" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a6e117146678175a0d2be9d40e7873200" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::RealBox::contains</definition>
        <argsstring>(const Real *point, Real eps=0.0) const noexcept</argsstring>
        <name>contains</name>
        <param>
          <type>const Real *</type>
          <declname>point</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Is the specified point contained in the <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="98" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="98" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a7c3358585c6f290b57884ea0297d373a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::RealBox::contains</definition>
        <argsstring>(XDim3 point, Real eps=0.0) const noexcept</argsstring>
        <name>contains</name>
        <param>
          <type><ref refid="structamrex_1_1XDim3" kindref="compound">XDim3</ref></type>
          <declname>point</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Is the specified point contained in the <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="107" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="107" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a3f794c66970518d1c8d164f4a7dae36a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::RealBox::contains</definition>
        <argsstring>(const RealVect &amp;rv, Real eps=0.0) const noexcept</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> &amp;</type>
          <declname>rv</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Is the specified <ref refid="classamrex_1_1RealVect" kindref="compound">RealVect</ref> contained in this <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="114" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="114" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1aecb30e60d8a6a56c7c7233db3ae8d148" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::RealBox::contains</definition>
        <argsstring>(const RealBox &amp;rb, Real eps=0.0) const noexcept</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>rb</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>eps</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Is the specified <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> contained in this <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="119" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealBox_1a8b71ab83b796a36109d487b53b7ec4c1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::RealBox::intersects</definition>
        <argsstring>(const RealBox &amp;bx) const noexcept</argsstring>
        <name>intersects</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>Does the specified <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> intersect with this <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref>? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="126" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="126" bodyend="130"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> with real dimensions. A <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> is OK iff volume &gt;= 0. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="4398">
        <label>Real</label>
      </node>
      <node id="4397">
        <label>amrex::RealBox</label>
        <link refid="classamrex_1_1RealBox"/>
        <childnode refid="4398" relation="usage">
          <edgelabel>xhi</edgelabel>
          <edgelabel>xlo</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" line="20" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_RealBox.H" bodystart="19" bodyend="138"/>
    <listofallmembers>
      <member refid="classamrex_1_1RealBox_1a6e117146678175a0d2be9d40e7873200" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>contains</name></member>
      <member refid="classamrex_1_1RealBox_1a7c3358585c6f290b57884ea0297d373a" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>contains</name></member>
      <member refid="classamrex_1_1RealBox_1a3f794c66970518d1c8d164f4a7dae36a" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>contains</name></member>
      <member refid="classamrex_1_1RealBox_1aecb30e60d8a6a56c7c7233db3ae8d148" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>contains</name></member>
      <member refid="classamrex_1_1RealBox_1a819f29403d4806d7b13baffe25b5ceb8" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>hi</name></member>
      <member refid="classamrex_1_1RealBox_1a43318ab06cd6678b822c612803739144" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>hi</name></member>
      <member refid="classamrex_1_1RealBox_1a853070bf06ced25f07f7c02a5cd9293f" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>hi</name></member>
      <member refid="classamrex_1_1RealBox_1a8b71ab83b796a36109d487b53b7ec4c1" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>intersects</name></member>
      <member refid="classamrex_1_1RealBox_1aee1bde14bdd1fa4a02c2f340c5611b85" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>length</name></member>
      <member refid="classamrex_1_1RealBox_1aded9c5a0cac5cfd5a320c32a26144dcc" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>lo</name></member>
      <member refid="classamrex_1_1RealBox_1af47f7f7299a40c820515f9eeb983d14b" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>lo</name></member>
      <member refid="classamrex_1_1RealBox_1aeb9332bd9350ab5d7fd3a32afa888659" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>lo</name></member>
      <member refid="classamrex_1_1RealBox_1a0ef0d1567b79fabf1c2ac051a78b3f95" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>ok</name></member>
      <member refid="classamrex_1_1RealBox_1a8f5a0e24053950affc6b030fb4333402" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>RealBox</name></member>
      <member refid="classamrex_1_1RealBox_1a08455d95f7a26778ba42b5d023d16eec" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>RealBox</name></member>
      <member refid="classamrex_1_1RealBox_1a4fad8ad2d3ec608a2c1f2fb205ddda86" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>RealBox</name></member>
      <member refid="classamrex_1_1RealBox_1ac0a2462c4b6cf7119c7946140d4ba979" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>RealBox</name></member>
      <member refid="classamrex_1_1RealBox_1a0133f0708ca052eb1eb7a7753169bb75" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>RealBox</name></member>
      <member refid="classamrex_1_1RealBox_1adfe0a1636b666203a0fc32be47c5bedb" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setHi</name></member>
      <member refid="classamrex_1_1RealBox_1a48f67e7be6f62e4e0ac416af2ca860fa" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setHi</name></member>
      <member refid="classamrex_1_1RealBox_1a5cc6185da0581780aa6e6411a60795e4" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setHi</name></member>
      <member refid="classamrex_1_1RealBox_1a1130b16abd9291592ada32965f8d3201" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setLo</name></member>
      <member refid="classamrex_1_1RealBox_1ad513c995fcf5ff2ca68ea4a1ca78a9f7" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setLo</name></member>
      <member refid="classamrex_1_1RealBox_1a06a08fc2ff5eb243e5b56ad66734fd55" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>setLo</name></member>
      <member refid="classamrex_1_1RealBox_1a098e1f2357e21072c37d33fff98d9cb7" prot="public" virt="non-virtual"><scope>amrex::RealBox</scope><name>volume</name></member>
      <member refid="classamrex_1_1RealBox_1af7c8319947a6017a36027bc15c3ad065" prot="private" virt="non-virtual"><scope>amrex::RealBox</scope><name>xhi</name></member>
      <member refid="classamrex_1_1RealBox_1ae4725fce5cb9ab4e306e9cb7a9c37f3c" prot="private" virt="non-virtual"><scope>amrex::RealBox</scope><name>xlo</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
