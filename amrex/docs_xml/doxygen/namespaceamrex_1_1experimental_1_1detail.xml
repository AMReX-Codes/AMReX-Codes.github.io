<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1experimental_1_1detail" kind="namespace" language="C++">
    <compoundname>amrex::experimental::detail</compoundname>
    <innernamespace refid="namespaceamrex_1_1experimental_1_1detail_1_1parfor__mf__detail">amrex::experimental::detail::parfor_mf_detail</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1_1detail_1aaa997f796d912a268ca213de8e95d05d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::experimental::detail::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;nghost, int ncomp, IntVect const &amp;, bool, F const &amp;f)</argsstring>
        <name>ParallelFor</name>
        <qualifiedname>amrex::experimental::detail::ParallelFor</qualifiedname>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
        </param>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelForG.H" line="75" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelForG.H" bodystart="75" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1_1detail_1a6977ff14219cac6ad11d1604a3eda9e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::experimental::detail::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;nghost, int ncomp, IntVect const &amp;ts, bool dynamic, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <qualifiedname>amrex::experimental::detail::ParallelFor</qualifiedname>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dynamic</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelForG.H" line="143" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelForG.H" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1_1detail_1a63872b6180747c895060c56d7af8f51a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::experimental::detail::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;nghost, IntVect const &amp;ts, bool dynamic, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <qualifiedname>amrex::experimental::detail::ParallelFor</qualifiedname>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dynamic</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelForG.H" line="150" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelForG.H" bodystart="150" bodyend="153"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelForG.H" line="53" column="1"/>
  </compounddef>
</doxygen>
