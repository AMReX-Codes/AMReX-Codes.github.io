<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="AMReX__ParallelDescriptor_8cpp" kind="file" language="C++">
    <compoundname>AMReX_ParallelDescriptor.cpp</compoundname>
    <includes local="no">cstdio</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">iostream</includes>
    <includes local="no">fstream</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">sstream</includes>
    <includes local="no">stack</includes>
    <includes local="no">list</includes>
    <includes local="no">chrono</includes>
    <includes refid="AMReX_8H" local="no">AMReX.H</includes>
    <includes refid="AMReX__Utility_8H" local="no">AMReX_Utility.H</includes>
    <includes refid="AMReX__BLProfiler_8H" local="no">AMReX_BLProfiler.H</includes>
    <includes refid="AMReX__BLFort_8H" local="no">AMReX_BLFort.H</includes>
    <includes refid="AMReX__ParallelDescriptor_8H" local="no">AMReX_ParallelDescriptor.H</includes>
    <includes refid="AMReX__Print_8H" local="no">AMReX_Print.H</includes>
    <includes refid="AMReX__TypeTraits_8H" local="no">AMReX_TypeTraits.H</includes>
    <includes refid="AMReX__ParmParse_8H" local="no">AMReX_ParmParse.H</includes>
    <incdepgraph>
      <node id="30689">
        <label>list</label>
      </node>
      <node id="30732">
        <label>AMReX_ParallelContext.H</label>
        <link refid="AMReX__ParallelContext_8H"/>
        <childnode refid="30699" relation="include">
        </childnode>
        <childnode refid="30685" relation="include">
        </childnode>
        <childnode refid="30713" relation="include">
        </childnode>
        <childnode refid="30693" relation="include">
        </childnode>
      </node>
      <node id="30742">
        <label>iomanip</label>
      </node>
      <node id="30696">
        <label>functional</label>
      </node>
      <node id="30727">
        <label>AMReX_BoxArray.H</label>
        <link refid="AMReX__BoxArray_8H"/>
        <childnode refid="30684" relation="include">
        </childnode>
        <childnode refid="30682" relation="include">
        </childnode>
        <childnode refid="30701" relation="include">
        </childnode>
        <childnode refid="30728" relation="include">
        </childnode>
        <childnode refid="30724" relation="include">
        </childnode>
        <childnode refid="30729" relation="include">
        </childnode>
        <childnode refid="30708" relation="include">
        </childnode>
        <childnode refid="30713" relation="include">
        </childnode>
      </node>
      <node id="30722">
        <label>limits</label>
      </node>
      <node id="30737">
        <label>AMReX_BLProfiler.H</label>
        <link refid="AMReX__BLProfiler_8H"/>
        <childnode refid="30697" relation="include">
        </childnode>
        <childnode refid="30706" relation="include">
        </childnode>
      </node>
      <node id="30715">
        <label>AMReX_Box.H</label>
        <link refid="AMReX__Box_8H"/>
        <childnode refid="30716" relation="include">
        </childnode>
        <childnode refid="30717" relation="include">
        </childnode>
        <childnode refid="30719" relation="include">
        </childnode>
        <childnode refid="30693" relation="include">
        </childnode>
        <childnode refid="30720" relation="include">
        </childnode>
        <childnode refid="30724" relation="include">
        </childnode>
        <childnode refid="30725" relation="include">
        </childnode>
        <childnode refid="30712" relation="include">
        </childnode>
        <childnode refid="30708" relation="include">
        </childnode>
        <childnode refid="30726" relation="include">
        </childnode>
        <childnode refid="30713" relation="include">
        </childnode>
        <childnode refid="30692" relation="include">
        </childnode>
        <childnode refid="30711" relation="include">
        </childnode>
      </node>
      <node id="30730">
        <label>AMReX_DistributionMapping.H</label>
        <link refid="AMReX__DistributionMapping_8H"/>
        <childnode refid="30701" relation="include">
        </childnode>
        <childnode refid="30722" relation="include">
        </childnode>
        <childnode refid="30699" relation="include">
        </childnode>
        <childnode refid="30682" relation="include">
        </childnode>
        <childnode refid="30684" relation="include">
        </childnode>
        <childnode refid="30691" relation="include">
        </childnode>
        <childnode refid="30708" relation="include">
        </childnode>
        <childnode refid="30713" relation="include">
        </childnode>
        <childnode refid="30715" relation="include">
        </childnode>
        <childnode refid="30706" relation="include">
        </childnode>
        <childnode refid="30731" relation="include">
        </childnode>
      </node>
      <node id="30720">
        <label>AMReX_IntVect.H</label>
        <link refid="AMReX__IntVect_8H"/>
        <childnode refid="30716" relation="include">
        </childnode>
        <childnode refid="30683" relation="include">
        </childnode>
        <childnode refid="30721" relation="include">
        </childnode>
        <childnode refid="30722" relation="include">
        </childnode>
        <childnode refid="30723" relation="include">
        </childnode>
        <childnode refid="30714" relation="include">
        </childnode>
        <childnode refid="30693" relation="include">
        </childnode>
        <childnode refid="30712" relation="include">
        </childnode>
        <childnode refid="30708" relation="include">
        </childnode>
        <childnode refid="30713" relation="include">
        </childnode>
        <childnode refid="30718" relation="include">
        </childnode>
        <childnode refid="30705" relation="include">
        </childnode>
        <childnode refid="30707" relation="include">
        </childnode>
        <childnode refid="30692" relation="include">
        </childnode>
      </node>
      <node id="30691">
        <label>AMReX.H</label>
        <link refid="AMReX_8H"/>
        <childnode refid="30692" relation="include">
        </childnode>
        <childnode refid="30693" relation="include">
        </childnode>
        <childnode refid="30694" relation="include">
        </childnode>
        <childnode refid="30684" relation="include">
        </childnode>
        <childnode refid="30696" relation="include">
        </childnode>
        <childnode refid="30697" relation="include">
        </childnode>
        <childnode refid="30681" relation="include">
        </childnode>
        <childnode refid="30698" relation="include">
        </childnode>
        <childnode refid="30699" relation="include">
        </childnode>
      </node>
      <node id="30713">
        <label>AMReX_Vector.H</label>
        <link refid="AMReX__Vector_8H"/>
        <childnode refid="30714" relation="include">
        </childnode>
        <childnode refid="30698" relation="include">
        </childnode>
        <childnode refid="30699" relation="include">
        </childnode>
        <childnode refid="30705" relation="include">
        </childnode>
      </node>
      <node id="30741">
        <label>AMReX_Print.H</label>
        <link refid="AMReX__Print_8H"/>
        <childnode refid="30687" relation="include">
        </childnode>
        <childnode refid="30685" relation="include">
        </childnode>
        <childnode refid="30742" relation="include">
        </childnode>
        <childnode refid="30691" relation="include">
        </childnode>
        <childnode refid="30732" relation="include">
        </childnode>
        <childnode refid="30731" relation="include">
        </childnode>
      </node>
      <node id="30721">
        <label>cmath</label>
      </node>
      <node id="30695">
        <label>stdexcept</label>
      </node>
      <node id="30739">
        <label>numeric</label>
      </node>
      <node id="30740">
        <label>AMReX_BLFort.H</label>
        <link refid="AMReX__BLFort_8H"/>
        <childnode refid="30719" relation="include">
        </childnode>
        <childnode refid="30706" relation="include">
        </childnode>
        <childnode refid="30712" relation="include">
        </childnode>
      </node>
      <node id="30729">
        <label>AMReX_BoxList.H</label>
        <link refid="AMReX__BoxList_8H"/>
        <childnode refid="30716" relation="include">
        </childnode>
        <childnode refid="30720" relation="include">
        </childnode>
        <childnode refid="30724" relation="include">
        </childnode>
        <childnode refid="30715" relation="include">
        </childnode>
        <childnode refid="30708" relation="include">
        </childnode>
        <childnode refid="30713" relation="include">
        </childnode>
      </node>
      <node id="30697">
        <label>string</label>
      </node>
      <node id="30701">
        <label>map</label>
      </node>
      <node id="30685">
        <label>fstream</label>
      </node>
      <node id="30719">
        <label>AMReX_ArrayLim.H</label>
        <link refid="AMReX__ArrayLim_8H"/>
        <childnode refid="30706" relation="include">
        </childnode>
      </node>
      <node id="30708">
        <label>AMReX_Array.H</label>
        <link refid="AMReX__Array_8H"/>
        <childnode refid="30709" relation="include">
        </childnode>
        <childnode refid="30699" relation="include">
        </childnode>
        <childnode refid="30710" relation="include">
        </childnode>
        <childnode refid="30697" relation="include">
        </childnode>
        <childnode refid="30684" relation="include">
        </childnode>
        <childnode refid="30687" relation="include">
        </childnode>
        <childnode refid="30681" relation="include">
        </childnode>
        <childnode refid="30691" relation="include">
        </childnode>
        <childnode refid="30692" relation="include">
        </childnode>
        <childnode refid="30711" relation="include">
        </childnode>
        <childnode refid="30705" relation="include">
        </childnode>
        <childnode refid="30712" relation="include">
        </childnode>
        <childnode refid="30706" relation="include">
        </childnode>
      </node>
      <node id="30712">
        <label>AMReX_SPACE.H</label>
        <link refid="AMReX__SPACE_8H"/>
      </node>
      <node id="30707">
        <label>AMReX_Extension.H</label>
        <link refid="AMReX__Extension_8H"/>
      </node>
      <node id="30680">
        <label>/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp</label>
        <link refid="AMReX_ParallelDescriptor.cpp"/>
        <childnode refid="30681" relation="include">
        </childnode>
        <childnode refid="30682" relation="include">
        </childnode>
        <childnode refid="30683" relation="include">
        </childnode>
        <childnode refid="30684" relation="include">
        </childnode>
        <childnode refid="30685" relation="include">
        </childnode>
        <childnode refid="30686" relation="include">
        </childnode>
        <childnode refid="30687" relation="include">
        </childnode>
        <childnode refid="30688" relation="include">
        </childnode>
        <childnode refid="30689" relation="include">
        </childnode>
        <childnode refid="30690" relation="include">
        </childnode>
        <childnode refid="30691" relation="include">
        </childnode>
        <childnode refid="30700" relation="include">
        </childnode>
        <childnode refid="30737" relation="include">
        </childnode>
        <childnode refid="30740" relation="include">
        </childnode>
        <childnode refid="30731" relation="include">
        </childnode>
        <childnode refid="30741" relation="include">
        </childnode>
        <childnode refid="30743" relation="include">
        </childnode>
        <childnode refid="30744" relation="include">
        </childnode>
      </node>
      <node id="30703">
        <label>sys/types.h</label>
      </node>
      <node id="30738">
        <label>typeinfo</label>
      </node>
      <node id="30681">
        <label>cstdio</label>
      </node>
      <node id="30743">
        <label>AMReX_TypeTraits.H</label>
        <link refid="AMReX__TypeTraits_8H"/>
        <childnode refid="30702" relation="include">
        </childnode>
        <childnode refid="30707" relation="include">
        </childnode>
      </node>
      <node id="30711">
        <label>AMReX_GpuControl.H</label>
        <link refid="AMReX__GpuControl_8H"/>
        <childnode refid="30692" relation="include">
        </childnode>
      </node>
      <node id="30733">
        <label>AMReX_BLBackTrace.H</label>
        <link refid="AMReX__BLBackTrace_8H"/>
        <childnode refid="30688" relation="include">
        </childnode>
        <childnode refid="30697" relation="include">
        </childnode>
        <childnode refid="30710" relation="include">
        </childnode>
        <childnode refid="30687" relation="include">
        </childnode>
        <childnode refid="30681" relation="include">
        </childnode>
        <childnode refid="30683" relation="include">
        </childnode>
        <childnode refid="30734" relation="include">
        </childnode>
        <childnode refid="30735" relation="include">
        </childnode>
        <childnode refid="30736" relation="include">
        </childnode>
      </node>
      <node id="30686">
        <label>unistd.h</label>
      </node>
      <node id="30698">
        <label>vector</label>
      </node>
      <node id="30688">
        <label>stack</label>
      </node>
      <node id="30705">
        <label>AMReX_BLassert.H</label>
        <link refid="AMReX__BLassert_8H"/>
        <childnode refid="30691" relation="include">
        </childnode>
      </node>
      <node id="30692">
        <label>AMReX_GpuQualifiers.H</label>
        <link refid="AMReX__GpuQualifiers_8H"/>
      </node>
      <node id="30710">
        <label>utility</label>
      </node>
      <node id="30709">
        <label>array</label>
      </node>
      <node id="30687">
        <label>sstream</label>
      </node>
      <node id="30694">
        <label>AMReX_Exception.H</label>
        <link refid="AMReX__Exception_8H"/>
        <childnode refid="30695" relation="include">
        </childnode>
      </node>
      <node id="30717">
        <label>AMReX_Algorithm.H</label>
        <link refid="AMReX__Algorithm_8H"/>
        <childnode refid="30714" relation="include">
        </childnode>
        <childnode refid="30692" relation="include">
        </childnode>
        <childnode refid="30707" relation="include">
        </childnode>
        <childnode refid="30718" relation="include">
        </childnode>
      </node>
      <node id="30731">
        <label>AMReX_ParallelDescriptor.H</label>
        <link refid="AMReX__ParallelDescriptor_8H"/>
        <childnode refid="30693" relation="include">
        </childnode>
        <childnode refid="30732" relation="include">
        </childnode>
        <childnode refid="30733" relation="include">
        </childnode>
        <childnode refid="30737" relation="include">
        </childnode>
        <childnode refid="30705" relation="include">
        </childnode>
        <childnode refid="30706" relation="include">
        </childnode>
        <childnode refid="30708" relation="include">
        </childnode>
        <childnode refid="30713" relation="include">
        </childnode>
        <childnode refid="30715" relation="include">
        </childnode>
        <childnode refid="30684" relation="include">
        </childnode>
        <childnode refid="30698" relation="include">
        </childnode>
        <childnode refid="30697" relation="include">
        </childnode>
        <childnode refid="30738" relation="include">
        </childnode>
        <childnode refid="30714" relation="include">
        </childnode>
        <childnode refid="30696" relation="include">
        </childnode>
        <childnode refid="30722" relation="include">
        </childnode>
        <childnode refid="30739" relation="include">
        </childnode>
      </node>
      <node id="30700">
        <label>AMReX_Utility.H</label>
        <link refid="AMReX__Utility_8H"/>
        <childnode refid="30683" relation="include">
        </childnode>
        <childnode refid="30684" relation="include">
        </childnode>
        <childnode refid="30697" relation="include">
        </childnode>
        <childnode refid="30701" relation="include">
        </childnode>
        <childnode refid="30690" relation="include">
        </childnode>
        <childnode refid="30702" relation="include">
        </childnode>
        <childnode refid="30703" relation="include">
        </childnode>
        <childnode refid="30686" relation="include">
        </childnode>
        <childnode refid="30704" relation="include">
        </childnode>
        <childnode refid="30705" relation="include">
        </childnode>
        <childnode refid="30706" relation="include">
        </childnode>
        <childnode refid="30708" relation="include">
        </childnode>
        <childnode refid="30713" relation="include">
        </childnode>
        <childnode refid="30715" relation="include">
        </childnode>
        <childnode refid="30727" relation="include">
        </childnode>
        <childnode refid="30730" relation="include">
        </childnode>
        <childnode refid="30731" relation="include">
        </childnode>
      </node>
      <node id="30725">
        <label>AMReX_Orientation.H</label>
        <link refid="AMReX__Orientation_8H"/>
        <childnode refid="30716" relation="include">
        </childnode>
        <childnode refid="30705" relation="include">
        </childnode>
        <childnode refid="30712" relation="include">
        </childnode>
        <childnode refid="30692" relation="include">
        </childnode>
      </node>
      <node id="30718">
        <label>AMReX_Dim3.H</label>
        <link refid="AMReX__Dim3_8H"/>
        <childnode refid="30684" relation="include">
        </childnode>
        <childnode refid="30706" relation="include">
        </childnode>
        <childnode refid="30708" relation="include">
        </childnode>
      </node>
      <node id="30716">
        <label>iosfwd</label>
      </node>
      <node id="30704">
        <label>sys/wait.h</label>
      </node>
      <node id="30683">
        <label>cstdlib</label>
      </node>
      <node id="30736">
        <label>cfenv</label>
      </node>
      <node id="30684">
        <label>iostream</label>
      </node>
      <node id="30724">
        <label>AMReX_IndexType.H</label>
        <link refid="AMReX__IndexType_8H"/>
        <childnode refid="30716" relation="include">
        </childnode>
        <childnode refid="30693" relation="include">
        </childnode>
        <childnode refid="30720" relation="include">
        </childnode>
        <childnode refid="30712" relation="include">
        </childnode>
      </node>
      <node id="30726">
        <label>AMReX_Array4.H</label>
        <link refid="AMReX__Array4_8H"/>
        <childnode refid="30720" relation="include">
        </childnode>
      </node>
      <node id="30682">
        <label>cstddef</label>
      </node>
      <node id="30728">
        <label>unordered_map</label>
      </node>
      <node id="30723">
        <label>climits</label>
      </node>
      <node id="30690">
        <label>chrono</label>
      </node>
      <node id="30735">
        <label>csignal</label>
      </node>
      <node id="30702">
        <label>type_traits</label>
      </node>
      <node id="30693">
        <label>AMReX_ccse-mpi.H</label>
        <link refid="AMReX__ccse-mpi_8H"/>
      </node>
      <node id="30744">
        <label>AMReX_ParmParse.H</label>
        <link refid="AMReX__ParmParse_8H"/>
        <childnode refid="30688" relation="include">
        </childnode>
        <childnode refid="30697" relation="include">
        </childnode>
        <childnode refid="30716" relation="include">
        </childnode>
        <childnode refid="30698" relation="include">
        </childnode>
        <childnode refid="30689" relation="include">
        </childnode>
        <childnode refid="30709" relation="include">
        </childnode>
        <childnode refid="30705" relation="include">
        </childnode>
      </node>
      <node id="30714">
        <label>algorithm</label>
      </node>
      <node id="30734">
        <label>execinfo.h</label>
      </node>
      <node id="30699">
        <label>memory</label>
      </node>
      <node id="30706">
        <label>AMReX_REAL.H</label>
        <link refid="AMReX__REAL_8H"/>
        <childnode refid="30707" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceamrex">amrex</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelDescriptor">amrex::ParallelDescriptor</innernamespace>
    <innernamespace refid="namespaceamrex_1_1ParallelDescriptor_1_1util">amrex::ParallelDescriptor::util</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="AMReX__ParallelDescriptor_8cpp_1a55bd78406d8e49195e537d01b019be81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex_fi_pd_myproc</definition>
        <argsstring>()</argsstring>
        <name>amrex_fi_pd_myproc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="2128" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="2128" bodyend="2130"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__ParallelDescriptor_8cpp_1a7d5660f9a749bc7d07bfef333264e851" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex_fi_pd_nprocs</definition>
        <argsstring>()</argsstring>
        <name>amrex_fi_pd_nprocs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="2132" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="2132" bodyend="2134"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__ParallelDescriptor_8cpp_1aa97739560ad64ab5eed1b64b4555fcc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex_fi_pd_ioprocessor</definition>
        <argsstring>()</argsstring>
        <name>amrex_fi_pd_ioprocessor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="2136" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="2136" bodyend="2138"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__ParallelDescriptor_8cpp_1ab02f0af6eb415481f6c0a471115cda53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex_fi_pd_ioprocessor_number</definition>
        <argsstring>()</argsstring>
        <name>amrex_fi_pd_ioprocessor_number</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="2140" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="2140" bodyend="2142"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__ParallelDescriptor_8cpp_1a9cf180d32bbb6668330bddd3b1107677" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex_fi_pd_bcast_r</definition>
        <argsstring>(Real *x, int n, int root)</argsstring>
        <name>amrex_fi_pd_bcast_r</name>
        <param>
          <type>Real *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="2144" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="2144" bodyend="2147"/>
      </memberdef>
      <memberdef kind="function" id="AMReX__ParallelDescriptor_8cpp_1a246b36fd3c5ded8a2fef5aabac2d46c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex_fi_pd_wtime</definition>
        <argsstring>()</argsstring>
        <name>amrex_fi_pd_wtime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" line="2149" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp" bodystart="2149" bodyend="2152"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stack&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX_8H" kindref="compound">AMReX.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Utility_8H" kindref="compound">AMReX_Utility.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__BLProfiler_8H" kindref="compound">AMReX_BLProfiler.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__BLFort_8H" kindref="compound">AMReX_BLFort.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__ParallelDescriptor_8H" kindref="compound">AMReX_ParallelDescriptor.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__Print_8H" kindref="compound">AMReX_Print.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__TypeTraits_8H" kindref="compound">AMReX_TypeTraits.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_USE_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__ccse-mpi_8H" kindref="compound">AMReX_ccse-mpi.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_PMI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pmi.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BL_AMRPROF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__ParmParse_8H" kindref="compound">AMReX_ParmParse.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_OPENMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;omp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_USE_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>call_mpi_finalize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceamrex" kindref="compound">amrex</ref><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ParallelDescriptor</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_USE_GPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1af122c95310b715f9006b650405e56bc8" kindref="member">use_gpu_aware_mpi</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>use_gpu_aware_mpi<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>ProcessTeam<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a9a80b6d86037c06fed7ef5fb0d2a8d28" kindref="member">m_Team</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1af87612855c6b73a8cc9f11ed5bd0d3f9" kindref="member">m_comm</ref><sp/>=<sp/><ref refid="AMReX__ccse-mpi_8H_1a9c299ed1c4c5eaa48a6446c85fb2d689" kindref="member">MPI_COMM_NULL</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>communicator<sp/>for<sp/>all<sp/>ranks,<sp/>probably<sp/>MPI_COMM_WORLD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a715b18055542b3909b818a2eb81ff469" kindref="member">m_MinTag</ref><sp/>=<sp/>1000,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a1582152747831aa49cac881d1bbec9ad" kindref="member">m_MaxTag</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a170c7ee692d457514ef07c0d6206f7e2" kindref="member">ioProcessor</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="namespaceamrex_1_1ParallelDescriptor_1_1util" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">util</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reduce<sp/>helper<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a93975121c42d886897d842d99a24e407" kindref="member">DoAllReduceReal</ref><sp/><sp/><sp/><sp/><sp/>(Real&amp;<sp/><sp/><sp/><sp/><sp/><sp/>r,<sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a0fac6e7c46c69178b3567d486264fcf2" kindref="member">DoAllReduceLong</ref><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;<sp/><sp/><sp/><sp/><sp/><sp/>r,<sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a95945235bcf2491632cd0abf1479cac1" kindref="member">DoAllReduceInt</ref><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>r,<sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a93975121c42d886897d842d99a24e407" kindref="member">DoAllReduceReal</ref><sp/><sp/><sp/><sp/><sp/>(Real*<sp/><sp/><sp/><sp/><sp/><sp/>r,<sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a0fac6e7c46c69178b3567d486264fcf2" kindref="member">DoAllReduceLong</ref><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/>r,<sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a95945235bcf2491632cd0abf1479cac1" kindref="member">DoAllReduceInt</ref><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>r,<sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a03b14af1457069781c4b12a86110b5ae" kindref="member">DoReduceReal</ref><sp/><sp/><sp/><sp/><sp/>(Real&amp;<sp/><sp/><sp/><sp/><sp/><sp/>r,<sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a87eb344865b19038be684e0f06877771" kindref="member">DoReduceLong</ref><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;<sp/><sp/><sp/><sp/><sp/><sp/>r,<sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1aff58a099fdb4fe16e0250af0ee0d8047" kindref="member">DoReduceInt</ref><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>r,<sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a03b14af1457069781c4b12a86110b5ae" kindref="member">DoReduceReal</ref><sp/><sp/><sp/><sp/><sp/>(Real*<sp/><sp/><sp/><sp/><sp/><sp/>r,<sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a87eb344865b19038be684e0f06877771" kindref="member">DoReduceLong</ref><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/>r,<sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1aff58a099fdb4fe16e0250af0ee0d8047" kindref="member">DoReduceInt</ref><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>r,<sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>AMREX_PMI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PMI_Initialize()</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pmi_nid;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pmi_mesh_coord_t<sp/>pmi_mesh_coord;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PMI_stat;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spawned;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>appnum;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pmi_size<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pmi_rank<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PMI_stat<sp/>=<sp/>PMI2_Init(&amp;spawned,<sp/>&amp;pmi_size,<sp/>&amp;pmi_rank,<sp/>&amp;appnum);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PMI_stat<sp/>!=<sp/>PMI_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ae6927a6804e22fedb86c1fe19d6567fc" kindref="member">ParallelDescriptor::Abort</ref>();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PMI_stat<sp/>=<sp/>PMI_Get_nid(pmi_rank,<sp/>&amp;pmi_nid);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PMI_stat<sp/>!=<sp/>PMI_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ae6927a6804e22fedb86c1fe19d6567fc" kindref="member">ParallelDescriptor::Abort</ref>();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PMI_stat<sp/>=<sp/>PMI_Get_meshcoord(pmi_nid,<sp/>&amp;pmi_mesh_coord);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PMI_stat<sp/>!=<sp/>PMI_SUCCESS)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ae6927a6804e22fedb86c1fe19d6567fc" kindref="member">ParallelDescriptor::Abort</ref>();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>each<sp/>MPI<sp/>Process<sp/>knows<sp/>where<sp/>it<sp/>lives<sp/>in<sp/>the<sp/>network<sp/>mesh.<sp/><sp/>On</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Aries<sp/>(the<sp/>interconnect<sp/>on<sp/>the<sp/>Cray<sp/>XC40),<sp/>the<sp/>x-coord<sp/>indicates<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>electrical<sp/>group<sp/>(1<sp/>group<sp/>=<sp/>1<sp/>pair<sp/>of<sp/>adjacent<sp/>cabinets);<sp/>the<sp/>y-coord</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>indicates<sp/>the<sp/>chassis<sp/>(3<sp/>chassis<sp/>per<sp/>cabinet;<sp/>6<sp/>chassis<sp/>per<sp/>group);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>z-coord<sp/>indicates<sp/>the<sp/>slot<sp/>(blade)<sp/>within<sp/>each<sp/>chassis<sp/>(16<sp/>per</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>chassis).<sp/>Each<sp/>slot<sp/>contains<sp/>4<sp/>nodes,<sp/>so<sp/>there<sp/>are<sp/>at<sp/>most<sp/>64<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>per<sp/>chassis,<sp/>192<sp/>per<sp/>cabinet,<sp/>and<sp/>384<sp/>per<sp/>group.<sp/>(Usually<sp/>there<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fewer<sp/>than<sp/>this<sp/>per<sp/>cabinet,<sp/>since<sp/>cabinets<sp/>are<sp/>usually<sp/>a<sp/>mixture<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>nodes,<sp/>I/O<sp/>nodes,<sp/>service<sp/>nodes,<sp/>and<sp/>other<sp/>things.)<sp/>The<sp/>slots</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>within<sp/>each<sp/>chassis<sp/>(same<sp/>x<sp/>and<sp/>y)<sp/>are<sp/>connected<sp/>all-to-all,<sp/>as<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>slots<sp/>in<sp/>the<sp/>same<sp/>row<sp/>across<sp/>chasses<sp/>within<sp/>each<sp/>group<sp/>(same<sp/>x<sp/>and<sp/>z).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>One<sp/>can<sp/>use<sp/>this<sp/>information<sp/>apply<sp/>any<sp/>kind<sp/>of<sp/>optimization<sp/>we<sp/>like,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>e.g.,<sp/>splitting<sp/>MPI<sp/>processes<sp/>into<sp/>separate<sp/>communicators<sp/>within<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>processes<sp/>are<sp/>connected<sp/>all-to-all.<sp/>The<sp/>following<sp/>is<sp/>a<sp/>placeholder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>such<sp/>an<sp/>optimization,<sp/>in<sp/>which<sp/>we<sp/>merely<sp/>collect<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>coordinates<sp/>onto<sp/>the<sp/>IOProcessor<sp/>and<sp/>print<sp/>the<sp/>unique<sp/>number<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>groups,<sp/>chassis,<sp/>and<sp/>slots<sp/>occupied<sp/>by<sp/>the<sp/>job.<sp/>(This<sp/>is<sp/>a<sp/>crude</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>measure<sp/>of<sp/>how<sp/>fragmented<sp/>the<sp/>job<sp/>is<sp/>across<sp/>the<sp/>network.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>PMI_PrintMeshcoords(&amp;pmi_mesh_coord);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PMI_PrintMeshcoords(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pmi_mesh_coord_t<sp/>*pmi_mesh_coord)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>all_x_meshcoords[<ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>()];</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>all_y_meshcoords[<ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>()];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>all_z_meshcoords[<ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>()];</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Gather(&amp;pmi_mesh_coord-&gt;mesh_x,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_UNSIGNED_SHORT,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_x_meshcoords,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_UNSIGNED_SHORT,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>(),</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">ParallelDescriptor::Communicator</ref>());</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Gather(&amp;pmi_mesh_coord-&gt;mesh_y,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_UNSIGNED_SHORT,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_y_meshcoords,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_UNSIGNED_SHORT,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>(),</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">ParallelDescriptor::Communicator</ref>());</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Gather(&amp;pmi_mesh_coord-&gt;mesh_z,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_UNSIGNED_SHORT,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_z_meshcoords,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_UNSIGNED_SHORT,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>(),</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">ParallelDescriptor::Communicator</ref>());</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;PMI<sp/>statistics:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>short&gt;<sp/>PMI_x_meshcoord(all_x_meshcoords,<sp/>all_x_meshcoords<sp/>+<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>short&gt;<sp/>PMI_y_meshcoord(all_y_meshcoords,<sp/>all_y_meshcoords<sp/>+<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>());</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>short&gt;<sp/>PMI_z_meshcoord(all_z_meshcoords,<sp/>all_z_meshcoords<sp/>+<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>());</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(PMI_x_meshcoord.begin(),<sp/>PMI_x_meshcoord.end());</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(PMI_y_meshcoord.begin(),<sp/>PMI_y_meshcoord.end());</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(PMI_z_meshcoord.begin(),<sp/>PMI_z_meshcoord.end());</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>last<sp/>=<sp/>std::unique(PMI_x_meshcoord.begin(),<sp/>PMI_x_meshcoord.end());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>of<sp/>unique<sp/>groups:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::distance(PMI_x_meshcoord.begin(),<sp/>last)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>std::unique(PMI_y_meshcoord.begin(),<sp/>PMI_y_meshcoord.end());</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>of<sp/>unique<sp/>groups:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::distance(PMI_y_meshcoord.begin(),<sp/>last)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last<sp/>=<sp/>std::unique(PMI_z_meshcoord.begin(),<sp/>PMI_z_meshcoord.end());</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Print" kindref="compound">amrex::Print</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;#<sp/>of<sp/>unique<sp/>groups:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::distance(PMI_z_meshcoord.begin(),<sp/>last)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_USE_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>the_message_string<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>call,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>512;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[N];</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>status<sp/>)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(buf,<sp/>N,<sp/></highlight><highlight class="stringliteral">&quot;AMReX<sp/>MPI<sp/>Error:<sp/>File<sp/>%s,<sp/>line<sp/>%d,<sp/>%s:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file,<sp/>line,<sp/>call,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a568bbd4bb8f719b9c0ba1950c10678ef" kindref="member">ParallelDescriptor::ErrorString</ref>(status));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(buf,<sp/>N,<sp/></highlight><highlight class="stringliteral">&quot;AMReX<sp/>MPI<sp/>Error:<sp/>File<sp/>%s,<sp/>line<sp/>%d,<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file,<sp/>line,<sp/>call);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ParallelDescriptor</highlight></codeline>
<codeline lineno="212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Error<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ac0e2e23df625040ded95611ceae98352" kindref="member">amrex::Error</ref>(the_message_string(file,<sp/>line,<sp/>str,<sp/>rc));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1ae6927a6804e22fedb86c1fe19d6567fc" kindref="member">ParallelDescriptor::Abort</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errorcode,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>backtrace)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(backtrace<sp/>&amp;&amp;<sp/><ref refid="namespaceamrex_1_1system_1a795aa5887c4cdd0f1af9818d45442826" kindref="member">amrex::system::signal_handling</ref>)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structamrex_1_1BLBackTrace_1a24b1c852ff2149fe973fad9501e2b5ec" kindref="member">BLBackTrace::handler</ref>(errorcode);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Abort(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">Communicator</ref>(),<sp/>errorcode);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a568bbd4bb8f719b9c0ba1950c10678ef" kindref="member">ParallelDescriptor::ErrorString</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errorcode)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(errorcode<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>errorcode<sp/>&lt;=<sp/>MPI_ERR_LASTCODE);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>msg[MPI_MAX_ERROR_STRING+1];</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Error_string(errorcode,<sp/>msg,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(len<sp/>&lt;=<sp/>MPI_MAX_ERROR_STRING);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msg;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><ref refid="classamrex_1_1ParallelDescriptor_1_1Message_1a94e427eb0ffccce4adcf6a7bc0954c91" kindref="member">ParallelDescriptor::Message::wait</ref><sp/>()</highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::Message::wait()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a5e661a1af9130dd8449e7f730864271c" kindref="member">BL_COMM_PROFILE</ref>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a4a3a4d36732e6b65907ea76570142b7e" kindref="member">BLProfiler::Wait</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(m_type),<sp/>pid(),<sp/>tag());</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Wait(&amp;m_req,<sp/>&amp;m_stat)<sp/>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a5e661a1af9130dd8449e7f730864271c" kindref="member">BL_COMM_PROFILE</ref>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a4a3a4d36732e6b65907ea76570142b7e" kindref="member">BLProfiler::Wait</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(m_type),<sp/>BLProfiler::AfterCall(),<sp/>tag());</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><ref refid="classamrex_1_1ParallelDescriptor_1_1Message_1a42d6517959dbf89018b970cb1c0cf66e" kindref="member">ParallelDescriptor::Message::test</ref><sp/>()</highlight></codeline>
<codeline lineno="258"><highlight class="normal">{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::Message::test()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a5e661a1af9130dd8449e7f730864271c" kindref="member">BL_COMM_PROFILE</ref>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1affba679357b6ad488b02adc81a353697" kindref="member">BLProfiler::Test</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(m_type),<sp/>pid(),<sp/>tag());</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Test(&amp;m_req,<sp/>&amp;flag,<sp/>&amp;m_stat)<sp/>);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a5e661a1af9130dd8449e7f730864271c" kindref="member">BL_COMM_PROFILE</ref>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1affba679357b6ad488b02adc81a353697" kindref="member">BLProfiler::Test</ref>,<sp/>flag,<sp/>BLProfiler::AfterCall(),<sp/>tag());</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>m_finished<sp/>=<sp/>flag<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_finished;</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><ref refid="classamrex_1_1ParallelDescriptor_1_1Message_1a6eb843f247a8203ed2a47b37de1cd481" kindref="member">ParallelDescriptor::Message::tag</ref><sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="270"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m_finished<sp/>)<sp/><ref refid="namespaceamrex_1ac0e2e23df625040ded95611ceae98352" kindref="member">amrex::Error</ref>(</highlight><highlight class="stringliteral">&quot;Message::tag:<sp/>Not<sp/>Finished!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_stat.MPI_TAG;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><ref refid="classamrex_1_1ParallelDescriptor_1_1Message_1ac411eb1073c12eb4159daa9a9494e609" kindref="member">ParallelDescriptor::Message::pid</ref><sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="277"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m_finished<sp/>)<sp/><ref refid="namespaceamrex_1ac0e2e23df625040ded95611ceae98352" kindref="member">amrex::Error</ref>(</highlight><highlight class="stringliteral">&quot;Message::pid:<sp/>Not<sp/>Finished!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_stat.MPI_SOURCE;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><ref refid="classamrex_1_1ParallelDescriptor_1_1Message_1a6da5e4ba9ce3d959467966aafd708091" kindref="member">ParallelDescriptor::Message::count</ref><sp/>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="284"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_type<sp/>==<sp/><ref refid="AMReX__ccse-mpi_8H_1aaeb65c6a10733707cec88e9cd3e3271e" kindref="member">MPI_DATATYPE_NULL</ref><sp/>)<sp/><ref refid="namespaceamrex_1ac0e2e23df625040ded95611ceae98352" kindref="member">amrex::Error</ref>(</highlight><highlight class="stringliteral">&quot;Message::count:<sp/>Bad<sp/>Type!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m_finished<sp/>)<sp/><ref refid="namespaceamrex_1ac0e2e23df625040ded95611ceae98352" kindref="member">amrex::Error</ref>(</highlight><highlight class="stringliteral">&quot;Message::count:<sp/>Not<sp/>Finished!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Get_count(&amp;m_stat,<sp/>m_type,<sp/>&amp;cnt)<sp/>);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cnt;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1adc667e1643fbfe75b057369aed1ca519" kindref="member">ParallelDescriptor::StartParallel</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/>argc,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">***<sp/>argv,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref><sp/>a_mpi_comm)</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sflag(0);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Initialized(&amp;sflag);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>sflag)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Init(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1af87612855c6b73a8cc9f11ed5bd0d3f9" kindref="member">m_comm</ref><sp/>=<sp/><ref refid="AMReX__ccse-mpi_8H_1ac57c1fc8484fb9b5c8359a559851107b" kindref="member">MPI_COMM_WORLD</ref>;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_mpi_finalize<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Comm_dup(a_mpi_comm,<sp/>&amp;<ref refid="namespaceamrex_1_1ParallelDescriptor_1af87612855c6b73a8cc9f11ed5bd0d3f9" kindref="member">m_comm</ref>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call_mpi_finalize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelContext_1a09cb92f4a123081a62f72e26a4e3c2a3" kindref="member">ParallelContext::push</ref>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1af87612855c6b73a8cc9f11ed5bd0d3f9" kindref="member">m_comm</ref>);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----<sp/>find<sp/>the<sp/>maximum<sp/>value<sp/>for<sp/>a<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag(0),<sp/>*p;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>Open<sp/>MPI,<sp/>calling<sp/>this<sp/>with<sp/>subcommunicators<sp/>will<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So<sp/>we<sp/>use<sp/>MPI_COMM_WORLD<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Comm_get_attr(<ref refid="AMReX__ccse-mpi_8H_1ac57c1fc8484fb9b5c8359a559851107b" kindref="member">MPI_COMM_WORLD</ref>,<sp/>MPI_TAG_UB,<sp/>&amp;p,<sp/>&amp;flag)<sp/>);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a1582152747831aa49cac881d1bbec9ad" kindref="member">m_MaxTag</ref><sp/>=<sp/>*p;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!flag)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;MPI_Comm_get_attr()<sp/>failed<sp/>to<sp/>get<sp/>MPI_TAG_UB&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1ad9637e4b5a5b51b9e883febb816c2a8b" kindref="member">BL_COMM_PROFILE_TAGRANGE</ref>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a715b18055542b3909b818a2eb81ff469" kindref="member">m_MinTag</ref>,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a1582152747831aa49cac881d1bbec9ad" kindref="member">m_MaxTag</ref>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_USE_MPI3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mpi_version,<sp/>mpi_subversion;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Get_version(&amp;mpi_version,<sp/>&amp;mpi_subversion)<sp/>);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mpi_version<sp/>&lt;<sp/>3)<sp/><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;MPI<sp/>3<sp/>is<sp/>needed<sp/>because<sp/>USE_MPI3=TRUE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>until<sp/>all<sp/>other<sp/>processes<sp/>are<sp/>properly<sp/>started.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Barrier(Communicator())<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a990d0a17b08dcd68a0d77a7b35cfebaf" kindref="member">ParallelDescriptor::EndParallel</ref><sp/>()</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!call_mpi_finalize)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Comm_free(&amp;<ref refid="namespaceamrex_1_1ParallelDescriptor_1af87612855c6b73a8cc9f11ed5bd0d3f9" kindref="member">m_comm</ref>)<sp/>);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1af87612855c6b73a8cc9f11ed5bd0d3f9" kindref="member">m_comm</ref><sp/>=<sp/><ref refid="AMReX__ccse-mpi_8H_1a9c299ed1c4c5eaa48a6446c85fb2d689" kindref="member">MPI_COMM_NULL</ref>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelContext_1a6bdab1c75756fa491add5ace4c59550f" kindref="member">ParallelContext::pop</ref>();</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(call_mpi_finalize)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Finalize();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">ParallelDescriptor::second</ref><sp/>()<sp/>noexcept</highlight></codeline>
<codeline lineno="349"><highlight class="normal">{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MPI_Wtime();</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a732a4be5017987f2d6edc0fcd2329301" kindref="member">ParallelDescriptor::Barrier</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message)</highlight></codeline>
<codeline lineno="355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_LAZY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Lazy_1a0a2dd2d6e19976b8eaebb9d81a65718a" kindref="member">Lazy::EvalReduction</ref>();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::Barrier()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1ad5a1613a4e6d571c8cf82d33cfbe2a50" kindref="member">BL_COMM_PROFILE_BARRIER</ref>(message,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Barrier(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">ParallelDescriptor::Communicator</ref>())<sp/>);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1ad5a1613a4e6d571c8cf82d33cfbe2a50" kindref="member">BL_COMM_PROFILE_BARRIER</ref>(message,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a732a4be5017987f2d6edc0fcd2329301" kindref="member">ParallelDescriptor::Barrier</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref><sp/>&amp;comm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message)</highlight></codeline>
<codeline lineno="370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_LAZY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Comm_compare(comm,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">Communicator</ref>(),<sp/>&amp;r);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>MPI_IDENT)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Lazy_1a0a2dd2d6e19976b8eaebb9d81a65718a" kindref="member">Lazy::EvalReduction</ref>();</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::Barrier(comm)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1ad5a1613a4e6d571c8cf82d33cfbe2a50" kindref="member">BL_COMM_PROFILE_BARRIER</ref>(message,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Barrier(comm)<sp/>);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1ad5a1613a4e6d571c8cf82d33cfbe2a50" kindref="member">BL_COMM_PROFILE_BARRIER</ref>(message,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1affba679357b6ad488b02adc81a353697" kindref="member">ParallelDescriptor::Test</ref><sp/>(<ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref>&amp;<sp/>request,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>flag,<sp/><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref>&amp;<sp/>status)</highlight></codeline>
<codeline lineno="388"><highlight class="normal">{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::Test()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a5e661a1af9130dd8449e7f730864271c" kindref="member">BL_COMM_PROFILE</ref>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1affba679357b6ad488b02adc81a353697" kindref="member">BLProfiler::Test</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/>status.MPI_SOURCE,<sp/>status.MPI_TAG);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Test(&amp;request,&amp;flag,&amp;status)<sp/>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a5e661a1af9130dd8449e7f730864271c" kindref="member">BL_COMM_PROFILE</ref>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1affba679357b6ad488b02adc81a353697" kindref="member">BLProfiler::Test</ref>,<sp/>flag,<sp/>BLProfiler::AfterCall(),<sp/>status.MPI_TAG);</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a411cea849dee5d54c8335c79f35af182" kindref="member">ParallelDescriptor::IProbe</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src_pid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tag,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>flag,<sp/><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref>&amp;<sp/>status)</highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::Iprobe()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a5e661a1af9130dd8449e7f730864271c" kindref="member">BL_COMM_PROFILE</ref>(BLProfiler::Iprobe,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/>src_pid,<sp/>tag);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Iprobe(src_pid,<sp/>tag,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">ParallelDescriptor::Communicator</ref>(),</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;flag,<sp/>&amp;status)<sp/>);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a5e661a1af9130dd8449e7f730864271c" kindref="member">BL_COMM_PROFILE</ref>(BLProfiler::Iprobe,<sp/>flag,<sp/>BLProfiler::AfterCall(),<sp/>status.MPI_TAG);</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a411cea849dee5d54c8335c79f35af182" kindref="member">ParallelDescriptor::IProbe</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src_pid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tag,<sp/><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref><sp/>comm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>flag,<sp/><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref>&amp;<sp/>status)</highlight></codeline>
<codeline lineno="411"><highlight class="normal">{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::Iprobe(comm)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a5e661a1af9130dd8449e7f730864271c" kindref="member">BL_COMM_PROFILE</ref>(BLProfiler::Iprobe,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">),<sp/>src_pid,<sp/>tag);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Iprobe(src_pid,<sp/>tag,<sp/>comm,</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;flag,<sp/>&amp;status)<sp/>);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a5e661a1af9130dd8449e7f730864271c" kindref="member">BL_COMM_PROFILE</ref>(BLProfiler::Iprobe,<sp/>flag,<sp/>BLProfiler::AfterCall(),<sp/>status.MPI_TAG);</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1ace0982cd881d1f09d60a8e38b5565e6c" kindref="member">ParallelDescriptor::Comm_dup</ref><sp/>(<ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref><sp/>comm,<sp/><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref>&amp;<sp/>newcomm)</highlight></codeline>
<codeline lineno="423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::Comm_dup()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Comm_dup(comm,<sp/>&amp;newcomm)<sp/>);</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a85f79f28c8cb6cc5762e3edd80c57fc0" kindref="member">ParallelDescriptor::ReduceBoolAnd</ref><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>r)</highlight></codeline>
<codeline lineno="430"><highlight class="normal">{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src<sp/>=<sp/>r;<sp/></highlight><highlight class="comment">//<sp/>src<sp/>is<sp/>either<sp/>0<sp/>or<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a95945235bcf2491632cd0abf1479cac1" kindref="member">util::DoAllReduceInt</ref>(src,MPI_SUM);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>(src<sp/>==<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>())<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a85f79f28c8cb6cc5762e3edd80c57fc0" kindref="member">ParallelDescriptor::ReduceBoolAnd</ref><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src<sp/>=<sp/>r;<sp/></highlight><highlight class="comment">//<sp/>src<sp/>is<sp/>either<sp/>0<sp/>or<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1aff58a099fdb4fe16e0250af0ee0d8047" kindref="member">util::DoReduceInt</ref>(src,MPI_SUM,cpu);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>()<sp/>==<sp/>cpu)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>(src<sp/>==<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>())<sp/>?<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a8e74f51d2321b7e827baae5d86a83824" kindref="member">ParallelDescriptor::ReduceBoolOr</ref><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>r)</highlight></codeline>
<codeline lineno="451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src<sp/>=<sp/>r;<sp/></highlight><highlight class="comment">//<sp/>src<sp/>is<sp/>either<sp/>0<sp/>or<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a95945235bcf2491632cd0abf1479cac1" kindref="member">util::DoAllReduceInt</ref>(src,MPI_SUM);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>(src<sp/>==<sp/>0)<sp/>?<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a8e74f51d2321b7e827baae5d86a83824" kindref="member">ParallelDescriptor::ReduceBoolOr</ref><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>src<sp/>=<sp/>r;<sp/></highlight><highlight class="comment">//<sp/>src<sp/>is<sp/>either<sp/>0<sp/>or<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1aff58a099fdb4fe16e0250af0ee0d8047" kindref="member">util::DoReduceInt</ref>(src,MPI_SUM,cpu);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>()<sp/>==<sp/>cpu)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>(src<sp/>==<sp/>0)<sp/>?<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33cc0d4af07237333e42214807d82e99" kindref="member">ParallelDescriptor::ReduceRealSum</ref><sp/>(Real&amp;<sp/>r)</highlight></codeline>
<codeline lineno="472"><highlight class="normal">{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a93975121c42d886897d842d99a24e407" kindref="member">util::DoAllReduceReal</ref>(r,MPI_SUM);</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33cc0d4af07237333e42214807d82e99" kindref="member">ParallelDescriptor::ReduceRealSum</ref><sp/>(Real*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt)</highlight></codeline>
<codeline lineno="478"><highlight class="normal">{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a93975121c42d886897d842d99a24e407" kindref="member">util::DoAllReduceReal</ref>(r,MPI_SUM,cnt);</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33cc0d4af07237333e42214807d82e99" kindref="member">ParallelDescriptor::ReduceRealSum</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;Real&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)</highlight></codeline>
<codeline lineno="484"><highlight class="normal">{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a93975121c42d886897d842d99a24e407" kindref="member">util::DoAllReduceReal</ref>(tmp.data(),MPI_SUM,cnt);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33cc0d4af07237333e42214807d82e99" kindref="member">ParallelDescriptor::ReduceRealSum</ref><sp/>(Real&amp;<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a03b14af1457069781c4b12a86110b5ae" kindref="member">util::DoReduceReal</ref>(r,MPI_SUM,cpu);</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33cc0d4af07237333e42214807d82e99" kindref="member">ParallelDescriptor::ReduceRealSum</ref><sp/>(Real*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="501"><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a03b14af1457069781c4b12a86110b5ae" kindref="member">util::DoReduceReal</ref>(r,MPI_SUM,cnt,cpu);</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33cc0d4af07237333e42214807d82e99" kindref="member">ParallelDescriptor::ReduceRealSum</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;Real&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a03b14af1457069781c4b12a86110b5ae" kindref="member">util::DoReduceReal</ref>(tmp.data(),MPI_SUM,cnt,cpu);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a552f084c17efd580d0962eb68e6b43ee" kindref="member">ParallelDescriptor::ReduceRealMax</ref><sp/>(Real&amp;<sp/>r)</highlight></codeline>
<codeline lineno="518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a93975121c42d886897d842d99a24e407" kindref="member">util::DoAllReduceReal</ref>(r,MPI_MAX);</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a552f084c17efd580d0962eb68e6b43ee" kindref="member">ParallelDescriptor::ReduceRealMax</ref><sp/>(Real*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt)</highlight></codeline>
<codeline lineno="524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a93975121c42d886897d842d99a24e407" kindref="member">util::DoAllReduceReal</ref>(r,MPI_MAX,cnt);</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a552f084c17efd580d0962eb68e6b43ee" kindref="member">ParallelDescriptor::ReduceRealMax</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;Real&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)</highlight></codeline>
<codeline lineno="530"><highlight class="normal">{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a93975121c42d886897d842d99a24e407" kindref="member">util::DoAllReduceReal</ref>(tmp.data(),MPI_MAX,cnt);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a552f084c17efd580d0962eb68e6b43ee" kindref="member">ParallelDescriptor::ReduceRealMax</ref><sp/>(Real&amp;<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="541"><highlight class="normal">{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a03b14af1457069781c4b12a86110b5ae" kindref="member">util::DoReduceReal</ref>(r,MPI_MAX,cpu);</highlight></codeline>
<codeline lineno="543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a552f084c17efd580d0962eb68e6b43ee" kindref="member">ParallelDescriptor::ReduceRealMax</ref><sp/>(Real*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="547"><highlight class="normal">{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a03b14af1457069781c4b12a86110b5ae" kindref="member">util::DoReduceReal</ref>(r,MPI_MAX,cnt,cpu);</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a552f084c17efd580d0962eb68e6b43ee" kindref="member">ParallelDescriptor::ReduceRealMax</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;Real&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="553"><highlight class="normal">{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a03b14af1457069781c4b12a86110b5ae" kindref="member">util::DoReduceReal</ref>(tmp.data(),MPI_MAX,cnt,cpu);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a46fe886b901e6fe6a49295e8bd6b2ace" kindref="member">ParallelDescriptor::ReduceRealMin</ref><sp/>(Real&amp;<sp/>r)</highlight></codeline>
<codeline lineno="564"><highlight class="normal">{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a93975121c42d886897d842d99a24e407" kindref="member">util::DoAllReduceReal</ref>(r,MPI_MIN);</highlight></codeline>
<codeline lineno="566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a46fe886b901e6fe6a49295e8bd6b2ace" kindref="member">ParallelDescriptor::ReduceRealMin</ref><sp/>(Real*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt)</highlight></codeline>
<codeline lineno="570"><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a93975121c42d886897d842d99a24e407" kindref="member">util::DoAllReduceReal</ref>(r,MPI_MIN,cnt);</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a46fe886b901e6fe6a49295e8bd6b2ace" kindref="member">ParallelDescriptor::ReduceRealMin</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;Real&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)</highlight></codeline>
<codeline lineno="576"><highlight class="normal">{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a93975121c42d886897d842d99a24e407" kindref="member">util::DoAllReduceReal</ref>(tmp.data(),MPI_MIN,cnt);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a46fe886b901e6fe6a49295e8bd6b2ace" kindref="member">ParallelDescriptor::ReduceRealMin</ref><sp/>(Real&amp;<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="587"><highlight class="normal">{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a03b14af1457069781c4b12a86110b5ae" kindref="member">util::DoReduceReal</ref>(r,MPI_MIN,cpu);</highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a46fe886b901e6fe6a49295e8bd6b2ace" kindref="member">ParallelDescriptor::ReduceRealMin</ref><sp/>(Real*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a03b14af1457069781c4b12a86110b5ae" kindref="member">util::DoReduceReal</ref>(r,MPI_MIN,cnt,cpu);</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a46fe886b901e6fe6a49295e8bd6b2ace" kindref="member">ParallelDescriptor::ReduceRealMin</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;Real&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="599"><highlight class="normal">{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a03b14af1457069781c4b12a86110b5ae" kindref="member">util::DoReduceReal</ref>(tmp.data(),MPI_MIN,cnt,cpu);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a132abb9498b1ed2f491583c1f7719afb" kindref="member">ParallelDescriptor::ReduceIntSum</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>r)</highlight></codeline>
<codeline lineno="610"><highlight class="normal">{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a95945235bcf2491632cd0abf1479cac1" kindref="member">util::DoAllReduceInt</ref>(r,MPI_SUM);</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a132abb9498b1ed2f491583c1f7719afb" kindref="member">ParallelDescriptor::ReduceIntSum</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt)</highlight></codeline>
<codeline lineno="616"><highlight class="normal">{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a95945235bcf2491632cd0abf1479cac1" kindref="member">util::DoAllReduceInt</ref>(r,MPI_SUM,cnt);</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a132abb9498b1ed2f491583c1f7719afb" kindref="member">ParallelDescriptor::ReduceIntSum</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;int&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)</highlight></codeline>
<codeline lineno="622"><highlight class="normal">{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a95945235bcf2491632cd0abf1479cac1" kindref="member">util::DoAllReduceInt</ref>(tmp.data(),MPI_SUM,cnt);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a132abb9498b1ed2f491583c1f7719afb" kindref="member">ParallelDescriptor::ReduceIntSum</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1aff58a099fdb4fe16e0250af0ee0d8047" kindref="member">util::DoReduceInt</ref>(r,MPI_SUM,cpu);</highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a132abb9498b1ed2f491583c1f7719afb" kindref="member">ParallelDescriptor::ReduceIntSum</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="639"><highlight class="normal">{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1aff58a099fdb4fe16e0250af0ee0d8047" kindref="member">util::DoReduceInt</ref>(r,MPI_SUM,cnt,cpu);</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a132abb9498b1ed2f491583c1f7719afb" kindref="member">ParallelDescriptor::ReduceIntSum</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;int&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="645"><highlight class="normal">{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1aff58a099fdb4fe16e0250af0ee0d8047" kindref="member">util::DoReduceInt</ref>(tmp.data(),MPI_SUM,cnt,cpu);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" kindref="member">ParallelDescriptor::ReduceIntMax</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>r)</highlight></codeline>
<codeline lineno="656"><highlight class="normal">{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a95945235bcf2491632cd0abf1479cac1" kindref="member">util::DoAllReduceInt</ref>(r,MPI_MAX);</highlight></codeline>
<codeline lineno="658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" kindref="member">ParallelDescriptor::ReduceIntMax</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt)</highlight></codeline>
<codeline lineno="662"><highlight class="normal">{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a95945235bcf2491632cd0abf1479cac1" kindref="member">util::DoAllReduceInt</ref>(r,MPI_MAX,cnt);</highlight></codeline>
<codeline lineno="664"><highlight class="normal">}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" kindref="member">ParallelDescriptor::ReduceIntMax</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;int&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)</highlight></codeline>
<codeline lineno="668"><highlight class="normal">{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a95945235bcf2491632cd0abf1479cac1" kindref="member">util::DoAllReduceInt</ref>(tmp.data(),MPI_MAX,cnt);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" kindref="member">ParallelDescriptor::ReduceIntMax</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="679"><highlight class="normal">{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1aff58a099fdb4fe16e0250af0ee0d8047" kindref="member">util::DoReduceInt</ref>(r,MPI_MAX,cpu);</highlight></codeline>
<codeline lineno="681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" kindref="member">ParallelDescriptor::ReduceIntMax</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="685"><highlight class="normal">{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1aff58a099fdb4fe16e0250af0ee0d8047" kindref="member">util::DoReduceInt</ref>(r,MPI_MAX,cnt,cpu);</highlight></codeline>
<codeline lineno="687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" kindref="member">ParallelDescriptor::ReduceIntMax</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;int&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="691"><highlight class="normal">{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1aff58a099fdb4fe16e0250af0ee0d8047" kindref="member">util::DoReduceInt</ref>(tmp.data(),MPI_MAX,cnt,cpu);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1aff32fd8c6e4cd30f666fab624fc4ee86" kindref="member">ParallelDescriptor::ReduceIntMin</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>r)</highlight></codeline>
<codeline lineno="702"><highlight class="normal">{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a95945235bcf2491632cd0abf1479cac1" kindref="member">util::DoAllReduceInt</ref>(r,MPI_MIN);</highlight></codeline>
<codeline lineno="704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1aff32fd8c6e4cd30f666fab624fc4ee86" kindref="member">ParallelDescriptor::ReduceIntMin</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt)</highlight></codeline>
<codeline lineno="708"><highlight class="normal">{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a95945235bcf2491632cd0abf1479cac1" kindref="member">util::DoAllReduceInt</ref>(r,MPI_MIN,cnt);</highlight></codeline>
<codeline lineno="710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1aff32fd8c6e4cd30f666fab624fc4ee86" kindref="member">ParallelDescriptor::ReduceIntMin</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;int&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)</highlight></codeline>
<codeline lineno="714"><highlight class="normal">{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a95945235bcf2491632cd0abf1479cac1" kindref="member">util::DoAllReduceInt</ref>(tmp.data(),MPI_MIN,cnt);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1aff32fd8c6e4cd30f666fab624fc4ee86" kindref="member">ParallelDescriptor::ReduceIntMin</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="725"><highlight class="normal">{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1aff58a099fdb4fe16e0250af0ee0d8047" kindref="member">util::DoReduceInt</ref>(r,MPI_MIN,cpu);</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1aff32fd8c6e4cd30f666fab624fc4ee86" kindref="member">ParallelDescriptor::ReduceIntMin</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="731"><highlight class="normal">{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1aff58a099fdb4fe16e0250af0ee0d8047" kindref="member">util::DoReduceInt</ref>(r,MPI_MIN,cnt,cpu);</highlight></codeline>
<codeline lineno="733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1aff32fd8c6e4cd30f666fab624fc4ee86" kindref="member">ParallelDescriptor::ReduceIntMin</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;int&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="737"><highlight class="normal">{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1aff58a099fdb4fe16e0250af0ee0d8047" kindref="member">util::DoReduceInt</ref>(tmp.data(),MPI_MIN,cnt,cpu);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1ae2638b2cea26b2c9b4d9d1062b3d1fa2" kindref="member">ParallelDescriptor::ReduceLongSum</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;<sp/>r)</highlight></codeline>
<codeline lineno="748"><highlight class="normal">{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a0fac6e7c46c69178b3567d486264fcf2" kindref="member">util::DoAllReduceLong</ref>(r,MPI_SUM);</highlight></codeline>
<codeline lineno="750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1ae2638b2cea26b2c9b4d9d1062b3d1fa2" kindref="member">ParallelDescriptor::ReduceLongSum</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt)</highlight></codeline>
<codeline lineno="754"><highlight class="normal">{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a0fac6e7c46c69178b3567d486264fcf2" kindref="member">util::DoAllReduceLong</ref>(r,MPI_SUM,cnt);</highlight></codeline>
<codeline lineno="756"><highlight class="normal">}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1ae2638b2cea26b2c9b4d9d1062b3d1fa2" kindref="member">ParallelDescriptor::ReduceLongSum</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;long&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)</highlight></codeline>
<codeline lineno="760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a0fac6e7c46c69178b3567d486264fcf2" kindref="member">util::DoAllReduceLong</ref>(tmp.data(),MPI_SUM,cnt);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1ae2638b2cea26b2c9b4d9d1062b3d1fa2" kindref="member">ParallelDescriptor::ReduceLongSum</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="771"><highlight class="normal">{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a87eb344865b19038be684e0f06877771" kindref="member">util::DoReduceLong</ref>(r,MPI_SUM,cpu);</highlight></codeline>
<codeline lineno="773"><highlight class="normal">}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1ae2638b2cea26b2c9b4d9d1062b3d1fa2" kindref="member">ParallelDescriptor::ReduceLongSum</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="777"><highlight class="normal">{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a87eb344865b19038be684e0f06877771" kindref="member">util::DoReduceLong</ref>(r,MPI_SUM,cnt,cpu);</highlight></codeline>
<codeline lineno="779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1ae2638b2cea26b2c9b4d9d1062b3d1fa2" kindref="member">ParallelDescriptor::ReduceLongSum</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;long&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="783"><highlight class="normal">{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a87eb344865b19038be684e0f06877771" kindref="member">util::DoReduceLong</ref>(tmp.data(),MPI_SUM,cnt,cpu);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a16a7f03bfb684be8d5ce15b1a526ecda" kindref="member">ParallelDescriptor::ReduceLongMax</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;<sp/>r)</highlight></codeline>
<codeline lineno="794"><highlight class="normal">{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a0fac6e7c46c69178b3567d486264fcf2" kindref="member">util::DoAllReduceLong</ref>(r,MPI_MAX);</highlight></codeline>
<codeline lineno="796"><highlight class="normal">}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a16a7f03bfb684be8d5ce15b1a526ecda" kindref="member">ParallelDescriptor::ReduceLongMax</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt)</highlight></codeline>
<codeline lineno="800"><highlight class="normal">{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a0fac6e7c46c69178b3567d486264fcf2" kindref="member">util::DoAllReduceLong</ref>(r,MPI_MAX,cnt);</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a16a7f03bfb684be8d5ce15b1a526ecda" kindref="member">ParallelDescriptor::ReduceLongMax</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;long&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)</highlight></codeline>
<codeline lineno="806"><highlight class="normal">{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a0fac6e7c46c69178b3567d486264fcf2" kindref="member">util::DoAllReduceLong</ref>(tmp.data(),MPI_MAX,cnt);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a16a7f03bfb684be8d5ce15b1a526ecda" kindref="member">ParallelDescriptor::ReduceLongMax</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="817"><highlight class="normal">{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a87eb344865b19038be684e0f06877771" kindref="member">util::DoReduceLong</ref>(r,MPI_MAX,cpu);</highlight></codeline>
<codeline lineno="819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a16a7f03bfb684be8d5ce15b1a526ecda" kindref="member">ParallelDescriptor::ReduceLongMax</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="823"><highlight class="normal">{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a87eb344865b19038be684e0f06877771" kindref="member">util::DoReduceLong</ref>(r,MPI_MAX,cnt,cpu);</highlight></codeline>
<codeline lineno="825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a16a7f03bfb684be8d5ce15b1a526ecda" kindref="member">ParallelDescriptor::ReduceLongMax</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;long&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="829"><highlight class="normal">{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a87eb344865b19038be684e0f06877771" kindref="member">util::DoReduceLong</ref>(tmp.data(),MPI_MAX,cnt,cpu);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal">}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a4bd0fa25fecbf8707e334186bbdfe8b0" kindref="member">ParallelDescriptor::ReduceLongMin</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;<sp/>r)</highlight></codeline>
<codeline lineno="840"><highlight class="normal">{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a0fac6e7c46c69178b3567d486264fcf2" kindref="member">util::DoAllReduceLong</ref>(r,MPI_MIN);</highlight></codeline>
<codeline lineno="842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a4bd0fa25fecbf8707e334186bbdfe8b0" kindref="member">ParallelDescriptor::ReduceLongMin</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt)</highlight></codeline>
<codeline lineno="846"><highlight class="normal">{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a0fac6e7c46c69178b3567d486264fcf2" kindref="member">util::DoAllReduceLong</ref>(r,MPI_MIN,cnt);</highlight></codeline>
<codeline lineno="848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a4bd0fa25fecbf8707e334186bbdfe8b0" kindref="member">ParallelDescriptor::ReduceLongMin</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;long&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)</highlight></codeline>
<codeline lineno="852"><highlight class="normal">{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a0fac6e7c46c69178b3567d486264fcf2" kindref="member">util::DoAllReduceLong</ref>(tmp.data(),MPI_MIN,cnt);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a4bd0fa25fecbf8707e334186bbdfe8b0" kindref="member">ParallelDescriptor::ReduceLongMin</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="863"><highlight class="normal">{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a87eb344865b19038be684e0f06877771" kindref="member">util::DoReduceLong</ref>(r,MPI_MIN,cpu);</highlight></codeline>
<codeline lineno="865"><highlight class="normal">}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a4bd0fa25fecbf8707e334186bbdfe8b0" kindref="member">ParallelDescriptor::ReduceLongMin</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="869"><highlight class="normal">{</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a87eb344865b19038be684e0f06877771" kindref="member">util::DoReduceLong</ref>(r,MPI_MIN,cnt,cpu);</highlight></codeline>
<codeline lineno="871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a4bd0fa25fecbf8707e334186bbdfe8b0" kindref="member">ParallelDescriptor::ReduceLongMin</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;long&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="875"><highlight class="normal">{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a87eb344865b19038be684e0f06877771" kindref="member">util::DoReduceLong</ref>(tmp.data(),MPI_MIN,cnt,cpu);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="882"><highlight class="normal">}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac049b371d62448b6c841a432f63100c0" kindref="member">ParallelDescriptor::ReduceLongAnd</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;<sp/>r)</highlight></codeline>
<codeline lineno="886"><highlight class="normal">{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a0fac6e7c46c69178b3567d486264fcf2" kindref="member">util::DoAllReduceLong</ref>(r,MPI_LAND);</highlight></codeline>
<codeline lineno="888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac049b371d62448b6c841a432f63100c0" kindref="member">ParallelDescriptor::ReduceLongAnd</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt)</highlight></codeline>
<codeline lineno="892"><highlight class="normal">{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a0fac6e7c46c69178b3567d486264fcf2" kindref="member">util::DoAllReduceLong</ref>(r,MPI_LAND,cnt);</highlight></codeline>
<codeline lineno="894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac049b371d62448b6c841a432f63100c0" kindref="member">ParallelDescriptor::ReduceLongAnd</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;long&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)</highlight></codeline>
<codeline lineno="898"><highlight class="normal">{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a0fac6e7c46c69178b3567d486264fcf2" kindref="member">util::DoAllReduceLong</ref>(tmp.data(),MPI_LAND,cnt);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal">}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac049b371d62448b6c841a432f63100c0" kindref="member">ParallelDescriptor::ReduceLongAnd</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="909"><highlight class="normal">{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a87eb344865b19038be684e0f06877771" kindref="member">util::DoReduceLong</ref>(r,MPI_LAND,cpu);</highlight></codeline>
<codeline lineno="911"><highlight class="normal">}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac049b371d62448b6c841a432f63100c0" kindref="member">ParallelDescriptor::ReduceLongAnd</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="915"><highlight class="normal">{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a87eb344865b19038be684e0f06877771" kindref="member">util::DoReduceLong</ref>(r,MPI_LAND,cnt,cpu);</highlight></codeline>
<codeline lineno="917"><highlight class="normal">}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac049b371d62448b6c841a432f63100c0" kindref="member">ParallelDescriptor::ReduceLongAnd</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;long&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)</highlight></codeline>
<codeline lineno="921"><highlight class="normal">{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cnt<sp/>=<sp/>rvar.size();</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>tmp{<ref refid="namespaceamrex_1a43103621a410a27f2e8b9607f4ae6f34" kindref="member">std::begin</ref>(rvar),<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::end</ref>(rvar)};</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a87eb344865b19038be684e0f06877771" kindref="member">util::DoReduceLong</ref>(tmp.data(),MPI_LAND,cnt,cpu);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rvar[i].get()<sp/>=<sp/>tmp[i];</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal">}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a93975121c42d886897d842d99a24e407" kindref="member">ParallelDescriptor::util::DoAllReduceReal</ref><sp/>(Real&amp;<sp/><sp/>r,</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op)</highlight></codeline>
<codeline lineno="933"><highlight class="normal">{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_LAZY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Lazy_1a0a2dd2d6e19976b8eaebb9d81a65718a" kindref="member">Lazy::EvalReduction</ref>();</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::util::DoAllReduceReal()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a6a2a794768fcb8da0ad76d1b9034f5f0" kindref="member">BL_COMM_PROFILE_ALLREDUCE</ref>(BLProfiler::AllReduceR,<sp/>BLProfiler::BeforeCall(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>recv;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BL_USE_MPI3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a6a675ddfa6ba286e367461bdca0de992" kindref="member">doTeamReduce</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>recv_team;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(&amp;r,<sp/>&amp;recv_team,<sp/>1,<sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap" kindref="compound">Mpi_typemap&lt;Real&gt;::type</ref>(),<sp/>op,</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_team_comm())<sp/>);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a2d56d5861b4cca0c635bf8e1cbe5f750" kindref="member">isTeamLead</ref>())<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Allreduce(&amp;recv_team,<sp/>&amp;recv,<sp/>1,<sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap" kindref="compound">Mpi_typemap&lt;Real&gt;::type</ref>(),<sp/>op,</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_lead_comm())<sp/>);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Bcast(&amp;recv,<sp/>1,<sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap" kindref="compound">Mpi_typemap&lt;Real&gt;::type</ref>(),<sp/></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_team_comm())<sp/>);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Allreduce(&amp;r,</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;recv,</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap" kindref="compound">Mpi_typemap&lt;Real&gt;::type</ref>(),</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op,</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">Communicator</ref>())<sp/>);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a6a2a794768fcb8da0ad76d1b9034f5f0" kindref="member">BL_COMM_PROFILE_ALLREDUCE</ref>(BLProfiler::AllReduceR,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Real),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>recv;</highlight></codeline>
<codeline lineno="967"><highlight class="normal">}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a93975121c42d886897d842d99a24e407" kindref="member">ParallelDescriptor::util::DoAllReduceReal</ref><sp/>(Real*<sp/><sp/>r,</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op,</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cnt)</highlight></codeline>
<codeline lineno="973"><highlight class="normal">{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_LAZY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Lazy_1a0a2dd2d6e19976b8eaebb9d81a65718a" kindref="member">Lazy::EvalReduction</ref>();</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::util::DoAllReduceReal()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a6a2a794768fcb8da0ad76d1b9034f5f0" kindref="member">BL_COMM_PROFILE_ALLREDUCE</ref>(BLProfiler::AllReduceR,<sp/>BLProfiler::BeforeCall(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(cnt<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>recv(cnt);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BL_USE_MPI3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a6a675ddfa6ba286e367461bdca0de992" kindref="member">doTeamReduce</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>recv_team(cnt);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(r,<sp/>recv_team.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),<sp/>cnt,<sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">Mpi_typemap&lt;Real&gt;::type</ref>(),<sp/>op,</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1aff6477b41ff7601f22b4eff065a88312" kindref="member">get_team_comm</ref>())<sp/>);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a2d56d5861b4cca0c635bf8e1cbe5f750" kindref="member">isTeamLead</ref>())<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Allreduce(recv_team.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),<sp/>recv.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),<sp/>cnt,<sp/></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">Mpi_typemap&lt;Real&gt;::type</ref>(),<sp/>op,</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1af86a2e75eec11bc86a670af25198fe14" kindref="member">get_lead_comm</ref>())<sp/>);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Bcast(recv.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),<sp/>cnt,<sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">Mpi_typemap&lt;Real&gt;::type</ref>(),<sp/></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1aff6477b41ff7601f22b4eff065a88312" kindref="member">get_team_comm</ref>())<sp/>);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Allreduce(r,</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recv.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt,</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">Mpi_typemap&lt;Real&gt;::type</ref>(),</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op,</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">Communicator</ref>())<sp/>);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a6a2a794768fcb8da0ad76d1b9034f5f0" kindref="member">BL_COMM_PROFILE_ALLREDUCE</ref>(BLProfiler::AllReduceR,<sp/>cnt<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Real),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>i++)</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[i]<sp/>=<sp/>recv[i];</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a03b14af1457069781c4b12a86110b5ae" kindref="member">ParallelDescriptor::util::DoReduceReal</ref><sp/>(Real&amp;<sp/><sp/>r,</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op,</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cpu)</highlight></codeline>
<codeline lineno="1017"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_LAZY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Lazy_1a0a2dd2d6e19976b8eaebb9d81a65718a" kindref="member">Lazy::EvalReduction</ref>();</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::util::DoReduceReal()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a2e4a055a0c49366d95c9397ae1909a06" kindref="member">BL_COMM_PROFILE_REDUCE</ref>(BLProfiler::ReduceR,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Real),<sp/>cpu);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>recv;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BL_USE_MPI3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a6a675ddfa6ba286e367461bdca0de992" kindref="member">doTeamReduce</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/>recv_team;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(&amp;r,<sp/>&amp;recv_team,<sp/>1,<sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap" kindref="compound">Mpi_typemap&lt;Real&gt;::type</ref>(),<sp/>op,</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_team_comm())<sp/>);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a2d56d5861b4cca0c635bf8e1cbe5f750" kindref="member">isTeamLead</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(&amp;recv_team,<sp/>&amp;recv,<sp/>1,<sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap" kindref="compound">Mpi_typemap&lt;Real&gt;::type</ref>(),<sp/>op,</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0719939ecc6b26843399e2af4d660f14" kindref="member">RankInLeadComm</ref>(cpu),<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_lead_comm())<sp/>);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a0653e205c26f3961aa756292d5f8dbc4" kindref="member">sameTeam</ref>(cpu))<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Bcast(&amp;recv,<sp/>1,<sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap" kindref="compound">Mpi_typemap&lt;Real&gt;::type</ref>(),<sp/></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_team_comm())<sp/>);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(&amp;r,</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;recv,</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap" kindref="compound">Mpi_typemap&lt;Real&gt;::type</ref>(),</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op,</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpu,</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">Communicator</ref>())<sp/>);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a2e4a055a0c49366d95c9397ae1909a06" kindref="member">BL_COMM_PROFILE_REDUCE</ref>(BLProfiler::ReduceR,<sp/>BLProfiler::AfterCall(),<sp/>cpu);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>()<sp/>==<sp/>cpu)</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>recv;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a03b14af1457069781c4b12a86110b5ae" kindref="member">ParallelDescriptor::util::DoReduceReal</ref><sp/>(Real*<sp/><sp/>r,</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op,</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cnt,</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cpu)</highlight></codeline>
<codeline lineno="1064"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_LAZY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Lazy_1a0a2dd2d6e19976b8eaebb9d81a65718a" kindref="member">Lazy::EvalReduction</ref>();</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::util::DoReduceReal()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a2e4a055a0c49366d95c9397ae1909a06" kindref="member">BL_COMM_PROFILE_REDUCE</ref>(BLProfiler::ReduceR,<sp/>cnt<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Real),<sp/>cpu);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(cnt<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>recv(cnt);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BL_USE_MPI3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a6a675ddfa6ba286e367461bdca0de992" kindref="member">doTeamReduce</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Real&gt;</ref><sp/>recv_team(cnt);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(r,<sp/>&amp;recv_team[0],<sp/>cnt,<sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap" kindref="compound">Mpi_typemap&lt;Real&gt;::type</ref>(),<sp/>op,</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_team_comm())<sp/>);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a2d56d5861b4cca0c635bf8e1cbe5f750" kindref="member">isTeamLead</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(&amp;recv_team[0],<sp/>&amp;recv[0],<sp/>cnt,<sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap" kindref="compound">Mpi_typemap&lt;Real&gt;::type</ref>(),<sp/>op,</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0719939ecc6b26843399e2af4d660f14" kindref="member">RankInLeadComm</ref>(cpu),<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_lead_comm())<sp/>);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a0653e205c26f3961aa756292d5f8dbc4" kindref="member">sameTeam</ref>(cpu))<sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Bcast(&amp;recv[0],<sp/>cnt,<sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap" kindref="compound">Mpi_typemap&lt;Real&gt;::type</ref>(),<sp/></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_team_comm())<sp/>);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(r,</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recv.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt,</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">Mpi_typemap&lt;Real&gt;::type</ref>(),</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op,</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpu,</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">Communicator</ref>())<sp/>);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a2e4a055a0c49366d95c9397ae1909a06" kindref="member">BL_COMM_PROFILE_REDUCE</ref>(BLProfiler::ReduceR,<sp/>BLProfiler::AfterCall(),<sp/>cpu);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>()<sp/>==<sp/>cpu)</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>i++)</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[i]<sp/>=<sp/>recv[i];</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a0fac6e7c46c69178b3567d486264fcf2" kindref="member">ParallelDescriptor::util::DoAllReduceLong</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;<sp/><sp/>r,</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op)</highlight></codeline>
<codeline lineno="1114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_LAZY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Lazy_1a0a2dd2d6e19976b8eaebb9d81a65718a" kindref="member">Lazy::EvalReduction</ref>();</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::util::DoAllReduceLong()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a6a2a794768fcb8da0ad76d1b9034f5f0" kindref="member">BL_COMM_PROFILE_ALLREDUCE</ref>(BLProfiler::AllReduceL,<sp/>BLProfiler::BeforeCall(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>recv;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BL_USE_MPI3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a6a675ddfa6ba286e367461bdca0de992" kindref="member">doTeamReduce</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>recv_team;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(&amp;r,<sp/>&amp;recv_team,<sp/>1,<sp/>MPI_LONG,<sp/>op,</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_team_comm())<sp/>);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a2d56d5861b4cca0c635bf8e1cbe5f750" kindref="member">isTeamLead</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Allreduce(&amp;recv_team,<sp/>&amp;recv,<sp/>1,<sp/>MPI_LONG,<sp/>op,</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_lead_comm())<sp/>);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Bcast(&amp;recv,<sp/>1,<sp/>MPI_LONG,<sp/></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_team_comm())<sp/>);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Allreduce(&amp;r,</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;recv,</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_LONG,</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op,</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">Communicator</ref>())<sp/>);</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a6a2a794768fcb8da0ad76d1b9034f5f0" kindref="member">BL_COMM_PROFILE_ALLREDUCE</ref>(BLProfiler::AllReduceL,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>recv;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a0fac6e7c46c69178b3567d486264fcf2" kindref="member">ParallelDescriptor::util::DoAllReduceLong</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/><sp/>r,</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op,</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cnt)</highlight></codeline>
<codeline lineno="1154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_LAZY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Lazy_1a0a2dd2d6e19976b8eaebb9d81a65718a" kindref="member">Lazy::EvalReduction</ref>();</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::util::DoAllReduceLong()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a6a2a794768fcb8da0ad76d1b9034f5f0" kindref="member">BL_COMM_PROFILE_ALLREDUCE</ref>(BLProfiler::AllReduceL,<sp/>BLProfiler::BeforeCall(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(cnt<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>recv(cnt);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BL_USE_MPI3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a6a675ddfa6ba286e367461bdca0de992" kindref="member">doTeamReduce</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>recv_team(cnt);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(r,<sp/>recv_team.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),<sp/>cnt,<sp/>MPI_LONG,<sp/>op,</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1aff6477b41ff7601f22b4eff065a88312" kindref="member">get_team_comm</ref>())<sp/>);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a2d56d5861b4cca0c635bf8e1cbe5f750" kindref="member">isTeamLead</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Allreduce(recv_team.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),<sp/>recv.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),<sp/>cnt,<sp/></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_LONG,<sp/>op,</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1af86a2e75eec11bc86a670af25198fe14" kindref="member">get_lead_comm</ref>())<sp/>);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Bcast(recv.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),<sp/>cnt,<sp/>MPI_LONG,</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1aff6477b41ff7601f22b4eff065a88312" kindref="member">get_team_comm</ref>())<sp/>);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Allreduce(r,</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recv.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt,</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_LONG,</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op,</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">Communicator</ref>())<sp/>);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a6a2a794768fcb8da0ad76d1b9034f5f0" kindref="member">BL_COMM_PROFILE_ALLREDUCE</ref>(BLProfiler::AllReduceL,<sp/>cnt<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>i++)</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[i]<sp/>=<sp/>recv[i];</highlight></codeline>
<codeline lineno="1192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a87eb344865b19038be684e0f06877771" kindref="member">ParallelDescriptor::util::DoReduceLong</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;<sp/><sp/>r,</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op,</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cpu)</highlight></codeline>
<codeline lineno="1198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_LAZY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Lazy_1a0a2dd2d6e19976b8eaebb9d81a65718a" kindref="member">Lazy::EvalReduction</ref>();</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::util::DoReduceLong()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a2e4a055a0c49366d95c9397ae1909a06" kindref="member">BL_COMM_PROFILE_REDUCE</ref>(BLProfiler::ReduceL,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">),<sp/>cpu);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>recv;</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BL_USE_MPI3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a6a675ddfa6ba286e367461bdca0de992" kindref="member">doTeamReduce</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>recv_team;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(&amp;r,<sp/>&amp;recv_team,<sp/>1,<sp/>MPI_LONG,<sp/>op,</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_team_comm())<sp/>);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a2d56d5861b4cca0c635bf8e1cbe5f750" kindref="member">isTeamLead</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(&amp;recv_team,<sp/>&amp;recv,<sp/>1,<sp/>MPI_LONG,<sp/>op,</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0719939ecc6b26843399e2af4d660f14" kindref="member">RankInLeadComm</ref>(cpu),<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_lead_comm())<sp/>);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a0653e205c26f3961aa756292d5f8dbc4" kindref="member">sameTeam</ref>(cpu))<sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Bcast(&amp;recv,<sp/>1,<sp/>MPI_LONG,</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_team_comm())<sp/>);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(&amp;r,</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;recv,</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_LONG,</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op,</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpu,</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">Communicator</ref>()));</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a2e4a055a0c49366d95c9397ae1909a06" kindref="member">BL_COMM_PROFILE_REDUCE</ref>(BLProfiler::ReduceL,<sp/>BLProfiler::AfterCall(),<sp/>cpu);</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>()<sp/>==<sp/>cpu)</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>recv;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a87eb344865b19038be684e0f06877771" kindref="member">ParallelDescriptor::util::DoReduceLong</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*<sp/><sp/>r,</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op,</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cnt,</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cpu)</highlight></codeline>
<codeline lineno="1245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_LAZY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Lazy_1a0a2dd2d6e19976b8eaebb9d81a65718a" kindref="member">Lazy::EvalReduction</ref>();</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::util::DoReduceLong()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a2e4a055a0c49366d95c9397ae1909a06" kindref="member">BL_COMM_PROFILE_REDUCE</ref>(BLProfiler::ReduceL,<sp/>cnt<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">),<sp/>cpu);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(cnt<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>recv(cnt);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BL_USE_MPI3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a6a675ddfa6ba286e367461bdca0de992" kindref="member">doTeamReduce</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>recv_team(cnt);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(r,<sp/>&amp;recv_team[0],<sp/>cnt,<sp/>MPI_LONG,<sp/>op,</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_team_comm())<sp/>);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a2d56d5861b4cca0c635bf8e1cbe5f750" kindref="member">isTeamLead</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(&amp;recv_team[0],<sp/>&amp;recv[0],<sp/>cnt,<sp/>MPI_LONG,<sp/>op,</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0719939ecc6b26843399e2af4d660f14" kindref="member">RankInLeadComm</ref>(cpu),<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_lead_comm())<sp/>);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a0653e205c26f3961aa756292d5f8dbc4" kindref="member">sameTeam</ref>(cpu))<sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Bcast(&amp;recv[0],<sp/>cnt,<sp/>MPI_LONG,<sp/></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_team_comm())<sp/>);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(r,</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recv.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt,</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_LONG,</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op,</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpu,</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">Communicator</ref>()));</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a2e4a055a0c49366d95c9397ae1909a06" kindref="member">BL_COMM_PROFILE_REDUCE</ref>(BLProfiler::ReduceL,<sp/>BLProfiler::AfterCall(),<sp/>cpu);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>()<sp/>==<sp/>cpu)</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>i++)</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[i]<sp/>=<sp/>recv[i];</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a95945235bcf2491632cd0abf1479cac1" kindref="member">ParallelDescriptor::util::DoAllReduceInt</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/><sp/><sp/>r,</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op)</highlight></codeline>
<codeline lineno="1295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_LAZY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Lazy_1a0a2dd2d6e19976b8eaebb9d81a65718a" kindref="member">Lazy::EvalReduction</ref>();</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::util::DoAllReduceInt()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a6a2a794768fcb8da0ad76d1b9034f5f0" kindref="member">BL_COMM_PROFILE_ALLREDUCE</ref>(BLProfiler::AllReduceI,<sp/>BLProfiler::BeforeCall(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recv;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BL_USE_MPI3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a6a675ddfa6ba286e367461bdca0de992" kindref="member">doTeamReduce</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recv_team;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(&amp;r,<sp/>&amp;recv_team,<sp/>1,<sp/>MPI_INT,<sp/>op,</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_team_comm())<sp/>);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a2d56d5861b4cca0c635bf8e1cbe5f750" kindref="member">isTeamLead</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Allreduce(&amp;recv_team,<sp/>&amp;recv,<sp/>1,<sp/>MPI_INT,<sp/>op,</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_lead_comm())<sp/>);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Bcast(&amp;recv,<sp/>1,<sp/>MPI_INT,<sp/></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_team_comm())<sp/>);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Allreduce(&amp;r,</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;recv,</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_INT,</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op,</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">Communicator</ref>()));</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a6a2a794768fcb8da0ad76d1b9034f5f0" kindref="member">BL_COMM_PROFILE_ALLREDUCE</ref>(BLProfiler::AllReduceI,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>recv;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1a95945235bcf2491632cd0abf1479cac1" kindref="member">ParallelDescriptor::util::DoAllReduceInt</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/>r,</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op,</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cnt)</highlight></codeline>
<codeline lineno="1335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_LAZY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Lazy_1a0a2dd2d6e19976b8eaebb9d81a65718a" kindref="member">Lazy::EvalReduction</ref>();</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::util::DoAllReduceInt()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a6a2a794768fcb8da0ad76d1b9034f5f0" kindref="member">BL_COMM_PROFILE_ALLREDUCE</ref>(BLProfiler::AllReduceI,<sp/>BLProfiler::BeforeCall(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(cnt<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>recv(cnt);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BL_USE_MPI3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a6a675ddfa6ba286e367461bdca0de992" kindref="member">doTeamReduce</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>recv_team(cnt);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(r,<sp/>recv_team.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),<sp/>cnt,<sp/>MPI_INT,<sp/>op,</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1aff6477b41ff7601f22b4eff065a88312" kindref="member">get_team_comm</ref>())<sp/>);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a2d56d5861b4cca0c635bf8e1cbe5f750" kindref="member">isTeamLead</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Allreduce(recv_team.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),<sp/>recv.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),<sp/>cnt,<sp/></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_INT,<sp/>op,</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1af86a2e75eec11bc86a670af25198fe14" kindref="member">get_lead_comm</ref>())<sp/>);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Bcast(recv.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),<sp/>cnt,<sp/>MPI_INT,</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1aff6477b41ff7601f22b4eff065a88312" kindref="member">get_team_comm</ref>())<sp/>);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Allreduce(r,</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recv.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt,</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_INT,</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op,</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">Communicator</ref>()));</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a6a2a794768fcb8da0ad76d1b9034f5f0" kindref="member">BL_COMM_PROFILE_ALLREDUCE</ref>(BLProfiler::AllReduceI,<sp/>cnt<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>i++)</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[i]<sp/>=<sp/>recv[i];</highlight></codeline>
<codeline lineno="1373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1aff58a099fdb4fe16e0250af0ee0d8047" kindref="member">ParallelDescriptor::util::DoReduceInt</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/><sp/><sp/>r,</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op,</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cpu)</highlight></codeline>
<codeline lineno="1379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_LAZY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Lazy_1a0a2dd2d6e19976b8eaebb9d81a65718a" kindref="member">Lazy::EvalReduction</ref>();</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::util::DoReduceInt()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a2e4a055a0c49366d95c9397ae1909a06" kindref="member">BL_COMM_PROFILE_REDUCE</ref>(BLProfiler::ReduceI,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>cpu);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recv;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BL_USE_MPI3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a6a675ddfa6ba286e367461bdca0de992" kindref="member">doTeamReduce</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recv_team;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(&amp;r,<sp/>&amp;recv_team,<sp/>1,<sp/>MPI_INT,<sp/>op,</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_team_comm())<sp/>);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a2d56d5861b4cca0c635bf8e1cbe5f750" kindref="member">isTeamLead</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(&amp;recv_team,<sp/>&amp;recv,<sp/>1,<sp/>MPI_INT,<sp/>op,</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0719939ecc6b26843399e2af4d660f14" kindref="member">RankInLeadComm</ref>(cpu),<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_lead_comm())<sp/>);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a0653e205c26f3961aa756292d5f8dbc4" kindref="member">sameTeam</ref>(cpu))<sp/>{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Bcast(&amp;recv,<sp/>1,<sp/>MPI_INT,</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_team_comm())<sp/>);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(&amp;r,</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;recv,</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_INT,</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op,</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpu,</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">Communicator</ref>()));</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a2e4a055a0c49366d95c9397ae1909a06" kindref="member">BL_COMM_PROFILE_REDUCE</ref>(BLProfiler::ReduceI,<sp/>BLProfiler::AfterCall(),<sp/>cpu);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>()<sp/>==<sp/>cpu)</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>recv;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1_1util_1aff58a099fdb4fe16e0250af0ee0d8047" kindref="member">ParallelDescriptor::util::DoReduceInt</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/>r,</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a1e6360539c256e76b432da612d0ec399" kindref="member">MPI_Op</ref><sp/>op,</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cnt,</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cpu)</highlight></codeline>
<codeline lineno="1426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_LAZY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Lazy_1a0a2dd2d6e19976b8eaebb9d81a65718a" kindref="member">Lazy::EvalReduction</ref>();</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::util::DoReduceInt()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a2e4a055a0c49366d95c9397ae1909a06" kindref="member">BL_COMM_PROFILE_REDUCE</ref>(BLProfiler::ReduceI,<sp/>cnt<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>cpu);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(cnt<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref><sp/>recv(cnt);</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BL_USE_MPI3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a6a675ddfa6ba286e367461bdca0de992" kindref="member">doTeamReduce</ref>()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;long&gt;</ref><sp/>recv_team(cnt);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(r,<sp/>&amp;recv_team[0],<sp/>cnt,<sp/>MPI_LONG,<sp/>op,</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_team_comm())<sp/>);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a2d56d5861b4cca0c635bf8e1cbe5f750" kindref="member">isTeamLead</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(&amp;recv_team[0],<sp/>&amp;recv[0],<sp/>cnt,<sp/>MPI_LONG,<sp/>op,</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0719939ecc6b26843399e2af4d660f14" kindref="member">RankInLeadComm</ref>(cpu),<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_lead_comm())<sp/>);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a0653e205c26f3961aa756292d5f8dbc4" kindref="member">sameTeam</ref>(cpu))<sp/>{</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Bcast(&amp;recv[0],<sp/>cnt,<sp/>MPI_LONG,<sp/></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a2814a4f0e10eb279d7457e6a2935fefa" kindref="member">MyTeam</ref>().get_team_comm())<sp/>);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Reduce(r,</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recv.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cnt,</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_INT,</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op,</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpu,</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">Communicator</ref>()));</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a2e4a055a0c49366d95c9397ae1909a06" kindref="member">BL_COMM_PROFILE_REDUCE</ref>(BLProfiler::ReduceI,<sp/>BLProfiler::AfterCall(),<sp/>cpu);</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>()<sp/>==<sp/>cpu)</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>cnt;<sp/>i++)</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[i]<sp/>=<sp/>recv[i];</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a5e16712b9f4c3f14537cd0b561758aa5" kindref="member">ParallelDescriptor::Gather</ref><sp/>(Real*<sp/>sendbuf,</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>nsend,</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real*<sp/>recvbuf,</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>root)</highlight></codeline>
<codeline lineno="1478"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::Gather()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a5e661a1af9130dd8449e7f730864271c" kindref="member">BL_COMM_PROFILE</ref>(BLProfiler::GatherRiRi,<sp/>BLProfiler::BeforeCall(),<sp/>root,<sp/>BLProfiler::NoTag());</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(root<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(nsend<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(!(sendbuf<sp/>==<sp/>0));</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(!(recvbuf<sp/>==<sp/>0));</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref><sp/>typ<sp/>=<sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">Mpi_typemap&lt;Real&gt;::type</ref>();</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Gather(sendbuf,</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsend,</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typ,</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recvbuf,</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nsend,</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typ,</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root,</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">Communicator</ref>()));</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a5e661a1af9130dd8449e7f730864271c" kindref="member">BL_COMM_PROFILE</ref>(BLProfiler::GatherRiRi,<sp/>nsend<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Real),<sp/>root,<sp/>BLProfiler::NoTag());</highlight></codeline>
<codeline lineno="1498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">ParallelDescriptor::Mpi_typemap&lt;char&gt;::type</ref><sp/>()</highlight></codeline>
<codeline lineno="1503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>MPI_CHAR;</highlight></codeline>
<codeline lineno="1505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">ParallelDescriptor::Mpi_typemap&lt;short&gt;::type</ref><sp/>()</highlight></codeline>
<codeline lineno="1510"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>MPI_SHORT;</highlight></codeline>
<codeline lineno="1512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">ParallelDescriptor::Mpi_typemap&lt;int&gt;::type</ref><sp/>()</highlight></codeline>
<codeline lineno="1517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>MPI_INT;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">ParallelDescriptor::Mpi_typemap&lt;long&gt;::type</ref><sp/>()</highlight></codeline>
<codeline lineno="1524"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>MPI_LONG;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">ParallelDescriptor::Mpi_typemap&lt;unsigned char&gt;::type</ref><sp/>()</highlight></codeline>
<codeline lineno="1531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>MPI_UNSIGNED_CHAR;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">ParallelDescriptor::Mpi_typemap&lt;unsigned short&gt;::type</ref><sp/>()</highlight></codeline>
<codeline lineno="1538"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>MPI_UNSIGNED_SHORT;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">ParallelDescriptor::Mpi_typemap&lt;unsigned int&gt;::type</ref><sp/>()</highlight></codeline>
<codeline lineno="1545"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>MPI_UNSIGNED;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">ParallelDescriptor::Mpi_typemap&lt;unsigned long&gt;::type</ref><sp/>()</highlight></codeline>
<codeline lineno="1552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>MPI_UNSIGNED_LONG;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">ParallelDescriptor::Mpi_typemap&lt;float&gt;::type</ref><sp/>()</highlight></codeline>
<codeline lineno="1559"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>MPI_FLOAT;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">ParallelDescriptor::Mpi_typemap&lt;double&gt;::type</ref><sp/>()</highlight></codeline>
<codeline lineno="1566"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>MPI_DOUBLE;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a4a3a4d36732e6b65907ea76570142b7e" kindref="member">ParallelDescriptor::Wait</ref><sp/>(<ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref>&amp;<sp/>req,</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref>&amp;<sp/>status)</highlight></codeline>
<codeline lineno="1573"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::Wait()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a58db05b45ded6da301ebfe0ec5327201" kindref="member">BL_COMM_PROFILE_WAIT</ref>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a4a3a4d36732e6b65907ea76570142b7e" kindref="member">BLProfiler::Wait</ref>,<sp/>req,<sp/>status,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Wait(&amp;req,<sp/>&amp;status)<sp/>);</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a58db05b45ded6da301ebfe0ec5327201" kindref="member">BL_COMM_PROFILE_WAIT</ref>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a4a3a4d36732e6b65907ea76570142b7e" kindref="member">BLProfiler::Wait</ref>,<sp/>req,<sp/>status,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1ab581b8dba6006dbb3457d925c4b0f244" kindref="member">ParallelDescriptor::Waitall</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;MPI_Request&gt;</ref>&amp;<sp/>reqs,</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;MPI_Status&gt;</ref>&amp;<sp/>status)</highlight></codeline>
<codeline lineno="1583"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(status.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>()<sp/>&gt;=<sp/>reqs.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::Waitall()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a5b40be1d21cdda4842b6771b7eee1e23" kindref="member">BL_COMM_PROFILE_WAITSOME</ref>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ab581b8dba6006dbb3457d925c4b0f244" kindref="member">BLProfiler::Waitall</ref>,<sp/>reqs,<sp/>reqs.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>(),<sp/>status,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Waitall(reqs.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>(),</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reqs.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>())<sp/>);</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a5b40be1d21cdda4842b6771b7eee1e23" kindref="member">BL_COMM_PROFILE_WAITSOME</ref>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ab581b8dba6006dbb3457d925c4b0f244" kindref="member">BLProfiler::Waitall</ref>,<sp/>reqs,<sp/>status.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>(),<sp/>status,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a09446a4d2b5bb7632b4c9316c5dd213c" kindref="member">ParallelDescriptor::Waitany</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;MPI_Request&gt;</ref>&amp;<sp/>reqs,</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;index,</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref>&amp;<sp/>status)</highlight></codeline>
<codeline lineno="1598"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::Waitany()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a58db05b45ded6da301ebfe0ec5327201" kindref="member">BL_COMM_PROFILE_WAIT</ref>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a09446a4d2b5bb7632b4c9316c5dd213c" kindref="member">BLProfiler::Waitany</ref>,<sp/>reqs[0],<sp/>status,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Waitany(reqs.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>(),</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reqs.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;index,</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;status)<sp/>);</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a58db05b45ded6da301ebfe0ec5327201" kindref="member">BL_COMM_PROFILE_WAIT</ref>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a09446a4d2b5bb7632b4c9316c5dd213c" kindref="member">BLProfiler::Waitany</ref>,<sp/>reqs[index],<sp/>status,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a3a66ca3d4d64098f62c7aa9c92dcffbb" kindref="member">ParallelDescriptor::Waitsome</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;MPI_Request&gt;</ref>&amp;<sp/>reqs,</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>completed,</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indx,</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;MPI_Status&gt;</ref>&amp;<sp/><sp/>status)</highlight></codeline>
<codeline lineno="1613"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(status.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>()<sp/>&gt;=<sp/>reqs.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(indx.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>()<sp/>&gt;=<sp/>reqs.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::Waitsome()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a5b40be1d21cdda4842b6771b7eee1e23" kindref="member">BL_COMM_PROFILE_WAITSOME</ref>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a3a66ca3d4d64098f62c7aa9c92dcffbb" kindref="member">BLProfiler::Waitsome</ref>,<sp/>reqs,<sp/>reqs.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>(),<sp/>status,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Waitsome(reqs.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>(),</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reqs.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;completed,</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indx.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>()));</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a5b40be1d21cdda4842b6771b7eee1e23" kindref="member">BL_COMM_PROFILE_WAITSOME</ref>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a3a66ca3d4d64098f62c7aa9c92dcffbb" kindref="member">BLProfiler::Waitsome</ref>,<sp/>reqs,<sp/>indx.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>(),<sp/>status,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a20157f27c3bf88a426b0f44bd6bbf135" kindref="member">ParallelDescriptor::Bcast</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref><sp/>datatype,</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>root,</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref><sp/>comm)</highlight></codeline>
<codeline lineno="1633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_LAZY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Comm_compare(comm,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">Communicator</ref>(),<sp/>&amp;r);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>MPI_IDENT)</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1Lazy_1a0a2dd2d6e19976b8eaebb9d81a65718a" kindref="member">Lazy::EvalReduction</ref>();</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1aa38dba23144882885e93ed3ddce946ae" kindref="member">BL_PROFILE_S</ref>(</highlight><highlight class="stringliteral">&quot;ParallelDescriptor::Bcast(viMiM)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a5e661a1af9130dd8449e7f730864271c" kindref="member">BL_COMM_PROFILE</ref>(BLProfiler::BCastTsi,<sp/>BLProfiler::BeforeCall(),<sp/>root,<sp/>BLProfiler::NoTag());</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Bcast(buf,</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count,</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>datatype,</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root,</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comm)<sp/>);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tsize(0);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Type_size(datatype,<sp/>&amp;tsize)<sp/>);</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLProfiler_8H_1a5e661a1af9130dd8449e7f730864271c" kindref="member">BL_COMM_PROFILE</ref>(BLProfiler::BCastTsi,<sp/>count<sp/>*<sp/>tsize,<sp/>root,<sp/>BLProfiler::NoTag());</highlight></codeline>
<codeline lineno="1652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight></codeline>
<codeline lineno="1657"><highlight class="preprocessor">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1adc667e1643fbfe75b057369aed1ca519" kindref="member">ParallelDescriptor::StartParallel</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/>argc,</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">***<sp/>argv,</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref>)</highlight></codeline>
<codeline lineno="1661"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1af87612855c6b73a8cc9f11ed5bd0d3f9" kindref="member">m_comm</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a1582152747831aa49cac881d1bbec9ad" kindref="member">m_MaxTag</ref><sp/>=<sp/>9000;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelContext_1a09cb92f4a123081a62f72e26a4e3c2a3" kindref="member">ParallelContext::push</ref>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1af87612855c6b73a8cc9f11ed5bd0d3f9" kindref="member">m_comm</ref>);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a5e16712b9f4c3f14537cd0b561758aa5" kindref="member">ParallelDescriptor::Gather</ref><sp/>(Real*<sp/>sendbuf,</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>nsend,</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Real*<sp/>recvbuf,</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>root)</highlight></codeline>
<codeline lineno="1672"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(root<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(nsend<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(!(sendbuf<sp/>==<sp/>0));</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__BLassert_8H_1a53ebc8b227de416f458800faa44c619e" kindref="member">BL_ASSERT</ref>(!(recvbuf<sp/>==<sp/>0));</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nsend;<sp/>++i)</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recvbuf[i]<sp/>=<sp/>sendbuf[i];</highlight></codeline>
<codeline lineno="1680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><ref refid="classamrex_1_1ParallelDescriptor_1_1Message_1a94e427eb0ffccce4adcf6a7bc0954c91" kindref="member">ParallelDescriptor::Message::wait</ref><sp/>()</highlight></codeline>
<codeline lineno="1684"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><ref refid="classamrex_1_1ParallelDescriptor_1_1Message_1a42d6517959dbf89018b970cb1c0cf66e" kindref="member">ParallelDescriptor::Message::test</ref><sp/>()</highlight></codeline>
<codeline lineno="1688"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_finished;</highlight></codeline>
<codeline lineno="1690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a990d0a17b08dcd68a0d77a7b35cfebaf" kindref="member">ParallelDescriptor::EndParallel</ref><sp/>()<sp/></highlight></codeline>
<codeline lineno="1693"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelContext_1a6bdab1c75756fa491add5ace4c59550f" kindref="member">ParallelContext::pop</ref>();</highlight></codeline>
<codeline lineno="1695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ae6927a6804e22fedb86c1fe19d6567fc" kindref="member">ParallelDescriptor::Abort</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>backtrace)</highlight></codeline>
<codeline lineno="1698"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(backtrace<sp/>&amp;&amp;<sp/><ref refid="namespaceamrex_1_1system_1a795aa5887c4cdd0f1af9818d45442826" kindref="member">amrex::system::signal_handling</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structamrex_1_1BLBackTrace_1a24b1c852ff2149fe973fad9501e2b5ec" kindref="member">BLBackTrace::handler</ref>(s);</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>std::_Exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a568bbd4bb8f719b9c0ba1950c10678ef" kindref="member">ParallelDescriptor::ErrorString</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a732a4be5017987f2d6edc0fcd2329301" kindref="member">ParallelDescriptor::Barrier</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message)<sp/>{}</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a732a4be5017987f2d6edc0fcd2329301" kindref="member">ParallelDescriptor::Barrier</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref><sp/>&amp;comm,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;message)<sp/>{}</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1affba679357b6ad488b02adc81a353697" kindref="member">ParallelDescriptor::Test</ref><sp/>(<ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref>&amp;,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref>&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a411cea849dee5d54c8335c79f35af182" kindref="member">ParallelDescriptor::IProbe</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref>&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a411cea849dee5d54c8335c79f35af182" kindref="member">ParallelDescriptor::IProbe</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,<sp/><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref>&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ace0982cd881d1f09d60a8e38b5565e6c" kindref="member">ParallelDescriptor::Comm_dup</ref><sp/>(<ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref>,<sp/><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref>&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a552f084c17efd580d0962eb68e6b43ee" kindref="member">ParallelDescriptor::ReduceRealMax</ref><sp/>(Real&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a46fe886b901e6fe6a49295e8bd6b2ace" kindref="member">ParallelDescriptor::ReduceRealMin</ref><sp/>(Real&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33cc0d4af07237333e42214807d82e99" kindref="member">ParallelDescriptor::ReduceRealSum</ref><sp/>(Real&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a552f084c17efd580d0962eb68e6b43ee" kindref="member">ParallelDescriptor::ReduceRealMax</ref><sp/>(Real&amp;,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a46fe886b901e6fe6a49295e8bd6b2ace" kindref="member">ParallelDescriptor::ReduceRealMin</ref><sp/>(Real&amp;,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33cc0d4af07237333e42214807d82e99" kindref="member">ParallelDescriptor::ReduceRealSum</ref><sp/>(Real&amp;,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a552f084c17efd580d0962eb68e6b43ee" kindref="member">ParallelDescriptor::ReduceRealMax</ref><sp/>(Real*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a46fe886b901e6fe6a49295e8bd6b2ace" kindref="member">ParallelDescriptor::ReduceRealMin</ref><sp/>(Real*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33cc0d4af07237333e42214807d82e99" kindref="member">ParallelDescriptor::ReduceRealSum</ref><sp/>(Real*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a552f084c17efd580d0962eb68e6b43ee" kindref="member">ParallelDescriptor::ReduceRealMax</ref><sp/>(Real*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a46fe886b901e6fe6a49295e8bd6b2ace" kindref="member">ParallelDescriptor::ReduceRealMin</ref><sp/>(Real*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33cc0d4af07237333e42214807d82e99" kindref="member">ParallelDescriptor::ReduceRealSum</ref><sp/>(Real*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33cc0d4af07237333e42214807d82e99" kindref="member">ParallelDescriptor::ReduceRealSum</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;Real&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)<sp/>{}</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a552f084c17efd580d0962eb68e6b43ee" kindref="member">ParallelDescriptor::ReduceRealMax</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;Real&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)<sp/>{}</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a46fe886b901e6fe6a49295e8bd6b2ace" kindref="member">ParallelDescriptor::ReduceRealMin</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;Real&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)<sp/>{}</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33cc0d4af07237333e42214807d82e99" kindref="member">ParallelDescriptor::ReduceRealSum</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;Real&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)<sp/>{}</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a552f084c17efd580d0962eb68e6b43ee" kindref="member">ParallelDescriptor::ReduceRealMax</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;Real&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)<sp/>{}</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a46fe886b901e6fe6a49295e8bd6b2ace" kindref="member">ParallelDescriptor::ReduceRealMin</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;Real&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)<sp/>{}</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac049b371d62448b6c841a432f63100c0" kindref="member">ParallelDescriptor::ReduceLongAnd</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ae2638b2cea26b2c9b4d9d1062b3d1fa2" kindref="member">ParallelDescriptor::ReduceLongSum</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a16a7f03bfb684be8d5ce15b1a526ecda" kindref="member">ParallelDescriptor::ReduceLongMax</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a4bd0fa25fecbf8707e334186bbdfe8b0" kindref="member">ParallelDescriptor::ReduceLongMin</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac049b371d62448b6c841a432f63100c0" kindref="member">ParallelDescriptor::ReduceLongAnd</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ae2638b2cea26b2c9b4d9d1062b3d1fa2" kindref="member">ParallelDescriptor::ReduceLongSum</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a16a7f03bfb684be8d5ce15b1a526ecda" kindref="member">ParallelDescriptor::ReduceLongMax</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a4bd0fa25fecbf8707e334186bbdfe8b0" kindref="member">ParallelDescriptor::ReduceLongMin</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">&amp;,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac049b371d62448b6c841a432f63100c0" kindref="member">ParallelDescriptor::ReduceLongAnd</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ae2638b2cea26b2c9b4d9d1062b3d1fa2" kindref="member">ParallelDescriptor::ReduceLongSum</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a16a7f03bfb684be8d5ce15b1a526ecda" kindref="member">ParallelDescriptor::ReduceLongMax</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a4bd0fa25fecbf8707e334186bbdfe8b0" kindref="member">ParallelDescriptor::ReduceLongMin</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac049b371d62448b6c841a432f63100c0" kindref="member">ParallelDescriptor::ReduceLongAnd</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ae2638b2cea26b2c9b4d9d1062b3d1fa2" kindref="member">ParallelDescriptor::ReduceLongSum</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a16a7f03bfb684be8d5ce15b1a526ecda" kindref="member">ParallelDescriptor::ReduceLongMax</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a4bd0fa25fecbf8707e334186bbdfe8b0" kindref="member">ParallelDescriptor::ReduceLongMin</ref><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac049b371d62448b6c841a432f63100c0" kindref="member">ParallelDescriptor::ReduceLongAnd</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;long&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)<sp/>{}</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ae2638b2cea26b2c9b4d9d1062b3d1fa2" kindref="member">ParallelDescriptor::ReduceLongSum</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;long&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)<sp/>{}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a16a7f03bfb684be8d5ce15b1a526ecda" kindref="member">ParallelDescriptor::ReduceLongMax</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;long&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)<sp/>{}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a4bd0fa25fecbf8707e334186bbdfe8b0" kindref="member">ParallelDescriptor::ReduceLongMin</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;long&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)<sp/>{}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac049b371d62448b6c841a432f63100c0" kindref="member">ParallelDescriptor::ReduceLongAnd</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;long&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)<sp/>{}</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ae2638b2cea26b2c9b4d9d1062b3d1fa2" kindref="member">ParallelDescriptor::ReduceLongSum</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;long&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)<sp/>{}</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a16a7f03bfb684be8d5ce15b1a526ecda" kindref="member">ParallelDescriptor::ReduceLongMax</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;long&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)<sp/>{}</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a4bd0fa25fecbf8707e334186bbdfe8b0" kindref="member">ParallelDescriptor::ReduceLongMin</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;long&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)<sp/>{}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a132abb9498b1ed2f491583c1f7719afb" kindref="member">ParallelDescriptor::ReduceIntSum</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" kindref="member">ParallelDescriptor::ReduceIntMax</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aff32fd8c6e4cd30f666fab624fc4ee86" kindref="member">ParallelDescriptor::ReduceIntMin</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a132abb9498b1ed2f491583c1f7719afb" kindref="member">ParallelDescriptor::ReduceIntSum</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" kindref="member">ParallelDescriptor::ReduceIntMax</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aff32fd8c6e4cd30f666fab624fc4ee86" kindref="member">ParallelDescriptor::ReduceIntMin</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a132abb9498b1ed2f491583c1f7719afb" kindref="member">ParallelDescriptor::ReduceIntSum</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" kindref="member">ParallelDescriptor::ReduceIntMax</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aff32fd8c6e4cd30f666fab624fc4ee86" kindref="member">ParallelDescriptor::ReduceIntMin</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a132abb9498b1ed2f491583c1f7719afb" kindref="member">ParallelDescriptor::ReduceIntSum</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" kindref="member">ParallelDescriptor::ReduceIntMax</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aff32fd8c6e4cd30f666fab624fc4ee86" kindref="member">ParallelDescriptor::ReduceIntMin</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a132abb9498b1ed2f491583c1f7719afb" kindref="member">ParallelDescriptor::ReduceIntSum</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;int&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)<sp/>{}</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" kindref="member">ParallelDescriptor::ReduceIntMax</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;int&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)<sp/>{}</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aff32fd8c6e4cd30f666fab624fc4ee86" kindref="member">ParallelDescriptor::ReduceIntMin</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;int&gt;<sp/>&gt;&amp;&amp;<sp/>rvar)<sp/>{}</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a132abb9498b1ed2f491583c1f7719afb" kindref="member">ParallelDescriptor::ReduceIntSum</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;int&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)<sp/>{}</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a709e52679c5ca426b23c887ffe1b4ab9" kindref="member">ParallelDescriptor::ReduceIntMax</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;int&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)<sp/>{}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aff32fd8c6e4cd30f666fab624fc4ee86" kindref="member">ParallelDescriptor::ReduceIntMin</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;std::reference_wrapper&lt;int&gt;<sp/>&gt;&amp;&amp;<sp/>rvar,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cpu)<sp/>{}</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a85f79f28c8cb6cc5762e3edd80c57fc0" kindref="member">ParallelDescriptor::ReduceBoolAnd</ref><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a8e74f51d2321b7e827baae5d86a83824" kindref="member">ParallelDescriptor::ReduceBoolOr</ref><sp/><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a85f79f28c8cb6cc5762e3edd80c57fc0" kindref="member">ParallelDescriptor::ReduceBoolAnd</ref><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a8e74f51d2321b7e827baae5d86a83824" kindref="member">ParallelDescriptor::ReduceBoolOr</ref><sp/><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a20157f27c3bf88a426b0f44bd6bbf135" kindref="member">ParallelDescriptor::Bcast</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">ParallelDescriptor::second</ref><sp/>()<sp/>noexcept</highlight></codeline>
<codeline lineno="1805"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1a6f975f843338c8eada684f0e8e2c0cb7" kindref="member">amrex::second</ref>();</highlight></codeline>
<codeline lineno="1807"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a4a3a4d36732e6b65907ea76570142b7e" kindref="member">ParallelDescriptor::Wait</ref><sp/>(<ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref>&amp;<sp/>req,</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref>&amp;<sp/>status)</highlight></codeline>
<codeline lineno="1812"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1ab581b8dba6006dbb3457d925c4b0f244" kindref="member">ParallelDescriptor::Waitall</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;MPI_Request&gt;</ref>&amp;<sp/>reqs,</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;MPI_Status&gt;</ref>&amp;<sp/>status)</highlight></codeline>
<codeline lineno="1817"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a09446a4d2b5bb7632b4c9316c5dd213c" kindref="member">ParallelDescriptor::Waitany</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;MPI_Request&gt;</ref>&amp;<sp/>reqs,</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;index,</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structMPI__Status" kindref="compound">MPI_Status</ref>&amp;<sp/>status)</highlight></codeline>
<codeline lineno="1823"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a3a66ca3d4d64098f62c7aa9c92dcffbb" kindref="member">ParallelDescriptor::Waitsome</ref><sp/>(<ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;MPI_Request&gt;</ref>&amp;<sp/>reqs,</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>completed,</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indx,</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;MPI_Status&gt;</ref>&amp;<sp/><sp/>status)</highlight></codeline>
<codeline lineno="1830"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><ref refid="namespaceamrex_1a7be0045c05a2db523f6b0b6c6f079f26" kindref="member">BL_FORT_PROC_DECL</ref>(BL_PD_BARRIER,bl_pd_barrier)()</highlight></codeline>
<codeline lineno="1835"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a732a4be5017987f2d6edc0fcd2329301" kindref="member">ParallelDescriptor::Barrier</ref>();</highlight></codeline>
<codeline lineno="1837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><ref refid="namespaceamrex_1a7be0045c05a2db523f6b0b6c6f079f26" kindref="member">BL_FORT_PROC_DECL</ref>(BL_PD_COMMUNICATOR,bl_pd_communicator)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>vcomm)</highlight></codeline>
<codeline lineno="1840"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref>*<sp/>comm<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(vcomm);</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/>*comm<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">ParallelDescriptor::Communicator</ref>();</highlight></codeline>
<codeline lineno="1844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><ref refid="namespaceamrex_1a7be0045c05a2db523f6b0b6c6f079f26" kindref="member">BL_FORT_PROC_DECL</ref>(BL_PD_MYPROC,bl_pd_myproc)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>myproc)</highlight></codeline>
<codeline lineno="1847"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/>*myproc<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>();</highlight></codeline>
<codeline lineno="1849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><ref refid="namespaceamrex_1a7be0045c05a2db523f6b0b6c6f079f26" kindref="member">BL_FORT_PROC_DECL</ref>(BL_PD_NPROCS,bl_pd_nprocs)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>nprocs)</highlight></codeline>
<codeline lineno="1852"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/>*nprocs<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>();</highlight></codeline>
<codeline lineno="1854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><ref refid="namespaceamrex_1a7be0045c05a2db523f6b0b6c6f079f26" kindref="member">BL_FORT_PROC_DECL</ref>(BL_PD_IOPROC,bl_pd_ioproc)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ioproc)</highlight></codeline>
<codeline lineno="1857"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/>*ioproc<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>();</highlight></codeline>
<codeline lineno="1859"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><ref refid="namespaceamrex_1a7be0045c05a2db523f6b0b6c6f079f26" kindref="member">BL_FORT_PROC_DECL</ref>(BL_PD_IS_IOPROC,bl_pd_is_ioproc)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>ioproc)</highlight></codeline>
<codeline lineno="1862"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/>*ioproc<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>()?1:0;</highlight></codeline>
<codeline lineno="1864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><ref refid="namespaceamrex_1a7be0045c05a2db523f6b0b6c6f079f26" kindref="member">BL_FORT_PROC_DECL</ref>(BL_PD_SECOND,bl_pd_second)(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>r)</highlight></codeline>
<codeline lineno="1867"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/>*r<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">ParallelDescriptor::second</ref>();</highlight></codeline>
<codeline lineno="1869"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_USE_FLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><ref refid="namespaceamrex_1a7be0045c05a2db523f6b0b6c6f079f26" kindref="member">BL_FORT_PROC_DECL</ref>(BL_PD_REDUCE_REAL_MAX_TO_IOPROC,bl_pd_reduce_real_max_to_ioproc)(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>r)</highlight></codeline>
<codeline lineno="1873"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a552f084c17efd580d0962eb68e6b43ee" kindref="member">ParallelDescriptor::ReduceRealMax</ref>(*r,<ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>());</highlight></codeline>
<codeline lineno="1875"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><ref refid="namespaceamrex_1a7be0045c05a2db523f6b0b6c6f079f26" kindref="member">BL_FORT_PROC_DECL</ref>(BL_PD_REDUCE_REAL_SUM_TO_IOPROC,bl_pd_reduce_real_sum_to_ioproc)(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>r)</highlight></codeline>
<codeline lineno="1878"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33cc0d4af07237333e42214807d82e99" kindref="member">ParallelDescriptor::ReduceRealSum</ref>(*r,<ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>());</highlight></codeline>
<codeline lineno="1880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><ref refid="namespaceamrex_1a7be0045c05a2db523f6b0b6c6f079f26" kindref="member">BL_FORT_PROC_DECL</ref>(BL_PD_REDUCE_REAL_MAX_TO_IOPROC,bl_pd_reduce_real_max_to_ioproc)(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>r)</highlight></codeline>
<codeline lineno="1883"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a552f084c17efd580d0962eb68e6b43ee" kindref="member">ParallelDescriptor::ReduceRealMax</ref>(*r,<ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>());</highlight></codeline>
<codeline lineno="1885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><ref refid="namespaceamrex_1a7be0045c05a2db523f6b0b6c6f079f26" kindref="member">BL_FORT_PROC_DECL</ref>(BL_PD_REDUCE_REAL_SUM_TO_IOPROC,bl_pd_reduce_real_sum_to_ioproc)(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>r)</highlight></codeline>
<codeline lineno="1888"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33cc0d4af07237333e42214807d82e99" kindref="member">ParallelDescriptor::ReduceRealSum</ref>(*r,<ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>());</highlight></codeline>
<codeline lineno="1890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><ref refid="namespaceamrex_1a7be0045c05a2db523f6b0b6c6f079f26" kindref="member">BL_FORT_PROC_DECL</ref>(BL_PD_ABORT,bl_pd_abort)()</highlight></codeline>
<codeline lineno="1894"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ae6927a6804e22fedb86c1fe19d6567fc" kindref="member">ParallelDescriptor::Abort</ref>();</highlight></codeline>
<codeline lineno="1896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_USE_MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ParallelDescriptor</highlight></codeline>
<codeline lineno="1900"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BL_AMRPROF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref><sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">Mpi_typemap&lt;IntVect&gt;::type</ref>()</highlight></codeline>
<codeline lineno="1903"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(<ref refid="AMReX__TypeTraits_8H_1adc50ea9983407ec975c6c594c92bae5d" kindref="member">AMREX_IS_TRIVIALLY_COPYABLE</ref>(<ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>),<sp/></highlight><highlight class="stringliteral">&quot;IntVect<sp/>must<sp/>be<sp/>trivially<sp/>copyable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::is_standard_layout&lt;IntVect&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;IntVect<sp/>must<sp/>be<sp/>standard<sp/>layout&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref><sp/>mine(<ref refid="AMReX__ccse-mpi_8H_1aaeb65c6a10733707cec88e9cd3e3271e" kindref="member">MPI_DATATYPE_NULL</ref>);</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mine<sp/>==<sp/><ref refid="AMReX__ccse-mpi_8H_1aaeb65c6a10733707cec88e9cd3e3271e" kindref="member">MPI_DATATYPE_NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref><sp/>types[]<sp/>=<sp/>{<sp/>MPI_INT<sp/>};</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocklens[]<sp/>=<sp/>{<sp/>AMREX_SPACEDIM<sp/>};</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Aint<sp/>disp[]<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Type_create_struct(1,<sp/>blocklens,<sp/>disp,<sp/>types,<sp/>&amp;mine)<sp/>);</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Aint<sp/>lb,<sp/>extent;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Type_get_extent(mine,<sp/>&amp;lb,<sp/>&amp;extent)<sp/>);</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extent<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref><sp/>tmp<sp/>=<sp/>mine;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Type_create_resized(tmp,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>),<sp/>&amp;mine)<sp/>);</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Type_free(&amp;tmp)<sp/>);</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Type_commit(<sp/>&amp;mine<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mine;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref><sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">Mpi_typemap&lt;IndexType&gt;::type</ref>()</highlight></codeline>
<codeline lineno="1927"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(<ref refid="AMReX__TypeTraits_8H_1adc50ea9983407ec975c6c594c92bae5d" kindref="member">AMREX_IS_TRIVIALLY_COPYABLE</ref>(<ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref>),<sp/></highlight><highlight class="stringliteral">&quot;IndexType<sp/>must<sp/>be<sp/>trivially<sp/>copyable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::is_standard_layout&lt;IndexType&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;IndexType<sp/>must<sp/>be<sp/>standard<sp/>layout&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref><sp/>mine(<ref refid="AMReX__ccse-mpi_8H_1aaeb65c6a10733707cec88e9cd3e3271e" kindref="member">MPI_DATATYPE_NULL</ref>);</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mine<sp/>==<sp/><ref refid="AMReX__ccse-mpi_8H_1aaeb65c6a10733707cec88e9cd3e3271e" kindref="member">MPI_DATATYPE_NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref><sp/>types[]<sp/>=<sp/>{<sp/>MPI_UNSIGNED<sp/>};</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocklens[]<sp/>=<sp/>{<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Aint<sp/>disp[]<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Type_create_struct(1,<sp/>blocklens,<sp/>disp,<sp/>types,<sp/>&amp;mine)<sp/>);</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Aint<sp/>lb,<sp/>extent;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Type_get_extent(mine,<sp/>&amp;lb,<sp/>&amp;extent)<sp/>);</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extent<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref>))<sp/>{</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref><sp/>tmp<sp/>=<sp/>mine;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Type_create_resized(tmp,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref>),<sp/>&amp;mine)<sp/>);</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Type_free(&amp;tmp)<sp/>);</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Type_commit(<sp/>&amp;mine<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mine;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"></highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref><sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">Mpi_typemap&lt;Box&gt;::type</ref>()</highlight></codeline>
<codeline lineno="1951"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(<ref refid="AMReX__TypeTraits_8H_1adc50ea9983407ec975c6c594c92bae5d" kindref="member">AMREX_IS_TRIVIALLY_COPYABLE</ref>(<ref refid="classamrex_1_1Box" kindref="compound">Box</ref>),<sp/></highlight><highlight class="stringliteral">&quot;Box<sp/>must<sp/>be<sp/>trivially<sp/>copyable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/>static_assert(std::is_standard_layout&lt;Box&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;Box<sp/>must<sp/>be<sp/>standard<sp/>layout&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref><sp/>mine(<ref refid="AMReX__ccse-mpi_8H_1aaeb65c6a10733707cec88e9cd3e3271e" kindref="member">MPI_DATATYPE_NULL</ref>);</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>mine<sp/>==<sp/><ref refid="AMReX__ccse-mpi_8H_1aaeb65c6a10733707cec88e9cd3e3271e" kindref="member">MPI_DATATYPE_NULL</ref><sp/>)</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Box" kindref="compound">Box</ref><sp/>bx[2];</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref><sp/>types[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">Mpi_typemap&lt;IntVect&gt;::type</ref>(),</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">Mpi_typemap&lt;IntVect&gt;::type</ref>(),</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structamrex_1_1ParallelDescriptor_1_1Mpi__typemap_1a178254a5520c3ee1ea23f47987392468" kindref="member">Mpi_typemap&lt;IndexType&gt;::type</ref>(),</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocklens[]<sp/>=<sp/>{<sp/>1,<sp/>1,<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/>MPI_Aint<sp/>disp[3];</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Get_address(&amp;bx[0].smallend,<sp/>&amp;disp[0])<sp/>);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Get_address(&amp;bx[0].bigend,<sp/><sp/><sp/>&amp;disp[1])<sp/>);</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Get_address(&amp;bx[0].btype,<sp/><sp/><sp/><sp/>&amp;disp[2])<sp/>);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disp[2]<sp/>-=<sp/>disp[0];</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disp[1]<sp/>-=<sp/>disp[0];</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disp[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Type_create_struct(3,<sp/>blocklens,<sp/>disp,<sp/>types,<sp/>&amp;mine)<sp/>);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MPI_Aint<sp/>lb,<sp/>extent;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Type_get_extent(mine,<sp/>&amp;lb,<sp/>&amp;extent)<sp/>);</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extent<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bx[0]))<sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1affc17fe964f9f670fb06e09d6134b4ff" kindref="member">MPI_Datatype</ref><sp/>tmp<sp/>=<sp/>mine;</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Type_create_resized(tmp,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bx[0]),<sp/>&amp;mine)<sp/>);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Type_free(&amp;tmp)<sp/>);</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Type_commit(<sp/>&amp;mine<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mine;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1aa123b1406423d74e38759f1412955db8" kindref="member">ParallelDescriptor::ReadAndBcastFile</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename,</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;char&gt;</ref>&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>charBuf,</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bExitOnError,</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="AMReX__ccse-mpi_8H_1a68c509d4adb3f4a1d6fe3a9b0b87c7b9" kindref="member">MPI_Comm</ref><sp/><sp/><sp/><sp/>&amp;comm)</highlight></codeline>
<codeline lineno="1993"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>IO_Buffer_Size<sp/>=<sp/>262144<sp/>*<sp/>8<sp/>};</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>BL_SETBUF_SIGNED_CHAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Setbuf_Char_Type;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>Setbuf_Char_Type;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2001"><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Setbuf_Char_Type&gt;</ref><sp/>io_buffer(IO_Buffer_Size);</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>fileLength(0),<sp/>fileLengthPadded(0);</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>iss;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iss.rdbuf()-&gt;pubsetbuf(io_buffer.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),<sp/>io_buffer.<ref refid="classamrex_1_1Vector_1a509fc6837193e6fd97249b0c072c7830" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iss.open(filename.c_str(),<sp/>std::ios::in);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<sp/>iss.good())<sp/>{</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bExitOnError)<sp/>{</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1ac40a8be1926370de761ddd49c765d971" kindref="member">amrex::FileOpenFailed</ref>(filename);</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileLength<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iss.seekg(0,<sp/><ref refid="namespaceamrex_1a199ea36f687fd4271b73c72b56fd3279" kindref="member">std::ios::end</ref>);</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileLength<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::streamoff</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(iss.tellg());</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iss.seekg(0,<sp/>std::ios::beg);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a20157f27c3bf88a426b0f44bd6bbf135" kindref="member">ParallelDescriptor::Bcast</ref>(&amp;fileLength,<sp/>1,</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>(),<sp/>comm);</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fileLength<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/>fileLengthPadded<sp/>=<sp/>fileLength<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>fileLengthPadded<sp/>+=<sp/>fileLengthPadded<sp/>%<sp/>8;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/>charBuf.resize(fileLengthPadded);</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>())<sp/>{</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iss.read(charBuf.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),<sp/>fileLength);</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iss.close();</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a20157f27c3bf88a426b0f44bd6bbf135" kindref="member">ParallelDescriptor::Bcast</ref>(charBuf.<ref refid="classamrex_1_1Vector_1ab7e27d7251f3583037eee2d3333f53dd" kindref="member">dataPtr</ref>(),<sp/>fileLengthPadded,</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>(),<sp/>comm);</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/>charBuf[fileLength]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a916170832821539e49f051409018ffcb" kindref="member">ParallelDescriptor::Initialize</ref><sp/>()</highlight></codeline>
<codeline lineno="2044"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BL_AMRPROF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref><sp/>pp(</highlight><highlight class="stringliteral">&quot;amrex&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/>pp.<ref refid="classamrex_1_1ParmParse_1a6d30fe0a4cd81ba121804385f40a65f5" kindref="member">query</ref>(</highlight><highlight class="stringliteral">&quot;use_gpu_aware_mpi&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1af122c95310b715f9006b650405e56bc8" kindref="member">use_gpu_aware_mpi</ref>);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1af5ce3cf99985348d87f77ba2c811514f" kindref="member">StartTeams</ref>();</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a95032768c19f94a64196f85fefeee239" kindref="member">ParallelDescriptor::Finalize</ref><sp/>()</highlight></codeline>
<codeline lineno="2055"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BL_AMRPROF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a1f1780bd83ee339ade2a2dd702473e20" kindref="member">EndTeams</ref>();</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BL_AMRPROF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1af5ce3cf99985348d87f77ba2c811514f" kindref="member">ParallelDescriptor::StartTeams</ref><sp/>()</highlight></codeline>
<codeline lineno="2064"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>team_size<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>do_team_reduce<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BL_USE_MPI3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref><sp/>pp(</highlight><highlight class="stringliteral">&quot;team&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/>pp.<ref refid="classamrex_1_1ParmParse_1a6d30fe0a4cd81ba121804385f40a65f5" kindref="member">query</ref>(</highlight><highlight class="stringliteral">&quot;size&quot;</highlight><highlight class="normal">,<sp/>team_size);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/>pp.<ref refid="classamrex_1_1ParmParse_1a6d30fe0a4cd81ba121804385f40a65f5" kindref="member">query</ref>(</highlight><highlight class="stringliteral">&quot;reduce&quot;</highlight><highlight class="normal">,<sp/>do_team_reduce);</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nprocs<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>();</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank<sp/><sp/><sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>();</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nprocs<sp/>%<sp/>team_size<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1aea69993eec3c9ca497cd0e47522b2ec6" kindref="member">amrex::Abort</ref>(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>processes<sp/>not<sp/>divisible<sp/>by<sp/>team<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a9a80b6d86037c06fed7ef5fb0d2a8d28" kindref="member">m_Team</ref>.<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1a665b0b12d8aadf1fe4050650f79c880f" kindref="member">m_numTeams</ref><sp/><sp/><sp/><sp/>=<sp/>nprocs<sp/>/<sp/>team_size;</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a9a80b6d86037c06fed7ef5fb0d2a8d28" kindref="member">m_Team</ref>.<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1a3a15d388a4307d1a6af319e8244b7d1e" kindref="member">m_size</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>team_size;</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a9a80b6d86037c06fed7ef5fb0d2a8d28" kindref="member">m_Team</ref>.<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1a0e84c360250692ebc2e6585a33e47d41" kindref="member">m_color</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>rank<sp/>/<sp/>team_size;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a9a80b6d86037c06fed7ef5fb0d2a8d28" kindref="member">m_Team</ref>.<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1ac3aa97bce1863d762909aca16c65f13e" kindref="member">m_lead</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a9a80b6d86037c06fed7ef5fb0d2a8d28" kindref="member">m_Team</ref>.<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1a0e84c360250692ebc2e6585a33e47d41" kindref="member">m_color</ref><sp/>*<sp/>team_size;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a9a80b6d86037c06fed7ef5fb0d2a8d28" kindref="member">m_Team</ref>.<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1a7afcd50dc8308b36a3f92aa13686d7d1" kindref="member">m_rankInTeam</ref><sp/><sp/>=<sp/>rank<sp/>-<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a9a80b6d86037c06fed7ef5fb0d2a8d28" kindref="member">m_Team</ref>.<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1ac3aa97bce1863d762909aca16c65f13e" kindref="member">m_lead</ref>;</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a9a80b6d86037c06fed7ef5fb0d2a8d28" kindref="member">m_Team</ref>.<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1a5de8f1503fd9c3d7fac5aad2558a3a8b" kindref="member">m_do_team_reduce</ref><sp/>=<sp/>team_size<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>do_team_reduce;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(BL_USE_MPI3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AMReX__ccse-mpi_8H_1a2e7770334e9e65834ce3c95dd0c3a50f" kindref="member">MPI_Group</ref><sp/>grp,<sp/>team_grp,<sp/>lead_grp;</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Comm_group(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">ParallelDescriptor::Communicator</ref>(),<sp/>&amp;grp)<sp/>);</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>team_ranks[team_size];</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>team_size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>team_ranks[i]<sp/>=<sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a564fb3e90a09a47e8213cdd2de4a2634" kindref="member">MyTeamLead</ref>()<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Group_incl(grp,<sp/>team_size,<sp/>team_ranks,<sp/>&amp;team_grp)<sp/>);</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Comm_create(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">ParallelDescriptor::Communicator</ref>(),<sp/></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>team_grp,<sp/>&amp;<ref refid="namespaceamrex_1_1ParallelDescriptor_1a9a80b6d86037c06fed7ef5fb0d2a8d28" kindref="member">m_Team</ref>.<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1a69bbcf1d147ce2786b6c5c4f166b2b1e" kindref="member">m_team_comm</ref>)<sp/>);</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;lead_ranks(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a9a80b6d86037c06fed7ef5fb0d2a8d28" kindref="member">m_Team</ref>.<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1a665b0b12d8aadf1fe4050650f79c880f" kindref="member">m_numTeams</ref>);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>lead_ranks.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lead_ranks[i]<sp/>=<sp/>i<sp/>*<sp/>team_size;</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Group_incl(grp,<sp/>lead_ranks.size(),<sp/>&amp;lead_ranks[0],<sp/>&amp;lead_grp)<sp/>);</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Comm_create(<ref refid="namespaceamrex_1_1ParallelDescriptor_1a0f53686fc6a6b7dca69c230fd1336e44" kindref="member">ParallelDescriptor::Communicator</ref>(),<sp/></highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lead_grp,<sp/>&amp;<ref refid="namespaceamrex_1_1ParallelDescriptor_1a9a80b6d86037c06fed7ef5fb0d2a8d28" kindref="member">m_Team</ref>.<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1aa79a14d32c85df7c2912b7cac38f4416" kindref="member">m_lead_comm</ref>)<sp/>);</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Group_free(&amp;grp)<sp/>);</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Group_free(&amp;team_grp)<sp/>);</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BL_MPI_REQUIRE(<sp/>MPI_Group_free(&amp;lead_grp)<sp/>);</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><ref refid="namespaceamrex_1_1ParallelDescriptor_1a1f1780bd83ee339ade2a2dd702473e20" kindref="member">ParallelDescriptor::EndTeams</ref><sp/>()</highlight></codeline>
<codeline lineno="2118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a9a80b6d86037c06fed7ef5fb0d2a8d28" kindref="member">m_Team</ref>.<ref refid="structamrex_1_1ParallelDescriptor_1_1ProcessTeam_1a415ff6c2958d2b50d111d1a272749af6" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="2120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"></highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceamrex" kindref="compound">amrex</ref>;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="AMReX__ParallelDescriptor_8cpp_1a55bd78406d8e49195e537d01b019be81" kindref="member">amrex_fi_pd_myproc</ref><sp/>()<sp/>{</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a33162ef233c092e9e6fd75ab291b9b29" kindref="member">ParallelDescriptor::MyProc</ref>();</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="AMReX__ParallelDescriptor_8cpp_1a7d5660f9a749bc7d07bfef333264e851" kindref="member">amrex_fi_pd_nprocs</ref><sp/>()<sp/>{</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1aa191723b5d24ceaf64e9d49f542cfcc2" kindref="member">ParallelDescriptor::NProcs</ref>();</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="AMReX__ParallelDescriptor_8cpp_1aa97739560ad64ab5eed1b64b4555fcc8" kindref="member">amrex_fi_pd_ioprocessor</ref><sp/>()<sp/>{</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac7fb3467af4aabf15e61cb9c27e916d9" kindref="member">ParallelDescriptor::IOProcessor</ref>();</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="AMReX__ParallelDescriptor_8cpp_1ab02f0af6eb415481f6c0a471115cda53" kindref="member">amrex_fi_pd_ioprocessor_number</ref><sp/>()<sp/>{</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ab734a5d614e753d28d03865ee6e4039a" kindref="member">ParallelDescriptor::IOProcessorNumber</ref>();</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="AMReX__ParallelDescriptor_8cpp_1a9cf180d32bbb6668330bddd3b1107677" kindref="member">amrex_fi_pd_bcast_r</ref><sp/>(Real*<sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>root)</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1a20157f27c3bf88a426b0f44bd6bbf135" kindref="member">ParallelDescriptor::Bcast</ref>(x,<sp/>n,<sp/>root);</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/>Real<sp/><ref refid="AMReX__ParallelDescriptor_8cpp_1a246b36fd3c5ded8a2fef5aabac2d46c3" kindref="member">amrex_fi_pd_wtime</ref><sp/>()</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceamrex_1_1ParallelDescriptor_1ac5028f0e53837bb92fcf49d087aeee88" kindref="member">ParallelDescriptor::second</ref>();</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2153"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_ParallelDescriptor.cpp"/>
  </compounddef>
</doxygen>
