<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1OrientationIter" kind="class" language="C++" prot="public">
    <compoundname>amrex::OrientationIter</compoundname>
    <includes refid="AMReX__Orientation_8H" local="no">AMReX_Orientation.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1OrientationIter_1a4a1d69b82d46e482d19ca15a5bb8a711" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::OrientationIter::face</definition>
        <argsstring></argsstring>
        <name>face</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="169" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="169" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1abf8068b28ddd67e796d05530e969eacf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> constexpr</type>
        <definition>AMREX_GPU_HOST_DEVICE constexpr amrex::OrientationIter::OrientationIter</definition>
        <argsstring>() noexcept</argsstring>
        <name>OrientationIter</name>
        <briefdescription>
<para>The default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="119" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1ab64091346540ed0e8a9da3a2f567b980" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::OrientationIter::OrientationIter</definition>
        <argsstring>(const Orientation &amp;_face) noexcept</argsstring>
        <name>OrientationIter</name>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>_face</declname>
        </param>
        <briefdescription>
<para>Construct an iterator on the <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="124" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="124" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1a731632defa84a957ee5bd65b0dc04953" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::OrientationIter::rewind</definition>
        <argsstring>() noexcept</argsstring>
        <name>rewind</name>
        <briefdescription>
<para>Reset (rewind) the iterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="129" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1ad0d517ef2f1ae5dbb54419269d138f9b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE Orientation amrex::OrientationIter::operator()</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator()</name>
        <briefdescription>
<para>Return the orientation of the face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="132" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1a5c3d9a0ab32fa72c6f10261f59158775" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::OrientationIter::operator void *</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator void *</name>
        <briefdescription>
<para>Cast to void*. Used to test if iterator is valid. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="135" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1a8b990aa17fb0284e3b5c74d3b5d626da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1OrientationIter" kindref="compound">OrientationIter</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE OrientationIter&amp; amrex::OrientationIter::operator--</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator--</name>
        <briefdescription>
<para>Pre-decrement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="138" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1a03e68db112225e2597253f273e7a26a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1OrientationIter" kindref="compound">OrientationIter</ref> &amp;</type>
        <definition>AMREX_GPU_HOST_DEVICE OrientationIter&amp; amrex::OrientationIter::operator++</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator++</name>
        <briefdescription>
<para>Pre-increment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="141" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1afd0845077909931b9ed38c1874b12f75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1OrientationIter" kindref="compound">OrientationIter</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE OrientationIter amrex::OrientationIter::operator--</definition>
        <argsstring>(int) noexcept</argsstring>
        <name>operator--</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Post-decrement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="144" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1a58042bf3c7e9fddb551bb7e141061287" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="classamrex_1_1OrientationIter" kindref="compound">OrientationIter</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE OrientationIter amrex::OrientationIter::operator++</definition>
        <argsstring>(int) noexcept</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Post-increment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="150" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="150" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1a44cb3b76a01de48a5d93281e7c0a4ef2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::OrientationIter::operator==</definition>
        <argsstring>(const OrientationIter &amp;oi) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1OrientationIter" kindref="compound">OrientationIter</ref> &amp;</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>The equality operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="156" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1a14ec09bf37c61e88414f6e672c4f0d89" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::OrientationIter::operator!=</definition>
        <argsstring>(const OrientationIter &amp;oi) const noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1OrientationIter" kindref="compound">OrientationIter</ref> &amp;</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>The inequality operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="162" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="162" bodyend="165"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1a253004b1b5e149ee012d73724c077696" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE amrex::OrientationIter::OrientationIter</definition>
        <argsstring>(int _face) noexcept</argsstring>
        <name>OrientationIter</name>
        <param>
          <type>int</type>
          <declname>_face</declname>
        </param>
        <briefdescription>
<para>Construct an iterator on the face. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="172" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="172" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1abbe3fdc80e10ddf53246586be676574a" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE bool amrex::OrientationIter::ok</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ok</name>
        <briefdescription>
<para>Is the iterator valid? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="175" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="175" bodyend="175"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An Iterator over the <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> of Faces of a <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" line="114" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_Orientation.H" bodystart="113" bodyend="176"/>
    <listofallmembers>
      <member refid="classamrex_1_1OrientationIter_1a4a1d69b82d46e482d19ca15a5bb8a711" prot="private" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>face</name></member>
      <member refid="classamrex_1_1OrientationIter_1abbe3fdc80e10ddf53246586be676574a" prot="private" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>ok</name></member>
      <member refid="classamrex_1_1OrientationIter_1a5c3d9a0ab32fa72c6f10261f59158775" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>operator void *</name></member>
      <member refid="classamrex_1_1OrientationIter_1a14ec09bf37c61e88414f6e672c4f0d89" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1OrientationIter_1ad0d517ef2f1ae5dbb54419269d138f9b" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>operator()</name></member>
      <member refid="classamrex_1_1OrientationIter_1a03e68db112225e2597253f273e7a26a4" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>operator++</name></member>
      <member refid="classamrex_1_1OrientationIter_1a58042bf3c7e9fddb551bb7e141061287" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>operator++</name></member>
      <member refid="classamrex_1_1OrientationIter_1a8b990aa17fb0284e3b5c74d3b5d626da" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>operator--</name></member>
      <member refid="classamrex_1_1OrientationIter_1afd0845077909931b9ed38c1874b12f75" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>operator--</name></member>
      <member refid="classamrex_1_1OrientationIter_1a44cb3b76a01de48a5d93281e7c0a4ef2" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>operator==</name></member>
      <member refid="classamrex_1_1OrientationIter_1abf8068b28ddd67e796d05530e969eacf" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>OrientationIter</name></member>
      <member refid="classamrex_1_1OrientationIter_1ab64091346540ed0e8a9da3a2f567b980" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>OrientationIter</name></member>
      <member refid="classamrex_1_1OrientationIter_1a253004b1b5e149ee012d73724c077696" prot="private" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>OrientationIter</name></member>
      <member refid="classamrex_1_1OrientationIter_1a731632defa84a957ee5bd65b0dc04953" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>rewind</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
