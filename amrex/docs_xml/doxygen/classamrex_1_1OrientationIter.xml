<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1OrientationIter" kind="class" language="C++" prot="public">
    <compoundname>amrex::OrientationIter</compoundname>
    <includes refid="AMReX__Orientation_8H" local="no">AMReX_Orientation.H</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1OrientationIter_1a4a1d69b82d46e482d19ca15a5bb8a711" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::OrientationIter::face</definition>
        <argsstring></argsstring>
        <name>face</name>
        <qualifiedname>amrex::OrientationIter::face</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="190" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="190" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1af6dba82ba412292d5594bb333ac67627" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr amrex::OrientationIter::OrientationIter</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>OrientationIter</name>
        <qualifiedname>amrex::OrientationIter::OrientationIter</qualifiedname>
        <briefdescription>
<para>The default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="139" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1ac4eb1ef641a32c7f7f7a9c2ed4bd0375" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__</type>
        <definition>__host__ __device__ amrex::OrientationIter::OrientationIter</definition>
        <argsstring>(const Orientation &amp;_face) noexcept</argsstring>
        <name>OrientationIter</name>
        <qualifiedname>amrex::OrientationIter::OrientationIter</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> &amp;</type>
          <declname>_face</declname>
        </param>
        <briefdescription>
<para>Construct an iterator on the <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="142" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="142" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1aaf239f3b54e37e92949ef89ea748c078" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::OrientationIter::rewind</definition>
        <argsstring>() noexcept</argsstring>
        <name>rewind</name>
        <qualifiedname>amrex::OrientationIter::rewind</qualifiedname>
        <briefdescription>
<para>Reset (rewind) the iterator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="147" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1a6394d315fda58c688d2b02b0fd367615" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref></type>
        <definition>__host__ __device__ Orientation amrex::OrientationIter::operator()</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::OrientationIter::operator()</qualifiedname>
        <briefdescription>
<para>Return the orientation of the face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="150" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1af74961e1eae772654a896c2121519db3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__</type>
        <definition>__host__ __device__ amrex::OrientationIter::operator void *</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator void *</name>
        <qualifiedname>amrex::OrientationIter::operator void *</qualifiedname>
        <briefdescription>
<para>Cast to void*. Used to test if iterator is valid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="153" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="153" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1a50c27c71771e4c2bda99aa852aeae381" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::OrientationIter::isValid</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isValid</name>
        <qualifiedname>amrex::OrientationIter::isValid</qualifiedname>
        <briefdescription>
<para>Is the iterator valid? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="156" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="156" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1a962011ef65a3ec0839044d90866a56ca" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1OrientationIter" kindref="compound">OrientationIter</ref> &amp;</type>
        <definition>__host__ __device__ OrientationIter &amp; amrex::OrientationIter::operator--</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator--</name>
        <qualifiedname>amrex::OrientationIter::operator--</qualifiedname>
        <briefdescription>
<para>Pre-decrement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="159" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1a5cbf60061a6e8bda76133ad0d0fb27d4" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1OrientationIter" kindref="compound">OrientationIter</ref> &amp;</type>
        <definition>__host__ __device__ OrientationIter &amp; amrex::OrientationIter::operator++</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator++</name>
        <qualifiedname>amrex::OrientationIter::operator++</qualifiedname>
        <briefdescription>
<para>Pre-increment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="162" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="162" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1a4f96d643151880379d422c250666265b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1OrientationIter" kindref="compound">OrientationIter</ref></type>
        <definition>__host__ __device__ OrientationIter amrex::OrientationIter::operator--</definition>
        <argsstring>(int) noexcept</argsstring>
        <name>operator--</name>
        <qualifiedname>amrex::OrientationIter::operator--</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Post-decrement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="165" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1a7121f3468426ced846b754e8e3653f9c" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ <ref refid="classamrex_1_1OrientationIter" kindref="compound">OrientationIter</ref></type>
        <definition>__host__ __device__ OrientationIter amrex::OrientationIter::operator++</definition>
        <argsstring>(int) noexcept</argsstring>
        <name>operator++</name>
        <qualifiedname>amrex::OrientationIter::operator++</qualifiedname>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Post-increment. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="171" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1a9061a7fa3516f8bbbe30b26a49f637f0" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::OrientationIter::operator==</definition>
        <argsstring>(const OrientationIter &amp;oi) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>amrex::OrientationIter::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1OrientationIter" kindref="compound">OrientationIter</ref> &amp;</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>The equality operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="177" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1af4bcd113d0d070b773c504d34b3f2080" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__ bool</type>
        <definition>__host__ __device__ bool amrex::OrientationIter::operator!=</definition>
        <argsstring>(const OrientationIter &amp;oi) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>amrex::OrientationIter::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1OrientationIter" kindref="compound">OrientationIter</ref> &amp;</type>
          <declname>oi</declname>
        </param>
        <briefdescription>
<para>The inequality operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="183" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="183" bodyend="186"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1OrientationIter_1a32097899cfbbd45d763cf196d1608ffc" prot="private" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>__host__ __device__</type>
        <definition>__host__ __device__ amrex::OrientationIter::OrientationIter</definition>
        <argsstring>(int _face) noexcept</argsstring>
        <name>OrientationIter</name>
        <qualifiedname>amrex::OrientationIter::OrientationIter</qualifiedname>
        <param>
          <type>int</type>
          <declname>_face</declname>
        </param>
        <briefdescription>
<para>Construct an iterator on the face. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="193" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="193" bodyend="193"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>An Iterator over the <ref refid="classamrex_1_1Orientation" kindref="compound">Orientation</ref> of Faces of a Box. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" line="134" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Orientation.H" bodystart="135" bodyend="194"/>
    <listofallmembers>
      <member refid="classamrex_1_1OrientationIter_1a4a1d69b82d46e482d19ca15a5bb8a711" prot="private" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>face</name></member>
      <member refid="classamrex_1_1OrientationIter_1a50c27c71771e4c2bda99aa852aeae381" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>isValid</name></member>
      <member refid="classamrex_1_1OrientationIter_1af74961e1eae772654a896c2121519db3" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>operator void *</name></member>
      <member refid="classamrex_1_1OrientationIter_1af4bcd113d0d070b773c504d34b3f2080" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1OrientationIter_1a6394d315fda58c688d2b02b0fd367615" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>operator()</name></member>
      <member refid="classamrex_1_1OrientationIter_1a5cbf60061a6e8bda76133ad0d0fb27d4" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>operator++</name></member>
      <member refid="classamrex_1_1OrientationIter_1a7121f3468426ced846b754e8e3653f9c" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>operator++</name></member>
      <member refid="classamrex_1_1OrientationIter_1a962011ef65a3ec0839044d90866a56ca" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>operator--</name></member>
      <member refid="classamrex_1_1OrientationIter_1a4f96d643151880379d422c250666265b" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>operator--</name></member>
      <member refid="classamrex_1_1OrientationIter_1a9061a7fa3516f8bbbe30b26a49f637f0" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>operator==</name></member>
      <member refid="classamrex_1_1OrientationIter_1af6dba82ba412292d5594bb333ac67627" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>OrientationIter</name></member>
      <member refid="classamrex_1_1OrientationIter_1ac4eb1ef641a32c7f7f7a9c2ed4bd0375" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>OrientationIter</name></member>
      <member refid="classamrex_1_1OrientationIter_1a32097899cfbbd45d763cf196d1608ffc" prot="private" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>OrientationIter</name></member>
      <member refid="classamrex_1_1OrientationIter_1aaf239f3b54e37e92949ef89ea748c078" prot="public" virt="non-virtual"><scope>amrex::OrientationIter</scope><name>rewind</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
