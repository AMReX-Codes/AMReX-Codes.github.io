<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceamrex_1_1experimental" kind="namespace" language="C++">
    <compoundname>amrex::experimental</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1ad44a0ee4b5296a203429712e9f3640e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelForC.H" line="12" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelForC.H" bodystart="12" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1ac79f243c0680723c0e561f4479ca6539" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; IsFabArray&lt; MF &gt;::value &gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelForC.H" line="35" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelForC.H" bodystart="35" bodyend="38"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelForC.H" line="8" column="22"/>
  </compounddef>
</doxygen>
