<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceamrex_1_1experimental" kind="namespace" language="C++">
    <compoundname>amrex::experimental</compoundname>
    <innerclass refid="structamrex_1_1experimental_1_1ParForMFTileSize" prot="public">amrex::experimental::ParForMFTileSize</innerclass>
    <innernamespace refid="namespaceamrex_1_1experimental_1_1detail">amrex::experimental::detail</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a970dba67d6c6c51517b334cd6933ab27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a926ac59546412d68022500242da6077a" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launch a kernel to work on the valid region. If built for CPU, tiling will be enabled. For GPU build, this function is NON-BLOCKING on the host. Conceptually, this is a 4D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a calable object void(int,int,int,int), where the first argument is the local box index, and the following three are spatial indices for x, y, and z-directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="41" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a5e2a2eea73eee11a316ef61bb44a005b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a926ac59546412d68022500242da6077a" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launch a kernel to work on the valid region. If built for CPU, tiling will be enabled. For GPU build, this function is NON-BLOCKING on the host. Conceptually, this is a 4D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MT</parametername>
</parameternamelist>
<parameterdescription>
<para>max threads in GPU blocks (Only relevant for GPU builds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a calable object void(int,int,int,int), where the first argument is the local box index, and the following three are spatial indices for x, y, and z-directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="64" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="64" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a45d01a93bab6ca5ca812b4ce13021a54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a926ac59546412d68022500242da6077a" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launch a kernel to work on the valid and ghost region. If built for CPU, tiling will be enabled. For GPU build, this function is NON-BLOCKING on the host. Conceptually, this is a 4D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a calable object void(int,int,int,int), where the first argument is the local box index, and the following three are spatial indices for x, y, and z-directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="91" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a883b00606e982c34728c58cacc69965f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a926ac59546412d68022500242da6077a" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launch a kernel to work on the valid and ghost region. If built for CPU, tiling will be enabled. For GPU build, this function is NON-BLOCKING on the host. Conceptually, this is a 4D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MT</parametername>
</parameternamelist>
<parameterdescription>
<para>max threads in GPU blocks (Only relevant for GPU builds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a calable object void(int,int,int,int), where the first argument is the local box index, and the following three are spatial indices for x, y, and z-directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="115" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="115" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a2ffe4d309022ab686a3645ea8e8c7d3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, int ncomp, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a926ac59546412d68022500242da6077a" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launch a kernel to work on the valid region. If built for CPU, tiling will be enabled. For GPU build, this function is NON-BLOCKING on the host. Conceptually, this is a 5D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a calable object void(int,int,int,int,int), where the first argument is the local box index, the following three are spatial indices for x, y, and z-directions, and the last is for component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="142" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1aea5414a582da2cdfa5cdc1a8fbd21526" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, int ncomp, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a926ac59546412d68022500242da6077a" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launch a kernel to work on the valid region. If built for CPU, tiling will be enabled. For GPU build, this function is NON-BLOCKING on the host. Conceptually, this is a 5D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MT</parametername>
</parameternamelist>
<parameterdescription>
<para>max threads in GPU blocks (Only relevant for GPU builds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a calable object void(int,int,int,int,int), where the first argument is the local box index, the following three are spatial indices for x, y, and z-directions, and the last is for component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="166" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="166" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a58d3c38e4e5089d8c59298686a6ea601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, int ncomp, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a926ac59546412d68022500242da6077a" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launch a kernel to work on the valid and ghost region. If built for CPU, tiling will be enabled. For GPU build, this function is NON-BLOCKING on the host. Conceptually, this is a 5D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a calable object void(int,int,int,int,int), where the first argument is the local box index, the following three are spatial indices for x, y, and z-directions, and the last is for component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="194" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a936d1ab3c6ad4beccb1257838f81ed52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, int ncomp, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a926ac59546412d68022500242da6077a" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launch a kernel to work on the valid and ghost region. If built for CPU, tiling will be enabled. For GPU build, this function is NON-BLOCKING on the host. Conceptually, this is a 5D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MT</parametername>
</parameternamelist>
<parameterdescription>
<para>max threads in GPU blocks (Only relevant for GPU builds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a calable object void(int,int,int,int,int), where the first argument is the local box index, the following three are spatial indices for x, y, and z-directions, and the last is for component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="219" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="219" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1acfec8d55a426a8683c3cb5f2be5ab21c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, ParForMFTileSize const &amp;ts, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1experimental_1_1ParForMFTileSize" kindref="compound">ParForMFTileSize</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a926ac59546412d68022500242da6077a" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launch a kernel to work on the valid region. If built for CPU, tiling will be enabled. However, one could specify a huge tile size to effectively disable tiling. For GPU build, this function is NON-BLOCKING on the host. Conceptually, this is a 4D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>tile size, ignored by GPU build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a calable object void(int,int,int,int), where the first argument is the local box index, and the following three are spatial indices for x, y, and z-directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="247" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a90c07dca83d8222e5bba43a32bbbd37a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, ParForMFTileSize const &amp;ts, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1experimental_1_1ParForMFTileSize" kindref="compound">ParForMFTileSize</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a926ac59546412d68022500242da6077a" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launch a kernel to work on the valid region. If built for CPU, tiling will be enabled. However, one could specify a huge tile size to effectively disable tiling. For GPU build, this function is NON-BLOCKING on the host. Conceptually, this is a 4D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MT</parametername>
</parameternamelist>
<parameterdescription>
<para>max threads in GPU blocks (Only relevant for GPU builds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>tile size, ignored by GPU build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a calable object void(int,int,int,int), where the first argument is the local box index, and the following three are spatial indices for x, y, and z-directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="272" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="272" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a34b89e101e1ffff6509075e9f3f38611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, ParForMFTileSize const &amp;ts, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1experimental_1_1ParForMFTileSize" kindref="compound">ParForMFTileSize</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a926ac59546412d68022500242da6077a" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launch a kernel to work on the valid and ghost region. If built for CPU, tiling will be enabled. However, one could specify a huge tile size to effectively disable tiling. For GPU build, this function is NON-BLOCKING on the host. Conceptually, this is a 4D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>tile size, ignored by GPU build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a calable object void(int,int,int,int), where the first argument is the local box index, and the following three are spatial indices for x, y, and z-directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="301" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="301" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a5de70f553b2c71f7168844297bfc0a2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, ParForMFTileSize const &amp;ts, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1experimental_1_1ParForMFTileSize" kindref="compound">ParForMFTileSize</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a926ac59546412d68022500242da6077a" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launch a kernel to work on the valid and ghost region. If built for CPU, tiling will be enabled. However, one could specify a huge tile size to effectively disable tiling. For GPU build, this function is NON-BLOCKING on the host. Conceptually, this is a 4D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MT</parametername>
</parameternamelist>
<parameterdescription>
<para>max threads in GPU blocks (Only relevant for GPU builds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>tile size, ignored by GPU build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a calable object void(int,int,int,int), where the first argument is the local box index, and the following three are spatial indices for x, y, and z-directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="327" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="327" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1aac7d219eb66705a850d308d43798f813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, int ncomp, ParForMFTileSize const &amp;ts, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1experimental_1_1ParForMFTileSize" kindref="compound">ParForMFTileSize</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a926ac59546412d68022500242da6077a" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launch a kernel to work on the valid region. If built for CPU, tiling will be enabled. However, one could specify a huge tile size to effectively disable tiling. For GPU build, this function is NON-BLOCKING on the host. Conceptually, this is a 5D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>tile size, ignored by GPU build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a calable object void(int,int,int,int,int), where the first argument is the local box index, the following three are spatial indices for x, y, and z-directions, and the last is for component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="356" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="356" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a51dc408ed30a34c270f34faa59051ef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, int ncomp, ParForMFTileSize const &amp;ts, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1experimental_1_1ParForMFTileSize" kindref="compound">ParForMFTileSize</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a926ac59546412d68022500242da6077a" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launch a kernel to work on the valid region. If built for CPU, tiling will be enabled. However, one could specify a huge tile size to effectively disable tiling. For GPU build, this function is NON-BLOCKING on the host. Conceptually, this is a 5D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MT</parametername>
</parameternamelist>
<parameterdescription>
<para>max threads in GPU blocks (Only relevant for GPU builds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>tile size, ignored by GPU build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a calable object void(int,int,int,int,int), where the first argument is the local box index, the following three are spatial indices for x, y, and z-directions, and the last is for component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="382" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="382" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a2dda2da7b2516dee53765ed64a64cdcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, int ncomp, ParForMFTileSize const &amp;ts, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1experimental_1_1ParForMFTileSize" kindref="compound">ParForMFTileSize</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a926ac59546412d68022500242da6077a" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launch a kernel to work on the valid and ghost region. If built for CPU, tiling will be enabled. However, one could specify a huge tile size to effectively disable tiling. For GPU build, this function is NON-BLOCKING on the host. Conceptually, this is a 5D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>tile size, ignored by GPU build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a calable object void(int,int,int,int,int), where the first argument is the local box index, the following three are spatial indices for x, y, and z-directions, and the last is for component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="412" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="412" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a38d294934bdc2359fc880a5b65f07e3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, int ncomp, ParForMFTileSize const &amp;ts, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1experimental_1_1ParForMFTileSize" kindref="compound">ParForMFTileSize</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a926ac59546412d68022500242da6077a" kindref="member">F</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launch a kernel to work on the valid and ghost region. If built for CPU, tiling will be enabled. However, one could specify a huge tile size to effectively disable tiling. For GPU build, this function is NON-BLOCKING on the host. Conceptually, this is a 5D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MT</parametername>
</parameternamelist>
<parameterdescription>
<para>max threads in GPU blocks (Only relevant for GPU builds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>tile size, ignored by GPU build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a calable object void(int,int,int,int,int), where the first argument is the local box index, the following three are spatial indices for x, y, and z-directions, and the last is for component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="439" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="439" bodyend="446"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="15" column="22"/>
  </compounddef>
</doxygen>
