<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1experimental" kind="namespace" language="C++">
    <compoundname>amrex::experimental</compoundname>
    <innernamespace refid="namespaceamrex_1_1experimental_1_1detail">amrex::experimental::detail</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a970dba67d6c6c51517b334cd6933ab27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launches a kernel to work on the valid region. If built for CPU, tiling will be enabled. For GPU builds, this function is NON-BLOCKING on the host. Conceptually, this is a 4D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object void(int,int,int,int), where the first argument is the local box index, and the following three are spatial indices for x, y, and z-directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="45" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a5e2a2eea73eee11a316ef61bb44a005b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launches a kernel to work on the valid region. If built for CPU, tiling will be enabled. For GPU builds, this function is NON-BLOCKING on the host. Conceptually, this is a 4D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MT</parametername>
</parameternamelist>
<parameterdescription>
<para>max threads in GPU blocks (Only relevant for GPU builds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object void(int,int,int,int), where the first argument is the local box index, and the following three are spatial indices for x, y, and z-directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="68" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="68" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a45d01a93bab6ca5ca812b4ce13021a54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launches a kernel to work on the valid and ghost regions. If built for CPU, tiling will be enabled. For GPU builds, this function is NON-BLOCKING on the host. Conceptually, this is a 4D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object void(int,int,int,int), where the first argument is the local box index, and the following three are spatial indices for x, y, and z-directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="95" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a883b00606e982c34728c58cacc69965f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launches a kernel to work on the valid and ghost regions. If built for CPU, tiling will be enabled. For GPU builds, this function is NON-BLOCKING on the host. Conceptually, this is a 4D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MT</parametername>
</parameternamelist>
<parameterdescription>
<para>max threads in GPU blocks (Only relevant for GPU builds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object void(int,int,int,int), where the first argument is the local box index, and the following three are spatial indices for x, y, and z-directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="119" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="119" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a58d3c38e4e5089d8c59298686a6ea601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, int ncomp, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launches a kernel to work on the valid and ghost regions. If built for CPU, tiling will be enabled. For GPU builds, this function is NON-BLOCKING on the host. Conceptually, this is a 5D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object void(int,int,int,int,int), where the first argument is the local box index, the following three are spatial indices for x, y, and z-directions, and the last is for component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="147" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a936d1ab3c6ad4beccb1257838f81ed52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, int ncomp, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launches a kernel to work on the valid and ghost regions. If built for CPU, tiling will be enabled. For gpu builds, this function is NON-BLOCKING on the host. Conceptually, this is a 5D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MT</parametername>
</parameternamelist>
<parameterdescription>
<para>max threads in GPU blocks (Only relevant for GPU builds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object void(int,int,int,int,int), where the first argument is the local box index, the following three are spatial indices for x, y, and z-directions, and the last is for component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="172" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="172" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1adc7223f52b21184b5f94cb7a31793c31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, TileSize const &amp;ts, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TileSize" kindref="compound">TileSize</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launches a kernel to work on the valid region. If built for CPU, tiling will be enabled. However, one could specify a huge tile size to effectively disable tiling. For gpu builds, this function is NON-BLOCKING on the host. Conceptually, this is a 4D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>tile size, ignored by GPU build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object void(int,int,int,int), where the first argument is the local box index, and the following three are spatial indices for x, y, and z-directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="200" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a16d8fa0d591646088a51d04231b33e02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, TileSize const &amp;ts, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TileSize" kindref="compound">TileSize</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launches a kernel to work on the valid region. If built for CPU, tiling will be enabled. However, one could specify a huge tile size to effectively disable tiling. For gpu builds, this function is NON-BLOCKING on the host. Conceptually, this is a 4D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MT</parametername>
</parameternamelist>
<parameterdescription>
<para>max threads in GPU blocks (Only relevant for GPU builds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>tile size, ignored by GPU build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object void(int,int,int,int), where the first argument is the local box index, and the following three are spatial indices for x, y, and z-directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="225" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="225" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a8bffa0012acdc4bc3a84b6a814c22312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, TileSize const &amp;ts, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TileSize" kindref="compound">TileSize</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launches a kernel to work on the valid and ghost regions. If built for CPU, tiling will be enabled. However, one could specify a huge tile size to effectively disable tiling. For gpu builds, this function is NON-BLOCKING on the host. Conceptually, this is a 4D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>tile size, ignored by GPU build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object void(int,int,int,int), where the first argument is the local box index, and the following three are spatial indices for x, y, and z-directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="254" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="254" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1aa205157a164414e21e2a682ed66a8c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, TileSize const &amp;ts, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TileSize" kindref="compound">TileSize</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launches a kernel to work on the valid and ghost regions. If built for CPU, tiling will be enabled. However, one could specify a huge tile size to effectively disable tiling. For gpu builds, this function is NON-BLOCKING on the host. Conceptually, this is a 4D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MT</parametername>
</parameternamelist>
<parameterdescription>
<para>max threads in GPU blocks (Only relevant for GPU builds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>tile size, ignored by GPU build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object void(int,int,int,int), where the first argument is the local box index, and the following three are spatial indices for x, y, and z-directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="280" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="280" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1ae165e70b88ac0d6c683db44eb113e2f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, int ncomp, TileSize const &amp;ts, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TileSize" kindref="compound">TileSize</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launches a kernel to work on the valid and ghost regions. If built for CPU, tiling will be enabled. However, one could specify a huge tile size to effectively disable tiling. For gpu builds, this function is NON-BLOCKING on the host. Conceptually, this is a 5D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>tile size, ignored by GPU build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object void(int,int,int,int,int), where the first argument is the local box index, the following three are spatial indices for x, y, and z-directions, and the last is for component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="310" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="310" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a0057b5ee6f8da3859c3b1c74b38c7537" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, int ncomp, TileSize const &amp;ts, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TileSize" kindref="compound">TileSize</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launches a kernel to work on the valid and ghost regions. If built for CPU, tiling will be enabled. However, one could specify a huge tile size to effectively disable tiling. For gpu builds, this function is NON-BLOCKING on the host. Conceptually, this is a 5D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MT</parametername>
</parameternamelist>
<parameterdescription>
<para>max threads in GPU blocks (Only relevant for GPU builds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>tile size, ignored by GPU build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object void(int,int,int,int,int), where the first argument is the local box index, the following three are spatial indices for x, y, and z-directions, and the last is for component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="337" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="337" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a51b957516bc2e5c4236e69f1ce29b836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, TileSize const &amp;ts, DynamicTiling dt, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TileSize" kindref="compound">TileSize</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DynamicTiling" kindref="compound">DynamicTiling</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launches a kernel to work on the valid and ghost regions. If built for CPU, tiling will be enabled. However, one could specify a huge tile size to effectively disable tiling. For GPU builds, this function is NON-BLOCKING on the host. Conceptually, this is a 4D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>tile size, ignored by GPU build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para>controls dynamic tiling for the cpu build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object void(int,int,int,int), where the first argument is the local box index, and the following three are spatial indices for x, y, and z-directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="367" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="367" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a0de1a6f8c5b59164435a7c9eb908d225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, int ncomp, TileSize const &amp;ts, DynamicTiling dt, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TileSize" kindref="compound">TileSize</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DynamicTiling" kindref="compound">DynamicTiling</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launches a kernel to work on the valid and ghost regions. If built for CPU, tiling will be enabled. However, one could specify a huge tile size to effectively disable tiling. For gpu builds, this function is NON-BLOCKING on the host. Conceptually, this is a 5D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>tile size, ignored by GPU build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para>controls dynamic tiling for the cpu build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object void(int,int,int,int,int), where the first argument is the local box index, the following three are spatial indices for x, y, and z-directions, and the last is for component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="394" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="394" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a55fbde0addc05eaf26fb370984ee105b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, TileSize const &amp;ts, DynamicTiling dt, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TileSize" kindref="compound">TileSize</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DynamicTiling" kindref="compound">DynamicTiling</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launches a kernel to work on the valid and ghost regions. If built for CPU, tiling will be enabled. However, one could specify a huge tile size to effectively disable tiling. For GPU builds, this function is NON-BLOCKING on the host. Conceptually, this is a 4D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MT</parametername>
</parameternamelist>
<parameterdescription>
<para>max threads in GPU blocks (Only relevant for GPU builds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>tile size, ignored by GPU build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para>controls dynamic tiling for the cpu build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object void(int,int,int,int), where the first argument is the local box index, and the following three are spatial indices for x, y, and z-directions. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="422" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="422" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1experimental_1a2b489bda31e9845469d5717cefd22332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>MT</declname>
            <defname>MT</defname>
          </param>
          <param>
            <type>typename MF</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsFabArray" kindref="compound">IsFabArray</ref>&lt; MF &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;IsFabArray&lt;MF&gt;::value&gt; amrex::experimental::ParallelFor</definition>
        <argsstring>(MF const &amp;mf, IntVect const &amp;ng, int ncomp, TileSize const &amp;ts, DynamicTiling dt, F &amp;&amp;f)</argsstring>
        <name>ParallelFor</name>
        <param>
          <type>MF const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1TileSize" kindref="compound">TileSize</ref> const &amp;</type>
          <declname>ts</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1DynamicTiling" kindref="compound">DynamicTiling</ref></type>
          <declname>dt</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>ParallelFor for MultiFab/FabArray. </para>
        </briefdescription>
        <detaileddescription>
<para>This version launches a kernel to work on the valid and ghost regions. If built for CPU, tiling will be enabled. However, one could specify a huge tile size to effectively disable tiling. For gpu builds, this function is NON-BLOCKING on the host. Conceptually, this is a 5D loop.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>MT</parametername>
</parameternamelist>
<parameterdescription>
<para>max threads in GPU blocks (Only relevant for GPU builds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>MF</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable type like lambda</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mf</parametername>
</parameternamelist>
<parameterdescription>
<para>the MultiFab/FabArray object used to specify the iteration space </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ng</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of ghost cells around the valid region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ts</parametername>
</parameternamelist>
<parameterdescription>
<para>tile size, ignored by GPU build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para>controls dynamic tiling for the cpu build </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>a callable object void(int,int,int,int,int), where the first argument is the local box index, the following three are spatial indices for x, y, and z-directions, and the last is for component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="455" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" bodystart="455" bodyend="463"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_MFParallelFor.H" line="26" column="1"/>
  </compounddef>
</doxygen>
