<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1ParticleInterpolator_1_1Base" kind="struct" language="C++" prot="public">
    <compoundname>amrex::ParticleInterpolator::Base</compoundname>
    <includes refid="AMReX__ParticleInterpolators_8H" local="no">AMReX_ParticleInterpolators.H</includes>
    <templateparamlist>
      <param>
        <type>class Derived</type>
      </param>
      <param>
        <type>class WeightType</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1ParticleInterpolator_1_1Base_1a9e34ea4216c47905ed5b9e44cf7f9822" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::ParticleInterpolator::Base&lt; Derived, WeightType &gt;::index[3]</definition>
        <argsstring>[3]</argsstring>
        <name>index</name>
        <qualifiedname>amrex::ParticleInterpolator::Base::index</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleInterpolators.H" line="20" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleInterpolators.H" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1ParticleInterpolator_1_1Base_1a5e658795689d17cacf75bdb7c46675ac" prot="public" static="no" mutable="no">
        <type>WeightType *</type>
        <definition>WeightType* amrex::ParticleInterpolator::Base&lt; Derived, WeightType &gt;::w</definition>
        <argsstring></argsstring>
        <name>w</name>
        <qualifiedname>amrex::ParticleInterpolator::Base::w</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleInterpolators.H" line="21" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleInterpolators.H" bodystart="21" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1ParticleInterpolator_1_1Base_1aad2b3e1789a599cf1517fbfa66214213" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void amrex::ParticleInterpolator::Base&lt; Derived, WeightType &gt;::ParticleToMesh</definition>
        <argsstring>(const P &amp;p, amrex::Array4&lt; V &gt; const &amp;arr, int src_comp, int dst_comp, int num_comps, F const &amp;f)</argsstring>
        <name>ParticleToMesh</name>
        <qualifiedname>amrex::ParticleInterpolator::Base::ParticleToMesh</qualifiedname>
        <param>
          <type>const P &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; V &gt; const &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comps</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>A general function for doing particle-to-mesh interpolation for one particle. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that you don&apos;t call the base class version of this, you call one of the derived versions below that implement specific interpolations.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>the particle type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>the mesh data type (i.e. float, double, int) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable that generates the particle quantity to interpolate</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the particle to interpolate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arr</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref> to interpolate to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>the particle component to start at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>the mesh component to start at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comps</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of components to interpolate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>function for computing the particle quantity to interpolate</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Usage:</para>
<para>Interpolate particle comp 0 to mesh comp 0 with no weighting: <programlisting filename=".cpp"><codeline><highlight class="normal">interp.ParticleToMesh(p,<sp/>rho,<sp/>0,<sp/>0,<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyPC::ParticleType&amp;<sp/>part,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>part.rdata(comp);<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>weighting</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
</programlisting></para>
<para>Usage:</para>
<para>Interpolate 3 particle components 1-3 to mesh components 1-3, weighting by particle comp 0: <programlisting filename=".cpp"><codeline><highlight class="normal">interp.ParticleToMesh(p,<sp/>rho,<sp/>1,<sp/>1,<sp/>3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MyPC::ParticleType&amp;<sp/>part,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>part.rdata(0)*part.rdata(comp);<sp/><sp/></highlight><highlight class="comment">//<sp/>weight<sp/>by<sp/>comp0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleInterpolators.H" line="64" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleInterpolators.H" bodystart="64" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1ParticleInterpolator_1_1Base_1a81c2922823a2fdac178b526dcd271141" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename <ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref></type>
          </param>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_DEVICE AMREX_FORCE_INLINE void amrex::ParticleInterpolator::Base&lt; Derived, WeightType &gt;::MeshToParticle</definition>
        <argsstring>(P &amp;p, amrex::Array4&lt; const V &gt; const &amp;arr, int src_comp, int dst_comp, int num_comps, F const &amp;f, G const &amp;g)</argsstring>
        <name>MeshToParticle</name>
        <qualifiedname>amrex::ParticleInterpolator::Base::MeshToParticle</qualifiedname>
        <param>
          <type>P &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4</ref>&lt; const V &gt; const &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>src_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dst_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>num_comps</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>G const &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
<para>A general function for doing mesh-to-particle interpolation for one particle. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that you don&apos;t call the base class version of this, you call one of the derived versions below that implement specific interpolations.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>P</parametername>
</parameternamelist>
<parameterdescription>
<para>the particle type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>the mesh data type (i.e. float, double, int) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>callable that generates the mesh quantity to interpolate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>G</parametername>
</parameternamelist>
<parameterdescription>
<para>callable that updates the particle given the mesh value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the particle to interpolate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arr</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref> to interpolate to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>the particle component to start at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_comp</parametername>
</parameternamelist>
<parameterdescription>
<para>the mesh component to start at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_comps</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of components to interpolate </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>function for computing the particle quantity to interpolate </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>function that updates the particle given the mesh value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Usage:</para>
<para>Interpolate mesh comps 0-2 to particle comps 4-6 with no weighting using addition: <programlisting filename=".cpp"><codeline><highlight class="normal">interp.MeshToParticle(p,<sp/>acc,<sp/>0,<sp/>4,<sp/>3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref><sp/>(<ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4&lt;const amrex::Real&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arr(i,<sp/>j,<sp/>k,<sp/>comp);<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>weighting</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]<sp/><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref><sp/>(MyParticleContainer::ParticleType&amp;<sp/>part,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/>amrex::Real<sp/>val)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part.rdata(comp)<sp/>+=<sp/>val;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
</programlisting></para>
<para>Usage:</para>
<para>Interpolate mesh comp 0 to particle comp 0, simply setting the value for the result instead of adding: <programlisting filename=".cpp"><codeline><highlight class="normal">interp.MeshToParticle(p,<sp/>count,<sp/>0,<sp/>0,<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[=]<sp/><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref><sp/>(<ref refid="structamrex_1_1Array4" kindref="compound">amrex::Array4&lt;const int&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arr,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arr(i,<sp/>j,<sp/>k,<sp/>comp);<sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>weighting</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[=]<sp/><ref refid="AMReX__GpuQualifiers_8H_1a4e626ebf06898d71a9e0790877f1694f" kindref="member">AMREX_GPU_DEVICE</ref><sp/>(MyParticleContainer::ParticleType&amp;<sp/>part,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>comp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part.idata(comp)<sp/>=<sp/>val;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleInterpolators.H" line="140" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleInterpolators.H" bodystart="140" bodyend="158"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>A base class for doing general particle/mesh interpolation operations. </para>
    </briefdescription>
    <detaileddescription>
<para>Note that you don&apos;t call the base class version of this directly, you use one of the derived versions below that implement specific interpolations. </para>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleInterpolators.H" line="18" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleInterpolators.H" bodystart="19" bodyend="159"/>
    <listofallmembers>
      <member refid="structamrex_1_1ParticleInterpolator_1_1Base_1a9e34ea4216c47905ed5b9e44cf7f9822" prot="public" virt="non-virtual"><scope>amrex::ParticleInterpolator::Base</scope><name>index</name></member>
      <member refid="structamrex_1_1ParticleInterpolator_1_1Base_1a81c2922823a2fdac178b526dcd271141" prot="public" virt="non-virtual"><scope>amrex::ParticleInterpolator::Base</scope><name>MeshToParticle</name></member>
      <member refid="structamrex_1_1ParticleInterpolator_1_1Base_1aad2b3e1789a599cf1517fbfa66214213" prot="public" virt="non-virtual"><scope>amrex::ParticleInterpolator::Base</scope><name>ParticleToMesh</name></member>
      <member refid="structamrex_1_1ParticleInterpolator_1_1Base_1a5e658795689d17cacf75bdb7c46675ac" prot="public" virt="non-virtual"><scope>amrex::ParticleInterpolator::Base</scope><name>w</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
