<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1particle__detail" kind="namespace" language="C++">
    <compoundname>amrex::particle_detail</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1af72f8c4ec6c858d83f59c48034851294" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename T_ParticleType</type>
          </param>
          <param>
            <type>template&lt; class, int, int &gt; class</type>
            <declname>PTDType</declname>
            <defname>PTDType</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAR</declname>
            <defname>NAR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAI</declname>
            <defname>NAI</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE auto amrex::particle_detail::call_f</definition>
        <argsstring>(F const &amp;f, const PTDType&lt; T_ParticleType, NAR, NAI &gt; &amp;p, const int i, Array4&lt; T &gt; const &amp;fabarr, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;plo, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxi) noexcept</argsstring>
        <name>call_f</name>
        <qualifiedname>amrex::particle_detail::call_f</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const PTDType&lt; T_ParticleType, NAR, NAI &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fabarr</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMesh.H" line="16" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMesh.H" bodystart="16" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a4fc575fa169519c925f33d6bb746d598" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename T_ParticleType</type>
          </param>
          <param>
            <type>int</type>
            <declname>NAR</declname>
            <defname>NAR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAI</declname>
            <defname>NAI</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE auto amrex::particle_detail::call_f</definition>
        <argsstring>(F const &amp;f, const ConstParticleTileData&lt; T_ParticleType, NAR, NAI &gt; &amp;p, const int i) noexcept</argsstring>
        <name>call_f</name>
        <qualifiedname>amrex::particle_detail::call_f</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ConstParticleTileData" kindref="compound">ConstParticleTileData</ref>&lt; T_ParticleType, NAR, NAI &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="23" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="23" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1aece8b1e2716e84a5261e988b9e9b1ef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::particle_detail::clearEmptyEntries</definition>
        <argsstring>(C &amp;c)</argsstring>
        <name>clearEmptyEntries</name>
        <qualifiedname>amrex::particle_detail::clearEmptyEntries</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="721" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="721" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a03a96fac7ce7e3cef2729a470a732f49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParticleReal</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t amrex::particle_detail::PSizeInFile</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;wrc, const Vector&lt; int &gt; &amp;wic)</argsstring>
        <name>PSizeInFile</name>
        <qualifiedname>amrex::particle_detail::PSizeInFile</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>wrc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>wic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="25" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="25" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a6c71a333436b729f5d06b1bcd8a663f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
          <param>
            <type>class PTile</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1RunOnGpu" kindref="compound">RunOnGpu</ref>&lt; typename Container&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, Allocator &gt;::allocator_type &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt; RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value &gt; amrex::particle_detail::fillFlags</definition>
        <argsstring>(Container&lt; int, Allocator &gt; &amp;pflags, const PTile &amp;ptile, F const &amp;f)</argsstring>
        <name>fillFlags</name>
        <qualifiedname>amrex::particle_detail::fillFlags</qualifiedname>
        <param>
          <type>Container&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, Allocator &gt; &amp;</type>
          <declname>pflags</declname>
        </param>
        <param>
          <type>const PTile &amp;</type>
          <declname>ptile</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="37" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="37" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1ad7db271b5c030516daca8b9a64dc3b34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
          <param>
            <type>class PTile</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!<ref refid="structamrex_1_1RunOnGpu" kindref="compound">RunOnGpu</ref>&lt; typename Container&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, Allocator &gt;::allocator_type &gt;::value &gt;</type>
        <definition>std::enable_if_t&lt;!RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value &gt; amrex::particle_detail::fillFlags</definition>
        <argsstring>(Container&lt; int, Allocator &gt; &amp;pflags, const PTile &amp;ptile, F const &amp;f)</argsstring>
        <name>fillFlags</name>
        <qualifiedname>amrex::particle_detail::fillFlags</qualifiedname>
        <param>
          <type>Container&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, Allocator &gt; &amp;</type>
          <declname>pflags</declname>
        </param>
        <param>
          <type>const PTile &amp;</type>
          <declname>ptile</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="61" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="61" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1ab3ff26d769238258d6af6770476264fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
          <param>
            <type>class PC</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1RunOnGpu" kindref="compound">RunOnGpu</ref>&lt; typename Container&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, Allocator &gt;::allocator_type &gt;::value, amrex::Long &gt;</type>
        <definition>std::enable_if_t&lt; RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value, amrex::Long &gt; amrex::particle_detail::countFlags</definition>
        <argsstring>(const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, Container&lt; int, Allocator &gt; &gt; &gt; &amp;particle_io_flags, const PC &amp;pc)</argsstring>
        <name>countFlags</name>
        <qualifiedname>amrex::particle_detail::countFlags</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;, Container&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, Allocator &gt; &gt; &gt; &amp;</type>
          <declname>particle_io_flags</declname>
        </param>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="83" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="83" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a5ea1180c6295aab7036c983fa1d926c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1RunOnGpu" kindref="compound">RunOnGpu</ref>&lt; typename Container&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, Allocator &gt;::allocator_type &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>std::enable_if_t&lt; RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value, int &gt; amrex::particle_detail::countFlags</definition>
        <argsstring>(const Container&lt; int, Allocator &gt; &amp;pflags)</argsstring>
        <name>countFlags</name>
        <qualifiedname>amrex::particle_detail::countFlags</qualifiedname>
        <param>
          <type>const Container&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, Allocator &gt; &amp;</type>
          <declname>pflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="109" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="109" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a61cd4d51070b0b2b1c15d23a00f4cced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
          <param>
            <type>class PC</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!<ref refid="structamrex_1_1RunOnGpu" kindref="compound">RunOnGpu</ref>&lt; typename Container&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, Allocator &gt;::allocator_type &gt;::value, amrex::Long &gt;</type>
        <definition>std::enable_if_t&lt;!RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value, amrex::Long &gt; amrex::particle_detail::countFlags</definition>
        <argsstring>(const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, Container&lt; int, Allocator &gt; &gt; &gt; &amp;particle_io_flags, const PC &amp;pc)</argsstring>
        <name>countFlags</name>
        <qualifiedname>amrex::particle_detail::countFlags</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;, Container&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, Allocator &gt; &gt; &gt; &amp;</type>
          <declname>particle_io_flags</declname>
        </param>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="127" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="127" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1aa3eb1cfb5234af860fd90b9d99dfac43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!<ref refid="structamrex_1_1RunOnGpu" kindref="compound">RunOnGpu</ref>&lt; typename Container&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, Allocator &gt;::allocator_type &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>std::enable_if_t&lt;!RunOnGpu&lt; typename Container&lt; int, Allocator &gt;::allocator_type &gt;::value, int &gt; amrex::particle_detail::countFlags</definition>
        <argsstring>(const Container&lt; int, Allocator &gt; &amp;pflags)</argsstring>
        <name>countFlags</name>
        <qualifiedname>amrex::particle_detail::countFlags</qualifiedname>
        <param>
          <type>const Container&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, Allocator &gt; &amp;</type>
          <declname>pflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="147" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="147" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1af7377c5f2b9df714890374940758cda9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename P</type>
          </param>
          <param>
            <type>typename I</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE void amrex::particle_detail::packParticleIDs</definition>
        <argsstring>(I *idata, const P &amp;p, bool is_checkpoint) noexcept</argsstring>
        <name>packParticleIDs</name>
        <qualifiedname>amrex::particle_detail::packParticleIDs</qualifiedname>
        <param>
          <type>I *</type>
          <declname>idata</declname>
        </param>
        <param>
          <type>const P &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="159" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="159" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a8d93e887eb1762cd7f310e333eb8c48d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1RunOnGpu" kindref="compound">RunOnGpu</ref>&lt; typename PC::template AllocatorType&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt; RunOnGpu&lt; typename PC::template AllocatorType&lt; int &gt; &gt;::value, void &gt; amrex::particle_detail::packIOData</definition>
        <argsstring>(Vector&lt; int &gt; &amp;idata, Vector&lt; ParticleReal &gt; &amp;rdata, const PC &amp;pc, int lev, int grid, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp, const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, typename PC::IntVector &gt; &gt; &amp;particle_io_flags, const Vector&lt; int &gt; &amp;tiles, int np, bool is_checkpoint)</argsstring>
        <name>packIOData</name>
        <qualifiedname>amrex::particle_detail::packIOData</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>idata</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; ParticleReal &gt; &amp;</type>
          <declname>rdata</declname>
        </param>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>grid</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;, typename PC::IntVector &gt; &gt; &amp;</type>
          <declname>particle_io_flags</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>tiles</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>np</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="178" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="178" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1aedddad73b38ca49f734d56af39f83838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!<ref refid="structamrex_1_1RunOnGpu" kindref="compound">RunOnGpu</ref>&lt; typename PC::template AllocatorType&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &gt;::value, void &gt;</type>
        <definition>std::enable_if_t&lt;!RunOnGpu&lt; typename PC::template AllocatorType&lt; int &gt; &gt;::value, void &gt; amrex::particle_detail::packIOData</definition>
        <argsstring>(Vector&lt; int &gt; &amp;idata, Vector&lt; ParticleReal &gt; &amp;rdata, const PC &amp;pc, int lev, int grid, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp, const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, typename PC::IntVector &gt; &gt; &amp;particle_io_flags, const Vector&lt; int &gt; &amp;tiles, int np, bool is_checkpoint)</argsstring>
        <name>packIOData</name>
        <qualifiedname>amrex::particle_detail::packIOData</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>idata</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; ParticleReal &gt; &amp;</type>
          <declname>rdata</declname>
        </param>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>grid</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; std::pair&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;, typename PC::IntVector &gt; &gt; &amp;</type>
          <declname>particle_io_flags</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>tiles</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>np</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="288" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="288" bodyend="395"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMesh.H" line="12" column="1"/>
  </compounddef>
</doxygen>
