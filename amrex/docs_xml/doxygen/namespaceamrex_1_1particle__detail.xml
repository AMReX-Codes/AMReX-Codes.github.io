<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1particle__detail" kind="namespace" language="C++">
    <compoundname>amrex::particle_detail</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1ad3abec17c3f1b659cd1034de83a0a72b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE auto amrex::particle_detail::call_f</definition>
        <argsstring>(F const &amp;f, P const &amp;p, amrex::RandomEngine const &amp;engine) noexcept -&gt; decltype(f(P{}, RandomEngine{}))</argsstring>
        <name>call_f</name>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>P const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1RandomEngine" kindref="compound">amrex::RandomEngine</ref> const &amp;</type>
          <declname>engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="26" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="26" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a15b5d534e19b47570f8bd085645e959b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename SrcData</type>
          </param>
          <param>
            <type>typename N</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE auto amrex::particle_detail::call_f</definition>
        <argsstring>(F const &amp;f, SrcData const &amp;src, N i, amrex::RandomEngine const &amp;engine) noexcept -&gt; decltype(f(SrcData{}, N{}, RandomEngine{}))</argsstring>
        <name>call_f</name>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>SrcData const &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>N</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1RandomEngine" kindref="compound">amrex::RandomEngine</ref> const &amp;</type>
          <declname>engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="42" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a142642634ebd6243e0033ed910d77eb8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>NSR</declname>
            <defname>NSR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NSI</declname>
            <defname>NSI</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAR</declname>
            <defname>NAR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAI</declname>
            <defname>NAI</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE auto amrex::particle_detail::call_f</definition>
        <argsstring>(F const &amp;f, const ConstParticleTileData&lt; NSR, NSI, NAR, NAI &gt; &amp;p, const int i) noexcept -&gt; decltype(f(p.m_aos[i]))</argsstring>
        <name>call_f</name>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ConstParticleTileData" kindref="compound">ConstParticleTileData</ref>&lt; NSR, NSI, NAR, NAI &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="61" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="61" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a313ec8f9bb7c4fba5146562d4c1da07e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>int</type>
            <declname>NSR</declname>
            <defname>NSR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NSI</declname>
            <defname>NSI</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAR</declname>
            <defname>NAR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAI</declname>
            <defname>NAI</defname>
          </param>
          <param>
            <type>typename std::enable_if&lt; NAR !=0||NAI !=0, int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE auto amrex::particle_detail::call_f</definition>
        <argsstring>(F const &amp;f, const ConstParticleTileData&lt; NSR, NSI, NAR, NAI &gt; &amp;p, const int i) noexcept -&gt; decltype(f(p.getSuperParticle(i)))</argsstring>
        <name>call_f</name>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ConstParticleTileData" kindref="compound">ConstParticleTileData</ref>&lt; NSR, NSI, NAR, NAI &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="73" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1adf80e5e4411bb1b45deb6b84f073b719" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>NSR</declname>
            <defname>NSR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NSI</declname>
            <defname>NSI</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAR</declname>
            <defname>NAR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAI</declname>
            <defname>NAI</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE auto amrex::particle_detail::call_f</definition>
        <argsstring>(F const &amp;f, const ConstParticleTileData&lt; NSR, NSI, NAR, NAI &gt; &amp;p, const int i, Array4&lt; T &gt; const &amp;fabarr, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;plo, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxi) noexcept -&gt; decltype(f(p.m_aos[i], fabarr, plo, dxi))</argsstring>
        <name>call_f</name>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ConstParticleTileData" kindref="compound">ConstParticleTileData</ref>&lt; NSR, NSI, NAR, NAI &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fabarr</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="97" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="97" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a490dfd7a0f1f5a14f1fedbdb60c7af38" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>NSR</declname>
            <defname>NSR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NSI</declname>
            <defname>NSI</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAR</declname>
            <defname>NAR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAI</declname>
            <defname>NAI</defname>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE auto amrex::particle_detail::call_f</definition>
        <argsstring>(F const &amp;f, const ParticleTileData&lt; NSR, NSI, NAR, NAI &gt; &amp;p, const int i, Array4&lt; const T &gt; const &amp;fabarr, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;plo, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxi) noexcept -&gt; decltype(f(p.m_aos[i], fabarr, plo, dxi))</argsstring>
        <name>call_f</name>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ParticleTileData" kindref="compound">ParticleTileData</ref>&lt; NSR, NSI, NAR, NAI &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; const T &gt; const &amp;</type>
          <declname>fabarr</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="123" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="123" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a750d9d77d407472797e4a604f6ec7a61" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>NSR</declname>
            <defname>NSR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NSI</declname>
            <defname>NSI</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAR</declname>
            <defname>NAR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAI</declname>
            <defname>NAI</defname>
          </param>
          <param>
            <type>typename std::enable_if&lt;(NAR !=0)||(NAI !=0), int &gt;::type</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> auto</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE auto amrex::particle_detail::call_f</definition>
        <argsstring>(F const &amp;f, const ConstParticleTileData&lt; NSR, NSI, NAR, NAI &gt; &amp;p, const int i, Array4&lt; T &gt; const &amp;fabarr, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;plo, GpuArray&lt; Real, AMREX_SPACEDIM &gt; const &amp;dxi) noexcept -&gt; decltype(f(p.getSuperParticle(i), fabarr, plo, dxi))</argsstring>
        <name>call_f</name>
        <param>
          <type>F const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ConstParticleTileData" kindref="compound">ConstParticleTileData</ref>&lt; NSR, NSI, NAR, NAI &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fabarr</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="150" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="150" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1aece8b1e2716e84a5261e988b9e9b1ef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::particle_detail::clearEmptyEntries</definition>
        <argsstring>(C &amp;c)</argsstring>
        <name>clearEmptyEntries</name>
        <param>
          <type>C &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="707" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="707" bodyend="714"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="22" column="1"/>
  </compounddef>
</doxygen>
