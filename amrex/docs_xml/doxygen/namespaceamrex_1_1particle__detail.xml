<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1particle__detail" kind="namespace" language="C++">
    <compoundname>amrex::particle_detail</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a0815919e29e03ee8666b9b0b0d69df39" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename T_ParticleType</type>
          </param>
          <param>
            <type>template&lt; class, int, int &gt; class</type>
            <declname>PTDType</declname>
            <defname>PTDType</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAR</declname>
            <defname>NAR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAI</declname>
            <defname>NAI</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ auto</type>
        <definition>__host__ __device__ auto amrex::particle_detail::call_f</definition>
        <argsstring>(F const &amp;f, const PTDType&lt; T_ParticleType, NAR, NAI &gt; &amp;p, const int i, Array4&lt; T &gt; const &amp;fabarr, GpuArray&lt; Real, 3 &gt; const &amp;plo, GpuArray&lt; Real, 3 &gt; const &amp;dxi) noexcept</argsstring>
        <name>call_f</name>
        <qualifiedname>amrex::particle_detail::call_f</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const PTDType&lt; T_ParticleType, NAR, NAI &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1Array4" kindref="compound">Array4</ref>&lt; T &gt; const &amp;</type>
          <declname>fabarr</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 3 &gt; const &amp;</type>
          <declname>plo</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1GpuArray" kindref="compound">GpuArray</ref>&lt; Real, 3 &gt; const &amp;</type>
          <declname>dxi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMesh.H" line="16" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMesh.H" bodystart="16" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a67781cea5d141deb050b98d4501f0acf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename T_ParticleType</type>
          </param>
          <param>
            <type>int</type>
            <declname>NAR</declname>
            <defname>NAR</defname>
          </param>
          <param>
            <type>int</type>
            <declname>NAI</declname>
            <defname>NAI</defname>
          </param>
        </templateparamlist>
        <type>__host__ __device__ auto</type>
        <definition>__host__ __device__ auto amrex::particle_detail::call_f</definition>
        <argsstring>(F const &amp;f, const ConstParticleTileData&lt; T_ParticleType, NAR, NAI &gt; &amp;p, const int i) noexcept</argsstring>
        <name>call_f</name>
        <qualifiedname>amrex::particle_detail::call_f</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="structamrex_1_1ConstParticleTileData" kindref="compound">ConstParticleTileData</ref>&lt; T_ParticleType, NAR, NAI &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" line="23" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleReduce.H" bodystart="23" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1aece8b1e2716e84a5261e988b9e9b1ef2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::particle_detail::clearEmptyEntries</definition>
        <argsstring>(C &amp;c)</argsstring>
        <name>clearEmptyEntries</name>
        <qualifiedname>amrex::particle_detail::clearEmptyEntries</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a0d61f8370cad1d412f80b84d143e1257" kindref="member">C</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" line="683" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleUtil.H" bodystart="683" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a03a96fac7ce7e3cef2729a470a732f49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ParticleReal</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t amrex::particle_detail::PSizeInFile</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;wrc, const Vector&lt; int &gt; &amp;wic)</argsstring>
        <name>PSizeInFile</name>
        <qualifiedname>amrex::particle_detail::PSizeInFile</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>wrc</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>wic</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="25" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="25" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a9ed0f13dc3c3eeed0fc5288046e0310a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class PTile</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::particle_detail::fillFlagsGpu</definition>
        <argsstring>(Container &amp;pflags, const PTile &amp;ptile, F const &amp;f)</argsstring>
        <name>fillFlagsGpu</name>
        <qualifiedname>amrex::particle_detail::fillFlagsGpu</qualifiedname>
        <param>
          <type>Container &amp;</type>
          <declname>pflags</declname>
        </param>
        <param>
          <type>const PTile &amp;</type>
          <declname>ptile</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="36" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="36" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1aafdebd9172833760fd77cdc1dd3570bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class PTile</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::particle_detail::fillFlagsCpu</definition>
        <argsstring>(Container &amp;pflags, const PTile &amp;ptile, F const &amp;f)</argsstring>
        <name>fillFlagsCpu</name>
        <qualifiedname>amrex::particle_detail::fillFlagsCpu</qualifiedname>
        <param>
          <type>Container &amp;</type>
          <declname>pflags</declname>
        </param>
        <param>
          <type>const PTile &amp;</type>
          <declname>ptile</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="63" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="63" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1ae8f33cf3204c03598bb4b488a4d234fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
          <param>
            <type>class PTile</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::particle_detail::fillFlags</definition>
        <argsstring>(Container&lt; int, Allocator &gt; &amp;pflags, const PTile &amp;ptile, F const &amp;f)</argsstring>
        <name>fillFlags</name>
        <qualifiedname>amrex::particle_detail::fillFlags</qualifiedname>
        <param>
          <type>Container&lt; int, Allocator &gt; &amp;</type>
          <declname>pflags</declname>
        </param>
        <param>
          <type>const PTile &amp;</type>
          <declname>ptile</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a1e470da9cdaa55f3e887edb813385d20a800618943025315f869e4e1f09471012" kindref="member">F</ref> const &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="88" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="88" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a68aebe44362201fca5e23b79595dad28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class PC</type>
          </param>
        </templateparamlist>
        <type>amrex::Long</type>
        <definition>amrex::Long amrex::particle_detail::countFlagsGpu</definition>
        <argsstring>(const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, Container &gt; &gt; &amp;particle_io_flags, const PC &amp;pc)</argsstring>
        <name>countFlagsGpu</name>
        <qualifiedname>amrex::particle_detail::countFlagsGpu</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; std::pair&lt; int, int &gt;, Container &gt; &gt; &amp;</type>
          <declname>particle_io_flags</declname>
        </param>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="107" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="107" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1ae6ba1109394b99592492b9fc16f05645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
        </templateparamlist>
        <type>amrex::Long</type>
        <definition>amrex::Long amrex::particle_detail::countFlagsGpu</definition>
        <argsstring>(const Container &amp;pflags)</argsstring>
        <name>countFlagsGpu</name>
        <qualifiedname>amrex::particle_detail::countFlagsGpu</qualifiedname>
        <param>
          <type>const Container &amp;</type>
          <declname>pflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="133" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="133" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a90069862ade9741d18db04fae386dc41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class PC</type>
          </param>
        </templateparamlist>
        <type>amrex::Long</type>
        <definition>amrex::Long amrex::particle_detail::countFlagsCpu</definition>
        <argsstring>(const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, Container &gt; &gt; &amp;particle_io_flags, const PC &amp;pc)</argsstring>
        <name>countFlagsCpu</name>
        <qualifiedname>amrex::particle_detail::countFlagsCpu</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; std::pair&lt; int, int &gt;, Container &gt; &gt; &amp;</type>
          <declname>particle_io_flags</declname>
        </param>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="151" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="151" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a9604892eff5050a987845d77bfbd4a38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
        </templateparamlist>
        <type>amrex::Long</type>
        <definition>amrex::Long amrex::particle_detail::countFlagsCpu</definition>
        <argsstring>(const Container &amp;pflags)</argsstring>
        <name>countFlagsCpu</name>
        <qualifiedname>amrex::particle_detail::countFlagsCpu</qualifiedname>
        <param>
          <type>const Container &amp;</type>
          <declname>pflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="171" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="171" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a9fcb7cd281f4dc7cb1f6cb49e0827b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
          <param>
            <type>class PC</type>
          </param>
        </templateparamlist>
        <type>amrex::Long</type>
        <definition>amrex::Long amrex::particle_detail::countFlags</definition>
        <argsstring>(const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, Container&lt; int, Allocator &gt; &gt; &gt; &amp;particle_io_flags, const PC &amp;pc)</argsstring>
        <name>countFlags</name>
        <qualifiedname>amrex::particle_detail::countFlags</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; std::pair&lt; int, int &gt;, Container&lt; int, Allocator &gt; &gt; &gt; &amp;</type>
          <declname>particle_io_flags</declname>
        </param>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="183" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="183" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1afbe16ecb748782a7f49530c931d5bcd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; class, class &gt; class</type>
            <declname>Container</declname>
            <defname>Container</defname>
          </param>
          <param>
            <type>class Allocator</type>
          </param>
        </templateparamlist>
        <type>amrex::Long</type>
        <definition>amrex::Long amrex::particle_detail::countFlags</definition>
        <argsstring>(const Container&lt; int, Allocator &gt; &amp;pflags)</argsstring>
        <name>countFlags</name>
        <qualifiedname>amrex::particle_detail::countFlags</qualifiedname>
        <param>
          <type>const Container&lt; int, Allocator &gt; &amp;</type>
          <declname>pflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="202" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="202" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1ac8697ba1fbd8c4a073b54043d0c46790" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::particle_detail::packParticleIDs</definition>
        <argsstring>(I *idata, const std::uint64_t idcpu, bool is_checkpoint) noexcept</argsstring>
        <name>packParticleIDs</name>
        <qualifiedname>amrex::particle_detail::packParticleIDs</qualifiedname>
        <param>
          <type>I *</type>
          <declname>idata</declname>
        </param>
        <param>
          <type>const std::uint64_t</type>
          <declname>idcpu</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="221" column="6" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="221" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a40c57ab7223ef5dc9c6463765197e9f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PTD</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::particle_detail::rPackParticleData</definition>
        <argsstring>(const PTD &amp;ptd, int idx, typename PTD::RealType *rdata_ptr, const int *write_real_comp)</argsstring>
        <name>rPackParticleData</name>
        <qualifiedname>amrex::particle_detail::rPackParticleData</qualifiedname>
        <param>
          <type>const PTD &amp;</type>
          <declname>ptd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>typename PTD::RealType *</type>
          <declname>rdata_ptr</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>write_real_comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="240" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="240" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a8fd307bf4a16192de0f86dd696c40788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PTD</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::particle_detail::iPackParticleData</definition>
        <argsstring>(const PTD &amp;ptd, int idx, typename PTD::IntType *idata_ptr, const int *write_int_comp, bool is_checkpoint)</argsstring>
        <name>iPackParticleData</name>
        <qualifiedname>amrex::particle_detail::iPackParticleData</qualifiedname>
        <param>
          <type>const PTD &amp;</type>
          <declname>ptd</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>typename PTD::IntType *</type>
          <declname>idata_ptr</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>write_int_comp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="280" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="280" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a9ebd2b4dc95c3f10e8d13f9178de4c9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::particle_detail::packIODataGpu</definition>
        <argsstring>(Vector&lt; int &gt; &amp;idata, Vector&lt; ParticleReal &gt; &amp;rdata, const PC &amp;pc, int lev, int grid, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp, const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, typename PC::IntVector &gt; &gt; &amp;particle_io_flags, const Vector&lt; int &gt; &amp;tiles, int np, bool is_checkpoint)</argsstring>
        <name>packIODataGpu</name>
        <qualifiedname>amrex::particle_detail::packIODataGpu</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>idata</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; ParticleReal &gt; &amp;</type>
          <declname>rdata</declname>
        </param>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>grid</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; std::pair&lt; int, int &gt;, typename PC::IntVector &gt; &gt; &amp;</type>
          <declname>particle_io_flags</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>tiles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>np</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="316" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="316" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1ac22985a9b3d708832f6686600480ea15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::particle_detail::packIODataCpu</definition>
        <argsstring>(Vector&lt; int &gt; &amp;idata, Vector&lt; ParticleReal &gt; &amp;rdata, const PC &amp;pc, int lev, int grid, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp, const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, typename PC::IntVector &gt; &gt; &amp;particle_io_flags, const Vector&lt; int &gt; &amp;tiles, int np, bool is_checkpoint)</argsstring>
        <name>packIODataCpu</name>
        <qualifiedname>amrex::particle_detail::packIODataCpu</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>idata</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; ParticleReal &gt; &amp;</type>
          <declname>rdata</declname>
        </param>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>grid</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; std::pair&lt; int, int &gt;, typename PC::IntVector &gt; &gt; &amp;</type>
          <declname>particle_io_flags</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>tiles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>np</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="390" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="390" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__detail_1a4a6935cf13276f19d1db874c158caf22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class PC</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void amrex::particle_detail::packIOData</definition>
        <argsstring>(Vector&lt; int &gt; &amp;idata, Vector&lt; ParticleReal &gt; &amp;rdata, const PC &amp;pc, int lev, int grid, const Vector&lt; int &gt; &amp;write_real_comp, const Vector&lt; int &gt; &amp;write_int_comp, const Vector&lt; std::map&lt; std::pair&lt; int, int &gt;, typename PC::IntVector &gt; &gt; &amp;particle_io_flags, const Vector&lt; int &gt; &amp;tiles, int np, bool is_checkpoint)</argsstring>
        <name>packIOData</name>
        <qualifiedname>amrex::particle_detail::packIOData</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>idata</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; ParticleReal &gt; &amp;</type>
          <declname>rdata</declname>
        </param>
        <param>
          <type>const PC &amp;</type>
          <declname>pc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>grid</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>write_real_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>write_int_comp</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::map&lt; std::pair&lt; int, int &gt;, typename PC::IntVector &gt; &gt; &amp;</type>
          <declname>particle_io_flags</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>tiles</declname>
        </param>
        <param>
          <type>int</type>
          <declname>np</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_checkpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" line="434" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_WriteBinaryParticleData.H" bodystart="434" bodyend="456"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleMesh.H" line="12" column="1"/>
  </compounddef>
</doxygen>
