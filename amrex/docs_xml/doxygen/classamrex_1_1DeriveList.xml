<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classamrex_1_1DeriveList" kind="class" language="C++" prot="public">
    <compoundname>amrex::DeriveList</compoundname>
    <includes refid="AMReX__Derive_8H" local="no">AMReX_Derive.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1DeriveList_1ace36f314eae21bef0f4f97e17ba3982a" prot="private" static="no" mutable="no">
        <type>std::list&lt; <ref refid="classamrex_1_1DeriveRec" kindref="compound">DeriveRec</ref> &gt;</type>
        <definition>std::list&lt;DeriveRec&gt; amrex::DeriveList::lst</definition>
        <argsstring></argsstring>
        <name>lst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="471" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="471" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a49b50b2297d6b5830f4bea151ae7a2de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DeriveList::DeriveList</definition>
        <argsstring>()=default</argsstring>
        <name>DeriveList</name>
        <briefdescription>
<para>The default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="348" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a589e11cf023f31b9678c0feabcf8aeeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DeriveList::~DeriveList</definition>
        <argsstring>()=default</argsstring>
        <name>~DeriveList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="350" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1ae3d1c1aaf168221dbb217d20f23d4868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DeriveList::DeriveList</definition>
        <argsstring>(const DeriveList &amp;)=delete</argsstring>
        <name>DeriveList</name>
        <param>
          <type>const <ref refid="classamrex_1_1DeriveList" kindref="compound">DeriveList</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="351" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a4942c680a576538cc99c9096947c074e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DeriveList::DeriveList</definition>
        <argsstring>(DeriveList &amp;&amp;)=delete</argsstring>
        <name>DeriveList</name>
        <param>
          <type><ref refid="classamrex_1_1DeriveList" kindref="compound">DeriveList</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="352" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a7088f7c6f612cf558efb4db7cb7032bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DeriveList" kindref="compound">DeriveList</ref> &amp;</type>
        <definition>DeriveList&amp; amrex::DeriveList::operator=</definition>
        <argsstring>(const DeriveList &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1DeriveList" kindref="compound">DeriveList</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="353" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a85a8d2ceac5a6512561c787c0995c661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DeriveList" kindref="compound">DeriveList</ref> &amp;</type>
        <definition>DeriveList&amp; amrex::DeriveList::operator=</definition>
        <argsstring>(DeriveList &amp;&amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1DeriveList" kindref="compound">DeriveList</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="354" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1ae2bbc9a653c1a437f677755dc5e31ced" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::DeriveList::canDerive</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>canDerive</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Determines whether quantity identified by &lt;name&gt; is in the registry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="361" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="424" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a6ff8692064ee148c07daeec4c5f2620b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DeriveRec" kindref="compound">DeriveRec</ref> *</type>
        <definition>const DeriveRec * amrex::DeriveList::get</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Access the particular record in registry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="368" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="443" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a67e6992cd34edbd374c791a9f26aa6dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveList::add</definition>
        <argsstring>(const std::string &amp;name, IndexType result_type, int nvar_derive, DeriveFunc der_func, const DeriveRec::DeriveBoxMap &amp;bx_map, Interpolater *interp=&amp;pc_interp)</argsstring>
        <name>add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>result_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ac7d6bf4b6824f474320123285acc5065" kindref="member">DeriveFunc</ref></type>
          <declname>der_func</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DeriveRec_1a7f8f64bd1d7de66c8300def033e45fb9" kindref="member">DeriveRec::DeriveBoxMap</ref> &amp;</type>
          <declname>bx_map</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>&amp;<ref refid="namespaceamrex_1ac9a0604c88f7d92212acaf069617affa" kindref="member">pc_interp</ref></defval>
        </param>
        <briefdescription>
<para>Adds another entry to the registry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_type</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar_derive</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>der_func</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>box_map</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="380" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="339" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a037563cc456f0d1110303104c1caa678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveList::add</definition>
        <argsstring>(const std::string &amp;name, IndexType result_type, int nvar_derive, DeriveFunc3D der_func_3d, const DeriveRec::DeriveBoxMap &amp;bx_map, Interpolater *interp=&amp;pc_interp)</argsstring>
        <name>add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>result_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a008867a6f88e4144e28dfb6a738f5549" kindref="member">DeriveFunc3D</ref></type>
          <declname>der_func_3d</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DeriveRec_1a7f8f64bd1d7de66c8300def033e45fb9" kindref="member">DeriveRec::DeriveBoxMap</ref> &amp;</type>
          <declname>bx_map</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>&amp;<ref refid="namespaceamrex_1ac9a0604c88f7d92212acaf069617affa" kindref="member">pc_interp</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="387" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="350" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a9054e6ec3c0a6023bce28684ff08e266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveList::add</definition>
        <argsstring>(const std::string &amp;name, IndexType result_type, int nvar_derive, const DeriveFuncFab &amp;der_func_fab, const DeriveRec::DeriveBoxMap &amp;bx_map, Interpolater *interp=&amp;pc_interp)</argsstring>
        <name>add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>result_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a7f6a90da175c5d3eb9612d6934849087" kindref="member">DeriveFuncFab</ref> &amp;</type>
          <declname>der_func_fab</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DeriveRec_1a7f8f64bd1d7de66c8300def033e45fb9" kindref="member">DeriveRec::DeriveBoxMap</ref> &amp;</type>
          <declname>bx_map</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>&amp;<ref refid="namespaceamrex_1ac9a0604c88f7d92212acaf069617affa" kindref="member">pc_interp</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="394" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="361" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a7aad1dda33fe7f823465f2995173187c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveList::add</definition>
        <argsstring>(const std::string &amp;name, IndexType result_type, int nvar_derive, const DeriveRec::DeriveBoxMap &amp;box_map=&amp;DeriveRec::TheSameBox)</argsstring>
        <name>add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>result_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DeriveRec_1a7f8f64bd1d7de66c8300def033e45fb9" kindref="member">DeriveRec::DeriveBoxMap</ref> &amp;</type>
          <declname>box_map</declname>
          <defval>&amp;<ref refid="classamrex_1_1DeriveRec_1a84376910b355f3a4b74220bbdf410328" kindref="member">DeriveRec::TheSameBox</ref></defval>
        </param>
        <briefdescription>
<para>This version doesn&apos;t take a Fortran function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_type</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar_derive</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>box_map</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="410" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="373" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a31ca60cd539cff86b71aa646f45cbcb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveList::add</definition>
        <argsstring>(const std::string &amp;name, IndexType res_typ, int nvar_derive, Vector&lt; std::string &gt; const &amp;vars, DeriveFunc der_func, const DeriveRec::DeriveBoxMap &amp;bx_map, Interpolater *interp=&amp;pc_interp)</argsstring>
        <name>add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>res_typ</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; const &amp;</type>
          <declname>vars</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ac7d6bf4b6824f474320123285acc5065" kindref="member">DeriveFunc</ref></type>
          <declname>der_func</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DeriveRec_1a7f8f64bd1d7de66c8300def033e45fb9" kindref="member">DeriveRec::DeriveBoxMap</ref> &amp;</type>
          <declname>bx_map</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>&amp;<ref refid="namespaceamrex_1ac9a0604c88f7d92212acaf069617affa" kindref="member">pc_interp</ref></defval>
        </param>
        <briefdescription>
<para>Adds another entry to the registry. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_type</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar_derive</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>var_names</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>der_func</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>box_map</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="426" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="382" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a878ee45a08bd1438e12d5723de2e6a74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveList::add</definition>
        <argsstring>(const std::string &amp;name, IndexType res_typ, int nvar_derive, Vector&lt; std::string &gt; const &amp;vars, DeriveFunc3D der_func_3d, const DeriveRec::DeriveBoxMap &amp;bx_map, Interpolater *interp=&amp;pc_interp)</argsstring>
        <name>add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>res_typ</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; const &amp;</type>
          <declname>vars</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a008867a6f88e4144e28dfb6a738f5549" kindref="member">DeriveFunc3D</ref></type>
          <declname>der_func_3d</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DeriveRec_1a7f8f64bd1d7de66c8300def033e45fb9" kindref="member">DeriveRec::DeriveBoxMap</ref> &amp;</type>
          <declname>bx_map</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>&amp;<ref refid="namespaceamrex_1ac9a0604c88f7d92212acaf069617affa" kindref="member">pc_interp</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="434" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="394" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a438fe416440bd85fb95b732dc8c2224f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveList::add</definition>
        <argsstring>(const std::string &amp;name, IndexType res_typ, int nvar_derive, Vector&lt; std::string &gt; const &amp;vars, const DeriveFuncFab &amp;der_func_fab, const DeriveRec::DeriveBoxMap &amp;bx_map, Interpolater *interp=&amp;pc_interp)</argsstring>
        <name>add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>res_typ</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; const &amp;</type>
          <declname>vars</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a7f6a90da175c5d3eb9612d6934849087" kindref="member">DeriveFuncFab</ref> &amp;</type>
          <declname>der_func_fab</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DeriveRec_1a7f8f64bd1d7de66c8300def033e45fb9" kindref="member">DeriveRec::DeriveBoxMap</ref> &amp;</type>
          <declname>bx_map</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>&amp;<ref refid="namespaceamrex_1ac9a0604c88f7d92212acaf069617affa" kindref="member">pc_interp</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="442" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="406" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1aec6008854ed23b1736d8bd061f196de7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveList::addComponent</definition>
        <argsstring>(const std::string &amp;name, const DescriptorList &amp;d_list, int state_indx, int s_comp, int n_comp)</argsstring>
        <name>addComponent</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DescriptorList" kindref="compound">DescriptorList</ref> &amp;</type>
          <declname>d_list</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>s_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n_comp</declname>
        </param>
        <briefdescription>
<para>Adds another StateRange to the <ref refid="classamrex_1_1DeriveRec" kindref="compound">DeriveRec</ref> identified by &lt;name&gt;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d_list</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state_indx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="459" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="462" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a687b60c01f5addf31abee4e0a6510873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; <ref refid="classamrex_1_1DeriveRec" kindref="compound">DeriveRec</ref> &gt; &amp;</type>
        <definition>std::list&lt; DeriveRec &gt; &amp; amrex::DeriveList::dlist</definition>
        <argsstring>()</argsstring>
        <name>dlist</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="465" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="418" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1aca9fade63e5fd3aeda71e2c7d58f933d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveList::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="467" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="467" bodyend="467"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A list of DeriveRecs. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classamrex_1_1DeriveList" kindref="compound">DeriveList</ref> manages and provides access to the list of DeriveRecs. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>amrex::DeriveList</label>
        <link refid="classamrex_1_1DeriveList"/>
        <childnode refid="2" relation="usage">
          <edgelabel>lst</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>amrex::InterpBase</label>
        <link refid="classamrex_1_1InterpBase"/>
      </node>
      <node id="6">
        <label>T</label>
      </node>
      <node id="11">
        <label>amrex::DeriveRec::StateRange</label>
        <link refid="structamrex_1_1DeriveRec_1_1StateRange"/>
        <childnode refid="11" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="6" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>std::list&lt; amrex::DeriveRec &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="7">
        <label>amrex::Interpolater</label>
        <link refid="classamrex_1_1Interpolater"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::DeriveRec</label>
        <link refid="classamrex_1_1DeriveRec"/>
        <childnode refid="4" relation="usage">
          <edgelabel>variable_names</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>mapper</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>derive_name</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>rng</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>der_type</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="4">
        <label>amrex::Vector&lt; std::string &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>std::string</label>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="341" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="342" bodyend="472"/>
    <listofallmembers>
      <member refid="classamrex_1_1DeriveList_1a67e6992cd34edbd374c791a9f26aa6dc" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>add</name></member>
      <member refid="classamrex_1_1DeriveList_1a037563cc456f0d1110303104c1caa678" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>add</name></member>
      <member refid="classamrex_1_1DeriveList_1a9054e6ec3c0a6023bce28684ff08e266" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>add</name></member>
      <member refid="classamrex_1_1DeriveList_1a7aad1dda33fe7f823465f2995173187c" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>add</name></member>
      <member refid="classamrex_1_1DeriveList_1a31ca60cd539cff86b71aa646f45cbcb6" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>add</name></member>
      <member refid="classamrex_1_1DeriveList_1a878ee45a08bd1438e12d5723de2e6a74" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>add</name></member>
      <member refid="classamrex_1_1DeriveList_1a438fe416440bd85fb95b732dc8c2224f" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>add</name></member>
      <member refid="classamrex_1_1DeriveList_1aec6008854ed23b1736d8bd061f196de7" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>addComponent</name></member>
      <member refid="classamrex_1_1DeriveList_1ae2bbc9a653c1a437f677755dc5e31ced" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>canDerive</name></member>
      <member refid="classamrex_1_1DeriveList_1aca9fade63e5fd3aeda71e2c7d58f933d" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>clear</name></member>
      <member refid="classamrex_1_1DeriveList_1a49b50b2297d6b5830f4bea151ae7a2de" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>DeriveList</name></member>
      <member refid="classamrex_1_1DeriveList_1ae3d1c1aaf168221dbb217d20f23d4868" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>DeriveList</name></member>
      <member refid="classamrex_1_1DeriveList_1a4942c680a576538cc99c9096947c074e" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>DeriveList</name></member>
      <member refid="classamrex_1_1DeriveList_1a687b60c01f5addf31abee4e0a6510873" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>dlist</name></member>
      <member refid="classamrex_1_1DeriveList_1a6ff8692064ee148c07daeec4c5f2620b" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>get</name></member>
      <member refid="classamrex_1_1DeriveList_1ace36f314eae21bef0f4f97e17ba3982a" prot="private" virt="non-virtual"><scope>amrex::DeriveList</scope><name>lst</name></member>
      <member refid="classamrex_1_1DeriveList_1a7088f7c6f612cf558efb4db7cb7032bd" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>operator=</name></member>
      <member refid="classamrex_1_1DeriveList_1a85a8d2ceac5a6512561c787c0995c661" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>operator=</name></member>
      <member refid="classamrex_1_1DeriveList_1a589e11cf023f31b9678c0feabcf8aeeb" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>~DeriveList</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
