<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1DeriveList" kind="class" language="C++" prot="public">
    <compoundname>amrex::DeriveList</compoundname>
    <includes refid="AMReX__Derive_8H" local="no">AMReX_Derive.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1DeriveList_1ace36f314eae21bef0f4f97e17ba3982a" prot="private" static="no" mutable="no">
        <type>std::list&lt; <ref refid="classamrex_1_1DeriveRec" kindref="compound">DeriveRec</ref> &gt;</type>
        <definition>std::list&lt;DeriveRec&gt; amrex::DeriveList::lst</definition>
        <argsstring></argsstring>
        <name>lst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="466" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="466" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a7443c4cddcba1d236e77d470446a3b98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DeriveList::DeriveList</definition>
        <argsstring>()</argsstring>
        <name>DeriveList</name>
        <briefdescription>
<para>The default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="346" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="337" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1ae3d1c1aaf168221dbb217d20f23d4868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::DeriveList::DeriveList</definition>
        <argsstring>(const DeriveList &amp;)=delete</argsstring>
        <name>DeriveList</name>
        <param>
          <type>const <ref refid="classamrex_1_1DeriveList" kindref="compound">DeriveList</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="348" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a7088f7c6f612cf558efb4db7cb7032bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1DeriveList" kindref="compound">DeriveList</ref> &amp;</type>
        <definition>DeriveList&amp; amrex::DeriveList::operator=</definition>
        <argsstring>(const DeriveList &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1DeriveList" kindref="compound">DeriveList</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1ae2bbc9a653c1a437f677755dc5e31ced" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::DeriveList::canDerive</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>canDerive</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Determines whether quantity identified by &lt;name&gt; is in the registry. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="356" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="425" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a6ff8692064ee148c07daeec4c5f2620b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DeriveRec" kindref="compound">DeriveRec</ref> *</type>
        <definition>const DeriveRec * amrex::DeriveList::get</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Access the particular record in registry. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="363" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="438" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a975d5b87a3bb5599c7598ae8ad00c3ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveList::add</definition>
        <argsstring>(const std::string &amp;name, IndexType result_type, int nvar_derive, DeriveFunc der_func, DeriveRec::DeriveBoxMap box_map, Interpolater *interp=&amp;pc_interp)</argsstring>
        <name>add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>result_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a046a83e139b61c9ec447bd89eed50967" kindref="member">DeriveFunc</ref></type>
          <declname>der_func</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1DeriveRec_1af6e83ba233e4a7212086037a7b7203e4" kindref="member">DeriveRec::DeriveBoxMap</ref></type>
          <declname>box_map</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>&amp;<ref refid="namespaceamrex_1add23b3df81e9353cea327552654d630b" kindref="member">pc_interp</ref></defval>
        </param>
        <briefdescription>
<para>Adds another entry to the registry. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_type</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar_derive</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>der_func</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>box_map</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="375" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="340" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a79bb35adbccb390093944532c605f823" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveList::add</definition>
        <argsstring>(const std::string &amp;name, IndexType result_type, int nvar_derive, DeriveFunc3D der_func_3d, DeriveRec::DeriveBoxMap box_map, Interpolater *interp=&amp;pc_interp)</argsstring>
        <name>add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>result_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1abf838b25d605cefbf6150bc883f4741d" kindref="member">DeriveFunc3D</ref></type>
          <declname>der_func_3d</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1DeriveRec_1af6e83ba233e4a7212086037a7b7203e4" kindref="member">DeriveRec::DeriveBoxMap</ref></type>
          <declname>box_map</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>&amp;<ref refid="namespaceamrex_1add23b3df81e9353cea327552654d630b" kindref="member">pc_interp</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="382" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="351" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a06d459c523dcea94b914d4a7ee2371a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveList::add</definition>
        <argsstring>(const std::string &amp;name, IndexType result_type, int nvar_derive, DeriveFuncFab der_func_fab, DeriveRec::DeriveBoxMap box_map, Interpolater *interp=&amp;pc_interp)</argsstring>
        <name>add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>result_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a83e8cbe20f4d807987849da5431ba2c5" kindref="member">DeriveFuncFab</ref></type>
          <declname>der_func_fab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1DeriveRec_1af6e83ba233e4a7212086037a7b7203e4" kindref="member">DeriveRec::DeriveBoxMap</ref></type>
          <declname>box_map</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>&amp;<ref refid="namespaceamrex_1add23b3df81e9353cea327552654d630b" kindref="member">pc_interp</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="389" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="362" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1adcaeaf5b2f36e2fece10a957920ea1d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveList::add</definition>
        <argsstring>(const std::string &amp;name, IndexType result_type, int nvar_derive, DeriveRec::DeriveBoxMap box_map=&amp;DeriveRec::TheSameBox)</argsstring>
        <name>add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>result_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1DeriveRec_1af6e83ba233e4a7212086037a7b7203e4" kindref="member">DeriveRec::DeriveBoxMap</ref></type>
          <declname>box_map</declname>
          <defval>&amp;<ref refid="classamrex_1_1DeriveRec_1a84376910b355f3a4b74220bbdf410328" kindref="member">DeriveRec::TheSameBox</ref></defval>
        </param>
        <briefdescription>
<para>This version doesn&apos;t take a Fortran function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_type</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar_derive</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>box_map</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="405" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="374" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a3311e2c97155ab47b00b313ae0413a6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveList::add</definition>
        <argsstring>(const std::string &amp;name, IndexType result_type, int nvar_derive, Vector&lt; std::string &gt; &amp;var_names, DeriveFunc der_func, DeriveRec::DeriveBoxMap box_map, Interpolater *interp=&amp;pc_interp)</argsstring>
        <name>add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>result_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>var_names</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a046a83e139b61c9ec447bd89eed50967" kindref="member">DeriveFunc</ref></type>
          <declname>der_func</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1DeriveRec_1af6e83ba233e4a7212086037a7b7203e4" kindref="member">DeriveRec::DeriveBoxMap</ref></type>
          <declname>box_map</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>&amp;<ref refid="namespaceamrex_1add23b3df81e9353cea327552654d630b" kindref="member">pc_interp</ref></defval>
        </param>
        <briefdescription>
<para>Adds another entry to the registry. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result_type</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nvar_derive</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>var_names</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>der_func</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>box_map</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="421" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="383" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a53dfeba01b2b2504d71d2fc625d859fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveList::add</definition>
        <argsstring>(const std::string &amp;name, IndexType result_type, int nvar_derive, Vector&lt; std::string &gt; &amp;var_names, DeriveFunc3D der_func_3d, DeriveRec::DeriveBoxMap box_map, Interpolater *interp=&amp;pc_interp)</argsstring>
        <name>add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>result_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>var_names</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1abf838b25d605cefbf6150bc883f4741d" kindref="member">DeriveFunc3D</ref></type>
          <declname>der_func_3d</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1DeriveRec_1af6e83ba233e4a7212086037a7b7203e4" kindref="member">DeriveRec::DeriveBoxMap</ref></type>
          <declname>box_map</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>&amp;<ref refid="namespaceamrex_1add23b3df81e9353cea327552654d630b" kindref="member">pc_interp</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="429" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="395" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a3e3f184ffd0052c2e873825018ca0387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveList::add</definition>
        <argsstring>(const std::string &amp;name, IndexType result_type, int nvar_derive, Vector&lt; std::string &gt; &amp;var_names, DeriveFuncFab der_func_fab, DeriveRec::DeriveBoxMap box_map, Interpolater *interp=&amp;pc_interp)</argsstring>
        <name>add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
          <declname>result_type</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar_derive</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; std::string &gt; &amp;</type>
          <declname>var_names</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a83e8cbe20f4d807987849da5431ba2c5" kindref="member">DeriveFuncFab</ref></type>
          <declname>der_func_fab</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1DeriveRec_1af6e83ba233e4a7212086037a7b7203e4" kindref="member">DeriveRec::DeriveBoxMap</ref></type>
          <declname>box_map</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Interpolater" kindref="compound">Interpolater</ref> *</type>
          <declname>interp</declname>
          <defval>&amp;<ref refid="namespaceamrex_1add23b3df81e9353cea327552654d630b" kindref="member">pc_interp</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="437" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="407" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a1d0c22b55e3ec0b19f14da3262df6ae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveList::addComponent</definition>
        <argsstring>(const std::string &amp;name, const DescriptorList &amp;d_list, int state_indx, int start_comp, int ncomp)</argsstring>
        <name>addComponent</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DescriptorList" kindref="compound">DescriptorList</ref> &amp;</type>
          <declname>d_list</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>state_indx</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>start_comp</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
<para>Adds another StateRange to the <ref refid="classamrex_1_1DeriveRec" kindref="compound">DeriveRec</ref> identified by &lt;name&gt;. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d_list</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state_indx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start_comp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ncomp</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="454" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="451" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1a687b60c01f5addf31abee4e0a6510873" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::list&lt; <ref refid="classamrex_1_1DeriveRec" kindref="compound">DeriveRec</ref> &gt; &amp;</type>
        <definition>std::list&lt; DeriveRec &gt; &amp; amrex::DeriveList::dlist</definition>
        <argsstring>()</argsstring>
        <name>dlist</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="460" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.cpp" bodystart="419" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1DeriveList_1aca9fade63e5fd3aeda71e2c7d58f933d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::DeriveList::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="462" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="462" bodyend="462"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A list of DeriveRecs. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="classamrex_1_1DeriveList" kindref="compound">DeriveList</ref> manages and provides access to the list of DeriveRecs. </para>    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" line="340" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Amr/AMReX_Derive.H" bodystart="339" bodyend="467"/>
    <listofallmembers>
      <member refid="classamrex_1_1DeriveList_1a975d5b87a3bb5599c7598ae8ad00c3ad" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>add</name></member>
      <member refid="classamrex_1_1DeriveList_1a79bb35adbccb390093944532c605f823" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>add</name></member>
      <member refid="classamrex_1_1DeriveList_1a06d459c523dcea94b914d4a7ee2371a7" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>add</name></member>
      <member refid="classamrex_1_1DeriveList_1adcaeaf5b2f36e2fece10a957920ea1d6" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>add</name></member>
      <member refid="classamrex_1_1DeriveList_1a3311e2c97155ab47b00b313ae0413a6a" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>add</name></member>
      <member refid="classamrex_1_1DeriveList_1a53dfeba01b2b2504d71d2fc625d859fc" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>add</name></member>
      <member refid="classamrex_1_1DeriveList_1a3e3f184ffd0052c2e873825018ca0387" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>add</name></member>
      <member refid="classamrex_1_1DeriveList_1a1d0c22b55e3ec0b19f14da3262df6ae1" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>addComponent</name></member>
      <member refid="classamrex_1_1DeriveList_1ae2bbc9a653c1a437f677755dc5e31ced" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>canDerive</name></member>
      <member refid="classamrex_1_1DeriveList_1aca9fade63e5fd3aeda71e2c7d58f933d" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>clear</name></member>
      <member refid="classamrex_1_1DeriveList_1a7443c4cddcba1d236e77d470446a3b98" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>DeriveList</name></member>
      <member refid="classamrex_1_1DeriveList_1ae3d1c1aaf168221dbb217d20f23d4868" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>DeriveList</name></member>
      <member refid="classamrex_1_1DeriveList_1a687b60c01f5addf31abee4e0a6510873" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>dlist</name></member>
      <member refid="classamrex_1_1DeriveList_1a6ff8692064ee148c07daeec4c5f2620b" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>get</name></member>
      <member refid="classamrex_1_1DeriveList_1ace36f314eae21bef0f4f97e17ba3982a" prot="private" virt="non-virtual"><scope>amrex::DeriveList</scope><name>lst</name></member>
      <member refid="classamrex_1_1DeriveList_1a7088f7c6f612cf558efb4db7cb7032bd" prot="public" virt="non-virtual"><scope>amrex::DeriveList</scope><name>operator=</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
