<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1AmrMesh" kind="class" language="C++" prot="public">
    <compoundname>amrex::AmrMesh</compoundname>
    <basecompoundref refid="structamrex_1_1AmrInfo" prot="protected" virt="non-virtual">amrex::AmrInfo</basecompoundref>
    <derivedcompoundref refid="classamrex_1_1AmrCore" prot="public" virt="non-virtual">amrex::AmrCore</derivedcompoundref>
    <includes refid="AMReX__AmrMesh_8H" local="no">AMReX_AmrMesh.H</includes>
    <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1a7a466d1cfea1c18c35128fb5a7c5793f" prot="protected" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrMesh::finest_level</definition>
        <argsstring></argsstring>
        <name>finest_level</name>
        <qualifiedname>amrex::AmrMesh::finest_level</qualifiedname>
        <briefdescription>
<para>Current finest level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="268" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1a239ef06043779ea301395ae14876d6cb" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt;</type>
        <definition>Vector&lt;Geometry&gt; amrex::AmrMesh::geom</definition>
        <argsstring></argsstring>
        <name>geom</name>
        <qualifiedname>amrex::AmrMesh::geom</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="269" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1ab7f8457c3e5a0dc0295247f005e5a107" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt;</type>
        <definition>Vector&lt;DistributionMapping&gt; amrex::AmrMesh::dmap</definition>
        <argsstring></argsstring>
        <name>dmap</name>
        <qualifiedname>amrex::AmrMesh::dmap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="270" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1ae53347adc8a239367f153d3705a8ed25" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt;</type>
        <definition>Vector&lt;BoxArray&gt; amrex::AmrMesh::grids</definition>
        <argsstring></argsstring>
        <name>grids</name>
        <qualifiedname>amrex::AmrMesh::grids</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="271" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1a2ddfbb3a69cf479f1d28f704d19e4f96" prot="protected" static="no" mutable="no">
        <type>unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>unsigned int amrex::AmrMesh::num_setdm</definition>
        <argsstring></argsstring>
        <name>num_setdm</name>
        <qualifiedname>amrex::AmrMesh::num_setdm</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="278" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1a450db80ef9bd209ebb61cb47ff12ca22" prot="protected" static="no" mutable="no">
        <type>unsigned <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>unsigned int amrex::AmrMesh::num_setba</definition>
        <argsstring></argsstring>
        <name>num_setba</name>
        <qualifiedname>amrex::AmrMesh::num_setba</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="279" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="279" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1AmrMesh_1a3ea7e0bfdd5d74d622f9eef243829299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, AmrMesh const &amp;amr_mesh)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>amrex::AmrMesh::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1AmrMesh" kindref="compound">AmrMesh</ref> const &amp;</type>
          <declname>amr_mesh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="65" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="1236" bodyend="1261"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a163e8a28e1f841b2c174d6d34664e2d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrMesh::AmrMesh</definition>
        <argsstring>()</argsstring>
        <name>AmrMesh</name>
        <qualifiedname>amrex::AmrMesh::AmrMesh</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="67" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="18" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a58e7077dec217e4bdad1f5221e6229cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrMesh::AmrMesh</definition>
        <argsstring>(const RealBox *rb, int max_level_in, const Vector&lt; int &gt; &amp;n_cell_in, int coord=-1, Vector&lt; IntVect &gt; refrat=Vector&lt; IntVect &gt;(), const int *is_per=nullptr)</argsstring>
        <name>AmrMesh</name>
        <qualifiedname>amrex::AmrMesh::AmrMesh</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> *</type>
          <declname>rb</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>max_level_in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>n_cell_in</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt;</type>
          <declname>refrat</declname>
          <defval><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt;()</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>is_per</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="69" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="26" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a82b57f9cf8e12e9542c14f7d00a986ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrMesh::AmrMesh</definition>
        <argsstring>(const RealBox &amp;rb, int max_level_in, const Vector&lt; int &gt; &amp;n_cell_in, int coord, Vector&lt; IntVect &gt; const &amp;a_refrat, Array&lt; int, AMREX_SPACEDIM &gt; const &amp;is_per)</argsstring>
        <name>AmrMesh</name>
        <qualifiedname>amrex::AmrMesh::AmrMesh</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>rb</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>max_level_in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>n_cell_in</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt; const &amp;</type>
          <declname>a_refrat</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>is_per</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="74" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="34" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ac0486abd196135fb9ac41748f2d2f1c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrMesh::AmrMesh</definition>
        <argsstring>(Geometry const &amp;level_0_geom, AmrInfo const &amp;amr_info)</argsstring>
        <name>AmrMesh</name>
        <qualifiedname>amrex::AmrMesh::AmrMesh</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> const &amp;</type>
          <declname>level_0_geom</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1AmrInfo" kindref="compound">AmrInfo</ref> const &amp;</type>
          <declname>amr_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="79" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="43" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1aa3d1b57d3957feca7d0f897ec2e62824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrMesh::AmrMesh</definition>
        <argsstring>(const AmrMesh &amp;rhs)=delete</argsstring>
        <name>AmrMesh</name>
        <qualifiedname>amrex::AmrMesh::AmrMesh</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1AmrMesh" kindref="compound">AmrMesh</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="81" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1aea11957c1545724bc01fe4b8840bde05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1AmrMesh" kindref="compound">AmrMesh</ref> &amp;</type>
        <definition>AmrMesh &amp; amrex::AmrMesh::operator=</definition>
        <argsstring>(const AmrMesh &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::AmrMesh::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1AmrMesh" kindref="compound">AmrMesh</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="82" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a43f67413ffdd911f5a91e9041bb20d0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrMesh::AmrMesh</definition>
        <argsstring>(AmrMesh &amp;&amp;rhs)=default</argsstring>
        <name>AmrMesh</name>
        <qualifiedname>amrex::AmrMesh::AmrMesh</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1AmrMesh" kindref="compound">AmrMesh</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="84" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1afae60a3f920a8839a05ca8b70d041cb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1AmrMesh" kindref="compound">AmrMesh</ref> &amp;</type>
        <definition>AmrMesh &amp; amrex::AmrMesh::operator=</definition>
        <argsstring>(AmrMesh &amp;&amp;rhs)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::AmrMesh::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1AmrMesh" kindref="compound">AmrMesh</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="85" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a8fb2fefeadc3653f3f263d32fd195460" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual amrex::AmrMesh::~AmrMesh</definition>
        <argsstring>()=default</argsstring>
        <name>~AmrMesh</name>
        <qualifiedname>amrex::AmrMesh::~AmrMesh</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="87" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a9b78b807755b822ba0c46ec0e3150089" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrMesh::Verbose</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Verbose</name>
        <qualifiedname>amrex::AmrMesh::Verbose</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="89" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a2b5ebb9f738e77dcc2f99dfe4e4e91d6" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrMesh::maxLevel</definition>
        <argsstring>() const noexcept</argsstring>
        <name>maxLevel</name>
        <qualifiedname>amrex::AmrMesh::maxLevel</qualifiedname>
        <briefdescription>
<para>Return the max level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="92" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a71cf25bbc89fd5fd140d6a7090a8b451" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrMesh::finestLevel</definition>
        <argsstring>() const noexcept</argsstring>
        <name>finestLevel</name>
        <qualifiedname>amrex::AmrMesh::finestLevel</qualifiedname>
        <briefdescription>
<para>Return the finest level. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="95" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a848a89635a0f509800a5d912ef7b4f0b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::AmrMesh::refRatio</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>refRatio</name>
        <qualifiedname>amrex::AmrMesh::refRatio</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Return the refinement ratio for level lev. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="98" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a8d91fffbf09ac3c696d1f7cffee76b2c" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrMesh::MaxRefRatio</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>MaxRefRatio</name>
        <qualifiedname>amrex::AmrMesh::MaxRefRatio</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Return the maximum refinement ratio in any direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="101" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="389" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ac64a8b306d5402acee8ccac597802544" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt; &amp;</type>
        <definition>const Vector&lt; IntVect &gt; &amp; amrex::AmrMesh::refRatio</definition>
        <argsstring>() const noexcept</argsstring>
        <name>refRatio</name>
        <qualifiedname>amrex::AmrMesh::refRatio</qualifiedname>
        <briefdescription>
<para>Return refinement ratios between all levels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="104" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ac66092f390576239dbd6b146d1c9d470" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
        <definition>const Vector&lt; Geometry &gt; &amp; amrex::AmrMesh::Geom</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Geom</name>
        <qualifiedname>amrex::AmrMesh::Geom</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="106" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a27ca4cbe96ff339a425e91bb4ae1f45a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
        <definition>const Vector&lt; DistributionMapping &gt; &amp; amrex::AmrMesh::DistributionMap</definition>
        <argsstring>() const noexcept</argsstring>
        <name>DistributionMap</name>
        <qualifiedname>amrex::AmrMesh::DistributionMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="107" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1af3b5764e8954198273eef38dda396bb9" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
        <definition>const Vector&lt; BoxArray &gt; &amp; amrex::AmrMesh::boxArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>boxArray</name>
        <qualifiedname>amrex::AmrMesh::boxArray</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="108" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a11ca9a351a2fbfd2e5c9fceae401d884" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry &amp; amrex::AmrMesh::Geom</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>Geom</name>
        <qualifiedname>amrex::AmrMesh::Geom</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="110" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1aa7a6c428272691c21bf8758a26a75d29" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping &amp; amrex::AmrMesh::DistributionMap</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>DistributionMap</name>
        <qualifiedname>amrex::AmrMesh::DistributionMap</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="111" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a3f7c3876bd850fa1faf6c0c60db24591" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray &amp; amrex::AmrMesh::boxArray</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>boxArray</name>
        <qualifiedname>amrex::AmrMesh::boxArray</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="112" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a678d8149e1146e2ec11235cbcac960a1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt;</type>
        <definition>Vector&lt; Geometry &gt; amrex::AmrMesh::Geom</definition>
        <argsstring>(int a_coarsest_lev, int a_finest_lev) const noexcept</argsstring>
        <name>Geom</name>
        <qualifiedname>amrex::AmrMesh::Geom</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_coarsest_lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_finest_lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="114" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="114" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a9b02edc981bf4532385af8a8cf58568a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt;</type>
        <definition>Vector&lt; BoxArray &gt; amrex::AmrMesh::boxArray</definition>
        <argsstring>(int a_coarsest_lev, int a_finest_lev) const noexcept</argsstring>
        <name>boxArray</name>
        <qualifiedname>amrex::AmrMesh::boxArray</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_coarsest_lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_finest_lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="122" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="122" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a66d6be8c194855887f62be467f289223" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt;</type>
        <definition>Vector&lt; DistributionMapping &gt; amrex::AmrMesh::DistributionMap</definition>
        <argsstring>(int a_coarsest_lev, int a_finest_lev) const noexcept</argsstring>
        <name>DistributionMap</name>
        <qualifiedname>amrex::AmrMesh::DistributionMap</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_coarsest_lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>a_finest_lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="130" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="130" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1acc22d9996bf94c0f71cc6fec7307dbfd" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
        <definition>Vector&lt; Geometry &gt; &amp; amrex::AmrMesh::Geom</definition>
        <argsstring>() noexcept</argsstring>
        <name>Geom</name>
        <qualifiedname>amrex::AmrMesh::Geom</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="139" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a7a6f9e6150f13252f90b47a22e755c93" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>Geometry &amp; amrex::AmrMesh::Geom</definition>
        <argsstring>(int lev) noexcept</argsstring>
        <name>Geom</name>
        <qualifiedname>amrex::AmrMesh::Geom</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="140" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a4612b4d9b23253095da92c3e323ffd73" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetMaxGridSize</definition>
        <argsstring>(int new_mgs) noexcept</argsstring>
        <name>SetMaxGridSize</name>
        <qualifiedname>amrex::AmrMesh::SetMaxGridSize</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>new_mgs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="142" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="142" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a964c875f4546f513fb285e2f90278473" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetMaxGridSize</definition>
        <argsstring>(const IntVect &amp;new_mgs) noexcept</argsstring>
        <name>SetMaxGridSize</name>
        <qualifiedname>amrex::AmrMesh::SetMaxGridSize</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>new_mgs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="145" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="145" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ae26f4d197dc68e2d26837b8ad0043dbe" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetMaxGridSize</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;new_mgs) noexcept</argsstring>
        <name>SetMaxGridSize</name>
        <qualifiedname>amrex::AmrMesh::SetMaxGridSize</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>new_mgs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="148" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="148" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ad6695b6090e726ea6bc405a7d3a75be8" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetMaxGridSize</definition>
        <argsstring>(const Vector&lt; IntVect &gt; &amp;new_mgs) noexcept</argsstring>
        <name>SetMaxGridSize</name>
        <qualifiedname>amrex::AmrMesh::SetMaxGridSize</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt; &amp;</type>
          <declname>new_mgs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="154" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="154" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1aba9a6c34f6e246926e9147ef3da5b535" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetBlockingFactor</definition>
        <argsstring>(int new_bf) noexcept</argsstring>
        <name>SetBlockingFactor</name>
        <qualifiedname>amrex::AmrMesh::SetBlockingFactor</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>new_bf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="158" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="158" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1adf01c926d4f55d291a5d5a0e0b48c348" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetBlockingFactor</definition>
        <argsstring>(const IntVect &amp;new_bf) noexcept</argsstring>
        <name>SetBlockingFactor</name>
        <qualifiedname>amrex::AmrMesh::SetBlockingFactor</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
          <declname>new_bf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="161" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="161" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a3818b75f890359e9a8042f7a3b9e4e21" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetBlockingFactor</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;new_bf) noexcept</argsstring>
        <name>SetBlockingFactor</name>
        <qualifiedname>amrex::AmrMesh::SetBlockingFactor</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>new_bf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="164" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="164" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a04ba4d303b52fe2f1db1e7e23fca5c06" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetBlockingFactor</definition>
        <argsstring>(const Vector&lt; IntVect &gt; &amp;new_bf) noexcept</argsstring>
        <name>SetBlockingFactor</name>
        <qualifiedname>amrex::AmrMesh::SetBlockingFactor</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt; &amp;</type>
          <declname>new_bf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="170" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="170" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a77c262385b1bd0bfc96fec96347c041a" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetGridEff</definition>
        <argsstring>(Real eff) noexcept</argsstring>
        <name>SetGridEff</name>
        <qualifiedname>amrex::AmrMesh::SetGridEff</qualifiedname>
        <param>
          <type>Real</type>
          <declname>eff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="174" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1aee314c43754854d98fc25ce6cd278796" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetNProper</definition>
        <argsstring>(int n) noexcept</argsstring>
        <name>SetNProper</name>
        <qualifiedname>amrex::AmrMesh::SetNProper</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="175" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="175" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ab40e510f5cd8deda45eb675b82494808" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetFinestLevel</definition>
        <argsstring>(int new_finest_level) noexcept</argsstring>
        <name>SetFinestLevel</name>
        <qualifiedname>amrex::AmrMesh::SetFinestLevel</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>new_finest_level</declname>
        </param>
        <briefdescription>
<para>Set ref_ratio would require rebuilding <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> objects. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="179" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="179" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a452a3c38dd51bc37e199abe772759a3b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetDistributionMap</definition>
        <argsstring>(int lev, const DistributionMapping &amp;dmap_in) noexcept</argsstring>
        <name>SetDistributionMap</name>
        <qualifiedname>amrex::AmrMesh::SetDistributionMap</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="180" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="399" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a404d43ca2363907df6d3206e892a220d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetBoxArray</definition>
        <argsstring>(int lev, const BoxArray &amp;ba_in) noexcept</argsstring>
        <name>SetBoxArray</name>
        <qualifiedname>amrex::AmrMesh::SetBoxArray</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="181" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="406" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1aa755628d0ad98daf37de1670e57d2364" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetGeometry</definition>
        <argsstring>(int lev, const Geometry &amp;geom_in) noexcept</argsstring>
        <name>SetGeometry</name>
        <qualifiedname>amrex::AmrMesh::SetGeometry</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="182" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="413" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a73c572b51cfc05238746fdac17e7b8c2" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrMesh::GetLevel</definition>
        <argsstring>(Box const &amp;domain) const noexcept</argsstring>
        <name>GetLevel</name>
        <qualifiedname>amrex::AmrMesh::GetLevel</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> const &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
<para>Given domain box, return AMR level. Return -1 if there is no match. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="185" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="419" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1af5ec08eb03bebbb7a0f37f2af4bbda5d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::ClearDistributionMap</definition>
        <argsstring>(int lev) noexcept</argsstring>
        <name>ClearDistributionMap</name>
        <qualifiedname>amrex::AmrMesh::ClearDistributionMap</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="187" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="429" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1afc5fde984a1cdd6fcfddb6ff26fb92f6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::ClearBoxArray</definition>
        <argsstring>(int lev) noexcept</argsstring>
        <name>ClearBoxArray</name>
        <qualifiedname>amrex::AmrMesh::ClearBoxArray</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="188" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="435" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ad5199bceb8775542859c6b51d0a2100c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrMesh::nErrorBuf</definition>
        <argsstring>(int lev, int direction=0) const noexcept</argsstring>
        <name>nErrorBuf</name>
        <qualifiedname>amrex::AmrMesh::nErrorBuf</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>direction</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the number of buffer cells (as a single integer) in error estimator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="191" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a42f924aaaf035585ddbe5b82fa24df88" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
        <definition>const IntVect &amp; amrex::AmrMesh::nErrorBufVect</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>nErrorBufVect</name>
        <qualifiedname>amrex::AmrMesh::nErrorBufVect</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Return the number of buffer cells (as an IntVect) in error estimator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="194" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="194" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a7bc5798a6ef2a0c27b0141112104e087" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::AmrMesh::gridEff</definition>
        <argsstring>() const noexcept</argsstring>
        <name>gridEff</name>
        <qualifiedname>amrex::AmrMesh::gridEff</qualifiedname>
        <briefdescription>
<para>Return the minimum allowable grid efficiency. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="197" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="197" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1aa1e59b567c58d9ba22c9e56f8138a22a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrMesh::nProper</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nProper</name>
        <qualifiedname>amrex::AmrMesh::nProper</qualifiedname>
        <briefdescription>
<para>Return the number of cells to define proper nesting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="200" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="200" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a6669f4946ec86b502c74f3891f3103cd" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
        <definition>const IntVect &amp; amrex::AmrMesh::blockingFactor</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>blockingFactor</name>
        <qualifiedname>amrex::AmrMesh::blockingFactor</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Return the blocking factor at level lev. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="203" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="203" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ab40f351500214ca7d2fae7afb843f65b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &amp;</type>
        <definition>const IntVect &amp; amrex::AmrMesh::maxGridSize</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>maxGridSize</name>
        <qualifiedname>amrex::AmrMesh::maxGridSize</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Return the largest allowable grid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="206" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="206" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a472f37d544bf28e75d2c05630969e554" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::AmrMesh::LevelDefined</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>LevelDefined</name>
        <qualifiedname>amrex::AmrMesh::LevelDefined</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="208" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="441" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1aee758e772b5c854d121923686d1d3949" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::AmrMesh::useFixedCoarseGrids</definition>
        <argsstring>() const noexcept</argsstring>
        <name>useFixedCoarseGrids</name>
        <qualifiedname>amrex::AmrMesh::useFixedCoarseGrids</qualifiedname>
        <briefdescription>
<para>Should we keep the coarser grids fixed (and not regrid those levels) at all? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="211" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="211" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a6ff4a09f169c29d17327aa37b49d3e5a" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::AmrMesh::useFixedUpToLevel</definition>
        <argsstring>() const noexcept</argsstring>
        <name>useFixedUpToLevel</name>
        <qualifiedname>amrex::AmrMesh::useFixedUpToLevel</qualifiedname>
        <briefdescription>
<para>Up to what level should we keep the coarser grids fixed (and not regrid those levels)? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="214" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="214" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a894b739ead93a3f976ead6e0c8fb0536" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::ChopGrids</definition>
        <argsstring>(int lev, BoxArray &amp;ba, int target_size) const</argsstring>
        <name>ChopGrids</name>
        <qualifiedname>amrex::AmrMesh::ChopGrids</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>target_size</declname>
        </param>
        <briefdescription>
<para>&quot;Try&quot; to chop up grids so that the number of boxes in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is greater than the target_size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="217" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="467" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ac7d0ce87a8047dcdf7b45d4232121881" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::AmrMesh::MakeBaseGrids</definition>
        <argsstring>() const</argsstring>
        <name>MakeBaseGrids</name>
        <qualifiedname>amrex::AmrMesh::MakeBaseGrids</qualifiedname>
        <briefdescription>
<para>Make a level 0 grids covering the whole domain. It does NOT install the new grids. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="220" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="521" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1acb422930e8e69fc386727f45607e114b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::MakeNewGrids</definition>
        <argsstring>(int lbase, Real time, int &amp;new_finest, Vector&lt; BoxArray &gt; &amp;new_grids)</argsstring>
        <name>MakeNewGrids</name>
        <qualifiedname>amrex::AmrMesh::MakeNewGrids</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lbase</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &amp;</type>
          <declname>new_finest</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>new_grids</declname>
        </param>
        <briefdescription>
<para>Make new grids based on error estimates. This function expects that valid BoxArrays exist in this-&gt;grids from level lbase to level this-&gt;finest_level (the current finest level). new_grids. On return, the new finest level is stored in new_finest, and the new grids are stored in new_grids from Array element lbase+1 to new_finest_level (unless fixed grids are used). Note that this function adds at most one more level to the existing levels, and it may remove all levels above the base level. This function does not change the value of this-&gt;finest_level, nor does it modifies any BoxArrays stored in this-&gt;grids. It also does not modify new_grids&apos;s elements outside the range [lbase+1,new_finest_level]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="236" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="548" bodyend="923"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a0bf56e73af1dfffcba7bfcadad887751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::MakeNewGrids</definition>
        <argsstring>(Real time=0.0)</argsstring>
        <name>MakeNewGrids</name>
        <qualifiedname>amrex::AmrMesh::MakeNewGrids</qualifiedname>
        <param>
          <type>Real</type>
          <declname>time</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>This function makes new grid for all levels (including level 0). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="239" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="926" bodyend="1044"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a2b313b548c5c16a75ad21b053f9fc1b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrMesh::MakeNewLevelFromScratch</definition>
        <argsstring>(int, Real, const BoxArray &amp;, const DistributionMapping &amp;)</argsstring>
        <name>MakeNewLevelFromScratch</name>
        <qualifiedname>amrex::AmrMesh::MakeNewLevelFromScratch</qualifiedname>
        <reimplementedby refid="classamrex_1_1AmrCore_1a2612f7a3cf58e16e8f9ddd27e81e9a8c">MakeNewLevelFromScratch</reimplementedby>
        <reimplementedby refid="classamrex_1_1Amr_1aeadd0d727cd8c5abbd46b3c4dbcb363a">MakeNewLevelFromScratch</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type>Real</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called by the second version of MakeNewGrids. Make a new level from scratch using provided <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. Only used during initialization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="244" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="244" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a8d8e1e1b2e8fa5a1a5055ed761a2410d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrMesh::ErrorEst</definition>
        <argsstring>(int, TagBoxArray &amp;, Real, int)</argsstring>
        <name>ErrorEst</name>
        <qualifiedname>amrex::AmrMesh::ErrorEst</qualifiedname>
        <reimplementedby refid="classamrex_1_1Amr_1a80b107efe79904f079c92600156e523d">ErrorEst</reimplementedby>
        <reimplementedby refid="classamrex_1_1AmrCore_1a88c72a4b4558c782239743af1f3b0789">ErrorEst</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> &amp;</type>
        </param>
        <param>
          <type>Real</type>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
<para>Tag cells for refinement. <ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> tags is built on level lev grids. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="247" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="247" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1abe4eb07db47e710993616e88931fafe1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrMesh::ManualTagsPlacement</definition>
        <argsstring>(int, TagBoxArray &amp;, const Vector&lt; IntVect &gt; &amp;)</argsstring>
        <name>ManualTagsPlacement</name>
        <qualifiedname>amrex::AmrMesh::ManualTagsPlacement</qualifiedname>
        <reimplementedby refid="classamrex_1_1Amr_1a9d0e58b8aaa0cac0a8cd432f37198197">ManualTagsPlacement</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <param>
          <type><ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Manually tag. Note that tags is built on level lev grids coarsened by bf_lev[lev]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="250" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="250" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ad5863ce18c2b8b1dc6371d33c227f2a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrMesh::PostProcessBaseGrids</definition>
        <argsstring>(BoxArray &amp;) const</argsstring>
        <name>PostProcessBaseGrids</name>
        <qualifiedname>amrex::AmrMesh::PostProcessBaseGrids</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply some user-defined changes the to base grids.</para>
<para>This function is only called by MakeNewGrids after computing a box array for the coarsest level and before calling MakeNewLevelFromScratch.</para>
<para>For example, use this function if you want to remove covered grids on the coarsest refinement level. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="258" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="258" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a9a621503f0ef653fc2eab9229168782d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>virtual BoxArray amrex::AmrMesh::GetAreaNotToTag</definition>
        <argsstring>(int)</argsstring>
        <name>GetAreaNotToTag</name>
        <qualifiedname>amrex::AmrMesh::GetAreaNotToTag</qualifiedname>
        <reimplementedby refid="classamrex_1_1Amr_1af6388eb0b60035305b92b00398c67762">GetAreaNotToTag</reimplementedby>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="260" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="260" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ade8630ef8254e4248a6999521e12ad7c" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::AmrMesh::CountCells</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>CountCells</name>
        <qualifiedname>amrex::AmrMesh::CountCells</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="262" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="1231" bodyend="1234"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1abf07e71ebb90aa135bd78e4965536d04" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::AmrMesh::MakeDistributionMap</definition>
        <argsstring>(int lev, BoxArray const &amp;ba)</argsstring>
        <name>MakeDistributionMap</name>
        <qualifiedname>amrex::AmrMesh::MakeDistributionMap</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> const &amp;</type>
          <declname>ba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="264" column="34" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="447" bodyend="464"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a9274bfc294d53126644ed437ac83fe56" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::checkInput</definition>
        <argsstring>()</argsstring>
        <name>checkInput</name>
        <qualifiedname>amrex::AmrMesh::checkInput</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="281" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="1118" bodyend="1228"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a2c473ca991e89cf526fa0ecd967a7217" prot="protected" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetIterateToFalse</definition>
        <argsstring>() noexcept</argsstring>
        <name>SetIterateToFalse</name>
        <qualifiedname>amrex::AmrMesh::SetIterateToFalse</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="283" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="283" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a54d57857c4dd3aa50841ec74a13d4e4c" prot="protected" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetUseNewChop</definition>
        <argsstring>() noexcept</argsstring>
        <name>SetUseNewChop</name>
        <qualifiedname>amrex::AmrMesh::SetUseNewChop</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="284" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="284" bodyend="284"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ab789a53b0b0d3e5bddbf489ed751aee2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::InitAmrMesh</definition>
        <argsstring>(int max_level_in, const Vector&lt; int &gt; &amp;n_cell_in, Vector&lt; IntVect &gt; refrat=Vector&lt; IntVect &gt;(), const RealBox *rb=nullptr, int coord=-1, const int *is_per=nullptr)</argsstring>
        <name>InitAmrMesh</name>
        <qualifiedname>amrex::AmrMesh::InitAmrMesh</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>max_level_in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
          <declname>n_cell_in</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt;</type>
          <declname>refrat</declname>
          <defval><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1a8792201c856a367dda275e09047daa33" kindref="member">IntVect</ref> &gt;()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> *</type>
          <declname>rb</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>coord</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> *</type>
          <declname>is_per</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="287" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="75" bodyend="386"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a663a92c5e8c0dbe3578d19cd8fb36af3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::ProjPeriodic</definition>
        <argsstring>(BoxList &amp;blout, const Box &amp;domain, Array&lt; int, AMREX_SPACEDIM &gt; const &amp;is_per)</argsstring>
        <name>ProjPeriodic</name>
        <qualifiedname>amrex::AmrMesh::ProjPeriodic</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>blout</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a222089e49ba211b37cf7a4a8ae7eb186" kindref="member">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>is_per</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="292" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="1047" bodyend="1115"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>amrex::Amr</label>
        <link refid="classamrex_1_1Amr"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::AmrCore</label>
        <link refid="classamrex_1_1AmrCore"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::AmrInfo</label>
        <link refid="structamrex_1_1AmrInfo"/>
      </node>
      <node id="1">
        <label>amrex::AmrMesh</label>
        <link refid="classamrex_1_1AmrMesh"/>
        <childnode refid="2" relation="protected-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="7">
        <label>amrex::IntVectND&lt; AMREX_SPACEDIM &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="5">
        <label>T</label>
      </node>
      <node id="12">
        <label>amrex::Vector&lt; amrex::BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>amrex::Vector&lt; amrex::DistributionMapping &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::Vector&lt; amrex::IntVectND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::AmrInfo</label>
        <link refid="structamrex_1_1AmrInfo"/>
        <childnode refid="3" relation="usage">
          <edgelabel>blocking_factor</edgelabel>
          <edgelabel>max_grid_size</edgelabel>
          <edgelabel>n_error_buf</edgelabel>
          <edgelabel>ref_ratio</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>grid_eff</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>refine_grid_layout_dims</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::AmrMesh</label>
        <link refid="classamrex_1_1AmrMesh"/>
        <childnode refid="2" relation="protected-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>geom</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>dmap</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>grids</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>Real</label>
      </node>
      <node id="13">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="60" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="62" bodyend="294"/>
    <listofallmembers>
      <member refid="classamrex_1_1AmrMesh_1a163e8a28e1f841b2c174d6d34664e2d3" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1AmrMesh_1a58e7077dec217e4bdad1f5221e6229cc" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1AmrMesh_1a82b57f9cf8e12e9542c14f7d00a986ff" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1AmrMesh_1ac0486abd196135fb9ac41748f2d2f1c9" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1AmrMesh_1aa3d1b57d3957feca7d0f897ec2e62824" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1AmrMesh_1a43f67413ffdd911f5a91e9041bb20d0e" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>AmrMesh</name></member>
      <member refid="structamrex_1_1AmrInfo_1aec9f071fb0930efe09a4efe35edc4a2f" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>blocking_factor</name></member>
      <member refid="classamrex_1_1AmrMesh_1a6669f4946ec86b502c74f3891f3103cd" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>blockingFactor</name></member>
      <member refid="classamrex_1_1AmrMesh_1af3b5764e8954198273eef38dda396bb9" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1AmrMesh_1a3f7c3876bd850fa1faf6c0c60db24591" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1AmrMesh_1a9b02edc981bf4532385af8a8cf58568a" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>boxArray</name></member>
      <member refid="structamrex_1_1AmrInfo_1aa5055bd91d26288e720771986e3ae06f" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>check_input</name></member>
      <member refid="classamrex_1_1AmrMesh_1a9274bfc294d53126644ed437ac83fe56" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>checkInput</name></member>
      <member refid="classamrex_1_1AmrMesh_1a894b739ead93a3f976ead6e0c8fb0536" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>ChopGrids</name></member>
      <member refid="classamrex_1_1AmrMesh_1afc5fde984a1cdd6fcfddb6ff26fb92f6" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>ClearBoxArray</name></member>
      <member refid="classamrex_1_1AmrMesh_1af5ec08eb03bebbb7a0f37f2af4bbda5d" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>ClearDistributionMap</name></member>
      <member refid="classamrex_1_1AmrMesh_1ade8630ef8254e4248a6999521e12ad7c" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>CountCells</name></member>
      <member refid="classamrex_1_1AmrMesh_1a27ca4cbe96ff339a425e91bb4ae1f45a" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1AmrMesh_1aa7a6c428272691c21bf8758a26a75d29" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1AmrMesh_1a66d6be8c194855887f62be467f289223" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1AmrMesh_1ab7f8457c3e5a0dc0295247f005e5a107" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>dmap</name></member>
      <member refid="classamrex_1_1AmrMesh_1a8d8e1e1b2e8fa5a1a5055ed761a2410d" prot="public" virt="virtual"><scope>amrex::AmrMesh</scope><name>ErrorEst</name></member>
      <member refid="classamrex_1_1AmrMesh_1a7a466d1cfea1c18c35128fb5a7c5793f" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>finest_level</name></member>
      <member refid="classamrex_1_1AmrMesh_1a71cf25bbc89fd5fd140d6a7090a8b451" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>finestLevel</name></member>
      <member refid="classamrex_1_1AmrMesh_1a239ef06043779ea301395ae14876d6cb" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1ac66092f390576239dbd6b146d1c9d470" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>Geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1a11ca9a351a2fbfd2e5c9fceae401d884" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>Geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1a678d8149e1146e2ec11235cbcac960a1" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>Geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1acc22d9996bf94c0f71cc6fec7307dbfd" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>Geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1a7a6f9e6150f13252f90b47a22e755c93" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>Geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1a9a621503f0ef653fc2eab9229168782d" prot="public" virt="virtual"><scope>amrex::AmrMesh</scope><name>GetAreaNotToTag</name></member>
      <member refid="classamrex_1_1AmrMesh_1a73c572b51cfc05238746fdac17e7b8c2" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>GetLevel</name></member>
      <member refid="structamrex_1_1AmrInfo_1a8932f2846ed22b769126d4783f76107a" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>grid_eff</name></member>
      <member refid="classamrex_1_1AmrMesh_1a7bc5798a6ef2a0c27b0141112104e087" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>gridEff</name></member>
      <member refid="classamrex_1_1AmrMesh_1ae53347adc8a239367f153d3705a8ed25" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>grids</name></member>
      <member refid="classamrex_1_1AmrMesh_1ab789a53b0b0d3e5bddbf489ed751aee2" prot="private" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>InitAmrMesh</name></member>
      <member refid="structamrex_1_1AmrInfo_1a937e0b9dc3689884b262936e6c3c0b7d" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>iterate_on_new_grids</name></member>
      <member refid="classamrex_1_1AmrMesh_1a472f37d544bf28e75d2c05630969e554" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>LevelDefined</name></member>
      <member refid="classamrex_1_1AmrMesh_1ac7d0ce87a8047dcdf7b45d4232121881" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>MakeBaseGrids</name></member>
      <member refid="classamrex_1_1AmrMesh_1abf07e71ebb90aa135bd78e4965536d04" prot="public" virt="virtual"><scope>amrex::AmrMesh</scope><name>MakeDistributionMap</name></member>
      <member refid="classamrex_1_1AmrMesh_1acb422930e8e69fc386727f45607e114b" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>MakeNewGrids</name></member>
      <member refid="classamrex_1_1AmrMesh_1a0bf56e73af1dfffcba7bfcadad887751" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>MakeNewGrids</name></member>
      <member refid="classamrex_1_1AmrMesh_1a2b313b548c5c16a75ad21b053f9fc1b0" prot="public" virt="virtual"><scope>amrex::AmrMesh</scope><name>MakeNewLevelFromScratch</name></member>
      <member refid="classamrex_1_1AmrMesh_1abe4eb07db47e710993616e88931fafe1" prot="public" virt="virtual"><scope>amrex::AmrMesh</scope><name>ManualTagsPlacement</name></member>
      <member refid="structamrex_1_1AmrInfo_1ad3142cf009fdd8667c2352c39fb2c522" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>max_grid_size</name></member>
      <member refid="structamrex_1_1AmrInfo_1abcb6f6baf4e1ecd3d143d7d8cb6a2a93" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>max_level</name></member>
      <member refid="classamrex_1_1AmrMesh_1ab40f351500214ca7d2fae7afb843f65b" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>maxGridSize</name></member>
      <member refid="classamrex_1_1AmrMesh_1a2b5ebb9f738e77dcc2f99dfe4e4e91d6" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>maxLevel</name></member>
      <member refid="classamrex_1_1AmrMesh_1a8d91fffbf09ac3c696d1f7cffee76b2c" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>MaxRefRatio</name></member>
      <member refid="structamrex_1_1AmrInfo_1aa78fef1ea7608723c281debe971d460e" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>n_error_buf</name></member>
      <member refid="structamrex_1_1AmrInfo_1a36e0332bccfe906856f622730eeafbcf" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>n_proper</name></member>
      <member refid="classamrex_1_1AmrMesh_1ad5199bceb8775542859c6b51d0a2100c" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>nErrorBuf</name></member>
      <member refid="classamrex_1_1AmrMesh_1a42f924aaaf035585ddbe5b82fa24df88" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>nErrorBufVect</name></member>
      <member refid="classamrex_1_1AmrMesh_1aa1e59b567c58d9ba22c9e56f8138a22a" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>nProper</name></member>
      <member refid="classamrex_1_1AmrMesh_1a450db80ef9bd209ebb61cb47ff12ca22" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>num_setba</name></member>
      <member refid="classamrex_1_1AmrMesh_1a2ddfbb3a69cf479f1d28f704d19e4f96" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>num_setdm</name></member>
      <member refid="classamrex_1_1AmrMesh_1a3ea7e0bfdd5d74d622f9eef243829299" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>operator&lt;&lt;</name></member>
      <member refid="classamrex_1_1AmrMesh_1aea11957c1545724bc01fe4b8840bde05" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>operator=</name></member>
      <member refid="classamrex_1_1AmrMesh_1afae60a3f920a8839a05ca8b70d041cb8" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>operator=</name></member>
      <member refid="classamrex_1_1AmrMesh_1ad5863ce18c2b8b1dc6371d33c227f2a6" prot="public" virt="virtual"><scope>amrex::AmrMesh</scope><name>PostProcessBaseGrids</name></member>
      <member refid="classamrex_1_1AmrMesh_1a663a92c5e8c0dbe3578d19cd8fb36af3" prot="private" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>ProjPeriodic</name></member>
      <member refid="structamrex_1_1AmrInfo_1a73a3b38cadf1943503cf77622ea6a3ae" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>ref_ratio</name></member>
      <member refid="structamrex_1_1AmrInfo_1a4494b1f6c76612d4af30d18d62dd410c" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>refine_grid_layout</name></member>
      <member refid="structamrex_1_1AmrInfo_1ac92498a911f4e98692efdba9005f492f" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>refine_grid_layout_dims</name></member>
      <member refid="classamrex_1_1AmrMesh_1a848a89635a0f509800a5d912ef7b4f0b" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>refRatio</name></member>
      <member refid="classamrex_1_1AmrMesh_1ac64a8b306d5402acee8ccac597802544" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>refRatio</name></member>
      <member refid="classamrex_1_1AmrMesh_1aba9a6c34f6e246926e9147ef3da5b535" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetBlockingFactor</name></member>
      <member refid="classamrex_1_1AmrMesh_1adf01c926d4f55d291a5d5a0e0b48c348" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetBlockingFactor</name></member>
      <member refid="classamrex_1_1AmrMesh_1a3818b75f890359e9a8042f7a3b9e4e21" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetBlockingFactor</name></member>
      <member refid="classamrex_1_1AmrMesh_1a04ba4d303b52fe2f1db1e7e23fca5c06" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetBlockingFactor</name></member>
      <member refid="classamrex_1_1AmrMesh_1a404d43ca2363907df6d3206e892a220d" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetBoxArray</name></member>
      <member refid="classamrex_1_1AmrMesh_1a452a3c38dd51bc37e199abe772759a3b" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetDistributionMap</name></member>
      <member refid="classamrex_1_1AmrMesh_1ab40e510f5cd8deda45eb675b82494808" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetFinestLevel</name></member>
      <member refid="classamrex_1_1AmrMesh_1aa755628d0ad98daf37de1670e57d2364" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetGeometry</name></member>
      <member refid="classamrex_1_1AmrMesh_1a77c262385b1bd0bfc96fec96347c041a" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetGridEff</name></member>
      <member refid="classamrex_1_1AmrMesh_1a2c473ca991e89cf526fa0ecd967a7217" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetIterateToFalse</name></member>
      <member refid="classamrex_1_1AmrMesh_1a4612b4d9b23253095da92c3e323ffd73" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetMaxGridSize</name></member>
      <member refid="classamrex_1_1AmrMesh_1a964c875f4546f513fb285e2f90278473" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetMaxGridSize</name></member>
      <member refid="classamrex_1_1AmrMesh_1ae26f4d197dc68e2d26837b8ad0043dbe" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetMaxGridSize</name></member>
      <member refid="classamrex_1_1AmrMesh_1ad6695b6090e726ea6bc405a7d3a75be8" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetMaxGridSize</name></member>
      <member refid="classamrex_1_1AmrMesh_1aee314c43754854d98fc25ce6cd278796" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetNProper</name></member>
      <member refid="classamrex_1_1AmrMesh_1a54d57857c4dd3aa50841ec74a13d4e4c" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetUseNewChop</name></member>
      <member refid="structamrex_1_1AmrInfo_1a6a665ee4c81c3b28e36775d7e94ab261" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>use_fixed_coarse_grids</name></member>
      <member refid="structamrex_1_1AmrInfo_1ad9000321def17faf06f9fef5ea304163" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>use_fixed_upto_level</name></member>
      <member refid="structamrex_1_1AmrInfo_1a7caf591556b0da33b2a44a7726706395" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>use_new_chop</name></member>
      <member refid="classamrex_1_1AmrMesh_1aee758e772b5c854d121923686d1d3949" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>useFixedCoarseGrids</name></member>
      <member refid="classamrex_1_1AmrMesh_1a6ff4a09f169c29d17327aa37b49d3e5a" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>useFixedUpToLevel</name></member>
      <member refid="structamrex_1_1AmrInfo_1ae0c6a5189c216220bf4aab567206c362" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>verbose</name></member>
      <member refid="classamrex_1_1AmrMesh_1a9b78b807755b822ba0c46ec0e3150089" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>Verbose</name></member>
      <member refid="classamrex_1_1AmrMesh_1a8fb2fefeadc3653f3f263d32fd195460" prot="public" virt="virtual"><scope>amrex::AmrMesh</scope><name>~AmrMesh</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
