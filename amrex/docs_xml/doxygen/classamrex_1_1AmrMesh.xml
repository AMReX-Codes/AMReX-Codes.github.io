<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1AmrMesh" kind="class" language="C++" prot="public">
    <compoundname>amrex::AmrMesh</compoundname>
    <derivedcompoundref refid="classamrex_1_1AmrCore" prot="public" virt="non-virtual">amrex::AmrCore</derivedcompoundref>
    <includes refid="AMReX__AmrMesh_8H" local="no">AMReX_AmrMesh.H</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1a6d04a0b73b03b5a0008edc4effaeeb44" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::AmrMesh::verbose</definition>
        <argsstring></argsstring>
        <name>verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="182" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1ac488c17bc512ae46995817401dc7a8e7" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::AmrMesh::max_level</definition>
        <argsstring></argsstring>
        <name>max_level</name>
        <briefdescription>
<para>Maximum allowed level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="183" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1a7e3c7fc2f5598fdd4132536724933f2a" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt;</type>
        <definition>Vector&lt;IntVect&gt; amrex::AmrMesh::ref_ratio</definition>
        <argsstring></argsstring>
        <name>ref_ratio</name>
        <briefdescription>
<para>Refinement ratios [0:finest_level-1]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="184" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1a7a466d1cfea1c18c35128fb5a7c5793f" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::AmrMesh::finest_level</definition>
        <argsstring></argsstring>
        <name>finest_level</name>
        <briefdescription>
<para>Current finest level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="186" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1acf34e7acc22898675cec3f3b8aa2346c" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt;</type>
        <definition>Vector&lt;IntVect&gt; amrex::AmrMesh::n_error_buf</definition>
        <argsstring></argsstring>
        <name>n_error_buf</name>
        <briefdescription>
<para>Buffer cells around each tagged cell. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="188" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1acdbddd33ae38b3d038fcaa14ce05e039" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt;</type>
        <definition>Vector&lt;IntVect&gt; amrex::AmrMesh::blocking_factor</definition>
        <argsstring></argsstring>
        <name>blocking_factor</name>
        <briefdescription>
<para>Blocking factor in grid generation (by level). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="189" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1a716b7e6169d4d0a537970445941e7391" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt;</type>
        <definition>Vector&lt;IntVect&gt; amrex::AmrMesh::max_grid_size</definition>
        <argsstring></argsstring>
        <name>max_grid_size</name>
        <briefdescription>
<para>Maximum allowable grid size (by level). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="190" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1ae75a2551575e5fd697ab4dc8754541ad" prot="protected" static="no" mutable="no">
        <type>Real</type>
        <definition>Real amrex::AmrMesh::grid_eff</definition>
        <argsstring></argsstring>
        <name>grid_eff</name>
        <briefdescription>
<para>Grid efficiency. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="191" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1afe23a9a66345fa657da022fc5a3cb349" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::AmrMesh::n_proper</definition>
        <argsstring></argsstring>
        <name>n_proper</name>
        <briefdescription>
<para><heading level="1">cells required for proper nesting.</heading>
</para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="192" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1a3162b5c3697f4ce32d585ca434ac40a5" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::AmrMesh::use_fixed_coarse_grids</definition>
        <argsstring></argsstring>
        <name>use_fixed_coarse_grids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="194" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1a15a5406d39363635d73cc1d986546fe7" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::AmrMesh::use_fixed_upto_level</definition>
        <argsstring></argsstring>
        <name>use_fixed_upto_level</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="195" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1a95059679c4b3343198edadf7d9d860e5" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::AmrMesh::refine_grid_layout</definition>
        <argsstring></argsstring>
        <name>refine_grid_layout</name>
        <briefdescription>
<para>chop up grids to have the number of grids no less the number of procs </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="196" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1a8d2f6e5a9f3f46c76d44215f83455475" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::AmrMesh::check_input</definition>
        <argsstring></argsstring>
        <name>check_input</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="197" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1ad47540768ade1598333374d48d3b9593" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::AmrMesh::iterate_on_new_grids</definition>
        <argsstring></argsstring>
        <name>iterate_on_new_grids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="199" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1abaf8432668e3b350306a62e8662f4f96" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::AmrMesh::use_new_chop</definition>
        <argsstring></argsstring>
        <name>use_new_chop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="200" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1a239ef06043779ea301395ae14876d6cb" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt;</type>
        <definition>Vector&lt;Geometry&gt; amrex::AmrMesh::geom</definition>
        <argsstring></argsstring>
        <name>geom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="202" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1ab7f8457c3e5a0dc0295247f005e5a107" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt;</type>
        <definition>Vector&lt;DistributionMapping&gt; amrex::AmrMesh::dmap</definition>
        <argsstring></argsstring>
        <name>dmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="203" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1AmrMesh_1ae53347adc8a239367f153d3705a8ed25" prot="protected" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt;</type>
        <definition>Vector&lt;BoxArray&gt; amrex::AmrMesh::grids</definition>
        <argsstring></argsstring>
        <name>grids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="204" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="204" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a163e8a28e1f841b2c174d6d34664e2d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrMesh::AmrMesh</definition>
        <argsstring>()</argsstring>
        <name>AmrMesh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="18" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="30" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a58e7077dec217e4bdad1f5221e6229cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrMesh::AmrMesh</definition>
        <argsstring>(const RealBox *rb, int max_level_in, const Vector&lt; int &gt; &amp;n_cell_in, int coord=-1, Vector&lt; IntVect &gt; refrat=Vector&lt; IntVect &gt;(), const int *is_per=nullptr)</argsstring>
        <name>AmrMesh</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> *</type>
          <declname>rb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_level_in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>n_cell_in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>coord</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt;</type>
          <declname>refrat</declname>
          <defval><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt;()</defval>
        </param>
        <param>
          <type>const int *</type>
          <declname>is_per</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="20" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="39" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ab883ddbcab8b89f8eee7e9df1ae2b41b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrMesh::AmrMesh</definition>
        <argsstring>(const RealBox &amp;rb, int max_level_in, const Vector&lt; int &gt; &amp;n_cell_in, int coord, Vector&lt; IntVect &gt; const &amp;ref_ratios, Array&lt; int, AMREX_SPACEDIM &gt; const &amp;is_per)</argsstring>
        <name>AmrMesh</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> &amp;</type>
          <declname>rb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_level_in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>n_cell_in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>coord</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; const &amp;</type>
          <declname>ref_ratios</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; int, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>is_per</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="25" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="48" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1aa3d1b57d3957feca7d0f897ec2e62824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrMesh::AmrMesh</definition>
        <argsstring>(const AmrMesh &amp;rhs)=delete</argsstring>
        <name>AmrMesh</name>
        <param>
          <type>const <ref refid="classamrex_1_1AmrMesh" kindref="compound">AmrMesh</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a51e0432968299f0c83f90d9b79376a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1AmrMesh" kindref="compound">AmrMesh</ref> &amp;</type>
        <definition>AmrMesh&amp; amrex::AmrMesh::operator=</definition>
        <argsstring>(const AmrMesh &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1AmrMesh" kindref="compound">AmrMesh</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a43f67413ffdd911f5a91e9041bb20d0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::AmrMesh::AmrMesh</definition>
        <argsstring>(AmrMesh &amp;&amp;rhs)=default</argsstring>
        <name>AmrMesh</name>
        <param>
          <type><ref refid="classamrex_1_1AmrMesh" kindref="compound">AmrMesh</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1af2d4364b9fd33cf012edbb2170105845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1AmrMesh" kindref="compound">AmrMesh</ref> &amp;</type>
        <definition>AmrMesh&amp; amrex::AmrMesh::operator=</definition>
        <argsstring>(AmrMesh &amp;&amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1AmrMesh" kindref="compound">AmrMesh</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a10865e07f3aae297cdea041881e7b9ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>amrex::AmrMesh::~AmrMesh</definition>
        <argsstring>()</argsstring>
        <name>~AmrMesh</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="36" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a9b78b807755b822ba0c46ec0e3150089" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::AmrMesh::Verbose</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Verbose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="38" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a2b5ebb9f738e77dcc2f99dfe4e4e91d6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::AmrMesh::maxLevel</definition>
        <argsstring>() const noexcept</argsstring>
        <name>maxLevel</name>
        <briefdescription>
<para>Return the max level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="41" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a71cf25bbc89fd5fd140d6a7090a8b451" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::AmrMesh::finestLevel</definition>
        <argsstring>() const noexcept</argsstring>
        <name>finestLevel</name>
        <briefdescription>
<para>Return the finest level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="44" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a848a89635a0f509800a5d912ef7b4f0b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::AmrMesh::refRatio</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>refRatio</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Return the refinement ratio for level lev. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="47" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a8d91fffbf09ac3c696d1f7cffee76b2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::AmrMesh::MaxRefRatio</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>MaxRefRatio</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Return the maximum refinement ratio in any direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="50" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="382" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a3e96de11d4a8b2cababa14d116b61958" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
        <definition>const Vector&lt;IntVect&gt;&amp; amrex::AmrMesh::refRatio</definition>
        <argsstring>() const noexcept</argsstring>
        <name>refRatio</name>
        <briefdescription>
<para>Return refinement ratios between all levels. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="53" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a38a313616cf363d4848934853dd47092" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
        <definition>const Vector&lt;Geometry&gt;&amp; amrex::AmrMesh::Geom</definition>
        <argsstring>() const noexcept</argsstring>
        <name>Geom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="55" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a900d9137ef4b7f6dedc412b3caecbee9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &gt; &amp;</type>
        <definition>const Vector&lt;DistributionMapping&gt;&amp; amrex::AmrMesh::DistributionMap</definition>
        <argsstring>() const noexcept</argsstring>
        <name>DistributionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="56" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a331d8f1ba022fc6d08c1e2be97dd2eb6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
        <definition>const Vector&lt;BoxArray&gt;&amp; amrex::AmrMesh::boxArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>boxArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="57" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1adf16ab166b53c2ae62ee664a25e31e57" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>const Geometry&amp; amrex::AmrMesh::Geom</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>Geom</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="59" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a0dfee271ae9f2b00ab0b2ce8abd85d2d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping&amp; amrex::AmrMesh::DistributionMap</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>DistributionMap</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="60" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a65c25342b534c0f03ebdf9e4f5ffac51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray&amp; amrex::AmrMesh::boxArray</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>boxArray</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="61" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a24f762a6fc54a0adff17d31a5ff22e8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &gt; &amp;</type>
        <definition>Vector&lt;Geometry&gt;&amp; amrex::AmrMesh::Geom</definition>
        <argsstring>() noexcept</argsstring>
        <name>Geom</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="63" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a924462614f8ea65b38f21163808bdddc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
        <definition>Geometry&amp; amrex::AmrMesh::Geom</definition>
        <argsstring>(int lev) noexcept</argsstring>
        <name>Geom</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="64" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a4612b4d9b23253095da92c3e323ffd73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetMaxGridSize</definition>
        <argsstring>(int new_mgs) noexcept</argsstring>
        <name>SetMaxGridSize</name>
        <param>
          <type>int</type>
          <declname>new_mgs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="66" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a964c875f4546f513fb285e2f90278473" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetMaxGridSize</definition>
        <argsstring>(const IntVect &amp;new_mgs) noexcept</argsstring>
        <name>SetMaxGridSize</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>new_mgs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="69" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ae26f4d197dc68e2d26837b8ad0043dbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetMaxGridSize</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;new_mgs) noexcept</argsstring>
        <name>SetMaxGridSize</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>new_mgs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="72" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="72" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ad6695b6090e726ea6bc405a7d3a75be8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetMaxGridSize</definition>
        <argsstring>(const Vector&lt; IntVect &gt; &amp;new_mgs) noexcept</argsstring>
        <name>SetMaxGridSize</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>new_mgs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="78" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1aba9a6c34f6e246926e9147ef3da5b535" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetBlockingFactor</definition>
        <argsstring>(int new_bf) noexcept</argsstring>
        <name>SetBlockingFactor</name>
        <param>
          <type>int</type>
          <declname>new_bf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="82" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1adf01c926d4f55d291a5d5a0e0b48c348" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetBlockingFactor</definition>
        <argsstring>(const IntVect &amp;new_bf) noexcept</argsstring>
        <name>SetBlockingFactor</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>new_bf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="85" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a3818b75f890359e9a8042f7a3b9e4e21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetBlockingFactor</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;new_bf) noexcept</argsstring>
        <name>SetBlockingFactor</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>new_bf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="88" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="88" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a04ba4d303b52fe2f1db1e7e23fca5c06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetBlockingFactor</definition>
        <argsstring>(const Vector&lt; IntVect &gt; &amp;new_bf) noexcept</argsstring>
        <name>SetBlockingFactor</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>new_bf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="94" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a77c262385b1bd0bfc96fec96347c041a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetGridEff</definition>
        <argsstring>(Real eff) noexcept</argsstring>
        <name>SetGridEff</name>
        <param>
          <type>Real</type>
          <declname>eff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="98" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1aee314c43754854d98fc25ce6cd278796" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetNProper</definition>
        <argsstring>(int n) noexcept</argsstring>
        <name>SetNProper</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="99" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ab40e510f5cd8deda45eb675b82494808" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetFinestLevel</definition>
        <argsstring>(int new_finest_level) noexcept</argsstring>
        <name>SetFinestLevel</name>
        <param>
          <type>int</type>
          <declname>new_finest_level</declname>
        </param>
        <briefdescription>
<para>Set ref_ratio would require rebuiling <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> objects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="103" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a452a3c38dd51bc37e199abe772759a3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetDistributionMap</definition>
        <argsstring>(int lev, const DistributionMapping &amp;dmap_in) noexcept</argsstring>
        <name>SetDistributionMap</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dmap_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="104" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="391" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a404d43ca2363907df6d3206e892a220d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetBoxArray</definition>
        <argsstring>(int lev, const BoxArray &amp;ba_in) noexcept</argsstring>
        <name>SetBoxArray</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="105" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="397" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1aa755628d0ad98daf37de1670e57d2364" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetGeometry</definition>
        <argsstring>(int lev, const Geometry &amp;geom_in) noexcept</argsstring>
        <name>SetGeometry</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>geom_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="106" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="403" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1af5ec08eb03bebbb7a0f37f2af4bbda5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::ClearDistributionMap</definition>
        <argsstring>(int lev) noexcept</argsstring>
        <name>ClearDistributionMap</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="108" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="409" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1afc5fde984a1cdd6fcfddb6ff26fb92f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::ClearBoxArray</definition>
        <argsstring>(int lev) noexcept</argsstring>
        <name>ClearBoxArray</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="109" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="415" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ad5199bceb8775542859c6b51d0a2100c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::AmrMesh::nErrorBuf</definition>
        <argsstring>(int lev, int direction=0) const noexcept</argsstring>
        <name>nErrorBuf</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>direction</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the number of buffer cells (as a single integer) in error estimator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="112" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a071011d3702ecfc14ebc0f61a30a50ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>const IntVect&amp; amrex::AmrMesh::nErrorBufVect</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>nErrorBufVect</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Return the number of buffer cells (as an <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>) in error estimator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="115" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a7bc5798a6ef2a0c27b0141112104e087" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Real</type>
        <definition>Real amrex::AmrMesh::gridEff</definition>
        <argsstring>() const noexcept</argsstring>
        <name>gridEff</name>
        <briefdescription>
<para>Return the minimum allowable grid efficiency. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="118" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1aa1e59b567c58d9ba22c9e56f8138a22a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::AmrMesh::nProper</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nProper</name>
        <briefdescription>
<para>Return the number of cells to define proper nesting. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="121" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1af4a41ee86449b2afa949b6d68f6faf6f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>const IntVect&amp; amrex::AmrMesh::blockingFactor</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>blockingFactor</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Return the blocking factor at level lev. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="124" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a359b34414e4ab7c9b33f74b031d16af8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
        <definition>const IntVect&amp; amrex::AmrMesh::maxGridSize</definition>
        <argsstring>(int lev) const noexcept</argsstring>
        <name>maxGridSize</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
<para>Return the largest allowable grid. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="127" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a08cfede00ef133a4756ac22a7ea7bfe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::AmrMesh::LevelDefined</definition>
        <argsstring>(int lev) noexcept</argsstring>
        <name>LevelDefined</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="129" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="421" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1aee758e772b5c854d121923686d1d3949" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::AmrMesh::useFixedCoarseGrids</definition>
        <argsstring>() const noexcept</argsstring>
        <name>useFixedCoarseGrids</name>
        <briefdescription>
<para>Should we keep the coarser grids fixed (and not regrid those levels) at all? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="132" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a6ff4a09f169c29d17327aa37b49d3e5a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::AmrMesh::useFixedUpToLevel</definition>
        <argsstring>() const noexcept</argsstring>
        <name>useFixedUpToLevel</name>
        <briefdescription>
<para>Up to what level should we keep the coarser grids fixed (and not regrid those levels)? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="135" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a29bca4cd9fb61c896130db020528e56f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::ChopGrids</definition>
        <argsstring>(int lev, BoxArray &amp;ba, int target_size) const </argsstring>
        <name>ChopGrids</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>target_size</declname>
        </param>
        <briefdescription>
<para>&quot;Try&quot; to chop up grids so that the number of boxes in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> is greater than the target_size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="138" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="427" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a962d1689c8b7444f4b2c8a077d3f4766" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::AmrMesh::MakeBaseGrids</definition>
        <argsstring>() const </argsstring>
        <name>MakeBaseGrids</name>
        <briefdescription>
<para>Make a level 0 grids covering the whole domain. It does NOT install the new grids. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="141" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="446" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1acb422930e8e69fc386727f45607e114b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::MakeNewGrids</definition>
        <argsstring>(int lbase, Real time, int &amp;new_finest, Vector&lt; BoxArray &gt; &amp;new_grids)</argsstring>
        <name>MakeNewGrids</name>
        <param>
          <type>int</type>
          <declname>lbase</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>new_finest</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &gt; &amp;</type>
          <declname>new_grids</declname>
        </param>
        <briefdescription>
<para>Make new grids based on error estimates. This functin expects that valid BoxArrays exist in this-&gt;grids from level lbase to level this-&gt;finest_level (the current finest level). new_grids. On return, the new finest level is stored in new_finest, and the new grids are stored in new_grids from Array element lbase+1 to new_finest_level (unless fixed grids are used). Note that this function adds at most one more level to the existing levels, and it may remove all levels above the base level. This function does not change the value of this-&gt;finest_level, nor does it modifies any BoxArrays stored in this-&gt;grids. It also does not modify new_grids&apos;s elements outside the range [lbase+1,new_finest_level]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="157" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="472" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a0bf56e73af1dfffcba7bfcadad887751" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::MakeNewGrids</definition>
        <argsstring>(Real time=0.0)</argsstring>
        <name>MakeNewGrids</name>
        <param>
          <type>Real</type>
          <declname>time</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>This function makes new grid for all levels (including level 0). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="160" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="787" bodyend="856"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a0c2b59ddec7e4f8b4d2fbbdb44cf0e3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrMesh::MakeNewLevelFromScratch</definition>
        <argsstring>(int lev, Real time, const BoxArray &amp;ba, const DistributionMapping &amp;dm)</argsstring>
        <name>MakeNewLevelFromScratch</name>
        <reimplementedby refid="classamrex_1_1LSCore_1aef08d0e705a4320bd5b9929bc02b1690">MakeNewLevelFromScratch</reimplementedby>
        <reimplementedby refid="classamrex_1_1AmrCore_1af037642d569d83cfe2ca14de640a4d28">MakeNewLevelFromScratch</reimplementedby>
        <reimplementedby refid="classamrex_1_1LSCoreBase_1aa7bc5e980ea04512e48b2c04fa1f3105">MakeNewLevelFromScratch</reimplementedby>
        <reimplementedby refid="classamrex_1_1Amr_1aeb8d43eac6a57205c148ed7736339bcc">MakeNewLevelFromScratch</reimplementedby>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>ba</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called by the second version of MakeNewGrids. Make a new level from scratch using provided <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> and <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. Only used during initialization. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="165" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a12f861395ddfa08181bebf191733b3e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrMesh::ErrorEst</definition>
        <argsstring>(int lev, TagBoxArray &amp;tags, Real time, int ngrow)</argsstring>
        <name>ErrorEst</name>
        <reimplementedby refid="classamrex_1_1AmrCore_1aa0f5dabb31da45d02a320a11caa96875">ErrorEst</reimplementedby>
        <reimplementedby refid="classamrex_1_1LSCoreBase_1aff7378920896f28c99d297fcd5e27bf2">ErrorEst</reimplementedby>
        <reimplementedby refid="classamrex_1_1Amr_1a80b107efe79904f079c92600156e523d">ErrorEst</reimplementedby>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>Real</type>
          <declname>time</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
<para>Tag cells for refinement. <ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> tags is built on level lev grids. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="168" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a5830766b42f260b125443b90f40b0a96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void amrex::AmrMesh::ManualTagsPlacement</definition>
        <argsstring>(int lev, TagBoxArray &amp;tags, const Vector&lt; IntVect &gt; &amp;bf_lev)</argsstring>
        <name>ManualTagsPlacement</name>
        <reimplementedby refid="classamrex_1_1Amr_1a9d0e58b8aaa0cac0a8cd432f37198197">ManualTagsPlacement</reimplementedby>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1TagBoxArray" kindref="compound">TagBoxArray</ref> &amp;</type>
          <declname>tags</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>bf_lev</declname>
        </param>
        <briefdescription>
<para>Manually tag. Note that tags is built on level lev grids coarsened by bf_lev[lev]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="171" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="171" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a9650ac46b08412a6d487deee85930294" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>virtual BoxArray amrex::AmrMesh::GetAreaNotToTag</definition>
        <argsstring>(int lev)</argsstring>
        <name>GetAreaNotToTag</name>
        <reimplementedby refid="classamrex_1_1Amr_1af6388eb0b60035305b92b00398c67762">GetAreaNotToTag</reimplementedby>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="173" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="173" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ab386f620b52b8c696aeafbfb86a18cc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::AmrMesh::CountCells</definition>
        <argsstring>(int lev) noexcept</argsstring>
        <name>CountCells</name>
        <param>
          <type>int</type>
          <declname>lev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="175" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="974" bodyend="977"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a5381e6f1c519958a8ce3911673c11dfe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="177" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="17" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a70e260deb8a680a23f0a38ff10296142" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="178" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="24" bodyend="27"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a9274bfc294d53126644ed437ac83fe56" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::checkInput</definition>
        <argsstring>()</argsstring>
        <name>checkInput</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="206" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="911" bodyend="971"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a2c473ca991e89cf526fa0ecd967a7217" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetIterateToFalse</definition>
        <argsstring>() noexcept</argsstring>
        <name>SetIterateToFalse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="208" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1a54d57857c4dd3aa50841ec74a13d4e4c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::SetUseNewChop</definition>
        <argsstring>() noexcept</argsstring>
        <name>SetUseNewChop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="212" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="212" bodyend="215"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ab789a53b0b0d3e5bddbf489ed751aee2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::InitAmrMesh</definition>
        <argsstring>(int max_level_in, const Vector&lt; int &gt; &amp;n_cell_in, Vector&lt; IntVect &gt; refrat=Vector&lt; IntVect &gt;(), const RealBox *rb=nullptr, int coord=-1, const int *is_per=nullptr)</argsstring>
        <name>InitAmrMesh</name>
        <param>
          <type>int</type>
          <declname>max_level_in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>n_cell_in</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt;</type>
          <declname>refrat</declname>
          <defval><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt;()</defval>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealBox" kindref="compound">RealBox</ref> *</type>
          <declname>rb</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>int</type>
          <declname>coord</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>const int *</type>
          <declname>is_per</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="218" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="64" bodyend="379"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classamrex_1_1AmrMesh_1ad19790bf442a1ba0eccd5246f905e3bb" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::AmrMesh::ProjPeriodic</definition>
        <argsstring>(BoxList &amp;bd, const Box &amp;domain, Array&lt; int, AMREX_SPACEDIM &gt; const &amp;is_per)</argsstring>
        <name>ProjPeriodic</name>
        <param>
          <type><ref refid="classamrex_1_1BoxList" kindref="compound">BoxList</ref> &amp;</type>
          <declname>bd</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1afe930d74045516fece8591f173e57007" kindref="member">Array</ref>&lt; int, AMREX_SPACEDIM &gt; const &amp;</type>
          <declname>is_per</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="223" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.cpp" bodystart="859" bodyend="908"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="456">
        <label>amrex::LSCoreBase</label>
        <link refid="classamrex_1_1LSCoreBase"/>
        <childnode refid="454" relation="public-inheritance">
        </childnode>
      </node>
      <node id="454">
        <label>amrex::AmrCore</label>
        <link refid="classamrex_1_1AmrCore"/>
        <childnode refid="453" relation="public-inheritance">
        </childnode>
      </node>
      <node id="455">
        <label>amrex::Amr</label>
        <link refid="classamrex_1_1Amr"/>
        <childnode refid="454" relation="public-inheritance">
        </childnode>
      </node>
      <node id="453">
        <label>amrex::AmrMesh</label>
        <link refid="classamrex_1_1AmrMesh"/>
      </node>
      <node id="457">
        <label>amrex::LSCore&lt; F &gt;</label>
        <link refid="classamrex_1_1LSCore"/>
        <childnode refid="456" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="462">
        <label>std::vector&lt; amrex::BoxArray, std::allocator&lt; amrex::BoxArray &gt; &gt;</label>
      </node>
      <node id="467">
        <label>Real</label>
      </node>
      <node id="466">
        <label>std::vector&lt; amrex::Geometry, std::allocator&lt; amrex::Geometry &gt; &gt;</label>
      </node>
      <node id="459">
        <label>amrex::Vector&lt; amrex::DistributionMapping &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="460" relation="public-inheritance">
        </childnode>
      </node>
      <node id="461">
        <label>amrex::Vector&lt; amrex::BoxArray &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="462" relation="public-inheritance">
        </childnode>
      </node>
      <node id="460">
        <label>std::vector&lt; amrex::DistributionMapping, std::allocator&lt; amrex::DistributionMapping &gt; &gt;</label>
      </node>
      <node id="463">
        <label>amrex::Vector&lt; amrex::IntVect &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="464" relation="public-inheritance">
        </childnode>
      </node>
      <node id="464">
        <label>std::vector&lt; amrex::IntVect, std::allocator&lt; amrex::IntVect &gt; &gt;</label>
      </node>
      <node id="465">
        <label>amrex::Vector&lt; amrex::Geometry &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="466" relation="public-inheritance">
        </childnode>
      </node>
      <node id="458">
        <label>amrex::AmrMesh</label>
        <link refid="classamrex_1_1AmrMesh"/>
        <childnode refid="459" relation="usage">
          <edgelabel>dmap</edgelabel>
        </childnode>
        <childnode refid="461" relation="usage">
          <edgelabel>grids</edgelabel>
        </childnode>
        <childnode refid="463" relation="usage">
          <edgelabel>blocking_factor</edgelabel>
          <edgelabel>n_error_buf</edgelabel>
          <edgelabel>max_grid_size</edgelabel>
          <edgelabel>ref_ratio</edgelabel>
        </childnode>
        <childnode refid="465" relation="usage">
          <edgelabel>geom</edgelabel>
        </childnode>
        <childnode refid="467" relation="usage">
          <edgelabel>grid_eff</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" line="16" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_AmrMesh.H" bodystart="15" bodyend="225"/>
    <listofallmembers>
      <member refid="classamrex_1_1AmrMesh_1a163e8a28e1f841b2c174d6d34664e2d3" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1AmrMesh_1a58e7077dec217e4bdad1f5221e6229cc" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1AmrMesh_1ab883ddbcab8b89f8eee7e9df1ae2b41b" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1AmrMesh_1aa3d1b57d3957feca7d0f897ec2e62824" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1AmrMesh_1a43f67413ffdd911f5a91e9041bb20d0e" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>AmrMesh</name></member>
      <member refid="classamrex_1_1AmrMesh_1acdbddd33ae38b3d038fcaa14ce05e039" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>blocking_factor</name></member>
      <member refid="classamrex_1_1AmrMesh_1af4a41ee86449b2afa949b6d68f6faf6f" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>blockingFactor</name></member>
      <member refid="classamrex_1_1AmrMesh_1a331d8f1ba022fc6d08c1e2be97dd2eb6" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1AmrMesh_1a65c25342b534c0f03ebdf9e4f5ffac51" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1AmrMesh_1a8d2f6e5a9f3f46c76d44215f83455475" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>check_input</name></member>
      <member refid="classamrex_1_1AmrMesh_1a9274bfc294d53126644ed437ac83fe56" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>checkInput</name></member>
      <member refid="classamrex_1_1AmrMesh_1a29bca4cd9fb61c896130db020528e56f" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>ChopGrids</name></member>
      <member refid="classamrex_1_1AmrMesh_1afc5fde984a1cdd6fcfddb6ff26fb92f6" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>ClearBoxArray</name></member>
      <member refid="classamrex_1_1AmrMesh_1af5ec08eb03bebbb7a0f37f2af4bbda5d" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>ClearDistributionMap</name></member>
      <member refid="classamrex_1_1AmrMesh_1ab386f620b52b8c696aeafbfb86a18cc7" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>CountCells</name></member>
      <member refid="classamrex_1_1AmrMesh_1a900d9137ef4b7f6dedc412b3caecbee9" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1AmrMesh_1a0dfee271ae9f2b00ab0b2ce8abd85d2d" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1AmrMesh_1ab7f8457c3e5a0dc0295247f005e5a107" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>dmap</name></member>
      <member refid="classamrex_1_1AmrMesh_1a12f861395ddfa08181bebf191733b3e7" prot="public" virt="virtual"><scope>amrex::AmrMesh</scope><name>ErrorEst</name></member>
      <member refid="classamrex_1_1AmrMesh_1a70e260deb8a680a23f0a38ff10296142" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1AmrMesh_1a7a466d1cfea1c18c35128fb5a7c5793f" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>finest_level</name></member>
      <member refid="classamrex_1_1AmrMesh_1a71cf25bbc89fd5fd140d6a7090a8b451" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>finestLevel</name></member>
      <member refid="classamrex_1_1AmrMesh_1a239ef06043779ea301395ae14876d6cb" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1a38a313616cf363d4848934853dd47092" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>Geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1adf16ab166b53c2ae62ee664a25e31e57" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>Geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1a24f762a6fc54a0adff17d31a5ff22e8b" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>Geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1a924462614f8ea65b38f21163808bdddc" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>Geom</name></member>
      <member refid="classamrex_1_1AmrMesh_1a9650ac46b08412a6d487deee85930294" prot="public" virt="virtual"><scope>amrex::AmrMesh</scope><name>GetAreaNotToTag</name></member>
      <member refid="classamrex_1_1AmrMesh_1ae75a2551575e5fd697ab4dc8754541ad" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>grid_eff</name></member>
      <member refid="classamrex_1_1AmrMesh_1a7bc5798a6ef2a0c27b0141112104e087" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>gridEff</name></member>
      <member refid="classamrex_1_1AmrMesh_1ae53347adc8a239367f153d3705a8ed25" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>grids</name></member>
      <member refid="classamrex_1_1AmrMesh_1ab789a53b0b0d3e5bddbf489ed751aee2" prot="private" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>InitAmrMesh</name></member>
      <member refid="classamrex_1_1AmrMesh_1a5381e6f1c519958a8ce3911673c11dfe" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1AmrMesh_1ad47540768ade1598333374d48d3b9593" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>iterate_on_new_grids</name></member>
      <member refid="classamrex_1_1AmrMesh_1a08cfede00ef133a4756ac22a7ea7bfe7" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>LevelDefined</name></member>
      <member refid="classamrex_1_1AmrMesh_1a962d1689c8b7444f4b2c8a077d3f4766" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>MakeBaseGrids</name></member>
      <member refid="classamrex_1_1AmrMesh_1acb422930e8e69fc386727f45607e114b" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>MakeNewGrids</name></member>
      <member refid="classamrex_1_1AmrMesh_1a0bf56e73af1dfffcba7bfcadad887751" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>MakeNewGrids</name></member>
      <member refid="classamrex_1_1AmrMesh_1a0c2b59ddec7e4f8b4d2fbbdb44cf0e3d" prot="public" virt="virtual"><scope>amrex::AmrMesh</scope><name>MakeNewLevelFromScratch</name></member>
      <member refid="classamrex_1_1AmrMesh_1a5830766b42f260b125443b90f40b0a96" prot="public" virt="virtual"><scope>amrex::AmrMesh</scope><name>ManualTagsPlacement</name></member>
      <member refid="classamrex_1_1AmrMesh_1a716b7e6169d4d0a537970445941e7391" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>max_grid_size</name></member>
      <member refid="classamrex_1_1AmrMesh_1ac488c17bc512ae46995817401dc7a8e7" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>max_level</name></member>
      <member refid="classamrex_1_1AmrMesh_1a359b34414e4ab7c9b33f74b031d16af8" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>maxGridSize</name></member>
      <member refid="classamrex_1_1AmrMesh_1a2b5ebb9f738e77dcc2f99dfe4e4e91d6" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>maxLevel</name></member>
      <member refid="classamrex_1_1AmrMesh_1a8d91fffbf09ac3c696d1f7cffee76b2c" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>MaxRefRatio</name></member>
      <member refid="classamrex_1_1AmrMesh_1acf34e7acc22898675cec3f3b8aa2346c" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>n_error_buf</name></member>
      <member refid="classamrex_1_1AmrMesh_1afe23a9a66345fa657da022fc5a3cb349" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>n_proper</name></member>
      <member refid="classamrex_1_1AmrMesh_1ad5199bceb8775542859c6b51d0a2100c" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>nErrorBuf</name></member>
      <member refid="classamrex_1_1AmrMesh_1a071011d3702ecfc14ebc0f61a30a50ed" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>nErrorBufVect</name></member>
      <member refid="classamrex_1_1AmrMesh_1aa1e59b567c58d9ba22c9e56f8138a22a" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>nProper</name></member>
      <member refid="classamrex_1_1AmrMesh_1a51e0432968299f0c83f90d9b79376a6c" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>operator=</name></member>
      <member refid="classamrex_1_1AmrMesh_1af2d4364b9fd33cf012edbb2170105845" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>operator=</name></member>
      <member refid="classamrex_1_1AmrMesh_1ad19790bf442a1ba0eccd5246f905e3bb" prot="private" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>ProjPeriodic</name></member>
      <member refid="classamrex_1_1AmrMesh_1a7e3c7fc2f5598fdd4132536724933f2a" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>ref_ratio</name></member>
      <member refid="classamrex_1_1AmrMesh_1a95059679c4b3343198edadf7d9d860e5" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>refine_grid_layout</name></member>
      <member refid="classamrex_1_1AmrMesh_1a848a89635a0f509800a5d912ef7b4f0b" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>refRatio</name></member>
      <member refid="classamrex_1_1AmrMesh_1a3e96de11d4a8b2cababa14d116b61958" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>refRatio</name></member>
      <member refid="classamrex_1_1AmrMesh_1aba9a6c34f6e246926e9147ef3da5b535" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetBlockingFactor</name></member>
      <member refid="classamrex_1_1AmrMesh_1adf01c926d4f55d291a5d5a0e0b48c348" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetBlockingFactor</name></member>
      <member refid="classamrex_1_1AmrMesh_1a3818b75f890359e9a8042f7a3b9e4e21" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetBlockingFactor</name></member>
      <member refid="classamrex_1_1AmrMesh_1a04ba4d303b52fe2f1db1e7e23fca5c06" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetBlockingFactor</name></member>
      <member refid="classamrex_1_1AmrMesh_1a404d43ca2363907df6d3206e892a220d" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetBoxArray</name></member>
      <member refid="classamrex_1_1AmrMesh_1a452a3c38dd51bc37e199abe772759a3b" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetDistributionMap</name></member>
      <member refid="classamrex_1_1AmrMesh_1ab40e510f5cd8deda45eb675b82494808" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetFinestLevel</name></member>
      <member refid="classamrex_1_1AmrMesh_1aa755628d0ad98daf37de1670e57d2364" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetGeometry</name></member>
      <member refid="classamrex_1_1AmrMesh_1a77c262385b1bd0bfc96fec96347c041a" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetGridEff</name></member>
      <member refid="classamrex_1_1AmrMesh_1a2c473ca991e89cf526fa0ecd967a7217" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetIterateToFalse</name></member>
      <member refid="classamrex_1_1AmrMesh_1a4612b4d9b23253095da92c3e323ffd73" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetMaxGridSize</name></member>
      <member refid="classamrex_1_1AmrMesh_1a964c875f4546f513fb285e2f90278473" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetMaxGridSize</name></member>
      <member refid="classamrex_1_1AmrMesh_1ae26f4d197dc68e2d26837b8ad0043dbe" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetMaxGridSize</name></member>
      <member refid="classamrex_1_1AmrMesh_1ad6695b6090e726ea6bc405a7d3a75be8" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetMaxGridSize</name></member>
      <member refid="classamrex_1_1AmrMesh_1aee314c43754854d98fc25ce6cd278796" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetNProper</name></member>
      <member refid="classamrex_1_1AmrMesh_1a54d57857c4dd3aa50841ec74a13d4e4c" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>SetUseNewChop</name></member>
      <member refid="classamrex_1_1AmrMesh_1a3162b5c3697f4ce32d585ca434ac40a5" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>use_fixed_coarse_grids</name></member>
      <member refid="classamrex_1_1AmrMesh_1a15a5406d39363635d73cc1d986546fe7" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>use_fixed_upto_level</name></member>
      <member refid="classamrex_1_1AmrMesh_1abaf8432668e3b350306a62e8662f4f96" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>use_new_chop</name></member>
      <member refid="classamrex_1_1AmrMesh_1aee758e772b5c854d121923686d1d3949" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>useFixedCoarseGrids</name></member>
      <member refid="classamrex_1_1AmrMesh_1a6ff4a09f169c29d17327aa37b49d3e5a" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>useFixedUpToLevel</name></member>
      <member refid="classamrex_1_1AmrMesh_1a6d04a0b73b03b5a0008edc4effaeeb44" prot="protected" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>verbose</name></member>
      <member refid="classamrex_1_1AmrMesh_1a9b78b807755b822ba0c46ec0e3150089" prot="public" virt="non-virtual"><scope>amrex::AmrMesh</scope><name>Verbose</name></member>
      <member refid="classamrex_1_1AmrMesh_1a10865e07f3aae297cdea041881e7b9ab" prot="public" virt="virtual"><scope>amrex::AmrMesh</scope><name>~AmrMesh</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
