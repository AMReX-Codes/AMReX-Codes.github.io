<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1IntegratorOps_3_01T_00_01std_1_1enable__if__t_3_01std_1_1is__base__of__v_3_01amre4a8b722c501826628c0ce0b931e91134" kind="struct" language="C++" prot="public">
    <compoundname>amrex::IntegratorOps&lt; T, std::enable_if_t&lt; std::is_base_of_v&lt; amrex::ParticleContainerBase, T &gt; &gt; &gt;</compoundname>
    <includes refid="AMReX__IntegratorBase_8H" local="no">AMReX_IntegratorBase.H</includes>
    <templateparamlist>
      <param>
        <type>class T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1IntegratorOps_3_01T_00_01std_1_1enable__if__t_3_01std_1_1is__base__of__v_3_01amre4a8b722c501826628c0ce0b931e91134_1a1f55321eebaabd2929cc279277be4a00" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::IntegratorOps&lt; T, std::enable_if_t&lt; std::is_base_of_v&lt; amrex::ParticleContainerBase, T &gt; &gt; &gt;::CreateLike</definition>
        <argsstring>(amrex::Vector&lt; std::unique_ptr&lt; T &gt; &gt; &amp;V, const T &amp;Other)</argsstring>
        <name>CreateLike</name>
        <qualifiedname>amrex::IntegratorOps&lt; T, std::enable_if_t&lt; std::is_base_of_v&lt; amrex::ParticleContainerBase, T &gt; &gt; &gt;::CreateLike</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">amrex::Vector</ref>&lt; std::unique_ptr&lt; T &gt; &gt; &amp;</type>
          <declname>V</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>Other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="25" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="25" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1IntegratorOps_3_01T_00_01std_1_1enable__if__t_3_01std_1_1is__base__of__v_3_01amre4a8b722c501826628c0ce0b931e91134_1a8a6fb945abd7817718dc76ef1557c905" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::IntegratorOps&lt; T, std::enable_if_t&lt; std::is_base_of_v&lt; amrex::ParticleContainerBase, T &gt; &gt; &gt;::Copy</definition>
        <argsstring>(T &amp;Y, const T &amp;Other)</argsstring>
        <name>Copy</name>
        <qualifiedname>amrex::IntegratorOps&lt; T, std::enable_if_t&lt; std::is_base_of_v&lt; amrex::ParticleContainerBase, T &gt; &gt; &gt;::Copy</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>Other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="36" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="36" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1IntegratorOps_3_01T_00_01std_1_1enable__if__t_3_01std_1_1is__base__of__v_3_01amre4a8b722c501826628c0ce0b931e91134_1a6dc380c4bf2185f2c4cb96bc2e02edcd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::IntegratorOps&lt; T, std::enable_if_t&lt; std::is_base_of_v&lt; amrex::ParticleContainerBase, T &gt; &gt; &gt;::Saxpy</definition>
        <argsstring>(T &amp;Y, const amrex::Real a, T &amp;X)</argsstring>
        <name>Saxpy</name>
        <qualifiedname>amrex::IntegratorOps&lt; T, std::enable_if_t&lt; std::is_base_of_v&lt; amrex::ParticleContainerBase, T &gt; &gt; &gt;::Saxpy</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>Y</declname>
        </param>
        <param>
          <type>const amrex::Real</type>
          <declname>a</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>X</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="43" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="43" bodyend="82"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" line="22" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_IntegratorBase.H" bodystart="23" bodyend="84"/>
    <listofallmembers>
      <member refid="structamrex_1_1IntegratorOps_3_01T_00_01std_1_1enable__if__t_3_01std_1_1is__base__of__v_3_01amre4a8b722c501826628c0ce0b931e91134_1a8a6fb945abd7817718dc76ef1557c905" prot="public" virt="non-virtual"><scope>amrex::IntegratorOps&lt; T, std::enable_if_t&lt; std::is_base_of_v&lt; amrex::ParticleContainerBase, T &gt; &gt; &gt;</scope><name>Copy</name></member>
      <member refid="structamrex_1_1IntegratorOps_3_01T_00_01std_1_1enable__if__t_3_01std_1_1is__base__of__v_3_01amre4a8b722c501826628c0ce0b931e91134_1a1f55321eebaabd2929cc279277be4a00" prot="public" virt="non-virtual"><scope>amrex::IntegratorOps&lt; T, std::enable_if_t&lt; std::is_base_of_v&lt; amrex::ParticleContainerBase, T &gt; &gt; &gt;</scope><name>CreateLike</name></member>
      <member refid="structamrex_1_1IntegratorOps_3_01T_00_01std_1_1enable__if__t_3_01std_1_1is__base__of__v_3_01amre4a8b722c501826628c0ce0b931e91134_1a6dc380c4bf2185f2c4cb96bc2e02edcd" prot="public" virt="non-virtual"><scope>amrex::IntegratorOps&lt; T, std::enable_if_t&lt; std::is_base_of_v&lt; amrex::ParticleContainerBase, T &gt; &gt; &gt;</scope><name>Saxpy</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
