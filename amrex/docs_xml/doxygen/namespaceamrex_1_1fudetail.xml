<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceamrex_1_1fudetail" kind="namespace" language="C++">
    <compoundname>amrex::fudetail</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1ac4e4c8968ec9936d092c05b63cadb38b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB::value_type</type>
        <definition>FAB::value_type amrex::fudetail::ReduceSum_host</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum_host</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="24" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="24" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a13b043d7aab4cfa6c5a9ab0c1a4e622e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OP</type>
          </param>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; FAB &gt;::value, std::conditional_t&lt; std::is_same&lt; OP, <ref refid="structamrex_1_1ReduceOpLogicalAnd" kindref="compound">ReduceOpLogicalAnd</ref> &gt;::value||std::is_same&lt; OP, <ref refid="structamrex_1_1ReduceOpLogicalOr" kindref="compound">ReduceOpLogicalOr</ref> &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, typename FAB::value_type &gt; &gt;</type>
        <definition>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value, std::conditional_t&lt;std::is_same&lt;OP,ReduceOpLogicalAnd&gt;::value || std::is_same&lt;OP,ReduceOpLogicalOr&gt;::value, int, typename FAB::value_type&gt; &gt; amrex::fudetail::ReduceMF</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMF</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="50" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="50" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a098c61d6b027b62e304d33364545b9bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OP</type>
          </param>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; FAB1 &gt;::value &amp;&amp;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; FAB2 &gt;::value, std::conditional_t&lt; std::is_same&lt; OP, <ref refid="structamrex_1_1ReduceOpLogicalAnd" kindref="compound">ReduceOpLogicalAnd</ref> &gt;::value||std::is_same&lt; OP, <ref refid="structamrex_1_1ReduceOpLogicalOr" kindref="compound">ReduceOpLogicalOr</ref> &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, typename FAB1::value_type &gt; &gt;</type>
        <definition>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value &amp;&amp; IsBaseFab&lt;FAB2&gt;::value, std::conditional_t&lt;std::is_same&lt;OP,ReduceOpLogicalAnd&gt;::value || std::is_same&lt;OP,ReduceOpLogicalOr&gt;::value, int, typename FAB1::value_type&gt; &gt; amrex::fudetail::ReduceMF</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMF</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="79" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="79" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a8a5e1c553c8809c6ac943a5cf5807451" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class OP</type>
          </param>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; FAB1 &gt;::value &amp;&amp;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; FAB2 &gt;::value &amp;&amp;<ref refid="structamrex_1_1IsBaseFab" kindref="compound">IsBaseFab</ref>&lt; FAB3 &gt;::value, std::conditional_t&lt; std::is_same&lt; OP, <ref refid="structamrex_1_1ReduceOpLogicalAnd" kindref="compound">ReduceOpLogicalAnd</ref> &gt;::value||std::is_same&lt; OP, <ref refid="structamrex_1_1ReduceOpLogicalOr" kindref="compound">ReduceOpLogicalOr</ref> &gt;::value, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref>, typename FAB1::value_type &gt; &gt;</type>
        <definition>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value &amp;&amp; IsBaseFab&lt;FAB2&gt;::value &amp;&amp; IsBaseFab&lt;FAB3&gt;::value, std::conditional_t&lt;std::is_same&lt;OP,ReduceOpLogicalAnd&gt;::value || std::is_same&lt;OP,ReduceOpLogicalOr&gt;::value, int, typename FAB1::value_type&gt; &gt; amrex::fudetail::ReduceMF</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMF</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="109" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="109" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a509cfe3f501626b82899a0607f82a0c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!<ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, typename FAB::value_type &gt;</type>
        <definition>std::enable_if_t&lt;!amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, typename FAB::value_type&gt; amrex::fudetail::ReduceSum_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="138" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1ab3ac39d794c16055d51d55be4c322478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, typename FAB::value_type &gt;</type>
        <definition>std::enable_if_t&lt;amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, typename FAB::value_type&gt; amrex::fudetail::ReduceSum_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="145" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="145" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a1d6bdf0b12bbf8248f758bc5ef357fd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::fudetail::ReduceSum_host</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum_host</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="186" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="186" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a446108c6c03634721a360874316711e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!<ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, typename FAB1::value_type &gt;</type>
        <definition>std::enable_if_t&lt;!amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, typename FAB1::value_type&gt; amrex::fudetail::ReduceSum_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="211" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="211" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1aa0a24159faf6dc62695bc3e1758aa1bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, typename FAB1::value_type &gt;</type>
        <definition>std::enable_if_t&lt;amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, typename FAB1::value_type&gt; amrex::fudetail::ReduceSum_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="219" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="219" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1af78389647cebd607843fc15976161901" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::fudetail::ReduceSum_host</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum_host</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="264" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="264" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1afcc5c0728f0b86970e242947cef7e93a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!<ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, typename FAB1::value_type &gt;</type>
        <definition>std::enable_if_t&lt;!amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, typename FAB1::value_type&gt; amrex::fudetail::ReduceSum_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="290" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="290" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a18ea2ebefce034668c5d87add6e8f9b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, typename FAB1::value_type &gt;</type>
        <definition>std::enable_if_t&lt;amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, typename FAB1::value_type&gt; amrex::fudetail::ReduceSum_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceSum_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="298" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="298" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a5f4b1211dc0900c0f69987454ec85ada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB::value_type</type>
        <definition>FAB::value_type amrex::fudetail::ReduceMin_host</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin_host</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="342" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="342" bodyend="357"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a8c7c9b910c8e3e73f887e8a02e1acaab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!<ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, typename FAB::value_type &gt;</type>
        <definition>std::enable_if_t&lt;!amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, typename FAB::value_type&gt; amrex::fudetail::ReduceMin_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="364" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="364" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a536db69e62a9ed5048b6ee48dbb34f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, typename FAB::value_type &gt;</type>
        <definition>std::enable_if_t&lt;amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, typename FAB::value_type&gt; amrex::fudetail::ReduceMin_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="371" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="371" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1adf5af5f75a1e703a505298286d4c584b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::fudetail::ReduceMin_host</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin_host</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="412" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="412" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a00bcb8f20c7b002cb0034537fea3526b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!<ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, typename FAB1::value_type &gt;</type>
        <definition>std::enable_if_t&lt;!amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, typename FAB1::value_type&gt; amrex::fudetail::ReduceMin_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="437" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="437" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a20cf12c3d46410bdf363ccf585f7dcdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, typename FAB1::value_type &gt;</type>
        <definition>std::enable_if_t&lt;amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, typename FAB1::value_type&gt; amrex::fudetail::ReduceMin_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="445" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="445" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1abadf4108c12ac900966af4200172575f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::fudetail::ReduceMin_host</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin_host</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="490" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="490" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1ada04ac91481ae50782f568083e27767d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!<ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, typename FAB1::value_type &gt;</type>
        <definition>std::enable_if_t&lt;!amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, typename FAB1::value_type&gt; amrex::fudetail::ReduceMin_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="516" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="516" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1add08307eacfde3f9238c9a35df479963" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, typename FAB1::value_type &gt;</type>
        <definition>std::enable_if_t&lt;amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, typename FAB1::value_type&gt; amrex::fudetail::ReduceMin_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMin_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="524" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="524" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1af879cc28290c113cead314b2f3a5ce68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB::value_type</type>
        <definition>FAB::value_type amrex::fudetail::ReduceMax_host</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax_host</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="568" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="568" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a7d979b16fd84d1c691f6763c846775fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!<ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, typename FAB::value_type &gt;</type>
        <definition>std::enable_if_t&lt;!amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, typename FAB::value_type&gt; amrex::fudetail::ReduceMax_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="591" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="591" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a414802ac376b8771ac222b0d97711384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, typename FAB::value_type &gt;</type>
        <definition>std::enable_if_t&lt;amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, typename FAB::value_type&gt; amrex::fudetail::ReduceMax_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="598" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="598" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1ab7bf29dd429c8f97882dfbd556d7c94e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::fudetail::ReduceMax_host</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax_host</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="639" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="639" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a616e25fb4b45f5288d74db1984fa904a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!<ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, typename FAB1::value_type &gt;</type>
        <definition>std::enable_if_t&lt;!amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, typename FAB1::value_type&gt; amrex::fudetail::ReduceMax_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="664" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="664" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a6f0611e4209b6386875aa2190eb77ce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, typename FAB1::value_type &gt;</type>
        <definition>std::enable_if_t&lt;amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, typename FAB1::value_type&gt; amrex::fudetail::ReduceMax_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="672" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="672" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1aa6f390b174acee81ffe7acf835d7c89d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>FAB1::value_type</type>
        <definition>FAB1::value_type amrex::fudetail::ReduceMax_host</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax_host</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="717" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="717" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a4871d272b494ec22383148a1b542b545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!<ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, typename FAB1::value_type &gt;</type>
        <definition>std::enable_if_t&lt;!amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, typename FAB1::value_type&gt; amrex::fudetail::ReduceMax_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="743" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="743" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1ab65b94e79d616e995ffae526f4991085" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class FAB3</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, typename FAB1::value_type &gt;</type>
        <definition>std::enable_if_t&lt;amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, typename FAB1::value_type&gt; amrex::fudetail::ReduceMax_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, FabArray&lt; FAB3 &gt; const &amp;fa3, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceMax_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB3 &gt; const &amp;</type>
          <declname>fa3</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="751" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="751" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a75ae0dd863b3cf62c2b8b6be06147359" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::fudetail::ReduceLogicalAnd_host</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd_host</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="795" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="795" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1ad91f51bde9868e6d015a633dff6d973d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!<ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, bool &gt;</type>
        <definition>std::enable_if_t&lt;!amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, bool&gt; amrex::fudetail::ReduceLogicalAnd_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="817" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="817" bodyend="820"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1abb7b584ce656b165120433776b94869f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, bool &gt;</type>
        <definition>std::enable_if_t&lt;amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, bool&gt; amrex::fudetail::ReduceLogicalAnd_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="824" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="824" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a4763bc320be9d82b05c937331689be35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::fudetail::ReduceLogicalAnd_host</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd_host</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="866" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="866" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a9324c78d4b453dd9f88580ef747cdd30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!<ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, bool &gt;</type>
        <definition>std::enable_if_t&lt;!amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, bool&gt; amrex::fudetail::ReduceLogicalAnd_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="890" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="890" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a4402ba165b33f8dd8caa427c4a2ea7ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, bool &gt;</type>
        <definition>std::enable_if_t&lt;amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, bool&gt; amrex::fudetail::ReduceLogicalAnd_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalAnd_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="898" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="898" bodyend="904"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a794d2b1adeaabd6feb0ab8dd6d4ff842" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::fudetail::ReduceLogicalOr_host</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr_host</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="942" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="942" bodyend="957"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1ad13df7e139fd2b9e405ee77032ecb6aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!<ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, bool &gt;</type>
        <definition>std::enable_if_t&lt;!amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, bool&gt; amrex::fudetail::ReduceLogicalOr_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="964" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="964" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a93c9887c337e8dbe5dd84ddd97f1b0b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, bool &gt;</type>
        <definition>std::enable_if_t&lt;amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, bool&gt; amrex::fudetail::ReduceLogicalOr_host</definition>
        <argsstring>(FabArray&lt; FAB &gt; const &amp;fa, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr_host</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; const &amp;</type>
          <declname>fa</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="971" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="971" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1ad0e216d8bd9e533b9386ff484bb06499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
          <param>
            <type>class bar</type>
            <defval>std::enable_if_t&lt;IsBaseFab&lt;FAB1&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool amrex::fudetail::ReduceLogicalOr_host</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr_host</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1013" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1013" bodyend="1030"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1a956d1f2590b24b14299b64f450359b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt;!<ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, bool &gt;</type>
        <definition>std::enable_if_t&lt;!amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, bool&gt; amrex::fudetail::ReduceLogicalOr_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1037" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1037" bodyend="1041"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1fudetail_1af9e694fb534e9dc47bae9781ae136017" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB1</type>
          </param>
          <param>
            <type>class FAB2</type>
          </param>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type>std::enable_if_t&lt; <ref refid="structamrex_1_1DefinitelyNotHostRunnable" kindref="compound">amrex::DefinitelyNotHostRunnable</ref>&lt; F &gt;::value, bool &gt;</type>
        <definition>std::enable_if_t&lt;amrex::DefinitelyNotHostRunnable&lt;F&gt;::value, bool&gt; amrex::fudetail::ReduceLogicalOr_host_wrapper</definition>
        <argsstring>(FabArray&lt; FAB1 &gt; const &amp;fa1, FabArray&lt; FAB2 &gt; const &amp;fa2, IntVect const &amp;nghost, F &amp;&amp;f)</argsstring>
        <name>ReduceLogicalOr_host_wrapper</name>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB1 &gt; const &amp;</type>
          <declname>fa1</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB2 &gt; const &amp;</type>
          <declname>fa2</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="1045" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" bodystart="1045" bodyend="1051"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayUtility.H" line="20" column="18"/>
  </compounddef>
</doxygen>
