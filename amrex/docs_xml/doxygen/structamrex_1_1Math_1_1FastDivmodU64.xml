<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1Math_1_1FastDivmodU64" kind="struct" language="C++" prot="public">
    <compoundname>amrex::Math::FastDivmodU64</compoundname>
    <includes refid="AMReX__Math_8H" local="no">AMReX_Math.H</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1Math_1_1FastDivmodU64_1a7959b6f2f90d3b613e82c6ae4a22477c" prot="public" static="no" mutable="no">
        <type>std::uint64_t</type>
        <definition>std::uint64_t amrex::Math::FastDivmodU64::divisor</definition>
        <argsstring></argsstring>
        <name>divisor</name>
        <qualifiedname>amrex::Math::FastDivmodU64::divisor</qualifiedname>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="377" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="377" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1Math_1_1FastDivmodU64_1abdfbdb0c4abcf0304526080d9febbf42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::Math::FastDivmodU64::FastDivmodU64</definition>
        <argsstring>(std::uint64_t divisor_)</argsstring>
        <name>FastDivmodU64</name>
        <qualifiedname>amrex::Math::FastDivmodU64::FastDivmodU64</qualifiedname>
        <param>
          <type>std::uint64_t</type>
          <declname>divisor_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="423" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="423" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Math_1_1FastDivmodU64_1af153f422ce6cbc50b12a7528b801aa7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::Math::FastDivmodU64::FastDivmodU64</definition>
        <argsstring>()=default</argsstring>
        <name>FastDivmodU64</name>
        <qualifiedname>amrex::Math::FastDivmodU64::FastDivmodU64</qualifiedname>
        <briefdescription>
<para>Default construct an invalidÂ FastDivmodU64. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="428" column="5"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Math_1_1FastDivmodU64_1a0dad5dcd57a8f13d39b4a8fa5febe439" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ std::uint64_t</type>
        <definition>__host__ __device__ std::uint64_t amrex::Math::FastDivmodU64::divide</definition>
        <argsstring>(std::uint64_t dividend) const</argsstring>
        <name>divide</name>
        <qualifiedname>amrex::Math::FastDivmodU64::divide</qualifiedname>
        <param>
          <type>std::uint64_t</type>
          <declname>dividend</declname>
        </param>
        <briefdescription>
<para>Returns the quotient of floor(dividend / divisor) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="432" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="432" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Math_1_1FastDivmodU64_1a6b7e8e0de2ace65d028df332dce60c54" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ std::uint64_t</type>
        <definition>__host__ __device__ std::uint64_t amrex::Math::FastDivmodU64::modulus</definition>
        <argsstring>(std::uint64_t quotient, std::uint64_t dividend) const</argsstring>
        <name>modulus</name>
        <qualifiedname>amrex::Math::FastDivmodU64::modulus</qualifiedname>
        <param>
          <type>std::uint64_t</type>
          <declname>quotient</declname>
        </param>
        <param>
          <type>std::uint64_t</type>
          <declname>dividend</declname>
        </param>
        <briefdescription>
<para>Computes the remainder given a computed quotient and dividend. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="447" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="447" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Math_1_1FastDivmodU64_1a3a28a1e7f2f3af434d101ac7b0aa7515" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ std::uint64_t</type>
        <definition>__host__ __device__ std::uint64_t amrex::Math::FastDivmodU64::divmod</definition>
        <argsstring>(std::uint64_t &amp;remainder, std::uint64_t dividend) const</argsstring>
        <name>divmod</name>
        <qualifiedname>amrex::Math::FastDivmodU64::divmod</qualifiedname>
        <param>
          <type>std::uint64_t &amp;</type>
          <declname>remainder</declname>
        </param>
        <param>
          <type>std::uint64_t</type>
          <declname>dividend</declname>
        </param>
        <briefdescription>
<para>Returns the quotient of floor(dividend / divisor) and computes the remainder. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="454" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="454" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1Math_1_1FastDivmodU64_1a42999921fa31294083958dfd16a24f1a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ void</type>
        <definition>__host__ __device__ void amrex::Math::FastDivmodU64::operator()</definition>
        <argsstring>(std::uint64_t &amp;quotient, std::uint64_t &amp;remainder, std::uint64_t dividend) const</argsstring>
        <name>operator()</name>
        <qualifiedname>amrex::Math::FastDivmodU64::operator()</qualifiedname>
        <param>
          <type>std::uint64_t &amp;</type>
          <declname>quotient</declname>
        </param>
        <param>
          <type>std::uint64_t &amp;</type>
          <declname>remainder</declname>
        </param>
        <param>
          <type>std::uint64_t</type>
          <declname>dividend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Computes integer division and modulus using precomputed values. This is computationally inexpensive. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="464" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="464" bodyend="467"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Object to encapsulate the fast division+modulus operation for 64b integer division.</para>
<para>Example:</para>
<para>uint64_t quotient, remainder, dividend, divisor;</para>
<para><ref refid="structamrex_1_1Math_1_1FastDivmodU64" kindref="compound">FastDivmodU64</ref> divmod(divisor);</para>
<para>divmod(quotient, remainder, dividend);</para>
<para>// quotient = (dividend / divisor) // remainder = (dividend % divisor) </para>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="375" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="376" bodyend="468"/>
    <listofallmembers>
      <member refid="structamrex_1_1Math_1_1FastDivmodU64_1a0dad5dcd57a8f13d39b4a8fa5febe439" prot="public" virt="non-virtual"><scope>amrex::Math::FastDivmodU64</scope><name>divide</name></member>
      <member refid="structamrex_1_1Math_1_1FastDivmodU64_1a7959b6f2f90d3b613e82c6ae4a22477c" prot="public" virt="non-virtual"><scope>amrex::Math::FastDivmodU64</scope><name>divisor</name></member>
      <member refid="structamrex_1_1Math_1_1FastDivmodU64_1a3a28a1e7f2f3af434d101ac7b0aa7515" prot="public" virt="non-virtual"><scope>amrex::Math::FastDivmodU64</scope><name>divmod</name></member>
      <member refid="structamrex_1_1Math_1_1FastDivmodU64_1abdfbdb0c4abcf0304526080d9febbf42" prot="public" virt="non-virtual"><scope>amrex::Math::FastDivmodU64</scope><name>FastDivmodU64</name></member>
      <member refid="structamrex_1_1Math_1_1FastDivmodU64_1af153f422ce6cbc50b12a7528b801aa7f" prot="public" virt="non-virtual"><scope>amrex::Math::FastDivmodU64</scope><name>FastDivmodU64</name></member>
      <member refid="structamrex_1_1Math_1_1FastDivmodU64_1a6b7e8e0de2ace65d028df332dce60c54" prot="public" virt="non-virtual"><scope>amrex::Math::FastDivmodU64</scope><name>modulus</name></member>
      <member refid="structamrex_1_1Math_1_1FastDivmodU64_1a42999921fa31294083958dfd16a24f1a" prot="public" virt="non-virtual"><scope>amrex::Math::FastDivmodU64</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
