<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1Math" kind="namespace" language="C++">
    <compoundname>amrex::Math</compoundname>
    <innerclass refid="structamrex_1_1Math_1_1FastDivmodU64" prot="public">amrex::Math::FastDivmodU64</innerclass>
    <innernamespace refid="namespaceamrex_1_1Math_1_1detail">amrex::Math::detail</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1Math_1a2d522eb2d366ecb5383529269e417457" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt;, T &gt;</type>
        <definition>constexpr std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt;, T &gt; amrex::Math::pi</definition>
        <argsstring>()</argsstring>
        <name>pi</name>
        <qualifiedname>amrex::Math::pi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="63" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1ada7d7d19433d7d59ac03689f8b55631d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> double</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE double amrex::Math::cospi</definition>
        <argsstring>(double x)</argsstring>
        <name>cospi</name>
        <qualifiedname>amrex::Math::cospi</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return cos(x*pi) given x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="70" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="70" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1adbc23685ea37023206db656ff45973f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> float</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE float amrex::Math::cospi</definition>
        <argsstring>(float x)</argsstring>
        <name>cospi</name>
        <qualifiedname>amrex::Math::cospi</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return cos(x*pi) given x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="82" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="82" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1a0568425c35018cd1be09a3b08a245585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> double</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE double amrex::Math::sinpi</definition>
        <argsstring>(double x)</argsstring>
        <name>sinpi</name>
        <qualifiedname>amrex::Math::sinpi</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return sin(x*pi) given x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="94" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="94" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1a209b6bc6888f6b26a5337094aa3b5900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> float</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE float amrex::Math::sinpi</definition>
        <argsstring>(float x)</argsstring>
        <name>sinpi</name>
        <qualifiedname>amrex::Math::sinpi</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return sin(x*pi) given x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="106" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="106" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1a1797321fc1588c00caf3421d5285da81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Real</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> std::pair&lt; T_Real, T_Real &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE std::pair&lt; T_Real, T_Real &gt; amrex::Math::sincos</definition>
        <argsstring>(T_Real x)</argsstring>
        <name>sincos</name>
        <qualifiedname>amrex::Math::sincos</qualifiedname>
        <param>
          <type>T_Real</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return sine and cosine of given number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="139" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="139" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1aae7262755836bb222753c42fa7260c25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> std::pair&lt; double, double &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE std::pair&lt; double, double &gt; amrex::Math::sincos</definition>
        <argsstring>(double x)</argsstring>
        <name>sincos</name>
        <qualifiedname>amrex::Math::sincos</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return sine and cosine of given number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="156" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="156" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1af45493ddd19101a65b9b43f79072f36b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> std::pair&lt; float, float &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE std::pair&lt; float, float &gt; amrex::Math::sincos</definition>
        <argsstring>(float x)</argsstring>
        <name>sincos</name>
        <qualifiedname>amrex::Math::sincos</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return sine and cosine of given number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="171" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="171" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1aec19c232678cd982bad2ccaa484c349f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Real</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> std::pair&lt; T_Real, T_Real &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE std::pair&lt; T_Real, T_Real &gt; amrex::Math::sincospi</definition>
        <argsstring>(T_Real x)</argsstring>
        <name>sincospi</name>
        <qualifiedname>amrex::Math::sincospi</qualifiedname>
        <param>
          <type>T_Real</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return sin(pi*x) and cos(pi*x) given x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="186" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="186" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1af3ec0eb80e89fb4e4acca9c0c2941789" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> std::pair&lt; double, double &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE std::pair&lt; double, double &gt; amrex::Math::sincospi</definition>
        <argsstring>(double x)</argsstring>
        <name>sincospi</name>
        <qualifiedname>amrex::Math::sincospi</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return sin(pi*x) and cos(pi*x) given x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="204" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="204" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1ada567ffe82efab0c702b7c317f227fb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> std::pair&lt; float, float &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE std::pair&lt; float, float &gt; amrex::Math::sincospi</definition>
        <argsstring>(float x)</argsstring>
        <name>sincospi</name>
        <qualifiedname>amrex::Math::sincospi</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return sin(pi*x) and cos(pi*x) given x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="219" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="219" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1af57cfa83af1c7e36c3f085932cd2febf" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Power</declname>
            <defname>Power</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;!std::is_integral&lt;T&gt;() || Power&gt;=0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> constexpr T</type>
        <definition>AMREX_FORCE_INLINE constexpr T amrex::Math::powi</definition>
        <argsstring>(T x) noexcept</argsstring>
        <name>powi</name>
        <qualifiedname>amrex::Math::powi</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return pow(x, Power), where Power is an integer known at compile time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="235" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="235" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1a01a50f01bdffee6800b64090e421f47f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::Math::comp_ellint_1</definition>
        <argsstring>(T k)</argsstring>
        <name>comp_ellint_1</name>
        <qualifiedname>amrex::Math::comp_ellint_1</qualifiedname>
        <param>
          <type>T</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="271" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="271" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1a64d6ba33500bba8603dd6fba3588ac3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> T</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE T amrex::Math::comp_ellint_2</definition>
        <argsstring>(T k)</argsstring>
        <name>comp_ellint_2</name>
        <qualifiedname>amrex::Math::comp_ellint_2</qualifiedname>
        <param>
          <type>T</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="296" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="296" bodyend="333"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="34" column="1"/>
  </compounddef>
</doxygen>
