<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1Math" kind="namespace" language="C++">
    <compoundname>amrex::Math</compoundname>
    <innerclass refid="structamrex_1_1Math_1_1FastDivmodU64" prot="public">amrex::Math::FastDivmodU64</innerclass>
    <innernamespace refid="namespaceamrex_1_1Math_1_1detail">amrex::Math::detail</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1Math_1a2d522eb2d366ecb5383529269e417457" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt;, T &gt;</type>
        <definition>constexpr std::enable_if_t&lt; std::is_floating_point_v&lt; T &gt;, T &gt; amrex::Math::pi</definition>
        <argsstring>()</argsstring>
        <name>pi</name>
        <qualifiedname>amrex::Math::pi</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="63" column="28" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1a432fec91e1e245a27f7e53004b5aa84e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ double</type>
        <definition>__host__ __device__ double amrex::Math::cospi</definition>
        <argsstring>(double x)</argsstring>
        <name>cospi</name>
        <qualifiedname>amrex::Math::cospi</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return cos(x*pi) given x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="70" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="70" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1a58a968cda54d7709f770dce3a3072d73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ float</type>
        <definition>__host__ __device__ float amrex::Math::cospi</definition>
        <argsstring>(float x)</argsstring>
        <name>cospi</name>
        <qualifiedname>amrex::Math::cospi</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return cos(x*pi) given x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="82" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="82" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1a2b4554b4a0469a6ba03b671bba656d18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ double</type>
        <definition>__host__ __device__ double amrex::Math::sinpi</definition>
        <argsstring>(double x)</argsstring>
        <name>sinpi</name>
        <qualifiedname>amrex::Math::sinpi</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return sin(x*pi) given x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="94" column="8" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="94" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1aed0c2c43f313a76f15dd31cf72d35b11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ float</type>
        <definition>__host__ __device__ float amrex::Math::sinpi</definition>
        <argsstring>(float x)</argsstring>
        <name>sinpi</name>
        <qualifiedname>amrex::Math::sinpi</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return sin(x*pi) given x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="106" column="7" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="106" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1a982c4b3204ef371831cfa755111cedcb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ std::pair&lt; double, double &gt;</type>
        <definition>__host__ __device__ std::pair&lt; double, double &gt; amrex::Math::sincos</definition>
        <argsstring>(double x)</argsstring>
        <name>sincos</name>
        <qualifiedname>amrex::Math::sincos</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return sine and cosine of given number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="153" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="153" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1a21ccf14b84c98ae83de6f8e9efb45d45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ std::pair&lt; float, float &gt;</type>
        <definition>__host__ __device__ std::pair&lt; float, float &gt; amrex::Math::sincos</definition>
        <argsstring>(float x)</argsstring>
        <name>sincos</name>
        <qualifiedname>amrex::Math::sincos</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return sine and cosine of given number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="167" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="167" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1a3c35c52ce1cf31103992e7383be8e7fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ std::pair&lt; double, double &gt;</type>
        <definition>__host__ __device__ std::pair&lt; double, double &gt; amrex::Math::sincospi</definition>
        <argsstring>(double x)</argsstring>
        <name>sincospi</name>
        <qualifiedname>amrex::Math::sincospi</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return sin(pi*x) and cos(pi*x) given x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="197" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="197" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1a8cf21bfbc035ee56a0a635442111c5ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ std::pair&lt; float, float &gt;</type>
        <definition>__host__ __device__ std::pair&lt; float, float &gt; amrex::Math::sincospi</definition>
        <argsstring>(float x)</argsstring>
        <name>sincospi</name>
        <qualifiedname>amrex::Math::sincospi</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return sin(pi*x) and cos(pi*x) given x. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="211" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="211" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1ac73f6dfd5ae205dfe7340b826994b6a7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Power</declname>
            <defname>Power</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;!std::is_integral&lt;T&gt;() || Power&gt;=0</defval>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T amrex::Math::powi</definition>
        <argsstring>(T x) noexcept</argsstring>
        <name>powi</name>
        <qualifiedname>amrex::Math::powi</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Return pow(x, Power), where Power is an integer known at compile time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="227" column="13" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="227" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1a89fd39408f46d02491ae4f5df53a0840" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ T</type>
        <definition>__host__ __device__ T amrex::Math::comp_ellint_1</definition>
        <argsstring>(T k)</argsstring>
        <name>comp_ellint_1</name>
        <qualifiedname>amrex::Math::comp_ellint_1</qualifiedname>
        <param>
          <type>T</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="263" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="263" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1Math_1aacdfee6976b6c744254567be3b78f24b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__host__ __device__ T</type>
        <definition>__host__ __device__ T amrex::Math::comp_ellint_2</definition>
        <argsstring>(T k)</argsstring>
        <name>comp_ellint_2</name>
        <qualifiedname>amrex::Math::comp_ellint_2</qualifiedname>
        <param>
          <type>T</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="288" column="3" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" bodystart="288" bodyend="325"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Math.H" line="34" column="1"/>
  </compounddef>
</doxygen>
