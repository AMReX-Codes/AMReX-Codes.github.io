<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1CArena_1_1Node" kind="class" language="C++" prot="protected">
    <compoundname>amrex::CArena::Node</compoundname>
    <includes refid="AMReX__CArena_8H" local="no">AMReX_CArena.H</includes>
    <innerclass refid="structamrex_1_1CArena_1_1Node_1_1hash" prot="public">amrex::CArena::Node::hash</innerclass>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1CArena_1_1Node_1a999ce0f54f3eae13c2533caabe5acc89" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* amrex::CArena::Node::m_block</definition>
        <argsstring></argsstring>
        <name>m_block</name>
        <qualifiedname>amrex::CArena::Node::m_block</qualifiedname>
        <briefdescription>
<para>The block of memory we reference. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="157" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CArena_1_1Node_1a8d1a994928ff734df597327f22db12dd" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* amrex::CArena::Node::m_owner</definition>
        <argsstring></argsstring>
        <name>m_owner</name>
        <qualifiedname>amrex::CArena::Node::m_owner</qualifiedname>
        <briefdescription>
<para>The starting address of the original allocation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="159" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CArena_1_1Node_1a3eefad51a3f5c77dfba6bfa8f42e8909" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::Node::m_size</definition>
        <argsstring></argsstring>
        <name>m_size</name>
        <qualifiedname>amrex::CArena::Node::m_size</qualifiedname>
        <briefdescription>
<para>The size of the block we represent. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="161" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CArena_1_1Node_1a0a7a1c0cd13749231991a5b7361fa2b6" prot="private" static="no" mutable="no">
        <type><ref refid="structamrex_1_1MemStat" kindref="compound">MemStat</ref> *</type>
        <definition>MemStat* amrex::CArena::Node::m_stat</definition>
        <argsstring></argsstring>
        <name>m_stat</name>
        <qualifiedname>amrex::CArena::Node::m_stat</qualifiedname>
        <briefdescription>
<para>Used for profiling if this <ref refid="classamrex_1_1CArena_1_1Node" kindref="compound">Node</ref> represents a user allocated block of memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="163" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="163" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1afe41c39814d8c215e3c61d9b68b84a8b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::CArena::Node::Node</definition>
        <argsstring>(void *a_block, void *a_owner, std::size_t a_size, MemStat *a_stat=nullptr) noexcept</argsstring>
        <name>Node</name>
        <qualifiedname>amrex::CArena::Node::Node</qualifiedname>
        <param>
          <type>void *</type>
          <declname>a_block</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>a_owner</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>a_size</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1MemStat" kindref="compound">MemStat</ref> *</type>
          <declname>a_stat</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="109" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1a3d53e0dac699c533be3ddb44eda51cd4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::CArena::Node::operator&lt;</definition>
        <argsstring>(const Node &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;</name>
        <qualifiedname>amrex::CArena::Node::operator&lt;</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1CArena_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>The &quot;less-than&quot; operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="114" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1a88b16dbe8f6f315955cdde15cbd71e7e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::CArena::Node::operator==</definition>
        <argsstring>(const Node &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>amrex::CArena::Node::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1CArena_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>The equality operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="120" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1ae8c2f16658f65e9e9d1a75cfe0b1d9be" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void * amrex::CArena::Node::block</definition>
        <argsstring>() const noexcept</argsstring>
        <name>block</name>
        <qualifiedname>amrex::CArena::Node::block</qualifiedname>
        <briefdescription>
<para>The block address. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="126" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1a644086075ae8e03798c85ae56205c953" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CArena::Node::block</definition>
        <argsstring>(void *blk) noexcept</argsstring>
        <name>block</name>
        <qualifiedname>amrex::CArena::Node::block</qualifiedname>
        <param>
          <type>void *</type>
          <declname>blk</declname>
        </param>
        <briefdescription>
<para>Set block address. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="129" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1a1bc2b9b503ccabb172ffe16f554519cf" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::Node::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <qualifiedname>amrex::CArena::Node::size</qualifiedname>
        <briefdescription>
<para>The size of the memory block. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="132" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1a736fe7c725b517fece9136f39e983765" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CArena::Node::size</definition>
        <argsstring>(std::size_t sz) noexcept</argsstring>
        <name>size</name>
        <qualifiedname>amrex::CArena::Node::size</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Set size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="135" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1a813253c8573663ae3266a72ffdc8ad16" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void * amrex::CArena::Node::owner</definition>
        <argsstring>() const noexcept</argsstring>
        <name>owner</name>
        <qualifiedname>amrex::CArena::Node::owner</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="137" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="137" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1a9d48386ac6a4c17d1e2b4eb8ad13e221" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::CArena::Node::coalescable</definition>
        <argsstring>(const Node &amp;rhs) const noexcept</argsstring>
        <name>coalescable</name>
        <qualifiedname>amrex::CArena::Node::coalescable</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1CArena_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="139" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1a8f2e829562d08e2df61a09d21a37a1eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1MemStat" kindref="compound">MemStat</ref> *</type>
        <definition>MemStat * amrex::CArena::Node::mem_stat</definition>
        <argsstring>() const</argsstring>
        <name>mem_stat</name>
        <qualifiedname>amrex::CArena::Node::mem_stat</qualifiedname>
        <briefdescription>
<para>Get the <ref refid="structamrex_1_1MemStat" kindref="compound">MemStat</ref> object of the function where this block was allocated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="144" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1a982d4802a2066548ebdef6bbe1864a24" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CArena::Node::mem_stat</definition>
        <argsstring>(MemStat *a_stat) noexcept</argsstring>
        <name>mem_stat</name>
        <qualifiedname>amrex::CArena::Node::mem_stat</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1MemStat" kindref="compound">MemStat</ref> *</type>
          <declname>a_stat</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="structamrex_1_1MemStat" kindref="compound">MemStat</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="147" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="147" bodyend="147"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>The nodes in our free list and block list. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>amrex::CArena::Node</label>
        <link refid="classamrex_1_1CArena_1_1Node"/>
        <childnode refid="2" relation="usage">
          <edgelabel>m_stat</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>amrex::MemStat</label>
        <link refid="structamrex_1_1MemStat"/>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="106" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="107" bodyend="164"/>
    <listofallmembers>
      <member refid="classamrex_1_1CArena_1_1Node_1ae8c2f16658f65e9e9d1a75cfe0b1d9be" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>block</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a644086075ae8e03798c85ae56205c953" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>block</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a9d48386ac6a4c17d1e2b4eb8ad13e221" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>coalescable</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a999ce0f54f3eae13c2533caabe5acc89" prot="private" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>m_block</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a8d1a994928ff734df597327f22db12dd" prot="private" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>m_owner</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a3eefad51a3f5c77dfba6bfa8f42e8909" prot="private" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>m_size</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a0a7a1c0cd13749231991a5b7361fa2b6" prot="private" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>m_stat</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a8f2e829562d08e2df61a09d21a37a1eb" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>mem_stat</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a982d4802a2066548ebdef6bbe1864a24" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>mem_stat</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1afe41c39814d8c215e3c61d9b68b84a8b" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>Node</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a3d53e0dac699c533be3ddb44eda51cd4" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>operator&lt;</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a88b16dbe8f6f315955cdde15cbd71e7e" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>operator==</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a813253c8573663ae3266a72ffdc8ad16" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>owner</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a1bc2b9b503ccabb172ffe16f554519cf" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>size</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a736fe7c725b517fece9136f39e983765" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
