<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1CArena_1_1Node" kind="class" language="C++" prot="protected">
    <compoundname>amrex::CArena::Node</compoundname>
    <includes refid="AMReX__CArena_8H" local="no">AMReX_CArena.H</includes>
    <innerclass refid="structamrex_1_1CArena_1_1Node_1_1hash" prot="public">amrex::CArena::Node::hash</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1CArena_1_1Node_1a999ce0f54f3eae13c2533caabe5acc89" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* amrex::CArena::Node::m_block</definition>
        <argsstring></argsstring>
        <name>m_block</name>
        <briefdescription>
<para>The block of memory we reference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="112" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CArena_1_1Node_1a8d1a994928ff734df597327f22db12dd" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* amrex::CArena::Node::m_owner</definition>
        <argsstring></argsstring>
        <name>m_owner</name>
        <briefdescription>
<para>The starting address of the original allocation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="114" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1CArena_1_1Node_1a3eefad51a3f5c77dfba6bfa8f42e8909" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::Node::m_size</definition>
        <argsstring></argsstring>
        <name>m_size</name>
        <briefdescription>
<para>The size of the block we represent. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="116" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="116" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1a100baa8624f3f84dd51a5f2cba530a9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::CArena::Node::Node</definition>
        <argsstring>(void *a_block, void *a_owner, std::size_t a_size) noexcept</argsstring>
        <name>Node</name>
        <param>
          <type>void *</type>
          <declname>a_block</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>a_owner</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>a_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="70" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1a3d53e0dac699c533be3ddb44eda51cd4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::CArena::Node::operator&lt;</definition>
        <argsstring>(const Node &amp;rhs) const noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classamrex_1_1CArena_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>The &quot;less-than&quot; operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="75" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1a88b16dbe8f6f315955cdde15cbd71e7e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::CArena::Node::operator==</definition>
        <argsstring>(const Node &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1CArena_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>The equality operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="81" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1a20a366d961aa30bc166cfc7e5ec9a185" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* amrex::CArena::Node::block</definition>
        <argsstring>() const noexcept</argsstring>
        <name>block</name>
        <briefdescription>
<para>The block address. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="87" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1a644086075ae8e03798c85ae56205c953" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CArena::Node::block</definition>
        <argsstring>(void *blk) noexcept</argsstring>
        <name>block</name>
        <param>
          <type>void *</type>
          <declname>blk</declname>
        </param>
        <briefdescription>
<para>Set block address. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="90" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1a1bc2b9b503ccabb172ffe16f554519cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t amrex::CArena::Node::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>The size of the memory block. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="93" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1a736fe7c725b517fece9136f39e983765" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::CArena::Node::size</definition>
        <argsstring>(std::size_t sz) noexcept</argsstring>
        <name>size</name>
        <param>
          <type>std::size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Set size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="96" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1abef15ce1cbccdaa8dc7aa6a6bb4a0609" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* amrex::CArena::Node::owner</definition>
        <argsstring>() const noexcept</argsstring>
        <name>owner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="98" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1CArena_1_1Node_1a9d48386ac6a4c17d1e2b4eb8ad13e221" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::CArena::Node::coalescable</definition>
        <argsstring>(const Node &amp;rhs) const noexcept</argsstring>
        <name>coalescable</name>
        <param>
          <type>const <ref refid="classamrex_1_1CArena_1_1Node" kindref="compound">Node</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="100" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="100" bodyend="102"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The nodes in our free list and block list. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" line="68" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_CArena.H" bodystart="67" bodyend="117"/>
    <listofallmembers>
      <member refid="classamrex_1_1CArena_1_1Node_1a20a366d961aa30bc166cfc7e5ec9a185" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>block</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a644086075ae8e03798c85ae56205c953" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>block</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a9d48386ac6a4c17d1e2b4eb8ad13e221" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>coalescable</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a999ce0f54f3eae13c2533caabe5acc89" prot="private" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>m_block</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a8d1a994928ff734df597327f22db12dd" prot="private" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>m_owner</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a3eefad51a3f5c77dfba6bfa8f42e8909" prot="private" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>m_size</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a100baa8624f3f84dd51a5f2cba530a9b" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>Node</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a3d53e0dac699c533be3ddb44eda51cd4" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>operator&lt;</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a88b16dbe8f6f315955cdde15cbd71e7e" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>operator==</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1abef15ce1cbccdaa8dc7aa6a6bb4a0609" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>owner</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a1bc2b9b503ccabb172ffe16f554519cf" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>size</name></member>
      <member refid="classamrex_1_1CArena_1_1Node_1a736fe7c725b517fece9136f39e983765" prot="public" virt="non-virtual"><scope>amrex::CArena::Node</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
