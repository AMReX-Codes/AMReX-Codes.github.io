<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="namespaceamrex_1_1particle__impl" kind="namespace" language="C++">
    <compoundname>amrex::particle_impl</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceamrex_1_1particle__impl_1a2d04600f075446491619393da78cb086" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> Long</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Long amrex::particle_impl::unpack_id</definition>
        <argsstring>(const uint64_t idcpu) noexcept</argsstring>
        <name>unpack_id</name>
        <qualifiedname>amrex::particle_impl::unpack_id</qualifiedname>
        <param>
          <type>const uint64_t</type>
          <declname>idcpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="39" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="39" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__impl_1a292bd43da7170d7c575666619a9e5678" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE int amrex::particle_impl::unpack_cpu</definition>
        <argsstring>(const uint64_t idcpu) noexcept</argsstring>
        <name>unpack_cpu</name>
        <qualifiedname>amrex::particle_impl::unpack_cpu</qualifiedname>
        <param>
          <type>const uint64_t</type>
          <declname>idcpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="51" column="9" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__impl_1a73af5eeb70423a869c895a059aef2e34" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::particle_impl::pack_id</definition>
        <argsstring>(uint64_t &amp;idcpu, const Long id) noexcept</argsstring>
        <name>pack_id</name>
        <qualifiedname>amrex::particle_impl::pack_id</qualifiedname>
        <param>
          <type>uint64_t &amp;</type>
          <declname>idcpu</declname>
        </param>
        <param>
          <type>const Long</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="56" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="56" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__impl_1ad98b7c64b3759cca102127387b79ad4c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::particle_impl::pack_cpu</definition>
        <argsstring>(uint64_t &amp;idcpu, const int cpu) noexcept</argsstring>
        <name>pack_cpu</name>
        <qualifiedname>amrex::particle_impl::pack_cpu</qualifiedname>
        <param>
          <type>uint64_t &amp;</type>
          <declname>idcpu</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>cpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="80" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="80" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__impl_1a8d43d30e28caedd08cba477944645398" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::particle_impl::make_invalid</definition>
        <argsstring>(uint64_t &amp;idcpu) noexcept</argsstring>
        <name>make_invalid</name>
        <qualifiedname>amrex::particle_impl::make_invalid</qualifiedname>
        <param>
          <type>uint64_t &amp;</type>
          <declname>idcpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="91" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__impl_1a2e2a874faf6b40398db34d4b7c06c381" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> void</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE void amrex::particle_impl::make_valid</definition>
        <argsstring>(uint64_t &amp;idcpu) noexcept</argsstring>
        <name>make_valid</name>
        <qualifiedname>amrex::particle_impl::make_valid</qualifiedname>
        <param>
          <type>uint64_t &amp;</type>
          <declname>idcpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="97" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespaceamrex_1_1particle__impl_1a1cd7ada43c935a229f4e1af9819e2722" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> bool</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE bool amrex::particle_impl::is_valid</definition>
        <argsstring>(const uint64_t idcpu) noexcept</argsstring>
        <name>is_valid</name>
        <qualifiedname>amrex::particle_impl::is_valid</qualifiedname>
        <param>
          <type>const uint64_t</type>
          <declname>idcpu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="103" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" bodystart="103" bodyend="106"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_Particle.H" line="36" column="5"/>
  </compounddef>
</doxygen>
