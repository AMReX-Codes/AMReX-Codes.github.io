<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4" kind="struct" language="C++" prot="public">
    <compoundname>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;</compoundname>
    <includes refid="AMReX__ParticleArray_8H" local="no">AMReX_ParticleArray.H</includes>
    <templateparamlist>
      <param>
        <type>template&lt; typename... &gt; class</type>
        <declname>ContainerType</declname>
        <defname>ContainerType</defname>
      </param>
      <param>
        <type>template&lt; typename... &gt; class</type>
        <declname>ParticleType</declname>
        <defname>ParticleType</defname>
      </param>
      <param>
        <type>typename...</type>
        <declname>Types</declname>
        <defname>Types</defname>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a83fde477aa6104bcc887473e4804f35f" prot="public" static="no">
        <type>std::tuple&lt; ContainerType&lt; Types &gt;... &gt;</type>
        <definition>using amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::container_type =  std::tuple&lt;ContainerType&lt;Types&gt;...&gt;</definition>
        <argsstring></argsstring>
        <name>container_type</name>
        <qualifiedname>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::container_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" line="132" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1aac6b529d04666c7ab12e389631ddc1e0" prot="public" static="no">
        <type><ref refid="classamrex_1_1GpuTuple" kindref="compound">amrex::GpuTuple</ref>&lt; Types *... &gt;</type>
        <definition>using amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::raw_type =  amrex::GpuTuple&lt;Types*...&gt;</definition>
        <argsstring></argsstring>
        <name>raw_type</name>
        <qualifiedname>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::raw_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" line="133" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a6d7825ead06e725a3e1a91b248a9149a" prot="public" static="no">
        <type>ParticleType&lt; <ref refid="classamrex_1_1ref__wrapper" kindref="compound">ref_wrapper</ref>&lt; Types &gt;... &gt;</type>
        <definition>using amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::value_type =  ParticleType&lt;ref_wrapper&lt;Types&gt;...&gt;</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" line="134" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" bodystart="134" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a226d825fc52f81b473a5ccb27d0d19e1" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1aac6b529d04666c7ab12e389631ddc1e0" kindref="member">raw_type</ref></type>
        <definition>static constexpr raw_type amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::get_raw_data</definition>
        <argsstring>(container_type &amp;a_container)</argsstring>
        <name>get_raw_data</name>
        <qualifiedname>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::get_raw_data</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a83fde477aa6104bcc887473e4804f35f" kindref="member">container_type</ref> &amp;</type>
          <declname>a_container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" line="136" column="31" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1aa06193aa48e202c1d61b1c00b5cb5f13" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr void</type>
        <definition>static constexpr void amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::resize</definition>
        <argsstring>(container_type &amp;a_container, std::size_t a_size)</argsstring>
        <name>resize</name>
        <qualifiedname>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::resize</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a83fde477aa6104bcc887473e4804f35f" kindref="member">container_type</ref> &amp;</type>
          <declname>a_container</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>a_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" line="141" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a0c93bb0e80cf6277ee1823f35072007a" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>static constexpr void amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::push_back</definition>
        <argsstring>(container_type &amp;a_container, ValueType &amp;&amp;a_value)</argsstring>
        <name>push_back</name>
        <qualifiedname>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::push_back</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a83fde477aa6104bcc887473e4804f35f" kindref="member">container_type</ref> &amp;</type>
          <declname>a_container</declname>
        </param>
        <param>
          <type>ValueType &amp;&amp;</type>
          <declname>a_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" line="147" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" bodystart="147" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a7e8276dde25976588d90281777c5a96c" prot="public" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr std::size_t</type>
        <definition>static constexpr std::size_t amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::size</definition>
        <argsstring>(container_type &amp;a_container)</argsstring>
        <name>size</name>
        <qualifiedname>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::size</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a83fde477aa6104bcc887473e4804f35f" kindref="member">container_type</ref> &amp;</type>
          <declname>a_container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" line="153" column="34" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" bodystart="153" bodyend="156"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a3b69467d541c08b7bfb89a4bfa505644" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>static constexpr auto amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::get_raw_data_impl</definition>
        <argsstring>(container_type &amp;a_container, std::index_sequence&lt; Is... &gt;)</argsstring>
        <name>get_raw_data_impl</name>
        <qualifiedname>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::get_raw_data_impl</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a83fde477aa6104bcc887473e4804f35f" kindref="member">container_type</ref> &amp;</type>
          <declname>a_container</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" line="161" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" bodystart="161" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1ab1aeeebdc685a58e0b7442c5530421ed" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>static constexpr void amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::resize_impl</definition>
        <argsstring>(container_type &amp;a_container, std::size_t a_size, std::index_sequence&lt; Is... &gt;)</argsstring>
        <name>resize_impl</name>
        <qualifiedname>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::resize_impl</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a83fde477aa6104bcc887473e4804f35f" kindref="member">container_type</ref> &amp;</type>
          <declname>a_container</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>a_size</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" line="168" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" bodystart="168" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1af7f46ef2c49dac17167364472e5edcef" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
          <param>
            <type>std::size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>constexpr void</type>
        <definition>static constexpr void amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::push_back_impl</definition>
        <argsstring>(container_type &amp;a_container, ValueType const &amp;a_value, std::index_sequence&lt; Is... &gt;)</argsstring>
        <name>push_back_impl</name>
        <qualifiedname>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;::push_back_impl</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a83fde477aa6104bcc887473e4804f35f" kindref="member">container_type</ref> &amp;</type>
          <declname>a_container</declname>
        </param>
        <param>
          <type>ValueType const &amp;</type>
          <declname>a_value</declname>
        </param>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" line="176" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" bodystart="176" bodyend="182"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Implementation of the SoA policy. The underlying data structure is a Tuple&lt;ContainerType&lt;ParticleType&gt;&gt;. Note that unlike the AoS, this container works with a &quot;ref_wrap&quot;ed version of the particle data, so we can modify the particle data in the tile. </para>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" line="131" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Particle/AMReX_ParticleArray.H" bodystart="131" bodyend="183"/>
    <listofallmembers>
      <member refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a83fde477aa6104bcc887473e4804f35f" prot="public" virt="non-virtual"><scope>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;</scope><name>container_type</name></member>
      <member refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a226d825fc52f81b473a5ccb27d0d19e1" prot="public" virt="non-virtual"><scope>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;</scope><name>get_raw_data</name></member>
      <member refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a3b69467d541c08b7bfb89a4bfa505644" prot="private" virt="non-virtual"><scope>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;</scope><name>get_raw_data_impl</name></member>
      <member refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a0c93bb0e80cf6277ee1823f35072007a" prot="public" virt="non-virtual"><scope>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;</scope><name>push_back</name></member>
      <member refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1af7f46ef2c49dac17167364472e5edcef" prot="private" virt="non-virtual"><scope>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;</scope><name>push_back_impl</name></member>
      <member refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1aac6b529d04666c7ab12e389631ddc1e0" prot="public" virt="non-virtual"><scope>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;</scope><name>raw_type</name></member>
      <member refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1aa06193aa48e202c1d61b1c00b5cb5f13" prot="public" virt="non-virtual"><scope>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;</scope><name>resize</name></member>
      <member refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1ab1aeeebdc685a58e0b7442c5530421ed" prot="private" virt="non-virtual"><scope>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;</scope><name>resize_impl</name></member>
      <member refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a7e8276dde25976588d90281777c5a96c" prot="public" virt="non-virtual"><scope>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;</scope><name>size</name></member>
      <member refid="structamrex_1_1DataLayoutPolicy_3_01ContainerType_00_01ParticleType_3_01Types_8_8_8_01_4_00_01DataLayout_1_1SoA_01_4_1a6d7825ead06e725a3e1a91b248a9149a" prot="public" virt="non-virtual"><scope>amrex::DataLayoutPolicy&lt; ContainerType, ParticleType&lt; Types... &gt;, DataLayout::SoA &gt;</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
