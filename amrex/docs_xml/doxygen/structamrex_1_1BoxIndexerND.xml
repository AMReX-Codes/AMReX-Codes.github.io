<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structamrex_1_1BoxIndexerND" kind="struct" language="C++" prot="public">
    <compoundname>amrex::BoxIndexerND</compoundname>
    <includes refid="AMReX__Box_8H" local="no">AMReX_Box.H</includes>
    <templateparamlist>
      <param>
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <declname>dim</declname>
        <defname>dim</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structamrex_1_1BoxIndexerND_1aebcf0e258d72df8bb95c67d428de6127" prot="public" static="no" mutable="no">
        <type>std::uint64_t</type>
        <definition>std::uint64_t amrex::BoxIndexerND&lt; dim &gt;::npts</definition>
        <argsstring></argsstring>
        <name>npts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="2028" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="2028" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1BoxIndexerND_1ad69bb2d630508a55b5a60e7756c3540f" prot="public" static="no" mutable="no">
        <type><ref refid="structamrex_1_1Math_1_1FastDivmodU64" kindref="compound">Math::FastDivmodU64</ref></type>
        <definition>Math::FastDivmodU64 amrex::BoxIndexerND&lt; dim &gt;::fdm[dim-1]</definition>
        <argsstring>[dim-1]</argsstring>
        <name>fdm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="2029" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="2029" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structamrex_1_1BoxIndexerND_1a6d064be1725438f3d730f6522f9ced83" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>IntVectND&lt;dim&gt; amrex::BoxIndexerND&lt; dim &gt;::lo</definition>
        <argsstring></argsstring>
        <name>lo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="2030" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="2030" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structamrex_1_1BoxIndexerND_1a5675e229ddf29d9c458cd5b0f49b9b44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::BoxIndexerND&lt; dim &gt;::BoxIndexerND</definition>
        <argsstring>(BoxND&lt; dim &gt; const &amp;box)</argsstring>
        <name>BoxIndexerND</name>
        <param>
          <type><ref refid="classamrex_1_1BoxND" kindref="compound">BoxND</ref>&lt; dim &gt; const &amp;</type>
          <declname>box</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="2032" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="2032" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1BoxIndexerND_1ad27346b304d89647685a5c835d1919cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="classamrex_1_1IntVectND" kindref="compound">IntVectND</ref>&lt; dim &gt;</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE IntVectND&lt;dim&gt; amrex::BoxIndexerND&lt; dim &gt;::intVect</definition>
        <argsstring>(std::uint64_t icell) const</argsstring>
        <name>intVect</name>
        <param>
          <type>std::uint64_t</type>
          <declname>icell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="2044" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="2044" bodyend="2058"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1BoxIndexerND_1a95e13aac1eac4316e6e01d2ddd47ac3f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
            <declname>N</declname>
            <defname>N</defname>
            <defval>dim</defval>
          </param>
          <param>
            <type>std::enable_if_t&lt;(1&lt;=N &amp;&amp;N&lt;=3), <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> <ref refid="structamrex_1_1Dim3" kindref="compound">Dim3</ref></type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE Dim3 amrex::BoxIndexerND&lt; dim &gt;::operator()</definition>
        <argsstring>(std::uint64_t icell) const</argsstring>
        <name>operator()</name>
        <param>
          <type>std::uint64_t</type>
          <declname>icell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="2062" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="2062" bodyend="2065"/>
      </memberdef>
      <memberdef kind="function" id="structamrex_1_1BoxIndexerND_1ae852e51f5e19dac43938ee4476361f21" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="AMReX__GpuQualifiers_8H_1aac52ee54727d35b2d0033b119a991618" kindref="member">AMREX_GPU_HOST_DEVICE</ref> <ref refid="AMReX__Extension_8H_1a90cf7b81cd61799c87306cad156cc317" kindref="member">AMREX_FORCE_INLINE</ref> std::uint64_t</type>
        <definition>AMREX_GPU_HOST_DEVICE AMREX_FORCE_INLINE std::uint64_t amrex::BoxIndexerND&lt; dim &gt;::numPts</definition>
        <argsstring>() const</argsstring>
        <name>numPts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="2068" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="2068" bodyend="2068"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>amrex::Math::FastDivmodU64</label>
        <link refid="structamrex_1_1Math_1_1FastDivmodU64"/>
      </node>
      <node id="1">
        <label>amrex::BoxIndexerND&lt; dim &gt;</label>
        <link refid="structamrex_1_1BoxIndexerND"/>
        <childnode refid="2" relation="usage">
          <edgelabel>fdm</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" line="2026" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_Box.H" bodystart="2027" bodyend="2069"/>
    <listofallmembers>
      <member refid="structamrex_1_1BoxIndexerND_1a5675e229ddf29d9c458cd5b0f49b9b44" prot="public" virt="non-virtual"><scope>amrex::BoxIndexerND</scope><name>BoxIndexerND</name></member>
      <member refid="structamrex_1_1BoxIndexerND_1ad69bb2d630508a55b5a60e7756c3540f" prot="public" virt="non-virtual"><scope>amrex::BoxIndexerND</scope><name>fdm</name></member>
      <member refid="structamrex_1_1BoxIndexerND_1ad27346b304d89647685a5c835d1919cb" prot="public" virt="non-virtual"><scope>amrex::BoxIndexerND</scope><name>intVect</name></member>
      <member refid="structamrex_1_1BoxIndexerND_1a6d064be1725438f3d730f6522f9ced83" prot="public" virt="non-virtual"><scope>amrex::BoxIndexerND</scope><name>lo</name></member>
      <member refid="structamrex_1_1BoxIndexerND_1aebcf0e258d72df8bb95c67d428de6127" prot="public" virt="non-virtual"><scope>amrex::BoxIndexerND</scope><name>npts</name></member>
      <member refid="structamrex_1_1BoxIndexerND_1ae852e51f5e19dac43938ee4476361f21" prot="public" virt="non-virtual"><scope>amrex::BoxIndexerND</scope><name>numPts</name></member>
      <member refid="structamrex_1_1BoxIndexerND_1a95e13aac1eac4316e6e01d2ddd47ac3f" prot="public" virt="non-virtual"><scope>amrex::BoxIndexerND</scope><name>operator()</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
