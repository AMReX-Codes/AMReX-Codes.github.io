<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1RealDescriptor" kind="class" language="C++" prot="public">
    <compoundname>amrex::RealDescriptor</compoundname>
    <includes refid="AMReX__FabConv_8H" local="no">AMReX_FabConv.H</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classamrex_1_1RealDescriptor_1ae4c7fcfb3c69266545dd3f84af9b1115" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Long &gt;</type>
        <definition>Vector&lt;Long&gt; amrex::RealDescriptor::fr</definition>
        <argsstring></argsstring>
        <name>fr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="252" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1RealDescriptor_1afcfec860496e4fc3bb85266a72321efa" prot="private" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::RealDescriptor::ord</definition>
        <argsstring></argsstring>
        <name>ord</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="253" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" bodystart="253" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1RealDescriptor_1aaa3172ecb27298323dd87d8c72204eb2" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::RealDescriptor::bAlwaysFixDenormals</definition>
        <argsstring></argsstring>
        <name>bAlwaysFixDenormals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="254" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1RealDescriptor_1a1e67eb076409779a54695afdf2c0a966" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::RealDescriptor::writeBufferSize</definition>
        <argsstring></argsstring>
        <name>writeBufferSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="255" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1RealDescriptor_1aad58178e786c29c8513d8549b20e0e6b" prot="private" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::RealDescriptor::readBufferSize</definition>
        <argsstring></argsstring>
        <name>readBufferSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="256" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" bodystart="256" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1a5b76b8b48ca89f49fcb5d08d7f919677" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::RealDescriptor::RealDescriptor</definition>
        <argsstring>()</argsstring>
        <name>RealDescriptor</name>
        <briefdescription>
<para>The default constructor. Does not build a proper <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref>. This should only be used when you need to build a generic <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> in order to be able to read in a specific one from an istream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="116" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="91" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1af61d40bfa02ed076c84b183449123310" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::RealDescriptor::RealDescriptor</definition>
        <argsstring>(const Long *format, const int *order, int order_length)</argsstring>
        <name>RealDescriptor</name>
        <param>
          <type>const Long *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>order</declname>
        </param>
        <param>
          <type>int</type>
          <declname>order_length</declname>
        </param>
        <briefdescription>
<para>Construct a specific <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref>, passing in the format of the Real, the order of the Real, and the length of the array detailing the ordering. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="122" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="94" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1add111caab7a47e1e54409f0fe0f531d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Long *</type>
        <definition>const Long * amrex::RealDescriptor::format</definition>
        <argsstring>() const &amp;</argsstring>
        <name>format</name>
        <briefdescription>
<para>Returns the format array as a const Long*. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="126" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="102" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1a1e0ae02a26d61e6ed5c739182b3a05d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const Long *</type>
        <definition>const Long* amrex::RealDescriptor::format</definition>
        <argsstring>()&amp;&amp;=delete</argsstring>
        <name>format</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1ad827bfc5b6baadddd3c1b913f46057f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Long &gt; &amp;</type>
        <definition>const Vector&lt; Long &gt; &amp; amrex::RealDescriptor::formatarray</definition>
        <argsstring>() const &amp;</argsstring>
        <name>formatarray</name>
        <briefdescription>
<para>Returns const <ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;Long&gt;</ref> reference to the format array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="131" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="109" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1a25e02763a257873bb4047c6480f55a87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; Long &gt; &amp;</type>
        <definition>const Vector&lt;Long&gt;&amp; amrex::RealDescriptor::formatarray</definition>
        <argsstring>()&amp;&amp;=delete</argsstring>
        <name>formatarray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1adb0da1597fe482a78cf9dc474b1a9328" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const int *</type>
        <definition>const int * amrex::RealDescriptor::order</definition>
        <argsstring>() const &amp;</argsstring>
        <name>order</name>
        <briefdescription>
<para>Returns the order array as a const int*. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="135" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="116" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1a2af8838acb76b2c9b75658f3856e507d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const int *</type>
        <definition>const int* amrex::RealDescriptor::order</definition>
        <argsstring>()&amp;&amp;=delete</argsstring>
        <name>order</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1a15088522b061b0e6c504ea1175a783f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
        <definition>const Vector&lt; int &gt; &amp; amrex::RealDescriptor::orderarray</definition>
        <argsstring>() const &amp;</argsstring>
        <name>orderarray</name>
        <briefdescription>
<para>Returns const <ref refid="classamrex_1_1Vector" kindref="compound">Vector&lt;int&gt;</ref> reference to the order array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="139" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="123" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1ad4c4f4561138aee7fcdc7bcbec68230c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
        <definition>const Vector&lt;int&gt;&amp; amrex::RealDescriptor::orderarray</definition>
        <argsstring>()&amp;&amp;=delete</argsstring>
        <name>orderarray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1a1afcb82f317a052c3d0ed300328d938d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::RealDescriptor::numBytes</definition>
        <argsstring>() const </argsstring>
        <name>numBytes</name>
        <briefdescription>
<para>Returns the number of bytes in the Real. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="143" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="130" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1a6139f5d7b964c65a57e021908c459c5e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::RealDescriptor::operator==</definition>
        <argsstring>(const RealDescriptor &amp;rd) const </argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
        </param>
        <briefdescription>
<para>The equality operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="146" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1aa86915ed9589f3b3c593392d02c6ee25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::RealDescriptor::operator!=</definition>
        <argsstring>(const RealDescriptor &amp;rd) const </argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>rd</declname>
        </param>
        <briefdescription>
<para>The inequality operator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="149" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1aa08145862a0f472319fc826d1c8ed65b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> *</type>
        <definition>RealDescriptor * amrex::RealDescriptor::clone</definition>
        <argsstring>() const </argsstring>
        <name>clone</name>
        <briefdescription>
<para>Returns a copy of this <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> on the heap. The user is responsible for deletion. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="162" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="169" bodyend="172"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1adbd417c0e8ee1019ce39cc3c35d0b06d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealDescriptor::SetFixDenormals</definition>
        <argsstring>()</argsstring>
        <name>SetFixDenormals</name>
        <briefdescription>
<para>Set to always fix denormals when converting to native format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="152" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1a0e8add3f679863e8b4e09d5a681f3bd4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealDescriptor::SetReadBufferSize</definition>
        <argsstring>(int rbs)</argsstring>
        <name>SetReadBufferSize</name>
        <param>
          <type>int</type>
          <declname>rbs</declname>
        </param>
        <briefdescription>
<para>Set read and write buffer sizes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="155" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="155" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1aae779778e03e99a52811ac1e3460f4d2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealDescriptor::SetWriteBufferSize</definition>
        <argsstring>(int wbs)</argsstring>
        <name>SetWriteBufferSize</name>
        <param>
          <type>int</type>
          <declname>wbs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="156" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="162" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1a8950b0885e9d4a06d55ab2556dc71131" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> *</type>
        <definition>RealDescriptor * amrex::RealDescriptor::newRealDescriptor</definition>
        <argsstring>(int format, int precision, const char *systype, int ordering)</argsstring>
        <name>newRealDescriptor</name>
        <param>
          <type>int</type>
          <declname>format</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>systype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ordering</declname>
        </param>
        <briefdescription>
<para>Returns a <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> on the heap detailing requested floating-point type. Here format, precision, and ordering correspond to the enumerations in <ref refid="classamrex_1_1FABio" kindref="compound">FABio</ref>. This is here to support reading &quot;old&quot; FABs. Do NOT use it in new code. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="170" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="222" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1a0f94f4f743da5876bbf8afa6ab1fd613" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealDescriptor::convertToNativeFormat</definition>
        <argsstring>(Real *out, Long nitems, void *in, const RealDescriptor &amp;id)</argsstring>
        <name>convertToNativeFormat</name>
        <param>
          <type>Real *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Convert nitems in <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> format to native Real format. The out array is assumed to be large enough to hold the resulting output. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="179" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="956" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1abe330fc946bd5bbfd5a03087c727f5f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealDescriptor::convertToNativeFormat</definition>
        <argsstring>(Real *out, Long nitems, std::istream &amp;is, const RealDescriptor &amp;id)</argsstring>
        <name>convertToNativeFormat</name>
        <param>
          <type>Real *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Read nitems from istream in <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> format and convert them to the native Real format. The out array is assumed to be large enough to hold the resulting output. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="189" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="982" bodyend="1017"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1a91dde50b590073ce6c8154df86c9c281" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealDescriptor::convertFromNativeFormat</definition>
        <argsstring>(std::ostream &amp;os, Long nitems, const Real *in, const RealDescriptor &amp;od)</argsstring>
        <name>convertFromNativeFormat</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>const Real *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>od</declname>
        </param>
        <briefdescription>
<para>Convert nitems Reals in native format to <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> format and write them to the ostream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="198" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="1045" bodyend="1079"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1a88b7acd8c23099513d5b5c9ce06344f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealDescriptor::convertFromNativeFormat</definition>
        <argsstring>(void *out, Long nitems, const void *in, const RealDescriptor &amp;od)</argsstring>
        <name>convertFromNativeFormat</name>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>od</declname>
        </param>
        <briefdescription>
<para>Convert nitems Reals in native format to <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> format. The out array is assumed to be large enough to hold the resulting output. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="207" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="1024" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1aa5b07184bf42f9d39fcaccf6e9ca0fc6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealDescriptor::convertFromNativeFloatFormat</definition>
        <argsstring>(std::ostream &amp;os, Long nitems, const float *in, const RealDescriptor &amp;od)</argsstring>
        <name>convertFromNativeFloatFormat</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>od</declname>
        </param>
        <briefdescription>
<para>Convert nitems floats in native format to <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> format and write them to the ostream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="216" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="1087" bodyend="1121"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1a8d3e02daedf046920036514587034b2e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealDescriptor::convertFromNativeDoubleFormat</definition>
        <argsstring>(std::ostream &amp;os, Long nitems, const double *in, const RealDescriptor &amp;od)</argsstring>
        <name>convertFromNativeDoubleFormat</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>od</declname>
        </param>
        <briefdescription>
<para>Convert nitems doubles in native format to <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> format and write them to the ostream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="225" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="1129" bodyend="1163"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1af34959841955d956473b14feca1209cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealDescriptor::convertToNativeFloatFormat</definition>
        <argsstring>(float *out, Long nitems, std::istream &amp;is, const RealDescriptor &amp;id)</argsstring>
        <name>convertToNativeFloatFormat</name>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Read nitems from istream in <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> format and convert them to the native float format. The out array is assumed to be large enough to hold the resulting output. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="235" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="1170" bodyend="1205"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1RealDescriptor_1aa83674a91e2dcc69c8fd93d4009b3276" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::RealDescriptor::convertToNativeDoubleFormat</definition>
        <argsstring>(double *out, Long nitems, std::istream &amp;is, const RealDescriptor &amp;id)</argsstring>
        <name>convertToNativeDoubleFormat</name>
        <param>
          <type>double *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nitems</declname>
        </param>
        <param>
          <type>std::istream &amp;</type>
          <declname>is</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Read nitems from istream in <ref refid="classamrex_1_1RealDescriptor" kindref="compound">RealDescriptor</ref> format and convert them to the native double format. The out array is assumed to be large enough to hold the resulting output. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="245" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.cpp" bodystart="1212" bodyend="1247"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This class is meant to hold all information needed to completely describe the &quot;Real&quot; floating-point type on a machine. By &quot;Real&quot; here we mean either the &quot;float&quot; or &quot;double&quot; type that this version of <ref refid="classamrex_1_1AMReX" kindref="compound">AMReX</ref> was built with, which corresponds to whether BL_USE_FLOAT or BL_USE_DOUBLE was used to build the version of the library. </para>    </briefdescription>
    <detaileddescription>
<para>To describe a &quot;Real&quot; type two arrays are needed: one detailing the ordering of the bytes in the Real, relative to the canonical ordering 1 .. sizeof(Real) and the other detailing the format of the floating-point number.</para><para>The array detailing the format of a floating-point number is an eight-element array of longs containing the following information: <verbatim>    format[0] = number of bits per number
    format[1] = number of bits in exponent
    format[2] = number of bits in mantissa
    format[3] = start bit of sign
    format[4] = start bit of exponent
    format[5] = start bit of mantissa
    format[6] = high order mantissa bit (CRAY needs this)
    format[7] = bias of exponent
</verbatim></para><para>This allows us to write out &quot;Real&quot;s in the native format on a machine, and then by also saving the <ref refid="classamrex_1_1IntDescriptor" kindref="compound">IntDescriptor</ref>, we can read them back in on another machine and have enough information to construct the exact same &quot;Real&quot; values, provided the Reals have the same size on the two machines. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="6279">
        <label>std::vector&lt; Long, std::allocator&lt; Long &gt; &gt;</label>
      </node>
      <node id="6276">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6277" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6277">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="6275">
        <label>amrex::RealDescriptor</label>
        <link refid="classamrex_1_1RealDescriptor"/>
        <childnode refid="6276" relation="usage">
          <edgelabel>ord</edgelabel>
        </childnode>
        <childnode refid="6278" relation="usage">
          <edgelabel>fr</edgelabel>
        </childnode>
      </node>
      <node id="6278">
        <label>amrex::Vector&lt; Long &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="6279" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" line="108" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_FabConv.H" bodystart="107" bodyend="257"/>
    <listofallmembers>
      <member refid="classamrex_1_1RealDescriptor_1aaa3172ecb27298323dd87d8c72204eb2" prot="private" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>bAlwaysFixDenormals</name></member>
      <member refid="classamrex_1_1RealDescriptor_1aa08145862a0f472319fc826d1c8ed65b" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>clone</name></member>
      <member refid="classamrex_1_1RealDescriptor_1a8d3e02daedf046920036514587034b2e" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>convertFromNativeDoubleFormat</name></member>
      <member refid="classamrex_1_1RealDescriptor_1aa5b07184bf42f9d39fcaccf6e9ca0fc6" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>convertFromNativeFloatFormat</name></member>
      <member refid="classamrex_1_1RealDescriptor_1a91dde50b590073ce6c8154df86c9c281" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>convertFromNativeFormat</name></member>
      <member refid="classamrex_1_1RealDescriptor_1a88b7acd8c23099513d5b5c9ce06344f4" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>convertFromNativeFormat</name></member>
      <member refid="classamrex_1_1RealDescriptor_1aa83674a91e2dcc69c8fd93d4009b3276" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>convertToNativeDoubleFormat</name></member>
      <member refid="classamrex_1_1RealDescriptor_1af34959841955d956473b14feca1209cb" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>convertToNativeFloatFormat</name></member>
      <member refid="classamrex_1_1RealDescriptor_1a0f94f4f743da5876bbf8afa6ab1fd613" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>convertToNativeFormat</name></member>
      <member refid="classamrex_1_1RealDescriptor_1abe330fc946bd5bbfd5a03087c727f5f3" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>convertToNativeFormat</name></member>
      <member refid="classamrex_1_1RealDescriptor_1add111caab7a47e1e54409f0fe0f531d5" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>format</name></member>
      <member refid="classamrex_1_1RealDescriptor_1a1e0ae02a26d61e6ed5c739182b3a05d2" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>format</name></member>
      <member refid="classamrex_1_1RealDescriptor_1ad827bfc5b6baadddd3c1b913f46057f3" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>formatarray</name></member>
      <member refid="classamrex_1_1RealDescriptor_1a25e02763a257873bb4047c6480f55a87" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>formatarray</name></member>
      <member refid="classamrex_1_1RealDescriptor_1ae4c7fcfb3c69266545dd3f84af9b1115" prot="private" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>fr</name></member>
      <member refid="classamrex_1_1RealDescriptor_1a8950b0885e9d4a06d55ab2556dc71131" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>newRealDescriptor</name></member>
      <member refid="classamrex_1_1RealDescriptor_1a1afcb82f317a052c3d0ed300328d938d" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>numBytes</name></member>
      <member refid="classamrex_1_1RealDescriptor_1aa86915ed9589f3b3c593392d02c6ee25" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>operator!=</name></member>
      <member refid="classamrex_1_1RealDescriptor_1a6139f5d7b964c65a57e021908c459c5e" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>operator==</name></member>
      <member refid="classamrex_1_1RealDescriptor_1afcfec860496e4fc3bb85266a72321efa" prot="private" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>ord</name></member>
      <member refid="classamrex_1_1RealDescriptor_1adb0da1597fe482a78cf9dc474b1a9328" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>order</name></member>
      <member refid="classamrex_1_1RealDescriptor_1a2af8838acb76b2c9b75658f3856e507d" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>order</name></member>
      <member refid="classamrex_1_1RealDescriptor_1a15088522b061b0e6c504ea1175a783f2" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>orderarray</name></member>
      <member refid="classamrex_1_1RealDescriptor_1ad4c4f4561138aee7fcdc7bcbec68230c" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>orderarray</name></member>
      <member refid="classamrex_1_1RealDescriptor_1aad58178e786c29c8513d8549b20e0e6b" prot="private" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>readBufferSize</name></member>
      <member refid="classamrex_1_1RealDescriptor_1a5b76b8b48ca89f49fcb5d08d7f919677" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>RealDescriptor</name></member>
      <member refid="classamrex_1_1RealDescriptor_1af61d40bfa02ed076c84b183449123310" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>RealDescriptor</name></member>
      <member refid="classamrex_1_1RealDescriptor_1adbd417c0e8ee1019ce39cc3c35d0b06d" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>SetFixDenormals</name></member>
      <member refid="classamrex_1_1RealDescriptor_1a0e8add3f679863e8b4e09d5a681f3bd4" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>SetReadBufferSize</name></member>
      <member refid="classamrex_1_1RealDescriptor_1aae779778e03e99a52811ac1e3460f4d2" prot="public" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>SetWriteBufferSize</name></member>
      <member refid="classamrex_1_1RealDescriptor_1a1e67eb076409779a54695afdf2c0a966" prot="private" virt="non-virtual"><scope>amrex::RealDescriptor</scope><name>writeBufferSize</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
