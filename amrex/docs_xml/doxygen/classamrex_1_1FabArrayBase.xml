<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="classamrex_1_1FabArrayBase" kind="class" language="C++" prot="public">
    <compoundname>amrex::FabArrayBase</compoundname>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; FArrayBox &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; TagBox &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; IArrayBox &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; amrex::EBCellFlagFab &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; BaseFab&lt; GpuComplex&lt; Real &gt; &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; BaseFab&lt; GpuComplex&lt; typename MF::value_type &gt; &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; BaseFab&lt; GpuComplex&lt; T &gt; &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; amrex::BaseFab&lt; HYPRE_Int &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; amrex::BaseFab&lt; AtomicInt &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; amrex::CutFab &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; amrex::Mask &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; amrex::BaseFab&lt; PetscInt &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; GFab &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; RealTuple &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; int &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; HYPRE_Int &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; Int &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; amrex::PODVector&lt; Int &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; amrex::PODVector&lt; HYPRE_Int &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; amrex::PODVector&lt; int &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; amrex::Vector&lt; BCTuple &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; amrex::Vector&lt; RealTuple &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; amrex::GpuArray&lt; amrex::MLCellLinOpT::BCTL, 2 *3 &gt; * &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; PetscInt &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; FAB &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; T &gt;</derivedcompoundref>
    <includes refid="AMReX__FabArrayBase_8H" local="no">AMReX_FabArrayBase.H</includes>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1BDKey" prot="public">amrex::FabArrayBase::BDKey</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1CacheStats" prot="public">amrex::FabArrayBase::CacheStats</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1CFinfo" prot="public">amrex::FabArrayBase::CFinfo</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1CommMetaData" prot="public">amrex::FabArrayBase::CommMetaData</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1CopyComTag" prot="public">amrex::FabArrayBase::CopyComTag</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1CPC" prot="public">amrex::FabArrayBase::CPC</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1FabArrayStats" prot="public">amrex::FabArrayBase::FabArrayStats</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1FabComTag" prot="public">amrex::FabArrayBase::FabComTag</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1FB" prot="public">amrex::FabArrayBase::FB</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1FPinfo" prot="public">amrex::FabArrayBase::FPinfo</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1meminfo" prot="public">amrex::FabArrayBase::meminfo</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1ParForInfo" prot="public">amrex::FabArrayBase::ParForInfo</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1PolarB" prot="public">amrex::FabArrayBase::PolarB</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1RB180" prot="public">amrex::FabArrayBase::RB180</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1RB90" prot="public">amrex::FabArrayBase::RB90</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1RegionTag" prot="public">amrex::FabArrayBase::RegionTag</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1TileArray" prot="public">amrex::FabArrayBase::TileArray</innerclass>
    <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" prot="public" static="no" strong="no">
        <type></type>
        <name>CpOp</name>
        <qualifiedname>amrex::FabArrayBase::CpOp</qualifiedname>
        <enumvalue id="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" prot="public">
          <name>COPY</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa10289ce78187f199681fabf1c9956399" prot="public">
          <name>ADD</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>parallel copy or add </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="394" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="394" bodyend="394"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a9bdd65ce61ce9ee5ca52c6b387dd4800" prot="public" static="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CopyComTag_1a6dba1d21f107ff1f8815e368aa1fb091" kindref="member">CopyComTag::CopyComTagsContainer</ref></type>
        <definition>using amrex::FabArrayBase::CopyComTagsContainer =  CopyComTag::CopyComTagsContainer</definition>
        <argsstring></argsstring>
        <name>CopyComTagsContainer</name>
        <qualifiedname>amrex::FabArrayBase::CopyComTagsContainer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="220" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1aa36883196eb7b1d039fd1941966a4310" prot="public" static="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CopyComTag_1ae6a08f61ef40bcb043383a5000ea028e" kindref="member">CopyComTag::MapOfCopyComTagContainers</ref></type>
        <definition>using amrex::FabArrayBase::MapOfCopyComTagContainers =  CopyComTag::MapOfCopyComTagContainers</definition>
        <argsstring></argsstring>
        <name>MapOfCopyComTagContainers</name>
        <qualifiedname>amrex::FabArrayBase::MapOfCopyComTagContainers</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="221" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a13121d16e1be9ac4ea05a7df793a47fd" prot="public" static="no">
        <type>std::multimap&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="structamrex_1_1FabArrayBase_1_1FPinfo" kindref="compound">FabArrayBase::FPinfo</ref> * &gt;</type>
        <definition>using amrex::FabArrayBase::FPinfoCache =  std::multimap&lt;BDKey,FabArrayBase::FPinfo*&gt;</definition>
        <argsstring></argsstring>
        <name>FPinfoCache</name>
        <qualifiedname>amrex::FabArrayBase::FPinfoCache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="332" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1adee16eddda3b226990da74e087c9cfd9" prot="public" static="no">
        <type>FPinfoCache::iterator</type>
        <definition>using amrex::FabArrayBase::FPinfoCacheIter =  FPinfoCache::iterator</definition>
        <argsstring></argsstring>
        <name>FPinfoCacheIter</name>
        <qualifiedname>amrex::FabArrayBase::FPinfoCacheIter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="333" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1ab93444c8298b6446b699b33cf6c9247b" prot="public" static="no">
        <type>std::multimap&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="structamrex_1_1FabArrayBase_1_1CFinfo" kindref="compound">FabArrayBase::CFinfo</ref> * &gt;</type>
        <definition>using amrex::FabArrayBase::CFinfoCache =  std::multimap&lt;BDKey,FabArrayBase::CFinfo*&gt;</definition>
        <argsstring></argsstring>
        <name>CFinfoCache</name>
        <qualifiedname>amrex::FabArrayBase::CFinfoCache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="377" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1ae15d8b6b473748103771433c507773ad" prot="public" static="no">
        <type>CFinfoCache::iterator</type>
        <definition>using amrex::FabArrayBase::CFinfoCacheIter =  CFinfoCache::iterator</definition>
        <argsstring></argsstring>
        <name>CFinfoCacheIter</name>
        <qualifiedname>amrex::FabArrayBase::CFinfoCacheIter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="378" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a905802e4dcdc5377e09d455fc80f0400" prot="public" static="no">
        <type>std::map&lt; std::pair&lt; <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref>, <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &gt;, <ref refid="structamrex_1_1FabArrayBase_1_1TileArray" kindref="compound">TileArray</ref> &gt;</type>
        <definition>using amrex::FabArrayBase::TAMap =  std::map&lt;std::pair&lt;IntVect,IntVect&gt;, TileArray&gt;</definition>
        <argsstring></argsstring>
        <name>TAMap</name>
        <qualifiedname>amrex::FabArrayBase::TAMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="459" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1acefd7d2a27952d4bac78ac9befcda8eb" prot="public" static="no">
        <type>std::map&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="classamrex_1_1FabArrayBase_1a905802e4dcdc5377e09d455fc80f0400" kindref="member">TAMap</ref> &gt;</type>
        <definition>using amrex::FabArrayBase::TACache =  std::map&lt;BDKey, TAMap&gt;</definition>
        <argsstring></argsstring>
        <name>TACache</name>
        <qualifiedname>amrex::FabArrayBase::TACache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="460" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a9e9131d2e52b3140088bed29299df5e5" prot="public" static="no">
        <type>std::multimap&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="structamrex_1_1FabArrayBase_1_1FB" kindref="compound">FabArrayBase::FB</ref> * &gt;</type>
        <definition>using amrex::FabArrayBase::FBCache =  std::multimap&lt;BDKey,FabArrayBase::FB*&gt;</definition>
        <argsstring></argsstring>
        <name>FBCache</name>
        <qualifiedname>amrex::FabArrayBase::FBCache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="523" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a41abb738518224cedd8cfe16206382ba" prot="public" static="no">
        <type>FBCache::iterator</type>
        <definition>using amrex::FabArrayBase::FBCacheIter =  FBCache::iterator</definition>
        <argsstring></argsstring>
        <name>FBCacheIter</name>
        <qualifiedname>amrex::FabArrayBase::FBCacheIter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="524" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1ab76531d8f4022eaa58de8ba56796e5de" prot="public" static="no">
        <type>std::multimap&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="structamrex_1_1FabArrayBase_1_1CPC" kindref="compound">FabArrayBase::CPC</ref> * &gt;</type>
        <definition>using amrex::FabArrayBase::CPCache =  std::multimap&lt;BDKey,FabArrayBase::CPC*&gt;</definition>
        <argsstring></argsstring>
        <name>CPCache</name>
        <qualifiedname>amrex::FabArrayBase::CPCache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="575" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="575" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a9b1e2db87b23393e6a9a51718fa451b1" prot="public" static="no">
        <type>CPCache::iterator</type>
        <definition>using amrex::FabArrayBase::CPCacheIter =  CPCache::iterator</definition>
        <argsstring></argsstring>
        <name>CPCacheIter</name>
        <qualifiedname>amrex::FabArrayBase::CPCacheIter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="576" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="576" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1aba31942c259bb854daca8574b393a17f" prot="public" static="no">
        <type>std::multimap&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="structamrex_1_1FabArrayBase_1_1RB90" kindref="compound">FabArrayBase::RB90</ref> * &gt;</type>
        <definition>using amrex::FabArrayBase::RB90Cache =  std::multimap&lt;BDKey,FabArrayBase::RB90*&gt;</definition>
        <argsstring></argsstring>
        <name>RB90Cache</name>
        <qualifiedname>amrex::FabArrayBase::RB90Cache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="597" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="597" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a336a5ecfcff59f5dbb7fbba057e2de73" prot="public" static="no">
        <type>RB90Cache::iterator</type>
        <definition>using amrex::FabArrayBase::RB90CacheIter =  RB90Cache::iterator</definition>
        <argsstring></argsstring>
        <name>RB90CacheIter</name>
        <qualifiedname>amrex::FabArrayBase::RB90CacheIter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="598" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="598" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a7245d3dc29d3e2aade3f28f9319fa76d" prot="public" static="no">
        <type>std::multimap&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="structamrex_1_1FabArrayBase_1_1RB180" kindref="compound">FabArrayBase::RB180</ref> * &gt;</type>
        <definition>using amrex::FabArrayBase::RB180Cache =  std::multimap&lt;BDKey,FabArrayBase::RB180*&gt;</definition>
        <argsstring></argsstring>
        <name>RB180Cache</name>
        <qualifiedname>amrex::FabArrayBase::RB180Cache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="619" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1aa058b98f7a208d8b6beec36c786cc0b9" prot="public" static="no">
        <type>RB180Cache::iterator</type>
        <definition>using amrex::FabArrayBase::RB180CacheIter =  RB180Cache::iterator</definition>
        <argsstring></argsstring>
        <name>RB180CacheIter</name>
        <qualifiedname>amrex::FabArrayBase::RB180CacheIter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="620" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="620" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1aeefdcd1fc2b2d609017e01fa8862c931" prot="public" static="no">
        <type>std::multimap&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="structamrex_1_1FabArrayBase_1_1PolarB" kindref="compound">FabArrayBase::PolarB</ref> * &gt;</type>
        <definition>using amrex::FabArrayBase::PolarBCache =  std::multimap&lt;BDKey,FabArrayBase::PolarB*&gt;</definition>
        <argsstring></argsstring>
        <name>PolarBCache</name>
        <qualifiedname>amrex::FabArrayBase::PolarBCache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="641" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="641" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1ae3da0c50a11f56d59552e30b45b10741" prot="public" static="no">
        <type>PolarBCache::iterator</type>
        <definition>using amrex::FabArrayBase::PolarBCacheIter =  PolarBCache::iterator</definition>
        <argsstring></argsstring>
        <name>PolarBCacheIter</name>
        <qualifiedname>amrex::FabArrayBase::PolarBCacheIter</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="642" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="642" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1FabArrayBase_1a11fd6aa3197ac10c8fb27ee5a5c96d57" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class MFIter</definition>
        <argsstring></argsstring>
        <name>MFIter</name>
        <qualifiedname>amrex::FabArrayBase::MFIter</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="43" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1FabArrayBase_1ae11e4187caa383605cab8f4d54ce115c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void FillBoundary</definition>
        <argsstring>(Vector&lt; FabArray&lt; FAB &gt; * &gt; const &amp;mf, const Periodicity &amp;period)</argsstring>
        <name>FillBoundary</name>
        <qualifiedname>amrex::FabArrayBase::FillBoundary</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; * &gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="45" column="29"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a8635aa060ab92c84d2641b61e0584052" prot="public" static="yes" mutable="no">
        <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::FabArrayBase::mfiter_tile_size</definition>
        <argsstring></argsstring>
        <name>mfiter_tile_size</name>
        <qualifiedname>amrex::FabArrayBase::mfiter_tile_size</qualifiedname>
        <briefdescription>
<para>Default tilesize in <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="289" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1ae4f336f53eda93074deacddef4d22055" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int amrex::FabArrayBase::MaxComp</definition>
        <argsstring></argsstring>
        <name>MaxComp</name>
        <qualifiedname>amrex::FabArrayBase::MaxComp</qualifiedname>
        <initializer>= 25</initializer>
        <briefdescription>
<para>The maximum number of components to copy() at a time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="292" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1aec4332affa6c055da41aab70b684a064" prot="public" static="yes" mutable="no">
        <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::FabArrayBase::comm_tile_size</definition>
        <argsstring></argsstring>
        <name>comm_tile_size</name>
        <qualifiedname>amrex::FabArrayBase::comm_tile_size</qualifiedname>
        <briefdescription>
<para>communication tile size </para>
        </briefdescription>
        <detaileddescription>
<para>To maximize thread efficiency we now can decompose things like intersections among boxes into smaller tiles. This sets their maximum size. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="302" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a85557ba47b4be7646013a3a7ae5ff1ae" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1a13121d16e1be9ac4ea05a7df793a47fd" kindref="member">FPinfoCache</ref></type>
        <definition>FabArrayBase::FPinfoCache amrex::FabArrayBase::m_TheFillPatchCache</definition>
        <argsstring></argsstring>
        <name>m_TheFillPatchCache</name>
        <qualifiedname>amrex::FabArrayBase::m_TheFillPatchCache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="335" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a5766cde9fd9e095f4d8f9f1731eb9047" prot="public" static="yes" mutable="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CacheStats" kindref="compound">CacheStats</ref></type>
        <definition>FabArrayBase::CacheStats amrex::FabArrayBase::m_FPinfo_stats</definition>
        <argsstring></argsstring>
        <name>m_FPinfo_stats</name>
        <qualifiedname>amrex::FabArrayBase::m_FPinfo_stats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="337" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a2ee44b09d17bdb0425ab128b7ebc3cc5" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1ab93444c8298b6446b699b33cf6c9247b" kindref="member">CFinfoCache</ref></type>
        <definition>FabArrayBase::CFinfoCache amrex::FabArrayBase::m_TheCrseFineCache</definition>
        <argsstring></argsstring>
        <name>m_TheCrseFineCache</name>
        <qualifiedname>amrex::FabArrayBase::m_TheCrseFineCache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="380" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a7bc1878e44728621bf3f21e2ad7d87b5" prot="public" static="yes" mutable="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CacheStats" kindref="compound">CacheStats</ref></type>
        <definition>FabArrayBase::CacheStats amrex::FabArrayBase::m_CFinfo_stats</definition>
        <argsstring></argsstring>
        <name>m_CFinfo_stats</name>
        <qualifiedname>amrex::FabArrayBase::m_CFinfo_stats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="382" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1aa70ee9b229ec1e56083fd9519a92a000" prot="public" static="yes" mutable="no">
        <type>std::map&lt; std::string, <ref refid="structamrex_1_1FabArrayBase_1_1meminfo" kindref="compound">meminfo</ref> &gt;</type>
        <definition>std::map&lt; std::string, FabArrayBase::meminfo &gt; amrex::FabArrayBase::m_mem_usage</definition>
        <argsstring></argsstring>
        <name>m_mem_usage</name>
        <qualifiedname>amrex::FabArrayBase::m_mem_usage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="403" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a4674b38da90801075df354a3491a8d17" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; amrex::FabArrayBase::m_region_tag</definition>
        <argsstring></argsstring>
        <name>m_region_tag</name>
        <qualifiedname>amrex::FabArrayBase::m_region_tag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="414" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a19a98e6afcf41af75c85278285c1e66b" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1acefd7d2a27952d4bac78ac9befcda8eb" kindref="member">TACache</ref></type>
        <definition>FabArrayBase::TACache amrex::FabArrayBase::m_TheTileArrayCache</definition>
        <argsstring></argsstring>
        <name>m_TheTileArrayCache</name>
        <qualifiedname>amrex::FabArrayBase::m_TheTileArrayCache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="462" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a7ac2d31ebea84512f6379331df5c8d75" prot="public" static="yes" mutable="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CacheStats" kindref="compound">CacheStats</ref></type>
        <definition>FabArrayBase::CacheStats amrex::FabArrayBase::m_TAC_stats</definition>
        <argsstring></argsstring>
        <name>m_TAC_stats</name>
        <qualifiedname>amrex::FabArrayBase::m_TAC_stats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="463" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a9d064b2059eb4cdd082f41be30e0d496" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1a9e9131d2e52b3140088bed29299df5e5" kindref="member">FBCache</ref></type>
        <definition>FabArrayBase::FBCache amrex::FabArrayBase::m_TheFBCache</definition>
        <argsstring></argsstring>
        <name>m_TheFBCache</name>
        <qualifiedname>amrex::FabArrayBase::m_TheFBCache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="526" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a3b56b89f624446bcdfbbf6800de73675" prot="public" static="yes" mutable="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CacheStats" kindref="compound">CacheStats</ref></type>
        <definition>FabArrayBase::CacheStats amrex::FabArrayBase::m_FBC_stats</definition>
        <argsstring></argsstring>
        <name>m_FBC_stats</name>
        <qualifiedname>amrex::FabArrayBase::m_FBC_stats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="527" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="527" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1aaa3d9b6c8292268b0472cc7c9895f10e" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1ab76531d8f4022eaa58de8ba56796e5de" kindref="member">CPCache</ref></type>
        <definition>FabArrayBase::CPCache amrex::FabArrayBase::m_TheCPCache</definition>
        <argsstring></argsstring>
        <name>m_TheCPCache</name>
        <qualifiedname>amrex::FabArrayBase::m_TheCPCache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="578" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="578" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a7300ef91cdc58de4230d68dee3691006" prot="public" static="yes" mutable="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CacheStats" kindref="compound">CacheStats</ref></type>
        <definition>FabArrayBase::CacheStats amrex::FabArrayBase::m_CPC_stats</definition>
        <argsstring></argsstring>
        <name>m_CPC_stats</name>
        <qualifiedname>amrex::FabArrayBase::m_CPC_stats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="579" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="579" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1ac23c7072502f4e3d3e153d7a452ec66d" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1aba31942c259bb854daca8574b393a17f" kindref="member">RB90Cache</ref></type>
        <definition>FabArrayBase::RB90Cache amrex::FabArrayBase::m_TheRB90Cache</definition>
        <argsstring></argsstring>
        <name>m_TheRB90Cache</name>
        <qualifiedname>amrex::FabArrayBase::m_TheRB90Cache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="600" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="600" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a7480a4e7f0f5f17e71a2dc378e3b0197" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1a7245d3dc29d3e2aade3f28f9319fa76d" kindref="member">RB180Cache</ref></type>
        <definition>FabArrayBase::RB180Cache amrex::FabArrayBase::m_TheRB180Cache</definition>
        <argsstring></argsstring>
        <name>m_TheRB180Cache</name>
        <qualifiedname>amrex::FabArrayBase::m_TheRB180Cache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="622" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="622" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a343a712b6e71fba0f152560c17289088" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1aeefdcd1fc2b2d609017e01fa8862c931" kindref="member">PolarBCache</ref></type>
        <definition>FabArrayBase::PolarBCache amrex::FabArrayBase::m_ThePolarBCache</definition>
        <argsstring></argsstring>
        <name>m_ThePolarBCache</name>
        <qualifiedname>amrex::FabArrayBase::m_ThePolarBCache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="644" column="24" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="644" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a0b55f4a6dedf6d338556402fc31d6f99" prot="public" static="yes" mutable="no">
        <type>std::multimap&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="structamrex_1_1FabArrayBase_1_1ParForInfo" kindref="compound">ParForInfo</ref> * &gt;</type>
        <definition>std::multimap&lt; FabArrayBase::BDKey, FabArrayBase::ParForInfo * &gt; amrex::FabArrayBase::m_TheParForCache</definition>
        <argsstring></argsstring>
        <name>m_TheParForCache</name>
        <qualifiedname>amrex::FabArrayBase::m_TheParForCache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="679" column="26" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="679" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a8b7b09c9194e173ed0b7df6ec34847ad" prot="public" static="yes" mutable="no">
        <type>std::map&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, int &gt;</type>
        <definition>std::map&lt; FabArrayBase::BDKey, int &gt; amrex::FabArrayBase::m_BD_count</definition>
        <argsstring></argsstring>
        <name>m_BD_count</name>
        <qualifiedname>amrex::FabArrayBase::m_BD_count</qualifiedname>
        <briefdescription>
<para>Keep track of how many FabArrays are built with the same <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="688" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="688" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a2678095b2d8ac82dac74b035a15d30f9" prot="public" static="yes" mutable="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1FabArrayStats" kindref="compound">FabArrayStats</ref></type>
        <definition>FabArrayBase::FabArrayStats amrex::FabArrayBase::m_FA_stats</definition>
        <argsstring></argsstring>
        <name>m_FA_stats</name>
        <qualifiedname>amrex::FabArrayBase::m_FA_stats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="726" column="29" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="726" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a8d8019cf2e884a512160dacc78482483" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FabArrayBase::m_alloc_single_chunk</definition>
        <argsstring></argsstring>
        <name>m_alloc_single_chunk</name>
        <qualifiedname>amrex::FabArrayBase::m_alloc_single_chunk</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="728" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="728" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1ae63b22ccabe6c5af01dd0779c60740c8" prot="public" static="no" mutable="yes">
        <type><ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref></type>
        <definition>BoxArray amrex::FabArrayBase::boxarray</definition>
        <argsstring></argsstring>
        <name>boxarray</name>
        <qualifiedname>amrex::FabArrayBase::boxarray</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="444" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1adcb92e864340876da67df2fc64d8bdd7" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::FabArrayBase::distributionMap</definition>
        <argsstring></argsstring>
        <name>distributionMap</name>
        <qualifiedname>amrex::FabArrayBase::distributionMap</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="445" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a15c2b54df8386a9d38216410edce884c" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt;int&gt; amrex::FabArrayBase::indexArray</definition>
        <argsstring></argsstring>
        <name>indexArray</name>
        <qualifiedname>amrex::FabArrayBase::indexArray</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="446" column="20" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1ab4d5df57a6eaa1d785d131b059b43e18" prot="public" static="no" mutable="no">
        <type>std::vector&lt; bool &gt;</type>
        <definition>std::vector&lt;bool&gt; amrex::FabArrayBase::ownership</definition>
        <argsstring></argsstring>
        <name>ownership</name>
        <qualifiedname>amrex::FabArrayBase::ownership</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="447" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1aad48d978f6df9294ff3cbdb8978b8914" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::FabArrayBase::n_grow</definition>
        <argsstring></argsstring>
        <name>n_grow</name>
        <qualifiedname>amrex::FabArrayBase::n_grow</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="448" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a4ff6141edd1ba1d1940c45b98a619b04" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int amrex::FabArrayBase::n_comp</definition>
        <argsstring></argsstring>
        <name>n_comp</name>
        <qualifiedname>amrex::FabArrayBase::n_comp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="449" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a2865ec7ad6d6f09cf1a3a891b603144c" prot="public" static="no" mutable="yes">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref></type>
        <definition>BDKey amrex::FabArrayBase::m_bdkey</definition>
        <argsstring></argsstring>
        <name>m_bdkey</name>
        <qualifiedname>amrex::FabArrayBase::m_bdkey</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="450" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1acb3699bf4d436f320a73a9c5239b81cd" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::FabArrayBase::n_filled</definition>
        <argsstring></argsstring>
        <name>n_filled</name>
        <qualifiedname>amrex::FabArrayBase::n_filled</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="451" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1ac8c10e1b5a28a55c6dc388f7df101a97" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FabArrayBase::m_multi_ghost</definition>
        <argsstring></argsstring>
        <name>m_multi_ghost</name>
        <qualifiedname>amrex::FabArrayBase::m_multi_ghost</qualifiedname>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="452" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="452" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a16240683aaab59d05d3659c64723890f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArrayBase::FabArrayBase</definition>
        <argsstring>()=default</argsstring>
        <name>FabArrayBase</name>
        <qualifiedname>amrex::FabArrayBase::FabArrayBase</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="49" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a58a43e40ea0bcd02334490f1126c6d7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArrayBase::~FabArrayBase</definition>
        <argsstring>()=default</argsstring>
        <name>~FabArrayBase</name>
        <qualifiedname>amrex::FabArrayBase::~FabArrayBase</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="50" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a2626dd8a948d7ef6dcb5ea286709ad6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArrayBase::FabArrayBase</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, int ngrow)</argsstring>
        <name>FabArrayBase</name>
        <qualifiedname>amrex::FabArrayBase::FabArrayBase</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="52" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="161" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ab81793c2f32c7430eed823483c6c41a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArrayBase::FabArrayBase</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, const IntVect &amp;ngrow)</argsstring>
        <name>FabArrayBase</name>
        <qualifiedname>amrex::FabArrayBase::FabArrayBase</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="57" column="5" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="168" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a474c8b827c1db51691c9e98263508d31" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArrayBase::FabArrayBase</definition>
        <argsstring>(FabArrayBase &amp;&amp;rhs) noexcept=default</argsstring>
        <name>FabArrayBase</name>
        <qualifiedname>amrex::FabArrayBase::FabArrayBase</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="62" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1aa8a53e00ad4f706959f791ca7fdaf087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArrayBase::FabArrayBase</definition>
        <argsstring>(const FabArrayBase &amp;rhs)=default</argsstring>
        <name>FabArrayBase</name>
        <qualifiedname>amrex::FabArrayBase::FabArrayBase</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="63" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a77fad433f0be770d5983ff3a773c1c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
        <definition>FabArrayBase &amp; amrex::FabArrayBase::operator=</definition>
        <argsstring>(const FabArrayBase &amp;rhs)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::FabArrayBase::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="64" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ab92c56431449d9c134c3dd0e4be39544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
        <definition>FabArrayBase &amp; amrex::FabArrayBase::operator=</definition>
        <argsstring>(FabArrayBase &amp;&amp;rhs)=default</argsstring>
        <name>operator=</name>
        <qualifiedname>amrex::FabArrayBase::operator=</qualifiedname>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="65" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a79b45950358798ae16a0dc928b8ee0ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, int ngrow)</argsstring>
        <name>define</name>
        <qualifiedname>amrex::FabArrayBase::define</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="67" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="178" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ad5c3a8098f8bb8aec61ed6b213340169" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, const IntVect &amp;ngrow)</argsstring>
        <name>define</name>
        <qualifiedname>amrex::FabArrayBase::define</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="72" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="187" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a92cef599b0ae34401a5463ec6fddc606" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::FabArrayBase::nGrow</definition>
        <argsstring>(int direction=0) const noexcept</argsstring>
        <name>nGrow</name>
        <qualifiedname>amrex::FabArrayBase::nGrow</qualifiedname>
        <param>
          <type>int</type>
          <declname>direction</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the grow factor that defines the region of definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="78" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a0598988ee34f3885bd6d2a4787a8f427" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::FabArrayBase::nGrowVect</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nGrowVect</name>
        <qualifiedname>amrex::FabArrayBase::nGrowVect</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="80" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1aec6647af0d0a9f2d760d502a8975d6f1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::FabArrayBase::nComp</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nComp</name>
        <qualifiedname>amrex::FabArrayBase::nComp</qualifiedname>
        <briefdescription>
<para>Return number of variables (aka components) associated with each point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="83" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a682fdf86619f6028fea2805d9693ae22" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a7e095993c9b3f5a4c2abddd839d800e2" kindref="member">IndexType</ref></type>
        <definition>IndexType amrex::FabArrayBase::ixType</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ixType</name>
        <qualifiedname>amrex::FabArrayBase::ixType</qualifiedname>
        <briefdescription>
<para>Return index type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="86" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ab96a1c213fe6e5f402c4e006608564f5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArrayBase::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <qualifiedname>amrex::FabArrayBase::empty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="89" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1aec97b10f2d8c7a62da3f13831a9720f5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> &amp;</type>
        <definition>const BoxArray &amp; amrex::FabArrayBase::boxArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>boxArray</name>
        <qualifiedname>amrex::FabArrayBase::boxArray</qualifiedname>
        <briefdescription>
<para>Return a constant reference to the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref> that defines the valid region associated with this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="95" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1acc3c1d759fbd867cf7d9c806e56c30c7" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref></type>
        <definition>Box amrex::FabArrayBase::box</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>box</name>
        <qualifiedname>amrex::FabArrayBase::box</qualifiedname>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return the Kth Box in the <ref refid="classamrex_1_1BoxArray" kindref="compound">BoxArray</ref>. That is, the valid region of the Kth grid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="101" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1adce0fffa78b25dbbfa1f82701e579425" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref></type>
        <definition>Box amrex::FabArrayBase::fabbox</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>fabbox</name>
        <qualifiedname>amrex::FabArrayBase::fabbox</qualifiedname>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return the Kth FABs Box in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. That is, the region the Kth fab is actually defined on. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="107" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="220" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a713a78056e395c21e855dcc1ed56525c" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::FabArrayBase::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <qualifiedname>amrex::FabArrayBase::size</qualifiedname>
        <briefdescription>
<para>Return the number of FABs in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="110" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1aabf6dbff99d8524f9c9d082302afdd5e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::FabArrayBase::local_size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>local_size</name>
        <qualifiedname>amrex::FabArrayBase::local_size</qualifiedname>
        <briefdescription>
<para>Return the number of local FABs in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="113" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a1e72ef400ed1f286268e71a175006ea3" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
        <definition>const Vector&lt; int &gt; &amp; amrex::FabArrayBase::IndexArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IndexArray</name>
        <qualifiedname>amrex::FabArrayBase::IndexArray</qualifiedname>
        <briefdescription>
<para>Return constant reference to indices in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> that we have access. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="116" column="19" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1aa848db21ec5426fab2c86d441cd0a314" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int amrex::FabArrayBase::localindex</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>localindex</name>
        <qualifiedname>amrex::FabArrayBase::localindex</qualifiedname>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return local index in the vector of FABs. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="119" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="119" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1aaa08b103ed3b2d6c1fc1e6e4480b3748" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping &amp; amrex::FabArrayBase::DistributionMap</definition>
        <argsstring>() const noexcept</argsstring>
        <name>DistributionMap</name>
        <qualifiedname>amrex::FabArrayBase::DistributionMap</qualifiedname>
        <briefdescription>
<para>Return constant reference to associated <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="131" column="32" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a641ffe22574cc57f3544687b3e23d174" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArrayBase::is_nodal</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_nodal</name>
        <qualifiedname>amrex::FabArrayBase::is_nodal</qualifiedname>
        <briefdescription>
<para>This tests on whether the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> is fully nodal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="136" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2689" bodyend="2692"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a90447f2e6d22e5e0e06a538fd37063d5" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArrayBase::is_nodal</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>is_nodal</name>
        <qualifiedname>amrex::FabArrayBase::is_nodal</qualifiedname>
        <param>
          <type>int</type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>This tests on whether the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> is nodal in direction dir. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="140" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2695" bodyend="2698"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a60aa58517fd2a7d6976e114df171df25" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArrayBase::is_cell_centered</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_cell_centered</name>
        <qualifiedname>amrex::FabArrayBase::is_cell_centered</qualifiedname>
        <briefdescription>
<para>This tests on whether the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> is cell-centered. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="144" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2701" bodyend="2704"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a7d9c921734d6199c74f9ce44f81eba81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::setMultiGhost</definition>
        <argsstring>(bool a_multi_ghost)</argsstring>
        <name>setMultiGhost</name>
        <qualifiedname>amrex::FabArrayBase::setMultiGhost</qualifiedname>
        <param>
          <type>bool</type>
          <declname>a_multi_ghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="146" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a76a6089045a5d690f809bd0d2e7c51ab" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref></type>
        <definition>IntVect amrex::FabArrayBase::nGrowFilled</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nGrowFilled</name>
        <qualifiedname>amrex::FabArrayBase::nGrowFilled</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="151" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="151" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a2ad51584223d99ae31e86bf9a21c10b7" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::setNGrowFilled</definition>
        <argsstring>(IntVect const &amp;ng) noexcept</argsstring>
        <name>setNGrowFilled</name>
        <qualifiedname>amrex::FabArrayBase::setNGrowFilled</qualifiedname>
        <param>
          <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="152" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="152" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a5f85b5648838d8d7cf103fbbeaec76be" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArrayBase::isFusingCandidate</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isFusingCandidate</name>
        <qualifiedname>amrex::FabArrayBase::isFusingCandidate</qualifiedname>
        <briefdescription>
<para>Is this a good candidate for kernel fusing? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="155" column="11" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2707" bodyend="2728"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1aa0cb5039380dc0545d40ac5ac6589943" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref></type>
        <definition>BDKey amrex::FabArrayBase::getBDKey</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getBDKey</name>
        <qualifiedname>amrex::FabArrayBase::getBDKey</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="250" column="12" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a3918d10004ca8f4494fd9e6099bdabc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::updateBDKey</definition>
        <argsstring>()</argsstring>
        <name>updateBDKey</name>
        <qualifiedname>amrex::FabArrayBase::updateBDKey</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="254" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2564" bodyend="2570"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a793ba5ae5a1533bae6a98b901df96664" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushFPinfo</definition>
        <argsstring>(bool no_assertion=false) const</argsstring>
        <name>flushFPinfo</name>
        <qualifiedname>amrex::FabArrayBase::flushFPinfo</qualifiedname>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="347" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2128" bodyend="2169"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a713c123f38e7c4666b28628d59c6e0c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushCFinfo</definition>
        <argsstring>(bool no_assertion=false) const</argsstring>
        <name>flushCFinfo</name>
        <qualifiedname>amrex::FabArrayBase::flushCFinfo</qualifiedname>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="390" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2286" bodyend="2300"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a209e5ca2e7cfb57ea4eee2fa934a9110" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1TileArray" kindref="compound">TileArray</ref> *</type>
        <definition>const FabArrayBase::TileArray * amrex::FabArrayBase::getTileArray</definition>
        <argsstring>(const IntVect &amp;tilesize) const</argsstring>
        <name>getTileArray</name>
        <qualifiedname>amrex::FabArrayBase::getTileArray</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>tilesize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="396" column="21" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2344" bodyend="2376"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a10399c20d1f9186d481354025e58f6dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>amrex::FabArrayBase::clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="431" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="210" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a7e46fb21a77e099ddbe9b329de6ed331" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const std::vector&lt; bool &gt; &amp;</type>
        <definition>const std::vector&lt; bool &gt; &amp; amrex::FabArrayBase::OwnerShip</definition>
        <argsstring>() const noexcept</argsstring>
        <name>OwnerShip</name>
        <qualifiedname>amrex::FabArrayBase::OwnerShip</qualifiedname>
        <briefdescription>
<para>Return owenership of fabs. The concept of ownership only applies when UPC++ team is used. In that case, each fab is shared by team workers, with one taking the ownership. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="438" column="23" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="438" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a6512ea611a6c04b5710334d9d9bfbb4e" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArrayBase::isOwner</definition>
        <argsstring>(int li) const noexcept</argsstring>
        <name>isOwner</name>
        <qualifiedname>amrex::FabArrayBase::isOwner</qualifiedname>
        <param>
          <type>int</type>
          <declname>li</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="439" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="439" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a3bb1453b2bf26b145d0553dcaf8332be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::buildTileArray</definition>
        <argsstring>(const IntVect &amp;tilesize, TileArray &amp;ta) const</argsstring>
        <name>buildTileArray</name>
        <qualifiedname>amrex::FabArrayBase::buildTileArray</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>tilesize</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1FabArrayBase_1_1TileArray" kindref="compound">TileArray</ref> &amp;</type>
          <declname>ta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="465" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2379" bodyend="2468"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a03141dc770d42b5297105bb259b9c8e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushTileArray</definition>
        <argsstring>(const IntVect &amp;tilesize=IntVect::TheZeroVector(), bool no_assertion=false) const</argsstring>
        <name>flushTileArray</name>
        <qualifiedname>amrex::FabArrayBase::flushTileArray</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>tilesize</declname>
          <defval><ref refid="classamrex_1_1IntVectND_1ab2506f9097ba1cf1c59e8f8fe933ed83" kindref="member">IntVect::TheZeroVector</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="467" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2471" bodyend="2505"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a2099ffa4c81398ed273722ce2ff7b6f3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::define_fb_metadata</definition>
        <argsstring>(CommMetaData &amp;cmd, const IntVect &amp;nghost, bool cross, const Periodicity &amp;period, bool multi_ghost) const</argsstring>
        <name>define_fb_metadata</name>
        <qualifiedname>amrex::FabArrayBase::define_fb_metadata</qualifiedname>
        <param>
          <type><ref refid="structamrex_1_1FabArrayBase_1_1CommMetaData" kindref="compound">CommMetaData</ref> &amp;</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>multi_ghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="481" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="669" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a57374fb88afd9bf88809afdee11d9a72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1FB" kindref="compound">FB</ref> &amp;</type>
        <definition>const FabArrayBase::FB &amp; amrex::FabArrayBase::getFB</definition>
        <argsstring>(const IntVect &amp;nghost, const Periodicity &amp;period, bool cross=false, bool enforce_periodicity_only=false, bool override_sync=false, IntVect const &amp;sumboundary_src_nghost=IntVect(-1)) const</argsstring>
        <name>getFB</name>
        <qualifiedname>amrex::FabArrayBase::getFB</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>enforce_periodicity_only</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>override_sync</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> const &amp;</type>
          <declname>sumboundary_src_nghost</declname>
          <defval><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref>(-1)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="529" column="14" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1301" bodyend="1343"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a7f25519392700e82648562d6bca4c586" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CPC" kindref="compound">CPC</ref> &amp;</type>
        <definition>const FabArrayBase::CPC &amp; amrex::FabArrayBase::getCPC</definition>
        <argsstring>(const IntVect &amp;dstng, const FabArrayBase &amp;src, const IntVect &amp;srcng, const Periodicity &amp;period, bool to_ghost_cells_only=false, const IntVect &amp;offset=IntVect(0)) const</argsstring>
        <name>getCPC</name>
        <qualifiedname>amrex::FabArrayBase::getCPC</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>dstng</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>srcng</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>to_ghost_cells_only</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>offset</declname>
          <defval><ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref>(0)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="581" column="15" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="579" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a342aea7f8f4a8fac1af88c707c8af890" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1RB90" kindref="compound">RB90</ref> &amp;</type>
        <definition>const FabArrayBase::RB90 &amp; amrex::FabArrayBase::getRB90</definition>
        <argsstring>(const IntVect &amp;nghost, const Box &amp;domain) const</argsstring>
        <name>getRB90</name>
        <qualifiedname>amrex::FabArrayBase::getRB90</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="602" column="16" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1511" bodyend="1530"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ab092b4d04401abad6715b550b01dd5b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushRB90</definition>
        <argsstring>(bool no_assertion=false) const</argsstring>
        <name>flushRB90</name>
        <qualifiedname>amrex::FabArrayBase::flushRB90</qualifiedname>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This flushes its own <ref refid="structamrex_1_1FabArrayBase_1_1RB90" kindref="compound">RB90</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="604" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1490" bodyend="1499"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a7aa1a687d4680a4ac4fa85809879df06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1RB180" kindref="compound">RB180</ref> &amp;</type>
        <definition>const FabArrayBase::RB180 &amp; amrex::FabArrayBase::getRB180</definition>
        <argsstring>(const IntVect &amp;nghost, const Box &amp;domain) const</argsstring>
        <name>getRB180</name>
        <qualifiedname>amrex::FabArrayBase::getRB180</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="624" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1675" bodyend="1694"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ac71669e7574424826140208ef85fcc4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushRB180</definition>
        <argsstring>(bool no_assertion=false) const</argsstring>
        <name>flushRB180</name>
        <qualifiedname>amrex::FabArrayBase::flushRB180</qualifiedname>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This flushes its own <ref refid="structamrex_1_1FabArrayBase_1_1RB180" kindref="compound">RB180</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="626" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1654" bodyend="1663"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1afb5e5edb04762e07920b354fa202da22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1PolarB" kindref="compound">PolarB</ref> &amp;</type>
        <definition>const FabArrayBase::PolarB &amp; amrex::FabArrayBase::getPolarB</definition>
        <argsstring>(const IntVect &amp;nghost, const Box &amp;domain) const</argsstring>
        <name>getPolarB</name>
        <qualifiedname>amrex::FabArrayBase::getPolarB</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a5e922fb76ff2eb645844783ad65d1490" kindref="member">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="646" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1860" bodyend="1879"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a11436d5c97b9158ac23058287feada66" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushPolarB</definition>
        <argsstring>(bool no_assertion=false) const</argsstring>
        <name>flushPolarB</name>
        <qualifiedname>amrex::FabArrayBase::flushPolarB</qualifiedname>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This flushes its own <ref refid="structamrex_1_1FabArrayBase_1_1PolarB" kindref="compound">PolarB</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="648" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1839" bodyend="1848"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a872d7172ab37377ea10097fa1a8c963a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1ParForInfo" kindref="compound">ParForInfo</ref> const &amp;</type>
        <definition>FabArrayBase::ParForInfo const  &amp; amrex::FabArrayBase::getParForInfo</definition>
        <argsstring>(const IntVect &amp;nghost) const</argsstring>
        <name>getParForInfo</name>
        <qualifiedname>amrex::FabArrayBase::getParForInfo</qualifiedname>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="677" column="22" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2757" bodyend="2773"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a38c437b445b30f872df4f5ed6232e9a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushParForInfo</definition>
        <argsstring>(bool no_assertion=false) const</argsstring>
        <name>flushParForInfo</name>
        <qualifiedname>amrex::FabArrayBase::flushParForInfo</qualifiedname>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="681" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2776" bodyend="2785"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a1033b7779ec8b48b594b158fbabe13b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::clearThisBD</definition>
        <argsstring>(bool no_assertion=false) const</argsstring>
        <name>clearThisBD</name>
        <qualifiedname>amrex::FabArrayBase::clearThisBD</qualifiedname>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>clear BD count and caches associated with this BD, if no other is using this BD. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="691" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2522" bodyend="2549"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a294641949d2f4dd2161ba42a6b10d570" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::addThisBD</definition>
        <argsstring>()</argsstring>
        <name>addThisBD</name>
        <qualifiedname>amrex::FabArrayBase::addThisBD</qualifiedname>
        <briefdescription>
<para>add the current BD into BD count database </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="694" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2552" bodyend="2561"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a0389d45476d4ffeaf34d22d253a64eb7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::FabArrayBase::bytesOfMapOfCopyComTagContainers</definition>
        <argsstring>(const MapOfCopyComTagContainers &amp;)</argsstring>
        <name>bytesOfMapOfCopyComTagContainers</name>
        <qualifiedname>amrex::FabArrayBase::bytesOfMapOfCopyComTagContainers</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase_1aa36883196eb7b1d039fd1941966a4310" kindref="member">MapOfCopyComTagContainers</ref> &amp;</type>
          <defname>m</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="223" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="226" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a4581192d404c43071aaa653b2bbf28e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <qualifiedname>amrex::FabArrayBase::Initialize</qualifiedname>
        <briefdescription>
<para>Initialize from <ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> with &quot;fabarray&quot; prefix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="295" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="95" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ae281696e28cac4d5387cdb5660d9aa3d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <qualifiedname>amrex::FabArrayBase::Finalize</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="296" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2303" bodyend="2341"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a66b4a032df108837982cd9981dc4f268" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1FPinfo" kindref="compound">FPinfo</ref> &amp;</type>
        <definition>const FabArrayBase::FPinfo &amp; amrex::FabArrayBase::TheFPinfo</definition>
        <argsstring>(const FabArrayBase &amp;srcfa, const FabArrayBase &amp;dstfa, const IntVect &amp;dstng, const BoxConverter &amp;coarsener, const Geometry &amp;fgeom, const Geometry &amp;cgeom, const EB2::IndexSpace *)</argsstring>
        <name>TheFPinfo</name>
        <qualifiedname>amrex::FabArrayBase::TheFPinfo</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>srcfa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>dstfa</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>dstng</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxConverter" kindref="compound">BoxConverter</ref> &amp;</type>
          <declname>coarsener</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">EB2::IndexSpace</ref> *</type>
          <defname>index_space</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="339" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2068" bodyend="2125"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1aaf2887a9352fecedc071410a48baea1c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CFinfo" kindref="compound">CFinfo</ref> &amp;</type>
        <definition>const FabArrayBase::CFinfo &amp; amrex::FabArrayBase::TheCFinfo</definition>
        <argsstring>(const FabArrayBase &amp;finefa, const Geometry &amp;finegm, const IntVect &amp;ng, bool include_periodic, bool include_physbndry)</argsstring>
        <name>TheCFinfo</name>
        <qualifiedname>amrex::FabArrayBase::TheCFinfo</qualifiedname>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>finefa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>finegm</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceamrex_1a95101764f5ec64cd1dd6e55614702cdb" kindref="member">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>include_periodic</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>include_physbndry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="384" column="25" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2244" bodyend="2283"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a815ff49750eb0fb4236b03cd02afd5a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::updateMemUsage</definition>
        <argsstring>(std::string const &amp;tag, Long nbytes, Arena const *ar)</argsstring>
        <name>updateMemUsage</name>
        <qualifiedname>amrex::FabArrayBase::updateMemUsage</qualifiedname>
        <param>
          <type>std::string const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> const *</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="405" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2629" bodyend="2634"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a56e425df3c8bb2e6aea3510d19646ceb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::printMemUsage</definition>
        <argsstring>()</argsstring>
        <name>printMemUsage</name>
        <qualifiedname>amrex::FabArrayBase::printMemUsage</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="406" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2637" bodyend="2646"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ab2839fcfcf819b736095a4fd1926eaa8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::FabArrayBase::queryMemUsage</definition>
        <argsstring>(const std::string &amp;tag=std::string(&quot;All&quot;))</argsstring>
        <name>queryMemUsage</name>
        <qualifiedname>amrex::FabArrayBase::queryMemUsage</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>tag</declname>
          <defval>std::string(&quot;All&quot;)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="407" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2649" bodyend="2657"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a6a5a86a2751fe1c8927821fe6864a482" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>Long amrex::FabArrayBase::queryMemUsageHWM</definition>
        <argsstring>(const std::string &amp;tag=std::string(&quot;All&quot;))</argsstring>
        <name>queryMemUsageHWM</name>
        <qualifiedname>amrex::FabArrayBase::queryMemUsageHWM</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>tag</declname>
          <defval>std::string(&quot;All&quot;)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="408" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2660" bodyend="2668"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a18cdf2cc3d52d7d4d7dbf8c24ce614ee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::pushRegionTag</definition>
        <argsstring>(const char *t)</argsstring>
        <name>pushRegionTag</name>
        <qualifiedname>amrex::FabArrayBase::pushRegionTag</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="410" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2671" bodyend="2674"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a8278b7adc57c727c9718330665bdeef7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::pushRegionTag</definition>
        <argsstring>(std::string t)</argsstring>
        <name>pushRegionTag</name>
        <qualifiedname>amrex::FabArrayBase::pushRegionTag</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="411" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2677" bodyend="2680"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a2de51872d78b63b8c99c30eac65f3ee3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::popRegionTag</definition>
        <argsstring>()</argsstring>
        <name>popRegionTag</name>
        <qualifiedname>amrex::FabArrayBase::popRegionTag</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="412" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2683" bodyend="2686"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ac5c3b09365bcaf3c92ec8d296da74ccc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushTileArrayCache</definition>
        <argsstring>()</argsstring>
        <name>flushTileArrayCache</name>
        <qualifiedname>amrex::FabArrayBase::flushTileArrayCache</qualifiedname>
        <briefdescription>
<para>This flushes the entire cache. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="469" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2508" bodyend="2519"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a21292f39031a9325151df73e5ad15db6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushRB90Cache</definition>
        <argsstring>()</argsstring>
        <name>flushRB90Cache</name>
        <qualifiedname>amrex::FabArrayBase::flushRB90Cache</qualifiedname>
        <briefdescription>
<para>This flushes the entire cache. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="605" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1502" bodyend="1508"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a4eb182bcf77ba996c6c7c54f20e92e5e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushRB180Cache</definition>
        <argsstring>()</argsstring>
        <name>flushRB180Cache</name>
        <qualifiedname>amrex::FabArrayBase::flushRB180Cache</qualifiedname>
        <briefdescription>
<para>This flushes the entire cache. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="627" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1666" bodyend="1672"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ad82788f4ded1b5ece40884cceda774de" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushPolarBCache</definition>
        <argsstring>()</argsstring>
        <name>flushPolarBCache</name>
        <qualifiedname>amrex::FabArrayBase::flushPolarBCache</qualifiedname>
        <briefdescription>
<para>This flushes the entire cache. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="649" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1851" bodyend="1857"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1aa110cab57dad7efdba62902db05d9479" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushParForCache</definition>
        <argsstring>()</argsstring>
        <name>flushParForCache</name>
        <qualifiedname>amrex::FabArrayBase::flushParForCache</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="682" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2788" bodyend="2794"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a26c57d9e401fcc56f720c50f5bfdeb06" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool amrex::FabArrayBase::getAllocSingleChunk</definition>
        <argsstring>()</argsstring>
        <name>getAllocSingleChunk</name>
        <qualifiedname>amrex::FabArrayBase::getAllocSingleChunk</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="730" column="18" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="730" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ae20b077acadfa00ea36c0209f20ed61d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint64_t</type>
        <definition>std::uint64_t amrex::FabArrayBase::getNextCommMetaDataId</definition>
        <argsstring>()</argsstring>
        <name>getNextCommMetaDataId</name>
        <qualifiedname>amrex::FabArrayBase::getNextCommMetaDataId</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="732" column="27" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="2799" bodyend="2802"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ad0036a8cccab0b66956ebdb8fb07d16f" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushFB</definition>
        <argsstring>(bool no_assertion=false) const</argsstring>
        <name>flushFB</name>
        <qualifiedname>amrex::FabArrayBase::flushFB</qualifiedname>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This flushes its own <ref refid="structamrex_1_1FabArrayBase_1_1FB" kindref="compound">FB</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="736" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1270" bodyend="1284"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a16c472ffe97ca76e2ffa59ffceec0931" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushCPC</definition>
        <argsstring>(bool no_assertion=false) const</argsstring>
        <name>flushCPC</name>
        <qualifiedname>amrex::FabArrayBase::flushCPC</qualifiedname>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This flushes its own <ref refid="structamrex_1_1FabArrayBase_1_1CPC" kindref="compound">CPC</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="739" column="10" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="516" bodyend="556"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1afafdcf4e581478be608bb916274857d5" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushFBCache</definition>
        <argsstring>()</argsstring>
        <name>flushFBCache</name>
        <qualifiedname>amrex::FabArrayBase::flushFBCache</qualifiedname>
        <briefdescription>
<para>This flushes the entire cache. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="737" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="1287" bodyend="1298"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a3212be804b64d0f051f907c75fbad3d6" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushCPCache</definition>
        <argsstring>()</argsstring>
        <name>flushCPCache</name>
        <qualifiedname>amrex::FabArrayBase::flushCPCache</qualifiedname>
        <briefdescription>
<para>This flusheds the entire cache. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="740" column="17" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.cpp" bodystart="559" bodyend="576"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Base class for <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>Not to be confused with <ref refid="classamrex_1_1FArrayBox" kindref="compound">FArrayBox</ref> or <computeroutput>FAB</computeroutput> shorthands. Can be read as FArrayBox-like Array Base. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="9">
        <label>amrex::FabArray&lt; BaseFab&lt; GpuComplex&lt; Real &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>amrex::FabArray&lt; BaseFab&lt; GpuComplex&lt; T &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>amrex::FabArray&lt; BaseFab&lt; GpuComplex&lt; typename MF::value_type &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>amrex::FabArray&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>amrex::FabArray&lt; TagBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>amrex::FabArray&lt; amrex::BaseFab&lt; AtomicInt &gt; &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>amrex::FabArray&lt; amrex::BaseFab&lt; HYPRE_Int &gt; &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>amrex::FabArray&lt; amrex::BaseFab&lt; PetscInt &gt; &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>amrex::FabArray&lt; amrex::CutFab &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>amrex::FabArray&lt; amrex::EBCellFlagFab &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="15">
        <label>amrex::FabArray&lt; amrex::Mask &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>amrex::LayoutData&lt; GFab &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="22">
        <label>amrex::LayoutData&lt; HYPRE_Int &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>amrex::LayoutData&lt; Int &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>amrex::LayoutData&lt; PetscInt &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>amrex::LayoutData&lt; RealTuple &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="29">
        <label>amrex::LayoutData&lt; amrex::GpuArray&lt; amrex::MLCellLinOpT::BCTL, 2 *3 &gt; * &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>amrex::LayoutData&lt; amrex::PODVector&lt; HYPRE_Int &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="24">
        <label>amrex::LayoutData&lt; amrex::PODVector&lt; Int &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="26">
        <label>amrex::LayoutData&lt; amrex::PODVector&lt; int &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>amrex::LayoutData&lt; amrex::Vector&lt; BCTuple &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="28">
        <label>amrex::LayoutData&lt; amrex::Vector&lt; RealTuple &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>amrex::LayoutData&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>amrex::LayoutData&lt; int &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="18">
        <label>amrex::EB2::MultiGFab</label>
        <link refid="classamrex_1_1EB2_1_1MultiGFab"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
      <node id="31">
        <label>amrex::FabArray&lt; FAB &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
      </node>
      <node id="32">
        <label>amrex::LayoutData&lt; T &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>amrex::TagBoxArray</label>
        <link refid="classamrex_1_1TagBoxArray"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>amrex::iMultiFab</label>
        <link refid="classamrex_1_1iMultiFab"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="28">
        <label>amrex::BoxND&lt; 3 &gt;</label>
        <link refid="classamrex_1_1BoxND"/>
      </node>
      <node id="17">
        <label>amrex::IndexTypeND&lt; 3 &gt;</label>
        <link refid="classamrex_1_1IndexTypeND"/>
        <childnode refid="18" relation="public-inheritance">
        </childnode>
      </node>
      <node id="20">
        <label>amrex::IntVectND&lt; 3 &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="4">
        <label>K</label>
      </node>
      <node id="5">
        <label>T</label>
      </node>
      <node id="26">
        <label>amrex::Vector&lt; amrex::BoxND &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="27" relation="public-inheritance">
        </childnode>
      </node>
      <node id="36">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="37" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>amrex::BARef</label>
        <link refid="structamrex_1_1BARef"/>
        <childnode refid="26" relation="usage">
          <edgelabel>m_abox</edgelabel>
        </childnode>
        <childnode refid="28" relation="usage">
          <edgelabel>bbox</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>crsn</edgelabel>
        </childnode>
        <childnode refid="29" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>amrex::BATbndryReg</label>
        <link refid="structamrex_1_1BATbndryReg"/>
        <childnode refid="23" relation="usage">
          <edgelabel>m_face</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
          <edgelabel>m_doihi</edgelabel>
          <edgelabel>m_doilo</edgelabel>
          <edgelabel>m_hishft</edgelabel>
          <edgelabel>m_loshft</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>amrex::BATcoarsenRatio</label>
        <link refid="structamrex_1_1BATcoarsenRatio"/>
        <childnode refid="20" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>amrex::BATindexType</label>
        <link refid="structamrex_1_1BATindexType"/>
        <childnode refid="17" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>amrex::BATindexType_coarsenRatio</label>
        <link refid="structamrex_1_1BATindexType__coarsenRatio"/>
        <childnode refid="17" relation="usage">
          <edgelabel>m_typ</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_crse_ratio</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>amrex::BATnull</label>
        <link refid="structamrex_1_1BATnull"/>
      </node>
      <node id="13">
        <label>amrex::BATransformer</label>
        <link refid="structamrex_1_1BATransformer"/>
        <childnode refid="14" relation="usage">
          <edgelabel>m_op</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>amrex::BATransformer::BATOp</label>
        <link refid="unionamrex_1_1BATransformer_1_1BATOp"/>
        <childnode refid="15" relation="usage">
          <edgelabel>m_null</edgelabel>
        </childnode>
        <childnode refid="16" relation="usage">
          <edgelabel>m_indexType</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>m_indexType_coarsenRatio</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>m_bndryReg</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>amrex::BoxArray</label>
        <link refid="classamrex_1_1BoxArray"/>
        <childnode refid="13" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
        <childnode refid="31" relation="usage">
          <edgelabel>m_simplified_list</edgelabel>
        </childnode>
      </node>
      <node id="40">
        <label>amrex::BoxArray::RefID</label>
        <link refid="structamrex_1_1BoxArray_1_1RefID"/>
        <childnode refid="25" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="45">
        <label>amrex::BoxIndexerND&lt; dim &gt;</label>
        <link refid="structamrex_1_1BoxIndexerND"/>
        <childnode refid="46" relation="usage">
          <edgelabel>fdm</edgelabel>
        </childnode>
      </node>
      <node id="32">
        <label>amrex::BoxList</label>
        <link refid="classamrex_1_1BoxList"/>
        <childnode refid="26" relation="usage">
          <edgelabel>m_lbox</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>amrex::CellIndexEnum</label>
        <link refid="structamrex_1_1CellIndexEnum"/>
      </node>
      <node id="33">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
        <childnode refid="34" relation="usage">
          <edgelabel>m_ref</edgelabel>
        </childnode>
      </node>
      <node id="35">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="36" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>m_ownership</edgelabel>
        </childnode>
      </node>
      <node id="41">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="35" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="2" relation="usage">
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>m_TheCPCache</edgelabel>
          <edgelabel>m_TheCrseFineCache</edgelabel>
          <edgelabel>m_TheFBCache</edgelabel>
          <edgelabel>m_TheFillPatchCache</edgelabel>
          <edgelabel>m_ThePolarBCache</edgelabel>
          <edgelabel>m_TheRB180Cache</edgelabel>
          <edgelabel>m_TheRB90Cache</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_mem_usage</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_region_tag</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>boxarray</edgelabel>
        </childnode>
        <childnode refid="33" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="36" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="38" relation="usage">
          <edgelabel>ownership</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
        </childnode>
        <childnode refid="39" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
        <childnode refid="42" relation="usage">
          <edgelabel>m_TheTileArrayCache</edgelabel>
        </childnode>
        <childnode refid="43" relation="usage">
          <edgelabel>m_TheParForCache</edgelabel>
        </childnode>
        <childnode refid="47" relation="usage">
          <edgelabel>m_BD_count</edgelabel>
        </childnode>
        <childnode refid="48" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
      </node>
      <node id="39">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="40" relation="usage">
          <edgelabel>m_ba_id</edgelabel>
        </childnode>
        <childnode refid="41" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="7" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="48">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="44">
        <label>amrex::FabArrayBase::ParForInfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1ParForInfo"/>
        <childnode refid="13" relation="usage">
          <edgelabel>m_bat</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_ng</edgelabel>
        </childnode>
        <childnode refid="45" relation="usage">
          <edgelabel>m_boxes</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>amrex::FabArrayBase::meminfo</label>
        <link refid="structamrex_1_1FabArrayBase_1_1meminfo"/>
      </node>
      <node id="2">
        <label>amrex::IntVectND&lt; dim &gt;</label>
        <link refid="classamrex_1_1IntVectND"/>
      </node>
      <node id="46">
        <label>amrex::Math::FastDivmodU64</label>
        <link refid="structamrex_1_1Math_1_1FastDivmodU64"/>
      </node>
      <node id="23">
        <label>amrex::Orientation</label>
        <link refid="classamrex_1_1Orientation"/>
      </node>
      <node id="47">
        <label>std::map&lt; amrex::FabArrayBase::BDKey, int &gt;</label>
        <childnode refid="39" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>std::map&lt; std::string, amrex::FabArrayBase::meminfo &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="43">
        <label>std::multimap&lt; amrex::FabArrayBase::BDKey, amrex::FabArrayBase::ParForInfo * &gt;</label>
        <childnode refid="39" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="44" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>std::shared_ptr&lt; amrex::BARef &gt;</label>
        <childnode refid="25" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="31">
        <label>std::shared_ptr&lt; amrex::BoxList &gt;</label>
        <childnode refid="32" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="34">
        <label>std::shared_ptr&lt; amrex::DistributionMapping::Ref &gt;</label>
        <childnode refid="35" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="42">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>std::multimap&lt; K, T &gt;</label>
        <childnode refid="4" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>std::string</label>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="37">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="29">
        <label>std::unordered_map&lt; IntVect, std::vector&lt; int &gt;, IntVect::shift_hasher &gt;</label>
        <childnode refid="2" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="30" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="38">
        <label>std::vector&lt; bool &gt;</label>
      </node>
      <node id="30">
        <label>std::vector&lt; int &gt;</label>
      </node>
      <node id="11">
        <label>std::vector&lt; std::string &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="41" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="42" bodyend="741"/>
    <listofallmembers>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa10289ce78187f199681fabf1c9956399" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>ADD</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a294641949d2f4dd2161ba42a6b10d570" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>addThisBD</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acc3c1d759fbd867cf7d9c806e56c30c7" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>box</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae63b22ccabe6c5af01dd0779c60740c8" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>boxarray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aec97b10f2d8c7a62da3f13831a9720f5" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3bb1453b2bf26b145d0553dcaf8332be" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>buildTileArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0389d45476d4ffeaf34d22d253a64eb7" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>bytesOfMapOfCopyComTagContainers</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab93444c8298b6446b699b33cf6c9247b" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>CFinfoCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae15d8b6b473748103771433c507773ad" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>CFinfoCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a10399c20d1f9186d481354025e58f6dc" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>clear</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1033b7779ec8b48b594b158fbabe13b4" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>clearThisBD</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aec4332affa6c055da41aab70b684a064" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>comm_tile_size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>COPY</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9bdd65ce61ce9ee5ca52c6b387dd4800" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>CopyComTagsContainer</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab76531d8f4022eaa58de8ba56796e5de" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>CPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9b1e2db87b23393e6a9a51718fa451b1" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>CPCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>CpOp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a79b45950358798ae16a0dc928b8ee0ba" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad5c3a8098f8bb8aec61ed6b213340169" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2099ffa4c81398ed273722ce2ff7b6f3" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>define_fb_metadata</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adcb92e864340876da67df2fc64d8bdd7" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>distributionMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aaa08b103ed3b2d6c1fc1e6e4480b3748" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab96a1c213fe6e5f402c4e006608564f5" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>empty</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a16240683aaab59d05d3659c64723890f" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2626dd8a948d7ef6dcb5ea286709ad6e" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab81793c2f32c7430eed823483c6c41a4" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a474c8b827c1db51691c9e98263508d31" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa8a53e00ad4f706959f791ca7fdaf087" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adce0fffa78b25dbbfa1f82701e579425" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>fabbox</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9e9131d2e52b3140088bed29299df5e5" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a41abb738518224cedd8cfe16206382ba" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FBCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae11e4187caa383605cab8f4d54ce115c" prot="private" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae281696e28cac4d5387cdb5660d9aa3d" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a713c123f38e7c4666b28628d59c6e0c9" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushCFinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a16c472ffe97ca76e2ffa59ffceec0931" prot="private" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushCPC</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3212be804b64d0f051f907c75fbad3d6" prot="private" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushCPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad0036a8cccab0b66956ebdb8fb07d16f" prot="private" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushFB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1afafdcf4e581478be608bb916274857d5" prot="private" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushFBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a793ba5ae5a1533bae6a98b901df96664" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushFPinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa110cab57dad7efdba62902db05d9479" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushParForCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a38c437b445b30f872df4f5ed6232e9a1" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushParForInfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a11436d5c97b9158ac23058287feada66" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushPolarB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad82788f4ded1b5ece40884cceda774de" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushPolarBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac71669e7574424826140208ef85fcc4a" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushRB180</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4eb182bcf77ba996c6c7c54f20e92e5e" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushRB180Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab092b4d04401abad6715b550b01dd5b4" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushRB90</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a21292f39031a9325151df73e5ad15db6" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushRB90Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a03141dc770d42b5297105bb259b9c8e5" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushTileArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac5c3b09365bcaf3c92ec8d296da74ccc" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushTileArrayCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a13121d16e1be9ac4ea05a7df793a47fd" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FPinfoCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adee16eddda3b226990da74e087c9cfd9" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FPinfoCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a26c57d9e401fcc56f720c50f5bfdeb06" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getAllocSingleChunk</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa0cb5039380dc0545d40ac5ac6589943" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getBDKey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7f25519392700e82648562d6bca4c586" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getCPC</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a57374fb88afd9bf88809afdee11d9a72" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getFB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae20b077acadfa00ea36c0209f20ed61d" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getNextCommMetaDataId</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a872d7172ab37377ea10097fa1a8c963a" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getParForInfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1afb5e5edb04762e07920b354fa202da22" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getPolarB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7aa1a687d4680a4ac4fa85809879df06" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getRB180</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a342aea7f8f4a8fac1af88c707c8af890" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getRB90</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a209e5ca2e7cfb57ea4eee2fa934a9110" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getTileArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1e72ef400ed1f286268e71a175006ea3" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>IndexArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a15c2b54df8386a9d38216410edce884c" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>indexArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4581192d404c43071aaa653b2bbf28e3" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a60aa58517fd2a7d6976e114df171df25" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>is_cell_centered</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a641ffe22574cc57f3544687b3e23d174" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>is_nodal</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a90447f2e6d22e5e0e06a538fd37063d5" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>is_nodal</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a5f85b5648838d8d7cf103fbbeaec76be" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>isFusingCandidate</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a6512ea611a6c04b5710334d9d9bfbb4e" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>isOwner</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a682fdf86619f6028fea2805d9693ae22" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>ixType</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aabf6dbff99d8524f9c9d082302afdd5e" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>local_size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa848db21ec5426fab2c86d441cd0a314" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>localindex</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8d8019cf2e884a512160dacc78482483" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_alloc_single_chunk</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8b7b09c9194e173ed0b7df6ec34847ad" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_BD_count</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2865ec7ad6d6f09cf1a3a891b603144c" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_bdkey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7bc1878e44728621bf3f21e2ad7d87b5" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_CFinfo_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7300ef91cdc58de4230d68dee3691006" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_CPC_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2678095b2d8ac82dac74b035a15d30f9" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_FA_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3b56b89f624446bcdfbbf6800de73675" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_FBC_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a5766cde9fd9e095f4d8f9f1731eb9047" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_FPinfo_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa70ee9b229ec1e56083fd9519a92a000" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_mem_usage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac8c10e1b5a28a55c6dc388f7df101a97" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_multi_ghost</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4674b38da90801075df354a3491a8d17" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_region_tag</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7ac2d31ebea84512f6379331df5c8d75" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TAC_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aaa3d9b6c8292268b0472cc7c9895f10e" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheCPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2ee44b09d17bdb0425ab128b7ebc3cc5" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheCrseFineCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9d064b2059eb4cdd082f41be30e0d496" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheFBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a85557ba47b4be7646013a3a7ae5ff1ae" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheFillPatchCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0b55f4a6dedf6d338556402fc31d6f99" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheParForCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a343a712b6e71fba0f152560c17289088" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_ThePolarBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7480a4e7f0f5f17e71a2dc378e3b0197" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheRB180Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac23c7072502f4e3d3e153d7a452ec66d" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheRB90Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a19a98e6afcf41af75c85278285c1e66b" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheTileArrayCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa36883196eb7b1d039fd1941966a4310" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>MapOfCopyComTagContainers</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae4f336f53eda93074deacddef4d22055" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>MaxComp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a11fd6aa3197ac10c8fb27ee5a5c96d57" prot="private" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8635aa060ab92c84d2641b61e0584052" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>mfiter_tile_size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4ff6141edd1ba1d1940c45b98a619b04" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>n_comp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acb3699bf4d436f320a73a9c5239b81cd" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>n_filled</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aad48d978f6df9294ff3cbdb8978b8914" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>n_grow</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aec6647af0d0a9f2d760d502a8975d6f1" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>nComp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a92cef599b0ae34401a5463ec6fddc606" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>nGrow</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a76a6089045a5d690f809bd0d2e7c51ab" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>nGrowFilled</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0598988ee34f3885bd6d2a4787a8f427" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>nGrowVect</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a77fad433f0be770d5983ff3a773c1c86" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab92c56431449d9c134c3dd0e4be39544" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab4d5df57a6eaa1d785d131b059b43e18" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>ownership</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7e46fb21a77e099ddbe9b329de6ed331" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>OwnerShip</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aeefdcd1fc2b2d609017e01fa8862c931" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>PolarBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae3da0c50a11f56d59552e30b45b10741" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>PolarBCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2de51872d78b63b8c99c30eac65f3ee3" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>popRegionTag</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a56e425df3c8bb2e6aea3510d19646ceb" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>printMemUsage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a18cdf2cc3d52d7d4d7dbf8c24ce614ee" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>pushRegionTag</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8278b7adc57c727c9718330665bdeef7" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>pushRegionTag</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab2839fcfcf819b736095a4fd1926eaa8" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>queryMemUsage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a6a5a86a2751fe1c8927821fe6864a482" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>queryMemUsageHWM</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7245d3dc29d3e2aade3f28f9319fa76d" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>RB180Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa058b98f7a208d8b6beec36c786cc0b9" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>RB180CacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aba31942c259bb854daca8574b393a17f" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>RB90Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a336a5ecfcff59f5dbb7fbba057e2de73" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>RB90CacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7d9c921734d6199c74f9ce44f81eba81" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>setMultiGhost</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2ad51584223d99ae31e86bf9a21c10b7" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>setNGrowFilled</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a713a78056e395c21e855dcc1ed56525c" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acefd7d2a27952d4bac78ac9befcda8eb" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>TACache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a905802e4dcdc5377e09d455fc80f0400" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>TAMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aaf2887a9352fecedc071410a48baea1c" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>TheCFinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a66b4a032df108837982cd9981dc4f268" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>TheFPinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3918d10004ca8f4494fd9e6099bdabc3" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>updateBDKey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a815ff49750eb0fb4236b03cd02afd5a1" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>updateMemUsage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a58a43e40ea0bcd02334490f1126c6d7f" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>~FabArrayBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
