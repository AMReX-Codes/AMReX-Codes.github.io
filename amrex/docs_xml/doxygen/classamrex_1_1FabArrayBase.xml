<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classamrex_1_1FabArrayBase" kind="class" language="C++" prot="public">
    <compoundname>amrex::FabArrayBase</compoundname>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; FAB &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; amrex::BaseFab&lt; HYPRE_Int &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; amrex::BaseFab&lt; Int &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; amrex::BaseFab&lt; PetscInt &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; amrex::CutFab &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; amrex::EBCellFlagFab &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; amrex::Mask &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; FArrayBox &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; IArrayBox &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1FabArray" prot="public" virt="non-virtual">amrex::FabArray&lt; TagBox &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; amrex::PODVector&lt; HYPRE_Int &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; amrex::PODVector&lt; PetscInt &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; amrex::Vector&lt; BCTuple &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; amrex::Vector&lt; Int &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; amrex::Vector&lt; RealTuple &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; GFab &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; HYPRE_Int &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; Int &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; PetscInt &gt;</derivedcompoundref>
    <derivedcompoundref refid="classamrex_1_1LayoutData" prot="public" virt="non-virtual">amrex::LayoutData&lt; RealTuple &gt;</derivedcompoundref>
    <includes refid="AMReX__FabArrayBase_8H" local="no">AMReX_FabArrayBase.H</includes>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1BDKey" prot="public">amrex::FabArrayBase::BDKey</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1CacheStats" prot="public">amrex::FabArrayBase::CacheStats</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1CFinfo" prot="public">amrex::FabArrayBase::CFinfo</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1CommMetaData" prot="public">amrex::FabArrayBase::CommMetaData</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1CopyComTag" prot="public">amrex::FabArrayBase::CopyComTag</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1CPC" prot="public">amrex::FabArrayBase::CPC</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1FabArrayStats" prot="public">amrex::FabArrayBase::FabArrayStats</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1FabComTag" prot="public">amrex::FabArrayBase::FabComTag</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1FB" prot="public">amrex::FabArrayBase::FB</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1FPinfo" prot="public">amrex::FabArrayBase::FPinfo</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1meminfo" prot="public">amrex::FabArrayBase::meminfo</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1PolarB" prot="public">amrex::FabArrayBase::PolarB</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1RB180" prot="public">amrex::FabArrayBase::RB180</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1RB90" prot="public">amrex::FabArrayBase::RB90</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1RegionTag" prot="public">amrex::FabArrayBase::RegionTag</innerclass>
    <innerclass refid="structamrex_1_1FabArrayBase_1_1TileArray" prot="public">amrex::FabArrayBase::TileArray</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" prot="public" static="no">
        <name>CpOp</name>
        <enumvalue id="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" prot="public">
          <name>COPY</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa10289ce78187f199681fabf1c9956399" prot="public">
          <name>ADD</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>parallel copy or add </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="404" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="404" bodyend="404"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a1bb6a09ada00b5b7a900d8fecbf92e3c" prot="public" static="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CopyComTag_1aad1bcd5a45514f9dffbeaa327d3aa880" kindref="member">CopyComTag::CopyComTagsContainer</ref></type>
        <definition>typedef CopyComTag::CopyComTagsContainer amrex::FabArrayBase::CopyComTagsContainer</definition>
        <argsstring></argsstring>
        <name>CopyComTagsContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="209" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a70b58356e2e49c69d54eed3850a9c231" prot="public" static="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CopyComTag_1ac93e9be5fadb2a282072412f8801a271" kindref="member">CopyComTag::MapOfCopyComTagContainers</ref></type>
        <definition>typedef CopyComTag::MapOfCopyComTagContainers amrex::FabArrayBase::MapOfCopyComTagContainers</definition>
        <argsstring></argsstring>
        <name>MapOfCopyComTagContainers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="210" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a68a25147d3410960af381727954394ba" prot="public" static="no">
        <type>std::multimap&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="structamrex_1_1FabArrayBase_1_1FPinfo" kindref="compound">FabArrayBase::FPinfo</ref> * &gt;</type>
        <definition>typedef std::multimap&lt;BDKey,FabArrayBase::FPinfo*&gt; amrex::FabArrayBase::FPinfoCache</definition>
        <argsstring></argsstring>
        <name>FPinfoCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="342" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a3272dd508dcab2f679993ef1308a4278" prot="public" static="no">
        <type>FPinfoCache::iterator</type>
        <definition>typedef FPinfoCache::iterator amrex::FabArrayBase::FPinfoCacheIter</definition>
        <argsstring></argsstring>
        <name>FPinfoCacheIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="343" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="343" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1ab93444c8298b6446b699b33cf6c9247b" prot="public" static="no">
        <type>std::multimap&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="structamrex_1_1FabArrayBase_1_1CFinfo" kindref="compound">FabArrayBase::CFinfo</ref> * &gt;</type>
        <definition>using amrex::FabArrayBase::CFinfoCache =  std::multimap&lt;BDKey,FabArrayBase::CFinfo*&gt;</definition>
        <argsstring></argsstring>
        <name>CFinfoCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="387" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1ae15d8b6b473748103771433c507773ad" prot="public" static="no">
        <type>CFinfoCache::iterator</type>
        <definition>using amrex::FabArrayBase::CFinfoCacheIter =  CFinfoCache::iterator</definition>
        <argsstring></argsstring>
        <name>CFinfoCacheIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="388" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a905802e4dcdc5377e09d455fc80f0400" prot="public" static="no">
        <type>std::map&lt; std::pair&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref>, <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt;, <ref refid="structamrex_1_1FabArrayBase_1_1TileArray" kindref="compound">TileArray</ref> &gt;</type>
        <definition>using amrex::FabArrayBase::TAMap =  std::map&lt;std::pair&lt;IntVect,IntVect&gt;, TileArray&gt;</definition>
        <argsstring></argsstring>
        <name>TAMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="469" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1acefd7d2a27952d4bac78ac9befcda8eb" prot="public" static="no">
        <type>std::map&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="classamrex_1_1FabArrayBase_1a905802e4dcdc5377e09d455fc80f0400" kindref="member">TAMap</ref> &gt;</type>
        <definition>using amrex::FabArrayBase::TACache =  std::map&lt;BDKey, TAMap&gt;</definition>
        <argsstring></argsstring>
        <name>TACache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="470" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="470" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a0985ab08746761a6517115f000e0a8ac" prot="public" static="no">
        <type>std::multimap&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="structamrex_1_1FabArrayBase_1_1FB" kindref="compound">FabArrayBase::FB</ref> * &gt;</type>
        <definition>typedef std::multimap&lt;BDKey,FabArrayBase::FB*&gt; amrex::FabArrayBase::FBCache</definition>
        <argsstring></argsstring>
        <name>FBCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="523" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1aba788e1a081a9e668ba53d504e75a352" prot="public" static="no">
        <type>FBCache::iterator</type>
        <definition>typedef FBCache::iterator amrex::FabArrayBase::FBCacheIter</definition>
        <argsstring></argsstring>
        <name>FBCacheIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="524" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="524" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a68151f78c47e353f18a8077ce54afc30" prot="public" static="no">
        <type>std::multimap&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="structamrex_1_1FabArrayBase_1_1CPC" kindref="compound">FabArrayBase::CPC</ref> * &gt;</type>
        <definition>typedef std::multimap&lt;BDKey,FabArrayBase::CPC*&gt; amrex::FabArrayBase::CPCache</definition>
        <argsstring></argsstring>
        <name>CPCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="573" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="573" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1ae1a0d2f95995d26b5afe7c866f760bd6" prot="public" static="no">
        <type>CPCache::iterator</type>
        <definition>typedef CPCache::iterator amrex::FabArrayBase::CPCacheIter</definition>
        <argsstring></argsstring>
        <name>CPCacheIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="574" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="574" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a916f834bf453a57b557aa66408d7d748" prot="public" static="no">
        <type>std::multimap&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="structamrex_1_1FabArrayBase_1_1RB90" kindref="compound">FabArrayBase::RB90</ref> * &gt;</type>
        <definition>typedef std::multimap&lt;BDKey,FabArrayBase::RB90*&gt; amrex::FabArrayBase::RB90Cache</definition>
        <argsstring></argsstring>
        <name>RB90Cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="598" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="598" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1aa850e5ff039851c262daddf6d185c817" prot="public" static="no">
        <type>RB90Cache::iterator</type>
        <definition>typedef RB90Cache::iterator amrex::FabArrayBase::RB90CacheIter</definition>
        <argsstring></argsstring>
        <name>RB90CacheIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="599" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="599" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1af99de5735cac80b4400637c127031ed9" prot="public" static="no">
        <type>std::multimap&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="structamrex_1_1FabArrayBase_1_1RB180" kindref="compound">FabArrayBase::RB180</ref> * &gt;</type>
        <definition>typedef std::multimap&lt;BDKey,FabArrayBase::RB180*&gt; amrex::FabArrayBase::RB180Cache</definition>
        <argsstring></argsstring>
        <name>RB180Cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="621" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a63963907fa7e09b07008c5bbd11a1a0a" prot="public" static="no">
        <type>RB180Cache::iterator</type>
        <definition>typedef RB180Cache::iterator amrex::FabArrayBase::RB180CacheIter</definition>
        <argsstring></argsstring>
        <name>RB180CacheIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="622" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="622" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1ae848c74c7550fb55e2f9d7b74777b57e" prot="public" static="no">
        <type>std::multimap&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="structamrex_1_1FabArrayBase_1_1PolarB" kindref="compound">FabArrayBase::PolarB</ref> * &gt;</type>
        <definition>typedef std::multimap&lt;BDKey,FabArrayBase::PolarB*&gt; amrex::FabArrayBase::PolarBCache</definition>
        <argsstring></argsstring>
        <name>PolarBCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="644" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="644" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1FabArrayBase_1a242fe8ea3608d28675efccf79fbbd961" prot="public" static="no">
        <type>PolarBCache::iterator</type>
        <definition>typedef PolarBCache::iterator amrex::FabArrayBase::PolarBCacheIter</definition>
        <argsstring></argsstring>
        <name>PolarBCacheIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="645" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="645" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classamrex_1_1FabArrayBase_1a11fd6aa3197ac10c8fb27ee5a5c96d57" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class MFIter</definition>
        <argsstring></argsstring>
        <name>MFIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="32" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1FabArrayBase_1a0730c47ed240b86d1a24126a0adf6b13" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class MFGhostIter</definition>
        <argsstring></argsstring>
        <name>MFGhostIter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="33" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classamrex_1_1FabArrayBase_1ad9b12d8c8e4455a3eda7d9c0d42ffc20" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class FAB</type>
          </param>
        </templateparamlist>
        <type>friend void</type>
        <definition>void FillBoundary</definition>
        <argsstring>(Vector&lt; FabArray&lt; FAB &gt; *&gt; const &amp;mf, const Periodicity &amp;period)</argsstring>
        <name>FillBoundary</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>&lt; FAB &gt; *&gt; const &amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="35" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a8635aa060ab92c84d2641b61e0584052" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::FabArrayBase::mfiter_tile_size</definition>
        <argsstring></argsstring>
        <name>mfiter_tile_size</name>
        <briefdescription>
<para>Default tilesize in <ref refid="classamrex_1_1MFIter" kindref="compound">MFIter</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="294" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a31677ce1cdddcbc405f41bb1a4351d35" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::FabArrayBase::mfghostiter_tile_size</definition>
        <argsstring></argsstring>
        <name>mfghostiter_tile_size</name>
        <briefdescription>
<para>Default tilesize in <ref refid="classamrex_1_1MFGhostIter" kindref="compound">MFGhostIter</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="297" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1ae4f336f53eda93074deacddef4d22055" prot="public" static="yes" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FabArrayBase::MaxComp</definition>
        <argsstring></argsstring>
        <name>MaxComp</name>
        <briefdescription>
<para>The maximum number of components to <ref refid="namespaceamrex_1_1Gpu_1a2c1110b22670288daa9e2a01cbb70fbb" kindref="member">copy()</ref> at a time. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="300" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1aec4332affa6c055da41aab70b684a064" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::FabArrayBase::comm_tile_size</definition>
        <argsstring></argsstring>
        <name>comm_tile_size</name>
        <briefdescription>
<para>communication tile size </para>        </briefdescription>
        <detaileddescription>
<para>To maximize thread efficiency we now can decompose things like intersections among boxes into smaller tiles. This sets their maximum size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="310" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1acdb408349f86d3e32c29e245a361ba0c" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1a68a25147d3410960af381727954394ba" kindref="member">FPinfoCache</ref></type>
        <definition>FPinfoCache amrex::FabArrayBase::m_TheFillPatchCache</definition>
        <argsstring></argsstring>
        <name>m_TheFillPatchCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="345" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a34cc63703ab4e2492a4444199def31d2" prot="public" static="yes" mutable="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CacheStats" kindref="compound">CacheStats</ref></type>
        <definition>CacheStats amrex::FabArrayBase::m_FPinfo_stats</definition>
        <argsstring></argsstring>
        <name>m_FPinfo_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="347" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1ab58a879dec4546737754f55dd8b600e2" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1ab93444c8298b6446b699b33cf6c9247b" kindref="member">CFinfoCache</ref></type>
        <definition>CFinfoCache amrex::FabArrayBase::m_TheCrseFineCache</definition>
        <argsstring></argsstring>
        <name>m_TheCrseFineCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="390" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a92e87a53eaf353557dfcf6b875123a81" prot="public" static="yes" mutable="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CacheStats" kindref="compound">CacheStats</ref></type>
        <definition>CacheStats amrex::FabArrayBase::m_CFinfo_stats</definition>
        <argsstring></argsstring>
        <name>m_CFinfo_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="392" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a1cba13cd9d7009299774b13eb2f49484" prot="public" static="yes" mutable="no">
        <type>std::map&lt; std::string, <ref refid="structamrex_1_1FabArrayBase_1_1meminfo" kindref="compound">meminfo</ref> &gt;</type>
        <definition>std::map&lt;std::string, meminfo&gt; amrex::FabArrayBase::m_mem_usage</definition>
        <argsstring></argsstring>
        <name>m_mem_usage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="419" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a11cf5808ab448ff1721d7f66de93206e" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; amrex::FabArrayBase::m_region_tag</definition>
        <argsstring></argsstring>
        <name>m_region_tag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="430" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1afc113a32c271a6c406b525795a5d71e0" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1acefd7d2a27952d4bac78ac9befcda8eb" kindref="member">TACache</ref></type>
        <definition>TACache amrex::FabArrayBase::m_TheTileArrayCache</definition>
        <argsstring></argsstring>
        <name>m_TheTileArrayCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="472" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1aa5ab85a3018faa2b983936fa4116cd4f" prot="public" static="yes" mutable="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CacheStats" kindref="compound">CacheStats</ref></type>
        <definition>CacheStats amrex::FabArrayBase::m_TAC_stats</definition>
        <argsstring></argsstring>
        <name>m_TAC_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="473" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a6ec51851470b2e1ec57805bad7725268" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1a0985ab08746761a6517115f000e0a8ac" kindref="member">FBCache</ref></type>
        <definition>FBCache amrex::FabArrayBase::m_TheFBCache</definition>
        <argsstring></argsstring>
        <name>m_TheFBCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="526" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a5f3f2c05af6fbc9a1e5c59e03133505d" prot="public" static="yes" mutable="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CacheStats" kindref="compound">CacheStats</ref></type>
        <definition>CacheStats amrex::FabArrayBase::m_FBC_stats</definition>
        <argsstring></argsstring>
        <name>m_FBC_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="527" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="527" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1aa2a265ca0b7ce27ee0f3d66c86fe929d" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1a68151f78c47e353f18a8077ce54afc30" kindref="member">CPCache</ref></type>
        <definition>CPCache amrex::FabArrayBase::m_TheCPCache</definition>
        <argsstring></argsstring>
        <name>m_TheCPCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="576" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="576" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1acf463c256f5ac08e3c6c71666a682308" prot="public" static="yes" mutable="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1CacheStats" kindref="compound">CacheStats</ref></type>
        <definition>CacheStats amrex::FabArrayBase::m_CPC_stats</definition>
        <argsstring></argsstring>
        <name>m_CPC_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="577" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="577" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1ac6817d7110b3389ad5ececd0da4e241a" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1a916f834bf453a57b557aa66408d7d748" kindref="member">RB90Cache</ref></type>
        <definition>RB90Cache amrex::FabArrayBase::m_TheRB90Cache</definition>
        <argsstring></argsstring>
        <name>m_TheRB90Cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="601" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="601" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a9549d43d5d9d74ddb7c541d9f3339848" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1af99de5735cac80b4400637c127031ed9" kindref="member">RB180Cache</ref></type>
        <definition>RB180Cache amrex::FabArrayBase::m_TheRB180Cache</definition>
        <argsstring></argsstring>
        <name>m_TheRB180Cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="624" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="624" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a8bd69d649f9a0446dbc7ba981c58199a" prot="public" static="yes" mutable="no">
        <type><ref refid="classamrex_1_1FabArrayBase_1ae848c74c7550fb55e2f9d7b74777b57e" kindref="member">PolarBCache</ref></type>
        <definition>PolarBCache amrex::FabArrayBase::m_ThePolarBCache</definition>
        <argsstring></argsstring>
        <name>m_ThePolarBCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="647" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="647" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1af3d0b759e5fa01a885c95e93e0e9f7b1" prot="public" static="yes" mutable="no">
        <type>std::map&lt; <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>, <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>std::map&lt;BDKey, int&gt; amrex::FabArrayBase::m_BD_count</definition>
        <argsstring></argsstring>
        <name>m_BD_count</name>
        <briefdescription>
<para>Keep track of how many FabArrays are built with the same <ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="656" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="656" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a3adcc31bb0235db6192cb22451a4ee8b" prot="public" static="yes" mutable="no">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1FabArrayStats" kindref="compound">FabArrayStats</ref></type>
        <definition>FabArrayStats amrex::FabArrayBase::m_FA_stats</definition>
        <argsstring></argsstring>
        <name>m_FA_stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="695" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="695" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1ae63b22ccabe6c5af01dd0779c60740c8" prot="public" static="no" mutable="yes">
        <type>BoxArray</type>
        <definition>BoxArray amrex::FabArrayBase::boxarray</definition>
        <argsstring></argsstring>
        <name>boxarray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="454" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1adcb92e864340876da67df2fc64d8bdd7" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref></type>
        <definition>DistributionMapping amrex::FabArrayBase::distributionMap</definition>
        <argsstring></argsstring>
        <name>distributionMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="455" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a15c2b54df8386a9d38216410edce884c" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt;</type>
        <definition>Vector&lt;int&gt; amrex::FabArrayBase::indexArray</definition>
        <argsstring></argsstring>
        <name>indexArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="456" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1ab4d5df57a6eaa1d785d131b059b43e18" prot="public" static="no" mutable="no">
        <type>std::vector&lt; bool &gt;</type>
        <definition>std::vector&lt;bool&gt; amrex::FabArrayBase::ownership</definition>
        <argsstring></argsstring>
        <name>ownership</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="457" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1aad48d978f6df9294ff3cbdb8978b8914" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::FabArrayBase::n_grow</definition>
        <argsstring></argsstring>
        <name>n_grow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="458" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a4ff6141edd1ba1d1940c45b98a619b04" prot="public" static="no" mutable="no">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FabArrayBase::n_comp</definition>
        <argsstring></argsstring>
        <name>n_comp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="459" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1a2865ec7ad6d6f09cf1a3a891b603144c" prot="public" static="no" mutable="yes">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref></type>
        <definition>BDKey amrex::FabArrayBase::m_bdkey</definition>
        <argsstring></argsstring>
        <name>m_bdkey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="460" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="460" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1acb3699bf4d436f320a73a9c5239b81cd" prot="public" static="no" mutable="no">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::FabArrayBase::n_filled</definition>
        <argsstring></argsstring>
        <name>n_filled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="461" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classamrex_1_1FabArrayBase_1ac8c10e1b5a28a55c6dc388f7df101a97" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool amrex::FabArrayBase::m_multi_ghost</definition>
        <argsstring></argsstring>
        <name>m_multi_ghost</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="462" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="462" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1acc0d46f9c8551ec9c1c6d6658103db15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArrayBase::FabArrayBase</definition>
        <argsstring>()</argsstring>
        <name>FabArrayBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a2626dd8a948d7ef6dcb5ea286709ad6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArrayBase::FabArrayBase</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, int ngrow)</argsstring>
        <name>FabArrayBase</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ab81793c2f32c7430eed823483c6c41a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArrayBase::FabArrayBase</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, const IntVect &amp;ngrow)</argsstring>
        <name>FabArrayBase</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ac6760729a701bfc47516444a574f320a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual amrex::FabArrayBase::~FabArrayBase</definition>
        <argsstring>()</argsstring>
        <name>~FabArrayBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a474c8b827c1db51691c9e98263508d31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArrayBase::FabArrayBase</definition>
        <argsstring>(FabArrayBase &amp;&amp;rhs) noexcept=default</argsstring>
        <name>FabArrayBase</name>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1aa8a53e00ad4f706959f791ca7fdaf087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::FabArrayBase::FabArrayBase</definition>
        <argsstring>(const FabArrayBase &amp;rhs)=default</argsstring>
        <name>FabArrayBase</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a24f7e6d0d4e8ee6aa8207710f51a603e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
        <definition>FabArrayBase&amp; amrex::FabArrayBase::operator=</definition>
        <argsstring>(const FabArrayBase &amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a0b213cf522c93646cc152abb65ad97a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
        <definition>FabArrayBase&amp; amrex::FabArrayBase::operator=</definition>
        <argsstring>(FabArrayBase &amp;&amp;rhs)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a79b45950358798ae16a0dc928b8ee0ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, int ngrow)</argsstring>
        <name>define</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ad5c3a8098f8bb8aec61ed6b213340169" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::define</definition>
        <argsstring>(const BoxArray &amp;bxs, const DistributionMapping &amp;dm, int nvar, const IntVect &amp;ngrow)</argsstring>
        <name>define</name>
        <param>
          <type>const BoxArray &amp;</type>
          <declname>bxs</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
          <declname>dm</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>nvar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ngrow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a92cef599b0ae34401a5463ec6fddc606" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FabArrayBase::nGrow</definition>
        <argsstring>(int direction=0) const noexcept</argsstring>
        <name>nGrow</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>direction</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return the grow factor that defines the region of definition. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="69" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a0598988ee34f3885bd6d2a4787a8f427" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::FabArrayBase::nGrowVect</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nGrowVect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="71" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1aec6647af0d0a9f2d760d502a8975d6f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FabArrayBase::nComp</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nComp</name>
        <briefdescription>
<para>Return number of variables (aka components) associated with each point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="74" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a682fdf86619f6028fea2805d9693ae22" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1IndexType" kindref="compound">IndexType</ref></type>
        <definition>IndexType amrex::FabArrayBase::ixType</definition>
        <argsstring>() const noexcept</argsstring>
        <name>ixType</name>
        <briefdescription>
<para>Return index type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="77" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ab96a1c213fe6e5f402c4e006608564f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArrayBase::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="80" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a4bb7e999eee8c04f07573269b54e39d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const BoxArray &amp;</type>
        <definition>const BoxArray&amp; amrex::FabArrayBase::boxArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>boxArray</name>
        <briefdescription>
<para>Return a constant reference to the BoxArray that defines the valid region associated with this <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="86" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1acc3c1d759fbd867cf7d9c806e56c30c7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::FabArrayBase::box</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>box</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return the Kth <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the BoxArray. That is, the valid region of the Kth grid. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="92" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1adce0fffa78b25dbbfa1f82701e579425" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Box" kindref="compound">Box</ref></type>
        <definition>Box amrex::FabArrayBase::fabbox</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>fabbox</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return the Kth FABs <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. That is, the region the Kth fab is actually defined on. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a713a78056e395c21e855dcc1ed56525c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FabArrayBase::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <briefdescription>
<para>Return the number of FABs in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="101" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1aabf6dbff99d8524f9c9d082302afdd5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FabArrayBase::local_size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>local_size</name>
        <briefdescription>
<para>Return the number of local FABs in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="104" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a7a4ed8b70e3aa4c3ddd3a24fb1c0f3a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref> &gt; &amp;</type>
        <definition>const Vector&lt;int&gt;&amp; amrex::FabArrayBase::IndexArray</definition>
        <argsstring>() const noexcept</argsstring>
        <name>IndexArray</name>
        <briefdescription>
<para>Return constant reference to indices in the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> that we have access. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="107" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1aa848db21ec5426fab2c86d441cd0a314" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
        <definition>int amrex::FabArrayBase::localindex</definition>
        <argsstring>(int K) const noexcept</argsstring>
        <name>localindex</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>K</declname>
        </param>
        <briefdescription>
<para>Return local index in the vector of FABs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="110" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="110" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1abd59469241abaab18e1c2db8b7ceb4ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref> &amp;</type>
        <definition>const DistributionMapping&amp; amrex::FabArrayBase::DistributionMap</definition>
        <argsstring>() const noexcept</argsstring>
        <name>DistributionMap</name>
        <briefdescription>
<para>Return constant reference to associated <ref refid="classamrex_1_1DistributionMapping" kindref="compound">DistributionMapping</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="122" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a641ffe22574cc57f3544687b3e23d174" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArrayBase::is_nodal</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_nodal</name>
        <briefdescription>
<para>This tests on whether the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> is fully nodal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a90447f2e6d22e5e0e06a538fd37063d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArrayBase::is_nodal</definition>
        <argsstring>(int dir) const noexcept</argsstring>
        <name>is_nodal</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>This tests on whether the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> is nodal in direction dir. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a60aa58517fd2a7d6976e114df171df25" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArrayBase::is_cell_centered</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_cell_centered</name>
        <briefdescription>
<para>This tests on whether the <ref refid="classamrex_1_1FabArray" kindref="compound">FabArray</ref> is cell-centered. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a7d9c921734d6199c74f9ce44f81eba81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::setMultiGhost</definition>
        <argsstring>(bool a_multi_ghost)</argsstring>
        <name>setMultiGhost</name>
        <param>
          <type>bool</type>
          <declname>a_multi_ghost</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="137" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="137" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a76a6089045a5d690f809bd0d2e7c51ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref></type>
        <definition>IntVect amrex::FabArrayBase::nGrowFilled</definition>
        <argsstring>() const noexcept</argsstring>
        <name>nGrowFilled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="142" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a2ad51584223d99ae31e86bf9a21c10b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::setNGrowFilled</definition>
        <argsstring>(IntVect const &amp;ng) noexcept</argsstring>
        <name>setNGrowFilled</name>
        <param>
          <type><ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> const &amp;</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="143" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1aa0cb5039380dc0545d40ac5ac6589943" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structamrex_1_1FabArrayBase_1_1BDKey" kindref="compound">BDKey</ref></type>
        <definition>BDKey amrex::FabArrayBase::getBDKey</definition>
        <argsstring>() const noexcept</argsstring>
        <name>getBDKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="239" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="239" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a3918d10004ca8f4494fd9e6099bdabc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::updateBDKey</definition>
        <argsstring>()</argsstring>
        <name>updateBDKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ae7aac9d7bfa41ac76f80543a6a8c1898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushFPinfo</definition>
        <argsstring>(bool no_assertion=false)</argsstring>
        <name>flushFPinfo</name>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a9d3dbb0a351f570080f23f75febd836d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushCFinfo</definition>
        <argsstring>(bool no_assertion=false)</argsstring>
        <name>flushCFinfo</name>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="400" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a47294c772e3bc6de1c901df4c2aa2b10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1TileArray" kindref="compound">TileArray</ref> *</type>
        <definition>const TileArray* amrex::FabArrayBase::getTileArray</definition>
        <argsstring>(const IntVect &amp;tilesize) const</argsstring>
        <name>getTileArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>tilesize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a10399c20d1f9186d481354025e58f6dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a8e414f069d04091245f3e9e94a3aa237" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; bool &gt; &amp;</type>
        <definition>const std::vector&lt;bool&gt;&amp; amrex::FabArrayBase::OwnerShip</definition>
        <argsstring>() const noexcept</argsstring>
        <name>OwnerShip</name>
        <briefdescription>
<para>Return owenership of fabs. The concept of ownership only applies when UPC++ team is used. In that case, each fab is shared by team workers, with one taking the ownership. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="448" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="448" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a6512ea611a6c04b5710334d9d9bfbb4e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool amrex::FabArrayBase::isOwner</definition>
        <argsstring>(int li) const noexcept</argsstring>
        <name>isOwner</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>li</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="449" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="449" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a3bb1453b2bf26b145d0553dcaf8332be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::buildTileArray</definition>
        <argsstring>(const IntVect &amp;tilesize, TileArray &amp;ta) const</argsstring>
        <name>buildTileArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>tilesize</declname>
        </param>
        <param>
          <type><ref refid="structamrex_1_1FabArrayBase_1_1TileArray" kindref="compound">TileArray</ref> &amp;</type>
          <declname>ta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="475" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a03141dc770d42b5297105bb259b9c8e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushTileArray</definition>
        <argsstring>(const IntVect &amp;tilesize=IntVect::TheZeroVector(), bool no_assertion=false) const</argsstring>
        <name>flushTileArray</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>tilesize</declname>
          <defval><ref refid="classamrex_1_1IntVect_1a16fd2692186f9d2a1291058ac5ab0ca0" kindref="member">IntVect::TheZeroVector</ref>()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a51995e07a57bf9f0fde79fbf20f91616" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1FB" kindref="compound">FB</ref> &amp;</type>
        <definition>const FB&amp; amrex::FabArrayBase::getFB</definition>
        <argsstring>(const IntVect &amp;nghost, const Periodicity &amp;period, bool cross=false, bool enforce_periodicity_only=false) const</argsstring>
        <name>getFB</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cross</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>enforce_periodicity_only</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="529" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ad0036a8cccab0b66956ebdb8fb07d16f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushFB</definition>
        <argsstring>(bool no_assertion=false) const</argsstring>
        <name>flushFB</name>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This flushes its own <ref refid="structamrex_1_1FabArrayBase_1_1FB" kindref="compound">FB</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a439b266a2a54717032fad3baa62c5e22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CPC" kindref="compound">CPC</ref> &amp;</type>
        <definition>const CPC&amp; amrex::FabArrayBase::getCPC</definition>
        <argsstring>(const IntVect &amp;dstng, const FabArrayBase &amp;src, const IntVect &amp;srcng, const Periodicity &amp;period) const</argsstring>
        <name>getCPC</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dstng</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>srcng</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Periodicity" kindref="compound">Periodicity</ref> &amp;</type>
          <declname>period</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="579" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a16c472ffe97ca76e2ffa59ffceec0931" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushCPC</definition>
        <argsstring>(bool no_assertion=false) const</argsstring>
        <name>flushCPC</name>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This flushes its own <ref refid="structamrex_1_1FabArrayBase_1_1CPC" kindref="compound">CPC</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="582" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a1fa0d3a08ed46a79dd0fae8c8f9603af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1RB90" kindref="compound">RB90</ref> &amp;</type>
        <definition>const RB90&amp; amrex::FabArrayBase::getRB90</definition>
        <argsstring>(const IntVect &amp;nghost, const Box &amp;domain) const</argsstring>
        <name>getRB90</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="603" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ab092b4d04401abad6715b550b01dd5b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushRB90</definition>
        <argsstring>(bool no_assertion=false) const</argsstring>
        <name>flushRB90</name>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This flushes its own <ref refid="structamrex_1_1FabArrayBase_1_1RB90" kindref="compound">RB90</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="605" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a304ba0bf4637208cfdd1a94098c55637" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1RB180" kindref="compound">RB180</ref> &amp;</type>
        <definition>const RB180&amp; amrex::FabArrayBase::getRB180</definition>
        <argsstring>(const IntVect &amp;nghost, const Box &amp;domain) const</argsstring>
        <name>getRB180</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="626" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ac71669e7574424826140208ef85fcc4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushRB180</definition>
        <argsstring>(bool no_assertion=false) const</argsstring>
        <name>flushRB180</name>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This flushes its own <ref refid="structamrex_1_1FabArrayBase_1_1RB180" kindref="compound">RB180</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="628" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ae6417c14fa4f3f5efacf7ea324a1a3d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1PolarB" kindref="compound">PolarB</ref> &amp;</type>
        <definition>const PolarB&amp; amrex::FabArrayBase::getPolarB</definition>
        <argsstring>(const IntVect &amp;nghost, const Box &amp;domain) const</argsstring>
        <name>getPolarB</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nghost</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="649" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a11436d5c97b9158ac23058287feada66" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::flushPolarB</definition>
        <argsstring>(bool no_assertion=false) const</argsstring>
        <name>flushPolarB</name>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>This flushes its own <ref refid="structamrex_1_1FabArrayBase_1_1PolarB" kindref="compound">PolarB</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="651" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a8b95df9ab5980407e45865e8876791be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::clearThisBD</definition>
        <argsstring>(bool no_assertion=false)</argsstring>
        <name>clearThisBD</name>
        <param>
          <type>bool</type>
          <declname>no_assertion</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>clear BD count and caches associated with this BD, if no other is using this BD. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="659" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a294641949d2f4dd2161ba42a6b10d570" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::FabArrayBase::addThisBD</definition>
        <argsstring>()</argsstring>
        <name>addThisBD</name>
        <briefdescription>
<para>add the current BD into BD count database </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="662" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ad8ef26468982ff9ba6e2fbc5eb8073bb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>static Long amrex::FabArrayBase::bytesOfMapOfCopyComTagContainers</definition>
        <argsstring>(const MapOfCopyComTagContainers &amp;)</argsstring>
        <name>bytesOfMapOfCopyComTagContainers</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase_1a70b58356e2e49c69d54eed3850a9c231" kindref="member">MapOfCopyComTagContainers</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ab9d1477fa7e20518ac22fdb03574a4b2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::FabArrayBase::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
<para>Initialize from <ref refid="classamrex_1_1ParmParse" kindref="compound">ParmParse</ref> with &quot;fabarray&quot; prefix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="303" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a0f7d18c9334054a0934c2740860971c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::FabArrayBase::Finalize</definition>
        <argsstring>()</argsstring>
        <name>Finalize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ac2344224d72849f0e7fe1888d150a550" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1FPinfo" kindref="compound">FPinfo</ref> &amp;</type>
        <definition>static const FPinfo&amp; amrex::FabArrayBase::TheFPinfo</definition>
        <argsstring>(const FabArrayBase &amp;srcfa, const FabArrayBase &amp;dstfa, const IntVect &amp;dstng, const BoxConverter &amp;coarsener, const Geometry &amp;fgeom, const Geometry &amp;cgeom, const EB2::IndexSpace *)</argsstring>
        <name>TheFPinfo</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>srcfa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>dstfa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>dstng</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1BoxConverter" kindref="compound">BoxConverter</ref> &amp;</type>
          <declname>coarsener</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>fgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>cgeom</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1EB2_1_1IndexSpace" kindref="compound">EB2::IndexSpace</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a583784f4a6e46aacd6f953de8d6f4fb0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structamrex_1_1FabArrayBase_1_1CFinfo" kindref="compound">CFinfo</ref> &amp;</type>
        <definition>static const CFinfo&amp; amrex::FabArrayBase::TheCFinfo</definition>
        <argsstring>(const FabArrayBase &amp;finefa, const Geometry &amp;finegm, const IntVect &amp;ng, bool include_periodic, bool include_physbndry)</argsstring>
        <name>TheCFinfo</name>
        <param>
          <type>const <ref refid="classamrex_1_1FabArrayBase" kindref="compound">FabArrayBase</ref> &amp;</type>
          <declname>finefa</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Geometry" kindref="compound">Geometry</ref> &amp;</type>
          <declname>finegm</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ng</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>include_periodic</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>include_physbndry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="394" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ad7b654271794fe25ff5e0491050ce706" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::FabArrayBase::WaitForAsyncSends</definition>
        <argsstring>(int N_snds, Vector&lt; MPI_Request &gt; &amp;send_reqs, Vector&lt; char *&gt; &amp;send_data, Vector&lt; MPI_Status &gt; &amp;stats)</argsstring>
        <name>WaitForAsyncSends</name>
        <param>
          <type><ref refid="namespaceamrex_1ad2e8127753e9be0ebf531435c6511937" kindref="member">int</ref></type>
          <declname>N_snds</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="AMReX__ccse-mpi_8H_1a240e9d13a157e03c75e42306b13cd8d8" kindref="member">MPI_Request</ref> &gt; &amp;</type>
          <declname>send_reqs</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; char *&gt; &amp;</type>
          <declname>send_data</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="structMPI__Status" kindref="compound">MPI_Status</ref> &gt; &amp;</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
<para>Block until all send requests complete. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="409" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a7022fe872e97df24058250928b3d84b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::FabArrayBase::updateMemUsage</definition>
        <argsstring>(std::string const &amp;tag, Long nbytes, Arena const *ar)</argsstring>
        <name>updateMemUsage</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>tag</declname>
        </param>
        <param>
          <type>Long</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> const *</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="421" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a2a2878413402bf8cff44357bf4964a5d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::FabArrayBase::printMemUsage</definition>
        <argsstring>()</argsstring>
        <name>printMemUsage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a9eae1384b7fc7342c235f99b503fad01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>static Long amrex::FabArrayBase::queryMemUsage</definition>
        <argsstring>(const std::string &amp;tag=std::string(&quot;All&quot;))</argsstring>
        <name>queryMemUsage</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>tag</declname>
          <defval>std::string(&quot;All&quot;)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ab671a167eb6b1779fa2df2a227931f82" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Long</type>
        <definition>static Long amrex::FabArrayBase::queryMemUsageHWM</definition>
        <argsstring>(const std::string &amp;tag=std::string(&quot;All&quot;))</argsstring>
        <name>queryMemUsageHWM</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>tag</declname>
          <defval>std::string(&quot;All&quot;)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="424" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a550a79531f98644ed6572f635f854cf7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::FabArrayBase::pushRegionTag</definition>
        <argsstring>(const char *t)</argsstring>
        <name>pushRegionTag</name>
        <param>
          <type>const char *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a6c6874f6a073ba5a8fe15d5fc7837a5d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::FabArrayBase::pushRegionTag</definition>
        <argsstring>(std::string t)</argsstring>
        <name>pushRegionTag</name>
        <param>
          <type>std::string</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="427" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a8bf2b5f80cfa6a00fd92a2c10b16720c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::FabArrayBase::popRegionTag</definition>
        <argsstring>()</argsstring>
        <name>popRegionTag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="428" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a653b5bd0ac05e183721ba30b5c5dbb55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::FabArrayBase::flushTileArrayCache</definition>
        <argsstring>()</argsstring>
        <name>flushTileArrayCache</name>
        <briefdescription>
<para>This flushes the entire cache. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1ac8219bfa75d50673c667ce09d6cb2d83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::FabArrayBase::flushFBCache</definition>
        <argsstring>()</argsstring>
        <name>flushFBCache</name>
        <briefdescription>
<para>This flushes the entire cache. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="533" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a6011806b7564dbb0849cc33d57e95a4f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::FabArrayBase::flushCPCache</definition>
        <argsstring>()</argsstring>
        <name>flushCPCache</name>
        <briefdescription>
<para>This flusheds the entire cache. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="583" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1abf133627f3fe188828f9cdf811dd8a86" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::FabArrayBase::flushRB90Cache</definition>
        <argsstring>()</argsstring>
        <name>flushRB90Cache</name>
        <briefdescription>
<para>This flushes the entire cache. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="606" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a44faf0f19d9f24cacd58d8396b2c1610" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::FabArrayBase::flushRB180Cache</definition>
        <argsstring>()</argsstring>
        <name>flushRB180Cache</name>
        <briefdescription>
<para>This flushes the entire cache. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="629" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1FabArrayBase_1a70b561d2ca803ef3488983323339bac6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void amrex::FabArrayBase::flushPolarBCache</definition>
        <argsstring>()</argsstring>
        <name>flushPolarBCache</name>
        <briefdescription>
<para>This flushes the entire cache. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="652" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1290">
        <label>amrex::LayoutData&lt; HYPRE_Int &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1272">
        <label>amrex::FabArray&lt; amrex::BaseFab&lt; PetscInt &gt; &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1279">
        <label>amrex::iMultiFab</label>
        <link refid="classamrex_1_1iMultiFab"/>
        <childnode refid="1278" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1270">
        <label>amrex::FabArray&lt; amrex::BaseFab&lt; HYPRE_Int &gt; &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1284">
        <label>amrex::LayoutData&lt; amrex::Vector&lt; amrex::Vector&lt; amrex::BoundCond &gt; &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1268">
        <label>amrex::FabArray&lt; FAB &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1286">
        <label>amrex::LayoutData&lt; amrex::Vector&lt; Int &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1275">
        <label>amrex::FabArray&lt; amrex::Mask &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1280">
        <label>amrex::FabArray&lt; TagBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1292">
        <label>amrex::LayoutData&lt; PetscInt &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1271">
        <label>amrex::FabArray&lt; amrex::BaseFab&lt; Int &gt; &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1291">
        <label>amrex::LayoutData&lt; Int &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1289">
        <label>amrex::EB2::MultiGFab</label>
        <link refid="classamrex_1_1EB2_1_1MultiGFab"/>
        <childnode refid="1288" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1274">
        <label>amrex::FabArray&lt; amrex::EBCellFlagFab &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1285">
        <label>amrex::LayoutData&lt; amrex::Vector&lt; BCTuple &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1278">
        <label>amrex::FabArray&lt; IArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1288">
        <label>amrex::LayoutData&lt; GFab &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1273">
        <label>amrex::FabArray&lt; amrex::CutFab &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1283">
        <label>amrex::LayoutData&lt; amrex::PODVector&lt; PetscInt &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1287">
        <label>amrex::LayoutData&lt; amrex::Vector&lt; RealTuple &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1277">
        <label>amrex::MultiFab</label>
        <link refid="classamrex_1_1MultiFab"/>
        <childnode refid="1276" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1269">
        <label>amrex::LayoutData&lt; T &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1293">
        <label>amrex::LayoutData&lt; RealTuple &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1276">
        <label>amrex::FabArray&lt; FArrayBox &gt;</label>
        <link refid="classamrex_1_1FabArray"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1281">
        <label>amrex::TagBoxArray</label>
        <link refid="classamrex_1_1TagBoxArray"/>
        <childnode refid="1280" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1282">
        <label>amrex::LayoutData&lt; amrex::PODVector&lt; HYPRE_Int &gt; &gt;</label>
        <link refid="classamrex_1_1LayoutData"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1267">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1295">
        <label>amrex::FabArrayBase::CacheStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1CacheStats"/>
        <childnode refid="1296" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="1299">
        <label>amrex::FabArrayBase::FabArrayStats</label>
        <link refid="structamrex_1_1FabArrayBase_1_1FabArrayStats"/>
      </node>
      <node id="1298">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="1298" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="1300">
        <label>amrex::Vector&lt; int &gt;</label>
        <link refid="classamrex_1_1Vector"/>
        <childnode refid="1301" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1296">
        <label>string</label>
      </node>
      <node id="1301">
        <label>std::vector&lt; int, std::allocator&lt; int &gt; &gt;</label>
      </node>
      <node id="1303">
        <label>amrex::DistributionMapping::RefID</label>
        <link refid="structamrex_1_1DistributionMapping_1_1RefID"/>
        <childnode refid="1304" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
      <node id="1304">
        <label>amrex::DistributionMapping::Ref</label>
        <link refid="structamrex_1_1DistributionMapping_1_1Ref"/>
        <childnode refid="1300" relation="usage">
          <edgelabel>m_index_array</edgelabel>
          <edgelabel>m_pmap</edgelabel>
        </childnode>
      </node>
      <node id="1297">
        <label>amrex::DistributionMapping</label>
        <link refid="classamrex_1_1DistributionMapping"/>
      </node>
      <node id="1302">
        <label>amrex::FabArrayBase::BDKey</label>
        <link refid="structamrex_1_1FabArrayBase_1_1BDKey"/>
        <childnode refid="1303" relation="usage">
          <edgelabel>m_dm_id</edgelabel>
        </childnode>
      </node>
      <node id="1294">
        <label>amrex::FabArrayBase</label>
        <link refid="classamrex_1_1FabArrayBase"/>
        <childnode refid="1295" relation="usage">
          <edgelabel>m_FBC_stats</edgelabel>
          <edgelabel>m_FPinfo_stats</edgelabel>
          <edgelabel>m_CFinfo_stats</edgelabel>
          <edgelabel>m_TAC_stats</edgelabel>
          <edgelabel>m_CPC_stats</edgelabel>
        </childnode>
        <childnode refid="1297" relation="usage">
          <edgelabel>distributionMap</edgelabel>
        </childnode>
        <childnode refid="1298" relation="usage">
          <edgelabel>n_filled</edgelabel>
          <edgelabel>n_grow</edgelabel>
          <edgelabel>comm_tile_size</edgelabel>
          <edgelabel>mfiter_tile_size</edgelabel>
          <edgelabel>mfghostiter_tile_size</edgelabel>
        </childnode>
        <childnode refid="1299" relation="usage">
          <edgelabel>m_FA_stats</edgelabel>
        </childnode>
        <childnode refid="1300" relation="usage">
          <edgelabel>indexArray</edgelabel>
        </childnode>
        <childnode refid="1302" relation="usage">
          <edgelabel>m_bdkey</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" line="31" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Base/AMReX_FabArrayBase.H" bodystart="30" bodyend="703"/>
    <listofallmembers>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa10289ce78187f199681fabf1c9956399" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>ADD</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a294641949d2f4dd2161ba42a6b10d570" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>addThisBD</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acc3c1d759fbd867cf7d9c806e56c30c7" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>box</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4bb7e999eee8c04f07573269b54e39d0" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>boxArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae63b22ccabe6c5af01dd0779c60740c8" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>boxarray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3bb1453b2bf26b145d0553dcaf8332be" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>buildTileArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad8ef26468982ff9ba6e2fbc5eb8073bb" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>bytesOfMapOfCopyComTagContainers</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab93444c8298b6446b699b33cf6c9247b" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>CFinfoCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae15d8b6b473748103771433c507773ad" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>CFinfoCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a10399c20d1f9186d481354025e58f6dc" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>clear</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8b95df9ab5980407e45865e8876791be" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>clearThisBD</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aec4332affa6c055da41aab70b684a064" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>comm_tile_size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cffa30d7d89f4f6df2117a0c88fcec1a65cb" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>COPY</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1bb6a09ada00b5b7a900d8fecbf92e3c" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>CopyComTagsContainer</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a68151f78c47e353f18a8077ce54afc30" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>CPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae1a0d2f95995d26b5afe7c866f760bd6" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>CPCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac86e93bfc13df1bdcfb0ebbafb6a1cff" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>CpOp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a79b45950358798ae16a0dc928b8ee0ba" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad5c3a8098f8bb8aec61ed6b213340169" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>define</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adcb92e864340876da67df2fc64d8bdd7" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>distributionMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1abd59469241abaab18e1c2db8b7ceb4ed" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>DistributionMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab96a1c213fe6e5f402c4e006608564f5" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>empty</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acc0d46f9c8551ec9c1c6d6658103db15" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2626dd8a948d7ef6dcb5ea286709ad6e" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab81793c2f32c7430eed823483c6c41a4" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a474c8b827c1db51691c9e98263508d31" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa8a53e00ad4f706959f791ca7fdaf087" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FabArrayBase</name></member>
      <member refid="classamrex_1_1FabArrayBase_1adce0fffa78b25dbbfa1f82701e579425" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>fabbox</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0985ab08746761a6517115f000e0a8ac" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aba788e1a081a9e668ba53d504e75a352" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FBCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad9b12d8c8e4455a3eda7d9c0d42ffc20" prot="private" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FillBoundary</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0f7d18c9334054a0934c2740860971c2" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9d3dbb0a351f570080f23f75febd836d" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushCFinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a16c472ffe97ca76e2ffa59ffceec0931" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushCPC</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a6011806b7564dbb0849cc33d57e95a4f" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushCPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad0036a8cccab0b66956ebdb8fb07d16f" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushFB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac8219bfa75d50673c667ce09d6cb2d83" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushFBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae7aac9d7bfa41ac76f80543a6a8c1898" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushFPinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a11436d5c97b9158ac23058287feada66" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushPolarB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a70b561d2ca803ef3488983323339bac6" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushPolarBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac71669e7574424826140208ef85fcc4a" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushRB180</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a44faf0f19d9f24cacd58d8396b2c1610" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushRB180Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab092b4d04401abad6715b550b01dd5b4" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushRB90</name></member>
      <member refid="classamrex_1_1FabArrayBase_1abf133627f3fe188828f9cdf811dd8a86" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushRB90Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a03141dc770d42b5297105bb259b9c8e5" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushTileArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a653b5bd0ac05e183721ba30b5c5dbb55" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>flushTileArrayCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a68a25147d3410960af381727954394ba" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FPinfoCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3272dd508dcab2f679993ef1308a4278" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>FPinfoCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa0cb5039380dc0545d40ac5ac6589943" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getBDKey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a439b266a2a54717032fad3baa62c5e22" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getCPC</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a51995e07a57bf9f0fde79fbf20f91616" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getFB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae6417c14fa4f3f5efacf7ea324a1a3d6" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getPolarB</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a304ba0bf4637208cfdd1a94098c55637" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getRB180</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1fa0d3a08ed46a79dd0fae8c8f9603af" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getRB90</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a47294c772e3bc6de1c901df4c2aa2b10" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>getTileArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7a4ed8b70e3aa4c3ddd3a24fb1c0f3a0" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>IndexArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a15c2b54df8386a9d38216410edce884c" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>indexArray</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab9d1477fa7e20518ac22fdb03574a4b2" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a60aa58517fd2a7d6976e114df171df25" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>is_cell_centered</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a641ffe22574cc57f3544687b3e23d174" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>is_nodal</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a90447f2e6d22e5e0e06a538fd37063d5" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>is_nodal</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a6512ea611a6c04b5710334d9d9bfbb4e" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>isOwner</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a682fdf86619f6028fea2805d9693ae22" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>ixType</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aabf6dbff99d8524f9c9d082302afdd5e" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>local_size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa848db21ec5426fab2c86d441cd0a314" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>localindex</name></member>
      <member refid="classamrex_1_1FabArrayBase_1af3d0b759e5fa01a885c95e93e0e9f7b1" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_BD_count</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2865ec7ad6d6f09cf1a3a891b603144c" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_bdkey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a92e87a53eaf353557dfcf6b875123a81" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_CFinfo_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acf463c256f5ac08e3c6c71666a682308" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_CPC_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3adcc31bb0235db6192cb22451a4ee8b" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_FA_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a5f3f2c05af6fbc9a1e5c59e03133505d" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_FBC_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a34cc63703ab4e2492a4444199def31d2" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_FPinfo_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a1cba13cd9d7009299774b13eb2f49484" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_mem_usage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac8c10e1b5a28a55c6dc388f7df101a97" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_multi_ghost</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a11cf5808ab448ff1721d7f66de93206e" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_region_tag</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa5ab85a3018faa2b983936fa4116cd4f" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TAC_stats</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa2a265ca0b7ce27ee0f3d66c86fe929d" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheCPCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab58a879dec4546737754f55dd8b600e2" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheCrseFineCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a6ec51851470b2e1ec57805bad7725268" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheFBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acdb408349f86d3e32c29e245a361ba0c" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheFillPatchCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8bd69d649f9a0446dbc7ba981c58199a" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_ThePolarBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9549d43d5d9d74ddb7c541d9f3339848" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheRB180Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac6817d7110b3389ad5ececd0da4e241a" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheRB90Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1afc113a32c271a6c406b525795a5d71e0" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>m_TheTileArrayCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a70b58356e2e49c69d54eed3850a9c231" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>MapOfCopyComTagContainers</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae4f336f53eda93074deacddef4d22055" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>MaxComp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0730c47ed240b86d1a24126a0adf6b13" prot="private" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>MFGhostIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a31677ce1cdddcbc405f41bb1a4351d35" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>mfghostiter_tile_size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a11fd6aa3197ac10c8fb27ee5a5c96d57" prot="private" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>MFIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8635aa060ab92c84d2641b61e0584052" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>mfiter_tile_size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a4ff6141edd1ba1d1940c45b98a619b04" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>n_comp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acb3699bf4d436f320a73a9c5239b81cd" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>n_filled</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aad48d978f6df9294ff3cbdb8978b8914" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>n_grow</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aec6647af0d0a9f2d760d502a8975d6f1" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>nComp</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a92cef599b0ae34401a5463ec6fddc606" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>nGrow</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a76a6089045a5d690f809bd0d2e7c51ab" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>nGrowFilled</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0598988ee34f3885bd6d2a4787a8f427" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>nGrowVect</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a24f7e6d0d4e8ee6aa8207710f51a603e" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a0b213cf522c93646cc152abb65ad97a4" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>operator=</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab4d5df57a6eaa1d785d131b059b43e18" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>ownership</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8e414f069d04091245f3e9e94a3aa237" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>OwnerShip</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ae848c74c7550fb55e2f9d7b74777b57e" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>PolarBCache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a242fe8ea3608d28675efccf79fbbd961" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>PolarBCacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a8bf2b5f80cfa6a00fd92a2c10b16720c" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>popRegionTag</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2a2878413402bf8cff44357bf4964a5d" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>printMemUsage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a550a79531f98644ed6572f635f854cf7" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>pushRegionTag</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a6c6874f6a073ba5a8fe15d5fc7837a5d" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>pushRegionTag</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a9eae1384b7fc7342c235f99b503fad01" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>queryMemUsage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ab671a167eb6b1779fa2df2a227931f82" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>queryMemUsageHWM</name></member>
      <member refid="classamrex_1_1FabArrayBase_1af99de5735cac80b4400637c127031ed9" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>RB180Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a63963907fa7e09b07008c5bbd11a1a0a" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>RB180CacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a916f834bf453a57b557aa66408d7d748" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>RB90Cache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1aa850e5ff039851c262daddf6d185c817" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>RB90CacheIter</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7d9c921734d6199c74f9ce44f81eba81" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>setMultiGhost</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a2ad51584223d99ae31e86bf9a21c10b7" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>setNGrowFilled</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a713a78056e395c21e855dcc1ed56525c" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>size</name></member>
      <member refid="classamrex_1_1FabArrayBase_1acefd7d2a27952d4bac78ac9befcda8eb" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>TACache</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a905802e4dcdc5377e09d455fc80f0400" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>TAMap</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a583784f4a6e46aacd6f953de8d6f4fb0" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>TheCFinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac2344224d72849f0e7fe1888d150a550" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>TheFPinfo</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a3918d10004ca8f4494fd9e6099bdabc3" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>updateBDKey</name></member>
      <member refid="classamrex_1_1FabArrayBase_1a7022fe872e97df24058250928b3d84b6" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>updateMemUsage</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ad7b654271794fe25ff5e0491050ce706" prot="public" virt="non-virtual"><scope>amrex::FabArrayBase</scope><name>WaitForAsyncSends</name></member>
      <member refid="classamrex_1_1FabArrayBase_1ac6760729a701bfc47516444a574f320a" prot="public" virt="virtual"><scope>amrex::FabArrayBase</scope><name>~FabArrayBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
