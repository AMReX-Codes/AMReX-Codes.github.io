<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classamrex_1_1TagBox" kind="class" language="C++" prot="public">
    <compoundname>amrex::TagBox</compoundname>
    <basecompoundref refid="classamrex_1_1BaseFab" prot="public" virt="non-virtual">amrex::BaseFab&lt; char &gt;</basecompoundref>
    <includes refid="AMReX__TagBox_8H" local="no">AMReX_TagBox.H</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classamrex_1_1TagBox_1ac8c350e6c62e1f2fd736b52d1b7caffa" prot="public" static="no">
        <name>TagVal</name>
        <enumvalue id="classamrex_1_1TagBox_1ac8c350e6c62e1f2fd736b52d1b7caffaa4711806dfba8eb0c37ad5bb4abde7814" prot="public">
          <name>CLEAR</name>
          <initializer>=0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1TagBox_1ac8c350e6c62e1f2fd736b52d1b7caffaa5c2d81c416e8ee0e1bd9d475e73d31cf" prot="public">
          <name>BUF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classamrex_1_1TagBox_1ac8c350e6c62e1f2fd736b52d1b7caffaa0a8540b96d3e93084532672dad69790c" prot="public">
          <name>SET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Possible values for each cell. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="35" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="typedef" id="classamrex_1_1TagBox_1aa3eab6b001470948ab883ec074459049" prot="public" static="no">
        <type>char</type>
        <definition>typedef char amrex::TagBox::TagType</definition>
        <argsstring></argsstring>
        <name>TagType</name>
        <briefdescription>
<para>The type of each tag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="32" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classamrex_1_1TagBox_1adda034b74e7dc88d8cd42301b61b8285" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::TagBox::TagBox</definition>
        <argsstring>() noexcept</argsstring>
        <name>TagBox</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="37" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.cpp" bodystart="14" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1ad999c44361969badefa168cb00e90b91" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::TagBox::TagBox</definition>
        <argsstring>(Arena *ar) noexcept</argsstring>
        <name>TagBox</name>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="39" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.cpp" bodystart="16" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1ac73a784e745d05a574f53621abd7109b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::TagBox::TagBox</definition>
        <argsstring>(const Box &amp;bx, int n, Arena *ar)</argsstring>
        <name>TagBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="41" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.cpp" bodystart="20" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1a2be163745fcfa3fae9d72a768b97d797" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::TagBox::TagBox</definition>
        <argsstring>(const Box &amp;bx, int n=1, bool alloc=true, bool shared=false, Arena *ar=nullptr)</argsstring>
        <name>TagBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>alloc</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>shared</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="classamrex_1_1Arena" kindref="compound">Arena</ref> *</type>
          <declname>ar</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="43" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.cpp" bodystart="26" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1a00b44af3c3dc783226e28adc117e93e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::TagBox::TagBox</definition>
        <argsstring>(const TagBox &amp;rhs, MakeType make_type, int scomp, int ncomp)</argsstring>
        <name>TagBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1TagBox" kindref="compound">TagBox</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="namespaceamrex_1a0a36c65d0681a832330b2812f16786a6" kindref="member">MakeType</ref></type>
          <declname>make_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scomp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ncomp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="46" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.cpp" bodystart="32" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1afe1db412d36741917d888ebca4214b0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::TagBox::~TagBox</definition>
        <argsstring>()=default</argsstring>
        <name>~TagBox</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1adc981d8086ea65ef19383c04acacace3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::TagBox::TagBox</definition>
        <argsstring>(TagBox &amp;&amp;rhs) noexcept=default</argsstring>
        <name>TagBox</name>
        <param>
          <type><ref refid="classamrex_1_1TagBox" kindref="compound">TagBox</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1a1c163cf21eb64a1c2032d5ba1acb2594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>amrex::TagBox::TagBox</definition>
        <argsstring>(const TagBox &amp;rhs)=delete</argsstring>
        <name>TagBox</name>
        <param>
          <type>const <ref refid="classamrex_1_1TagBox" kindref="compound">TagBox</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1a5c795ae93bec04fe82069450ebd7fa41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1TagBox" kindref="compound">TagBox</ref> &amp;</type>
        <definition>TagBox&amp; amrex::TagBox::operator=</definition>
        <argsstring>(const TagBox &amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classamrex_1_1TagBox" kindref="compound">TagBox</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1af21d06fbdc2ccecc175efd767684610b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1TagBox" kindref="compound">TagBox</ref> &amp;</type>
        <definition>TagBox&amp; amrex::TagBox::operator=</definition>
        <argsstring>(TagBox &amp;&amp;rhs)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classamrex_1_1TagBox" kindref="compound">TagBox</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1a14387f2c8733517041665421bf41727b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TagBox::coarsen</definition>
        <argsstring>(const IntVect &amp;ratio) noexcept</argsstring>
        <name>coarsen</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
<para>Construct and return a new tagbox in which the coarsened cell is tagged of any of the corresponding fine cells are tagged. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ratio</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>owner</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="64" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.cpp" bodystart="37" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1aa6324edaf14ada2c319e1a5c92062331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TagBox::buffer</definition>
        <argsstring>(const IntVect &amp;nbuf, const IntVect &amp;nwid) noexcept</argsstring>
        <name>buffer</name>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nbuf</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &amp;</type>
          <declname>nwid</declname>
        </param>
        <briefdescription>
<para>Mark neighbors of every tagged cell a distance nbuff away only search interior for initial tagged points where nwid is given as the width of the bndry region. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nbuff</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nwid</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="74" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.cpp" bodystart="116" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1ac5bbbf73007a0bfccccc49af41deac1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TagBox::merge</definition>
        <argsstring>(const TagBox &amp;src) noexcept</argsstring>
        <name>merge</name>
        <param>
          <type>const <ref refid="classamrex_1_1TagBox" kindref="compound">TagBox</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Tag cells on intersect with src if corresponding src cell is tagged. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="81" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.cpp" bodystart="171" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1a6a18290874848ad98683bdbb390c3ffc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::TagBox::collate</definition>
        <argsstring>(Vector&lt; IntVect &gt; &amp;ar, int start) const noexcept</argsstring>
        <name>collate</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> &gt; &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <briefdescription>
<para>Add location of every tagged cell to <ref refid="classamrex_1_1IntVect" kindref="compound">IntVect</ref> array, starting at given location. Returns the number of collated points. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="91" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.cpp" bodystart="240" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1aca71c208d9178bbe63ec06658c813616" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::TagBox::numTags</definition>
        <argsstring>(const Box &amp;bx) const noexcept</argsstring>
        <name>numTags</name>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>bx</declname>
        </param>
        <briefdescription>
<para>Returns number of tagged cells in specified <ref refid="classamrex_1_1Box" kindref="compound">Box</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="98" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.cpp" bodystart="232" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1a55e1676f90f87c700cdba6ea5490f988" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long amrex::TagBox::numTags</definition>
        <argsstring>() const noexcept</argsstring>
        <name>numTags</name>
        <briefdescription>
<para>Returns total number of tagged cells in the <ref refid="classamrex_1_1TagBox" kindref="compound">TagBox</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="103" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.cpp" bodystart="218" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1a9023e58bfadedd84fa003f9b10712949" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt;</type>
        <definition>Vector&lt; int &gt; amrex::TagBox::tags</definition>
        <argsstring>() const noexcept</argsstring>
        <name>tags</name>
        <briefdescription>
<para>Returns <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt;int&gt; of size domain.numPts() suitable for calling Fortran, with positions set to same value as in the <ref refid="classamrex_1_1TagBox" kindref="compound">TagBox</ref> <ref refid="classamrex_1_1BaseFab_1ac1817d437a6ca523298e25202dd51705" kindref="member">dataPtr()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="110" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.cpp" bodystart="274" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1a43dbc9ccdad55205e4a95d7ccf6f3691" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TagBox::get_itags</definition>
        <argsstring>(Vector&lt; int &gt; &amp;ar, const Box &amp;tilebx) const noexcept</argsstring>
        <name>get_itags</name>
        <param>
          <type><ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>tilebx</declname>
        </param>
        <briefdescription>
<para>Since a <ref refid="classamrex_1_1TagBox" kindref="compound">TagBox</ref> is a <ref refid="classamrex_1_1BaseFab" kindref="compound">BaseFab</ref>&lt;char&gt;, we can use this utility function to allocate an integer array to have the same number of elements as cells in tilebx. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tilebx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="120" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.cpp" bodystart="329" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1a194d49c2adb475dabf1de3a7bc717b7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TagBox::tags</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;ar) noexcept</argsstring>
        <name>tags</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
<para>Set values as specified by the array <ndash/> this only tags. It&apos;s an error if <ref refid="namespaceamrex_1ab8f44b56e5ac2f53bcfe742891c1c79c" kindref="member">ar.length()</ref> != domain.numPts(). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="128" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.cpp" bodystart="294" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1af03179052f9fb5a076f95d2bb33e94e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TagBox::tags_and_untags</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;ar) noexcept</argsstring>
        <name>tags_and_untags</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>ar</declname>
        </param>
        <briefdescription>
<para>Set values as specified by the array <ndash/> this tags and untags. It&apos;s an error if <ref refid="namespaceamrex_1ab8f44b56e5ac2f53bcfe742891c1c79c" kindref="member">ar.length()</ref> != domain.numPts(). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="136" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.cpp" bodystart="311" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1a4e225aa2595e49382cb2db00df813d8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TagBox::tags</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;ar, const Box &amp;tilebx) noexcept</argsstring>
        <name>tags</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>tilebx</declname>
        </param>
        <briefdescription>
<para>Set values as specified by the array <ndash/> this only tags. only changes values in the tilebx region. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tilebx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="145" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.cpp" bodystart="370" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classamrex_1_1TagBox_1abbc0728a20e92cbaf06b19a0b9cff0cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void amrex::TagBox::tags_and_untags</definition>
        <argsstring>(const Vector&lt; int &gt; &amp;ar, const Box &amp;tilebx) noexcept</argsstring>
        <name>tags_and_untags</name>
        <param>
          <type>const <ref refid="classamrex_1_1Vector" kindref="compound">Vector</ref>&lt; int &gt; &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type>const <ref refid="classamrex_1_1Box" kindref="compound">Box</ref> &amp;</type>
          <declname>tilebx</declname>
        </param>
        <briefdescription>
<para>Set values as specified by the array <ndash/> this tags and untags. only changes values in the tilebx region. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ar</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tilebx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="154" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.cpp" bodystart="404" bodyend="432"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="6206">
        <label>amrex::TagBox</label>
        <link refid="classamrex_1_1TagBox"/>
        <childnode refid="6207" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6208">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
      </node>
      <node id="6207">
        <label>amrex::BaseFab&lt; char &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="6208" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6209">
        <label>amrex::TagBox</label>
        <link refid="classamrex_1_1TagBox"/>
        <childnode refid="6210" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6213">
        <label>amrex::ArenaInfo</label>
        <link refid="structamrex_1_1ArenaInfo"/>
      </node>
      <node id="6215">
        <label>amrex::IntVect</label>
        <link refid="classamrex_1_1IntVect"/>
        <childnode refid="6215" relation="usage">
          <edgelabel>Unit</edgelabel>
          <edgelabel>Zero</edgelabel>
        </childnode>
      </node>
      <node id="6211">
        <label>amrex::DataAllocator</label>
        <link refid="structamrex_1_1DataAllocator"/>
        <childnode refid="6212" relation="usage">
          <edgelabel>m_arena</edgelabel>
        </childnode>
      </node>
      <node id="6212">
        <label>amrex::Arena</label>
        <link refid="classamrex_1_1Arena"/>
        <childnode refid="6213" relation="usage">
          <edgelabel>arena_info</edgelabel>
        </childnode>
      </node>
      <node id="6214">
        <label>amrex::Box</label>
        <link refid="classamrex_1_1Box"/>
        <childnode refid="6215" relation="usage">
          <edgelabel>bigend</edgelabel>
          <edgelabel>smallend</edgelabel>
        </childnode>
        <childnode refid="6216" relation="usage">
          <edgelabel>btype</edgelabel>
        </childnode>
      </node>
      <node id="6216">
        <label>amrex::IndexType</label>
        <link refid="classamrex_1_1IndexType"/>
      </node>
      <node id="6210">
        <label>amrex::BaseFab&lt; char &gt;</label>
        <link refid="classamrex_1_1BaseFab"/>
        <childnode refid="6211" relation="public-inheritance">
        </childnode>
        <childnode refid="6214" relation="usage">
          <edgelabel>domain</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" line="28" column="1" bodyfile="/home/travis/build/AMReX-Codes/amrex/Src/AmrCore/AMReX_TagBox.H" bodystart="25" bodyend="155"/>
    <listofallmembers>
      <member refid="classamrex_1_1BaseFab_1a60b67b06c0aa9e37d96d76cf759e759e" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1a1b090c18d7aaabf3faa50488b974b225" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1aa4a8fd8dfc84b70c08f5353efb9172b6" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>abs</name></member>
      <member refid="classamrex_1_1BaseFab_1a91513822e781492a9800ae2064f4c6ee" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>Accumulate</name></member>
      <member refid="classamrex_1_1BaseFab_1afe02f231fb3dd4fc4c9e1c7e4e2964d6" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>addFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1a12a46f061e932da4f9a7be453064eec5" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>addproduct</name></member>
      <member refid="structamrex_1_1DataAllocator_1adcabda73bbd0120b08dbb2cda22a6427" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>alloc</name></member>
      <member refid="structamrex_1_1DataAllocator_1a477a75a5d73137b29f1a6ddf31af40f7" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>arena</name></member>
      <member refid="classamrex_1_1BaseFab_1aa456605f5709d47be9474befe9d9e128" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1a039630ee4496b6d7fd17020a78f4f899" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>array</name></member>
      <member refid="classamrex_1_1BaseFab_1ad0f8441171dac51883fd6137efc91e6a" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a8f354041007b5c0c411d2cf70f518ef8" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1aea181b42d90299926a976a41954841fc" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a7574b5d3fb35e12d76033f79517c76c7" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>atomicAdd</name></member>
      <member refid="classamrex_1_1BaseFab_1a7e470d7e72db0c3169e83e34ce4f657b" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1ae5d9786facded55bfce06cc443594cab" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a83d88e02757dac7e30b2ac7a13020b22" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1aa42c6cb505873cad1b9c9de64a20c407" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a4b890373aa053ba5cd3aae0bf5483c1c" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a8553c8f3915ded4cacfba0c490b98bc5" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a53ab00ff398b5beb473bf85810189532" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a2fe573448f0463cc140a1452a9510eb0" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a27f1fbad6aff0f97e0291664ab11a4e4" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a54d1d483f6f2d5e455eb9d8bb290d325" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a17a67eac45989c89c30b7daa039a39b6" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a6b0fa577ec8190137939f503041e7bf7" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1aa2ce65c438db70645899b1d0c09f2455" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>BaseFab</name></member>
      <member refid="classamrex_1_1BaseFab_1a0d29e1227b0a3d2381b35cce869f9e5f" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>bigEnd</name></member>
      <member refid="classamrex_1_1BaseFab_1a9359cb75c273aa3ab475d21ddc64f8f3" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>box</name></member>
      <member refid="classamrex_1_1TagBox_1ac8c350e6c62e1f2fd736b52d1b7caffaa5c2d81c416e8ee0e1bd9d475e73d31cf" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>BUF</name></member>
      <member refid="classamrex_1_1TagBox_1aa6324edaf14ada2c319e1a5c92062331" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>buffer</name></member>
      <member refid="classamrex_1_1TagBox_1ac8c350e6c62e1f2fd736b52d1b7caffaa4711806dfba8eb0c37ad5bb4abde7814" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>CLEAR</name></member>
      <member refid="classamrex_1_1BaseFab_1ae428e6a2645141dd817c288331575f26" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>clear</name></member>
      <member refid="classamrex_1_1TagBox_1a14387f2c8733517041665421bf41727b" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>coarsen</name></member>
      <member refid="classamrex_1_1TagBox_1a6a18290874848ad98683bdbb390c3ffc" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>collate</name></member>
      <member refid="classamrex_1_1BaseFab_1aeba81b8b4aa7054af02788dc42c797c3" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>const_array</name></member>
      <member refid="classamrex_1_1BaseFab_1a90d94d23b4c7ff81a86093956d38b332" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>contains</name></member>
      <member refid="classamrex_1_1BaseFab_1a21a8ed23adcc906fd3a3814f3e851f3c" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>contains</name></member>
      <member refid="classamrex_1_1BaseFab_1a70271c2e1b77e0ea5f158eea45761fc8" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1aaa7d3fd422bc8847909369663e621487" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a0f146a347e5fb740e14ea2661465af00" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a589e71fc8086f2f02e1455d751b3ef0f" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1adffc3f632ba1775e84841a65a47305c5" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>copy</name></member>
      <member refid="classamrex_1_1BaseFab_1a204d8f987b091f6c9c7b0f9df8516e26" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>copyFromMem</name></member>
      <member refid="classamrex_1_1BaseFab_1a024ca63e1873c1914781adc6b80ce7c6" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>copyToMem</name></member>
      <member refid="structamrex_1_1DataAllocator_1a7efc193b557d263444d91cc90c7c7073" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>DataAllocator</name></member>
      <member refid="structamrex_1_1DataAllocator_1a1cbea797e47f9d7448b1f574beb24d8b" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>DataAllocator</name></member>
      <member refid="classamrex_1_1BaseFab_1ac1817d437a6ca523298e25202dd51705" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a8b5f6bd26ae63d34e365dddfe1fa0991" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a06a400fb85117c65737b171b07e478aa" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a156632a48b54792083eb05adec16155d" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>dataPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1a35dc22f1d61f4fb05ab75ae93f683d14" prot="protected" virt="non-virtual"><scope>amrex::TagBox</scope><name>define</name></member>
      <member refid="classamrex_1_1BaseFab_1a1799d563bf1422378100e5e524597d46" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1aabc4a1d1ffe7989959aa7e7f866db598" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1aa845104c0166893afa4ddd5fc24f7613" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a42098e3720513206e40cb04a7c78ba10" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1ab5ca6ad817518e495e582a769f9c2fd4" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1afad2abafb0db401dcad7f5ae351352e1" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a111538e85f7c8b365f1b88149cfcdcf9" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a13ebc4d7ae9f4b0a40182483cedfb3be" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a7e227c4397d3c7c12c77120d895561d6" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a8e95d8cfaadfe53080ae0092b53202fb" prot="protected" virt="non-virtual"><scope>amrex::TagBox</scope><name>domain</name></member>
      <member refid="classamrex_1_1BaseFab_1adb03ed2032296735e2b188be56558fbf" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a809f337b1ac6e5da6557f630149a3eca" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a321130e1af874c362b23bcd4ba7e3f2e" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a0db120f3f074edbdde7a22efc8de37fc" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>dot</name></member>
      <member refid="classamrex_1_1BaseFab_1a6b8d97aba07d9806cf1e711ca44f283a" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>dotmask</name></member>
      <member refid="classamrex_1_1BaseFab_1adb777343cc7e97c16caff0ff8d83b5c9" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>dotmask</name></member>
      <member refid="classamrex_1_1BaseFab_1a9236f2f88feff79c1d50b9b830750f91" prot="protected" virt="non-virtual"><scope>amrex::TagBox</scope><name>dptr</name></member>
      <member refid="classamrex_1_1BaseFab_1ac5a36d719054f74a00bfc52e10ec9918" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>elixir</name></member>
      <member refid="classamrex_1_1BaseFab_1a4b42e2b61ac6d8050def0a5e9bde849f" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>Finalize</name></member>
      <member refid="classamrex_1_1BaseFab_1aa7ffb7d3ed11be2617488acee59d5d8b" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1af056c3d5b73627c4ea8e0e30244aedce" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1a2b537482c611229a7e2b62f1bbf1d4c6" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1a11ed06775cfb2c8108b56d2158dc796b" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>ForEach</name></member>
      <member refid="classamrex_1_1BaseFab_1a01e76f051c01f45b50e48ef80d39d907" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>ForEachIV</name></member>
      <member refid="classamrex_1_1BaseFab_1a3cb3ce0e34a9e6d0e6826f863f5c55da" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>ForEachIV</name></member>
      <member refid="structamrex_1_1DataAllocator_1a5fa328945c30133a9b9c7f93ccf6e78f" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>free</name></member>
      <member refid="classamrex_1_1TagBox_1a43dbc9ccdad55205e4a95d7ccf6f3691" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>get_itags</name></member>
      <member refid="classamrex_1_1BaseFab_1ac195a2bbff03a7f02e30788342473d18" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseFab_1af8f8e7b8b678678f74f235b0ebdeed9f" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>getVal</name></member>
      <member refid="classamrex_1_1BaseFab_1ae6cabd78f18cfc8f0d9544ef683cd640" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>hiVect</name></member>
      <member refid="classamrex_1_1BaseFab_1ac1f1baf311e46d9e868d76bf659dd492" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>indexFromValue</name></member>
      <member refid="classamrex_1_1BaseFab_1a1d6dfeb0de1a785895b2a26e05c8ce4a" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>Initialize</name></member>
      <member refid="classamrex_1_1BaseFab_1a4f33242576d8af9719d891d10e8db54d" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1ab2625d5ab7b2b5a382d879a5d2dd43db" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a2cca18ffdc54a94f0a0dedcbb7122ca8" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1aabdf5f7feaca99394d4593465e64e586" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>invert</name></member>
      <member refid="classamrex_1_1BaseFab_1a8d6db68c9ef28ef91234e66512faceb8" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>isAllocated</name></member>
      <member refid="classamrex_1_1BaseFab_1a56b3de1c8cf4f5747c1219f411783d99" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>length</name></member>
      <member refid="classamrex_1_1BaseFab_1a4d474bdc21db63d848b989cfdd3d1d22" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>linComb</name></member>
      <member refid="classamrex_1_1BaseFab_1a03077e916e82559193f9913bbd6ec52c" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1aa81753624ac94b117b4c35466c76c1d7" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>linInterp</name></member>
      <member refid="classamrex_1_1BaseFab_1ad138d01fb5a57ad77306a3adbf8026cb" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>loVect</name></member>
      <member refid="structamrex_1_1DataAllocator_1a901b7f1e68950afc823ebc10c093cb94" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>m_arena</name></member>
      <member refid="classamrex_1_1BaseFab_1a66695e0608fe850a6c9d44b0e022b6ba" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>maskEQ</name></member>
      <member refid="classamrex_1_1BaseFab_1af4a8317171c537136ef82e4502e0d7d4" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>maskGE</name></member>
      <member refid="classamrex_1_1BaseFab_1a1993ea667fc5b620195bb42fe003cc1a" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>maskGT</name></member>
      <member refid="classamrex_1_1BaseFab_1aee32dcf282a28ad947aa119859ec6d9e" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>maskLE</name></member>
      <member refid="classamrex_1_1BaseFab_1a554f518d10db9e4f7ba253396479b862" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>maskLT</name></member>
      <member refid="classamrex_1_1BaseFab_1a6efb5346cc42795e6cd01323117f3ac3" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>max</name></member>
      <member refid="classamrex_1_1BaseFab_1ab361c41e09518099b2a6c9f9db1f82d1" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>max</name></member>
      <member refid="classamrex_1_1BaseFab_1a3cdfbec8bb23d2a40379cd4819adf713" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>maxabs</name></member>
      <member refid="classamrex_1_1BaseFab_1aec266e1d4d3acc521279fe612f9d5f3b" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>maxabs</name></member>
      <member refid="classamrex_1_1BaseFab_1a8284115ab508ec6b6dc1a7bd023e3b89" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1aae5d45037d346a7a7f51611396199e8e" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a2113a9b7b7bb69febe5899ccee7f37f2" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>maxIndex</name></member>
      <member refid="classamrex_1_1TagBox_1ac5bbbf73007a0bfccccc49af41deac1f" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>merge</name></member>
      <member refid="classamrex_1_1BaseFab_1ad6a70c7c49967817b489033b4d7da696" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>min</name></member>
      <member refid="classamrex_1_1BaseFab_1adb99491368f94a317ec81970c9ad2eee" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>min</name></member>
      <member refid="classamrex_1_1BaseFab_1aa0d631fbfd6b81796222a5ab5fea24d3" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a890f10daf1e245f620d079b2cbfa9a31" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a3e4a6b4a42c7a55598df8a7e2b13a567" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>minIndex</name></member>
      <member refid="classamrex_1_1BaseFab_1a7d42264ffc7e207793eb71b1c5ee9eca" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a60bbbe646ad33d21dc95bfb22f74103c" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1aa62489aa7754be3b090066f46bdaed5f" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a3dcaadf2c6b30739f68c1a68b0fc83fc" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a8d411690c6aed0087c346803c6098ee1" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a83df2f84e02851cc11fa77a7aba36084" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1a170825e946c8aea9a3ed4fab9e940c07" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>minus</name></member>
      <member refid="classamrex_1_1BaseFab_1af23b9f25700280d14eff911416af3848" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a6eca2549459c33fb59e0ab5c4a642a2d" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a92538d5f5d8c08971e67dbbcabe28260" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a8047a78e7b6408ba29d8f7f06ff1a3d9" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1ab7870ca660aae727b83bf1e945e1bb43" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a3a50b78d1cacf19ddf926f43f87fa3ef" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a96be81290af56a2de288cb67d55828e7" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1abeb5c2dca3dff6ac76fe9b15bc9f46cd" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a0390e464a60b715fb1f05256cfc4aed7" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>mult</name></member>
      <member refid="classamrex_1_1BaseFab_1a43f0ed693f7f5436621aaf9b27620c56" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1BaseFab_1ac03d6fdd6bd658196becfefc5b3b93a8" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>nBytes</name></member>
      <member refid="classamrex_1_1BaseFab_1a267006cc0717e9dfbcbd22afc1c89d8c" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>nBytesOwned</name></member>
      <member refid="classamrex_1_1BaseFab_1a7406ec91dc010602121f1492f2d3a748" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>nComp</name></member>
      <member refid="classamrex_1_1BaseFab_1af3ab7e9a7cb47a3eb41ba6a97ab2e798" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>nCompPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1adbd6149086de9c72f89c0ccd59d9490e" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a79cdb1bd32f6065f6743104596e634da" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a2b8eb006efd84556e4d5dbda0aa5b233" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1a7142a980cf28836cca63d9c7a6bdc597" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>negate</name></member>
      <member refid="classamrex_1_1BaseFab_1af72c4b534beb0143a7b0fdc7114b1a78" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>norm</name></member>
      <member refid="classamrex_1_1BaseFab_1af13ffa626053c497af1a0ba1dd9fc7ff" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>norm</name></member>
      <member refid="classamrex_1_1BaseFab_1a691a8ebd9d366bf9649472d721ff0f7b" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>norminfmask</name></member>
      <member refid="classamrex_1_1BaseFab_1aaf26c270066d314a52ccdbc5f61ea302" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>numPts</name></member>
      <member refid="classamrex_1_1TagBox_1aca71c208d9178bbe63ec06658c813616" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>numTags</name></member>
      <member refid="classamrex_1_1TagBox_1a55e1676f90f87c700cdba6ea5490f988" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>numTags</name></member>
      <member refid="classamrex_1_1BaseFab_1a99b1638f6702821a6b6e63cb860d938f" prot="protected" virt="non-virtual"><scope>amrex::TagBox</scope><name>nvar</name></member>
      <member refid="classamrex_1_1BaseFab_1ad76ae6115f341053b2eb94affc5e3eee" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1ac1a408be29fc4bfc85971ac414c165ee" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a10931b31715309bfb452dc2c7fa662df" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1a3427e5ed98498ff54da5f75d22923f5f" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>operator()</name></member>
      <member refid="classamrex_1_1BaseFab_1aebba1e20a67020bc355d1c14499eb81c" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1a4e23eb86df7e74c45ee95016fd6d8924" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>operator*=</name></member>
      <member refid="classamrex_1_1BaseFab_1a563dd4bcb0336fba813ec2faa6540938" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1a60b224a5f8dc275281b1381bcdc5e002" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>operator+=</name></member>
      <member refid="classamrex_1_1BaseFab_1acce1e32ad1db6487a96f5aa264a925b4" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1ab14c50b661f4ed91f4e6ae97ac57c113" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>operator-=</name></member>
      <member refid="classamrex_1_1BaseFab_1accb78bf00c977d2117f14477c3f54944" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1BaseFab_1a2cfbaa1b565d7d845c8b02f76fad60ce" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>operator/=</name></member>
      <member refid="classamrex_1_1TagBox_1a5c795ae93bec04fe82069450ebd7fa41" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>operator=</name></member>
      <member refid="classamrex_1_1TagBox_1af21d06fbdc2ccecc175efd767684610b" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a9a52c7475015824cfb60e6c67ecad522" prot="public" virt="non-virtual" ambiguityscope="BaseFab&lt; char &gt;::"><scope>amrex::TagBox</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1ae3101a71fce4d1d50de1fca73ff4b0f4" prot="public" virt="non-virtual" ambiguityscope="BaseFab&lt; char &gt;::"><scope>amrex::TagBox</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a0204884d2ac46b2358771eed0f327a91" prot="public" virt="non-virtual" ambiguityscope="BaseFab&lt; char &gt;::"><scope>amrex::TagBox</scope><name>operator=</name></member>
      <member refid="classamrex_1_1BaseFab_1a0fd920c6e2e2b459957c626b4b2aa5de" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a54365197ac99b879d76240ed7add9bd4" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ad198f285be177537c12cd44363df7020" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ac16db77aeb5ceacdfb630e2b82bb3c75" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a69fb8d483c7222233a809a3e2e22e7a9" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a09491463850121df06ad37523bb5e571" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1a1de73d120087c4b83136568b7470b13d" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ab595dd5c5937a2cf26edb270088a5112" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1ae74ae4f14408a1811f80dd7f363f6564" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>plus</name></member>
      <member refid="classamrex_1_1BaseFab_1acc3fa2566c4bf2de3e6f0773e3b0601b" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>prefetchToDevice</name></member>
      <member refid="classamrex_1_1BaseFab_1aea7b9b15c8959be232fa8d0b14b2b507" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>prefetchToHost</name></member>
      <member refid="classamrex_1_1BaseFab_1a533615c28e9b0903a72dde72299db946" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1ad7614319bdf4f11eb72fb625bf7bd22a" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a92093fa670aa87dca0013da6faab7ce9" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1a2c53a69db15c61fba03210237b48cd42" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>protected_divide</name></member>
      <member refid="classamrex_1_1BaseFab_1acf3b50d012730dd3521fb2be517573b9" prot="protected" virt="non-virtual"><scope>amrex::TagBox</scope><name>ptr_owner</name></member>
      <member refid="classamrex_1_1BaseFab_1a4390286fe2327bd5f0561a75ee14499b" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>release</name></member>
      <member refid="classamrex_1_1BaseFab_1a48099208f15f741c739316388f61737a" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>resize</name></member>
      <member refid="classamrex_1_1BaseFab_1aff460f2e28a2f6a1db9dd8035a13869c" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1BaseFab_1a8097fc848af279eb5460a22a4c52c690" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>saxpy</name></member>
      <member refid="classamrex_1_1TagBox_1ac8c350e6c62e1f2fd736b52d1b7caffaa0a8540b96d3e93084532672dad69790c" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>SET</name></member>
      <member refid="classamrex_1_1BaseFab_1a03513ca096ccb98cbfc04eed4ea4bf1f" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>SetBoxType</name></member>
      <member refid="classamrex_1_1BaseFab_1aede6afede165d8f14c5bedb035654c4a" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>setComplement</name></member>
      <member refid="classamrex_1_1BaseFab_1a141ba4c0b87cbaf780261ba65ac4970a" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>setComplement</name></member>
      <member refid="classamrex_1_1BaseFab_1ab55c5cdbff39b6eb2074b4846c9efb2e" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>setPtr</name></member>
      <member refid="classamrex_1_1BaseFab_1afd2b7401360a9fd6388965ac2e737297" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a2b28ac36c5be730a481212babf906ec6" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a7f7e196d1ae5afc917ccce8e77de0a3c" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a2f724e6d261f856a5d6b352032519467" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a474319b91fb346c9e930d69a8d4703f7" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>setVal</name></member>
      <member refid="classamrex_1_1BaseFab_1a0867fcf62ebed52d585448bdb99b6468" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1a060b0e3485b33a49ce5325195a21e8b2" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>setValIf</name></member>
      <member refid="classamrex_1_1BaseFab_1a8233f33a8898262b7ddb7f978925092c" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1afb8a2c9a5f4281488bb4dd47abf64d46" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1ac1b454d3dc799dbf8aacb3c48ed0de15" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>setValIfNot</name></member>
      <member refid="classamrex_1_1BaseFab_1a4e65169d29942cf3adde870d63a91834" prot="protected" virt="non-virtual"><scope>amrex::TagBox</scope><name>shared_memory</name></member>
      <member refid="classamrex_1_1BaseFab_1a92cb12158a09c20c51ef9347c11d31e4" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>shift</name></member>
      <member refid="classamrex_1_1BaseFab_1ad511764daeaedb9d3de8afc17ca7140c" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>shift</name></member>
      <member refid="classamrex_1_1BaseFab_1af9080211623ae547d4a77076be42eeba" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BaseFab_1a55589bcc8819d6c8a9291e79a05fbb81" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>shiftHalf</name></member>
      <member refid="classamrex_1_1BaseFab_1a2433222c078c64fcb8c01cab64c20566" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>size</name></member>
      <member refid="classamrex_1_1BaseFab_1a787a8e1e40a6a13728e44ccbf5a5ec5a" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>smallEnd</name></member>
      <member refid="classamrex_1_1BaseFab_1add7f10ec971a7d474f44c0d22fb4c750" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1ae46a718f3837f9b75a52220b0e47cee1" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>sum</name></member>
      <member refid="classamrex_1_1BaseFab_1ac5203569fe07a6ea8da8ece607fec738" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>sum</name></member>
      <member refid="classamrex_1_1TagBox_1adda034b74e7dc88d8cd42301b61b8285" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>TagBox</name></member>
      <member refid="classamrex_1_1TagBox_1ad999c44361969badefa168cb00e90b91" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>TagBox</name></member>
      <member refid="classamrex_1_1TagBox_1ac73a784e745d05a574f53621abd7109b" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>TagBox</name></member>
      <member refid="classamrex_1_1TagBox_1a2be163745fcfa3fae9d72a768b97d797" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>TagBox</name></member>
      <member refid="classamrex_1_1TagBox_1a00b44af3c3dc783226e28adc117e93e5" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>TagBox</name></member>
      <member refid="classamrex_1_1TagBox_1adc981d8086ea65ef19383c04acacace3" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>TagBox</name></member>
      <member refid="classamrex_1_1TagBox_1a1c163cf21eb64a1c2032d5ba1acb2594" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>TagBox</name></member>
      <member refid="classamrex_1_1TagBox_1a9023e58bfadedd84fa003f9b10712949" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>tags</name></member>
      <member refid="classamrex_1_1TagBox_1a194d49c2adb475dabf1de3a7bc717b7a" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>tags</name></member>
      <member refid="classamrex_1_1TagBox_1a4e225aa2595e49382cb2db00df813d8c" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>tags</name></member>
      <member refid="classamrex_1_1TagBox_1af03179052f9fb5a076f95d2bb33e94e2" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>tags_and_untags</name></member>
      <member refid="classamrex_1_1TagBox_1abbc0728a20e92cbaf06b19a0b9cff0cd" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>tags_and_untags</name></member>
      <member refid="classamrex_1_1TagBox_1aa3eab6b001470948ab883ec074459049" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>TagType</name></member>
      <member refid="classamrex_1_1TagBox_1ac8c350e6c62e1f2fd736b52d1b7caffa" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>TagVal</name></member>
      <member refid="classamrex_1_1BaseFab_1aca58ac4ae57851e2883c84963ee6c331" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>Transform</name></member>
      <member refid="classamrex_1_1BaseFab_1a105ef076b58438b9238767a574847646" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>Transform</name></member>
      <member refid="classamrex_1_1BaseFab_1aa86e53b5d3afdae2606ab0be640bb022" prot="protected" virt="non-virtual"><scope>amrex::TagBox</scope><name>truesize</name></member>
      <member refid="classamrex_1_1BaseFab_1aac8f37b7bba5334a86bf90b58fb062d8" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>value_type</name></member>
      <member refid="classamrex_1_1BaseFab_1a0ad9ef3212349a9c484eebaddf3ef039" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a76735e86616929030b8383a78bddaaa4" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a238a6ce02380dda577a844bd9250d109" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a5dac991f61637eb0b5ad077ea132e84f" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1acfe35cfcc6bbf643ad67ce6cc092b40b" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a3483f3893ec878a491276fae68f5062e" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a639592b0b04292117d406f9dc764cf1d" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1ac307f7499cb98666f3e625dc6165d380" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a4c6ac97444b2e697b2389738e9e64052" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a98f6f0536d0fafa36d94868dcfd83a37" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>view</name></member>
      <member refid="classamrex_1_1BaseFab_1a23defcb11ee91b350b1edf9850aba0ec" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>xpay</name></member>
      <member refid="classamrex_1_1BaseFab_1acf7c1ac49465810a70b9ae1757263f30" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>~BaseFab</name></member>
      <member refid="classamrex_1_1TagBox_1afe1db412d36741917d888ebca4214b0a" prot="public" virt="non-virtual"><scope>amrex::TagBox</scope><name>~TagBox</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
