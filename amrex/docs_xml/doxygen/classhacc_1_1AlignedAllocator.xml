<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classhacc_1_1AlignedAllocator" kind="class" language="C++" prot="public">
    <compoundname>hacc::AlignedAllocator</compoundname>
    <includes refid="AlignedAllocator_8h" local="no">AlignedAllocator.h</includes>
    <innerclass refid="structhacc_1_1AlignedAllocator_1_1rebind" prot="public">hacc::AlignedAllocator::rebind</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>size_t</type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classhacc_1_1AlignedAllocator_1ac9a51efd884cb5eb1e8ec10d6fff7d41" prot="public" static="no">
        <type>T</type>
        <definition>typedef T hacc::AlignedAllocator&lt; T, N &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" line="68" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhacc_1_1AlignedAllocator_1a8a10b255de4c608b3775a315e409ef8d" prot="public" static="no">
        <type>T *</type>
        <definition>typedef T* hacc::AlignedAllocator&lt; T, N &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" line="69" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhacc_1_1AlignedAllocator_1a5830ffb5779f9588ce9f9040b4ac5db7" prot="public" static="no">
        <type>T &amp;</type>
        <definition>typedef T&amp; hacc::AlignedAllocator&lt; T, N &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" line="70" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhacc_1_1AlignedAllocator_1a812e592e52eb4338a35980a143facdfc" prot="public" static="no">
        <type>const T *</type>
        <definition>typedef const T* hacc::AlignedAllocator&lt; T, N &gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" line="71" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhacc_1_1AlignedAllocator_1aa04ae438c2088c702d3de3816d4f7db5" prot="public" static="no">
        <type>const T &amp;</type>
        <definition>typedef const T&amp; hacc::AlignedAllocator&lt; T, N &gt;::const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" line="72" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhacc_1_1AlignedAllocator_1ad6bd455548ae6962f2293a67aa289721" prot="public" static="no">
        <type>size_t</type>
        <definition>typedef size_t hacc::AlignedAllocator&lt; T, N &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" line="73" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhacc_1_1AlignedAllocator_1aa85cb38a8a671ea721f4f8d96b5d061e" prot="public" static="no">
        <type>ptrdiff_t</type>
        <definition>typedef ptrdiff_t hacc::AlignedAllocator&lt; T, N &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" line="74" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhacc_1_1AlignedAllocator_1a761f44c4b8f456d6d016c21afb436091" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hacc::AlignedAllocator&lt; T, N &gt;::AlignedAllocator</definition>
        <argsstring>()</argsstring>
        <name>AlignedAllocator</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" line="82" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classhacc_1_1AlignedAllocator_1a004c400f85ee6563f3c4178d4ee62f77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hacc::AlignedAllocator&lt; T, N &gt;::AlignedAllocator</definition>
        <argsstring>(const AlignedAllocator &amp;)</argsstring>
        <name>AlignedAllocator</name>
        <param>
          <type>const <ref refid="classhacc_1_1AlignedAllocator" kindref="compound">AlignedAllocator</ref> &amp;</type>
        </param>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" line="83" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classhacc_1_1AlignedAllocator_1aa80f9621109e48a22cbd1561d2024677" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>M</declname>
            <defname>M</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>hacc::AlignedAllocator&lt; T, N &gt;::AlignedAllocator</definition>
        <argsstring>(const AlignedAllocator&lt; U, M &gt; &amp;)</argsstring>
        <name>AlignedAllocator</name>
        <param>
          <type>const <ref refid="classhacc_1_1AlignedAllocator" kindref="compound">AlignedAllocator</ref>&lt; U, M &gt; &amp;</type>
        </param>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" line="86" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classhacc_1_1AlignedAllocator_1a3a710f683b06d92478d4dd13cd49b79f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hacc::AlignedAllocator&lt; T, N &gt;::~AlignedAllocator</definition>
        <argsstring>()</argsstring>
        <name>~AlignedAllocator</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" line="89" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classhacc_1_1AlignedAllocator_1a073803473e1b799d73bd5522e87b9fdd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhacc_1_1AlignedAllocator_1a8a10b255de4c608b3775a315e409ef8d" kindref="member">pointer</ref></type>
        <definition>pointer hacc::AlignedAllocator&lt; T, N &gt;::address</definition>
        <argsstring>(reference x) const</argsstring>
        <name>address</name>
        <param>
          <type><ref refid="classhacc_1_1AlignedAllocator_1a5830ffb5779f9588ce9f9040b4ac5db7" kindref="member">reference</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" line="92" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classhacc_1_1AlignedAllocator_1a5126ad48b8c7fe68b3b1e232a3c28901" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhacc_1_1AlignedAllocator_1a812e592e52eb4338a35980a143facdfc" kindref="member">const_pointer</ref></type>
        <definition>const_pointer hacc::AlignedAllocator&lt; T, N &gt;::address</definition>
        <argsstring>(const_reference x) const</argsstring>
        <name>address</name>
        <param>
          <type><ref refid="classhacc_1_1AlignedAllocator_1aa04ae438c2088c702d3de3816d4f7db5" kindref="member">const_reference</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" line="93" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classhacc_1_1AlignedAllocator_1a2d07c9246eff9fc235e24ac818e3c473" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhacc_1_1AlignedAllocator_1ad6bd455548ae6962f2293a67aa289721" kindref="member">size_type</ref></type>
        <definition>size_type hacc::AlignedAllocator&lt; T, N &gt;::max_size</definition>
        <argsstring>() const</argsstring>
        <name>max_size</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" line="95" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classhacc_1_1AlignedAllocator_1adb796755df810806e1a03865482fc669" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hacc::AlignedAllocator&lt; T, N &gt;::construct</definition>
        <argsstring>(pointer p, const_reference val)</argsstring>
        <name>construct</name>
        <param>
          <type><ref refid="classhacc_1_1AlignedAllocator_1a8a10b255de4c608b3775a315e409ef8d" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classhacc_1_1AlignedAllocator_1aa04ae438c2088c702d3de3816d4f7db5" kindref="member">const_reference</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" line="97" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classhacc_1_1AlignedAllocator_1a5d7df6a37fdfcef93d371c3044f424d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hacc::AlignedAllocator&lt; T, N &gt;::destroy</definition>
        <argsstring>(pointer p)</argsstring>
        <name>destroy</name>
        <param>
          <type><ref refid="classhacc_1_1AlignedAllocator_1a8a10b255de4c608b3775a315e409ef8d" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" line="98" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classhacc_1_1AlignedAllocator_1aa3873295a150cc0fbed2a47c7db9caad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhacc_1_1AlignedAllocator_1a8a10b255de4c608b3775a315e409ef8d" kindref="member">pointer</ref></type>
        <definition>pointer hacc::AlignedAllocator&lt; T, N &gt;::allocate</definition>
        <argsstring>(size_type n, const void *=0)</argsstring>
        <name>allocate</name>
        <param>
          <type><ref refid="classhacc_1_1AlignedAllocator_1ad6bd455548ae6962f2293a67aa289721" kindref="member">size_type</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" line="101" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" bodystart="101" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classhacc_1_1AlignedAllocator_1ad5df7bcf7989386441a7b8fc73a81cc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hacc::AlignedAllocator&lt; T, N &gt;::deallocate</definition>
        <argsstring>(pointer p, size_type n)</argsstring>
        <name>deallocate</name>
        <param>
          <type><ref refid="classhacc_1_1AlignedAllocator_1a8a10b255de4c608b3775a315e409ef8d" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classhacc_1_1AlignedAllocator_1ad6bd455548ae6962f2293a67aa289721" kindref="member">size_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" line="112" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" bodystart="112" bodyend="115"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" line="66" column="1" bodyfile="/home/runner/work/amrex/amrex/Src/Extern/SWFFT/AlignedAllocator.h" bodystart="65" bodyend="116"/>
    <listofallmembers>
      <member refid="classhacc_1_1AlignedAllocator_1a073803473e1b799d73bd5522e87b9fdd" prot="public" virt="non-virtual"><scope>hacc::AlignedAllocator</scope><name>address</name></member>
      <member refid="classhacc_1_1AlignedAllocator_1a5126ad48b8c7fe68b3b1e232a3c28901" prot="public" virt="non-virtual"><scope>hacc::AlignedAllocator</scope><name>address</name></member>
      <member refid="classhacc_1_1AlignedAllocator_1a761f44c4b8f456d6d016c21afb436091" prot="public" virt="non-virtual"><scope>hacc::AlignedAllocator</scope><name>AlignedAllocator</name></member>
      <member refid="classhacc_1_1AlignedAllocator_1a004c400f85ee6563f3c4178d4ee62f77" prot="public" virt="non-virtual"><scope>hacc::AlignedAllocator</scope><name>AlignedAllocator</name></member>
      <member refid="classhacc_1_1AlignedAllocator_1aa80f9621109e48a22cbd1561d2024677" prot="public" virt="non-virtual"><scope>hacc::AlignedAllocator</scope><name>AlignedAllocator</name></member>
      <member refid="classhacc_1_1AlignedAllocator_1aa3873295a150cc0fbed2a47c7db9caad" prot="public" virt="non-virtual"><scope>hacc::AlignedAllocator</scope><name>allocate</name></member>
      <member refid="classhacc_1_1AlignedAllocator_1a812e592e52eb4338a35980a143facdfc" prot="public" virt="non-virtual"><scope>hacc::AlignedAllocator</scope><name>const_pointer</name></member>
      <member refid="classhacc_1_1AlignedAllocator_1aa04ae438c2088c702d3de3816d4f7db5" prot="public" virt="non-virtual"><scope>hacc::AlignedAllocator</scope><name>const_reference</name></member>
      <member refid="classhacc_1_1AlignedAllocator_1adb796755df810806e1a03865482fc669" prot="public" virt="non-virtual"><scope>hacc::AlignedAllocator</scope><name>construct</name></member>
      <member refid="classhacc_1_1AlignedAllocator_1ad5df7bcf7989386441a7b8fc73a81cc4" prot="public" virt="non-virtual"><scope>hacc::AlignedAllocator</scope><name>deallocate</name></member>
      <member refid="classhacc_1_1AlignedAllocator_1a5d7df6a37fdfcef93d371c3044f424d3" prot="public" virt="non-virtual"><scope>hacc::AlignedAllocator</scope><name>destroy</name></member>
      <member refid="classhacc_1_1AlignedAllocator_1aa85cb38a8a671ea721f4f8d96b5d061e" prot="public" virt="non-virtual"><scope>hacc::AlignedAllocator</scope><name>difference_type</name></member>
      <member refid="classhacc_1_1AlignedAllocator_1a2d07c9246eff9fc235e24ac818e3c473" prot="public" virt="non-virtual"><scope>hacc::AlignedAllocator</scope><name>max_size</name></member>
      <member refid="classhacc_1_1AlignedAllocator_1a8a10b255de4c608b3775a315e409ef8d" prot="public" virt="non-virtual"><scope>hacc::AlignedAllocator</scope><name>pointer</name></member>
      <member refid="classhacc_1_1AlignedAllocator_1a5830ffb5779f9588ce9f9040b4ac5db7" prot="public" virt="non-virtual"><scope>hacc::AlignedAllocator</scope><name>reference</name></member>
      <member refid="classhacc_1_1AlignedAllocator_1ad6bd455548ae6962f2293a67aa289721" prot="public" virt="non-virtual"><scope>hacc::AlignedAllocator</scope><name>size_type</name></member>
      <member refid="classhacc_1_1AlignedAllocator_1ac9a51efd884cb5eb1e8ec10d6fff7d41" prot="public" virt="non-virtual"><scope>hacc::AlignedAllocator</scope><name>value_type</name></member>
      <member refid="classhacc_1_1AlignedAllocator_1a3a710f683b06d92478d4dd13cd49b79f" prot="public" virt="non-virtual"><scope>hacc::AlignedAllocator</scope><name>~AlignedAllocator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
