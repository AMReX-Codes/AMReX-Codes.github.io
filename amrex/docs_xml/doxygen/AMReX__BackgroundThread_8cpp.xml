<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="AMReX__BackgroundThread_8cpp" kind="file" language="C++">
    <compoundname>AMReX_BackgroundThread.cpp</compoundname>
    <includes refid="AMReX__BackgroundThread_8H" local="no">AMReX_BackgroundThread.H</includes>
    <incdepgraph>
      <node id="8667">
        <label>functional</label>
      </node>
      <node id="8670">
        <label>queue</label>
      </node>
      <node id="8664">
        <label>AMReX_BackgroundThread.H</label>
        <link refid="AMReX__BackgroundThread_8H"/>
        <childnode refid="8665" relation="include">
        </childnode>
        <childnode refid="8666" relation="include">
        </childnode>
        <childnode refid="8667" relation="include">
        </childnode>
        <childnode refid="8668" relation="include">
        </childnode>
        <childnode refid="8669" relation="include">
        </childnode>
        <childnode refid="8670" relation="include">
        </childnode>
        <childnode refid="8671" relation="include">
        </childnode>
      </node>
      <node id="8666">
        <label>condition_variable</label>
      </node>
      <node id="8663">
        <label>/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BackgroundThread.cpp</label>
        <link refid="AMReX_BackgroundThread.cpp"/>
        <childnode refid="8664" relation="include">
        </childnode>
      </node>
      <node id="8669">
        <label>mutex</label>
      </node>
      <node id="8671">
        <label>thread</label>
      </node>
      <node id="8665">
        <label>algorithm</label>
      </node>
      <node id="8668">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceamrex">amrex</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="AMReX__BackgroundThread_8H" kindref="compound">AMReX_BackgroundThread.H</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceamrex" kindref="compound">amrex</ref><sp/>{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"><ref refid="classamrex_1_1BackgroundThread_1a276804e5d463c6c46c248701f73f18c7" kindref="member">BackgroundThread::BackgroundThread</ref><sp/>()</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BackgroundThread_1a3093fd845f22fd2dd628aca6a442851f" kindref="member">m_thread</ref>.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::thread(&amp;<ref refid="classamrex_1_1BackgroundThread_1a7ef8784994644d4a4fa8a46205610b2b" kindref="member">BackgroundThread::do_job</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="8"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><ref refid="classamrex_1_1BackgroundThread_1ab5ad8734e492ca7784f7fa8af2d4c29e" kindref="member">BackgroundThread::~BackgroundThread</ref><sp/>()</highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1BackgroundThread_1a3093fd845f22fd2dd628aca6a442851f" kindref="member">m_thread</ref>)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BackgroundThread_1a31e717cddbcc5e4079da2d35d11a5c68" kindref="member">Submit</ref>([</highlight><highlight class="keyword">this</highlight><highlight class="normal">]<sp/>()<sp/>{<sp/><ref refid="classamrex_1_1BackgroundThread_1a3011c472d16bad3f2fb7f8749dfb31f4" kindref="member">m_finalizing</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>});</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BackgroundThread_1a3093fd845f22fd2dd628aca6a442851f" kindref="member">m_thread</ref>-&gt;join();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BackgroundThread_1a3093fd845f22fd2dd628aca6a442851f" kindref="member">m_thread</ref>.reset();</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1BackgroundThread_1a7ef8784994644d4a4fa8a46205610b2b" kindref="member">BackgroundThread::do_job</ref><sp/>()</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lck(<ref refid="classamrex_1_1BackgroundThread_1a9f33f06880c6b03a62b70fd559ab53df" kindref="member">m_mutx</ref>);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BackgroundThread_1a71752cb305b9ed234397d1575b5c679b" kindref="member">m_job_cond</ref>.wait(lck,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]<sp/>()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="classamrex_1_1BackgroundThread_1ab67b8bb7e25e2ed11cc2232a777835fd" kindref="member">m_func</ref>.empty();<sp/>});</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/><ref refid="classamrex_1_1BackgroundThread_1ab67b8bb7e25e2ed11cc2232a777835fd" kindref="member">m_func</ref>.front();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BackgroundThread_1ab67b8bb7e25e2ed11cc2232a777835fd" kindref="member">m_func</ref>.pop();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lck.unlock();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1BackgroundThread_1a50eaee402e1e16b45a4e535eda4f2860" kindref="member">m_clearing</ref>)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>All<sp/>jobs<sp/>before<sp/>this<sp/>have<sp/>finished.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BackgroundThread_1adbb640d4685fec31cf46171b7833a059" kindref="member">m_done_cond</ref>.notify_one();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1BackgroundThread_1a3011c472d16bad3f2fb7f8749dfb31f4" kindref="member">m_finalizing</ref>)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1BackgroundThread_1a31e717cddbcc5e4079da2d35d11a5c68" kindref="member">BackgroundThread::Submit</ref><sp/>(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;&amp;&amp;<sp/>a_f)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lck(<ref refid="classamrex_1_1BackgroundThread_1a9f33f06880c6b03a62b70fd559ab53df" kindref="member">m_mutx</ref>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BackgroundThread_1ab67b8bb7e25e2ed11cc2232a777835fd" kindref="member">m_func</ref>.emplace(std::move(a_f));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BackgroundThread_1a71752cb305b9ed234397d1575b5c679b" kindref="member">m_job_cond</ref>.notify_one();</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1BackgroundThread_1a31e717cddbcc5e4079da2d35d11a5c68" kindref="member">BackgroundThread::Submit</ref><sp/>(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">()&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>a_f)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lck(<ref refid="classamrex_1_1BackgroundThread_1a9f33f06880c6b03a62b70fd559ab53df" kindref="member">m_mutx</ref>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BackgroundThread_1ab67b8bb7e25e2ed11cc2232a777835fd" kindref="member">m_func</ref>.emplace(a_f);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BackgroundThread_1a71752cb305b9ed234397d1575b5c679b" kindref="member">m_job_cond</ref>.notify_one();</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1BackgroundThread_1a1087e92b5b216fe4574e45078338cd51" kindref="member">BackgroundThread::Finish</ref><sp/>()</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classamrex_1_1BackgroundThread_1a3093fd845f22fd2dd628aca6a442851f" kindref="member">m_thread</ref>)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BackgroundThread_1a31e717cddbcc5e4079da2d35d11a5c68" kindref="member">Submit</ref>([</highlight><highlight class="keyword">this</highlight><highlight class="normal">]<sp/>()<sp/>{<sp/><ref refid="classamrex_1_1BackgroundThread_1a50eaee402e1e16b45a4e535eda4f2860" kindref="member">m_clearing</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>});</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lck(<ref refid="classamrex_1_1BackgroundThread_1a9f33f06880c6b03a62b70fd559ab53df" kindref="member">m_mutx</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BackgroundThread_1adbb640d4685fec31cf46171b7833a059" kindref="member">m_done_cond</ref>.wait(lck,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]<sp/>()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classamrex_1_1BackgroundThread_1ab67b8bb7e25e2ed11cc2232a777835fd" kindref="member">m_func</ref>.empty();<sp/>});</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classamrex_1_1BackgroundThread_1a50eaee402e1e16b45a4e535eda4f2860" kindref="member">m_clearing</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lck.unlock();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/AMReX-Codes/amrex/Src/Base/AMReX_BackgroundThread.cpp"/>
  </compounddef>
</doxygen>
